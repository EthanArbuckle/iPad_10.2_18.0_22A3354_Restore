void sub_1E063A84C()
{
  JUMPOUT(0x1E063A904);
}

void sub_1E063A854()
{
  unint64_t v0;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x258]);
  v0 = STACK[0x3E0];
  STACK[0x3E0] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3C0]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  STACK[0x3F0] = (unint64_t)&STACK[0x420];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3F0]);
  JUMPOUT(0x1E063A924);
}

void `anonymous namespace'::GetOperatorType(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t size;
  std::string *v5;
  unsigned __int8 v6;
  void **v7;
  int64_t v8;
  char *v9;
  int v10;
  std::string *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  void *__p[2];
  unsigned __int8 v17;

  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
    size = a1->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v5 = a1;
  }
  v6 = v17;
  if ((v17 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (int64_t)__p[1];
  if (v8)
  {
    if (size >= v8)
    {
      v9 = (char *)v5 + size;
      v10 = *(char *)v7;
      v11 = v5;
      do
      {
        v12 = size - v8;
        if (v12 == -1)
          break;
        v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13)
          break;
        v14 = v13;
        if (!memcmp(v13, v7, v8))
        {
          if (v14 != v9)
          {
            v15 = v14 - (char *)v5;
            if (v14 - (char *)v5 != -1)
              goto LABEL_19;
          }
          break;
        }
        v11 = (std::string *)(v14 + 1);
        size = v9 - (v14 + 1);
      }
      while (size >= v8);
    }
  }
  else
  {
    v15 = 0;
LABEL_19:
    std::string::erase(a1, 0, v15 + v8);
    v6 = v17;
  }
  *(_OWORD *)a2 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&a1->__r_.__value_.__l + 2);
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if ((v6 & 0x80) != 0)
    operator delete(__p[0]);
}

void sub_1E063AAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::InferOutputsForNestedBlocks(MIL::Builder::OperationBuilder *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  MIL::Builder::BlockBuilder *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  MIL::Builder::Variable::VariableImpl ***v21;
  MIL::Builder::Variable::VariableImpl ***v22;
  MIL::Builder::Variable::VariableImpl **v23;
  unsigned __int8 *Name;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t ValueType;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  MIL::Builder::Variable::VariableImpl *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *LocationPtr;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  void **v75;
  void **v76;
  void **v77;
  uint64_t v80;
  void *v81[2];
  char v82;
  __int128 v83;
  void *__p;
  char v85;
  __int128 v86;
  void **v87[11];
  char v88;
  uint64_t v89;
  void *v90[2];
  char v91;
  __int128 v92;
  MIL::Builder::Variable::VariableImpl ***v93;
  MIL::Builder::Variable::VariableImpl ***v94;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  MIL::Builder::BlockBuilder *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  uint64_t v101;

  MIL::Builder::OperationBuilder::GetBlocks(this, (uint64_t)&v100);
  v12 = v100;
  v13 = v101;
  if (v100 == v101)
  {
LABEL_93:
    v87[0] = (void **)&v100;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v87);
    LocationPtr = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(this);
    v69 = LocationPtr[1];
    *(_QWORD *)&v83 = *LocationPtr;
    *((_QWORD *)&v83 + 1) = v69;
    if (v69)
    {
      v70 = (unint64_t *)(v69 + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    std::string::basic_string[abi:ne180100]<0>(v81, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a7, &v83, 2, (uint64_t)v81);
    if (v82 < 0)
      operator delete(v81[0]);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    return;
  }
  v76 = *(void ***)(MEMORY[0x1E0DE4F60] + 24);
  v77 = (void **)*MEMORY[0x1E0DE4F60];
  v75 = (void **)(MEMORY[0x1E0DE4FB8] + 16);
  v80 = v101;
  while (2)
  {
    v14 = *(MIL::Builder::BlockBuilder **)v12;
    v15 = *(std::__shared_weak_count **)(v12 + 8);
    v98 = *(MIL::Builder::BlockBuilder **)v12;
    v99 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (*(_DWORD *)(a7 + 48) != 2)
    {
      v42 = 1;
      if (v15)
        goto LABEL_87;
      goto LABEL_91;
    }
    v18 = a2;
    v19 = a3;
    v20 = a6;
    MIL::MILResult::~MILResult((void **)a7);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    MIL::Builder::BlockBuilder::GetOutputs((MIL::Builder::BlockBuilder::BlockBuilderImpl **)v14, (void **)&v93);
    v22 = v93;
    v21 = v94;
    if (v93 == v94)
    {
      v42 = 4;
      v43 = 1;
      if (v93)
        goto LABEL_78;
      goto LABEL_79;
    }
    while (1)
    {
      v23 = *v22;
      if (!*v22)
        break;
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(*v22);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, Name))
      {
        v25 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v23);
        v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v25);
        if (!v26)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        ValueType = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v26 + 5));
        v28 = v96;
        if (v96 >= (uint64_t *)v97)
        {
          v29 = v96 - v95;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v30 = (v97 - (char *)v95) >> 2;
          if (v30 <= v29 + 1)
            v30 = v29 + 1;
          if ((unint64_t)(v97 - (char *)v95) >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v97, v31);
          else
            v32 = 0;
          v36 = (uint64_t *)&v32[8 * v29];
          *v36 = ValueType;
          v33 = v36 + 1;
          v38 = (char *)v95;
          v37 = (char *)v96;
          if (v96 != v95)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v36 = v39;
            }
            while (v37 != v38);
            goto LABEL_38;
          }
          goto LABEL_39;
        }
      }
      else
      {
        ValueType = MIL::Builder::Variable::TryGetType(v23);
        if (!ValueType)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v87);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"Could not deduce type of nested block output: ", 46);
          v52 = MIL::Builder::Variable::GetName(v23);
          v53 = *((char *)v52 + 23);
          if (v53 >= 0)
            v54 = (uint64_t)v52;
          else
            v54 = *(_QWORD *)v52;
          if (v53 >= 0)
            v55 = *((unsigned __int8 *)v52 + 23);
          else
            v55 = *((_QWORD *)v52 + 1);
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v54, v55);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)".", 1);
          v57 = (_QWORD *)MIL::Builder::BlockBuilder::GetLocationPtr(v98);
          v58 = v57[1];
          *(_QWORD *)&v86 = *v57;
          *((_QWORD *)&v86 + 1) = v58;
          if (v58)
          {
            v59 = (unint64_t *)(v58 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a7, &v86, 3, (uint64_t)&__p);
          if (v85 < 0)
            operator delete(__p);
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
          if (*((_QWORD *)&v86 + 1))
          {
            v62 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v87[0] = v77;
          *(void ***)((char *)v87 + (_QWORD)*(v77 - 3)) = v76;
          v87[1] = v75;
          if (v88 < 0)
            operator delete(v87[9]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1E0C022F8](&v89);
          goto LABEL_76;
        }
        v28 = v96;
        if (v96 >= (uint64_t *)v97)
        {
          v34 = v96 - v95;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v35 = (v97 - (char *)v95) >> 2;
          if (v35 <= v34 + 1)
            v35 = v34 + 1;
          if ((unint64_t)(v97 - (char *)v95) >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v35;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v97, v31);
          else
            v32 = 0;
          v36 = (uint64_t *)&v32[8 * v34];
          *v36 = ValueType;
          v33 = v36 + 1;
          v40 = (char *)v95;
          v37 = (char *)v96;
          if (v96 != v95)
          {
            do
            {
              v41 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v36 = v41;
            }
            while (v37 != v40);
LABEL_38:
            v37 = (char *)v95;
          }
LABEL_39:
          v95 = v36;
          v96 = v33;
          v97 = &v32[8 * v31];
          if (v37)
            operator delete(v37);
          goto LABEL_41;
        }
      }
      *v28 = ValueType;
      v33 = v28 + 1;
LABEL_41:
      v96 = v33;
      if (++v22 == v21)
      {
        v42 = 4;
        v43 = 1;
        goto LABEL_77;
      }
    }
    v44 = (_QWORD *)MIL::Builder::BlockBuilder::GetLocationPtr(v98);
    v45 = v44[1];
    *(_QWORD *)&v92 = *v44;
    *((_QWORD *)&v92 + 1) = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(v90, "No Variable for Block output.");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a7, &v92, 3, (uint64_t)v90);
    if (v91 < 0)
      operator delete(v90[0]);
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
LABEL_76:
    v43 = 0;
    v42 = 1;
LABEL_77:
    v22 = v93;
    if (v93)
    {
LABEL_78:
      v94 = v22;
      operator delete(v22);
    }
LABEL_79:
    if (v43)
    {
      v64 = a5[1];
      if (v64 >= a5[2])
      {
        v65 = std::vector<std::vector<MIL::IRValueType const*>>::__push_back_slow_path<std::vector<MIL::IRValueType const*> const&>(a5, (uint64_t)&v95);
      }
      else
      {
        std::vector<std::vector<MIL::IRValueType const*>>::__construct_one_at_end[abi:ne180100]<std::vector<MIL::IRValueType const*> const&>((uint64_t)a5, (uint64_t)&v95);
        v65 = v64 + 24;
      }
      v42 = 0;
      a5[1] = v65;
    }
    if (v95)
    {
      v96 = v95;
      operator delete(v95);
    }
    v15 = v99;
    a6 = v20;
    a3 = v19;
    a2 = v18;
    v13 = v80;
    if (v99)
    {
LABEL_87:
      v66 = (unint64_t *)&v15->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
LABEL_91:
    if (!v42)
    {
      v12 += 16;
      if (v12 == v13)
        goto LABEL_93;
      continue;
    }
    break;
  }
  v87[0] = (void **)&v100;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v87);
}

void sub_1E063B118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  if (a32 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::ostringstream::~ostringstream((uint64_t)&a35);
  v37 = *(void **)(v35 - 176);
  if (v37)
  {
    *(_QWORD *)(v35 - 168) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v35 - 152);
  if (v38)
  {
    *(_QWORD *)(v35 - 144) = v38;
    operator delete(v38);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v35 - 128);
  a35 = v35 - 112;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::AttemptTypeInferenceWithValues(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t OwningBlock;
  _QWORD *v9;
  MIL::Builder::Variable::VariableImpl **v10;
  unsigned __int8 *Name;
  uint64_t Operator;
  uint64_t v13;
  std::string *v14;
  int data;
  int v16;
  _BOOL4 v19;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string __p;
  std::string v25;
  MIL::Builder::OperationBuilder *v26;
  std::__shared_weak_count *v27;
  _BYTE v28[16];
  _QWORD *v29;

  if ((MIL::Builder::OperationBuilder::IsVisited((MIL::Builder::OperationBuilder *)*a2) & 1) == 0)
  {
    MIL::Builder::OperationBuilder::SetVisited(*a2, 1);
    OwningBlock = MIL::Builder::OperationBuilder::GetOwningBlock((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*a2);
    MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*a2, (uint64_t)v28);
    v9 = v29;
    if (v29)
    {
      while (1)
      {
        v10 = (MIL::Builder::Variable::VariableImpl **)v9[2];
        if (MIL::Builder::Variable::TryGetName(v10))
          break;
LABEL_44:
        v9 = (_QWORD *)*v9;
        if (!v9)
          goto LABEL_45;
      }
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v10);
      MIL::Builder::BlockBuilder::TryGetOperation(OwningBlock, Name, &v26);
      if (!v26)
      {
LABEL_39:
        v21 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        goto LABEL_44;
      }
      Operator = MIL::Builder::OperationBuilder::GetOperator(v26);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
      MIL::ValueTypeInferenceUtils::GetOperatorType(v13, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v25.__r_.__value_.__l.__size_ != 5)
          goto LABEL_14;
        v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_14;
        v14 = &v25;
      }
      data = (int)v14->__r_.__value_.__l.__data_;
      v16 = v14->__r_.__value_.__s.__data_[4];
      if (data == 1885431923 && v16 == 101)
      {
        v19 = 1;
        if ((*((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_35;
        goto LABEL_37;
      }
LABEL_14:
      MIL::ValueTypeInferenceUtils::GetOperatorType(v13, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v19 = __p.__r_.__value_.__l.__size_ == 5
           && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1936617315
           && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 4) == 116;
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 5
           && LODWORD(__p.__r_.__value_.__l.__data_) == 1936617315
           && __p.__r_.__value_.__s.__data_[4] == 116;
      }
      if ((*((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_35:
        if (v19)
        {
LABEL_36:
          MIL::ValueTypeInferenceUtils::MixedOpTypeinference(a1, (uint64_t)&v26, a3, a4);
          goto LABEL_39;
        }
        goto LABEL_38;
      }
LABEL_37:
      operator delete(v25.__r_.__value_.__l.__data_);
      if (v19)
        goto LABEL_36;
LABEL_38:
      goto LABEL_39;
    }
LABEL_45:
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v28);
    MIL::ValueTypeInferenceUtils::MixedOpTypeinference(a1, (uint64_t)a2, a3, a4);
  }
}

void sub_1E063B45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<MIL::IRTypedArgument>>::emplace_back<std::shared_ptr<MIL::IRTypedArgument> const&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

uint64_t std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__emplace_back_slow_path<std::unique_ptr<MIL::IRTypedArgument>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  std::shared_ptr<MIL::IRTypedArgument>::shared_ptr[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1E063B6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::IRTypedArgument>::shared_ptr[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA994910;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void `anonymous namespace'::PropagateNewTypesThroughWhileBlocks(MIL::Builder::OperationBuilder *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  MIL::Builder::BlockBuilder::BlockBuilderImpl **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *LocationPtr;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  void *v50[2];
  char v51;
  __int128 v52;
  void *v53[2];
  char v54;
  __int128 v55;
  void *__p[2];
  char v57;
  __int128 v58;
  std::vector<std::string> v59;
  MIL::Builder::BlockBuilder::BlockBuilderImpl **v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  void **v65[2];

  MIL::Builder::OperationBuilder::GetBlocks(this, (uint64_t)&v62);
  v10 = v62;
  v11 = v63;
  if (v62 == v63)
  {
LABEL_30:
    v59.__begin_ = (std::vector<std::string>::pointer)&v62;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if (*(_DWORD *)(a8 + 48) != 2)
      return;
    MIL::MILResult::~MILResult((void **)a8);
    v32 = a6[1] - *a6;
    LocationPtr = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(this);
    if (v32 == 48)
    {
      v34 = LocationPtr[1];
      *(_QWORD *)&v52 = *LocationPtr;
      *((_QWORD *)&v52 + 1) = v34;
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::string::basic_string[abi:ne180100]<0>(v50, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a8, &v52, 2, (uint64_t)v50);
      if (v51 < 0)
        operator delete(v50[0]);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (!*((_QWORD *)&v52 + 1))
        return;
      v38 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
    }
    else
    {
      v40 = LocationPtr[1];
      *(_QWORD *)&v55 = *LocationPtr;
      *((_QWORD *)&v55 + 1) = v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      std::string::basic_string[abi:ne180100]<0>(v53, "Invalid number of nested blocks from while_loop");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a8, &v55, 3, (uint64_t)v53);
      if (v54 < 0)
        operator delete(v53[0]);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
      if (!*((_QWORD *)&v55 + 1))
        return;
      v43 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v39 = __ldaxr(v43);
      while (__stlxr(v39 - 1, v43));
    }
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    return;
  }
  while (1)
  {
    v12 = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ***)v10;
    v13 = *(std::__shared_weak_count **)(v10 + 8);
    v60 = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ***)v10;
    v61 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    MIL::Builder::BlockBuilder::GetInputNames(v12, &v59);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3);
    if (v16 == v17)
    {
      if (v59.__end_ != v59.__begin_)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          if (v19 >= (uint64_t)(a4[1] - *a4) >> 3)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          MIL::IRTypedArgument::Make(*(MIL::IRTypedArgument **)(*a4 + 8 * v19), v65);
          v64 = &v59.__begin_[v18];
          v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)&v59.__begin_[v18], (uint64_t)&std::piecewise_construct, (__int128 **)&v64);
          std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v20 + 5, (uint64_t *)v65);
          v21 = v65[0];
          v65[0] = 0;
          if (v21)
            (*((void (**)(void **))*v21 + 1))(v21);
          ++v19;
          ++v18;
        }
        while (v19 < 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3));
      }
    }
    else
    {
      v22 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(this);
      v23 = v22[1];
      *(_QWORD *)&v58 = *v22;
      *((_QWORD *)&v58 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch between while block input size and types to propagate");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a8, &v58, 5, (uint64_t)__p);
      if (v57 < 0)
        operator delete(__p[0]);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
      if (*((_QWORD *)&v58 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    v65[0] = (void **)&v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v65);
    v29 = v61;
    if (v61)
    {
      v30 = (unint64_t *)&v61->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v16 != v17)
      break;
    v10 += 16;
    if (v10 == v11)
      goto LABEL_30;
  }
  v59.__begin_ = (std::vector<std::string>::pointer)&v62;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
}

void sub_1E063BB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<MIL::IRValueType const*>>::__assign_with_size[abi:ne180100]<std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1E063BD98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1E063BDA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1E063BE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E063BEB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::vector<std::vector<MIL::IRValueType const*>>::__construct_one_at_end[abi:ne180100]<std::vector<MIL::IRValueType const*> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1E063BFB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRValueType const*>>::__push_back_slow_path<std::vector<MIL::IRValueType const*> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<MIL::IRValueType const*>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1E063C0C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRValueType const*>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::shared_ptr<MIL::IRValue const>>::__emplace_back_slow_path<std::unique_ptr<MIL::IRTensorValue const>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[16 * v4];
  v21 = &v10[16 * v9];
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((uint64_t *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 16;
  v20.i64[1] = v20.i64[0] + 16;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 2;
      *(_OWORD *)(v11 - 16) = v15;
      v11 -= 16;
      *v13 = 0;
      v13[1] = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_1E063C328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::Fp16>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E063C3A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1E063C420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E063C92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E063C9CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ModifyBlockWithTypes(MIL::Builder::BlockBuilder *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Builder::BlockBuilder *v4;
  std::string::size_type size;
  unsigned __int8 *i;
  unsigned __int8 *v8;
  uint64_t ValueType;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  MIL::Builder::OperationBuilder *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  MIL::BuilderPrivate::OperationBuilderPrivate *v57;
  const std::string *SpecificationOpsetName;
  uint64_t Operator;
  uint64_t v60;
  __int128 v61;
  const MIL::Builder::OperationBuilder *v62;
  BOOL v63;
  int v65;
  _BOOL4 v68;
  _QWORD *Parameters;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  MIL::IRArgument *v74;
  unint64_t *v75;
  unint64_t v76;
  std::string *v77;
  std::string *v78;
  BOOL v79;
  std::string::size_type v80;
  std::string::size_type v81;
  int v82;
  uint64_t v85;
  int data;
  int v87;
  uint64_t v89;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string::size_type v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  MIL::Builder::Variable::VariableImpl **ArgumentForParameter;
  MIL::IRValue *Value;
  uint64_t *v107;
  _QWORD *v108;
  unint64_t v109;
  _BOOL4 v110;
  uint64_t Name;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void (***v130)(MIL::MILContextImpl *__hidden);
  unint64_t *v131;
  unint64_t v132;
  std::string::size_type v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  MIL::Builder::Variable::VariableImpl **v139;
  MIL::IRValueType *Type;
  uint64_t v141;
  uint64_t *v142;
  int v143;
  MIL::Builder::Variable::VariableImpl **v144;
  MIL::IRValue *v145;
  void *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t k;
  uint64_t UInt8Scalar;
  void **p_data;
  unint64_t v153;
  std::string *v154;
  uint64_t *p_size;
  MIL::IRConstantProperty *v156;
  uint64_t Int64ScalarValue;
  uint64_t v158;
  std::string *v159;
  uint64_t *v160;
  std::string *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  std::string *v170;
  std::string::size_type v171;
  std::string::size_type v172;
  uint64_t v173;
  MIL::IRValueType *v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::string::size_type v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  __int128 *m;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t n;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v229;
  uint64_t OutputName;
  __int128 v231;
  unsigned __int8 *v232;
  MIL::IRValueType *v233;
  const MIL::IRValueType *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  _BOOL4 HasFullyUnknownStrideProperty;
  _BOOL4 v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  MIL::IRMemoryLayoutValueType *v245;
  MIL::IRTensorBufferValueType *v246;
  uint64_t Shape;
  MIL::IRTypedArgument *updated;
  void **v249;
  std::string *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t OutputType;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  void *v257;
  unsigned __int8 *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  unsigned __int8 *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void ***ii;
  std::string::size_type v280;
  void **v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  std::string::size_type v306;
  const void **j;
  std::string::size_type v308;
  _QWORD *LocationPtr;
  uint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  std::string::size_type v320;
  std::string::size_type v321;
  unint64_t v322;
  MIL::Builder::BlockBuilder *v323;
  _QWORD *v324;
  uint64_t v325;
  MIL::IRArgument *v326;
  _QWORD *v327;
  int v328;
  void *v329[2];
  char v330;
  __int128 v331;
  void **v332;
  std::__shared_weak_count *v333;
  std::string v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  std::string v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  std::string v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  void *v343;
  void *v344;
  uint64_t v345;
  void (***v346[4])(MIL::MILContextImpl *__hidden);
  std::string v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  std::string v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  uint64_t v355;
  std::__shared_weak_count *v356;
  std::string v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  std::string v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  MIL::IRArgument *v365;
  std::__shared_weak_count *v366;
  __int128 v367;
  void (***v368)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v369;
  _QWORD v370[3];
  __int128 v371;
  void (***v372)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v373;
  std::string v374;
  std::string v375;
  uint64_t v376;
  std::__shared_weak_count *v377;
  void *v378;
  char v379;
  __int128 v380;
  void *v381;
  char v382;
  __int128 v383;
  std::string __s;
  uint64_t v385;
  std::__shared_weak_count *v386;
  void *v387;
  char v388;
  uint64_t v389;
  MIL::IRArgument *v390;
  std::__shared_weak_count *v391;
  std::string v392;
  std::string v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  __int128 v400;
  void *__p[2];
  char v402;
  __int128 v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  __int128 v406;
  __int128 v407;
  void (***v408)(MIL::MILContextImpl *__hidden);
  void (***v409)(MIL::MILContextImpl *__hidden);
  std::string v410;
  uint64_t v411;
  uint64_t v412;
  std::string *v413;
  uint64_t *v414;
  uint64_t *v415;
  std::string *p_s;
  void **v417;

  v4 = a1;
  MIL::Builder::BlockBuilder::GetOperations(a1, (uint64_t)&v411);
  MIL::Builder::BlockBuilder::GetOutputNames(v4, &v410);
  MIL::Builder::BlockBuilder::GetContext((uint64_t)v4, &v408);
  MIL::Builder::BlockBuilder::GetInputNames((MIL::Builder::BlockBuilder::BlockBuilderImpl **)v4, (std::vector<std::string> *)&__s);
  size = __s.__r_.__value_.__l.__size_;
  for (i = (unsigned __int8 *)__s.__r_.__value_.__r.__words[0]; i != (unsigned __int8 *)size; i += 24)
  {
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, i))
    {
      v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, i);
      if (!v8)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      ValueType = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v8 + 5));
      MIL::Builder::BlockBuilder::ReplaceInput((std::string::size_type)v4, (uint64_t)i, (uint64_t)i, ValueType);
    }
  }
  p_s = &__s;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_s);
  v10 = v411;
  if (v412 == v411)
  {
LABEL_513:
    v306 = v410.__r_.__value_.__l.__size_;
    v305 = v410.__r_.__value_.__r.__words[0];
    if (v410.__r_.__value_.__r.__words[0] != v410.__r_.__value_.__l.__size_)
    {
      do
      {
        MIL::Builder::BlockBuilder::RemoveOutput((uint64_t)v4, v305);
        v305 += 24;
      }
      while (v305 != v306);
      v308 = v410.__r_.__value_.__l.__size_;
      for (j = (const void **)v410.__r_.__value_.__r.__words[0]; j != (const void **)v308; j += 3)
        MIL::Builder::BlockBuilder::AddOutput((uint64_t)v4, j);
    }
    MIL::Builder::BlockBuilder::UpdateStateDependencyMap((MIL::Builder::BlockBuilder::BlockBuilderImpl **)v4);
    LocationPtr = (_QWORD *)MIL::Builder::BlockBuilder::GetLocationPtr(v4);
    v310 = LocationPtr[1];
    *(_QWORD *)&v331 = *LocationPtr;
    *((_QWORD *)&v331 + 1) = v310;
    if (v310)
    {
      v311 = (unint64_t *)(v310 + 8);
      do
        v312 = __ldxr(v311);
      while (__stxr(v312 + 1, v311));
    }
    std::string::basic_string[abi:ne180100]<0>(v329, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v331, 2, (uint64_t)v329);
    if (v330 < 0)
      operator delete(v329[0]);
    v313 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
    if (*((_QWORD *)&v331 + 1))
    {
      v314 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
      do
        v315 = __ldaxr(v314);
      while (__stlxr(v315 - 1, v314));
      if (!v315)
      {
        ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
        std::__shared_weak_count::__release_weak(v313);
      }
    }
    goto LABEL_528;
  }
  v11 = 0;
  v320 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v321 = *MEMORY[0x1E0DE4F60];
  v319 = MEMORY[0x1E0DE4FB8] + 16;
  v323 = v4;
  v324 = a2;
  v325 = a3;
  while (2)
  {
    v12 = *(_OWORD *)(v10 + 16 * v11);
    v407 = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v406 = v12;
      do
        v15 = __ldxr(v13);
      while (__stxr(v15 + 1, v13));
    }
    else
    {
      v406 = (unint64_t)v12;
    }
    MIL::Builder::BlockBuilder::RemoveOperation((uint64_t)v4, (uint64_t)&v406);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
    if (*((_QWORD *)&v406 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (MIL::Builder::OperationBuilder *)v407;
    MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr(v407, &v404);
    if (!v404)
    {
      v31 = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(v19);
      v32 = v31[1];
      *(_QWORD *)&v403 = *v31;
      *((_QWORD *)&v403 + 1) = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "No operator associated with operation");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v403, 3, (uint64_t)__p);
      if (v402 < 0)
        operator delete(__p[0]);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
      if (*((_QWORD *)&v403 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v403 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v38 = 1;
      goto LABEL_501;
    }
    v398 = v404;
    v399 = v405;
    if (v405)
    {
      p_shared_owners = (unint64_t *)&v405->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    MIL::Builder::OperationBuilder::Make(&v398, (uint64_t *)&v400);
    v22 = v399;
    if (v399)
    {
      v23 = (unint64_t *)&v399->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v397 = v400;
    if (*((_QWORD *)&v400 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = 0uLL;
    if (v11 != ((v412 - v411) >> 4) - 1)
    {
      v27 = *(_OWORD *)(v411 + 16 * v11 + 16);
      v28 = *(_QWORD *)(v411 + 16 * v11 + 24);
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      else
      {
        *((_QWORD *)&v27 + 1) = 0;
      }
    }
    v396 = v27;
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
    MIL::Builder::BlockBuilder::AddOperation(v4, &v397, (uint64_t *)&v396);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v396 + 1);
    if (*((_QWORD *)&v396 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v396 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_)
    {
      v43 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v397 + 1);
    if (*((_QWORD *)&v397 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v397 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v400;
    v49 = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr((MIL::Builder::OperationBuilder *)v407);
    v50 = (std::__shared_weak_count *)v49[1];
    v394 = *v49;
    v395 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    MIL::Builder::OperationBuilder::SetLocation(v48, (uint64_t)&v394);
    v53 = v395;
    if (v395)
    {
      v54 = (unint64_t *)&v395->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v400;
    v57 = (MIL::BuilderPrivate::OperationBuilderPrivate *)v407;
    SpecificationOpsetName = (const std::string *)MIL::Builder::OperationBuilder::GetSpecificationOpsetName((MIL::Builder::OperationBuilder *)v407);
    MIL::Builder::OperationBuilder::SetSpecificationOpsetName(v56, SpecificationOpsetName);
    Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v400);
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    if (*(char *)(v60 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v393, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
    }
    else
    {
      v61 = *(_OWORD *)v60;
      v393.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
      *(_OWORD *)&v393.__r_.__value_.__l.__data_ = v61;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__s.__r_.__value_.__l.__size_ == 23)
      {
        v68 = *(_QWORD *)__s.__r_.__value_.__l.__data_ == 0x745F726F736E6574
           && *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8) == 0x726F736E65745F6FLL
           && *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 15) == 0x7265666675625F72;
        v328 = v68;
      }
      else
      {
        v328 = 0;
      }
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) == 23)
    {
      v63 = __s.__r_.__value_.__r.__words[0] == 0x745F726F736E6574
         && __s.__r_.__value_.__l.__size_ == 0x726F736E65745F6FLL;
      v65 = v63 && *(std::string::size_type *)((char *)&__s.__r_.__value_.__r.__words[1] + 7) == 0x7265666675625F72;
      v328 = v65;
    }
    else
    {
      v328 = 0;
    }
    if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v393.__r_.__value_.__l.__data_);
    v322 = v11;
    Parameters = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(v57, v62);
    v70 = (_QWORD *)*Parameters;
    v327 = Parameters + 1;
    if ((_QWORD *)*Parameters != Parameters + 1)
    {
      while (1)
      {
        if (*((char *)v70 + 55) < 0)
          std::string::__init_copy_ctor_external(&v392, (const std::string::value_type *)v70[4], v70[5]);
        else
          v392 = *(std::string *)(v70 + 4);
        v71 = v70[7];
        v72 = v70[8];
        while (1)
        {
          if (v71 == v72)
          {
            v38 = 0;
            v194 = 1;
            goto LABEL_320;
          }
          v74 = *(MIL::IRArgument **)v71;
          v73 = *(std::__shared_weak_count **)(v71 + 8);
          v390 = *(MIL::IRArgument **)v71;
          v391 = v73;
          if (v73)
          {
            v75 = (unint64_t *)&v73->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)v74 + 16))(v74))
            break;
          if (v328)
          {
            if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v392.__r_.__value_.__l.__size_ != 7)
              {
                v89 = v400;
LABEL_156:
                std::string::__init_copy_ctor_external(&v357, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
                goto LABEL_157;
              }
              v78 = (std::string *)v392.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) != 7)
              {
                v89 = v400;
                goto LABEL_148;
              }
              v78 = &v392;
            }
            data = (int)v78->__r_.__value_.__l.__data_;
            v87 = *(_DWORD *)((char *)v78->__r_.__value_.__r.__words + 3);
            if (data == 1769108595 && v87 == 1936024681)
            {
              v372 = v408;
              v373 = (std::__shared_weak_count *)v409;
              if (v409)
              {
                v98 = (unint64_t *)(v409 + 1);
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
              }
              v100 = v407;
              v371 = v407;
              if (*((_QWORD *)&v407 + 1))
              {
                v101 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                do
                  v102 = __ldxr(v101);
                while (__stxr(v102 + 1, v101));
              }
              v370[1] = v74;
              v370[2] = v73;
              if (v73)
              {
                v103 = (unint64_t *)&v73->__shared_owners_;
                do
                  v104 = __ldxr(v103);
                while (__stxr(v104 + 1, v103));
              }
              std::string::basic_string[abi:ne180100]<0>(&__s, "strides");
              ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(v100, (uint64_t)&__s, 0);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              Value = (MIL::IRValue *)MIL::Builder::Variable::GetValue(ArgumentForParameter);
              v107 = (uint64_t *)MIL::IRValue::AsTensor(Value);
              v108 = (_QWORD *)MIL::IRTensorValue::GetDataView<long long>(v107);
              if (v109)
              {
                if (*v108 == -1)
                {
                  v119 = 1;
                  do
                  {
                    v120 = v119;
                    if (v109 == v119)
                      break;
                    v121 = v108[v119++];
                  }
                  while (v121 == -1);
                  v110 = v120 >= v109;
                  if (v73)
                    goto LABEL_211;
                }
                else
                {
                  v110 = 0;
                  if (!v73)
                    goto LABEL_215;
LABEL_211:
                  v122 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
LABEL_215:
                v124 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
                if (*((_QWORD *)&v371 + 1))
                {
                  v125 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                v127 = v373;
                if (!v373)
                  goto LABEL_224;
                v128 = (unint64_t *)&v373->__shared_owners_;
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                  if (v110)
                  {
LABEL_227:
                    v130 = v408;
                    v368 = v408;
                    v369 = (std::__shared_weak_count *)v409;
                    if (v409)
                    {
                      v131 = (unint64_t *)(v409 + 1);
                      do
                        v132 = __ldxr(v131);
                      while (__stxr(v132 + 1, v131));
                    }
                    v133 = v400;
                    v367 = v400;
                    if (*((_QWORD *)&v400 + 1))
                    {
                      v134 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
                      do
                        v135 = __ldxr(v134);
                      while (__stxr(v135 + 1, v134));
                    }
                    v136 = v391;
                    v326 = v390;
                    v365 = v390;
                    v366 = v391;
                    if (v391)
                    {
                      v137 = (unint64_t *)&v391->__shared_owners_;
                      do
                        v138 = __ldxr(v137);
                      while (__stxr(v138 + 1, v137));
                    }
                    std::string::basic_string[abi:ne180100]<0>(&__s, "input");
                    v139 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(v133, (uint64_t)&__s, 0);
                    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__s.__r_.__value_.__l.__data_);
                    Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v139);
                    v141 = MIL::IRValueType::AsTensorType(Type);
                    v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 96))(v141);
                    v143 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 88))(v141);
                    std::string::basic_string[abi:ne180100]<0>(&__s, "interleave_factors");
                    v144 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(v133, (uint64_t)&__s, 0);
                    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__s.__r_.__value_.__l.__data_);
                    v145 = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v144);
                    v146 = (void *)MIL::IRValue::AsTensor(v145);
                    v147 = MIL::IRTensorValue::GetDataView<unsigned char>(v146);
                    v149 = v148;
                    std::vector<MIL::IRProperty const*>::vector(&__s, v148);
                    if (v149)
                    {
                      for (k = 0; k != v149; ++k)
                      {
                        UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(v130, (MIL::MILContext *)*(unsigned __int8 *)(v147 + k));
                        *(_QWORD *)(__s.__r_.__value_.__r.__words[0] + 8 * k) = UInt8Scalar;
                      }
                    }
                    MIL::Util::GetRowAlignedStrides(v130, v143, v142, (uint64_t *)&__s, 0x40uLL, (uint64_t *)&p_s);
                    v413 = 0;
                    v414 = 0;
                    v415 = 0;
                    p_data = (void **)&p_s->__r_.__value_.__l.__data_;
                    a2 = v324;
                    a3 = v325;
                    if (v417 == (void **)p_s)
                    {
LABEL_278:
                      v173 = MIL::IRArgument::GetValue(v326);
                      v174 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 32))(v173);
                      v175 = MIL::IRValueType::AsTensorType(v174);
                      MIL::IRTensorValueType::MakeInt64Value(v175, (uint64_t)&v413, v370);
                      if (v413)
                      {
                        v414 = (uint64_t *)v413;
                        operator delete(v413);
                      }
                      if (p_s)
                      {
                        v417 = (void **)&p_s->__r_.__value_.__l.__data_;
                        operator delete(p_s);
                      }
                      if (__s.__r_.__value_.__r.__words[0])
                      {
                        __s.__r_.__value_.__l.__size_ = __s.__r_.__value_.__r.__words[0];
                        operator delete(__s.__r_.__value_.__l.__data_);
                      }
                      if (v136)
                      {
                        v176 = (unint64_t *)&v136->__shared_owners_;
                        do
                          v177 = __ldaxr(v176);
                        while (__stlxr(v177 - 1, v176));
                        if (!v177)
                        {
                          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                          std::__shared_weak_count::__release_weak(v136);
                        }
                      }
                      v178 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
                      if (*((_QWORD *)&v367 + 1))
                      {
                        v179 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
                        do
                          v180 = __ldaxr(v179);
                        while (__stlxr(v180 - 1, v179));
                        if (!v180)
                        {
                          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                          std::__shared_weak_count::__release_weak(v178);
                        }
                      }
                      v181 = v369;
                      if (v369)
                      {
                        v182 = (unint64_t *)&v369->__shared_owners_;
                        do
                          v183 = __ldaxr(v182);
                        while (__stlxr(v183 - 1, v182));
                        if (!v183)
                        {
                          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                          std::__shared_weak_count::__release_weak(v181);
                        }
                      }
                      v184 = v400;
                      if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
                        std::string::__init_copy_ctor_external(&v362, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
                      else
                        v362 = v392;
                      v360 = v370[0];
                      if (v370[0])
                      {
                        v185 = (std::__shared_weak_count *)operator new();
                        v186 = (std::__shared_weak_count_vtbl *)v370[0];
                        v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
                        v185->__shared_owners_ = 0;
                        v185->__shared_weak_owners_ = 0;
                        v185[1].__vftable = v186;
                      }
                      else
                      {
                        v185 = 0;
                      }
                      v361 = v185;
                      v370[0] = 0;
                      MIL::Builder::OperationBuilder::AddInput(v184, (uint64_t)&v362, &v360, &v363);
                      v187 = v364;
                      if (v364)
                      {
                        v188 = (unint64_t *)&v364->__shared_owners_;
                        do
                          v189 = __ldaxr(v188);
                        while (__stlxr(v189 - 1, v188));
                        if (!v189)
                        {
                          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                          std::__shared_weak_count::__release_weak(v187);
                        }
                      }
                      v190 = v361;
                      if (v361)
                      {
                        v191 = (unint64_t *)&v361->__shared_owners_;
                        do
                          v192 = __ldaxr(v191);
                        while (__stlxr(v192 - 1, v191));
                        if (!v192)
                        {
                          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                          std::__shared_weak_count::__release_weak(v190);
                        }
                      }
                      if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v362.__r_.__value_.__l.__data_);
                      v193 = v370[0];
                      v370[0] = 0;
                      if (v193)
                        (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
                      goto LABEL_199;
                    }
                    v153 = 0;
                    while (2)
                    {
                      if (MIL::IRProperty::TryAsUnknown(p_data[v153]))
                      {
                        v154 = (std::string *)v414;
                        if (v414 < v415)
                        {
                          *v414 = -1;
                          p_size = (uint64_t *)&v154->__r_.__value_.__l.__size_;
                          goto LABEL_250;
                        }
                        v161 = v413;
                        v162 = ((char *)v414 - (char *)v413) >> 3;
                        v163 = v162 + 1;
                        if ((unint64_t)(v162 + 1) >> 61)
                          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                        v164 = (char *)v415 - (char *)v413;
                        if (((char *)v415 - (char *)v413) >> 2 > v163)
                          v163 = v164 >> 2;
                        if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF8)
                          v165 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v165 = v163;
                        if (v165)
                        {
                          v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v415, v165);
                          v161 = v413;
                          v154 = (std::string *)v414;
                        }
                        else
                        {
                          v166 = 0;
                        }
                        v170 = (std::string *)&v166[8 * v162];
                        v170->__r_.__value_.__r.__words[0] = -1;
                        v160 = (uint64_t *)&v170->__r_.__value_.__l.__size_;
                        while (v154 != v161)
                        {
                          v171 = v154[-1].__r_.__value_.__r.__words[2];
                          v154 = (std::string *)((char *)v154 - 8);
                          v170[-1].__r_.__value_.__r.__words[2] = v171;
                          v170 = (std::string *)((char *)v170 - 8);
                        }
LABEL_275:
                        v413 = v170;
                        v414 = v160;
                        v415 = (uint64_t *)&v166[8 * v165];
                        if (v161)
                          operator delete(v161);
                      }
                      else
                      {
                        v156 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*((MIL::IRProperty **)&p_s->__r_.__value_.__l.__data_
                                                                                      + v153));
                        Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v156);
                        v158 = Int64ScalarValue;
                        v159 = (std::string *)v414;
                        if (v414 >= v415)
                        {
                          v161 = v413;
                          v167 = ((char *)v414 - (char *)v413) >> 3;
                          v168 = v167 + 1;
                          if ((unint64_t)(v167 + 1) >> 61)
                            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                          v169 = (char *)v415 - (char *)v413;
                          if (((char *)v415 - (char *)v413) >> 2 > v168)
                            v168 = v169 >> 2;
                          if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
                            v165 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v165 = v168;
                          if (v165)
                          {
                            v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v415, v165);
                            v161 = v413;
                            v159 = (std::string *)v414;
                          }
                          else
                          {
                            v166 = 0;
                          }
                          v170 = (std::string *)&v166[8 * v167];
                          v170->__r_.__value_.__r.__words[0] = v158;
                          v160 = (uint64_t *)&v170->__r_.__value_.__l.__size_;
                          while (v159 != v161)
                          {
                            v172 = v159[-1].__r_.__value_.__r.__words[2];
                            v159 = (std::string *)((char *)v159 - 8);
                            v170[-1].__r_.__value_.__r.__words[2] = v172;
                            v170 = (std::string *)((char *)v170 - 8);
                          }
                          goto LABEL_275;
                        }
                        *v414 = Int64ScalarValue;
                        p_size = (uint64_t *)&v159->__r_.__value_.__l.__size_;
LABEL_250:
                        v160 = p_size;
                      }
                      v414 = v160;
                      ++v153;
                      p_data = (void **)&p_s->__r_.__value_.__l.__data_;
                      if (v153 >= ((char *)v417 - (char *)p_s) >> 3)
                        goto LABEL_278;
                      continue;
                    }
                  }
                }
                else
                {
LABEL_224:
                  if (v110)
                    goto LABEL_227;
                }
                goto LABEL_145;
              }
              v110 = 1;
              if (!v73)
                goto LABEL_215;
              goto LABEL_211;
            }
          }
LABEL_145:
          v89 = v400;
          if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_156;
LABEL_148:
          v357 = v392;
LABEL_157:
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v390 + 48))(&v355);
          MIL::Builder::OperationBuilder::AddInput(v89, (uint64_t)&v357, &v355, &v358);
          v91 = v359;
          if (v359)
          {
            v92 = (unint64_t *)&v359->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = v356;
          if (v356)
          {
            v95 = (unint64_t *)&v356->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
          {
            v97 = (void *)v357.__r_.__value_.__r.__words[0];
LABEL_198:
            operator delete(v97);
          }
LABEL_199:
          v116 = v391;
          if (v391)
          {
            v117 = (unint64_t *)&v391->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v71 += 16;
        }
        if (!v328)
          goto LABEL_137;
        if ((*((_BYTE *)&v392.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (HIBYTE(v392.__r_.__value_.__r.__words[2]) == 7)
          {
            if (LODWORD(v392.__r_.__value_.__l.__data_) == 1769108595
              && *(_DWORD *)((char *)v392.__r_.__value_.__r.__words + 3) == 1936024681)
            {
              goto LABEL_341;
            }
          }
          else if (HIBYTE(v392.__r_.__value_.__r.__words[2]) == 18)
          {
            v77 = &v392;
LABEL_130:
            v80 = v77->__r_.__value_.__r.__words[0];
            v81 = v77->__r_.__value_.__l.__size_;
            v82 = LOWORD(v77->__r_.__value_.__r.__words[2]);
            if (v80 == 0x61656C7265746E69 && v81 == 0x6F746361665F6576 && v82 == 29554)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__s);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"tensor_to_tensor_buffer op is having \"interleave_factors\" from an arbitrary input. \"interleave_factors\" should only be given as an argument with tensor_buffer.", 159);
              v197 = (_QWORD *)MIL::Builder::BlockBuilder::GetLocationPtr(v323);
              v198 = v197[1];
              *(_QWORD *)&v380 = *v197;
              *((_QWORD *)&v380 + 1) = v198;
              if (v198)
              {
                v199 = (unint64_t *)(v198 + 8);
                do
                  v200 = __ldxr(v199);
                while (__stxr(v200 + 1, v199));
              }
              std::stringbuf::str();
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v380, 3, (uint64_t)&v378);
              if (v379 < 0)
                operator delete(v378);
              v201 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
              if (*((_QWORD *)&v380 + 1))
              {
                v202 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
                do
                  v203 = __ldaxr(v202);
                while (__stlxr(v203 - 1, v202));
                if (!v203)
                {
                  ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                  std::__shared_weak_count::__release_weak(v201);
                }
              }
              __s.__r_.__value_.__r.__words[0] = v321;
              *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + *(_QWORD *)(v321 - 24)) = v320;
              v204 = MEMORY[0x1E0DE4FB8] + 16;
              goto LABEL_352;
            }
LABEL_137:
            v85 = v400;
            if ((*((_BYTE *)&v392.__r_.__value_.__s + 23) & 0x80) != 0)
            {
LABEL_185:
              std::string::__init_copy_ctor_external(&v375, v392.__r_.__value_.__l.__data_, v392.__r_.__value_.__l.__size_);
LABEL_186:
              Name = MIL::IRArgument::GetName(v74);
              if (*(char *)(Name + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v374, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
              }
              else
              {
                v112 = *(_OWORD *)Name;
                v374.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
                *(_OWORD *)&v374.__r_.__value_.__l.__data_ = v112;
              }
              MIL::Builder::OperationBuilder::AddInput(v85, (uint64_t)&v375, (uint64_t)&v374, &v376);
              v113 = v377;
              if (v377)
              {
                v114 = (unint64_t *)&v377->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v374.__r_.__value_.__l.__data_);
              if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
              {
                v97 = (void *)v375.__r_.__value_.__r.__words[0];
                goto LABEL_198;
              }
              goto LABEL_199;
            }
LABEL_154:
            v375 = v392;
            goto LABEL_186;
          }
          v85 = v400;
          goto LABEL_154;
        }
        if (v392.__r_.__value_.__l.__size_ != 7
          || (*(_DWORD *)v392.__r_.__value_.__l.__data_ == 1769108595
            ? (v79 = *(_DWORD *)(v392.__r_.__value_.__r.__words[0] + 3) == 1936024681)
            : (v79 = 0),
              !v79))
        {
          if (v392.__r_.__value_.__l.__size_ == 18)
          {
            v77 = (std::string *)v392.__r_.__value_.__r.__words[0];
            goto LABEL_130;
          }
          v85 = v400;
          goto LABEL_185;
        }
LABEL_341:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__s, (uint64_t)"tensor_to_tensor_buffer op is having \"stride\" from an arbitrary input. \"strides\" should only be given as an argument with tensor_buffer.", 136);
        v205 = (_QWORD *)MIL::Builder::BlockBuilder::GetLocationPtr(v323);
        v206 = v205[1];
        *(_QWORD *)&v383 = *v205;
        *((_QWORD *)&v383 + 1) = v206;
        if (v206)
        {
          v207 = (unint64_t *)(v206 + 8);
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
        }
        std::stringbuf::str();
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v383, 3, (uint64_t)&v381);
        if (v382 < 0)
          operator delete(v381);
        v209 = (std::__shared_weak_count *)*((_QWORD *)&v383 + 1);
        if (*((_QWORD *)&v383 + 1))
        {
          v210 = (unint64_t *)(*((_QWORD *)&v383 + 1) + 8);
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
        __s.__r_.__value_.__r.__words[0] = v321;
        *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + *(_QWORD *)(v321 - 24)) = v320;
        v204 = v319;
LABEL_352:
        __s.__r_.__value_.__l.__size_ = v204;
        if (v388 < 0)
          operator delete(v387);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](&v389);
        v212 = v391;
        if (v391)
        {
          v213 = (unint64_t *)&v391->__shared_owners_;
          do
            v214 = __ldaxr(v213);
          while (__stlxr(v214 - 1, v213));
          if (!v214)
          {
            ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
            std::__shared_weak_count::__release_weak(v212);
          }
        }
        v194 = 0;
        v38 = 1;
LABEL_320:
        if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v392.__r_.__value_.__l.__data_);
        if (!v194)
          goto LABEL_496;
        v195 = (_QWORD *)v70[1];
        if (v195)
        {
          do
          {
            v196 = v195;
            v195 = (_QWORD *)*v195;
          }
          while (v195);
        }
        else
        {
          do
          {
            v196 = (_QWORD *)v70[2];
            v63 = *v196 == (_QWORD)v70;
            v70 = v196;
          }
          while (!v63);
        }
        v70 = v196;
        if (v196 == v327)
        {
          v57 = (MIL::BuilderPrivate::OperationBuilderPrivate *)v407;
          break;
        }
      }
    }
    for (m = *(__int128 **)(MIL::Builder::OperationBuilder::GetAttributes(v57) + 16); m; m = *(__int128 **)m)
    {
      std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100](&__s, m + 1);
      v216 = v400;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v352, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v352 = __s;
      v350 = v385;
      v351 = v386;
      if (v386)
      {
        v217 = (unint64_t *)&v386->__shared_owners_;
        do
          v218 = __ldxr(v217);
        while (__stxr(v218 + 1, v217));
      }
      MIL::Builder::OperationBuilder::SetAttribute(v216, (uint64_t)&v352, &v350, &v353);
      v219 = v354;
      if (v354)
      {
        v220 = (unint64_t *)&v354->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      v222 = v351;
      if (v351)
      {
        v223 = (unint64_t *)&v351->__shared_owners_;
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }
      if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v352.__r_.__value_.__l.__data_);
      v225 = v386;
      if (v386)
      {
        v226 = (unint64_t *)&v386->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    for (n = 0; ; ++n)
    {
      v229 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v407;
      if (n >= MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v407))
        break;
      OutputName = MIL::Builder::OperationBuilder::GetOutputName(v229, n);
      if (*(char *)(OutputName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
      }
      else
      {
        v231 = *(_OWORD *)OutputName;
        __s.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v231;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__s))
      {
        v232 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__s);
        if (!v232)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v233 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v232
                                                                      + 5));
        if (MIL::IsTensorBuffer(v233, v234))
        {
          v235 = (std::__shared_weak_count *)v409;
          v346[2] = v408;
          v346[3] = v409;
          if (v409)
          {
            v236 = (unint64_t *)(v409 + 1);
            do
              v237 = __ldxr(v236);
            while (__stxr(v237 + 1, v236));
          }
          v239 = HasFullyUnknownStrideProperty;
          if (!v235)
            goto LABEL_402;
          v240 = (unint64_t *)&v235->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
            if (v239)
            {
LABEL_403:
              v242 = (std::__shared_weak_count *)v409;
              v346[0] = v408;
              v346[1] = v409;
              if (v409)
              {
                v243 = (unint64_t *)(v409 + 1);
                do
                  v244 = __ldxr(v243);
                while (__stxr(v244 + 1, v243));
              }
              v245 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v233);
              v246 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v245);
              Shape = MIL::IRTensorBufferValueType::GetShape(v246);
              v343 = 0;
              v344 = 0;
              v345 = 0;
              std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v343, *(const void **)Shape, *(_QWORD *)(Shape + 8), (uint64_t)(*(_QWORD *)(Shape + 8) - *(_QWORD *)Shape) >> 3);
              MIL::IRTypedArgument::Make(updated, &v413);
              p_s = v413;
              if (v413)
              {
                v249 = (void **)operator new();
                v250 = v413;
                *v249 = &unk_1EA994910;
                v249[1] = 0;
                v249[2] = 0;
                v249[3] = v250;
              }
              else
              {
                v249 = 0;
              }
              v417 = v249;
              v413 = 0;
              if (v343)
              {
                v344 = v343;
                operator delete(v343);
              }
              if (v242)
              {
                v269 = (unint64_t *)&v242->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                  std::__shared_weak_count::__release_weak(v242);
                }
              }
              v271 = v400;
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v340, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              else
                v340 = __s;
              v272 = MIL::IRTypedArgument::GetValueType((MIL::IRTypedArgument::IRTypedArgumentImpl **)p_s);
              MIL::Builder::OperationBuilder::AddOutput(v271, (uint64_t)&v340, v272, &v341);
              v273 = v342;
              if (v342)
              {
                v274 = (unint64_t *)&v342->__shared_owners_;
                do
                  v275 = __ldaxr(v274);
                while (__stlxr(v275 - 1, v274));
                if (!v275)
                {
                  ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                  std::__shared_weak_count::__release_weak(v273);
                }
              }
              if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v340.__r_.__value_.__l.__data_);
              v276 = (std::__shared_weak_count *)v417;
              if (v417)
              {
                v277 = (unint64_t *)(v417 + 1);
                do
                  v278 = __ldaxr(v277);
                while (__stlxr(v278 - 1, v277));
                if (!v278)
                {
                  ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                  std::__shared_weak_count::__release_weak(v276);
                }
              }
              goto LABEL_442;
            }
          }
          else
          {
LABEL_402:
            if (HasFullyUnknownStrideProperty)
              goto LABEL_403;
          }
          v263 = v400;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v337, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v337 = __s;
          v264 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__s);
          if (!v264)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v265 = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v264 + 5));
          MIL::Builder::OperationBuilder::AddOutput(v263, (uint64_t)&v337, v265, &v338);
          v266 = v339;
          if (v339)
          {
            v267 = (unint64_t *)&v339->__shared_owners_;
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            if (!v268)
            {
              ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
              std::__shared_weak_count::__release_weak(v266);
            }
          }
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
          {
            v257 = (void *)v337.__r_.__value_.__r.__words[0];
            goto LABEL_441;
          }
        }
        else
        {
          v252 = v400;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v334, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v334 = __s;
          v258 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__s);
          if (!v258)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v259 = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v258 + 5));
          MIL::Builder::OperationBuilder::AddOutput(v252, (uint64_t)&v334, v259, &v335);
          v260 = v336;
          if (v336)
          {
            v261 = (unint64_t *)&v336->__shared_owners_;
            do
              v262 = __ldaxr(v261);
            while (__stlxr(v262 - 1, v261));
            if (!v262)
            {
              ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
              std::__shared_weak_count::__release_weak(v260);
            }
          }
          if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
          {
            v257 = (void *)v334.__r_.__value_.__r.__words[0];
            goto LABEL_441;
          }
        }
      }
      else
      {
        v251 = v400;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v347, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v347 = __s;
        OutputType = MIL::Builder::OperationBuilder::GetOutputType(v229, n);
        MIL::Builder::OperationBuilder::AddOutput(v251, (uint64_t)&v347, OutputType, &v348);
        v254 = v349;
        if (v349)
        {
          v255 = (unint64_t *)&v349->__shared_owners_;
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
        {
          v257 = (void *)v347.__r_.__value_.__r.__words[0];
LABEL_441:
          operator delete(v257);
        }
      }
LABEL_442:
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v229, (uint64_t)&__s);
    v280 = __s.__r_.__value_.__l.__size_;
    for (ii = (void ***)__s.__r_.__value_.__r.__words[0]; ; ii += 2)
    {
      if (ii == (void ***)v280)
      {
        v38 = 0;
        goto LABEL_495;
      }
      v281 = *ii;
      v282 = (std::__shared_weak_count *)ii[1];
      p_s = (std::string *)*ii;
      v417 = (void **)&v282->__vftable;
      if (v282)
      {
        v283 = (unint64_t *)&v282->__shared_owners_;
        do
          v284 = __ldxr(v283);
        while (__stxr(v284 + 1, v283));
      }
      if (*(_DWORD *)(a3 + 48) != 2)
        break;
      MIL::MILResult::~MILResult((void **)a3);
      v285 = v400;
      v332 = v281;
      v333 = v282;
      if (v282)
      {
        v286 = (unint64_t *)&v282->__shared_owners_;
        do
          v287 = __ldxr(v286);
        while (__stxr(v287 + 1, v286));
      }
      MIL::Builder::OperationBuilder::AddBlock(v285, (uint64_t)&v332);
      v288 = v333;
      if (v333)
      {
        v289 = (unint64_t *)&v333->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      v291 = (std::__shared_weak_count *)v417;
      if (v417)
      {
        v292 = (unint64_t *)(v417 + 1);
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
        }
      }
    }
    if (v282)
    {
      v294 = (unint64_t *)&v282->__shared_owners_;
      do
        v295 = __ldaxr(v294);
      while (__stlxr(v295 - 1, v294));
      if (!v295)
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
      }
    }
    v38 = 1;
LABEL_495:
    p_s = &__s;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_s);
LABEL_496:
    v296 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
    v4 = v323;
    v11 = v322;
    if (*((_QWORD *)&v400 + 1))
    {
      v297 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
      do
        v298 = __ldaxr(v297);
      while (__stlxr(v298 - 1, v297));
      if (!v298)
      {
        ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
        std::__shared_weak_count::__release_weak(v296);
      }
    }
LABEL_501:
    v299 = v405;
    if (v405)
    {
      v300 = (unint64_t *)&v405->__shared_owners_;
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
      }
    }
    v302 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
    if (*((_QWORD *)&v407 + 1))
    {
      v303 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (!v304)
      {
        ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
        std::__shared_weak_count::__release_weak(v302);
      }
    }
    if (!v38)
    {
      ++v11;
      v10 = v411;
      if (v11 >= (v412 - v411) >> 4)
        goto LABEL_513;
      continue;
    }
    break;
  }
LABEL_528:
  v316 = (std::__shared_weak_count *)v409;
  if (v409)
  {
    v317 = (unint64_t *)(v409 + 1);
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v410;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
}

void sub_1E063E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v30 - 208);
  *(_QWORD *)(v30 - 120) = v30 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  *(_QWORD *)(v30 - 120) = v30 - 168;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::HasFullyUnknownStrideProperty(MIL::IRValueType *a1)
{
  MIL::IRMemoryLayoutValueType *v1;
  MIL::IRTensorBufferValueType *v2;
  uint64_t Strides;
  void *v4;
  unint64_t v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  void *v10;
  uint64_t v11;

  v1 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a1);
  v2 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v1);
  if (!MIL::IRTensorBufferValueType::TryGetStrides(v2))
    return 0;
  Strides = MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)v2);
  v10 = 0;
  v11 = 0;
  v9 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v9, *(const void **)Strides, *(_QWORD *)(Strides + 8), (uint64_t)(*(_QWORD *)(Strides + 8) - *(_QWORD *)Strides) >> 3);
  v4 = v10;
  if (v10 == v9)
  {
    v7 = 1;
    if (!v10)
      return v7;
LABEL_10:
    v10 = v4;
    operator delete(v4);
    return v7;
  }
  v5 = 0;
  v4 = v9;
  do
  {
    v6 = MIL::IRProperty::TryAsUnknown(*((void **)v4 + v5));
    v7 = v6 != 0;
    v4 = v9;
    if (!v6)
      break;
    ++v5;
  }
  while (v5 < ((_BYTE *)v10 - (_BYTE *)v9) >> 3);
  if (v9)
    goto LABEL_10;
  return v7;
}

void sub_1E063EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::UpdateTensorBufferStride(void (****a1)(MIL::MILContextImpl *__hidden this), MIL::IRValueType *this, uint64_t *a3)
{
  MIL::IRMemoryLayoutValueType *v5;
  MIL::IRTensorBufferValueType *v6;
  int DataType;
  uint64_t InterleaveFactors;
  uint64_t Attributes;
  uint64_t v10;
  uint64_t v12[5];
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;

  v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
  v6 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v5);
  DataType = MIL::IRTensorBufferValueType::GetDataType(v6);
  InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v6);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v14, *(const void **)InterleaveFactors, *(_QWORD *)(InterleaveFactors + 8), (uint64_t)(*(_QWORD *)(InterleaveFactors + 8) - *(_QWORD *)InterleaveFactors) >> 3);
  MIL::Util::GetRowAlignedStrides(*a1, DataType, a3, (uint64_t *)&v14, 0x40uLL, (uint64_t *)__p);
  Attributes = MIL::IRTensorBufferValueType::GetAttributes(v6);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v12, Attributes);
  v10 = MIL::IRTensorBufferValueType::MakeWithShape(*a1, DataType, (__int128 *)a3, (uint64_t)__p, (uint64_t)&v14, v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  return v10;
}

void sub_1E063ECE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  void *v18;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(_QWORD *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E063EFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E063F048(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void MIL::MILResult::~MILResult(void **this)
{
  *this = off_1EA99BF68;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

MIL::MILResult *MIL::MILResult::MILResult(MIL::MILResult *this)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v3, "Not an error.");
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1EA99BF68;
  *(_OWORD *)((char *)this + 24) = v3;
  *((_QWORD *)this + 5) = v4;
  return this;
}

void sub_1E063F108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 MIL::MILResult::MILResult(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;

  *(_QWORD *)a1 = off_1EA99BF68;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *a3;
  *(_QWORD *)(a1 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t MIL::MILResult::GetLocation(MIL::MILResult *this)
{
  return *MIL::MILResult::GetLocationSharedPtr(this);
}

_QWORD *MIL::MILResult::GetLocationSharedPtr(MIL::MILResult *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (_QWORD *)((char *)this + 8);
  if (!*((_QWORD *)this + 1))
  {
    MIL::UnknownLocation::Make(&v4);
    std::shared_ptr<MIL::Location const>::operator=[abi:ne180100]<MIL::UnknownLocation,std::default_delete<MIL::UnknownLocation>,void>(v1, &v4);
    v2 = v4;
    v4 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return v1;
}

void sub_1E063F1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<MIL::Location const>::operator=[abi:ne180100]<MIL::UnknownLocation,std::default_delete<MIL::UnknownLocation>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA9940C8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t MIL::MILResult::GetMessage(MIL::MILResult *this)
{
  return (uint64_t)this + 24;
}

void MIL::MILResult::GetMessageWithLocation(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  _QWORD *LocationSharedPtr;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string v14;
  std::string v15;

  LocationSharedPtr = MIL::MILResult::GetLocationSharedPtr((MIL::MILResult *)this);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*LocationSharedPtr + 24))(&v14);
  v5 = std::string::append(&v14, ": ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v9 = this[3];
  v8 = (char *)(this + 3);
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  v13 = std::string::append(&v15, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1E063F360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

MIL::ParserContext *MIL::ParserContext::ParserContext(MIL::ParserContext *this, const MIL::ParserOptions *a2)
{
  (*(void (**)(const MIL::ParserOptions *))(*(_QWORD *)a2 + 16))(a2);
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 1065353216;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 1065353216;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 120) = 1065353216;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_DWORD *)this + 130) = 1065353216;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_DWORD *)this + 140) = 1065353216;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 1065353216;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 1065353216;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 170) = 1065353216;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_DWORD *)this + 180) = 1065353216;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_DWORD *)this + 190) = 1065353216;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 200) = 1065353216;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 210) = 1065353216;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_DWORD *)this + 220) = 1065353216;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 230) = 1065353216;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 240) = 1065353216;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 250) = 1065353216;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_DWORD *)this + 260) = 1065353216;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 270) = 1065353216;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 280) = 1065353216;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_DWORD *)this + 290) = 1065353216;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_DWORD *)this + 300) = 1065353216;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_DWORD *)this + 310) = 1065353216;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_DWORD *)this + 320) = 1065353216;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_DWORD *)this + 330) = 1065353216;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_DWORD *)this + 340) = 1065353216;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *((_DWORD *)this + 350) = 1065353216;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_DWORD *)this + 360) = 1065353216;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_DWORD *)this + 370) = 1065353216;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_DWORD *)this + 380) = 1065353216;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 390) = 1065353216;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_DWORD *)this + 400) = 1065353216;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *((_DWORD *)this + 410) = 1065353216;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *((_DWORD *)this + 420) = 1065353216;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *((_DWORD *)this + 430) = 1065353216;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_DWORD *)this + 440) = 1065353216;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *((_DWORD *)this + 450) = 1065353216;
  *((_OWORD *)this + 114) = 0u;
  *((_OWORD *)this + 113) = 0u;
  *((_DWORD *)this + 460) = 1065353216;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *((_DWORD *)this + 470) = 1065353216;
  *((_OWORD *)this + 119) = 0u;
  *((_OWORD *)this + 118) = 0u;
  *((_DWORD *)this + 480) = 1065353216;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *((_DWORD *)this + 490) = 1065353216;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_DWORD *)this + 500) = 1065353216;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *((_DWORD *)this + 510) = 1065353216;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_DWORD *)this + 520) = 1065353216;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *((_DWORD *)this + 530) = 1065353216;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_DWORD *)this + 540) = 1065353216;
  *((_DWORD *)this + 550) = 1065353216;
  *((_DWORD *)this + 560) = 1065353216;
  *((_DWORD *)this + 570) = 1065353216;
  *((_DWORD *)this + 580) = 1065353216;
  *((_DWORD *)this + 590) = 1065353216;
  *((_DWORD *)this + 600) = 1065353216;
  *((_DWORD *)this + 610) = 1065353216;
  *((_DWORD *)this + 620) = 1065353216;
  *((_DWORD *)this + 630) = 1065353216;
  *((_DWORD *)this + 640) = 1065353216;
  *((_DWORD *)this + 650) = 1065353216;
  *((_DWORD *)this + 660) = 1065353216;
  *((_DWORD *)this + 670) = 1065353216;
  *((_DWORD *)this + 680) = 1065353216;
  *((_DWORD *)this + 690) = 1065353216;
  *((_DWORD *)this + 700) = 1065353216;
  *((_DWORD *)this + 710) = 1065353216;
  *((_DWORD *)this + 720) = 1065353216;
  *((_DWORD *)this + 730) = 1065353216;
  *((_DWORD *)this + 740) = 1065353216;
  *((_DWORD *)this + 750) = 1065353216;
  *((_DWORD *)this + 760) = 1065353216;
  *((_DWORD *)this + 770) = 1065353216;
  *((_DWORD *)this + 780) = 1065353216;
  *((_DWORD *)this + 790) = 1065353216;
  *((_DWORD *)this + 800) = 1065353216;
  *((_DWORD *)this + 810) = 1065353216;
  *((_DWORD *)this + 820) = 1065353216;
  *((_DWORD *)this + 830) = 1065353216;
  *((_DWORD *)this + 840) = 1065353216;
  *((_DWORD *)this + 850) = 1065353216;
  *((_DWORD *)this + 860) = 1065353216;
  *((_DWORD *)this + 870) = 1065353216;
  *((_DWORD *)this + 884) = 1065353216;
  *((_DWORD *)this + 894) = 1065353216;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *(_OWORD *)((char *)this + 2344) = 0u;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *((_OWORD *)this + 164) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_OWORD *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  *((_OWORD *)this + 174) = 0u;
  *((_OWORD *)this + 173) = 0u;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *((_OWORD *)this + 179) = 0u;
  *((_OWORD *)this + 178) = 0u;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *(_OWORD *)((char *)this + 2904) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *((_OWORD *)this + 183) = 0u;
  *(_OWORD *)((char *)this + 2968) = 0u;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *((_OWORD *)this + 194) = 0u;
  *((_OWORD *)this + 193) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *(_OWORD *)((char *)this + 3144) = 0u;
  *((_OWORD *)this + 199) = 0u;
  *((_OWORD *)this + 198) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *((_OWORD *)this + 204) = 0u;
  *((_OWORD *)this + 203) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *((_OWORD *)this + 209) = 0u;
  *((_OWORD *)this + 208) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *((_OWORD *)this + 214) = 0u;
  *((_OWORD *)this + 213) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *((_OWORD *)this + 220) = 0u;
  *((_OWORD *)this + 219) = 0u;
  *((_OWORD *)this + 218) = 0u;
  *(_OWORD *)((char *)this + 3544) = 0u;
  *(_OWORD *)((char *)this + 3560) = 0u;
  MIL::ParserContext::InitializeFirstSets(this, a2);
  MIL::ParserContext::InitializeMILKeywords(this);
  return this;
}

void sub_1E063F9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  *(_QWORD *)(v80 - 96) = a1;
  std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::~__hash_table(v75);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v76);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a12);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v74);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a13);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v73);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a14);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v72);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a15);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v77);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a16);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v71);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a17);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v79);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a18);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v78);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a19);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a26);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a20);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a28);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a21);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a30);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a22);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a32);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a23);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a34);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a24);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a36);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a25);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a38);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a27);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a40);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a29);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a43);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a31);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a61);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a33);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a62);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a35);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a63);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a37);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a64);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a39);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a65);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a41);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a66);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a42);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a67);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a44);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a68);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a45);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a69);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a46);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a70);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a47);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 256));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a48);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 248));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a49);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 240));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a50);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 232));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a51);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 224));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a52);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 216));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a53);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 208));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a54);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 200));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a55);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 192));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a56);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 184));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a57);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 176));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a58);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 168));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a59);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 160));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a60);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 152));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 144));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 136));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 128));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 120));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 112));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(_QWORD *)(v80 - 104));
  v81 = *v70;
  *v70 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  _Unwind_Resume(*(_Unwind_Exception **)(v80 - 96));
}

uint64_t MIL::ParserContext::InitializeFirstSets(MIL::ParserContext *this, const MIL::ParserOptions *a2)
{
  uint64_t v5[5];
  unsigned int v6;
  _OWORD v7[4];
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  LODWORD(v9) = 16;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 8, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 17;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 48, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 17;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 88, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  v7[2] = xmmword_1E0B04B50;
  v7[3] = unk_1E0B04B60;
  v8[0] = xmmword_1E0B04B70;
  *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)&xmmword_1E0B04B70 + 12);
  v7[0] = xmmword_1E0B04B30;
  v7[1] = unk_1E0B04B40;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)&v9, (unsigned int *)v7, 23);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 328, &v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 408, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 448, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 488, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 528, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 568, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 0;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 608, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 648, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 688, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 728, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 768, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 808, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 848, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 888, v5);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
  LODWORD(v9) = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 928, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 968, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1008, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  v9 = 0xD00000012;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1048, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  v9 = 0xD00000012;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 2);
  v6 = 15;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)&v9, &v6, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1088, v5);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  v9 = 0x1200000036;
  v10 = 13;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 3);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1328, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1408, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1448, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1488, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1528, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1568, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1608, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1648, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1688, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1728, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1768, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1808, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1848, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1888, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1928, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1968, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2008, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2048, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2088, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 31;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 32;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 33;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 36;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 35;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 34;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2328, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 37;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 38;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2408, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 39;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2448, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 40;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2488, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 41;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2528, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 42;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2568, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 43;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2608, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 44;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2648, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 45;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2688, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 46;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2728, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 47;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2768, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 48;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2808, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 49;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2848, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 50;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2888, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 51;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2928, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 52;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2968, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 53;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3008, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 19;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3048, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 19;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3088, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  v9 = 0x1600000015;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 20;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3328, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 19;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3408, (uint64_t *)v7);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_1E0640B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v7 - 96);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::ParserContext::InitializeMILKeywords(MIL::ParserContext *this)
{
  std::string v2;
  std::string v3;
  std::string __p;
  std::string v5;

  std::string::basic_string[abi:ne180100]<0>(&v5, "tensor_buffer");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Bu, 3, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "circular_buffer");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Du, 3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v3, "pixel_buffer");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Cu, 3, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v2, "state");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Eu, 4, &v2);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_1E0640C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::`anonymous namespace'::InitializeBlockFirstSet@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5;
  unsigned int v6[10];
  _BYTE v7[40];

  v6[0] = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, v6, 1);
  v5 = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, &v5, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_1E0640D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MIL::`anonymous namespace'::InitializeTypeFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6[5];
  uint64_t v7;
  int v8;
  _OWORD v9[4];
  _OWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9[0] = xmmword_1E0B04B20;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set(a2, (unsigned int *)v9, 4);
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this) >= 2)
  {
    v9[2] = xmmword_1E0B04B50;
    v9[3] = unk_1E0B04B60;
    v10[0] = xmmword_1E0B04B70;
    *(_OWORD *)((char *)v10 + 12) = *(__int128 *)((char *)&xmmword_1E0B04B70 + 12);
    v9[0] = xmmword_1E0B04B30;
    v9[1] = unk_1E0B04B40;
    std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)&v7, (unsigned int *)v9, 23);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(a2, v6);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v7);
  }
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this) >= 3)
  {
    v7 = 0x1C0000001BLL;
    v8 = 29;
    std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, (unsigned int *)&v7, 3);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(a2, (uint64_t *)v9);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  }
  result = (*(uint64_t (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this);
  if ((int)result >= 4)
  {
    LODWORD(v7) = 30;
    std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, (unsigned int *)&v7, 1);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(a2, (uint64_t *)v9);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v9);
    return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  }
  return result;
}

void sub_1E0640F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

uint64_t MIL::`anonymous namespace'::InitializeOpFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5;
  _BYTE v6[40];
  _BYTE v7[40];

  v5 = 54;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, &v5, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_1E0640FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MIL::`anonymous namespace'::InitializeTensorValFirstSet@<X0>(uint64_t a1@<X8>)
{
  _BYTE v5[40];
  __int128 v6;
  uint64_t v7;
  _OWORD v8[4];
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[2] = xmmword_1E0B04B50;
  v8[3] = unk_1E0B04B60;
  v9[0] = xmmword_1E0B04B70;
  *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)&xmmword_1E0B04B70 + 12);
  v8[0] = xmmword_1E0B04B30;
  v8[1] = unk_1E0B04B40;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v5, (unsigned int *)v8, 23);
  v6 = xmmword_1E0B04B8C;
  v7 = 0x1600000015;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v8, (unsigned int *)&v6, 6);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
}

void sub_1E06410C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::`anonymous namespace'::InitializeIValueFirstSet@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5[10];
  unsigned int v6[10];
  _BYTE v7[40];
  _BYTE v8[40];
  _BYTE v9[40];
  _BYTE v10[44];
  unsigned int v11;

  v6[0] = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, v6, 1);
  v5[0] = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, v5, 1);
  v11 = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v5, &v11, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v10);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v8);
}

void sub_1E06411C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v2 - 64);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v2 - 104);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va2);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_1E0641220()
{
  JUMPOUT(0x1E0641210);
}

uint64_t MIL::`anonymous namespace'::InitializeArgumentFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v6[40];
  _BYTE v7[40];

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_1E0641284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *MIL::`anonymous namespace'::InitializeIDFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unsigned int v6;

  v6 = 54;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set(a2, &v6, 1);
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this) <= 2)
  {
    v6 = 27;
    std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this) <= 2)
  {
    v6 = 29;
    std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this) <= 2)
  {
    v6 = 28;
    std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  result = (_QWORD *)(*(uint64_t (**)(MIL::_anonymous_namespace_ *))(*(_QWORD *)this + 88))(this);
  if ((int)result <= 3)
  {
    v6 = 30;
    return std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  return result;
}

void sub_1E06413A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::ParserContext::GetOptions(MIL::ParserContext *this)
{
  return *(_QWORD *)this;
}

uint64_t MIL::ParserContext::GetProgramFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 8;
}

uint64_t MIL::ParserContext::GetFunctionFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 48;
}

uint64_t MIL::ParserContext::GetFunctionMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 88;
}

uint64_t MIL::ParserContext::GetOpsetBlockFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 128;
}

uint64_t MIL::ParserContext::GetOpsetBlockMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 168;
}

uint64_t MIL::ParserContext::GetBlockInputDeclsFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 208;
}

uint64_t MIL::ParserContext::GetBlockFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 248;
}

uint64_t MIL::ParserContext::GetBlockListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 288;
}

uint64_t MIL::ParserContext::GetDTypeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 328;
}

uint64_t MIL::ParserContext::GetTypeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 368;
}

uint64_t MIL::ParserContext::GetIDTypeBindingFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 408;
}

uint64_t MIL::ParserContext::GetIDTypeBindingMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 448;
}

uint64_t MIL::ParserContext::GetOpFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 488;
}

uint64_t MIL::ParserContext::GetOpListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 528;
}

uint64_t MIL::ParserContext::GetValueFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 568;
}

uint64_t MIL::ParserContext::GetValueAssignFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 608;
}

uint64_t MIL::ParserContext::GetTensorValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 648;
}

uint64_t MIL::ParserContext::GetDictValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 688;
}

uint64_t MIL::ParserContext::GetListValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 728;
}

uint64_t MIL::ParserContext::GetTupleValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 768;
}

uint64_t MIL::ParserContext::GetIValueFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 808;
}

uint64_t MIL::ParserContext::GetRefValueFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 848;
}

uint64_t MIL::ParserContext::GetValueLiteralFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 888;
}

uint64_t MIL::ParserContext::GetDictItemFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 928;
}

uint64_t MIL::ParserContext::GetDictItemListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 968;
}

uint64_t MIL::ParserContext::GetTypeListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1008;
}

uint64_t MIL::ParserContext::GetTypeLengthFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1048;
}

uint64_t MIL::ParserContext::GetDimLengthFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1088;
}

uint64_t MIL::ParserContext::GetTensorShapeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1128;
}

uint64_t MIL::ParserContext::GetTensorBufferStrideFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1168;
}

uint64_t MIL::ParserContext::GetTensorBufferStridesFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1208;
}

uint64_t MIL::ParserContext::GetTensorBufferRowAlignmentFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1248;
}

uint64_t MIL::ParserContext::GetTensorBufferInterleaveFactorFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1288;
}

uint64_t MIL::ParserContext::GetTensorBufferInterleaveFactorsFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1328;
}

uint64_t MIL::ParserContext::GetCircularBufferStrideFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1368;
}

uint64_t MIL::ParserContext::GetCircularBufferStridesFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1408;
}

uint64_t MIL::ParserContext::GetCircularBufferInterleaveFactorFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1448;
}

uint64_t MIL::ParserContext::GetCircularBufferInterleaveFactorsFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1488;
}

uint64_t MIL::ParserContext::GetCircularBufferWrapDimFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1528;
}

uint64_t MIL::ParserContext::GetCircularBufferSliceWrapDimSizeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1568;
}

uint64_t MIL::ParserContext::GetPixelBufferBytesPerRowFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1608;
}

uint64_t MIL::ParserContext::GetPixelBufferBytesPerRowVecFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1648;
}

uint64_t MIL::ParserContext::GetPixelBufferNumSlicesFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1688;
}

uint64_t MIL::ParserContext::GetPixelBufferNumSlicesVecFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1728;
}

uint64_t MIL::ParserContext::GetArgumentFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1768;
}

uint64_t MIL::ParserContext::GetArgumentListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1808;
}

uint64_t MIL::ParserContext::GetIDArgumentBindingFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1848;
}

uint64_t MIL::ParserContext::GetIDArgumentBindingMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1888;
}

uint64_t MIL::ParserContext::GetIDValueBindingFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1928;
}

uint64_t MIL::ParserContext::GetIDValueBindingMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1968;
}

uint64_t MIL::ParserContext::GetAttributesMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2008;
}

uint64_t MIL::ParserContext::GetIDTypeBindingListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2048;
}

uint64_t MIL::ParserContext::GetIDListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2088;
}

uint64_t MIL::ParserContext::GetDTYPE_BOOLFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2128;
}

uint64_t MIL::ParserContext::GetDTYPE_STRINGFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2168;
}

uint64_t MIL::ParserContext::GetDTYPE_BF16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2208;
}

uint64_t MIL::ParserContext::GetDTYPE_FP8E4M3FNFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2248;
}

uint64_t MIL::ParserContext::GetDTYPE_FP8E5M2FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2288;
}

uint64_t MIL::ParserContext::GetDTYPE_FP16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2328;
}

uint64_t MIL::ParserContext::GetDTYPE_FP32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2368;
}

uint64_t MIL::ParserContext::GetDTYPE_FP64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2408;
}

uint64_t MIL::ParserContext::GetDTYPE_INT4FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2448;
}

uint64_t MIL::ParserContext::GetDTYPE_INT8FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2488;
}

uint64_t MIL::ParserContext::GetDTYPE_INT16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2528;
}

uint64_t MIL::ParserContext::GetDTYPE_INT32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2568;
}

uint64_t MIL::ParserContext::GetDTYPE_INT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2608;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT1FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2648;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT2FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2688;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT3FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2728;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT4FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2768;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT6FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2808;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT8FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2848;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2888;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2928;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2968;
}

uint64_t MIL::ParserContext::GetDTYPE_ANYFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3008;
}

uint64_t MIL::ParserContext::GetFP32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3048;
}

uint64_t MIL::ParserContext::GetFP64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3088;
}

uint64_t MIL::ParserContext::GetUINT8FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3128;
}

uint64_t MIL::ParserContext::GetINT32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3168;
}

uint64_t MIL::ParserContext::GetINT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3208;
}

uint64_t MIL::ParserContext::GetUINT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3248;
}

uint64_t MIL::ParserContext::GetBOOLFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3288;
}

uint64_t MIL::ParserContext::GetSTRINGFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3328;
}

uint64_t MIL::ParserContext::GetSYNTAX_VERSIONFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3368;
}

uint64_t MIL::ParserContext::GetIDFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3408;
}

_QWORD *MIL::ParserContext::SetConstexprVariableValue(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3448, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v4 + 5, a3);
}

unsigned __int8 *MIL::ParserContext::GetConstexprVariableValue@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((_QWORD *)(a1 + 3448), a2);
  if (result)
  {
    v5 = *((_QWORD *)result + 6);
    *a3 = *((_QWORD *)result + 5);
    a3[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

std::string *MIL::ParserContext::AddKeyword(uint64_t a1, unsigned int a2, int a3, const std::string *a4)
{
  std::string *v6;
  unsigned int v8;
  unsigned int *v9;

  v8 = a2;
  v9 = &v8;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(a1 + 3504, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 5) = a3;
  v9 = &v8;
  v6 = (std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(a1 + 3544, &v8, (uint64_t)&std::piecewise_construct, &v9);
  return std::string::operator=(v6 + 1, a4);
}

std::string *MIL::ParserContext::GetFallbackIDForKeyword@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v7;
  std::string *result;
  const std::string *v9;
  unsigned int v10;
  unsigned int *v11;

  v10 = a2;
  a4->__r_.__value_.__s.__data_[0] = 0;
  a4[1].__r_.__value_.__s.__data_[0] = 0;
  v7 = a1 + 3504;
  result = (std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>((_QWORD *)(a1 + 3504), &v10);
  if (result)
  {
    v11 = &v10;
    result = (std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(v7, &v10, (uint64_t)&std::piecewise_construct, &v11);
    if (SHIDWORD(result->__r_.__value_.__r.__words[2]) > a3)
    {
      v11 = &v10;
      v9 = (const std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(a1 + 3544, &v10, (uint64_t)&std::piecewise_construct, &v11);
      return std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(a4, v9 + 1);
    }
  }
  return result;
}

void sub_1E0641870(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t MIL::ParserContext::GetKeywordToMinSyntaxVersionMap(MIL::ParserContext *this)
{
  return (uint64_t)this + 3504;
}

_QWORD *MIL::ParserContext::SetCurrentOperator(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(a1 + 3488), a2);
}

uint64_t MIL::ParserContext::GetCurrentOperator@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 3496);
  *a2 = *(_QWORD *)(this + 3488);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t std::unordered_set<MIL::Scanner::TokenType>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1E0641994(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1E0641BB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *MIL::`anonymous namespace'::Combine@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v4[4];

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  return std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::insert_iterator<std::unordered_set<MIL::Scanner::TokenType>>>(*(_QWORD **)(a1 + 16), 0, *(unsigned int **)(a2 + 16), 0, a3, 0, v4);
}

void sub_1E0641C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::insert_iterator<std::unordered_set<MIL::Scanner::TokenType>>>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, unsigned int *a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v10;
  int v13;
  int v14;

  v10 = result;
  if (result == a2)
  {
LABEL_10:
    if (a3 == a4)
    {
      a4 = a3;
      goto LABEL_17;
    }
    do
    {
      result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, a3 + 4, a3 + 4);
      a3 = *(unsigned int **)a3;
    }
    while (a3 != a4);
  }
  else
  {
    while (a3 != a4)
    {
      v13 = a3[4];
      v14 = *((_DWORD *)v10 + 4);
      if (v13 >= v14)
      {
        if (v14 >= v13)
          a3 = *(unsigned int **)a3;
        result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, (unsigned int *)v10 + 4, (_DWORD *)v10 + 4);
        v10 = (_QWORD *)*v10;
      }
      else
      {
        result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, a3 + 4, a3 + 4);
        a3 = *(unsigned int **)a3;
      }
      if (v10 == a2)
      {
        a6 = *result;
        v10 = a2;
        goto LABEL_10;
      }
    }
    do
    {
      result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, (unsigned int *)v10 + 4, (_DWORD *)v10 + 4);
      v10 = (_QWORD *)*v10;
    }
    while (v10 != a2);
    v10 = a2;
  }
  a6 = *result;
LABEL_17:
  *a7 = v10;
  a7[1] = a4;
  a7[2] = a5;
  a7[3] = a6;
  return result;
}

_QWORD *std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1E0641F3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1E06421D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1E0642424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t MIL::ParseError::ParseError(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[56];

  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::ParseResult::ParseResult(v12, &v11, a4, __p);
  MIL::ParseError::ParseError(a1, (uint64_t)v12);
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)v12);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[56];

  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::ParseResult::ParseResult(v12, &v11, a4, __p);
  MIL::ParseError::ParseError(a1, (uint64_t)v12);
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)v12);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_1E0642600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&a19);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::ParseError::ParseError(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string __p;

  MIL::MILResult::GetMessageWithLocation((const std::string::value_type **)a2, &__p);
  MIL::MILErrorWithResult::MILErrorWithResult((std::runtime_error *)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1EA99BFA8;
  *(_QWORD *)(a1 + 16) = off_1EA99BF68;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = &off_1EA99C010;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  return a1;
}

void sub_1E06426E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1E06427BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&a19);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::ParseError::GetReason(MIL::ParseError *this)
{
  return MIL::ParseResult::GetReason((MIL::ParseError *)((char *)this + 16));
}

uint64_t MIL::ParseError::GetResult(MIL::ParseError *this)
{
  return (uint64_t)this + 16;
}

uint64_t MIL::ParseError::GetParseResult(MIL::ParseError *this)
{
  return (uint64_t)this + 16;
}

void MIL::ParseError::~ParseError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1E0C023A0);
}

void MIL::ParseResult::~ParseResult(void **this)
{
  MIL::MILResult::~MILResult(this);
  JUMPOUT(0x1E0C023A0);
}

MIL::MILResult *MIL::ParseResult::ParseResult(MIL::ParseResult *this)
{
  MIL::MILResult *result;

  result = MIL::MILResult::MILResult(this);
  *(_QWORD *)result = &off_1EA99C010;
  *((_DWORD *)result + 12) = 2;
  return result;
}

{
  MIL::MILResult *result;

  result = MIL::MILResult::MILResult(this);
  *(_QWORD *)result = &off_1EA99C010;
  *((_DWORD *)result + 12) = 2;
  return result;
}

uint64_t MIL::ParseResult::ParseResult(uint64_t a1, __int128 *a2, int a3, uint64_t a4)
{
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  uint64_t v12;
  __int128 v13;

  v13 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v6 = MIL::MILResult::MILResult(a1, (uint64_t)&v13, (__n128 *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1EA99C010;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_1E06429B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::ParseResult::GetReason(MIL::ParseResult *this)
{
  return *((unsigned int *)this + 12);
}

BOOL MIL::ParseResult::IsGood(MIL::ParseResult *this)
{
  return *((_DWORD *)this + 12) == 2;
}

_QWORD *MIL::ParserOptions::ParserOptions(_QWORD *this)
{
  *this = off_1EA99C058;
  return this;
}

void ***MIL::ParserOptions::Make@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  void **v5;

  v3 = operator new();
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)v3 = &off_1EA99C0F0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_WORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 60) = 4;
  v5 = 0;
  *a1 = v3;
}

void ***std::unique_ptr<`anonymous namespace'::ParserOptionsImpl>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x1E0C023A0]();
  }
  return a1;
}

void `anonymous namespace'::ParserOptionsImpl::~ParserOptionsImpl(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  JUMPOUT(0x1E0C023A0);
}

void ***`anonymous namespace'::ParserOptionsImpl::Clone@<X0>(_anonymous_namespace_::ParserOptionsImpl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  void **v8;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_1EA99C0F0;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  v6 = (std::string *)(v5 + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    *(_QWORD *)(v5 + 48) = *((_QWORD *)this + 6);
  }
  *(_QWORD *)(v5 + 56) = *((_QWORD *)this + 7);
  *(_BYTE *)(v5 + 64) = *((_BYTE *)this + 64);
  v8 = 0;
  *a2 = v5;
}

void sub_1E0642C08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x1E0C023A0](v1, 0x1093C400CF8972DLL);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::GetModelFilePath(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return (uint64_t)this + 32;
}

__n128 `anonymous namespace'::ParserOptionsImpl::SetModelFilePath(uint64_t a1, std::string *this, int a3)
{
  std::string::size_type v5;
  const char *v6;
  std::string::size_type v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  __n128 result;
  std::string v14;
  std::string __p;
  char v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_14;
  memset(&__p, 0, sizeof(__p));
  v5 = std::string::rfind(this, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1)
  {
    v6 = "./";
  }
  else
  {
    if (v5)
    {
      std::string::basic_string(&v14, this, 0, v5, (std::allocator<char> *)&v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v14;
      goto LABEL_10;
    }
    v6 = "/";
  }
  MEMORY[0x1E0C02010](&__p, v6);
LABEL_10:
  v17[0] = __p.__r_.__value_.__l.__size_;
  v7 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = v17[0];
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a1 + 31) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = v17[0];
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a1 + 31) = v8;
  }
LABEL_14:
  v12 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v12);
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  *(__n128 *)v12 = result;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  return result;
}

void sub_1E0642DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::GetModelPath(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return (uint64_t)this + 8;
}

__n128 `anonymous namespace'::ParserOptionsImpl::SetModelPath(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  __n128 result;

  v3 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t `anonymous namespace'::ParserOptionsImpl::GetValidateProgram(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::SetValidateProgram(uint64_t this, int a2)
{
  BOOL v2;
  std::runtime_error *exception;

  if (*(_BYTE *)(this + 64))
    v2 = a2 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(this + 56) = a2;
  return this;
}

void sub_1E0642E90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::GetIgnoreUnregisteredSpecializations(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::SetIgnoreUnregisteredSpecializations(uint64_t this, char a2)
{
  *(_BYTE *)(this + 57) = a2;
  return this;
}

uint64_t `anonymous namespace'::ParserOptionsImpl::GetDefaultSyntaxVersion(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::SetDefaultSyntaxVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 60) = a2;
  return result;
}

uint64_t `anonymous namespace'::ParserOptionsImpl::GetIgnoreWeightFile(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t `anonymous namespace'::ParserOptionsImpl::SetIgnoreWeightFile(uint64_t this, int a2)
{
  BOOL v2;
  std::runtime_error *exception;

  if (*(_BYTE *)(this + 56))
    v2 = a2 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(this + 64) = a2;
  return this;
}

void sub_1E0642F28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Proto::ParseBlock(_anonymous_namespace_::IRBlockImpl **__return_ptr a1@<X8>, void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a3@<X1>, const MIL::IROpset *a4@<X2>, const CoreML::Specification::MILSpec::Block *a5@<X3>)
{
  void **p_data;
  std::__shared_weak_count *v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 *v33;
  __int128 v34;
  MIL::IRNamedValueType *v35;
  std::__shared_weak_count *v36;
  MIL::IRNamedValueType *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  MIL::IRNamedValueType **v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  __int128 v50;
  int64x2_t v51;
  char *v52;
  void **v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  std::string *end;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  const MIL::IROpset *v61;
  uint64_t v62;
  const MIL::IROpset **v63;
  BOOL v64;
  const MIL::IROpset *v65;
  const MIL::IROpset **v66;
  uint64_t v67;
  const MIL::IROpset **v68;
  MIL::IRNamedValueType *v69;
  std::__shared_weak_count *v70;
  MIL::IRNamedValueType *v71;
  std::string::size_type size;
  std::string::size_type v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  MIL::IRNamedValueType **v80;
  _QWORD *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  __int128 v84;
  int64x2_t v85;
  std::string::size_type v86;
  MIL::IRNamedValueType *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void **v105;
  std::__shared_weak_count *v106;
  int64x2_t v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::string v113;
  std::vector<std::string> __p;
  MIL::IRNamedValueType *v115;
  MIL::IRNamedValueType *v116;
  std::__shared_weak_count *v117;
  std::string *p_p;
  int64x2_t v119;
  char *v120;
  std::string::value_type *v121;

  MIL::UnknownLocation::Make(&p_p);
  p_data = (void **)&p_p->__r_.__value_.__l.__data_;
  v111 = (void **)&p_p->__r_.__value_.__l.__data_;
  if (p_p)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = (void **)&p_p->__r_.__value_.__l.__data_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  }
  else
  {
    v9 = 0;
  }
  v112 = v9;
  MIL::UnknownLocation::Make(&v109);
  *(_QWORD *)&v110 = v109;
  if (v109)
  {
    v11 = (_QWORD *)operator new();
    v12 = v109;
    *v11 = &unk_1EA9940C8;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)&v110 + 1) = v11;
  v109 = 0;
  v105 = p_data;
  v106 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v108 = 0;
  v107 = 0uLL;
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v107, *((int *)a4 + 6));
  v15 = *((_QWORD *)a4 + 4);
  if (v15)
    v16 = (uint64_t *)(v15 + 8);
  else
    v16 = 0;
  v17 = *((int *)a4 + 6);
  if ((_DWORD)v17)
  {
    v18 = &v16[v17];
    do
    {
      v19 = *v16;
      p_p = (std::string *)v105;
      v119.i64[0] = (uint64_t)v9;
      if (v9)
      {
        v20 = (unint64_t *)&v9->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = *(_QWORD *)(v19 + 16);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid block parameter name");
      MIL::Util::ValidateIsIdentifier(&p_p, v22, (__int128 *)&__p);
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
        operator delete(__p.__begin_);
      v23 = (std::__shared_weak_count *)v119.i64[0];
      if (v119.i64[0])
      {
        v24 = (unint64_t *)(v119.i64[0] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (*(_QWORD *)(v19 + 24))
        v26 = *(uint64_t **)(v19 + 24);
      else
        v26 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      p_p = (std::string *)v105;
      v119.i64[0] = (uint64_t)v9;
      if (v9)
      {
        v27 = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = MIL::Proto::ParseValueType(this, (uint64_t)v26, (uint64_t)a5, &p_p);
      v30 = (std::__shared_weak_count *)v119.i64[0];
      if (v119.i64[0])
      {
        v31 = (unint64_t *)(v119.i64[0] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = *(__int128 **)(v19 + 16);
      if (*((char *)v33 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
      }
      else
      {
        v34 = *v33;
        v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v34;
      }
      MIL::IRNamedValueType::Make((uint64_t *)&v113, v29, (uint64_t *)&v115);
      v35 = v115;
      v116 = v115;
      if (v115)
      {
        v36 = (std::__shared_weak_count *)operator new();
        v37 = v115;
        v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA993900;
        v36->__shared_owners_ = 0;
        v36->__shared_weak_owners_ = 0;
        v36[1].__vftable = (std::__shared_weak_count_vtbl *)v37;
      }
      else
      {
        v36 = 0;
      }
      v117 = v36;
      v115 = 0;
      v38 = v107.i64[1];
      if (v107.i64[1] >= (unint64_t)v108)
      {
        v40 = (v107.i64[1] - v107.i64[0]) >> 4;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v42 = (uint64_t)&v108[-v107.i64[0]];
        if ((uint64_t)&v108[-v107.i64[0]] >> 3 > v41)
          v41 = v42 >> 3;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        v121 = (std::string::value_type *)&v108;
        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v108, v43);
        v46 = (MIL::IRNamedValueType **)&v44[16 * v40];
        *v46 = v35;
        v46[1] = (MIL::IRNamedValueType *)v36;
        v116 = 0;
        v117 = 0;
        v47 = (_QWORD *)v107.i64[1];
        v48 = (_QWORD *)v107.i64[0];
        if (v107.i64[1] == v107.i64[0])
        {
          v51 = vdupq_n_s64(v107.u64[1]);
          v49 = &v44[16 * v40];
        }
        else
        {
          v49 = &v44[16 * v40];
          do
          {
            v50 = *((_OWORD *)v47 - 1);
            v47 -= 2;
            *((_OWORD *)v49 - 1) = v50;
            v49 -= 16;
            *v47 = 0;
            v47[1] = 0;
          }
          while (v47 != v48);
          v51 = v107;
        }
        v39 = v46 + 2;
        v107.i64[0] = (uint64_t)v49;
        v107.i64[1] = (uint64_t)(v46 + 2);
        v119 = v51;
        v52 = v108;
        v108 = &v44[16 * v45];
        v120 = v52;
        p_p = (std::string *)v51.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&p_p);
      }
      else
      {
        *(_QWORD *)v107.i64[1] = v35;
        *(_QWORD *)(v38 + 8) = v36;
        v39 = (_QWORD *)(v38 + 16);
      }
      v107.i64[1] = (uint64_t)v39;
      v53 = (void **)v115;
      v115 = 0;
      if (v53)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v53);
        MEMORY[0x1E0C023A0]();
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      ++v16;
    }
    while (v16 != v18);
  }
  memset(&__p, 0, sizeof(__p));
  std::vector<std::string>::reserve(&__p, *((int *)a4 + 12));
  v54 = *((_QWORD *)a4 + 7);
  if (v54)
    v55 = (uint64_t *)(v54 + 8);
  else
    v55 = 0;
  v56 = *((int *)a4 + 12);
  if ((_DWORD)v56)
  {
    end = __p.__end_;
    v58 = 8 * v56;
    do
    {
      v59 = *v55;
      if (end >= __p.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)v59);
      }
      else
      {
        if (*(char *)(v59 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v59, *(_QWORD *)(v59 + 8));
        }
        else
        {
          v60 = *(_OWORD *)v59;
          end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v60;
        }
        ++end;
      }
      __p.__end_ = end;
      ++v55;
      v58 -= 8;
    }
    while (v58);
    v61 = a4;
    LODWORD(v56) = *((_DWORD *)a4 + 12);
  }
  else
  {
    v61 = a4;
  }
  memset(&v113, 0, sizeof(v113));
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(&v113.__r_.__value_.__l.__data_, (int)v56);
  v62 = *((_QWORD *)v61 + 10);
  v63 = (const MIL::IROpset **)(v62 + 8);
  v64 = v62 == 0;
  v65 = v61;
  if (v64)
    v66 = 0;
  else
    v66 = v63;
  v67 = *((int *)v65 + 18);
  if ((_DWORD)v67)
  {
    v68 = &v66[v67];
    do
    {
      MIL::Proto::ParseOperation((MIL::Proto *)this, a3, *v66, a5, &v115);
      v69 = v115;
      v116 = v115;
      if (v115)
      {
        v70 = (std::__shared_weak_count *)operator new();
        v71 = v115;
        v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992FA8;
        v70->__shared_owners_ = 0;
        v70->__shared_weak_owners_ = 0;
        v70[1].__vftable = (std::__shared_weak_count_vtbl *)v71;
      }
      else
      {
        v70 = 0;
      }
      v117 = v70;
      v115 = 0;
      size = v113.__r_.__value_.__l.__size_;
      if (v113.__r_.__value_.__l.__size_ >= v113.__r_.__value_.__r.__words[2])
      {
        v74 = (uint64_t)(v113.__r_.__value_.__l.__size_ - v113.__r_.__value_.__r.__words[0]) >> 4;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v76 = v113.__r_.__value_.__r.__words[2] - v113.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v113.__r_.__value_.__r.__words[2] - v113.__r_.__value_.__r.__words[0]) >> 3 > v75)
          v75 = v76 >> 3;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
          v77 = 0xFFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        v121 = &v113.__r_.__value_.__s.__data_[16];
        v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v113.__r_.__value_.__r.__words[2], v77);
        v80 = (MIL::IRNamedValueType **)&v78[16 * v74];
        *v80 = v69;
        v80[1] = (MIL::IRNamedValueType *)v70;
        v116 = 0;
        v117 = 0;
        v81 = (_QWORD *)v113.__r_.__value_.__l.__size_;
        v82 = v113.__r_.__value_.__r.__words[0];
        if (v113.__r_.__value_.__l.__size_ == v113.__r_.__value_.__r.__words[0])
        {
          v85 = vdupq_n_s64(v113.__r_.__value_.__l.__size_);
          v83 = (std::string::size_type)&v78[16 * v74];
        }
        else
        {
          v83 = (std::string::size_type)&v78[16 * v74];
          do
          {
            v84 = *((_OWORD *)v81 - 1);
            v81 -= 2;
            *(_OWORD *)(v83 - 16) = v84;
            v83 -= 16;
            *v81 = 0;
            v81[1] = 0;
          }
          while (v81 != (_QWORD *)v82);
          v85 = *(int64x2_t *)&v113.__r_.__value_.__l.__data_;
        }
        v73 = (std::string::size_type)(v80 + 2);
        v113.__r_.__value_.__r.__words[0] = v83;
        v113.__r_.__value_.__l.__size_ = (std::string::size_type)(v80 + 2);
        v119 = v85;
        v86 = v113.__r_.__value_.__r.__words[2];
        v113.__r_.__value_.__r.__words[2] = (std::string::size_type)&v78[16 * v79];
        v120 = (char *)v86;
        p_p = (std::string *)v85.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&p_p);
      }
      else
      {
        *(_QWORD *)v113.__r_.__value_.__l.__size_ = v69;
        *(_QWORD *)(size + 8) = v70;
        v73 = size + 16;
      }
      v113.__r_.__value_.__l.__size_ = v73;
      v87 = v115;
      v115 = 0;
      if (v87)
        (*(void (**)(MIL::IRNamedValueType *))(*(_QWORD *)v87 + 8))(v87);
      ++v66;
    }
    while (v66 != v68);
  }
  v116 = (MIL::IRNamedValueType *)v111;
  v117 = v112;
  if (v112)
  {
    v88 = (unint64_t *)&v112->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  MIL::Proto::ParseAttributes(this, (uint64_t)a4 + 96, a5, &v116, (uint64_t)&p_p);
  MIL::IRBlock::Make(&v110, (uint64_t)&v107, (uint64_t)&__p, (uint64_t)&v113, (uint64_t *)&p_p, a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&p_p);
  v90 = v117;
  if (v117)
  {
    v91 = (unint64_t *)&v117->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  p_p = &v113;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = (std::string *)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = (std::string *)&v107;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  if (v106)
  {
    v93 = (unint64_t *)&v106->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v109;
  v109 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = v112;
  if (v112)
  {
    v100 = (unint64_t *)&v112->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
}

void sub_1E0643714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void MIL::Proto::ParseFunction(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, const CoreML::Specification::MILSpec::Function *a3@<X2>, _anonymous_namespace_::IRFunctionImpl **a4@<X8>)
{
  _QWORD *v9;
  std::string::size_type v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  MIL::MILContext *v17;
  uint64_t Options;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *exception;
  unint64_t *v70;
  unint64_t v71;
  std::string *v72;
  __int128 v73;
  MIL::MILContext *v74;
  std::string v75;
  uint64_t v76;
  std::string v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  std::string::size_type v81;
  __int128 v82;
  void *__p[2];
  char v84;
  char **v85;
  char *v86[2];
  uint64_t *v87;
  _QWORD *v88[2];
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  const void **v92;

  MIL::UnknownLocation::Make(&v75);
  *(_QWORD *)&v89 = v75.__r_.__value_.__r.__words[0];
  if (v75.__r_.__value_.__r.__words[0])
  {
    v9 = (_QWORD *)operator new();
    v10 = v75.__r_.__value_.__r.__words[0];
    *v9 = &unk_1EA9940C8;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = v10;
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)&v89 + 1) = v9;
  v88[0] = 0;
  v88[1] = 0;
  v87 = (uint64_t *)v88;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin((uint64_t)a2 + 48, &v85);
  while (v85)
  {
    v11 = (uint64_t)v85[3];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v89;
    if (*((_QWORD *)&v89 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid opset name");
    MIL::Util::ValidateIsIdentifier(&v75, v11, (__int128 *)__p);
    if (v84 < 0)
      operator delete(__p[0]);
    size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
    if (v75.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v17 = (MIL::MILContext *)((uint64_t (*)(void (***)(MIL::MILContextImpl *__hidden), uint64_t))(*this)[2])(this, v11);
    if (!v17)
    {
      Options = MIL::ParserContext::GetOptions(a3);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 72))(Options) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        v82 = v89;
        if (*((_QWORD *)&v89 + 1))
        {
          v70 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        std::operator+<char>();
        v72 = std::string::append(&v75, "'.");
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v81 = v72->__r_.__value_.__r.__words[2];
        v80 = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        MIL::ParseError::ParseError((uint64_t)exception, &v82, (uint64_t)&v80, 108);
      }
    }
    MIL::Proto::ParseBlock((_anonymous_namespace_::IRBlockImpl **)&v91, this, v17, (const MIL::IROpset *)(v11 + 24), a3);
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v19 = *(_OWORD *)v11;
      v75.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v19;
    }
    v20 = v91;
    *(_QWORD *)&v91 = 0;
    v76 = v20;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>(&v87, (const void **)&v75.__r_.__value_.__l.__data_, (__int128 *)&v75);
    v21 = v76;
    v76 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    v22 = v91;
    *(_QWORD *)&v91 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::operator++(&v85);
  }
  v23 = MIL::ParserContext::GetOptions(a3);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
  v25 = v87;
  if (v87 == (uint64_t *)v88)
    v26 = 0;
  else
    v26 = v24;
  if (v26 == 1)
  {
    do
    {
      if (((uint64_t (*)(void (***)(MIL::MILContextImpl *__hidden), uint64_t *))(*this)[2])(this, v25 + 4))
      {
        v27 = (uint64_t *)v25[1];
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = (uint64_t *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (uint64_t *)v25[2];
            v29 = *v28 == (_QWORD)v25;
            v25 = v28;
          }
          while (!v29);
        }
      }
      else
      {
        v28 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(&v87, v25);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(v25 + 4));
        operator delete(v25);
      }
      v25 = v28;
    }
    while (v28 != (uint64_t *)v88);
  }
  v30 = v89;
  v79 = v89;
  if (*((_QWORD *)&v89 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v78 = v30;
    do
      v33 = __ldxr(v31);
    while (__stxr(v33 + 1, v31));
  }
  else
  {
    v78 = (unint64_t)v89;
  }
  v86[0] = 0;
  v86[1] = 0;
  v85 = v86;
  v34 = *((_QWORD *)a2 + 4);
  if (v34)
    v35 = (uint64_t *)(v34 + 8);
  else
    v35 = 0;
  v74 = a2;
  v36 = *((int *)a2 + 6);
  if ((_DWORD)v36)
  {
    v37 = &v35[v36];
    do
    {
      v38 = *v35;
      v91 = v78;
      if (*((_QWORD *)&v78 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = *(_QWORD *)(v38 + 16);
      std::string::basic_string[abi:ne180100]<0>(&v75, "Invalid function parameter name");
      MIL::Util::ValidateIsIdentifier(&v91, v41, (__int128 *)&v75);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v42 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (*(_QWORD *)(v38 + 24))
        v45 = *(uint64_t **)(v38 + 24);
      else
        v45 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      MIL::UnknownLocation::Make(&v90);
      *(_QWORD *)&v91 = v90;
      if (v90)
      {
        v46 = (_QWORD *)operator new();
        v47 = v90;
        *v46 = &unk_1EA9940C8;
        v46[1] = 0;
        v46[2] = 0;
        v46[3] = v47;
      }
      else
      {
        v46 = 0;
      }
      *((_QWORD *)&v91 + 1) = v46;
      v90 = 0;
      v48 = MIL::Proto::ParseValueType(this, (uint64_t)v45, (uint64_t)a3, &v91);
      v92 = *(const void ***)(v38 + 16);
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v85, v92, (uint64_t)&std::piecewise_construct, (__int128 **)&v92)[7] = v48;
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v90;
      v90 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      ++v35;
    }
    while (v35 != v37);
  }
  v53 = (__int128 *)*((_QWORD *)v74 + 13);
  if (*((char *)v53 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v53, *((_QWORD *)v53 + 1));
  }
  else
  {
    v54 = *v53;
    v77.__r_.__value_.__r.__words[2] = *((_QWORD *)v53 + 2);
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v54;
  }
  v91 = v89;
  if (*((_QWORD *)&v89 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  MIL::Proto::ParseAttributes(this, (uint64_t)v74 + 80, a3, &v91, (uint64_t)&v75);
  MIL::IRFunction::Make(&v79, &v85, (uint64_t)&v77, &v87, (uint64_t *)&v75, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v75);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v85, v86[0]);
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy((uint64_t)&v87, v88[0]);
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_1E0643FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,char *a46)
{
  uint64_t v46;

  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a45, a46);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v46 - 168, *(_QWORD **)(v46 - 160));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v46 - 144);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)(result + 16);
  v3 = v2[3];
  v4 = v2[1];
  if (v4 <= v3)
  {
    v6 = 0;
  }
  else
  {
    v5 = v2[4];
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 8 * v3);
      if (v6)
        break;
      if (v4 == ++v3)
      {
        v6 = 0;
        v3 = v2[1];
        goto LABEL_9;
      }
    }
    if (v6 == *(_QWORD *)(v5 + 8 * (v3 ^ 1)))
      v6 = *(_QWORD *)(*(_QWORD *)v6 + 32);
  }
LABEL_9:
  *a2 = v6;
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::operator++(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v11;

  v2 = *(_QWORD *)(*a1 + 32);
  if (v2)
    goto LABEL_2;
  v11 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v11))
  {
    v3 = a1[2] + 1;
LABEL_13:
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  v4 = a1[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a1[1] + 32) + 8 * v4);
  v6 = (uint64_t)v11;
  v7 = (_QWORD *)v11[1];
  if (v7)
  {
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      v8 = *(_QWORD **)(v6 + 16);
      v9 = *v8 == v6;
      v6 = (uint64_t)v8;
    }
    while (!v9);
  }
  v11 = v8;
  if (v8 == (_QWORD *)(v5 + 8))
  {
    v3 = v4 + 2;
    goto LABEL_13;
  }
  v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

BOOL google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)a1;
  v6 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v4 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v5)
    return 1;
  if (v8 && v8 != *(_QWORD *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        break;
      if ((unsigned __int8 *)v8 == v5)
        return 1;
    }
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper(v4, v5, a2, &v13);
  v9 = v14;
  *(_QWORD *)(a1 + 16) = v14;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v11 = *(_QWORD *)(v10 + 8 * v9);
  return !v11 || v11 != *(_QWORD *)(v10 + 8 * (v9 ^ 1));
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::SearchFrom(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = 0;
  v2 = result[1];
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 32);
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * a2);
      if (v5)
        break;
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    v6 = *(_QWORD *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6)
      *result = *(_QWORD *)(*(_QWORD *)v5 + 32);
    else
      *result = v5;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  char v14;

  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber(a1, a2);
  v9 = result;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(_QWORD *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v14, (unsigned __int8 *)v11, a2);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
          goto LABEL_10;
      }
      *a4 = v11;
      goto LABEL_12;
    }
    v9 = result & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    v13 = (const void **)a2;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::find<std::string *>(v12, &v13);
    if (v12 + 8 != result)
    {
      if (a3)
        *a3 = result;
      *a4 = *(_QWORD *)(result + 32);
LABEL_12:
      a4[1] = a1;
      a4[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_13:
  a4[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if ((char)a2[23] >= 0)
    v2 = a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = v2 + 1;
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, const void ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 24;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, *(const void ***)(v3 + 32), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, *a2, *(const void ***)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t MIL::Proto::ParseAttributes@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, MIL::ParserContext *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  __int128 *v10;
  unsigned __int8 *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  void *__p[2];
  char v17;
  _QWORD v18[3];
  __int128 *v19;

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin(a2, v18);
  while (v18[0])
  {
    v10 = *(__int128 **)(v18[0] + 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid attribute name");
    MIL::Util::ValidateIsIdentifier(a4, (uint64_t)v10, (__int128 *)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    MIL::Proto::ParseValue(a1, (uint64_t)v10 + 24, a3, a4, &v15);
    v19 = v10;
    v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (unsigned __int8 *)v10, (uint64_t)&std::piecewise_construct, &v19);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v11 + 40), &v15);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    result = (uint64_t)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::operator++(v18);
  }
  return result;
}

void sub_1E06446B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void MIL::Proto::ParseOperation(MIL::Proto *this@<X0>, MIL::MILContext *a2@<X1>, const MIL::IROpset *a3@<X2>, const CoreML::Specification::MILSpec::Operation *a4@<X3>, _anonymous_namespace_::IROperationImpl **a5@<X8>)
{
  MIL::ParserContext *v10;
  uint64_t v11;
  const MIL::IROpset **v12;
  uint64_t v13;
  const MIL::IROpset **v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string::size_type v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  std::string::size_type *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  char *v32;
  std::string::size_type v33;
  const MIL::IROpset *v34;
  std::string::size_type v35;
  uint64_t v36;
  _QWORD *v37;
  std::string::size_type v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type v42;
  uint64_t v43;
  MIL::IRTensorValueType *v44;
  MIL::IRTensorValueType *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::string::size_type v49;
  _QWORD *v50;
  std::string::size_type v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  const MIL::IROpset *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t Options;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 *v80;
  __int128 v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  _QWORD *v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  uint64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  std::string::size_type *v96;
  _QWORD *v97;
  std::string::size_type v98;
  std::string::size_type v99;
  __int128 v100;
  int64x2_t v101;
  const MIL::IROperator *v102;
  int IsConstexprOpTakingInputs;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::string::size_type v110;
  _QWORD *v111;
  std::string::size_type v112;
  __int128 *v113;
  __int128 v114;
  char *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 *v123;
  __int128 v124;
  std::string::size_type v125;
  _QWORD *v126;
  std::string::size_type v127;
  std::string::size_type v128;
  std::string::size_type v129;
  uint64_t v130;
  unint64_t v131;
  int64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  std::string::size_type *v136;
  _QWORD *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  __int128 v140;
  int64x2_t v141;
  std::string::size_type v142;
  _QWORD *v143;
  std::string::size_type v144;
  std::string::size_type v145;
  std::string::size_type v146;
  uint64_t v147;
  unint64_t v148;
  int64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  std::string::size_type *v153;
  _QWORD *v154;
  std::string::size_type v155;
  std::string::size_type v156;
  __int128 v157;
  int64x2_t v158;
  std::string::size_type v159;
  std::string::size_type v160;
  uint64_t v161;
  unint64_t v162;
  int64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  std::string::size_type *v167;
  _QWORD *v168;
  std::string::size_type v169;
  std::string::size_type v170;
  __int128 v171;
  int64x2_t v172;
  char *v173;
  uint64_t v174;
  void *v175;
  char *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t *v183;
  std::string *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  __int128 *v196;
  __int128 v197;
  uint64_t *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  std::string::size_type v202;
  _QWORD *v203;
  std::string::size_type v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  std::string::size_type *v213;
  _QWORD *v214;
  _QWORD *v215;
  char *v216;
  __int128 v217;
  int64x2_t v218;
  char *v219;
  void **v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t Name;
  __int128 v235;
  __int128 v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  void *v248;
  unint64_t *v249;
  unint64_t v250;
  std::string *v251;
  __int128 v252;
  void *exception;
  unint64_t *v254;
  unint64_t v255;
  std::string *v256;
  __int128 v257;
  void *v258;
  unint64_t *v259;
  unint64_t v260;
  const MIL::IROpset *v262;
  const void **v263;
  __int128 v264;
  std::string v265;
  uint64_t *v266;
  _QWORD *v267[2];
  __int128 v268;
  __int128 v269;
  __int128 v270;
  _QWORD v271[3];
  __int128 v272;
  __int128 v273;
  std::string::size_type v274;
  __int128 v275;
  __int128 v276;
  void *__p;
  std::__shared_weak_count *v278;
  char v279;
  std::string v280;
  __int128 v281;
  std::string v282;
  std::string v283;
  int64x2_t v284;
  char *v285;
  std::string v286;
  __int128 v287;
  std::string v288;
  std::string v289;
  __int128 v290;
  std::string::size_type v291;
  __int128 v292;
  std::string v293;
  int64x2_t v294;
  _QWORD v295[2];
  std::string v296;
  std::string v297;
  std::string v298;
  char *v299;
  std::string::size_type *v300;

  v284 = 0uLL;
  v285 = 0;
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v284, *((int *)a3 + 20));
  v11 = *((_QWORD *)a3 + 11);
  if (v11)
    v12 = (const MIL::IROpset **)(v11 + 8);
  else
    v12 = 0;
  v262 = a3;
  v13 = *((int *)a3 + 20);
  if ((_DWORD)v13)
  {
    v14 = &v12[v13];
    do
    {
      MIL::Proto::ParseBlock((uint64_t *)&v297, this, a2, *v12, a4, v10);
      v15 = v297.__r_.__value_.__r.__words[0];
      __p = (void *)v297.__r_.__value_.__r.__words[0];
      if (v297.__r_.__value_.__r.__words[0])
      {
        v16 = (std::__shared_weak_count *)operator new();
        v17 = v297.__r_.__value_.__r.__words[0];
        v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992F48;
        v16->__shared_owners_ = 0;
        v16->__shared_weak_owners_ = 0;
        v16[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
      }
      else
      {
        v16 = 0;
      }
      v278 = v16;
      v297.__r_.__value_.__r.__words[0] = 0;
      v18 = v284.i64[1];
      if (v284.i64[1] >= (unint64_t)v285)
      {
        v20 = (v284.i64[1] - v284.i64[0]) >> 4;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v22 = (uint64_t)&v285[-v284.i64[0]];
        if ((uint64_t)&v285[-v284.i64[0]] >> 3 > v21)
          v21 = v22 >> 3;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        v300 = (std::string::size_type *)&v285;
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v285, v23);
        v26 = (std::string::size_type *)&v24[16 * v20];
        *v26 = v15;
        v26[1] = (std::string::size_type)v16;
        __p = 0;
        v278 = 0;
        v27 = (_QWORD *)v284.i64[1];
        v28 = (_QWORD *)v284.i64[0];
        if (v284.i64[1] == v284.i64[0])
        {
          v31 = vdupq_n_s64(v284.u64[1]);
          v29 = &v24[16 * v20];
        }
        else
        {
          v29 = &v24[16 * v20];
          do
          {
            v30 = *((_OWORD *)v27 - 1);
            v27 -= 2;
            *((_OWORD *)v29 - 1) = v30;
            v29 -= 16;
            *v27 = 0;
            v27[1] = 0;
          }
          while (v27 != v28);
          v31 = v284;
        }
        v19 = v26 + 2;
        v284.i64[0] = (uint64_t)v29;
        v284.i64[1] = (uint64_t)(v26 + 2);
        *(int64x2_t *)&v298.__r_.__value_.__r.__words[1] = v31;
        v32 = v285;
        v285 = &v24[16 * v25];
        v299 = v32;
        v298.__r_.__value_.__r.__words[0] = v31.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
      }
      else
      {
        *(_QWORD *)v284.i64[1] = v15;
        *(_QWORD *)(v18 + 8) = v16;
        v19 = (_QWORD *)(v18 + 16);
      }
      v284.i64[1] = (uint64_t)v19;
      v33 = v297.__r_.__value_.__r.__words[0];
      v297.__r_.__value_.__r.__words[0] = 0;
      if (v33)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v33 + 8))(v33);
      ++v12;
    }
    while (v12 != v14);
  }
  v34 = v262;
  std::operator+<char>();
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper(*((_QWORD *)v262 + 15), (unsigned __int8 *)&__p, 0, &v298);
  v35 = v298.__r_.__value_.__r.__words[0];
  if (v279 < 0)
    operator delete(__p);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 24);
    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v282, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
    else
      v282 = v283;
    MIL::OperationNameLocation::Make((uint64_t)&v282, (uint64_t *)&v297);
    v298.__r_.__value_.__r.__words[0] = v297.__r_.__value_.__r.__words[0];
    if (v297.__r_.__value_.__r.__words[0])
    {
      v37 = (_QWORD *)operator new();
      v38 = v297.__r_.__value_.__r.__words[0];
      *v37 = &unk_1EA99C190;
      v37[1] = 0;
      v37[2] = 0;
      v37[3] = v38;
    }
    else
    {
      v37 = 0;
    }
    v298.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    v297.__r_.__value_.__r.__words[0] = 0;
    MIL::Proto::ParseValue((void (***)(MIL::MILContextImpl *__hidden))this, v36 + 24, a4, &v298, &__p);
    size = (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_;
    if (v298.__r_.__value_.__l.__size_)
    {
      v40 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v42 = v297.__r_.__value_.__r.__words[0];
    v297.__r_.__value_.__r.__words[0] = 0;
    if (v42)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v42 + 8))(v42);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    v43 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
    v44 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
    v45 = v44;
    if (v44
      && MIL::IRTensorValueType::IsScalar(v44)
      && (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v45 + 88))(v45) == 3)
    {
      MIL::IRValue::GetScalar<std::string>(__p, &v298);
      if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v283.__r_.__value_.__l.__data_);
      v283 = v298;
    }
    v46 = v278;
    if (v278)
    {
      p_shared_owners = (unint64_t *)&v278->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v34 = v262;
  }
  else
  {
    std::operator+<char>();
    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v283.__r_.__value_.__l.__data_);
    v283 = v298;
  }
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v280, v283.__r_.__value_.__l.__data_, v283.__r_.__value_.__l.__size_);
  else
    v280 = v283;
  MIL::OperationNameLocation::Make((uint64_t)&v280, (uint64_t *)&v298);
  v49 = v298.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v281 = v298.__r_.__value_.__r.__words[0];
  if (v298.__r_.__value_.__r.__words[0])
  {
    v50 = (_QWORD *)operator new();
    v51 = v298.__r_.__value_.__r.__words[0];
    *v50 = &unk_1EA99C190;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v52 = (uint64_t)v34 + 104;
  *((_QWORD *)&v281 + 1) = v50;
  v298.__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v298.__r_.__value_.__r.__words[0] = v49;
  v298.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
  if (v50)
  {
    v53 = v50 + 1;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  MIL::Proto::ParseAttributes((void (***)(MIL::MILContextImpl *__hidden))this, v52, a4, &v298, (uint64_t)&__p);
  v55 = (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_;
  if (v298.__r_.__value_.__l.__size_)
  {
    v56 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v276 = 0uLL;
  if (a2)
  {
    v58 = v262;
    MIL::IROpset::TryGetOperatorSharedPtr((uint64_t)a2, *((unsigned __int8 **)v262 + 16), &v298);
    v276 = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
    if (!v298.__r_.__value_.__r.__words[0])
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v275 = v281;
      if (*((_QWORD *)&v281 + 1))
      {
        v254 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
        do
          v255 = __ldxr(v254);
        while (__stxr(v255 + 1, v254));
      }
      std::operator+<char>();
      v256 = std::string::append(&v298, "'.");
      v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
      v274 = v256->__r_.__value_.__r.__words[2];
      v273 = v257;
      v256->__r_.__value_.__l.__size_ = 0;
      v256->__r_.__value_.__r.__words[2] = 0;
      v256->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)exception, &v275, (uint64_t)&v273, 107);
    }
    v270 = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
    if (v298.__r_.__value_.__l.__size_)
    {
      v59 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
  }
  else
  {
    Options = MIL::ParserContext::GetOptions(a4);
    v58 = v262;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)Options + 72))(Options))
    {
      v258 = __cxa_allocate_exception(0x48uLL);
      v272 = v281;
      if (*((_QWORD *)&v281 + 1))
      {
        v259 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
        do
          v260 = __ldxr(v259);
        while (__stxr(v260 + 1, v259));
      }
      std::string::basic_string[abi:ne180100]<0>(v271, "No opset was provided but unregistered specializations are not ignored.");
      MIL::ParseError::ParseError((uint64_t)v258, &v272, (uint64_t)v271, 108);
    }
    v270 = 0uLL;
  }
  MIL::ParserContext::SetCurrentOperator((uint64_t)a4, (uint64_t *)&v270);
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
  if (*((_QWORD *)&v270 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v269 = v281;
  if (*((_QWORD *)&v281 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v268 = v276;
  v276 = 0uLL;
  v267[0] = 0;
  v267[1] = 0;
  v266 = (uint64_t *)v267;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin((uint64_t)v58 + 24, &v297);
  while (v297.__r_.__value_.__r.__words[0])
  {
    v67 = *(_QWORD *)(v297.__r_.__value_.__r.__words[0] + 24);
    memset(&v296, 0, sizeof(v296));
    v68 = *(_QWORD *)(v67 + 56);
    if (v68)
      v69 = (uint64_t *)(v68 + 8);
    else
      v69 = 0;
    v263 = (const void **)v67;
    v70 = *(int *)(v67 + 48);
    if ((_DWORD)v70)
    {
      v71 = &v69[v70];
      do
      {
        v72 = *v69;
        v73 = *(_DWORD *)(*v69 + 28);
        if (v73 == 2)
        {
          v82 = *(_QWORD *)(v72 + 16);
          v292 = v281;
          if (*((_QWORD *)&v281 + 1))
          {
            v83 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          MIL::Proto::ParseValue((void (***)(MIL::MILContextImpl *__hidden))this, v82, a4, &v292, &v287);
          MIL::IRArgument::Make(&v287, (uint64_t *)&v291);
          v85 = v291;
          v286.__r_.__value_.__r.__words[0] = v291;
          if (v291)
          {
            v86 = (_QWORD *)operator new();
            v87 = v291;
            *v86 = &unk_1EA9942C8;
            v86[1] = 0;
            v86[2] = 0;
            v86[3] = v87;
          }
          else
          {
            v86 = 0;
          }
          v286.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
          v291 = 0;
          v88 = v296.__r_.__value_.__l.__size_;
          if (v296.__r_.__value_.__l.__size_ >= v296.__r_.__value_.__r.__words[2])
          {
            v90 = (uint64_t)(v296.__r_.__value_.__l.__size_ - v296.__r_.__value_.__r.__words[0]) >> 4;
            v91 = v90 + 1;
            if ((unint64_t)(v90 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v92 = v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0]) >> 3 > v91)
              v91 = v92 >> 3;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0)
              v93 = 0xFFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            v300 = &v296.__r_.__value_.__r.__words[2];
            v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v296.__r_.__value_.__r.__words[2], v93);
            v96 = (std::string::size_type *)&v94[16 * v90];
            *v96 = v85;
            v96[1] = (std::string::size_type)v86;
            *(_OWORD *)&v286.__r_.__value_.__l.__data_ = 0uLL;
            v97 = (_QWORD *)v296.__r_.__value_.__l.__size_;
            v98 = v296.__r_.__value_.__r.__words[0];
            if (v296.__r_.__value_.__l.__size_ == v296.__r_.__value_.__r.__words[0])
            {
              v101 = vdupq_n_s64(v296.__r_.__value_.__l.__size_);
              v99 = (std::string::size_type)&v94[16 * v90];
            }
            else
            {
              v99 = (std::string::size_type)&v94[16 * v90];
              do
              {
                v100 = *((_OWORD *)v97 - 1);
                v97 -= 2;
                *(_OWORD *)(v99 - 16) = v100;
                v99 -= 16;
                *v97 = 0;
                v97[1] = 0;
              }
              while (v97 != (_QWORD *)v98);
              v101 = *(int64x2_t *)&v296.__r_.__value_.__l.__data_;
            }
            v89 = (std::string::size_type)(v96 + 2);
            v296.__r_.__value_.__r.__words[0] = v99;
            v296.__r_.__value_.__l.__size_ = (std::string::size_type)(v96 + 2);
            *(int64x2_t *)&v298.__r_.__value_.__r.__words[1] = v101;
            v115 = (char *)v296.__r_.__value_.__r.__words[2];
            v296.__r_.__value_.__r.__words[2] = (std::string::size_type)&v94[16 * v95];
            v299 = v115;
            v298.__r_.__value_.__r.__words[0] = v101.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
          }
          else
          {
            *(_QWORD *)v296.__r_.__value_.__l.__size_ = v85;
            *(_QWORD *)(v88 + 8) = v86;
            v89 = v88 + 16;
            *(_OWORD *)&v286.__r_.__value_.__l.__data_ = 0uLL;
          }
          v296.__r_.__value_.__l.__size_ = v89;
          v116 = v291;
          v291 = 0;
          if (v116)
            (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
          v117 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
          if (*((_QWORD *)&v287 + 1))
          {
            v118 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (!*((_QWORD *)&v292 + 1))
            goto LABEL_242;
          v121 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          goto LABEL_240;
        }
        if (v73 != 1)
        {
          v248 = __cxa_allocate_exception(0x48uLL);
          v292 = v281;
          if (*((_QWORD *)&v281 + 1))
          {
            v249 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
            do
              v250 = __ldxr(v249);
            while (__stxr(v250 + 1, v249));
          }
          std::operator+<char>();
          v251 = std::string::append(&v286, ". Expecting either binding to name or value!");
          v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
          v298.__r_.__value_.__r.__words[2] = v251->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v252;
          v251->__r_.__value_.__l.__size_ = 0;
          v251->__r_.__value_.__r.__words[2] = 0;
          v251->__r_.__value_.__r.__words[0] = 0;
          MIL::ParseError::ParseError((uint64_t)v248, &v292, (uint64_t)&v298, 101);
        }
        *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v281;
        if (!*((_QWORD *)&v281 + 1))
          goto LABEL_104;
        v74 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
        v76 = &google::protobuf::internal::fixed_address_empty_string;
        if (*(_DWORD *)(v72 + 28) == 1)
LABEL_104:
          v76 = *(__int128 **)(v72 + 16);
        std::string::basic_string[abi:ne180100]<0>(&v294, "Invalid operation parameter name");
        MIL::Util::ValidateIsIdentifier(&v298, (uint64_t)v76, (__int128 *)v294.i8);
        if (SHIBYTE(v295[0]) < 0)
          operator delete((void *)v294.i64[0]);
        v77 = (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_;
        if (v298.__r_.__value_.__l.__size_)
        {
          v78 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = &google::protobuf::internal::fixed_address_empty_string;
        if (*(_DWORD *)(v72 + 28) == 1)
          v80 = *(__int128 **)(v72 + 16);
        if (*((char *)v80 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)v80, *((_QWORD *)v80 + 1));
        }
        else
        {
          v81 = *v80;
          v293.__r_.__value_.__r.__words[2] = *((_QWORD *)v80 + 2);
          *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v81;
        }
        MIL::ParserContext::GetConstexprVariableValue((uint64_t)a4, (unsigned __int8 *)&v293, &v286);
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v293.__r_.__value_.__l.__data_);
        if (v286.__r_.__value_.__r.__words[0])
        {
          MIL::ParserContext::GetCurrentOperator((uint64_t)a4, &v298);
          IsConstexprOpTakingInputs = MIL::Util::IsConstexprOpTakingInputs((MIL::Util *)v298.__r_.__value_.__l.__data_, v102);
          v104 = IsConstexprOpTakingInputs;
          v105 = (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_;
          if (!v298.__r_.__value_.__l.__size_)
            goto LABEL_142;
          v106 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
            if (v104)
            {
LABEL_143:
              v290 = *(_OWORD *)&v286.__r_.__value_.__l.__data_;
              if (v286.__r_.__value_.__l.__size_)
              {
                v108 = (unint64_t *)(v286.__r_.__value_.__l.__size_ + 8);
                do
                  v109 = __ldxr(v108);
                while (__stxr(v109 + 1, v108));
              }
              MIL::IRArgument::Make(&v290, (uint64_t *)&v291);
              v110 = v291;
              *(_QWORD *)&v292 = v291;
              if (v291)
              {
                v111 = (_QWORD *)operator new();
                v112 = v291;
                *v111 = &unk_1EA9942C8;
                v111[1] = 0;
                v111[2] = 0;
                v111[3] = v112;
              }
              else
              {
                v111 = 0;
              }
              *((_QWORD *)&v292 + 1) = v111;
              v291 = 0;
              v145 = v296.__r_.__value_.__l.__size_;
              if (v296.__r_.__value_.__l.__size_ >= v296.__r_.__value_.__r.__words[2])
              {
                v147 = (uint64_t)(v296.__r_.__value_.__l.__size_ - v296.__r_.__value_.__r.__words[0]) >> 4;
                v148 = v147 + 1;
                if ((unint64_t)(v147 + 1) >> 60)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v149 = v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0]) >> 3 > v148)
                  v148 = v149 >> 3;
                if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0)
                  v150 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v150 = v148;
                v300 = &v296.__r_.__value_.__r.__words[2];
                v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v296.__r_.__value_.__r.__words[2], v150);
                v153 = (std::string::size_type *)&v151[16 * v147];
                *v153 = v110;
                v153[1] = (std::string::size_type)v111;
                v292 = 0uLL;
                v154 = (_QWORD *)v296.__r_.__value_.__l.__size_;
                v155 = v296.__r_.__value_.__r.__words[0];
                if (v296.__r_.__value_.__l.__size_ == v296.__r_.__value_.__r.__words[0])
                {
                  v158 = vdupq_n_s64(v296.__r_.__value_.__l.__size_);
                  v156 = (std::string::size_type)&v151[16 * v147];
                }
                else
                {
                  v156 = (std::string::size_type)&v151[16 * v147];
                  do
                  {
                    v157 = *((_OWORD *)v154 - 1);
                    v154 -= 2;
                    *(_OWORD *)(v156 - 16) = v157;
                    v156 -= 16;
                    *v154 = 0;
                    v154[1] = 0;
                  }
                  while (v154 != (_QWORD *)v155);
                  v158 = *(int64x2_t *)&v296.__r_.__value_.__l.__data_;
                }
                v146 = (std::string::size_type)(v153 + 2);
                v296.__r_.__value_.__r.__words[0] = v156;
                v296.__r_.__value_.__l.__size_ = (std::string::size_type)(v153 + 2);
                *(int64x2_t *)&v298.__r_.__value_.__r.__words[1] = v158;
                v176 = (char *)v296.__r_.__value_.__r.__words[2];
                v296.__r_.__value_.__r.__words[2] = (std::string::size_type)&v151[16 * v152];
                v299 = v176;
                v298.__r_.__value_.__r.__words[0] = v158.i64[0];
                std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
              }
              else
              {
                *(_QWORD *)v296.__r_.__value_.__l.__size_ = v110;
                *(_QWORD *)(v145 + 8) = v111;
                v146 = v145 + 16;
                v292 = 0uLL;
              }
              v296.__r_.__value_.__l.__size_ = v146;
              v177 = v291;
              v291 = 0;
              if (v177)
                (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
              v178 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
              if (*((_QWORD *)&v290 + 1))
              {
                v179 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              goto LABEL_237;
            }
          }
          else
          {
LABEL_142:
            if (IsConstexprOpTakingInputs)
              goto LABEL_143;
          }
          v123 = &google::protobuf::internal::fixed_address_empty_string;
          if (*(_DWORD *)(v72 + 28) == 1)
            v123 = *(__int128 **)(v72 + 16);
          if (*((char *)v123 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)v123, *((_QWORD *)v123 + 1));
          }
          else
          {
            v124 = *v123;
            v289.__r_.__value_.__r.__words[2] = *((_QWORD *)v123 + 2);
            *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v124;
          }
          MIL::IRArgument::Make((uint64_t)&v289, (uint64_t *)&v291);
          v142 = v291;
          *(_QWORD *)&v292 = v291;
          if (v291)
          {
            v143 = (_QWORD *)operator new();
            v144 = v291;
            *v143 = &unk_1EA9942C8;
            v143[1] = 0;
            v143[2] = 0;
            v143[3] = v144;
          }
          else
          {
            v143 = 0;
          }
          *((_QWORD *)&v292 + 1) = v143;
          v291 = 0;
          v159 = v296.__r_.__value_.__l.__size_;
          if (v296.__r_.__value_.__l.__size_ >= v296.__r_.__value_.__r.__words[2])
          {
            v161 = (uint64_t)(v296.__r_.__value_.__l.__size_ - v296.__r_.__value_.__r.__words[0]) >> 4;
            v162 = v161 + 1;
            if ((unint64_t)(v161 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v163 = v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0]) >> 3 > v162)
              v162 = v163 >> 3;
            if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0)
              v164 = 0xFFFFFFFFFFFFFFFLL;
            else
              v164 = v162;
            v300 = &v296.__r_.__value_.__r.__words[2];
            v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v296.__r_.__value_.__r.__words[2], v164);
            v167 = (std::string::size_type *)&v165[16 * v161];
            *v167 = v142;
            v167[1] = (std::string::size_type)v143;
            v292 = 0uLL;
            v168 = (_QWORD *)v296.__r_.__value_.__l.__size_;
            v169 = v296.__r_.__value_.__r.__words[0];
            if (v296.__r_.__value_.__l.__size_ == v296.__r_.__value_.__r.__words[0])
            {
              v172 = vdupq_n_s64(v296.__r_.__value_.__l.__size_);
              v170 = (std::string::size_type)&v165[16 * v161];
            }
            else
            {
              v170 = (std::string::size_type)&v165[16 * v161];
              do
              {
                v171 = *((_OWORD *)v168 - 1);
                v168 -= 2;
                *(_OWORD *)(v170 - 16) = v171;
                v170 -= 16;
                *v168 = 0;
                v168[1] = 0;
              }
              while (v168 != (_QWORD *)v169);
              v172 = *(int64x2_t *)&v296.__r_.__value_.__l.__data_;
            }
            v160 = (std::string::size_type)(v167 + 2);
            v296.__r_.__value_.__r.__words[0] = v170;
            v296.__r_.__value_.__l.__size_ = (std::string::size_type)(v167 + 2);
            *(int64x2_t *)&v298.__r_.__value_.__r.__words[1] = v172;
            v181 = (char *)v296.__r_.__value_.__r.__words[2];
            v296.__r_.__value_.__r.__words[2] = (std::string::size_type)&v165[16 * v166];
            v299 = v181;
            v298.__r_.__value_.__r.__words[0] = v172.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
          }
          else
          {
            *(_QWORD *)v296.__r_.__value_.__l.__size_ = v142;
            *(_QWORD *)(v159 + 8) = v143;
            v160 = v159 + 16;
          }
          v296.__r_.__value_.__l.__size_ = v160;
          v182 = v291;
          v291 = 0;
          if (v182)
            (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
          if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
          {
            v175 = (void *)v289.__r_.__value_.__r.__words[0];
            goto LABEL_236;
          }
        }
        else
        {
          v113 = &google::protobuf::internal::fixed_address_empty_string;
          if (*(_DWORD *)(v72 + 28) == 1)
            v113 = *(__int128 **)(v72 + 16);
          if (*((char *)v113 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)v113, *((_QWORD *)v113 + 1));
          }
          else
          {
            v114 = *v113;
            v288.__r_.__value_.__r.__words[2] = *((_QWORD *)v113 + 2);
            *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v114;
          }
          MIL::IRArgument::Make((uint64_t)&v288, (uint64_t *)&v291);
          v125 = v291;
          *(_QWORD *)&v292 = v291;
          if (v291)
          {
            v126 = (_QWORD *)operator new();
            v127 = v291;
            *v126 = &unk_1EA9942C8;
            v126[1] = 0;
            v126[2] = 0;
            v126[3] = v127;
          }
          else
          {
            v126 = 0;
          }
          *((_QWORD *)&v292 + 1) = v126;
          v291 = 0;
          v128 = v296.__r_.__value_.__l.__size_;
          if (v296.__r_.__value_.__l.__size_ >= v296.__r_.__value_.__r.__words[2])
          {
            v130 = (uint64_t)(v296.__r_.__value_.__l.__size_ - v296.__r_.__value_.__r.__words[0]) >> 4;
            v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v132 = v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0]) >> 3 > v131)
              v131 = v132 >> 3;
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
              v133 = 0xFFFFFFFFFFFFFFFLL;
            else
              v133 = v131;
            v300 = &v296.__r_.__value_.__r.__words[2];
            v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v296.__r_.__value_.__r.__words[2], v133);
            v136 = (std::string::size_type *)&v134[16 * v130];
            *v136 = v125;
            v136[1] = (std::string::size_type)v126;
            v292 = 0uLL;
            v137 = (_QWORD *)v296.__r_.__value_.__l.__size_;
            v138 = v296.__r_.__value_.__r.__words[0];
            if (v296.__r_.__value_.__l.__size_ == v296.__r_.__value_.__r.__words[0])
            {
              v141 = vdupq_n_s64(v296.__r_.__value_.__l.__size_);
              v139 = (std::string::size_type)&v134[16 * v130];
            }
            else
            {
              v139 = (std::string::size_type)&v134[16 * v130];
              do
              {
                v140 = *((_OWORD *)v137 - 1);
                v137 -= 2;
                *(_OWORD *)(v139 - 16) = v140;
                v139 -= 16;
                *v137 = 0;
                v137[1] = 0;
              }
              while (v137 != (_QWORD *)v138);
              v141 = *(int64x2_t *)&v296.__r_.__value_.__l.__data_;
            }
            v129 = (std::string::size_type)(v136 + 2);
            v296.__r_.__value_.__r.__words[0] = v139;
            v296.__r_.__value_.__l.__size_ = (std::string::size_type)(v136 + 2);
            *(int64x2_t *)&v298.__r_.__value_.__r.__words[1] = v141;
            v173 = (char *)v296.__r_.__value_.__r.__words[2];
            v296.__r_.__value_.__r.__words[2] = (std::string::size_type)&v134[16 * v135];
            v299 = v173;
            v298.__r_.__value_.__r.__words[0] = v141.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
          }
          else
          {
            *(_QWORD *)v296.__r_.__value_.__l.__size_ = v125;
            *(_QWORD *)(v128 + 8) = v126;
            v129 = v128 + 16;
          }
          v296.__r_.__value_.__l.__size_ = v129;
          v174 = v291;
          v291 = 0;
          if (v174)
            (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
          if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          {
            v175 = (void *)v288.__r_.__value_.__r.__words[0];
LABEL_236:
            operator delete(v175);
          }
        }
LABEL_237:
        v120 = (std::__shared_weak_count *)v286.__r_.__value_.__l.__size_;
        if (v286.__r_.__value_.__l.__size_)
        {
          v183 = (unint64_t *)(v286.__r_.__value_.__l.__size_ + 8);
          do
            v122 = __ldaxr(v183);
          while (__stlxr(v122 - 1, v183));
LABEL_240:
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
LABEL_242:
        ++v69;
      }
      while (v69 != v71);
    }
    v298.__r_.__value_.__r.__words[0] = (std::string::size_type)v263;
    v184 = (std::string *)(std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v266, v263, (uint64_t)&std::piecewise_construct, (__int128 **)&v298)+ 7);
    if (v184 != &v296)
      std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)v184, (uint64_t *)v296.__r_.__value_.__l.__data_, (uint64_t *)v296.__r_.__value_.__l.__size_, (uint64_t)(v296.__r_.__value_.__l.__size_ - v296.__r_.__value_.__r.__words[0]) >> 4);
    v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::operator++(&v297);
  }
  v295[0] = 0;
  v294 = 0uLL;
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v294, *((int *)v262 + 14));
  v185 = *((_QWORD *)v262 + 8);
  if (v185)
    v186 = (uint64_t *)(v185 + 8);
  else
    v186 = 0;
  v187 = *((int *)v262 + 14);
  if ((_DWORD)v187)
  {
    v188 = &v186[v187];
    do
    {
      v189 = *v186;
      *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v281;
      if (*((_QWORD *)&v281 + 1))
      {
        v190 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
        do
          v191 = __ldxr(v190);
        while (__stxr(v191 + 1, v190));
      }
      v192 = *(_QWORD *)(v189 + 16);
      std::string::basic_string[abi:ne180100]<0>(&v297, "Invalid operation output name");
      MIL::Util::ValidateIsIdentifier(&v298, v192, (__int128 *)&v297);
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v297.__r_.__value_.__l.__data_);
      v193 = (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_;
      if (v298.__r_.__value_.__l.__size_)
      {
        v194 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      v196 = *(__int128 **)(v189 + 16);
      if (*((char *)v196 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)v196, *((_QWORD *)v196 + 1));
      }
      else
      {
        v197 = *v196;
        v296.__r_.__value_.__r.__words[2] = *((_QWORD *)v196 + 2);
        *(_OWORD *)&v296.__r_.__value_.__l.__data_ = v197;
      }
      if (*(_QWORD *)(v189 + 24))
        v198 = *(uint64_t **)(v189 + 24);
      else
        v198 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v281;
      if (*((_QWORD *)&v281 + 1))
      {
        v199 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
        do
          v200 = __ldxr(v199);
        while (__stxr(v200 + 1, v199));
      }
      v201 = MIL::Proto::ParseValueType((void (***)(MIL::MILContextImpl *__hidden))this, (uint64_t)v198, (uint64_t)a4, &v289);
      MIL::IRNamedValueType::Make((uint64_t *)&v296, v201, (uint64_t *)&v288);
      v202 = v288.__r_.__value_.__r.__words[0];
      v293.__r_.__value_.__r.__words[0] = v288.__r_.__value_.__r.__words[0];
      if (v288.__r_.__value_.__r.__words[0])
      {
        v203 = (_QWORD *)operator new();
        v204 = v288.__r_.__value_.__r.__words[0];
        *v203 = &unk_1EA993900;
        v203[1] = 0;
        v203[2] = 0;
        v203[3] = v204;
      }
      else
      {
        v203 = 0;
      }
      v293.__r_.__value_.__l.__size_ = (std::string::size_type)v203;
      v288.__r_.__value_.__r.__words[0] = 0;
      v205 = v294.i64[1];
      if (v294.i64[1] >= v295[0])
      {
        v207 = (v294.i64[1] - v294.i64[0]) >> 4;
        v208 = v207 + 1;
        if ((unint64_t)(v207 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v209 = v295[0] - v294.i64[0];
        if ((v295[0] - v294.i64[0]) >> 3 > v208)
          v208 = v209 >> 3;
        if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFF0)
          v210 = 0xFFFFFFFFFFFFFFFLL;
        else
          v210 = v208;
        v300 = v295;
        v211 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v295, v210);
        v213 = (std::string::size_type *)&v211[16 * v207];
        *v213 = v202;
        v213[1] = (std::string::size_type)v203;
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = 0uLL;
        v214 = (_QWORD *)v294.i64[1];
        v215 = (_QWORD *)v294.i64[0];
        if (v294.i64[1] == v294.i64[0])
        {
          v218 = vdupq_n_s64(v294.u64[1]);
          v216 = &v211[16 * v207];
        }
        else
        {
          v216 = &v211[16 * v207];
          do
          {
            v217 = *((_OWORD *)v214 - 1);
            v214 -= 2;
            *((_OWORD *)v216 - 1) = v217;
            v216 -= 16;
            *v214 = 0;
            v214[1] = 0;
          }
          while (v214 != v215);
          v218 = v294;
        }
        v206 = v213 + 2;
        v294.i64[0] = (uint64_t)v216;
        v294.i64[1] = (uint64_t)(v213 + 2);
        *(int64x2_t *)&v298.__r_.__value_.__r.__words[1] = v218;
        v219 = (char *)v295[0];
        v295[0] = &v211[16 * v212];
        v299 = v219;
        v298.__r_.__value_.__r.__words[0] = v218.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
      }
      else
      {
        *(_QWORD *)v294.i64[1] = v202;
        *(_QWORD *)(v205 + 8) = v203;
        v206 = (_QWORD *)(v205 + 16);
        *(_OWORD *)&v293.__r_.__value_.__l.__data_ = 0uLL;
      }
      v294.i64[1] = (uint64_t)v206;
      v220 = (void **)v288.__r_.__value_.__r.__words[0];
      v288.__r_.__value_.__r.__words[0] = 0;
      if (v220)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v220);
        MEMORY[0x1E0C023A0]();
      }
      v221 = (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_;
      if (v289.__r_.__value_.__l.__size_)
      {
        v222 = (unint64_t *)(v289.__r_.__value_.__l.__size_ + 8);
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v296.__r_.__value_.__l.__data_);
      ++v186;
    }
    while (v186 != v188);
  }
  MIL::IROperation::Make(&v269, &v268, &v266, (uint64_t)&v294, (uint64_t *)&__p, (uint64_t)&v284, a5);
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v294;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v266, v267[0]);
  v224 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
  if (*((_QWORD *)&v268 + 1))
  {
    v225 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
  if (*((_QWORD *)&v269 + 1))
  {
    v228 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = (*(uint64_t (**)(_anonymous_namespace_::IROperationImpl *))(*(_QWORD *)*a5 + 72))(*a5);
  v231 = v230;
  if (v230 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v230 + 104))(v230))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, _anonymous_namespace_::IROperationImpl *))(*(_QWORD *)v231 + 248))(&v298, v231, *a5);
    if (v298.__r_.__value_.__l.__size_ != v298.__r_.__value_.__r.__words[0])
    {
      v232 = 0;
      do
      {
        v233 = (_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::IROperationImpl *))(*(_QWORD *)*a5 + 176))(*a5);
        Name = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*v233 + 16 * v232));
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v235 = *(_OWORD *)Name;
          v297.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v235;
        }
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v265, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
        else
          v265 = v297;
        v236 = *(_OWORD *)(v298.__r_.__value_.__r.__words[0] + 16 * v232);
        v264 = v236;
        if (*((_QWORD *)&v236 + 1))
        {
          v237 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v238 = __ldxr(v237);
          while (__stxr(v238 + 1, v237));
        }
        MIL::ParserContext::SetConstexprVariableValue((uint64_t)a4, (__int128 *)&v265, (uint64_t *)&v264);
        v239 = (std::__shared_weak_count *)*((_QWORD *)&v264 + 1);
        if (*((_QWORD *)&v264 + 1))
        {
          v240 = (unint64_t *)(*((_QWORD *)&v264 + 1) + 8);
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v265.__r_.__value_.__l.__data_);
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v297.__r_.__value_.__l.__data_);
        ++v232;
      }
      while (v232 < (uint64_t)(v298.__r_.__value_.__l.__size_ - v298.__r_.__value_.__r.__words[0]) >> 4);
    }
    v297.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v297);
  }
  v242 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
  if (*((_QWORD *)&v276 + 1))
  {
    v243 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&__p);
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
  if (*((_QWORD *)&v281 + 1))
  {
    v246 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v283.__r_.__value_.__l.__data_);
  v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
}

void sub_1E0645DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (a60 < 0)
    operator delete(__p);
  a40 = (uint64_t)&a62;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::OperationNameLocation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::OperationNameLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::OperationNameLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Proto::ParseProgram(__int128 *a1@<X0>, uint64_t a2@<X1>, const MIL::ParserOptions *a3@<X2>, MIL::IRProgramValidator **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E06463F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ParseProgramImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::ParserOptions *a3@<X2>, MIL::IRProgramValidator **a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  void (***v10)(MIL::MILContextImpl *__hidden);
  unsigned __int8 *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  _anonymous_namespace_::IRFunctionImpl *v18;
  void (***v19)(MIL::MILContextImpl *__hidden);
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  MIL::IRProgramValidator *v27;
  MIL::IRProgramValidator *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const MIL::IRProgram *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *exception;
  _QWORD *v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  void (**v45)(MIL::ValidationResult *__hidden);
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  _BYTE v50[40];
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55[5];
  _QWORD v56[3];
  __int128 v57;
  _QWORD v58[448];
  __int128 v59;
  _anonymous_namespace_::IRFunctionImpl *v60;
  __int128 v61;
  char v62;
  __int128 v63;

  MIL::UnknownLocation::Make(v58);
  *(_QWORD *)&v59 = v58[0];
  if (v58[0])
  {
    v8 = (_QWORD *)operator new();
    v9 = v58[0];
    *v8 = &unk_1EA9940C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)&v59 + 1) = v8;
  *a4 = 0;
  MIL::ParserContext::ParserContext((MIL::ParserContext *)v58, a3);
  if (*(uint64_t *)(a2 + 88) >= 2)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(v50);
    *(_QWORD *)&v57 = *(_QWORD *)v50;
    if (*(_QWORD *)v50)
    {
      v41 = (_QWORD *)operator new();
      v44 = *(_QWORD *)v50;
      *v41 = &unk_1EA9940C8;
      v41[1] = 0;
      v41[2] = 0;
      v41[3] = v44;
    }
    else
    {
      v41 = 0;
    }
    *((_QWORD *)&v57 + 1) = v41;
    *(_QWORD *)v50 = 0;
    std::string::basic_string[abi:ne180100]<0>(v56, "Only protobuf programs of version x or below are supported, but this program is version y.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v57, (uint64_t)v56, 400);
  }
  v10 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  memset(v50, 0, 32);
  *(_DWORD *)&v50[32] = 1065353216;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin(a2 + 24, v55);
  while (v55[0])
  {
    v11 = *(unsigned __int8 **)(v55[0] + 24);
    v63 = v59;
    if (*((_QWORD *)&v59 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(&v61, "Invalid function name");
    MIL::Util::ValidateIsIdentifier(&v63, (uint64_t)v11, &v61);
    if (v62 < 0)
      operator delete((void *)v61);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    MIL::Proto::ParseFunction(v10, (MIL::MILContext *)(v11 + 24), (const CoreML::Specification::MILSpec::Function *)v58, &v60);
    *(_QWORD *)&v63 = v11;
    v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, v11, (uint64_t)&std::piecewise_construct, (__int128 **)&v63);
    std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((_QWORD *)v17 + 5, (uint64_t *)&v60);
    v18 = v60;
    v60 = 0;
    if (v18)
      (*(void (**)(_anonymous_namespace_::IRFunctionImpl *))(*(_QWORD *)v18 + 8))(v18);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::operator++(v55);
  }
  v19 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  v61 = v59;
  if (*((_QWORD *)&v59 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  MIL::Proto::ParseAttributes(v19, a2 + 56, (MIL::ParserContext *)v58, &v61, (uint64_t)v55);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v54 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v53 = v59;
  if (*((_QWORD *)&v59 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  MIL::IRProgram::Make(&v54, &v53, (uint64_t)v50, v55, (_anonymous_namespace_::IRProgramImpl **)&v61);
  v27 = (MIL::IRProgramValidator *)v61;
  *(_QWORD *)&v61 = 0;
  v28 = *a4;
  *a4 = v27;
  if (v28)
  {
    (*(void (**)(MIL::IRProgramValidator *))(*(_QWORD *)v28 + 8))(v28);
    v29 = v61;
    *(_QWORD *)&v61 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v55);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v50);
  if ((*(unsigned int (**)(const MIL::ParserOptions *))(*(_QWORD *)a3 + 56))(a3))
  {
    MIL::IRProgramValidator::Validate(*a4, v36, (MIL::ValidationResult *)v50);
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v50))
    {
      v42 = __cxa_allocate_exception(0x48uLL);
      v43 = *(_OWORD *)&v50[8];
      memset(&v50[8], 0, 32);
      v46 = v43;
      v47 = *(_OWORD *)&v50[24];
      v48 = v51;
      v51 = 0;
      v45 = &off_1EA99F170;
      v49 = v52;
      MIL::ValidationError::ValidationError(v42, &v45);
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v50);
  }
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)v58);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1E06468D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47)
{
  uint64_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v51;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  __cxa_free_exception(v48);
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)&a47);
  v51 = *v47;
  *v47 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v49 - 152);
  _Unwind_Resume(a1);
}

void sub_1E064698C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44)
    (*(void (**)(uint64_t))(*(_QWORD *)a44 + 8))(a44);
  JUMPOUT(0x1E0646B8CLL);
}

void sub_1E06469B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int128 a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t *v43;
  uint64_t v44;
  void *v47;
  void *exception;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a33);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a17);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    v47 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    v49 = *(_QWORD *)(v44 - 144);
    *(_QWORD *)&a27 = *(_QWORD *)(v44 - 152);
    *((_QWORD *)&a27 + 1) = v49;
    if (v49)
    {
      v50 = (unint64_t *)(v49 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v52 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v47 + 16))(v47);
    std::string::basic_string[abi:ne180100]<0>(&a24, v52);
    MIL::ParseError::ParseError((uint64_t)exception, &a27, (uint64_t)&a24, 300);
  }
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)&a43);
  v53 = *v43;
  *v43 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v44 - 152);
  _Unwind_Resume(a1);
}

void sub_1E0646B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,...)
{
  uint64_t *v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  va_list va;

  va_start(va, a39);
  if (a22 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
    if ((v41 & 1) == 0)
    {
LABEL_6:
      __cxa_end_catch();
      MIL::ParserContext::~ParserContext((MIL::ParserContext *)va);
      v44 = *v39;
      *v39 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v42 - 152);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
    if (!v41)
      goto LABEL_6;
  }
  __cxa_free_exception(v40);
  goto LABEL_6;
}

void sub_1E0646B5C()
{
  __cxa_end_catch();
  JUMPOUT(0x1E0646B64);
}

void MIL::Proto::ParseProgram(__int128 *a1@<X0>, _QWORD *a2@<X1>, const MIL::ParserOptions *a3@<X2>, MIL::IRProgramValidator **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *exception;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[3];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[13];
  _QWORD v21[3];
  _QWORD v22[3];
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[80];
  _QWORD v30[3];
  __int128 v31;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(v20);
    *(_QWORD *)&v31 = v20[0];
    if (v20[0])
    {
      v11 = (_QWORD *)operator new();
      v14 = v20[0];
      *v11 = &unk_1EA9940C8;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v14;
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)&v31 + 1) = v11;
    v20[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v30, "Cannot read encoded Program");
    MIL::ParseError::ParseError((uint64_t)exception, &v31, (uint64_t)v30, 300);
  }
  google::protobuf::io::IstreamInputStream::IstreamInputStream(v29);
  v21[0] = 0;
  v21[1] = 0;
  v21[2] = v29;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 6) = 0;
  v22[2] = 0x7FFFFFFFLL;
  v23 = 0x7FFFFFFF;
  v24 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v25 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)v21);
  CoreML::Specification::MILSpec::Program::Program((CoreML::Specification::MILSpec::Program *)v20);
  if ((google::protobuf::MessageLite::ParseFromCodedStream((google::protobuf::MessageLite *)v20, (google::protobuf::io::CodedInputStream *)v21) & 1) == 0)
  {
    v12 = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&v18);
    *(_QWORD *)&v19 = v18;
    if (v18)
    {
      v13 = (_QWORD *)operator new();
      v15 = v18;
      *v13 = &unk_1EA9940C8;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v15;
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)&v19 + 1) = v13;
    v18 = 0;
    std::string::basic_string[abi:ne180100]<0>(v17, "Failed to parse encoded Program");
    MIL::ParseError::ParseError((uint64_t)v12, &v19, (uint64_t)v17, 300);
  }
  v16 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  CoreML::Specification::MILSpec::Program::~Program((CoreML::Specification::MILSpec::Program *)v20);
  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)v21);
  google::protobuf::io::IstreamInputStream::~IstreamInputStream((google::protobuf::io::IstreamInputStream *)v29);
}

void sub_1E0646E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  __cxa_free_exception(v33);
  CoreML::Specification::MILSpec::Program::~Program((CoreML::Specification::MILSpec::Program *)&a20);
  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&a33);
  google::protobuf::io::IstreamInputStream::~IstreamInputStream((google::protobuf::io::IstreamInputStream *)(v34 - 168));
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::ParseProgram@<X0>(uint64_t a1@<X0>, const MIL::ParserOptions *a2@<X2>, MIL::IRProgramValidator **a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[20];

  v13[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v11);
  v10 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  MIL::Proto::ParseProgram(&v10, v11, a2, a3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1E0C020C4](&v12);
  std::istream::~istream();
  return MEMORY[0x1E0C022F8](v13);
}

void sub_1E0647058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::ifstream::~ifstream(&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1E0C020B8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1E064715C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1E0C022F8](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1E0C020C4](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1E0C022F8](a1 + 53);
  return a1;
}

void MIL::ParserContext::~ParserContext(MIL::ParserContext *this)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::~__hash_table((uint64_t)this + 3544);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3504);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 3488);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 3448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3088);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3048);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3008);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2968);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2928);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2888);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2848);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2808);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2768);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2728);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2688);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2648);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2608);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2568);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2528);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2488);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2088);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2048);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2008);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1968);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1928);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1888);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1848);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1808);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1768);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1728);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1688);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1648);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1608);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1568);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1528);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1488);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1088);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1048);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1008);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 968);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 928);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 888);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 848);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 808);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 728);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 688);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 648);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 608);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 568);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 528);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 488);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 8);
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void MIL::Proto::ParseValue(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, MIL::ParserContext *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  MIL::IRValueType *v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t Options;
  uint64_t v18;
  std::string::size_type v19;
  const MIL::IRTensorValueType *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *exception;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  std::string v37;

  if (*(_QWORD *)(a2 + 24))
    v10 = *(uint64_t **)(a2 + 24);
  else
    v10 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  v11 = MIL::Proto::ParseValueType(a1, (uint64_t)v10, (uint64_t)a3, a4);
  v12 = (MIL::IRValueType *)v11;
  v13 = *(_DWORD *)(a2 + 44);
  if (v13 == 3)
    __asm { BR              X11 }
  if (v13 != 5)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v27 = a4[1];
    *(_QWORD *)&v35 = *a4;
    *((_QWORD *)&v35 + 1) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(v34, "Cannot parse null value");
    MIL::ParseError::ParseError((uint64_t)exception, &v35, (uint64_t)v34, 301);
  }
  v14 = *(_QWORD *)(a2 + 32);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
  {
    v30 = __cxa_allocate_exception(0x48uLL);
    v31 = a4[1];
    *(_QWORD *)&v36 = *a4;
    *((_QWORD *)&v36 + 1) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(&v37, "Only tensor values can be read from a file.");
    MIL::ParseError::ParseError((uint64_t)v30, &v36, (uint64_t)&v37, 114);
  }
  v15 = *(__int128 **)(v14 + 16);
  if (*((char *)v15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
  }
  else
  {
    v16 = *v15;
    v37.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v16;
  }
  Options = MIL::ParserContext::GetOptions(a3);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 40))(Options);
  MIL::Util::ApplyModelPath((uint64_t)&v37, v18, a4);
  v19 = MIL::IRValueType::AsTensorType(v12);
  v20 = *(const MIL::IRTensorValueType **)(v14 + 24);
  v21 = MIL::ParserContext::GetOptions(a3);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v19, a1, (uint64_t)&v37, v20, v22);
  v23 = v36;
  *a5 = v36;
  if (v23)
  {
    v24 = (_QWORD *)operator new();
    v25 = v36;
    *v24 = &unk_1EA992A68;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  a5[1] = v24;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_1E0647CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19)
{
  _QWORD *v19;
  void *exception;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  exception = __cxa_allocate_exception(0x48uLL);
  v21 = v19[1];
  *(_QWORD *)&a19 = *v19;
  *((_QWORD *)&a19 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::string::basic_string[abi:ne180100]<0>(&a16, "Cannot parse null immediate value");
  MIL::ParseError::ParseError((uint64_t)exception, &a19, (uint64_t)&a16, 301);
}

void sub_1E0647D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  int v32;

  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    if ((v32 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    if (!v32)
LABEL_8:
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

void `anonymous namespace'::ParseTensorValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (char *)sub_1E0647FA4
     + 4 * word_1E0B04CC2[(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2) - 2];
  __asm { BR              X10 }
}

void sub_1E0647FA4(CoreML::Specification::MILSpec::TensorValue_RepeatedBools *a1, uint64_t a2, google::protobuf::Closure *a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int __pa,__int16 __p_4,char __p_6,char __p_7,std::string *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  google::protobuf::Closure *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  void *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  std::__shared_weak_count *v71;

  if (*(_DWORD *)(v57 + 28) == 3)
  {
    v59 = *(_QWORD *)(*(_QWORD *)(v57 + 16) + 24);
    if (v59)
      v60 = (char *)(v59 + 8);
    else
      v60 = 0;
LABEL_9:
    v65 = *(uint64_t **)(v57 + 16);
    goto LABEL_11;
  }
  v61 = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::default_instance(a1, a2, a3);
  v64 = v61[3];
  if (v64)
    v60 = (char *)(v64 + 8);
  else
    v60 = 0;
  if (*(_DWORD *)(v57 + 28) == 3)
    goto LABEL_9;
  v65 = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)v61, v62, v63);
LABEL_11:
  v66 = v65[3];
  if (v66)
    v67 = (char *)(v66 + *((int *)v65 + 4) + 8);
  else
    v67 = 0;
  *(_QWORD *)(v58 - 128) = 0;
  *(_QWORD *)(v58 - 120) = 0;
  *(_QWORD *)(v58 - 112) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>((char *)(v58 - 128), v60, v67, v67 - v60);
  MIL::IRTensorValueType::MakeBoolValue(v56, v58 - 128, (_QWORD *)(v58 - 160));
  *v55 = *(_QWORD *)(v58 - 160);
  v68 = *(void **)(v58 - 128);
  if (v68)
  {
    *(_QWORD *)(v58 - 120) = v68;
    operator delete(v68);
  }
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)())v71->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_1E0648DD8()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Attempted to parse unknown tensor dtype.");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E0648E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;

  __cxa_free_exception(v42);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::BytesToTypedVector<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::Closure *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  size_t v8;
  uint64_t *v9;
  const void **v10;

  if (*(_DWORD *)(a1 + 28) == 7)
    v6 = *(uint64_t **)(a1 + 16);
  else
    v6 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)a1, a2, a3);
  v7 = v6[2];
  if (*(char *)(v7 + 23) < 0)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(_DWORD *)(a1 + 28) == 7)
    v9 = *(uint64_t **)(a1 + 16);
  else
    v9 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v6, a2, a3);
  v10 = (const void **)v9[2];
  if (*((char *)v10 + 23) < 0)
    v10 = (const void **)*v10;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a4, v10, (uint64_t)v10 + v8, v8);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06491B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1E0649230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *this)
{
  std::string *v4;
  __int128 **v6;
  __int128 *v7;
  __int128 v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      if (*((char *)*v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        v4 = v13;
      }
      else
      {
        v8 = *v7;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v6;
      v13 = ++v4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1E06492FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16 const*,MIL::Bf16 const*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E064936C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::Fp8E4M3FN>::__init_with_size[abi:ne180100]<MIL::Fp8E4M3FN const*,MIL::Fp8E4M3FN const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06493E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::Fp8E5M2>::__init_with_size[abi:ne180100]<MIL::Fp8E5M2 const*,MIL::Fp8E5M2 const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E064945C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double const*,double const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06494D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E064954C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06495C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E064963C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06496AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Proto::ParseValueType(void (***a1)(MIL::MILContextImpl *__hidden this), uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void (***v6)(MIL::MILContextImpl *__hidden);
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  MIL::MILContext *v12;
  uint64_t *v13;
  void (***v14)(MIL::MILContextImpl *__hidden);
  const MIL::IRDimension *v15;
  uint64_t *v17;
  MIL::MILContext *v18;
  const MIL::IRValueType *v19;
  uint64_t v20;
  uint64_t *v21;
  MIL::MILContext *v22;
  uint64_t *v23;
  const MIL::IRValueType *v24;
  const MIL::IRValueType *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  void **v49;
  void (***v50)(MIL::MILContextImpl *__hidden);
  unint64_t v51;
  void (****v52)(MIL::MILContextImpl *__hidden);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  void (****v59)(MIL::MILContextImpl *__hidden);
  char *v60;
  char *v61;
  void (***v62)(MIL::MILContextImpl *__hidden);
  _QWORD *v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  std::string::size_type size;
  std::string *v79;
  __int128 v80;
  void *exception;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  _QWORD v90[3];
  __int128 v91;
  void *__p[2];
  char *v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  __int128 v98;

  v6 = a1;
  switch(*(_DWORD *)(a2 + 28))
  {
    case 0:
      exception = __cxa_allocate_exception(0x48uLL);
      v82 = a4[1];
      *(_QWORD *)&v91 = *a4;
      *((_QWORD *)&v91 + 1) = v82;
      if (v82)
      {
        v83 = (unint64_t *)(v82 + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      std::string::basic_string[abi:ne180100]<0>(v90, "Cannot parse a null value type");
      MIL::ParseError::ParseError((uint64_t)exception, &v91, (uint64_t)v90, 114);
    case 1:
      v7 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(v7 + 72) != *(_DWORD *)(v7 + 24))
      {
        v69 = __cxa_allocate_exception(0x48uLL);
        v70 = a4[1];
        *(_QWORD *)&v98 = *a4;
        *((_QWORD *)&v98 + 1) = v70;
        if (v70)
        {
          v71 = (unint64_t *)(v70 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        std::to_string(&v95, *(_QWORD *)(v7 + 72));
        v73 = std::string::insert(&v95, 0, "Mismatch between specified rank ");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v75 = std::string::append(&v96, " and given number of dimensions ");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v94, *(_DWORD *)(v7 + 24));
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &v94;
        else
          v77 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        else
          size = v94.__r_.__value_.__l.__size_;
        v79 = std::string::append(&v97, (const std::string::value_type *)v77, size);
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v93 = (char *)v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        MIL::ParseError::ParseError((uint64_t)v69, &v98, (uint64_t)__p, 104);
      }
      v8 = *(_DWORD *)(v7 + 80);
      v9 = 2;
      switch(v8)
      {
        case 0:
          goto LABEL_120;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
          goto LABEL_71;
        case 2:
          v9 = 3;
          goto LABEL_71;
        case 10:
          v9 = 4;
          goto LABEL_71;
        case 11:
          v9 = 5;
          goto LABEL_71;
        case 12:
          v9 = 6;
          goto LABEL_71;
        case 13:
          v9 = 7;
          goto LABEL_71;
        case 21:
          v9 = 9;
          goto LABEL_71;
        case 22:
          v9 = 10;
          goto LABEL_71;
        case 23:
          v9 = 11;
          goto LABEL_71;
        case 24:
          v9 = 12;
          goto LABEL_71;
        case 25:
          v9 = 13;
          goto LABEL_71;
        case 31:
          v9 = 14;
          goto LABEL_71;
        case 32:
          v9 = 15;
          goto LABEL_71;
        case 33:
          v9 = 16;
          goto LABEL_71;
        case 34:
          v9 = 17;
          goto LABEL_71;
        case 35:
          v9 = 20;
          goto LABEL_71;
        case 36:
          v9 = 19;
          goto LABEL_71;
        case 37:
          v9 = 21;
          goto LABEL_71;
        case 38:
          v9 = 23;
          goto LABEL_71;
        case 39:
          v9 = 22;
          goto LABEL_71;
        case 40:
          v9 = 24;
          goto LABEL_71;
        case 41:
          v9 = 25;
          goto LABEL_71;
        default:
          if (v8 == 0x80000000 || v8 == 0x7FFFFFFF)
          {
LABEL_120:
            v85 = __cxa_allocate_exception(0x48uLL);
            v86 = a4[1];
            v97.__r_.__value_.__r.__words[0] = *a4;
            v97.__r_.__value_.__l.__size_ = v86;
            if (v86)
            {
              v87 = (unint64_t *)(v86 + 8);
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Cannot parse an unsupported data type");
            MIL::ParseError::ParseError((uint64_t)v85, (__int128 *)&v97, (uint64_t)__p, 114);
          }
LABEL_71:
          v89 = v9;
          v44 = operator new();
          *(_QWORD *)(v44 + 8) = 0;
          *(_QWORD *)(v44 + 16) = 0;
          *(_QWORD *)v44 = 0;
          v96.__r_.__value_.__r.__words[0] = v44;
          std::vector<std::string const*>::reserve((void **)v44, *(int *)(v7 + 24));
          v45 = *(_QWORD *)(v7 + 32);
          if (v45)
            v46 = (uint64_t *)(v45 + 8);
          else
            v46 = 0;
          v47 = *(int *)(v7 + 24);
          if ((_DWORD)v47)
          {
            v48 = &v46[v47];
            do
            {
              v49 = (void **)v96.__r_.__value_.__r.__words[0];
              v51 = *(_QWORD *)(v96.__r_.__value_.__r.__words[0] + 16);
              v52 = *(void (*****)(MIL::MILContextImpl *__hidden))(v96.__r_.__value_.__r.__words[0] + 8);
              if ((unint64_t)v52 >= v51)
              {
                v54 = ((uint64_t)v52 - *(_QWORD *)v96.__r_.__value_.__l.__data_) >> 3;
                if ((unint64_t)(v54 + 1) >> 61)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v55 = v51 - *(_QWORD *)v96.__r_.__value_.__l.__data_;
                v56 = v55 >> 2;
                if (v55 >> 2 <= (unint64_t)(v54 + 1))
                  v56 = v54 + 1;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v57 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v57 = v56;
                if (v57)
                  v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v96.__r_.__value_.__r.__words[0] + 16, v57);
                else
                  v58 = 0;
                v59 = (void (****)(MIL::MILContextImpl *__hidden))&v58[8 * v54];
                *v59 = v50;
                v53 = v59 + 1;
                v61 = (char *)*v49;
                v60 = (char *)v49[1];
                if (v60 != *v49)
                {
                  do
                  {
                    v62 = (void (***)(MIL::MILContextImpl *__hidden))*((_QWORD *)v60 - 1);
                    v60 -= 8;
                    *--v59 = v62;
                  }
                  while (v60 != v61);
                  v60 = (char *)*v49;
                }
                *v49 = v59;
                v49[1] = v53;
                v49[2] = &v58[8 * v57];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *v52 = v50;
                v53 = v52 + 1;
              }
              v49[1] = v53;
              ++v46;
            }
            while (v46 != v48);
          }
          MIL::Proto::ParseAttributes(__p, v6, v7 + 48, a3, a4);
          v97.__r_.__value_.__r.__words[0] = v96.__r_.__value_.__r.__words[0];
          if (v96.__r_.__value_.__r.__words[0])
          {
            v63 = (_QWORD *)operator new();
            v64 = v96.__r_.__value_.__r.__words[0];
            *v63 = &unk_1EA99C1F0;
            v63[1] = 0;
            v63[2] = 0;
            v63[3] = v64;
          }
          else
          {
            v63 = 0;
          }
          v97.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
          v96.__r_.__value_.__r.__words[0] = 0;
          v6 = (void (***)(MIL::MILContextImpl *__hidden))MIL::IRTensorValueType::MakeWithShape(v6, v89, (uint64_t *)&v97, (uint64_t *)__p);
          v65 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
          if (v97.__r_.__value_.__l.__size_)
          {
            v66 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
          v68 = v96.__r_.__value_.__r.__words[0];
          v96.__r_.__value_.__r.__words[0] = 0;
          if (v68)
            std::default_delete<std::vector<MIL::IRDimension const*>>::operator()[abi:ne180100]((uint64_t)&v96, v68);
          break;
      }
      return (uint64_t)v6;
    case 2:
      v10 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(v10 + 16))
        v11 = *(uint64_t **)(v10 + 16);
      else
        v11 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      v12 = (MIL::MILContext *)MIL::Proto::ParseValueType(a1, v11, a3, a4);
      if (*(_QWORD *)(v10 + 24))
        v13 = *(uint64_t **)(v10 + 24);
      else
        v13 = &CoreML::Specification::MILSpec::_Dimension_default_instance_;
      return MIL::IRListValueType::MakeWithDimension(v6, v12, (const MIL::IRValueType *)v14, v15);
    case 3:
      v26 = *(_QWORD *)(a2 + 16);
      __p[0] = 0;
      __p[1] = 0;
      v93 = 0;
      std::vector<std::string const*>::reserve(__p, *(int *)(v26 + 24));
      v27 = *(_QWORD *)(v26 + 32);
      if (v27)
        v28 = (_QWORD *)(v27 + 8);
      else
        v28 = 0;
      v29 = *(int *)(v26 + 24);
      if ((_DWORD)v29)
      {
        v30 = &v28[v29];
        do
        {
          v31 = MIL::Proto::ParseValueType(v6, *v28, a3, a4);
          v32 = v31;
          v33 = (char *)__p[1];
          if (__p[1] >= v93)
          {
            v35 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v36 = (v93 - (char *)__p[0]) >> 2;
            if (v36 <= v35 + 1)
              v36 = v35 + 1;
            if ((unint64_t)(v93 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v93, v37);
            else
              v38 = 0;
            v39 = (uint64_t *)&v38[8 * v35];
            *v39 = v32;
            v34 = v39 + 1;
            v41 = (char *)__p[0];
            v40 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v42 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v42;
              }
              while (v40 != v41);
              v40 = (char *)__p[0];
            }
            __p[0] = v39;
            __p[1] = v34;
            v93 = &v38[8 * v37];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_QWORD *)__p[1] = v31;
            v34 = v33 + 8;
          }
          __p[1] = v34;
          ++v28;
        }
        while (v28 != v30);
      }
      v6 = (void (***)(MIL::MILContextImpl *__hidden))MIL::IRTupleValueType::Make(v6, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return (uint64_t)v6;
    case 4:
      v20 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(v20 + 16))
        v21 = *(uint64_t **)(v20 + 16);
      else
        v21 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      v22 = (MIL::MILContext *)MIL::Proto::ParseValueType(a1, v21, a3, a4);
      if (*(_QWORD *)(v20 + 24))
        v23 = *(uint64_t **)(v20 + 24);
      else
        v23 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      v24 = (const MIL::IRValueType *)MIL::Proto::ParseValueType(v6, v23, a3, a4);
      return MIL::IRDictionaryValueType::Make(v6, v22, v24, v25);
    case 5:
      if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
        v17 = *(uint64_t **)(*(_QWORD *)(a2 + 16) + 16);
      else
        v17 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      v18 = (MIL::MILContext *)MIL::Proto::ParseValueType(a1, v17, a3, a4);
      return MIL::IRStateValueType::Make(v6, v18, v19);
    default:
      return (uint64_t)v6;
  }
}

void sub_1E0649EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  char v46;
  void *v47;
  uint64_t v48;

  if (a25 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v48 - 121) < 0)
    operator delete(*(void **)(v48 - 144));
  if (a46 < 0)
    operator delete(a41);
  if (a40 < 0)
    operator delete(a35);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v48 - 112);
  if ((v46 & 1) != 0)
    __cxa_free_exception(v47);
  _Unwind_Resume(a1);
}

void (***`anonymous namespace'::ParseDimension(void (***result)(MIL::MILContextImpl *__hidden this), uint64_t a2, _QWORD *a3))(MIL::MILContextImpl *__hidden this)
{
  int v3;
  void *exception;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[3];
  __int128 v10;

  v3 = *(_DWORD *)(a2 + 28);
  switch(v3)
  {
    case 1:
      return (void (***)(MIL::MILContextImpl *__hidden))MIL::IRConstantDimension::Make(result, *(MIL::MILContext **)(*(_QWORD *)(a2 + 16) + 16));
    case 2:
      return (void (***)(MIL::MILContextImpl *__hidden))MIL::IRUnknownDimension::Make(result, (MIL::MILContext *)(*(_BYTE *)(*(_QWORD *)(a2 + 16)+ 16) != 0));
    case 0:
      exception = __cxa_allocate_exception(0x48uLL);
      v6 = a3[1];
      *(_QWORD *)&v10 = *a3;
      *((_QWORD *)&v10 + 1) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      std::string::basic_string[abi:ne180100]<0>(v9, "Cannot parse a null dimension");
      MIL::ParseError::ParseError((uint64_t)exception, &v10, (uint64_t)v9, 105);
  }
  return result;
}

void sub_1E064A12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v17 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v17)
      goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<std::vector<MIL::IRDimension const*>>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Proto::SerializeProgram(uint64_t a1, MIL::IRObject *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  google::protobuf::MessageLite *v10;
  google::protobuf::MessageLite *v11;
  _BYTE v12[32];
  _BYTE v13[72];

  google::protobuf::io::OstreamOutputStream::OstreamOutputStream(v13, a3, 0xFFFFFFFFLL);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v12, (google::protobuf::io::ZeroCopyOutputStream *)v13);
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Proto::SerializeProgram(a2, &v11);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = v11;
  google::protobuf::MessageLite::SerializeToCodedStream(v11, (google::protobuf::io::CodedOutputStream *)v12);
  if (v10)
    (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)v10 + 8))(v10);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v12);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)v13);
}

void sub_1E064A2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeProgram@<X0>(MIL::IRObject *a1@<X1>, CoreML::Specification::MILSpec::Program **a2@<X8>)
{
  CoreML::Specification::MILSpec::Program *v4;
  uint64_t *v5;
  uint64_t v6;
  CoreML::Specification::MILSpec::Function *v7;
  CoreML::Specification::MILSpec::Function *v8;
  std::string *v9;
  uint64_t Attributes;

  v4 = (CoreML::Specification::MILSpec::Program *)operator new();
  CoreML::Specification::MILSpec::Program::Program(v4);
  *a2 = v4;
  *((_QWORD *)v4 + 11) = 1;
  v5 = *(uint64_t **)((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 72))(a1) + 16);
  if (v5)
  {
    v6 = (uint64_t)v4 + 24;
    do
    {
      v7 = (CoreML::Specification::MILSpec::Function *)operator new();
      CoreML::Specification::MILSpec::Function::Function(v7);
      MIL::Proto::SerializeFunction((MIL::Proto *)v5[5], (std::string **)v7, v8);
      v9 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](v6, (std::string *)(v5 + 2));
      CoreML::Specification::MILSpec::Function::CopyFrom((CoreML::Specification::MILSpec::Function *)v9, v7);
      (*(void (**)(CoreML::Specification::MILSpec::Function *))(*(_QWORD *)v7 + 8))(v7);
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  Attributes = MIL::IRObject::GetAttributes(a1);
  return MIL::Proto::SerializeAttributes(Attributes, (uint64_t)*a2 + 56);
}

void sub_1E064A3F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C40FAC9F822);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeFunction(MIL::Proto *this, std::string **a2, CoreML::Specification::MILSpec::Function *a3)
{
  const std::string *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  CoreML::Specification::MILSpec::NamedValueType *v9;
  std::string *v10;
  CoreML::Specification::MILSpec::ValueType *v11;
  MIL::Proto *v12;
  CoreML::Specification::MILSpec::ValueType *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  CoreML::Specification::MILSpec::Block *v20;
  CoreML::Specification::MILSpec::Block *v21;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t Attributes;

  v5 = (const std::string *)(*(uint64_t (**)(MIL::Proto *, std::string **, CoreML::Specification::MILSpec::Function *))(*(_QWORD *)this + 32))(this, a2, a3);
  if (a2[13] == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a2 + 13, (uint64_t)v5);
  else
    std::string::operator=(a2[13], v5);
  v6 = (_QWORD *)(*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 128))(this);
  v7 = v6 + 1;
  v8 = (_QWORD *)*v6;
  if ((_QWORD *)*v6 != v6 + 1)
  {
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)(a2 + 2));
      v10 = (std::string *)*((_QWORD *)v9 + 2);
      if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 2, (uint64_t)(v8 + 4));
      else
        std::string::operator=(v10, (const std::string *)(v8 + 4));
      v12 = (MIL::Proto *)v8[7];
      v13 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)v9 + 3);
      if (!v13)
      {
        v13 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v13);
        *((_QWORD *)v9 + 3) = v13;
      }
      MIL::Proto::SerializeValueType(v12, v13, v11);
      v14 = (_QWORD *)v8[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v8[2];
          v16 = *v15 == (_QWORD)v8;
          v8 = v15;
        }
        while (!v16);
      }
      v8 = v15;
    }
    while (v15 != v7);
  }
  v17 = (_QWORD *)(*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 112))(this);
  v18 = v17 + 1;
  v19 = (_QWORD *)*v17;
  if ((_QWORD *)*v17 != v17 + 1)
  {
    do
    {
      v20 = (CoreML::Specification::MILSpec::Block *)operator new();
      CoreML::Specification::MILSpec::Block::Block(v20);
      MIL::Proto::SerializeBlock((MIL::Proto *)v19[7], v20, v21);
      v22 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[]((uint64_t)(a2 + 6), (std::string *)(v19 + 4));
      CoreML::Specification::MILSpec::Block::CopyFrom((CoreML::Specification::MILSpec::Block *)v22, v20);
      (*(void (**)(CoreML::Specification::MILSpec::Block *))(*(_QWORD *)v20 + 8))(v20);
      v23 = (_QWORD *)v19[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v19[2];
          v16 = *v24 == (_QWORD)v19;
          v19 = v24;
        }
        while (!v16);
      }
      v19 = v24;
    }
    while (v24 != v18);
  }
  Attributes = MIL::IRObject::GetAttributes(this);
  return MIL::Proto::SerializeAttributes(Attributes, (uint64_t)(a2 + 10));
}

void sub_1E064A670(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t MIL::Proto::SerializeAttributes(uint64_t result, uint64_t a2)
{
  uint64_t *i;
  CoreML::Specification::MILSpec::Value *v4;
  CoreML::Specification::MILSpec::Value *v5;
  std::string *v6;

  for (i = *(uint64_t **)(result + 16); i; i = (uint64_t *)*i)
  {
    v4 = (CoreML::Specification::MILSpec::Value *)operator new();
    CoreML::Specification::MILSpec::Value::Value(v4);
    MIL::Proto::SerializeValue((MIL::Proto *)i[5], v4, v5);
    v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](a2, (std::string *)(i + 2));
    CoreML::Specification::MILSpec::Value::CopyFrom((CoreML::Specification::MILSpec::Value *)v6, v4);
    result = (*(uint64_t (**)(CoreML::Specification::MILSpec::Value *))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_1E064A794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Proto::SerializeValueType(MIL::Proto *this, const MIL::IRValueType *a2, CoreML::Specification::MILSpec::ValueType *a3)
{
  const MIL::IRValueType *v3;
  MIL::Proto *WrappedType;
  uint64_t v5;
  MIL::IRTensorValueType *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CoreML::Specification::MILSpec::DictionaryType *v12;
  MIL::IRStateValueType *v13;
  MIL::IRStateValueType *v14;
  CoreML::Specification::MILSpec::StateType *v15;
  CoreML::Specification::MILSpec::ValueType *v16;
  MIL::Proto *v17;
  CoreML::Specification::MILSpec::ValueType *v18;
  unsigned int v19;
  uint64_t *result;
  unint64_t v21;
  MIL::Proto *v22;
  CoreML::Specification::MILSpec::Dimension *v23;
  CoreML::Specification::MILSpec::Dimension *v24;
  uint64_t v25;
  CoreML::Specification::MILSpec::ListType *v26;
  uint64_t v27;
  CoreML::Specification::MILSpec::TupleType *v28;
  CoreML::Specification::MILSpec::ValueType *v29;
  MIL::Proto *v30;
  CoreML::Specification::MILSpec::ValueType *v31;
  CoreML::Specification::MILSpec::Dimension *v32;
  MIL::Proto *v33;
  CoreML::Specification::MILSpec::Dimension *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  MIL::Proto *v38;
  CoreML::Specification::MILSpec::ValueType *v39;
  CoreML::Specification::MILSpec::ValueType *v40;
  std::runtime_error *exception;

  v3 = a2;
  WrappedType = this;
  v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IRValueType *, CoreML::Specification::MILSpec::ValueType *))(*(_QWORD *)this + 24))(this, a2, a3);
  if (v5)
  {
LABEL_2:
    v6 = (MIL::IRTensorValueType *)v5;
    if (*((_DWORD *)v3 + 7) == 1)
    {
      v7 = *((_QWORD *)v3 + 2);
    }
    else
    {
      CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
      *((_DWORD *)v3 + 7) = 1;
      v7 = operator new();
      CoreML::Specification::MILSpec::TensorType::TensorType((CoreML::Specification::MILSpec::TensorType *)v7);
      *((_QWORD *)v3 + 2) = v7;
    }
    v19 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 88))(v6) - 2;
    if (v19 >= 0x18 || ((0xFEFFBFu >> v19) & 1) == 0)
    {
LABEL_40:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_DWORD *)(v7 + 80) = dword_1E0B04E8C[v19];
    *(_QWORD *)(v7 + 72) = MIL::IRTensorValueType::Rank(v6);
    result = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
    if (result[1] != *result)
    {
      v21 = 0;
      do
      {
        v22 = *(MIL::Proto **)(*(_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6)
                             + 8 * v21);
        v23 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Dimension>::TypeHandler>(v7 + 16);
        MIL::Proto::SerializeDimension(v22, v23, v24);
        ++v21;
        result = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
      }
      while (v21 < (result[1] - *result) >> 3);
    }
  }
  else
  {
    while (1)
    {
      v8 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)WrappedType + 32))(WrappedType);
      if (v8)
        break;
      v9 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)WrappedType + 40))(WrappedType);
      if (v9)
      {
        v27 = v9;
        if (*((_DWORD *)v3 + 7) == 3)
        {
          v28 = (CoreML::Specification::MILSpec::TupleType *)*((_QWORD *)v3 + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
          *((_DWORD *)v3 + 7) = 3;
          v28 = (CoreML::Specification::MILSpec::TupleType *)operator new();
          CoreML::Specification::MILSpec::TupleType::TupleType(v28);
          *((_QWORD *)v3 + 2) = v28;
        }
        result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 64))(v27);
        v35 = *result;
        if (result[1] != *result)
        {
          v36 = result;
          v37 = 0;
          do
          {
            v38 = *(MIL::Proto **)(v35 + 8 * v37);
            v39 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::ValueType>::TypeHandler>((uint64_t)v28 + 16);
            result = (uint64_t *)MIL::Proto::SerializeValueType(v38, v39, v40);
            ++v37;
            v35 = *v36;
          }
          while (v37 < (v36[1] - *v36) >> 3);
        }
        return result;
      }
      v10 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)WrappedType + 48))(WrappedType);
      if (v10)
      {
        v11 = v10;
        if (*((_DWORD *)v3 + 7) == 4)
        {
          v12 = (CoreML::Specification::MILSpec::DictionaryType *)*((_QWORD *)v3 + 2);
        }
        else
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
          *((_DWORD *)v3 + 7) = 4;
          v12 = (CoreML::Specification::MILSpec::DictionaryType *)operator new();
          CoreML::Specification::MILSpec::DictionaryType::DictionaryType(v12);
          *((_QWORD *)v3 + 2) = v12;
        }
        v17 = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
        v18 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)v12 + 2);
        if (!v18)
        {
          v18 = (CoreML::Specification::MILSpec::ValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(v18);
          *((_QWORD *)v12 + 2) = v18;
        }
        MIL::Proto::SerializeValueType(v17, v18, v16);
        WrappedType = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
        v3 = (const MIL::IRValueType *)*((_QWORD *)v12 + 3);
        if (!v3)
        {
          v3 = (const MIL::IRValueType *)operator new();
          CoreML::Specification::MILSpec::ValueType::ValueType(v3);
          *((_QWORD *)v12 + 3) = v3;
        }
      }
      else
      {
        v13 = (MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(WrappedType);
        if (!v13)
          goto LABEL_40;
        v14 = v13;
        v15 = CoreML::Specification::MILSpec::ValueType::mutable_statetype(v3);
        WrappedType = (MIL::Proto *)MIL::IRStateValueType::GetWrappedType(v14);
        v3 = CoreML::Specification::MILSpec::StateType::mutable_wrappedtype(v15);
      }
      v5 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)WrappedType + 24))(WrappedType);
      if (v5)
        goto LABEL_2;
    }
    v25 = v8;
    if (*((_DWORD *)v3 + 7) == 2)
    {
      v26 = (CoreML::Specification::MILSpec::ListType *)*((_QWORD *)v3 + 2);
    }
    else
    {
      CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
      *((_DWORD *)v3 + 7) = 2;
      v26 = (CoreML::Specification::MILSpec::ListType *)operator new();
      CoreML::Specification::MILSpec::ListType::ListType(v26);
      *((_QWORD *)v3 + 2) = v26;
    }
    v30 = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25);
    v31 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)v26 + 2);
    if (!v31)
    {
      v31 = (CoreML::Specification::MILSpec::ValueType *)operator new();
      CoreML::Specification::MILSpec::ValueType::ValueType(v31);
      *((_QWORD *)v26 + 2) = v31;
    }
    MIL::Proto::SerializeValueType(v30, v31, v29);
    v33 = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
    v34 = (CoreML::Specification::MILSpec::Dimension *)*((_QWORD *)v26 + 3);
    if (!v34)
    {
      v34 = (CoreML::Specification::MILSpec::Dimension *)operator new();
      CoreML::Specification::MILSpec::Dimension::Dimension(v34);
      *((_QWORD *)v26 + 3) = v34;
    }
    return (uint64_t *)MIL::Proto::SerializeDimension(v33, v34, v32);
  }
  return result;
}

void sub_1E064AC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeBlock(MIL::Proto *this, const MIL::IRBlock *a2, CoreML::Specification::MILSpec::Block *a3)
{
  uint64_t v5;
  MIL::IRNamedValueType **v6;
  MIL::IRNamedValueType **v7;
  CoreML::Specification::MILSpec::NamedValueType *v8;
  const std::string *Name;
  CoreML::Specification::MILSpec::ValueType *v10;
  MIL::Proto *Type;
  CoreML::Specification::MILSpec::ValueType *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  MIL::Proto ****v16;
  MIL::Proto **v17;
  MIL::Proto **v18;
  MIL::Proto *v19;
  CoreML::Specification::MILSpec::Operation *v20;
  CoreML::Specification::MILSpec::Operation *v21;
  uint64_t Attributes;

  v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IRBlock *, CoreML::Specification::MILSpec::Block *))(*(_QWORD *)this + 40))(this, a2, a3);
  v6 = *(MIL::IRNamedValueType ***)v5;
  v7 = *(MIL::IRNamedValueType ***)(v5 + 8);
  if (*(MIL::IRNamedValueType ***)v5 != v7)
  {
    do
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)a2 + 16);
      Name = (const std::string *)MIL::IRNamedValueType::GetName(*v6);
      if (*((__int128 **)v8 + 2) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v8 + 2, (uint64_t)Name);
      else
        std::string::operator=(*((std::string **)v8 + 2), Name);
      Type = (MIL::Proto *)MIL::IRNamedValueType::GetType(*v6);
      v12 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)v8 + 3);
      if (!v12)
      {
        v12 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v12);
        *((_QWORD *)v8 + 3) = v12;
      }
      MIL::Proto::SerializeValueType(Type, v12, v10);
      v6 += 2;
    }
    while (v6 != v7);
  }
  v13 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 88))(this);
  v14 = *(std::string **)v13;
  v15 = *(std::string **)(v13 + 8);
  while (v14 != v15)
    CoreML::Specification::MILSpec::Block::add_outputs((uint64_t)a2, v14++);
  v16 = (MIL::Proto ****)(*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 56))(this);
  v17 = **v16;
  v18 = (*v16)[1];
  while (v17 != v18)
  {
    v19 = *v17;
    v17 += 2;
    v20 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Operation>::TypeHandler>((uint64_t)a2 + 64);
    MIL::Proto::SerializeOperation(v19, v20, v21);
  }
  Attributes = MIL::IRObject::GetAttributes(this);
  return MIL::Proto::SerializeAttributes(Attributes, (uint64_t)a2 + 96);
}

void sub_1E064AE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

std::string *CoreML::Specification::MILSpec::Block::add_outputs(uint64_t a1, std::string *__str)
{
  google::protobuf::Arena **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *Aligned;
  google::protobuf::Arena *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (google::protobuf::Arena **)(a1 + 40);
  v5 = *(int **)(a1 + 56);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 52);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v7 + 1);
    v5 = *(int **)(a1 + 56);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(a1 + 48);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 48) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(Aligned, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 52))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v9 = *v4;
  if (*v4)
  {
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    Aligned = (std::string *)operator new();
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return std::string::operator=(Aligned, __str);
}

uint64_t MIL::Proto::SerializeOperation(MIL::Proto *this, const MIL::IROperation *a2, CoreML::Specification::MILSpec::Operation *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string::size_type v7;
  __int128 v8;
  uint64_t v9;
  MIL::IRNamedValueType **v10;
  MIL::IRNamedValueType **v11;
  CoreML::Specification::MILSpec::NamedValueType *v12;
  const std::string *Name;
  CoreML::Specification::MILSpec::ValueType *v14;
  MIL::Proto *Type;
  CoreML::Specification::MILSpec::ValueType *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  MIL::IRArgument **v20;
  MIL::IRArgument **v21;
  std::string *v22;
  CoreML::Specification::MILSpec::Argument_Binding *v23;
  int v24;
  MIL::IRArgument *v25;
  const std::string *v26;
  __int128 *v27;
  uint64_t v28;
  MIL::Proto *v29;
  uint64_t v30;
  CoreML::Specification::MILSpec::Value *v31;
  uint64_t v32;
  std::string::size_type size;
  std::string *v34;
  CoreML::Specification::MILSpec::Value *v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t Attributes;
  MIL::Proto *v41;
  const MIL::IROperation *v42;
  _QWORD *v43;
  std::string __str;
  char v45;

  v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IROperation *, CoreML::Specification::MILSpec::Operation *))(*(_QWORD *)this + 72))(this, a2, a3);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    if (std::string::find((const std::string *)v6, 46, 0) == -1)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v8 = *(_OWORD *)v6;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
      }
    }
    else
    {
      v7 = std::string::find((const std::string *)v6, 46, 0);
      std::string::basic_string(&__str, (const std::string *)v6, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v45);
    }
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v9 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 176))(this);
  v10 = *(MIL::IRNamedValueType ***)v9;
  v11 = *(MIL::IRNamedValueType ***)(v9 + 8);
  if (*(MIL::IRNamedValueType ***)v9 != v11)
  {
    do
    {
      v12 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)a2 + 48);
      Name = (const std::string *)MIL::IRNamedValueType::GetName(*v10);
      if (*((__int128 **)v12 + 2) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v12 + 2, (uint64_t)Name);
      else
        std::string::operator=(*((std::string **)v12 + 2), Name);
      Type = (MIL::Proto *)MIL::IRNamedValueType::GetType(*v10);
      v16 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)v12 + 3);
      if (!v16)
      {
        v16 = (CoreML::Specification::MILSpec::ValueType *)operator new();
        CoreML::Specification::MILSpec::ValueType::ValueType(v16);
        *((_QWORD *)v12 + 3) = v16;
      }
      MIL::Proto::SerializeValueType(Type, v16, v14);
      v10 += 2;
    }
    while (v10 != v11);
  }
  v41 = this;
  v42 = a2;
  v17 = (_QWORD *)(*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 160))(this);
  v18 = (_QWORD *)*v17;
  v43 = v17 + 1;
  if ((_QWORD *)*v17 != v17 + 1)
  {
    v19 = (char *)a2 + 24;
    while (1)
    {
      v21 = (MIL::IRArgument **)v18[7];
      v20 = (MIL::IRArgument **)v18[8];
      if (v21 != v20)
        break;
LABEL_46:
      v36 = (_QWORD *)v18[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v18[2];
          v38 = *v37 == (_QWORD)v18;
          v18 = v37;
        }
        while (!v38);
      }
      v18 = v37;
      if (v37 == v43)
        goto LABEL_52;
    }
    while (1)
    {
      v22 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)v19, (std::string *)(v18 + 4));
      v23 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Argument_Binding>::TypeHandler>((uint64_t)&v22->__r_.__value_.__r.__words[2]);
      v24 = (*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)*v21 + 16))(*v21);
      v25 = *v21;
      if (!v24)
        break;
      v26 = (const std::string *)MIL::IRArgument::GetName(v25);
      if (*((_DWORD *)v23 + 7) != 1)
      {
        CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)v23);
        *((_DWORD *)v23 + 7) = 1;
        *((_QWORD *)v23 + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_34:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v23 + 2, (uint64_t)v26);
        goto LABEL_45;
      }
      v27 = (__int128 *)*((_QWORD *)v23 + 2);
      if (v27 == &google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_34;
      std::string::operator=((std::string *)v27, v26);
LABEL_45:
      v21 += 2;
      if (v21 == v20)
        goto LABEL_46;
    }
    v28 = (*(uint64_t (**)(MIL::IRArgument *))(*(_QWORD *)v25 + 40))(v25);
    if (!v28)
      goto LABEL_45;
    v29 = (MIL::Proto *)v28;
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    if (!v30 || (v32 = v30, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 120))(v30)))
    {
LABEL_41:
      if (*((_DWORD *)v23 + 7) == 2)
      {
        v35 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)v23 + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)v23);
        *((_DWORD *)v23 + 7) = 2;
        v35 = (CoreML::Specification::MILSpec::Value *)operator new();
        CoreML::Specification::MILSpec::Value::Value(v35);
        *((_QWORD *)v23 + 2) = v35;
      }
      MIL::Proto::SerializeValue(v29, v35, v31);
      goto LABEL_45;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v32 + 128))(&__str, v32);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      if (*((_DWORD *)v23 + 7) == 1)
      {
        v34 = (std::string *)*((_QWORD *)v23 + 2);
        if (v34 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          std::string::operator=(v34, &__str);
          goto LABEL_37;
        }
      }
      else
      {
        CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)v23);
        *((_DWORD *)v23 + 7) = 1;
        *((_QWORD *)v23 + 2) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v23 + 2, (uint64_t)&__str);
    }
LABEL_37:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!size)
        goto LABEL_41;
    }
    else if (!size)
    {
      goto LABEL_41;
    }
    goto LABEL_45;
  }
LABEL_52:
  Attributes = MIL::IRObject::GetAttributes(v41);
  return MIL::Proto::SerializeAttributes(Attributes, (uint64_t)v42 + 104);
}

void sub_1E064B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

void MIL::Proto::SerializeValue(MIL::Proto *this, const MIL::IRValue *a2, CoreML::Specification::MILSpec::Value *a3)
{
  CoreML::Specification::MILSpec::ValueType *v5;
  MIL::Proto *v6;
  CoreML::Specification::MILSpec::ValueType *v7;
  uint64_t v8;
  MIL::Proto *v9;
  CoreML::Specification::MILSpec::TensorValue *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  MIL::IRListValue *v17;
  uint64_t v18;
  uint64_t v19;
  CoreML::Specification::MILSpec::TensorValue *v20;
  CoreML::Specification::MILSpec::Value_BlobFileValue *v21;
  uint64_t v22;
  MIL::IRTupleValue *v23;
  uint64_t v24;
  CoreML::Specification::MILSpec::ListValue *v25;
  uint64_t Values;
  uint64_t v27;
  MIL::Proto **v28;
  uint64_t v29;
  uint64_t v30;
  MIL::Proto *v31;
  CoreML::Specification::MILSpec::Value *v32;
  CoreML::Specification::MILSpec::Value *v33;
  uint64_t v34;
  MIL::IRDictionaryValue *v35;
  uint64_t v36;
  CoreML::Specification::MILSpec::TupleValue *v37;
  uint64_t v38;
  uint64_t v39;
  MIL::Proto **v40;
  uint64_t v41;
  uint64_t v42;
  MIL::Proto *v43;
  CoreML::Specification::MILSpec::Value *v44;
  CoreML::Specification::MILSpec::Value *v45;
  CoreML::Specification::MILSpec::DictionaryValue *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  CoreML::Specification::MILSpec::Value *v51;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *v52;
  MIL::Proto *v53;
  CoreML::Specification::MILSpec::Value *v54;
  CoreML::Specification::MILSpec::Value *v55;
  MIL::Proto *v56;
  CoreML::Specification::MILSpec::Value *v57;
  std::runtime_error *exception;
  void *__p[2];
  char v60;
  std::string v61;

  v6 = (MIL::Proto *)(*(uint64_t (**)(MIL::Proto *, const MIL::IRValue *, CoreML::Specification::MILSpec::Value *))(*(_QWORD *)this + 32))(this, a2, a3);
  v7 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)a2 + 3);
  if (!v7)
  {
    v7 = (CoreML::Specification::MILSpec::ValueType *)operator new();
    CoreML::Specification::MILSpec::ValueType::ValueType(v7);
    *((_QWORD *)a2 + 3) = v7;
  }
  MIL::Proto::SerializeValueType(v6, v7, v5);
  v8 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 40))(this);
  if (v8)
  {
    v9 = (MIL::Proto *)v8;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8))
    {
      v11 = (_QWORD *)(*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)v9 + 88))(v9);
      std::string::basic_string[abi:ne180100]<0>(__p, "path");
      v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v11, (unsigned __int8 *)__p);
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &v61);
      if (v60 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "offset");
      v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v11, (unsigned __int8 *)__p);
      if (!v13)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v14 = MIL::IRValue::GetScalar<unsigned long long>(*((const void **)v13 + 5));
      if (v60 < 0)
        operator delete(__p[0]);
      if (*((_DWORD *)a2 + 11) == 5)
      {
        v15 = (uint64_t *)*((_QWORD *)a2 + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 11) = 5;
        v15 = (uint64_t *)operator new();
        CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue((CoreML::Specification::MILSpec::Value_BlobFileValue *)v15);
        *((_QWORD *)a2 + 4) = v15;
      }
      google::protobuf::internal::ArenaStringPtr::SetNoArena(v15 + 2, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v61);
      if (*((_DWORD *)a2 + 11) == 5)
      {
        v21 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)*((_QWORD *)a2 + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 11) = 5;
        v21 = (CoreML::Specification::MILSpec::Value_BlobFileValue *)operator new();
        CoreML::Specification::MILSpec::Value_BlobFileValue::Value_BlobFileValue(v21);
        *((_QWORD *)a2 + 4) = v21;
      }
      *((_QWORD *)v21 + 3) = v14;
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
    else
    {
      if (*((_DWORD *)a2 + 11) == 3)
      {
        v19 = *((_QWORD *)a2 + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 11) = 3;
        v19 = operator new();
        CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v19);
        *((_QWORD *)a2 + 4) = v19;
      }
      if (*(_DWORD *)(v19 + 28) == 1)
      {
        v20 = *(CoreML::Specification::MILSpec::TensorValue **)(v19 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v19);
        *(_DWORD *)(v19 + 28) = 1;
        v20 = (CoreML::Specification::MILSpec::TensorValue *)operator new();
        CoreML::Specification::MILSpec::TensorValue::TensorValue(v20);
        *(_QWORD *)(v19 + 16) = v20;
      }
      MIL::Proto::SerializeTensorValue(v9, v20, v10);
    }
  }
  else
  {
    v16 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 48))(this);
    if (v16)
    {
      v17 = (MIL::IRListValue *)v16;
      if (*((_DWORD *)a2 + 11) == 3)
      {
        v18 = *((_QWORD *)a2 + 4);
      }
      else
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 11) = 3;
        v18 = operator new();
        CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v18);
        *((_QWORD *)a2 + 4) = v18;
      }
      if (*(_DWORD *)(v18 + 28) == 3)
      {
        v25 = *(CoreML::Specification::MILSpec::ListValue **)(v18 + 16);
      }
      else
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v18);
        *(_DWORD *)(v18 + 28) = 3;
        v25 = (CoreML::Specification::MILSpec::ListValue *)operator new();
        CoreML::Specification::MILSpec::ListValue::ListValue(v25);
        *(_QWORD *)(v18 + 16) = v25;
      }
      Values = MIL::IRListValue::GetValues(v17);
      if (v27)
      {
        v28 = (MIL::Proto **)Values;
        v29 = (uint64_t)v25 + 16;
        v30 = 16 * v27;
        do
        {
          v31 = *v28;
          v28 += 2;
          v32 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v29);
          MIL::Proto::SerializeValue(v31, v32, v33);
          v30 -= 16;
        }
        while (v30);
      }
    }
    else
    {
      v22 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 56))(this);
      if (v22)
      {
        v23 = (MIL::IRTupleValue *)v22;
        if (*((_DWORD *)a2 + 11) == 3)
        {
          v24 = *((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
          *((_DWORD *)a2 + 11) = 3;
          v24 = operator new();
          CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v24);
          *((_QWORD *)a2 + 4) = v24;
        }
        if (*(_DWORD *)(v24 + 28) == 2)
        {
          v37 = *(CoreML::Specification::MILSpec::TupleValue **)(v24 + 16);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v24);
          *(_DWORD *)(v24 + 28) = 2;
          v37 = (CoreML::Specification::MILSpec::TupleValue *)operator new();
          CoreML::Specification::MILSpec::TupleValue::TupleValue(v37);
          *(_QWORD *)(v24 + 16) = v37;
        }
        v38 = MIL::IRTupleValue::GetValues(v23);
        if (v39)
        {
          v40 = (MIL::Proto **)v38;
          v41 = (uint64_t)v37 + 16;
          v42 = 16 * v39;
          do
          {
            v43 = *v40;
            v40 += 2;
            v44 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v41);
            MIL::Proto::SerializeValue(v43, v44, v45);
            v42 -= 16;
          }
          while (v42);
        }
      }
      else
      {
        v34 = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 64))(this);
        if (!v34)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v35 = (MIL::IRDictionaryValue *)v34;
        if (*((_DWORD *)a2 + 11) == 3)
        {
          v36 = *((_QWORD *)a2 + 4);
        }
        else
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
          *((_DWORD *)a2 + 11) = 3;
          v36 = operator new();
          CoreML::Specification::MILSpec::Value_ImmediateValue::Value_ImmediateValue((CoreML::Specification::MILSpec::Value_ImmediateValue *)v36);
          *((_QWORD *)a2 + 4) = v36;
        }
        if (*(_DWORD *)(v36 + 28) == 4)
        {
          v46 = *(CoreML::Specification::MILSpec::DictionaryValue **)(v36 + 16);
        }
        else
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v36);
          *(_DWORD *)(v36 + 28) = 4;
          v46 = (CoreML::Specification::MILSpec::DictionaryValue *)operator new();
          CoreML::Specification::MILSpec::DictionaryValue::DictionaryValue(v46);
          *(_QWORD *)(v36 + 16) = v46;
        }
        v47 = (_QWORD *)MIL::IRDictionaryValue::begin(v35);
        v48 = MIL::IRDictionaryValue::end(v35);
        if (v47 != (_QWORD *)v48)
        {
          v49 = (_QWORD *)v48;
          v50 = (uint64_t)v46 + 16;
          do
          {
            v52 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::TypeHandler>(v50);
            v53 = (MIL::Proto *)v47[2];
            v54 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)v52 + 2);
            if (!v54)
            {
              v54 = (CoreML::Specification::MILSpec::Value *)operator new();
              CoreML::Specification::MILSpec::Value::Value(v54);
              *((_QWORD *)v52 + 2) = v54;
            }
            MIL::Proto::SerializeValue(v53, v54, v51);
            v56 = (MIL::Proto *)v47[4];
            v57 = (CoreML::Specification::MILSpec::Value *)*((_QWORD *)v52 + 3);
            if (!v57)
            {
              v57 = (CoreML::Specification::MILSpec::Value *)operator new();
              CoreML::Specification::MILSpec::Value::Value(v57);
              *((_QWORD *)v52 + 3) = v57;
            }
            MIL::Proto::SerializeValue(v56, v57, v55);
            v47 = (_QWORD *)*v47;
          }
          while (v47 != v49);
        }
      }
    }
  }
}

void sub_1E064BA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x1E0C023A0](v20, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeDimension(MIL::Proto *this, const MIL::IRDimension *a2, CoreML::Specification::MILSpec::Dimension *a3)
{
  uint64_t v5;
  CoreML::Specification::MILSpec::Dimension_ConstantDimension *v6;
  uint64_t result;
  CoreML::Specification::MILSpec::Dimension_UnknownDimension *v8;

  if ((*(uint64_t (**)(MIL::Proto *, const MIL::IRDimension *, CoreML::Specification::MILSpec::Dimension *))(*(_QWORD *)this + 16))(this, a2, a3))
  {
    v5 = MIL::IRDimension::AsConstant(this);
    if (*((_DWORD *)a2 + 7) == 1)
    {
      v6 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)*((_QWORD *)a2 + 2);
    }
    else
    {
      CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)a2);
      *((_DWORD *)a2 + 7) = 1;
      v6 = (CoreML::Specification::MILSpec::Dimension_ConstantDimension *)operator new();
      CoreML::Specification::MILSpec::Dimension_ConstantDimension::Dimension_ConstantDimension(v6);
      *((_QWORD *)a2 + 2) = v6;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
    *((_QWORD *)v6 + 2) = result;
  }
  else
  {
    result = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 24))(this);
    if (result)
    {
      if (*((_DWORD *)a2 + 7) == 2)
      {
        v8 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)*((_QWORD *)a2 + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 2;
        v8 = (CoreML::Specification::MILSpec::Dimension_UnknownDimension *)operator new();
        CoreML::Specification::MILSpec::Dimension_UnknownDimension::Dimension_UnknownDimension(v8);
        *((_QWORD *)a2 + 2) = v8;
      }
      result = (*(uint64_t (**)(MIL::Proto *))(*(_QWORD *)this + 32))(this);
      *((_BYTE *)v8 + 16) = result;
    }
  }
  return result;
}

void sub_1E064BC98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::StateType *CoreML::Specification::MILSpec::ValueType::mutable_statetype(CoreML::Specification::MILSpec::ValueType *this)
{
  CoreML::Specification::MILSpec::StateType *v2;

  if (*((_DWORD *)this + 7) == 5)
    return (CoreML::Specification::MILSpec::StateType *)*((_QWORD *)this + 2);
  CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
  *((_DWORD *)this + 7) = 5;
  v2 = (CoreML::Specification::MILSpec::StateType *)operator new();
  CoreML::Specification::MILSpec::StateType::StateType(v2);
  *((_QWORD *)this + 2) = v2;
  return v2;
}

void sub_1E064BD38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::ValueType *CoreML::Specification::MILSpec::StateType::mutable_wrappedtype(CoreML::Specification::MILSpec::StateType *this)
{
  CoreML::Specification::MILSpec::ValueType *v1;

  v1 = (CoreML::Specification::MILSpec::ValueType *)*((_QWORD *)this + 2);
  if (!v1)
  {
    v1 = (CoreML::Specification::MILSpec::ValueType *)operator new();
    CoreML::Specification::MILSpec::ValueType::ValueType(v1);
    *((_QWORD *)this + 2) = v1;
  }
  return v1;
}

void sub_1E064BDA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

void MIL::Proto::SerializeTensorValue(MIL::Proto *this, const MIL::IRTensorValue *a2, CoreML::Specification::MILSpec::TensorValue *a3)
{
  uint64_t v5;
  uint64_t Data;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::string **v39;
  uint64_t v40;
  uint64_t v41;
  std::string::value_type *v42;
  uint64_t v43;
  std::string **v44;
  std::string *v45;
  std::string **v46;
  __int128 *v47;
  std::string::value_type v48;
  uint64_t v49;
  uint64_t v50;
  __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  const std::string::value_type *v76;
  uint64_t v77;
  std::string::size_type v78;
  std::string::size_type v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::string **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string **v109;
  std::string::size_type v110;
  std::string::size_type v111;
  std::string **v112;
  std::string *v113;
  std::string **v114;
  __int128 *v115;
  std::string::size_type v116;
  std::string **v117;
  __int128 *v118;
  const std::string::value_type *v119;
  std::string **v120;
  __int128 *v121;
  std::string **v122;
  __int128 *v123;
  std::runtime_error *exception;

  v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IRTensorValue *, CoreML::Specification::MILSpec::TensorValue *))(*(_QWORD *)this + 32))(this, a2, a3);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      Data = MIL::IRTensorValue::GetDataView<BOOL>((uint64_t *)this);
      if (v7)
      {
        v8 = (char *)Data;
        v9 = v7;
        do
        {
          if (*((_DWORD *)a2 + 7) == 3)
          {
            v10 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 3;
            v10 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedBools::TensorValue_RepeatedBools((CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)v10);
            *((_QWORD *)a2 + 2) = v10;
          }
          v11 = *v8;
          v12 = *(_DWORD *)(v10 + 16);
          if (v12 == *(_DWORD *)(v10 + 20))
          {
            google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)(v10 + 16), v12 + 1);
            v12 = *(_DWORD *)(v10 + 16);
          }
          v13 = *(_QWORD *)(v10 + 24);
          *(_DWORD *)(v10 + 16) = v12 + 1;
          *(_BYTE *)(v13 + v12 + 8) = v11;
          ++v8;
          --v9;
        }
        while (v9);
      }
      return;
    case 3u:
      v14 = MIL::IRTensorValue::GetDataView<std::string>((uint64_t *)this);
      if (v15)
      {
        v16 = (std::string *)v14;
        v17 = 24 * v15;
        do
        {
          if (*((_DWORD *)a2 + 7) == 4)
          {
            v18 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 4;
            v18 = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v18);
            *((_QWORD *)a2 + 2) = v18;
          }
          CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::add_values((uint64_t)v18, v16++);
          v17 -= 24;
        }
        while (v17);
      }
      return;
    case 4u:
      v19 = MIL::IRTensorValue::GetDataView<MIL::Fp16>((uint64_t *)this);
      v21 = v20;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_144;
      goto LABEL_39;
    case 5u:
      v22 = MIL::IRTensorValue::GetDataView<float>((uint64_t *)this);
      if (v23)
      {
        v24 = (int *)v22;
        v25 = 4 * v23;
        do
        {
          if (*((_DWORD *)a2 + 7) == 1)
          {
            v26 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 1;
            v26 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats((CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)v26);
            *((_QWORD *)a2 + 2) = v26;
          }
          v27 = *v24;
          v28 = *(_DWORD *)(v26 + 16);
          if (v28 == *(_DWORD *)(v26 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v26 + 16), v28 + 1);
            v28 = *(_DWORD *)(v26 + 16);
          }
          v29 = *(_QWORD *)(v26 + 24);
          *(_DWORD *)(v26 + 16) = v28 + 1;
          *(_DWORD *)(v29 + 4 * v28 + 8) = v27;
          ++v24;
          v25 -= 4;
        }
        while (v25);
      }
      return;
    case 6u:
      v30 = MIL::IRTensorValue::GetDataView<double>((uint64_t *)this);
      if (v31)
      {
        v32 = (uint64_t *)v30;
        v33 = 8 * v31;
        do
        {
          if (*((_DWORD *)a2 + 7) == 6)
          {
            v34 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 6;
            v34 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles((CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)v34);
            *((_QWORD *)a2 + 2) = v34;
          }
          v35 = *v32;
          v36 = *(_DWORD *)(v34 + 16);
          if (v36 == *(_DWORD *)(v34 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v34 + 16), v36 + 1);
            v36 = *(_DWORD *)(v34 + 16);
          }
          v37 = *(_QWORD *)(v34 + 24);
          *(_DWORD *)(v34 + 16) = v36 + 1;
          *(_QWORD *)(v37 + 8 * v36 + 8) = v35;
          ++v32;
          v33 -= 8;
        }
        while (v33);
      }
      return;
    case 7u:
      v19 = MIL::IRTensorValue::GetDataView<MIL::Bf16>((uint64_t *)this);
      v21 = v38;
      if (*((_DWORD *)a2 + 7) == 7)
      {
LABEL_39:
        v39 = (std::string **)*((_QWORD *)a2 + 2);
      }
      else
      {
LABEL_144:
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        v39 = (std::string **)operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v39);
        *((_QWORD *)a2 + 2) = v39;
      }
      v115 = (__int128 *)v39[2];
      v114 = v39 + 2;
      v113 = (std::string *)v115;
      if (v115 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v114, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v113 = *v114;
      }
      v116 = 2 * v21;
      goto LABEL_152;
    case 9u:
      v40 = MIL::IRTensorValue::GetDataView<signed char>((uint64_t *)this);
      if (v41)
      {
        v42 = (std::string::value_type *)v40;
        v43 = v41;
        do
        {
          if (*((_DWORD *)a2 + 7) == 7)
          {
            v44 = (std::string **)*((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 7;
            v44 = (std::string **)operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v44);
            *((_QWORD *)a2 + 2) = v44;
          }
          v47 = (__int128 *)v44[2];
          v46 = v44 + 2;
          v45 = (std::string *)v47;
          if (v47 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v46, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v45 = *v46;
          }
          v48 = *v42++;
          std::string::push_back(v45, v48);
          --v43;
        }
        while (v43);
      }
      return;
    case 0xAu:
      v49 = MIL::IRTensorValue::GetDataView<short>((uint64_t *)this);
      if (v50)
      {
        v51 = (__int16 *)v49;
        v52 = 2 * v50;
        do
        {
          if (*((_DWORD *)a2 + 7) == 2)
          {
            v53 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 2;
            v53 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v53);
            *((_QWORD *)a2 + 2) = v53;
          }
          v54 = *v51;
          v55 = *(_DWORD *)(v53 + 16);
          if (v55 == *(_DWORD *)(v53 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v53 + 16), v55 + 1);
            v55 = *(_DWORD *)(v53 + 16);
          }
          v56 = *(_QWORD *)(v53 + 24);
          *(_DWORD *)(v53 + 16) = v55 + 1;
          *(_DWORD *)(v56 + 4 * v55 + 8) = v54;
          ++v51;
          v52 -= 2;
        }
        while (v52);
      }
      return;
    case 0xBu:
      v57 = MIL::IRTensorValue::GetDataView<int>((uint64_t *)this);
      if (v58)
      {
        v59 = (int *)v57;
        v60 = 4 * v58;
        do
        {
          if (*((_DWORD *)a2 + 7) == 2)
          {
            v61 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 2;
            v61 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v61);
            *((_QWORD *)a2 + 2) = v61;
          }
          v62 = *v59;
          v63 = *(_DWORD *)(v61 + 16);
          if (v63 == *(_DWORD *)(v61 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v61 + 16), v63 + 1);
            v63 = *(_DWORD *)(v61 + 16);
          }
          v64 = *(_QWORD *)(v61 + 24);
          *(_DWORD *)(v61 + 16) = v63 + 1;
          *(_DWORD *)(v64 + 4 * v63 + 8) = v62;
          ++v59;
          v60 -= 4;
        }
        while (v60);
      }
      return;
    case 0xCu:
      v65 = MIL::IRTensorValue::GetDataView<long long>((uint64_t *)this);
      if (v66)
      {
        v67 = (uint64_t *)v65;
        v68 = 8 * v66;
        do
        {
          if (*((_DWORD *)a2 + 7) == 5)
          {
            v69 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 5;
            v69 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v69);
            *((_QWORD *)a2 + 2) = v69;
          }
          v70 = *v67;
          v71 = *(_DWORD *)(v69 + 16);
          if (v71 == *(_DWORD *)(v69 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v69 + 16), v71 + 1);
            v71 = *(_DWORD *)(v69 + 16);
          }
          v72 = *(_QWORD *)(v69 + 24);
          *(_DWORD *)(v69 + 16) = v71 + 1;
          *(_QWORD *)(v72 + 8 * v71 + 8) = v70;
          ++v67;
          v68 -= 8;
        }
        while (v68);
      }
      return;
    case 0xDu:
      v73 = MIL::IRTensorValue::GetDataView<MIL::Int4>(this);
      v75 = ((v74 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v74 & 1);
      if (v75)
        v76 = (const std::string::value_type *)v73;
      else
        v76 = 0;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_153;
      goto LABEL_139;
    case 0xEu:
      v77 = MIL::IRTensorValue::GetDataView<unsigned char>(this);
      v79 = v78;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_157;
      goto LABEL_143;
    case 0xFu:
      v80 = MIL::IRTensorValue::GetDataView<unsigned short>((uint64_t *)this);
      if (v81)
      {
        v82 = (unsigned __int16 *)v80;
        v83 = 2 * v81;
        do
        {
          if (*((_DWORD *)a2 + 7) == 2)
          {
            v84 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 2;
            v84 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v84);
            *((_QWORD *)a2 + 2) = v84;
          }
          v85 = *v82;
          v86 = *(_DWORD *)(v84 + 16);
          if (v86 == *(_DWORD *)(v84 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v84 + 16), v86 + 1);
            v86 = *(_DWORD *)(v84 + 16);
          }
          v87 = *(_QWORD *)(v84 + 24);
          *(_DWORD *)(v84 + 16) = v86 + 1;
          *(_DWORD *)(v87 + 4 * v86 + 8) = v85;
          ++v82;
          v83 -= 2;
        }
        while (v83);
      }
      return;
    case 0x10u:
      v19 = MIL::IRTensorValue::GetDataView<unsigned int>((uint64_t *)this);
      v89 = v88;
      if (*((_DWORD *)a2 + 7) == 7)
      {
        v90 = (std::string **)*((_QWORD *)a2 + 2);
      }
      else
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        v90 = (std::string **)operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v90);
        *((_QWORD *)a2 + 2) = v90;
      }
      v118 = (__int128 *)v90[2];
      v117 = v90 + 2;
      v113 = (std::string *)v118;
      if (v118 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v117, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v113 = *v117;
      }
      v116 = 4 * v89;
LABEL_152:
      v119 = (const std::string::value_type *)v19;
      goto LABEL_161;
    case 0x11u:
      v91 = MIL::IRTensorValue::GetDataView<unsigned long long>((uint64_t *)this);
      if (v92)
      {
        v93 = (uint64_t *)v91;
        v94 = 8 * v92;
        do
        {
          if (*((_DWORD *)a2 + 7) == 5)
          {
            v95 = *((_QWORD *)a2 + 2);
          }
          else
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 5;
            v95 = operator new();
            CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v95);
            *((_QWORD *)a2 + 2) = v95;
          }
          v96 = *v93;
          v97 = *(_DWORD *)(v95 + 16);
          if (v97 == *(_DWORD *)(v95 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v95 + 16), v97 + 1);
            v97 = *(_DWORD *)(v95 + 16);
          }
          v98 = *(_QWORD *)(v95 + 24);
          *(_DWORD *)(v95 + 16) = v97 + 1;
          *(_QWORD *)(v98 + 8 * v97 + 8) = v96;
          ++v93;
          v94 -= 8;
        }
        while (v94);
      }
      return;
    case 0x13u:
      v99 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(this);
      if ((v100 & 3) != 0)
        v75 = ((v100 >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      else
        v75 = (v100 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
      if (v75)
        v76 = (const std::string::value_type *)v99;
      else
        v76 = 0;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_153;
      goto LABEL_139;
    case 0x14u:
      v101 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(this);
      v75 = ((v102 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v102 & 1);
      if (v75)
        v76 = (const std::string::value_type *)v101;
      else
        v76 = 0;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_153;
      goto LABEL_139;
    case 0x15u:
      v103 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(this);
      if ((v104 & 7) != 0)
        v75 = (v104 >> 3) + 1;
      else
        v75 = v104 >> 3;
      if (v75)
        v76 = (const std::string::value_type *)v103;
      else
        v76 = 0;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_153;
      goto LABEL_139;
    case 0x16u:
      v105 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(this);
      if (((3 * v106) & 7) != 0)
        v75 = ((unint64_t)(3 * v106) >> 3) + 1;
      else
        v75 = (unint64_t)(3 * v106) >> 3;
      if (v75)
        v76 = (const std::string::value_type *)v105;
      else
        v76 = 0;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_153;
      goto LABEL_139;
    case 0x17u:
      v107 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(this);
      if (((6 * v108) & 6) != 0)
        v75 = (((unint64_t)(3 * v108) >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      else
        v75 = ((unint64_t)(3 * v108) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
      if (v75)
        v76 = (const std::string::value_type *)v107;
      else
        v76 = 0;
      if (*((_DWORD *)a2 + 7) == 7)
      {
LABEL_139:
        v109 = (std::string **)*((_QWORD *)a2 + 2);
      }
      else
      {
LABEL_153:
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        v109 = (std::string **)operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v109);
        *((_QWORD *)a2 + 2) = v109;
      }
      v121 = (__int128 *)v109[2];
      v120 = v109 + 2;
      v113 = (std::string *)v121;
      if (v121 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v120, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v113 = *v120;
      }
      v119 = v76;
      v116 = v75;
      goto LABEL_161;
    case 0x18u:
      v77 = MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>((uint64_t *)this);
      v79 = v110;
      if (*((_DWORD *)a2 + 7) != 7)
        goto LABEL_157;
      goto LABEL_143;
    case 0x19u:
      v77 = MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>((uint64_t *)this);
      v79 = v111;
      if (*((_DWORD *)a2 + 7) == 7)
      {
LABEL_143:
        v112 = (std::string **)*((_QWORD *)a2 + 2);
      }
      else
      {
LABEL_157:
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        v112 = (std::string **)operator new();
        CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v112);
        *((_QWORD *)a2 + 2) = v112;
      }
      v123 = (__int128 *)v112[2];
      v122 = v112 + 2;
      v113 = (std::string *)v123;
      if (v123 == &google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v122, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v113 = *v122;
      }
      v119 = (const std::string::value_type *)v77;
      v116 = v79;
LABEL_161:
      std::string::append(v113, v119, v116);
      return;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E064CA04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1E064CA9C()
{
  JUMPOUT(0x1E064CA88);
}

void sub_1E064CAB0()
{
  JUMPOUT(0x1E064CA80);
}

std::string *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::add_values(uint64_t a1, std::string *__str)
{
  google::protobuf::Arena **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *Aligned;
  google::protobuf::Arena *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (google::protobuf::Arena **)(a1 + 16);
  v5 = *(int **)(a1 + 32);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 28);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 16), v7 + 1);
    v5 = *(int **)(a1 + 32);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(a1 + 24);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 24) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(Aligned, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 28))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v9 = *v4;
  if (*v4)
  {
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    Aligned = (std::string *)operator new();
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return std::string::operator=(Aligned, __str);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v5;
}

void sub_1E064CC38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::NamedValueType *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::NamedValueType *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::NamedValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::NamedValueType *)operator new();
    CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064CD54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

CoreML::Specification::MILSpec::Operation *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Operation>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::Operation *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Operation **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::Operation::Operation(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::Operation *)operator new();
    CoreML::Specification::MILSpec::Operation::Operation(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064CE90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

__n128 google::protobuf::internal::ArenaStringPtr::SetNoArena(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  __n128 result;
  uint64_t v7;

  v4 = *a1;
  if (*a1 == a2)
  {
    v7 = operator new();
    result = *a3;
    *(__n128 *)v7 = *a3;
    *(_QWORD *)(v7 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *a1 = v7;
  }
  else
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    result = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v4 = result;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return result;
}

CoreML::Specification::MILSpec::Argument_Binding *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Argument_Binding>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::Argument_Binding *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Argument_Binding **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::Argument_Binding *)operator new();
    CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064D04C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::Value *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Value **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::Value::Value(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::Value *)operator new();
    CoreML::Specification::MILSpec::Value::Value(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064D174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *)operator new();
    CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064D29C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void google::protobuf::RepeatedField<BOOL>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  int v7;
  _QWORD *Aligned;
  size_t v9;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], (v7 + 8));
    else
      Aligned = operator new((v7 + 8));
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v9 = *a1;
    if ((int)v9 >= 1)
      memcpy(Aligned + 1, v4 + 1, v9);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<float>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 4 * v7;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 4 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  google::protobuf::Arena **v4;
  google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 8 * v7;
    if (v5)
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x1E0DE4EC8], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

CoreML::Specification::MILSpec::Dimension *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Dimension>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::Dimension *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Dimension **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::Dimension *)operator new();
    CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064D620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::ValueType *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::ValueType>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::MILSpec::ValueType *Aligned;
  google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::ValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
    google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>);
  }
  else
  {
    Aligned = (CoreML::Specification::MILSpec::ValueType *)operator new();
    CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_1E064D748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_1E064D7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::CreateValueTypeInternal(google::protobuf::Arena **a1, std::string *a2)
{
  google::protobuf::Arena *v4;
  std::string *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 144);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)&Aligned[1]);
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_1E064D8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10B2C40A53FFCBDLL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x1E0DE4EE8], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (google::protobuf::Arena *)a1[5];
  v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  google::protobuf::Arena *v3;

  v3 = *a1;
  if (v3)
    return google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x1E0DE4EE8], 8 * a2);
  else
    return operator new(8 * a2);
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!v3)
    operator delete(a2);
}

void std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(a1, *a2);
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(a1, a2[1]);
    if (!*(_QWORD *)(a1 + 16))
      operator delete(a2);
  }
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_1E064DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const void **v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  if (!v3)
    return 0;
  v5 = 0;
  do
  {
    v8 = (const void **)v3;
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, &v8, (uint64_t *)&v8);
    ++v5;
    v6 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    v3 = v6;
  }
  while (v6);
  return v5;
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_1E064DFA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(uint64_t *result, const void ***a2, const void ****a3)
{
  const void ***v4;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  const void ****v8;
  BOOL v9;

  if (a2 != (const void ***)a3)
  {
    v4 = a2;
    v5 = (uint64_t)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ****)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ****)v4[2];
          v9 = *v8 == v4;
          v4 = (const void ***)v8;
        }
        while (!v9);
      }
      v4 = (const void ***)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((_QWORD *)a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((google::protobuf::Arena **)(a1 + 16), 1, 0);
    v7[4] = *a4;
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, const void ***a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *a5, (const void **)a2[4]))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (const void **)v12[4], *a5))
      goto LABEL_16;
    return std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (const void **)a2[4], *a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *a5, (const void **)v15[4]))
        return std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, _QWORD *a2, const void ***a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 24;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, *a3, (const void **)v4[4]))
          break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, (const void **)v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  google::protobuf::Arena *v3;

  v3 = *a1;
  if (v3)
    return google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x1E0DE4EE8], 40 * a2);
  else
    return operator new(40 * a2);
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((google::protobuf::Arena **)(a1 + 16), 1, 0);
    v6[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)&this[1]);
  return this;
}

void sub_1E064E468(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<std::string>(google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  return result;
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>);
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_1E064E534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::CreateValueTypeInternal(google::protobuf::Arena **a1, std::string *a2)
{
  google::protobuf::Arena *v4;
  std::string *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 152);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)&Aligned[1]);
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_1E064E5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10B2C4008C62E43);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x1E0DE4EE8], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (google::protobuf::Arena *)a1[5];
  v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_1E064EB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_1E064EBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)&this[1]);
  return this;
}

void sub_1E064EC34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>);
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_1E064ECEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::CreateValueTypeInternal(google::protobuf::Arena **a1, std::string *a2)
{
  google::protobuf::Arena *v4;
  std::string *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 72);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)&Aligned[1]);
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_1E064EDB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10B2C40C743746ALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x1E0DE4EE8], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (google::protobuf::Arena *)a1[5];
  v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_1E064F324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_1E064F380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)&this[1]);
  return this;
}

void sub_1E064F3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>);
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_1E064F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::CreateValueTypeInternal(google::protobuf::Arena **a1, std::string *a2)
{
  google::protobuf::Arena *v4;
  std::string *Aligned;
  google::protobuf::Arena *v6;
  google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 72);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)&Aligned[1]);
    google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_1E064F56C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10B2C40CC7398DALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x1E0DE4EE8], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (google::protobuf::Arena *)a1[5];
  v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x1E0DE4EE8], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_1E064FADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_1E064FB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)&this[1]);
  return this;
}

void sub_1E064FBA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>);
  return result;
}

uint64_t MIL::Text::Parser::Program::Program(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  MIL::Scanner::Token *v7;

  v6 = *a2;
  *(_QWORD *)a1 = off_1EA99DE88;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)MIL::Scanner::Token::GetLocation(v7);
  *(_QWORD *)a1 = &off_1EA99C250;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  return a1;
}

const MIL::ParserOptions *MIL::Text::Parser::Program::Parse@<X0>(MIL::Text::Parser::Program *this@<X0>, _anonymous_namespace_::IRProgramImpl **a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _anonymous_namespace_::IRProgramImpl *v32;
  uint64_t Attribute;
  uint64_t v34;
  MIL::Attributes::BlobFileMutabilityInfo *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  MIL::Attributes::BlobFileMutabilityInfo *v43;
  uint64_t v44;
  const MIL::IRProgram *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  const MIL::ParserOptions *result;
  void *exception;
  void (**v54)(MIL::ValidationResult *__hidden);
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  _BYTE __p[24];
  __int128 v60;
  uint64_t v61;
  int v62;
  MIL::Attributes::BlobFileMutabilityInfo *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  _BYTE v68[32];
  _BYTE v69[40];
  _BYTE v70[32];
  uint64_t v71[5];
  _BYTE v72[32];
  uint64_t v73;
  std::__shared_weak_count *v74;
  const MIL::ParserOptions *v75;
  _BYTE v76[32];
  _BYTE v77[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 16, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v77);
  v6 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v76);
  v8 = MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Parse<MIL::Text::Parser::SYNTAX_VERSION>((__n128 *)this);
  v9 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  (*(void (**)(const MIL::ParserOptions **__return_ptr))(*(_QWORD *)v9 + 16))(&v75);
  (*(void (**)(const MIL::ParserOptions *, uint64_t))(*(_QWORD *)v75 + 96))(v75, v8);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions &,void>(v75, &v73);
  v10 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v11);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v72);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::AttributesMap>((uint64_t)this, v73, (uint64_t)v71);
  v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 7, v13);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v70);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::FunctionMap>((uint64_t)this, v73, (uint64_t)v69);
  v14 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 8, v15);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v68);
  v16 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 56, v17);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v67);
  v18 = *((_QWORD *)this + 4);
  v19 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
  MIL::TextLocationFromScannerLocation(v18, v20, &v66);
  v21 = *((_QWORD *)this + 6);
  *(_QWORD *)&v65 = *((_QWORD *)this + 5);
  *((_QWORD *)&v65 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v64 = v66;
  if (*((_QWORD *)&v66 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  MIL::IRProgram::Make(&v65, &v64, (uint64_t)v69, v71, a2);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "BlobFileMutabilityInfo");
  Attribute = MIL::IRObject::TryGetAttribute((uint64_t)v32, __p);
  v34 = Attribute;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v34)
      goto LABEL_31;
  }
  else if (!Attribute)
  {
    goto LABEL_31;
  }
  MIL::Attributes::BlobFileMutabilityInfo::Make(*a2, &v63);
  v35 = v63;
  v36 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
  *(_OWORD *)__p = v66;
  if (*((_QWORD *)&v66 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  MIL::Attributes::BlobFileMutabilityInfo::ApplyModelPath((uint64_t)v35, v37, __p);
  v40 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v41 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  MIL::Attributes::BlobFileMutabilityInfo::Replace(v63, *a2);
  v43 = v63;
  v63 = 0;
  if (v43)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v43);
    MEMORY[0x1E0C023A0]();
  }
LABEL_31:
  v44 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 56))(v44))
  {
    MIL::IRProgramValidator::Validate(*a2, v45, (MIL::ValidationResult *)__p);
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v55 = *(_OWORD *)&__p[8];
      *(_OWORD *)&__p[8] = 0uLL;
      v56 = v60;
      v57 = v61;
      v60 = 0uLL;
      v61 = 0;
      v54 = &off_1EA99F170;
      v58 = v62;
      MIL::ValidationError::ValidationError(exception, &v54);
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v69);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v71);
  v49 = v74;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  result = v75;
  v75 = 0;
  if (result)
    return (const MIL::ParserOptions *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E065011C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a9);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  v47 = *v44;
  *v44 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a44);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v45 - 192);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v45 - 120);
  v48 = *(_QWORD *)(v45 - 104);
  *(_QWORD *)(v45 - 104) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Parse<MIL::Text::Parser::SYNTAX_VERSION>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99DD78;
  return MIL::Text::Parser::SYNTAX_VERSION::Parse((MIL::Text::Parser::SYNTAX_VERSION *)v3);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::AttributesMap>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  MIL::Scanner::Token *v6;
  _QWORD v8[5];

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v8[1] = v5;
  v8[2] = v4;
  v8[3] = a2;
  v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v8[4] = *(_QWORD *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &off_1EA99D118;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::AttributesMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt((uint64_t)v8, a3);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::FunctionMap>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  MIL::Scanner::Token *v6;
  _QWORD v8[5];

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v8[1] = v5;
  v8[2] = v4;
  v8[3] = a2;
  v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v8[4] = *(_QWORD *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &off_1EA99C300;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt((uint64_t)v8, a3);
}

void MIL::TextLocationFromScannerLocation(unint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  uint64_t v10;

  v3 = a1;
  v5 = HIDWORD(a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MIL::TextFileLocation::Make((uint64_t)&__p, v3, v5, &v10);
  v6 = v10;
  *a3 = v10;
  if (v6)
  {
    v7 = (_QWORD *)operator new();
    v8 = v10;
    *v7 = &unk_1EA99DE28;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v8;
  }
  else
  {
    v7 = 0;
  }
  a3[1] = v7;
  v10 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E0650428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::Function::Parse(MIL::Text::Parser::Function *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  MIL::Opsets::Train::ios16Train::ios16_trainOpset *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _anonymous_namespace_::IRFunctionImpl *v31;
  _anonymous_namespace_::IRFunctionImpl *v32;
  _anonymous_namespace_::IRFunctionImpl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *exception;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  std::string v46;
  _anonymous_namespace_::IRFunctionImpl *v47;
  std::string __p;
  __int128 v49;
  _anonymous_namespace_::IRFunctionImpl *v50;
  __int128 v51;
  char v52[32];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  std::string::size_type v56;
  __int128 v57;
  uint64_t Opset;
  uint64_t v59[5];
  char v60[32];
  _QWORD v61[3];
  char v62[32];
  char v63[32];
  std::string v64;
  char v65[32];
  std::string v66;
  char v67[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 17, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v67);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v66);
  v6 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v65);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v64);
  v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v9);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v63);
  v10 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v11);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v62);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingMap>((__n128 *)this, v61);
  v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v13);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v60);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v59);
  v14 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  Opset = 0;
  v16 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)*((_QWORD *)this + 1);
  if (v15)
  {
    Opset = (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, std::string *))(*(_QWORD *)v16 + 16))(v16, &v64);
  }
  else
  {
    if (!Opset)
    {
      v38 = *((_QWORD *)this + 4);
      v39 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
      MIL::TextLocationFromScannerLocation(v38, v40, &v53);
      exception = __cxa_allocate_exception(0x48uLL);
      v57 = v53;
      if (*((_QWORD *)&v53 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      std::operator+<char>();
      v44 = std::string::append(&v46, "'.");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v56 = v44->__r_.__value_.__r.__words[2];
      v55 = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)exception, &v57, (uint64_t)&v55, 108);
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Block,MIL::IROpset const*&>((__n128 *)this, &Opset, &v54);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::OpsetBlockMap>((__n128 *)this, &v53);
  if (v54)
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string&,std::unique_ptr<MIL::IRBlock>>((uint64_t **)&v53, (const void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&v64, &v54);
  if (v15)
  {
    v17 = (uint64_t *)v53;
    if ((__int128 *)v53 != (__int128 *)((char *)&v53 + 8))
    {
      do
      {
        if ((*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v17 + 4))
        {
          v18 = (uint64_t *)v17[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (uint64_t *)v17[2];
              v20 = *v19 == (_QWORD)v17;
              v17 = v19;
            }
            while (!v20);
          }
        }
        else
        {
          v19 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer((uint64_t **)&v53, v17);
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(v17 + 4));
          operator delete(v17);
        }
        v17 = v19;
      }
      while (v19 != (uint64_t *)((char *)&v53 + 8));
    }
  }
  v21 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 11, v22);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v52);
  v23 = *((_QWORD *)this + 4);
  v24 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  MIL::TextLocationFromScannerLocation(v23, v25, &v51);
  v49 = v51;
  if (*((_QWORD *)&v51 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  __p = v64;
  memset(&v64, 0, sizeof(v64));
  MIL::IRFunction::Make(&v49, v61, (uint64_t)&__p, &v53, v59, &v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v46 = v66;
  v31 = v50;
  v50 = 0;
  v47 = v31;
  std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string,std::unique_ptr<MIL::IRFunction>,0>(a2, (__int128 *)&v46);
  v32 = v47;
  v47 = 0;
  if (v32)
    (*(void (**)(_anonymous_namespace_::IRFunctionImpl *))(*(_QWORD *)v32 + 8))(v32);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v33 = v50;
  v50 = 0;
  if (v33)
    (*(void (**)(_anonymous_namespace_::IRFunctionImpl *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy((uint64_t)&v53, *((_QWORD **)&v53 + 1));
  v37 = v54;
  v54 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v59);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v61, (char *)v61[1]);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
}

void sub_1E065099C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,char *a54)
{
  void *v54;
  char v55;
  uint64_t v56;

  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  if ((v55 & 1) != 0)
    __cxa_free_exception(v54);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a44);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a53, a54);
  if (*(char *)(v56 - 153) < 0)
    operator delete(*(void **)(v56 - 176));
  if (*(char *)(v56 - 97) < 0)
    operator delete(*(void **)(v56 - 120));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(__n128 *a1@<X0>, std::string *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99DDD0;
  MIL::Text::Parser::ID::Parse((MIL::Text::Parser::ID *)v4, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingMap>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D1C8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::ParseOpt((uint64_t)v5, a2);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D118;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::AttributesMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt((uint64_t)v5, a2);
}

uint64_t `anonymous namespace'::RegisterOrTryGetOpset(MIL::Opsets::Train::ios16Train::ios16_trainOpset *a1, uint64_t *a2)
{
  uint64_t result;
  MIL::MILContext *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *v18;
  int v22;
  int v23;

  result = (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *))(*(_QWORD *)a1 + 16))(a1);
  if (!result)
  {
    if (*((char *)a2 + 23) < 0)
    {
      v9 = a2[1];
      if (v9 != 5)
      {
        if (v9 == 11)
        {
          if (*(_QWORD *)*a2 != 0x72745F3731736F69 || *(_QWORD *)(*a2 + 3) != 0x6E696172745F3731)
          {
            v8 = (uint64_t *)*a2;
LABEL_18:
            v11 = *v8;
            v12 = *(uint64_t *)((char *)v8 + 3);
            if (v11 != 0x72745F3631736F69 || v12 != 0x6E696172745F3631)
              return 0;
            MIL::Opsets::Train::ios16Train::ios16_trainOpset::Register(a1, v5);
            return (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2);
          }
LABEL_60:
          MIL::Opsets::Train::ios17Train::ios17_trainOpset::Register(a1, v5);
          return (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2);
        }
        return 0;
      }
      v18 = (int *)*a2;
      if (*(_DWORD *)*a2 != 829648745 || *(_BYTE *)(*a2 + 4) != 56)
      {
        if (*v18 != 829648745 || *((_BYTE *)v18 + 4) != 55)
        {
          if (*v18 != 829648745 || *((_BYTE *)v18 + 4) != 54)
          {
            v22 = *v18;
            v23 = *((unsigned __int8 *)v18 + 4);
            if (v22 != 829648745 || v23 != 53)
              return 0;
LABEL_59:
            MIL::Opsets::Common::ios15::ios15Opset::Register(a1, v5);
            return (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2);
          }
LABEL_63:
          MIL::Opsets::Common::ios16::ios16Opset::Register(a1, v5);
          return (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2);
        }
LABEL_62:
        MIL::Opsets::Common::ios17::ios17Opset::Register(a1, v5);
        return (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2);
      }
    }
    else
    {
      v6 = *((unsigned __int8 *)a2 + 23);
      if (v6 != 5)
      {
        if (v6 == 11)
        {
          v7 = *a2 == 0x72745F3731736F69 && *(uint64_t *)((char *)a2 + 3) == 0x6E696172745F3731;
          v8 = a2;
          if (!v7)
            goto LABEL_18;
          goto LABEL_60;
        }
        return 0;
      }
      if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 56)
      {
        if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 55)
        {
          if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 54)
          {
            if (*(_DWORD *)a2 != 829648745 || *((_BYTE *)a2 + 4) != 53)
              return 0;
            goto LABEL_59;
          }
          goto LABEL_63;
        }
        goto LABEL_62;
      }
    }
    MIL::Opsets::Common::ios18::ios18Opset::Register(a1, v5);
    return (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2);
  }
  return result;
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Block,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C408;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::OpsetBlockMap>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C3B0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt((uint64_t)v5, a2);
}

void MIL::Text::Parser::FunctionMap::Parse(MIL::Text::Parser::FunctionMap *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  char v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t Options;
  uint64_t v15;
  void *exception;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v19[24];
  __int128 v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::Function>((__n128 *)this, (uint64_t)&v23);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(a2, (unsigned __int8 *)&v23, (__int128 *)&v23);
  v4 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  do
  {
    while (1)
    {
      v7.n128_f64[0] = MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Function>((__n128 *)this, (uint64_t)&v23);
      v8 = v24;
      if (v24)
      {
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v22, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
        else
          v22 = v23;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(a2, (unsigned __int8 *)&v23, (__int128 *)&v23);
        if (!v9)
        {
          v13 = *((_QWORD *)this + 4);
          Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
          MIL::TextLocationFromScannerLocation(v13, v15, &v21);
          exception = __cxa_allocate_exception(0x48uLL);
          v20 = v21;
          if (*((_QWORD *)&v21 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          std::operator+<char>();
          MIL::ParseError::ParseError((uint64_t)exception, &v20, (uint64_t)v19, 106);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
      }
      v10 = v25;
      if (v25)
      {
        v11 = (unint64_t *)&v25->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v7);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (!v8)
        return;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  while (v8);
}

void sub_1E065117C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v26 - 72);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v25);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::Function>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99C2A8;
  MIL::Text::Parser::Function::Parse((MIL::Text::Parser::Function *)v4, a2);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Function>@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C2A8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt((uint64_t)v5, a2);
}

void MIL::Text::Parser::OpsetBlock::Parse(MIL::Text::Parser::OpsetBlock *this@<X0>, std::string *a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *exception;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  __int128 v20;
  std::string::size_type v21;
  __int128 v22;
  __int128 v23;
  const MIL::IROpset *Opset;
  _BYTE v25[32];
  std::string v26;
  _BYTE v27[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v26);
  v6 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v25);
  if (!Opset)
  {
    v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8) & 1) == 0)
    {
      v11 = *((_QWORD *)this + 4);
      v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      MIL::TextLocationFromScannerLocation(v11, v13, &v23);
      exception = __cxa_allocate_exception(0x48uLL);
      v22 = v23;
      if (*((_QWORD *)&v23 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      std::operator+<char>();
      v17 = std::string::append(&v19, "'.");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v21 = v17->__r_.__value_.__r.__words[2];
      v20 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)exception, &v22, (uint64_t)&v20, 108);
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::Block,MIL::IROpset const*&>((__n128 *)this, &Opset, (_anonymous_namespace_::IRBlockImpl **)&v19);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
    a2[1].__r_.__value_.__r.__words[0] = v19.__r_.__value_.__r.__words[0];
    if (v10 < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    v9 = v19.__r_.__value_.__r.__words[0];
    a2->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
    a2[1].__r_.__value_.__r.__words[0] = v9;
  }
}

void sub_1E06514C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  void *v25;
  char v26;
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if ((v26 & 1) != 0)
    __cxa_free_exception(v25);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (*(char *)(v27 - 65) < 0)
    operator delete(*(void **)(v27 - 88));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::Block,MIL::IROpset const*&>(__n128 *a1@<X0>, const MIL::IROpset **a2@<X1>, _anonymous_namespace_::IRBlockImpl **a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v6[2];
  __n128 v7;
  uint64_t v8;

  v6[1] = a1->n128_u64[1];
  v7 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  v8 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v6[0] = &off_1EA99C408;
  MIL::Text::Parser::Block::Parse((MIL::Text::Parser::Block *)v6, *a2, a3);
}

void MIL::Text::Parser::OpsetBlockMap::Parse(MIL::Text::Parser::OpsetBlockMap *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Options;
  uint64_t v10;
  void *exception;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v14[24];
  __int128 v15;
  __int128 v16;
  std::string v17;
  std::string v18;
  uint64_t v19;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::OpsetBlock>((__n128 *)this, &v18);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>((uint64_t **)a2, (const void **)&v18.__r_.__value_.__l.__data_, (__int128 *)&v18);
  v4 = v19;
  v19 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  do
  {
    while (1)
    {
      MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt<MIL::Text::Parser::OpsetBlock>((__n128 *)this, &v18);
      v5 = v19;
      if (v19)
      {
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        else
          v17 = v18;
        std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>((uint64_t **)a2, (const void **)&v18.__r_.__value_.__l.__data_, (__int128 *)&v18);
        if (!v6)
        {
          v8 = *((_QWORD *)this + 4);
          Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
          MIL::TextLocationFromScannerLocation(v8, v10, &v16);
          exception = __cxa_allocate_exception(0x48uLL);
          v15 = v16;
          if (*((_QWORD *)&v16 + 1))
          {
            v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
          }
          std::operator+<char>();
          MIL::ParseError::ParseError((uint64_t)exception, &v15, (uint64_t)v14, 102);
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v7 = v19;
        v19 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      else
      {
        v19 = 0;
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (!v5)
        return;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  while (v5);
}

void sub_1E06517A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v28 = *(_QWORD *)(v26 - 40);
  *(_QWORD *)(v26 - 40) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v25, *(_QWORD **)(v25 + 8));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::OpsetBlock>(__n128 *a1@<X0>, std::string *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99C358;
  MIL::Text::Parser::OpsetBlock::Parse((MIL::Text::Parser::OpsetBlock *)v4, a2);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt<MIL::Text::Parser::OpsetBlock>@<D0>(__n128 *a1@<X0>, _OWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C358;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt((uint64_t)v5, a2);
}

void MIL::Text::Parser::Block::Parse(MIL::Text::Parser::Block *this@<X0>, const MIL::IROpset *a2@<X1>, _anonymous_namespace_::IRBlockImpl **a3@<X8>)
{
  uint64_t Options;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void ***v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[32];
  void **v30[3];
  _BYTE v31[32];
  _BYTE v32[32];
  _BYTE v33[32];
  _QWORD v34[3];
  _BYTE v35[32];
  uint64_t v36[5];
  _QWORD v37[3];
  const MIL::IROpset *v38;

  v38 = a2;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockInputDecls>((__n128 *)this, v37);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v36);
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 7, v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v35);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::OpList,MIL::IROpset const*&>((__n128 *)this, (uint64_t *)&v38, v34);
  v7 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 8, v8);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v33);
  v9 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 12, v10);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
  v11 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v12);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v31);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDList>((__n128 *)this, v30);
  v13 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v14);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v29);
  v15 = *((_QWORD *)this + 4);
  v16 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  MIL::TextLocationFromScannerLocation(v15, v17, &v28);
  v27 = v28;
  if (*((_QWORD *)&v28 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  MIL::IRBlock::Make(&v27, (uint64_t)v37, (uint64_t)v30, (uint64_t)v34, v36, a3);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_QWORD *)&v28 = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v30[0] = (void **)v34;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v30);
  v26 = (void ***)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  v36[0] = (uint64_t)v37;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v26);
}

void sub_1E0651B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a18 = (void **)(v18 - 160);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a18);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v18 - 104);
  *(_QWORD *)(v18 - 104) = v18 - 64;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 104));
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockInputDecls>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C4B8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt((uint64_t)v5, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::OpList,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C568;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDList>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D278;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDList,std::vector<std::string>>::ParseOpt((uint64_t)v5, a2);
}

uint64_t *MIL::Text::Parser::BlockList::Parse@<X0>(__n128 *this@<X0>, const MIL::IROpset *a2@<X1>, char **a3@<X8>)
{
  _anonymous_namespace_::IRBlockImpl *v5;
  _anonymous_namespace_::IRBlockImpl *v6;
  _anonymous_namespace_::IRBlockImpl *v7;
  unint64_t v8;
  _anonymous_namespace_::IRBlockImpl **v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _anonymous_namespace_::IRBlockImpl **v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  char *v23;
  _anonymous_namespace_::IRBlockImpl *v24;
  uint64_t *result;
  _anonymous_namespace_::IRBlockImpl *v26;
  _anonymous_namespace_::IRBlockImpl *v27;
  _anonymous_namespace_::IRBlockImpl *v28;
  _anonymous_namespace_::IRBlockImpl *v29;
  unint64_t v30;
  _anonymous_namespace_::IRBlockImpl **v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _anonymous_namespace_::IRBlockImpl **v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  _anonymous_namespace_::IRBlockImpl *v46;
  _anonymous_namespace_::IRBlockImpl *v47;
  _anonymous_namespace_::IRBlockImpl *v48;
  const MIL::IROpset *v49;
  uint64_t v50;
  int64x2_t v51;
  char *v52;
  _QWORD *v53;

  v49 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::Block,MIL::IROpset const*&>(this, &v49, &v46);
  v5 = v46;
  v47 = v46;
  if (v46)
  {
    v6 = (_anonymous_namespace_::IRBlockImpl *)operator new();
    v7 = v46;
    *(_QWORD *)v6 = &unk_1EA992F48;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = v7;
  }
  else
  {
    v6 = 0;
  }
  v48 = v6;
  v46 = 0;
  v8 = (unint64_t)a3[2];
  v9 = (_anonymous_namespace_::IRBlockImpl **)a3[1];
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - *a3) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)*a3;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v53 = a3 + 2;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a3 + 2), v14);
    v17 = (_anonymous_namespace_::IRBlockImpl **)&v15[16 * v11];
    *v17 = v5;
    v17[1] = v6;
    v47 = 0;
    v48 = 0;
    v19 = *a3;
    v18 = a3[1];
    if (v18 == *a3)
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
      }
      while (v18 != v19);
      v22 = *(int64x2_t *)a3;
    }
    v10 = (char *)(v17 + 2);
    *a3 = v20;
    a3[1] = (char *)(v17 + 2);
    v51 = v22;
    v23 = a3[2];
    a3[2] = &v15[16 * v16];
    v52 = v23;
    v50 = v22.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v50);
  }
  else
  {
    *v9 = v5;
    v9[1] = v6;
    v10 = (char *)(v9 + 2);
  }
  a3[1] = v10;
  v24 = v46;
  v46 = 0;
  if (v24)
LABEL_19:
    (*(void (**)(_anonymous_namespace_::IRBlockImpl *))(*(_QWORD *)v24 + 8))(v24);
  while (1)
  {
    result = MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Block,MIL::IROpset const*&>(this, (uint64_t *)&v49, &v46);
    v26 = v46;
    if (!v46)
      return result;
    v47 = v46;
    v27 = (_anonymous_namespace_::IRBlockImpl *)operator new();
    v28 = v27;
    v29 = v46;
    *(_QWORD *)v27 = &unk_1EA992F48;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
    *((_QWORD *)v27 + 3) = v29;
    v48 = v27;
    v46 = 0;
    v31 = (_anonymous_namespace_::IRBlockImpl **)a3[1];
    v30 = (unint64_t)a3[2];
    if ((unint64_t)v31 >= v30)
    {
      v33 = ((char *)v31 - *a3) >> 4;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v35 = v30 - (_QWORD)*a3;
      if (v35 >> 3 > v34)
        v34 = v35 >> 3;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      v53 = a3 + 2;
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a3 + 2), v36);
      v39 = (_anonymous_namespace_::IRBlockImpl **)&v37[16 * v33];
      *v39 = v26;
      v39[1] = v28;
      v41 = *a3;
      v40 = a3[1];
      if (v40 == *a3)
      {
        v44 = vdupq_n_s64((unint64_t)v40);
        v42 = &v37[16 * v33];
      }
      else
      {
        v42 = &v37[16 * v33];
        do
        {
          v43 = *((_OWORD *)v40 - 1);
          v40 -= 16;
          *((_OWORD *)v42 - 1) = v43;
          v42 -= 16;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v40 + 1) = 0;
        }
        while (v40 != v41);
        v44 = *(int64x2_t *)a3;
      }
      v32 = (char *)(v39 + 2);
      *a3 = v42;
      a3[1] = (char *)(v39 + 2);
      v51 = v44;
      v45 = a3[2];
      a3[2] = &v37[16 * v38];
      v52 = v45;
      v50 = v44.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v50);
    }
    else
    {
      *v31 = v26;
      v31[1] = v27;
      v32 = (char *)(v31 + 2);
    }
    a3[1] = v32;
    v24 = v46;
    v46 = 0;
    if (v24)
      goto LABEL_19;
  }
}

void sub_1E0652028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::BlockInputDecls::Parse(MIL::Text::Parser::BlockInputDecls *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _BYTE v9[40];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingList>((__n128 *)this, a2);
  v6 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v8);
}

void sub_1E0652114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingList>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D220;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingList,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt((uint64_t)v5, a2);
}

void MIL::Text::Parser::Op::Parse(MIL::Text::Parser::Op *this@<X0>, const MIL::IROpset *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  uint64_t Options;
  uint64_t v7;
  MIL::Scanner::Token *v8;
  int Type;
  uint64_t v10;
  uint64_t Opset;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type size;
  std::string::size_type v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::string::size_type v48;
  _QWORD *v49;
  std::string::size_type v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t Name;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *exception;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string *v89;
  __int128 v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  std::string *v94;
  __int128 v95;
  void *v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  std::string v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[32];
  std::string v104;
  _BYTE v105[32];
  _BYTE v106[32];
  std::string::size_type v107;
  std::__shared_weak_count *v108;
  _QWORD v109[3];
  __int128 v110;
  __int128 v111;
  std::string::size_type v112;
  __int128 v113;
  __int128 v114;
  std::string::size_type v115;
  __int128 v116;
  std::string __p;
  _BYTE v118[32];
  std::string v119;
  const MIL::IROpset *v120;
  std::string v121;
  std::string v122;
  std::string v123;
  __int128 v124;
  __int128 v125;
  std::string v126;
  std::string v127;
  __int128 v128;

  v120 = a2;
  memset(&v119, 0, sizeof(v119));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v5) != 54)
  {
    MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::Parse<MIL::Text::Parser::IDTypeBindingList>((__n128 *)this, (MIL::IRNamedValueType ***)&v104);
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((void **)&v119.__r_.__value_.__l.__data_);
    v119 = v104;
    memset(&v104, 0, sizeof(v104));
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v7);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v118);
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
  v8 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  Type = MIL::Scanner::Token::GetType(v8);
  if (Type == 1)
  {
    (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v104);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v104);
    v10 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10) <= 2)
    {
      v77 = *((_QWORD *)this + 4);
      v78 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 24))(v78);
      MIL::TextLocationFromScannerLocation(v77, v79, &v126);
      exception = __cxa_allocate_exception(0x48uLL);
      v128 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
      if (v126.__r_.__value_.__l.__size_)
      {
        v81 = (unint64_t *)(v126.__r_.__value_.__l.__size_ + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      std::string::basic_string[abi:ne180100]<0>(&v127, "Opset 1.2+ required for specialized opsets");
      MIL::ParseError::ParseError((uint64_t)exception, &v128, (uint64_t)&v127, 107);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v126);
    if (!Opset)
    {
      v83 = *((_QWORD *)this + 4);
      v84 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
      MIL::TextLocationFromScannerLocation(v83, v85, &v125);
      v86 = __cxa_allocate_exception(0x48uLL);
      v124 = v125;
      if (*((_QWORD *)&v125 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      std::operator+<char>();
      v89 = std::string::append(&v122, "'.");
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)v86, &v124, (uint64_t)&v123, 108);
    }
    v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v13);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v121);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = 0uLL;
    v14 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Opset + 16))(Opset);
    v16 = v15;
  }
  else
  {
    Opset = 0;
    v16 = 0;
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = 0uLL;
    v14 = "";
  }
  v17 = *((_QWORD *)this + 4);
  v18 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  MIL::TextLocationFromScannerLocation(v17, v19, &v128);
  if (Type == 1)
  {
    MIL::IROpset::TryGetOperatorSharedPtr(Opset, (unsigned __int8 *)&__p, &v104);
    size = v104.__r_.__value_.__l.__size_;
    v21 = v104.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
    if (!v104.__r_.__value_.__r.__words[0])
    {
      std::string::__init_with_size[abi:ne180100]<char *,char *>(&v104, v14, &v14[v16], v16);
      v22 = __cxa_allocate_exception(0x48uLL);
      v116 = v128;
      if (*((_QWORD *)&v128 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      std::operator+<char>();
      v25 = std::string::append(&v126, "'.  Expected in opset ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v104;
      else
        v27 = (std::string *)v104.__r_.__value_.__r.__words[0];
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        v28 = v104.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v127, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v121.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v121, ", not found.");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v115 = v31->__r_.__value_.__r.__words[2];
      v114 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)v22, &v116, (uint64_t)&v114, 107);
    }
LABEL_24:
    v33 = *((_QWORD *)this + 3);
    v107 = v21;
    v108 = (std::__shared_weak_count *)size;
    if (size)
    {
      v34 = (unint64_t *)(size + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    goto LABEL_30;
  }
  if (v120)
  {
    MIL::IROpset::TryGetOperatorSharedPtr((uint64_t)v120, (unsigned __int8 *)&__p, &v104);
    size = v104.__r_.__value_.__l.__size_;
    v21 = v104.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
    if (!v104.__r_.__value_.__r.__words[0])
    {
      v91 = __cxa_allocate_exception(0x48uLL);
      v113 = v128;
      if (*((_QWORD *)&v128 + 1))
      {
        v92 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      std::operator+<char>();
      v94 = std::string::append(&v104, "'.");
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v112 = v94->__r_.__value_.__r.__words[2];
      v111 = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)v91, &v113, (uint64_t)&v111, 107);
    }
    goto LABEL_24;
  }
  v36 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 72))(v36))
  {
    v96 = __cxa_allocate_exception(0x48uLL);
    v110 = v128;
    if (*((_QWORD *)&v128 + 1))
    {
      v97 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    std::string::basic_string[abi:ne180100]<0>(v109, "No opset was provided and unregistered specializations are not ignored.");
    MIL::ParseError::ParseError((uint64_t)v96, &v110, (uint64_t)v109, 108);
  }
  v33 = *((_QWORD *)this + 3);
  v107 = 0;
  v108 = 0;
LABEL_30:
  MIL::ParserContext::SetCurrentOperator(v33, (uint64_t *)&v107);
  v37 = v108;
  if (v108)
  {
    p_shared_owners = (unint64_t *)&v108->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v41);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v106);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDArgumentBindingMap>((__n128 *)this, &v121);
  v42 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v43);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v105);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)&v104);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockList,MIL::IROpset const*&>((__n128 *)this, (uint64_t *)&v120, &v127);
  v44 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 11, v45);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v103);
  v102 = v128;
  if (*((_QWORD *)&v128 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v101 = *(_OWORD *)&v122.__r_.__value_.__l.__data_;
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = 0uLL;
  MIL::IROperation::Make(&v102, &v101, &v121, (uint64_t)&v119, (uint64_t *)&v104, (uint64_t)&v127, Opset, (_anonymous_namespace_::IROperationImpl **)&v126);
  v48 = v126.__r_.__value_.__r.__words[0];
  *a3 = v126.__r_.__value_.__r.__words[0];
  if (v48)
  {
    v49 = (_QWORD *)operator new();
    v50 = v126.__r_.__value_.__r.__words[0];
    *v49 = &unk_1EA992FA8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  a3[1] = v49;
  v126.__r_.__value_.__r.__words[0] = 0;
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *a3;
  v58 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
  v59 = v58;
  if (v58 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 104))(v58))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v59 + 248))(&v126, v59, v57);
    if (v126.__r_.__value_.__l.__size_ != v126.__r_.__value_.__r.__words[0])
    {
      v60 = 0;
      do
      {
        v61 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 176))(v57);
        Name = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*v61 + 16 * v60));
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
        }
        else
        {
          v63 = *(_OWORD *)Name;
          v123.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v63;
        }
        v64 = *((_QWORD *)this + 3);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v100, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
        else
          v100 = v123;
        v65 = *(_OWORD *)(v126.__r_.__value_.__r.__words[0] + 16 * v60);
        v99 = v65;
        if (*((_QWORD *)&v65 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        MIL::ParserContext::SetConstexprVariableValue(v64, (__int128 *)&v100, (uint64_t *)&v99);
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
        if (*((_QWORD *)&v99 + 1))
        {
          v69 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          v57 = *a3;
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v123.__r_.__value_.__l.__data_);
        ++v60;
      }
      while (v60 < (uint64_t)(v126.__r_.__value_.__l.__size_ - v126.__r_.__value_.__r.__words[0]) >> 4);
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  }
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v104);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v121, (_QWORD *)v121.__r_.__value_.__l.__size_);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = (std::__shared_weak_count *)v122.__r_.__value_.__l.__size_;
  if (v122.__r_.__value_.__l.__size_)
  {
    v75 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
}

void sub_1E0652BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a70;
  void *v70;
  char v71;
  uint64_t v72;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v72 - 233) < 0)
    operator delete(*(void **)(v72 - 256));
  if (*(char *)(v72 - 89) < 0)
    operator delete(*(void **)(v72 - 112));
  if (*(char *)(v72 - 113) < 0)
    operator delete(*(void **)(v72 - 136));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  if ((v71 & 1) != 0)
    __cxa_free_exception(v70);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v72 - 80);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v72 - 216);
  if (a65 < 0)
    operator delete(a60);
  *(_QWORD *)(v72 - 216) = &a70;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 216));
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::Parse<MIL::Text::Parser::IDTypeBindingList>@<X0>(__n128 *a1@<X0>, MIL::IRNamedValueType ***a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D220;
  return MIL::Text::Parser::IDTypeBindingList::Parse((MIL::Text::Parser::IDTypeBindingList *)v5, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDArgumentBindingMap>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D010;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::ParseOpt((uint64_t)v5, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockList,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C460;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::BlockList,std::vector<std::shared_ptr<MIL::IRBlock>>,MIL::IROpset const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

void MIL::Text::Parser::OpList::Parse(__n128 *this@<X0>, const MIL::IROpset *a2@<X1>, char **a3@<X8>)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  const MIL::IROpset *v45;
  uint64_t v46;
  int64x2_t v47;
  char *v48;
  _QWORD *v49;

  v45 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::Parse<MIL::Text::Parser::Op,MIL::IROpset const*&>(this, &v45, &v44);
  v5 = (unint64_t)a3[2];
  v6 = a3[1];
  if ((unint64_t)v6 >= v5)
  {
    v7 = (v6 - *a3) >> 4;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)*a3;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v49 = a3 + 2;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a3 + 2), v10);
    v13 = &v11[16 * v7];
    *(_OWORD *)v13 = v44;
    v44 = 0uLL;
    v15 = *a3;
    v14 = a3[1];
    if (v14 == *a3)
    {
      v18 = vdupq_n_s64((unint64_t)v14);
      v16 = &v11[16 * v7];
    }
    else
    {
      v16 = &v11[16 * v7];
      do
      {
        v17 = *((_OWORD *)v14 - 1);
        v14 -= 16;
        *((_OWORD *)v16 - 1) = v17;
        v16 -= 16;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
      }
      while (v14 != v15);
      v18 = *(int64x2_t *)a3;
    }
    v19 = v13 + 16;
    *a3 = v16;
    a3[1] = v13 + 16;
    v47 = v18;
    v20 = a3[2];
    a3[2] = &v11[16 * v12];
    v48 = v20;
    v46 = v18.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v46);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    a3[1] = v19;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    *(_OWORD *)v6 = v44;
    a3[1] = v6 + 16;
  }
  do
  {
    while (1)
    {
      MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::Op,MIL::IROpset const*&>(this, (uint64_t *)&v45, &v44);
      v24 = v44;
      if ((_QWORD)v44)
      {
        v25 = a3[1];
        v26 = (unint64_t)a3[2];
        if ((unint64_t)v25 >= v26)
        {
          v28 = (v25 - *a3) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v30 = v26 - (_QWORD)*a3;
          if (v30 >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          v49 = a3 + 2;
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a3 + 2), v31);
          v34 = &v32[16 * v28];
          *(_OWORD *)v34 = v44;
          v44 = 0uLL;
          v36 = *a3;
          v35 = a3[1];
          if (v35 == *a3)
          {
            v39 = vdupq_n_s64((unint64_t)v35);
            v37 = &v32[16 * v28];
          }
          else
          {
            v37 = &v32[16 * v28];
            do
            {
              v38 = *((_OWORD *)v35 - 1);
              v35 -= 16;
              *((_OWORD *)v37 - 1) = v38;
              v37 -= 16;
              *(_QWORD *)v35 = 0;
              *((_QWORD *)v35 + 1) = 0;
            }
            while (v35 != v36);
            v39 = *(int64x2_t *)a3;
          }
          v27 = v34 + 16;
          *a3 = v37;
          a3[1] = v34 + 16;
          v47 = v39;
          v40 = a3[2];
          a3[2] = &v32[16 * v33];
          v48 = v40;
          v46 = v39.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v46);
        }
        else
        {
          *(_OWORD *)v25 = v44;
          v44 = 0uLL;
          v27 = v25 + 16;
        }
        a3[1] = v27;
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
          break;
      }
      if (!v24)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  while (v24);
}

void sub_1E0653334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::Parse<MIL::Text::Parser::Op,MIL::IROpset const*&>(__n128 *a1@<X0>, const MIL::IROpset **a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v6[2];
  __n128 v7;
  uint64_t v8;

  v6[1] = a1->n128_u64[1];
  v7 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  v8 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v6[0] = &off_1EA99C510;
  MIL::Text::Parser::Op::Parse((MIL::Text::Parser::Op *)v6, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::Op,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C510;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

_QWORD *MIL::Text::Parser::Value::Parse@<X0>(MIL::Text::Parser::Value *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE v13[32];
  const MIL::IRValueType *v14;

  v14 = (const MIL::IRValueType *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>((__n128 *)this);
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v13);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>((__n128 *)this, &v14, &v12);
  v6 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v11);
  v8 = v12;
  *a2 = v12;
  if (v8)
  {
    result = (_QWORD *)operator new();
    v10 = v12;
    *result = &unk_1EA992BC8;
    result[1] = 0;
    result[2] = 0;
    result[3] = v10;
  }
  else
  {
    result = 0;
  }
  a2[1] = result;
  return result;
}

void sub_1E0653530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99C988;
  return MIL::Text::Parser::Type::Parse((MIL::Text::Parser::Type *)v3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>@<X0>(__n128 *a1@<X0>, const MIL::IRValueType **a2@<X1>, uint64_t **a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C670;
  return MIL::Text::Parser::ValueLiteral::Parse((MIL::Text::Parser::ValueLiteral *)v7, *a2, a3);
}

_QWORD *MIL::Text::Parser::ValueAssign::Parse@<X0>(MIL::Text::Parser::ValueAssign *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v7;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v7);
  return MIL::Text::Parser::Rule<MIL::Text::Parser::ValueAssign,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Value>((__n128 *)this, a2);
}

_QWORD *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueAssign,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Value>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C5C0;
  return MIL::Text::Parser::Value::Parse((MIL::Text::Parser::Value *)v5, a2);
}

uint64_t *MIL::Text::Parser::ValueLiteral::Parse@<X0>(MIL::Text::Parser::ValueLiteral *this@<X0>, const MIL::IRValueType *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t Options;
  uint64_t v9;
  void *exception;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[3];
  __int128 v14;
  __int128 v15;
  const MIL::IRValueType *v16;

  v16 = a2;
  result = MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IValue,MIL::IRValueType const*&>((__n128 *)this, (uint64_t *)&v16, a3);
  if (!*a3)
  {
    MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::RefValue,MIL::IRValueType const*&>((__n128 *)this, (uint64_t *)&v16, &v15);
    v6 = (uint64_t *)v15;
    *(_QWORD *)&v15 = 0;
    result = *a3;
    *a3 = v6;
    if (result)
    {
      (*(void (**)(uint64_t *))(*result + 8))(result);
      result = (uint64_t *)v15;
      *(_QWORD *)&v15 = 0;
      if (result)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      v6 = *a3;
    }
    if (!v6)
    {
      v7 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v7, v9, &v15);
      exception = __cxa_allocate_exception(0x48uLL);
      v14 = v15;
      if (*((_QWORD *)&v15 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      std::string::basic_string[abi:ne180100]<0>(v13, "Value expected here.");
      MIL::ParseError::ParseError((uint64_t)exception, &v14, (uint64_t)v13, 115);
    }
  }
  return result;
}

void sub_1E0653814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  uint64_t *v17;
  void *v18;
  int v19;
  uint64_t v21;

  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
      v21 = *v17;
      *v17 = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IValue,MIL::IRValueType const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C6C8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::RefValue,MIL::IRValueType const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C720;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

void MIL::Text::Parser::IValue::Parse(MIL::Text::Parser::IValue *this@<X0>, const MIL::IRValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t Options;
  uint64_t v8;
  void *exception;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  __int128 v13;
  __int128 v14;
  const MIL::IRTupleValueType *v15;
  const MIL::IRDictionaryValueType *v16;
  const MIL::IRListValueType *v17;
  const MIL::IRTensorValueType *v18;

  v18 = (const MIL::IRTensorValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 24))(a2);
  if (v18)
  {
    MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorVal,MIL::IRTensorValueType const*&>((__n128 *)this, &v18, &v14);
  }
  else
  {
    v17 = (const MIL::IRListValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 32))(a2);
    if (v17)
    {
      MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::ListVal,MIL::IRListValueType const*&>((__n128 *)this, &v17, (uint64_t *)&v14);
    }
    else
    {
      v16 = (const MIL::IRDictionaryValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 48))(a2);
      if (v16)
      {
        MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictVal,MIL::IRDictionaryValueType const*&>((__n128 *)this, &v16, (uint64_t *)&v14);
      }
      else
      {
        v15 = (const MIL::IRTupleValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 40))(a2);
        if (!v15)
        {
          v6 = *((_QWORD *)this + 4);
          Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
          MIL::TextLocationFromScannerLocation(v6, v8, &v14);
          exception = __cxa_allocate_exception(0x48uLL);
          v13 = v14;
          if (*((_QWORD *)&v14 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          std::string::basic_string[abi:ne180100]<0>(v12, "Immediate value literal expected here.");
          MIL::ParseError::ParseError((uint64_t)exception, &v13, (uint64_t)v12, 115);
        }
        MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TupleVal,MIL::IRTupleValueType const*&>((__n128 *)this, &v15, (uint64_t *)&v14);
      }
    }
  }
  *a3 = v14;
}

void sub_1E0653AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorVal,MIL::IRTensorValueType const*&>(__n128 *a1@<X0>, const MIL::IRTensorValueType **a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v6[2];
  __n128 v7;
  uint64_t v8;

  v6[1] = a1->n128_u64[1];
  v7 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  v8 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v6[0] = &off_1EA99C930;
  MIL::Text::Parser::TensorVal::Parse((MIL::Text::Parser::TensorVal *)v6, *a2, a3);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::ListVal,MIL::IRListValueType const*&>(__n128 *a1@<X0>, const MIL::IRListValueType **a2@<X1>, uint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v6[2];
  __n128 v7;
  uint64_t v8;

  v6[1] = a1->n128_u64[1];
  v7 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  v8 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v6[0] = &off_1EA99C7D0;
  MIL::Text::Parser::ListVal::Parse((MIL::Text::Parser::ListVal *)v6, *a2, a3);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictVal,MIL::IRDictionaryValueType const*&>(__n128 *a1@<X0>, const MIL::IRDictionaryValueType **a2@<X1>, uint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v6[2];
  __n128 v7;
  uint64_t v8;

  v6[1] = a1->n128_u64[1];
  v7 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  v8 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v6[0] = &off_1EA99C8D8;
  MIL::Text::Parser::DictVal::Parse((MIL::Text::Parser::DictVal *)v6, *a2, a3);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TupleVal,MIL::IRTupleValueType const*&>(__n128 *a1@<X0>, const MIL::IRTupleValueType **a2@<X1>, uint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v6[2];
  __n128 v7;
  uint64_t v8;

  v6[1] = a1->n128_u64[1];
  v7 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  v8 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v6[0] = &off_1EA99C778;
  MIL::Text::Parser::TupleVal::Parse((MIL::Text::Parser::TupleVal *)v6, *a2, a3);
}

void MIL::Text::Parser::RefValue::Parse(MIL::Text::Parser::RefValue *this@<X0>, const MIL::IRValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t Options;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  _anonymous_namespace_ *Scalar;
  unsigned __int8 *v12;
  void **v13;
  unsigned __int8 *v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *exception;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  std::string v34;
  uint64_t v35;
  _QWORD v36[3];
  __int128 v37;
  std::string __p;
  std::string v39;
  _QWORD v40[3];
  __int128 v41;
  _BYTE v42[32];
  _QWORD v43[5];
  _BYTE v44[32];
  std::string v45;
  void **v46;

  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v45);
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v44);
  MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IDValueBindingMap>((__n128 *)this, (uint64_t)v43);
  v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v9);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v42);
  v10 = (*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 24))(a2);
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v25 = *((_QWORD *)this + 4);
    v26 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    MIL::TextLocationFromScannerLocation(v25, v27, &__p);
    v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v40, "Only tensor values can be read from a file.");
    MIL::ParseError::ParseError((uint64_t)exception, &v41, (uint64_t)v40, 114);
  }
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), 3);
  v39 = v45;
  memset(&v45, 0, sizeof(v45));
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v39, &v46);
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  v32[0] = &__p;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v43, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v32);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v12 + 5, (uint64_t *)&v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = v46;
  v46 = 0;
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "path");
  v32[0] = &__p;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v43, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (const void *)*((_QWORD *)v14 + 5);
  if (!v15)
  {
    v28 = __cxa_allocate_exception(0x48uLL);
    v29 = *((_QWORD *)this + 4);
    v30 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
    MIL::TextLocationFromScannerLocation(v29, v31, &__p);
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v36, "File values require a path.");
    MIL::ParseError::ParseError((uint64_t)v28, &v37, (uint64_t)v36, 111);
  }
  MIL::IRValue::GetScalar<std::string>(v15, &__p);
  v16 = *((_QWORD *)this + 4);
  v17 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  MIL::Util::ApplyModelPath((uint64_t)&__p, v16, v18);
  v34 = __p;
  memset(&__p, 0, sizeof(__p));
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v34, &v35);
  std::string::basic_string[abi:ne180100]<0>(v32, "path");
  v46 = v32;
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v43, (unsigned __int8 *)v32, (uint64_t)&std::piecewise_construct, (__int128 **)&v46);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v19 + 5, &v35);
  if (v33 < 0)
    operator delete(v32[0]);
  v20 = v35;
  v35 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = *((_QWORD *)this + 1);
  v22 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 104))(v22);
  MIL::IRTensorValueType::MakeValueFromFileProperties(v10, v21, v43, v23);
  *a3 = __p.__r_.__value_.__r.__words[0];
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v43);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_1E0654100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  int v42;
  void *v43;
  uint64_t v44;

  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v42)
    __cxa_free_exception(v43);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v44 - 160);
  if (*(char *)(v44 - 65) < 0)
    operator delete(*(void **)(v44 - 88));
  _Unwind_Resume(a1);
}

void sub_1E0654174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  if (a25 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v45 - 160);
  if (*(char *)(v45 - 65) < 0)
    operator delete(*(void **)(v45 - 88));
  _Unwind_Resume(a1);
}

void sub_1E06541EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;

  if (a32 < 0)
    operator delete(__p);
  v40 = *(_QWORD *)(v39 - 56);
  *(_QWORD *)(v39 - 56) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (a39 < 0)
    JUMPOUT(0x1E0654358);
  JUMPOUT(0x1E0654364);
}

void sub_1E06542E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;

  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
      __cxa_end_catch();
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v32 - 160);
      if (*(char *)(v32 - 65) < 0)
        operator delete(*(void **)(v32 - 88));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (!v31)
      goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IDValueBindingMap>@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99D0C0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt((uint64_t)v5, a2);
}

void MIL::Text::Parser::TupleVal::Parse(MIL::Text::Parser::TupleVal *this@<X0>, const MIL::IRTupleValueType *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Options;
  uint64_t v7;
  const MIL::IRValueType ***v8;
  const MIL::IRValueType **v9;
  const MIL::IRValueType **v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t **v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t *v29;
  MIL::Scanner::Token *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  const MIL::IRTupleValueType *v34;
  char v35[32];
  _QWORD v36[4];
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  const MIL::IRValueType *v40;
  char v41[32];
  int64x2_t v42;
  _QWORD v43[2];
  int64x2_t *v44;
  int64x2_t v45;
  uint64_t v46;
  _QWORD *v47;

  v42 = 0uLL;
  v43[0] = 0;
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 5, v7);
  v33 = a3;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v41);
  v34 = a2;
  v8 = (const MIL::IRValueType ***)(*(uint64_t (**)(const MIL::IRTupleValueType *))(*(_QWORD *)a2 + 64))(a2);
  v9 = *v8;
  v10 = v8[1];
  if (*v8 != v10)
  {
    do
    {
      v40 = *v9;
      MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>((__n128 *)this, &v40, &v37);
      v11 = v37;
      v38 = v37;
      if (v37)
      {
        v12 = (_QWORD *)operator new();
        v13 = v37;
        *v12 = &unk_1EA992BC8;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = v13;
      }
      else
      {
        v12 = 0;
      }
      v39 = v12;
      v37 = 0;
      v14 = v42.i64[1];
      if (v42.i64[1] >= v43[0])
      {
        v16 = (v42.i64[1] - v42.i64[0]) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v43[0] - v42.i64[0];
        if ((v43[0] - v42.i64[0]) >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v47 = v43;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v43, v19);
        v22 = (uint64_t **)&v20[16 * v16];
        *v22 = v11;
        v22[1] = v12;
        v38 = 0;
        v39 = 0;
        v23 = (_QWORD *)v42.i64[1];
        v24 = (_QWORD *)v42.i64[0];
        if (v42.i64[1] == v42.i64[0])
        {
          v27 = vdupq_n_s64(v42.u64[1]);
          v25 = &v20[16 * v16];
        }
        else
        {
          v25 = &v20[16 * v16];
          do
          {
            v26 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v25 - 1) = v26;
            v25 -= 16;
            *v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v24);
          v27 = v42;
        }
        v15 = v22 + 2;
        v42.i64[0] = (uint64_t)v25;
        v42.i64[1] = (uint64_t)(v22 + 2);
        v45 = v27;
        v28 = v43[0];
        v43[0] = &v20[16 * v21];
        v46 = v28;
        v44 = (int64x2_t *)v27.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v44);
      }
      else
      {
        *(_QWORD *)v42.i64[1] = v11;
        *(_QWORD *)(v14 + 8) = v12;
        v15 = (_QWORD *)(v14 + 16);
      }
      v42.i64[1] = (uint64_t)v15;
      v29 = v37;
      v37 = 0;
      if (v29)
        (*(void (**)(uint64_t *))(*v29 + 8))(v29);
      v30 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      if (MIL::Scanner::Token::GetType(v30) != 9)
        break;
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v36);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v36);
      ++v9;
    }
    while (v9 != v10);
  }
  v31 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v32);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v35);
  MIL::IRTupleValueType::MakeValue((uint64_t)v34, (uint64_t)&v42, v33);
  v44 = &v42;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
}

void sub_1E0654688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a20 = (void **)&a27;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::ListVal::Parse(MIL::Text::Parser::ListVal *this@<X0>, const MIL::IRListValueType *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Options;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  MIL::Scanner::Token *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t **v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  void (***v48)(MIL::MILContextImpl *__hidden);
  MIL::MILContext *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  char v54[32];
  const MIL::IRValueType *v55;
  uint64_t *v56;
  _QWORD v57[4];
  uint64_t *v58;
  _QWORD *v59;
  uint64_t *v60;
  char v61[32];
  int64x2_t v62;
  char *v63;
  int64x2_t *v64;
  int64x2_t v65;
  char *v66;
  char **v67;

  v62 = 0uLL;
  v63 = 0;
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v7);
  v53 = a3;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v61);
  v64 = (int64x2_t *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(_QWORD *)a2 + 64))(a2);
  MIL::Text::Parser::Rule<MIL::Text::Parser::ListVal,std::unique_ptr<MIL::IRListValue const>,MIL::IRListValueType const*>::ParseOpt<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*>((__n128 *)this, (uint64_t *)&v64, &v60);
  v8 = v60;
  if (v60)
  {
    v58 = v60;
    v9 = (_QWORD *)operator new();
    v10 = v9;
    v11 = v60;
    *v9 = &unk_1EA992BC8;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = v11;
    v59 = v9;
    v60 = 0;
    v12 = v62.i64[1];
    if (v62.i64[1] >= (unint64_t)v63)
    {
      v14 = (v62.i64[1] - v62.i64[0]) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = (uint64_t)&v63[-v62.i64[0]];
      if ((uint64_t)&v63[-v62.i64[0]] >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      v67 = &v63;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v63, v17);
      v20 = &v18[16 * v14];
      *(_QWORD *)v20 = v8;
      *((_QWORD *)v20 + 1) = v10;
      v21 = (_QWORD *)v62.i64[1];
      v22 = (_QWORD *)v62.i64[0];
      if (v62.i64[1] == v62.i64[0])
      {
        v25 = vdupq_n_s64(v62.u64[1]);
        v23 = &v18[16 * v14];
      }
      else
      {
        v23 = &v18[16 * v14];
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 16;
          *v21 = 0;
          v21[1] = 0;
        }
        while (v21 != v22);
        v25 = v62;
      }
      v13 = v20 + 16;
      v62.i64[0] = (uint64_t)v23;
      v62.i64[1] = (uint64_t)(v20 + 16);
      v65 = v25;
      v26 = v63;
      v63 = &v18[16 * v19];
      v66 = v26;
      v64 = (int64x2_t *)v25.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v64);
    }
    else
    {
      *(_QWORD *)v62.i64[1] = v8;
      *(_QWORD *)(v12 + 8) = v9;
      v13 = (_QWORD *)(v12 + 16);
    }
    v62.i64[1] = (uint64_t)v13;
    while (1)
    {
      v27 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      if (MIL::Scanner::Token::GetType(v27) != 9)
        break;
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v57);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v57);
      v55 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(_QWORD *)a2 + 64))(a2);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>((__n128 *)this, &v55, &v56);
      v28 = v56;
      v58 = v56;
      if (v56)
      {
        v29 = (_QWORD *)operator new();
        v30 = v56;
        *v29 = &unk_1EA992BC8;
        v29[1] = 0;
        v29[2] = 0;
        v29[3] = v30;
      }
      else
      {
        v29 = 0;
      }
      v59 = v29;
      v56 = 0;
      v31 = v62.i64[1];
      if (v62.i64[1] >= (unint64_t)v63)
      {
        v33 = (v62.i64[1] - v62.i64[0]) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v35 = (uint64_t)&v63[-v62.i64[0]];
        if ((uint64_t)&v63[-v62.i64[0]] >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v67 = &v63;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v63, v36);
        v39 = (uint64_t **)&v37[16 * v33];
        *v39 = v28;
        v39[1] = v29;
        v58 = 0;
        v59 = 0;
        v40 = (_QWORD *)v62.i64[1];
        v41 = (_QWORD *)v62.i64[0];
        if (v62.i64[1] == v62.i64[0])
        {
          v44 = vdupq_n_s64(v62.u64[1]);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 2;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *v40 = 0;
            v40[1] = 0;
          }
          while (v40 != v41);
          v44 = v62;
        }
        v32 = v39 + 2;
        v62.i64[0] = (uint64_t)v42;
        v62.i64[1] = (uint64_t)(v39 + 2);
        v65 = v44;
        v45 = v63;
        v63 = &v37[16 * v38];
        v66 = v45;
        v64 = (int64x2_t *)v44.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v64);
      }
      else
      {
        *(_QWORD *)v62.i64[1] = v28;
        *(_QWORD *)(v31 + 8) = v29;
        v32 = (_QWORD *)(v31 + 16);
      }
      v62.i64[1] = (uint64_t)v32;
      v46 = v56;
      v56 = 0;
      if (v46)
        (*(void (**)(uint64_t *))(*v46 + 8))(v46);
    }
  }
  v47 = (*(uint64_t (**)(const MIL::IRListValueType *))(*(_QWORD *)a2 + 72))(a2);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
  {
    v48 = (void (***)(MIL::MILContextImpl *__hidden))*((_QWORD *)this + 1);
    v49 = (MIL::MILContext *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(_QWORD *)a2 + 64))(a2);
    a2 = (const MIL::IRListValueType *)MIL::IRListValueType::Make(v48, v49, (const MIL::IRValueType *)((v62.i64[1] - v62.i64[0]) >> 4));
  }
  v50 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v51);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v54);
  MIL::IRListValueType::MakeValue((uint64_t)a2, (uint64_t)&v62, v53);
  v52 = v60;
  v60 = 0;
  if (v52)
    (*(void (**)(uint64_t *))(*v52 + 8))(v52);
  v64 = &v62;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
}

void sub_1E0654AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v28;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  v28 = a22;
  a22 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  a20 = (void **)&a27;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ListVal,std::unique_ptr<MIL::IRListValue const>,MIL::IRListValueType const*>::ParseOpt<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::Scanner::Token *v5;
  _QWORD v7[2];
  __n128 v8;
  uint64_t v9;

  v7[1] = a1->n128_u64[1];
  v8 = a1[1];
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v8.n128_u64[0] + 24))(v8.n128_u64[0], v8);
  v9 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v5);
  v7[0] = &off_1EA99C670;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt((uint64_t)v7, *a2, a3);
}

void MIL::Text::Parser::DictItem::Parse(MIL::Text::Parser::DictItem *this@<X0>, const MIL::IRValueType *a2@<X1>, const MIL::IRValueType *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t Options;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE v15[32];
  uint64_t *v16;
  _BYTE v17[32];
  const MIL::IRValueType *v18;
  const MIL::IRValueType *v19;

  v18 = a3;
  v19 = a2;
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 7, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v17);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>((__n128 *)this, &v19, &v16);
  v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v9);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>((__n128 *)this, &v18, &v14);
  v10 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 8, v11);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v13);
  v12 = v14;
  *a4 = v16;
  a4[1] = v12;
}

void sub_1E0654CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::DictItemList::Parse@<X0>(__n128 *this@<X0>, const MIL::IRValueType *a2@<X1>, const MIL::IRValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  MIL::Scanner::Token *v22;
  uint64_t result;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  const MIL::IRValueType *v43;
  const MIL::IRValueType *v44;
  void *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t *v49;

  v43 = a3;
  v44 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictItem,MIL::IRValueType const*&,MIL::IRValueType const*&>(this, &v44, &v43, &v41);
  v6 = a4[2];
  v7 = (_QWORD *)a4[1];
  if ((unint64_t)v7 >= v6)
  {
    v11 = ((uint64_t)v7 - *a4) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v6 - *a4;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v49 = a4 + 2;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a4 + 2), v14);
    v16 = &v15[16 * v11];
    v45 = v15;
    v46 = v16;
    v48 = &v15[16 * v17];
    v18 = v41;
    v41 = 0;
    *(_QWORD *)v16 = v18;
    v19 = v42;
    v42 = 0;
    *((_QWORD *)v16 + 1) = v19;
    v47 = v16 + 16;
    std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__swap_out_circular_buffer(a4, &v45);
    v10 = (_QWORD *)a4[1];
    std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer(&v45);
  }
  else
  {
    v8 = v41;
    v41 = 0;
    *v7 = v8;
    v9 = v42;
    v42 = 0;
    v7[1] = v9;
    v10 = v7 + 2;
    a4[1] = (uint64_t)(v7 + 2);
  }
  a4[1] = (uint64_t)v10;
  v20 = v42;
  v42 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v41;
  v41 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  while (1)
  {
    v22 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    result = MIL::Scanner::Token::GetType(v22);
    if ((_DWORD)result != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this[1].n128_u64[0] + 16))(v40);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v40);
    MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictItem,MIL::IRValueType const*&,MIL::IRValueType const*&>(this, &v44, &v43, &v41);
    v24 = (_QWORD *)a4[1];
    v25 = a4[2];
    if ((unint64_t)v24 >= v25)
    {
      v29 = ((uint64_t)v24 - *a4) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v31 = v25 - *a4;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      v49 = a4 + 2;
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a4 + 2), v32);
      v34 = &v33[16 * v29];
      v45 = v33;
      v46 = v34;
      v48 = &v33[16 * v35];
      v36 = v41;
      v41 = 0;
      *(_QWORD *)v34 = v36;
      v37 = v42;
      v42 = 0;
      *((_QWORD *)v34 + 1) = v37;
      v47 = v34 + 16;
      std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__swap_out_circular_buffer(a4, &v45);
      v28 = (_QWORD *)a4[1];
      std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer(&v45);
    }
    else
    {
      v26 = v41;
      v41 = 0;
      *v24 = v26;
      v27 = v42;
      v42 = 0;
      v24[1] = v27;
      v28 = v24 + 2;
      a4[1] = (uint64_t)(v24 + 2);
    }
    a4[1] = (uint64_t)v28;
    v38 = v42;
    v42 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v41;
    v41 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  return result;
}

void sub_1E0654FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  void **v8;
  void **v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, void **);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer((void **)va1);
  v7 = v11;
  v11 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v9;
  v9 = 0;
  if (v8)
    (*((void (**)(void **))*v8 + 1))(v8);
  std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictItem,MIL::IRValueType const*&,MIL::IRValueType const*&>(__n128 *a1@<X0>, const MIL::IRValueType **a2@<X1>, const MIL::IRValueType **a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::Scanner::Token *v7;
  _QWORD v8[2];
  __n128 v9;
  uint64_t v10;

  v8[1] = a1->n128_u64[1];
  v9 = a1[1];
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  v10 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v7);
  v8[0] = &off_1EA99C828;
  MIL::Text::Parser::DictItem::Parse((MIL::Text::Parser::DictItem *)v8, *a2, *a3, a4);
}

void MIL::Text::Parser::DictVal::Parse(MIL::Text::Parser::DictVal *this@<X0>, const MIL::IRDictionaryValueType *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Options;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *i;
  std::__shared_weak_count *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _OWORD v20[2];
  int v21;
  char v22[32];
  uint64_t *v23;
  uint64_t *v24;
  char v25[39];
  uint64_t *v26;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 7, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v25);
  *(_QWORD *)&v20[0] = (*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(_QWORD *)a2 + 64))(a2);
  v18 = (*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(_QWORD *)a2 + 72))(a2);
  MIL::Text::Parser::Rule<MIL::Text::Parser::DictVal,std::unique_ptr<MIL::IRDictionaryValue const>,MIL::IRDictionaryValueType const*>::ParseOpt<MIL::Text::Parser::DictItemList,MIL::IRValueType const*,MIL::IRValueType const*>((__n128 *)this, (uint64_t *)v20, &v18, &v23);
  v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 8, v9);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v22);
  memset(v20, 0, sizeof(v20));
  v21 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>((uint64_t)v20, (unint64_t)(float)(unint64_t)(((char *)v24 - (char *)v23) >> 4));
  v10 = v23;
  for (i = v24; v10 != i; v10 += 2)
  {
    v18 = *v10;
    if (v18)
    {
      v12 = (std::__shared_weak_count *)operator new();
      v13 = *v10;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992BC8;
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
    }
    else
    {
      v12 = 0;
    }
    v19 = v12;
    *v10 = 0;
    v26 = &v18;
    v14 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v20, &v18, (uint64_t)&std::piecewise_construct, (_OWORD **)&v26);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>(v14 + 4, v10 + 1);
    v15 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  MIL::IRDictionaryValueType::MakeValue((uint64_t)a2, (uint64_t)v20, a3);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v20);
  *(_QWORD *)&v20[0] = &v23;
  std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1E06552CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a11);
  a11 = (void **)&a20;
  std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictVal,std::unique_ptr<MIL::IRDictionaryValue const>,MIL::IRDictionaryValueType const*>::ParseOpt<MIL::Text::Parser::DictItemList,MIL::IRValueType const*,MIL::IRValueType const*>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::Scanner::Token *v7;
  _QWORD v9[2];
  __n128 v10;
  uint64_t v11;

  v9[1] = a1->n128_u64[1];
  v10 = a1[1];
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v10.n128_u64[0] + 24))(v10.n128_u64[0], v10);
  v11 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v7);
  v9[0] = &off_1EA99C880;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::ParseOpt((uint64_t)v9, *a2, *a3, a4);
}

_QWORD *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA992BC8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void MIL::Text::Parser::TensorVal::Parse(MIL::Text::Parser::TensorVal *this@<X0>, const MIL::IRTensorValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  if (MIL::IRTensorValueType::IsScalar(a2))
    MIL::Text::Parser::TensorVal::ParseScalar(this, a2, a3);
  else
    MIL::Text::Parser::TensorVal::ParseTensor(this, a2, a3);
}

uint64_t MIL::Text::Parser::Type::Parse(MIL::Text::Parser::Type *this)
{
  MIL::Scanner::Token *v2;
  int Type;
  uint64_t v4;
  uint64_t Options;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  MIL::Scanner::Token *v11;
  uint64_t v12;
  uint64_t v13;
  void (***v14)(MIL::MILContextImpl *__hidden);
  int v15;
  _QWORD *v16;
  std::string::size_type v17;
  MIL::Scanner::Token *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::string *p_p;
  MIL::Scanner::Token *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  std::__shared_weak_count *size;
  unint64_t *v35;
  unint64_t v36;
  MIL::Scanner::Token *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  int data;
  int v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  std::string::size_type v54;
  std::string::size_type v55;
  uint64_t v56;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  int v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string *v70;
  std::string::size_type v71;
  std::string::size_type v75;
  std::string::size_type v76;
  int v77;
  uint64_t v80;
  uint64_t v81;
  MIL::Scanner::Token *v82;
  uint64_t v83;
  uint64_t v84;
  std::string *v85;
  int v86;
  int v87;
  uint64_t v89;
  void *v90;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  MIL::Scanner::Token *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  MIL::MILContext *v101;
  uint64_t v102;
  uint64_t v103;
  const MIL::IRValueType *v104;
  uint64_t v105;
  uint64_t v106;
  const MIL::IRDimension *v107;
  int v109;
  int v110;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  MIL::Scanner::Token *v116;
  MIL::Scanner::Token *v117;
  MIL::Scanner::Token *v118;
  BOOL v120;
  std::string *v121;
  std::string::size_type v122;
  int v123;
  uint64_t v125;
  uint64_t v126;
  int v127;
  std::string *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  uint64_t v131;
  std::string *v133;
  std::string::size_type v134;
  int v135;
  uint64_t v137;
  uint64_t v138;
  void (***v139)(MIL::MILContextImpl *__hidden);
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  MIL::Scanner::Token *v143;
  int v144;
  uint64_t v145;
  MIL::MILContext *v146;
  const MIL::IRValueType *v147;
  const MIL::IRValueType *v148;
  unsigned int v149;
  int v150;
  int v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::string *v157;
  int v158;
  int v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::string *v165;
  std::string::size_type v166;
  std::string::size_type v167;
  int v168;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::string *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  std::string *v181;
  std::string::size_type v182;
  std::string::size_type v183;
  uint64_t v184;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  MIL::Scanner::Token *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  MIL::Scanner::Token *v194;
  int v195;
  uint64_t v196;
  void *v197;
  MIL::Scanner::Token *v199;
  int v200;
  uint64_t v201;
  int v202;
  MIL::MILContext *v203;
  const MIL::IRValueType *v204;
  MIL::Scanner::Token *v205;
  _QWORD *DTypeFirstSet;
  int v207;
  void (***v208)(MIL::MILContextImpl *__hidden);
  int v209;
  void *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *exception;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  unint64_t *v245;
  unint64_t v246;
  void *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  unint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  void *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  unint64_t *v292;
  unint64_t v293;
  void *v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD v298[3];
  __int128 v299;
  _BYTE v300[32];
  _BYTE v301[32];
  _QWORD v302[4];
  _QWORD v303[3];
  __int128 v304;
  _BYTE v305[32];
  _BYTE v306[32];
  _QWORD v307[4];
  _BYTE v308[32];
  _BYTE v309[32];
  _BYTE v310[32];
  _QWORD v311[4];
  _BYTE v312[32];
  _BYTE v313[32];
  _BYTE v314[32];
  _QWORD v315[4];
  _BYTE v316[32];
  _QWORD v317[4];
  _BYTE v318[32];
  _QWORD v319[3];
  __int128 v320;
  _BYTE v321[32];
  _BYTE v322[32];
  _QWORD v323[3];
  __int128 v324;
  _BYTE v325[32];
  _BYTE v326[32];
  _QWORD v327[3];
  __int128 v328;
  _BYTE v329[32];
  _BYTE v330[32];
  _QWORD v331[3];
  __int128 v332;
  _BYTE v333[32];
  _BYTE v334[32];
  _QWORD v335[3];
  __int128 v336;
  _BYTE v337[32];
  _BYTE v338[32];
  _QWORD v339[4];
  _QWORD v340[3];
  __int128 v341;
  _BYTE v342[32];
  _QWORD v343[3];
  __int128 v344;
  _QWORD v345[3];
  __int128 v346;
  _BYTE v347[32];
  _QWORD v348[3];
  __int128 v349;
  _QWORD v350[4];
  _BYTE v351[32];
  _QWORD v352[3];
  __int128 v353;
  _BYTE v354[32];
  _QWORD v355[3];
  __int128 v356;
  _BYTE v357[32];
  _QWORD v358[4];
  _QWORD v359[3];
  __int128 v360;
  _BYTE v361[32];
  _QWORD v362[4];
  std::string v363;
  _BYTE v364[32];
  _QWORD v365[3];
  __int128 v366;
  _QWORD v367[3];
  __int128 v368;
  _BYTE v369[32];
  std::string v370;
  _BYTE v371[32];
  _QWORD v372[3];
  __int128 v373;
  std::string v374;
  _BYTE v375[32];
  std::string v376;
  _BYTE v377[32];
  _QWORD v378[3];
  __int128 v379;
  std::string __p;
  _BYTE v381[32];
  _BYTE v382[32];
  _QWORD v383[4];
  _QWORD v384[3];
  __int128 v385;
  _BYTE v386[32];
  std::string v387[2];
  _QWORD v388[4];
  __int128 v389;
  __int128 v390;
  int v391;
  _BYTE v392[32];
  _BYTE v393[32];
  _QWORD v394[6];

  v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  Type = MIL::Scanner::Token::GetType(v2);
  v4 = **((_QWORD **)this + 2);
  if (Type == 23)
  {
    (*(void (**)(_QWORD *__return_ptr))(v4 + 16))(v394);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v394);
    Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v6);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v393);
    v7 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
    v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v392);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v389);
    v10 = operator new();
    *(_OWORD *)v10 = v389;
    *(_QWORD *)(v10 + 16) = v390;
    __p.__r_.__value_.__r.__words[0] = v10;
    v389 = 0u;
    v390 = 0u;
    v391 = 1065353216;
    v11 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v11) == 9)
    {
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v388);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v388);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v387);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v389, (uint64_t *)v387);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v387);
    }
    v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v13);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v386);
    if ((v7 - 31) >= 0x16)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x1E0DE5060] + 16;
      __cxa_throw(exception, MEMORY[0x1E0DE4EB0], MEMORY[0x1E0DE4DD0]);
    }
    v14 = (void (***)(MIL::MILContextImpl *__hidden))*((_QWORD *)this + 1);
    v15 = dword_1E0B07B6C[v7 - 31];
    v387[0].__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      v16 = (_QWORD *)operator new();
      v17 = __p.__r_.__value_.__r.__words[0];
      *v16 = &unk_1EA99C1F0;
      v16[1] = 0;
      v16[2] = 0;
      v16[3] = v17;
    }
    else
    {
      v16 = 0;
    }
    v387[0].__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    __p.__r_.__value_.__r.__words[0] = 0;
    v33 = MIL::IRTensorValueType::MakeWithShape(v14, v15, (uint64_t *)v387, (uint64_t *)&v389);
    size = (std::__shared_weak_count *)v387[0].__r_.__value_.__l.__size_;
    if (v387[0].__r_.__value_.__l.__size_)
    {
      v35 = (unint64_t *)(v387[0].__r_.__value_.__l.__size_ + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v389);
    __p.__r_.__value_.__r.__words[0] = 0;
    return v33;
  }
  v18 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v4 + 24))();
  if (MIL::Scanner::Token::GetType(v18) == 27)
  {
    v19 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19) <= 2)
    {
      v215 = *((_QWORD *)this + 4);
      v216 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v217 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 24))(v216);
      MIL::TextLocationFromScannerLocation(v215, v217, &v389);
      v218 = __cxa_allocate_exception(0x48uLL);
      v385 = v389;
      if (*((_QWORD *)&v389 + 1))
      {
        v219 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
        do
          v220 = __ldxr(v219);
        while (__stxr(v220 + 1, v219));
      }
      std::string::basic_string[abi:ne180100]<0>(v384, "Syntax version 1.2+ is required for tensor buffers");
      MIL::ParseError::ParseError((uint64_t)v218, &v385, (uint64_t)v384, 114);
    }
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v383);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v383);
    v20 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v21);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v382);
    v22 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
    v23 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v24);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v381);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 5)
        goto LABEL_297;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_297;
      p_p = &__p;
    }
    data = (int)p_p->__r_.__value_.__l.__data_;
    v46 = p_p->__r_.__value_.__s.__data_[4];
    if (data != 1885431923 || v46 != 101)
    {
LABEL_297:
      v210 = __cxa_allocate_exception(0x48uLL);
      v211 = *((_QWORD *)this + 4);
      v212 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v213 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v212 + 24))(v212);
      MIL::TextLocationFromScannerLocation(v211, v213, &v389);
      v379 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v378, "Shape field expected here");
      MIL::ParseError::ParseError((uint64_t)v210, &v379, (uint64_t)v378, 113);
    }
    v48 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v49);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v377);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v376.__r_.__value_.__l.__data_);
    v50 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v51);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v375);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v374);
    if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v374.__r_.__value_.__l.__size_ == 7
        && *(_DWORD *)v374.__r_.__value_.__l.__data_ == 1769108595
        && *(_DWORD *)(v374.__r_.__value_.__r.__words[0] + 3) == 1936024681)
      {
        goto LABEL_56;
      }
      if (v374.__r_.__value_.__l.__size_ != 22)
        goto LABEL_127;
      v52 = (std::string *)v374.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v374.__r_.__value_.__r.__words[2]) == 7)
      {
        if (LODWORD(v374.__r_.__value_.__l.__data_) != 1769108595
          || *(_DWORD *)((char *)v374.__r_.__value_.__r.__words + 3) != 1936024681)
        {
LABEL_127:
          v92 = __cxa_allocate_exception(0x48uLL);
          v93 = *((_QWORD *)this + 4);
          v94 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 24))(v94);
          MIL::TextLocationFromScannerLocation(v93, v95, &v389);
          v373 = v389;
          v389 = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(v372, "Either strides or row_alignment_in_bytes fields expected here");
          MIL::ParseError::ParseError((uint64_t)v92, &v373, (uint64_t)v372, 113);
        }
LABEL_56:
        v59 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v60);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v371);
        memset(&v370, 0, sizeof(v370));
        if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v374.__r_.__value_.__l.__size_ != 7)
            goto LABEL_65;
          v61 = (std::string *)v374.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) != 7)
            goto LABEL_65;
          v61 = &v374;
        }
        v62 = (int)v61->__r_.__value_.__l.__data_;
        v63 = *(_DWORD *)((char *)v61->__r_.__value_.__r.__words + 3);
        if (v62 == 1769108595 && v63 == 1936024681)
        {
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferStrides>((__n128 *)this, (void **)&v389);
          v65 = 0;
          *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v389;
          v370.__r_.__value_.__r.__words[2] = v390;
LABEL_66:
          v66 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
          MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v67);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v369);
          MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v389);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[2] = v390;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v389;
          if (SBYTE7(v390) < 0)
          {
            v71 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ == 7
              && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1769108595
              && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1936024681)
            {
              goto LABEL_315;
            }
            if (__p.__r_.__value_.__l.__size_ == 22)
            {
              if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x67696C615F776F72
                && *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) == 0x6E695F746E656D6ELL
                && *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 14) == 0x73657479625F6E69)
              {
                goto LABEL_315;
              }
              v71 = __p.__r_.__value_.__l.__size_;
            }
            if (v71 != 18)
              goto LABEL_316;
            v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (BYTE7(v390) != 18)
            {
              if (BYTE7(v390) == 22)
              {
                if (__p.__r_.__value_.__r.__words[0] != 0x67696C615F776F72
                  || __p.__r_.__value_.__l.__size_ != 0x6E695F746E656D6ELL
                  || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) != 0x73657479625F6E69)
                {
                  goto LABEL_316;
                }
LABEL_315:
                v233 = __cxa_allocate_exception(0x48uLL);
                v234 = *((_QWORD *)this + 4);
                v235 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
                v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v235 + 24))(v235);
                MIL::TextLocationFromScannerLocation(v234, v236, &v389);
                v368 = v389;
                v389 = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(v367, "Cannot specify both strides and row_alignment_in_bytes simultaneously");
                MIL::ParseError::ParseError((uint64_t)v233, &v368, (uint64_t)v367, 112);
              }
              if (BYTE7(v390) == 7
                && LODWORD(__p.__r_.__value_.__l.__data_) == 1769108595
                && *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) == 1936024681)
              {
                goto LABEL_315;
              }
LABEL_316:
              v237 = __cxa_allocate_exception(0x48uLL);
              v238 = *((_QWORD *)this + 4);
              v239 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
              v240 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
              MIL::TextLocationFromScannerLocation(v238, v240, &v389);
              v366 = v389;
              v389 = 0uLL;
              std::string::basic_string[abi:ne180100]<0>(v365, "Interleave factors field expected here");
              MIL::ParseError::ParseError((uint64_t)v237, &v366, (uint64_t)v365, 113);
            }
            v70 = &__p;
          }
          v75 = v70->__r_.__value_.__r.__words[0];
          v76 = v70->__r_.__value_.__l.__size_;
          v77 = LOWORD(v70->__r_.__value_.__r.__words[2]);
          if (v75 != 0x61656C7265746E69 || v76 != 0x6F746361665F6576 || v77 != 29554)
            goto LABEL_316;
          v80 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
          MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v81);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v364);
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactors>((__n128 *)this, (void **)&v363.__r_.__value_.__l.__data_);
          v389 = 0u;
          v390 = 0u;
          v391 = 1065353216;
          v82 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
          if (MIL::Scanner::Token::GetType(v82) == 9)
          {
            (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v362);
            UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v362);
            MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v387);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v389, (uint64_t *)v387);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v387);
          }
          v83 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
          MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v84);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v361);
          if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v374.__r_.__value_.__l.__size_ != 7)
              goto LABEL_115;
            v85 = (std::string *)v374.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) != 7)
              goto LABEL_115;
            v85 = &v374;
          }
          v86 = (int)v85->__r_.__value_.__l.__data_;
          v87 = *(_DWORD *)((char *)v85->__r_.__value_.__r.__words + 3);
          if (v86 == 1769108595 && v87 == 1936024681)
          {
            if ((v22 - 31) <= 0x15)
            {
              v89 = MIL::IRTensorBufferValueType::MakeWithShape(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), dword_1E0B07B6C[v22 - 31], (__int128 *)&v376, (uint64_t)&v370, (uint64_t)&v363, (uint64_t *)&v389);
              goto LABEL_117;
            }
LABEL_304:
            v225 = __cxa_allocate_exception(8uLL);
            *v225 = MEMORY[0x1E0DE5060] + 16;
            __cxa_throw(v225, MEMORY[0x1E0DE4EB0], MEMORY[0x1E0DE4DD0]);
          }
LABEL_115:
          if ((v22 - 31) < 0x16)
          {
            v89 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), dword_1E0B07B6C[v22 - 31], (__int128 *)&v376, v65, (uint64_t)&v363, (uint64_t *)&v389);
LABEL_117:
            v33 = v89;
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v389);
            if (v363.__r_.__value_.__r.__words[0])
            {
              v363.__r_.__value_.__l.__size_ = v363.__r_.__value_.__r.__words[0];
              operator delete(v363.__r_.__value_.__l.__data_);
            }
            if (v370.__r_.__value_.__r.__words[0])
            {
              v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
              operator delete(v370.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v374.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_272;
            v90 = (void *)v374.__r_.__value_.__r.__words[0];
LABEL_271:
            operator delete(v90);
LABEL_272:
            v193 = (void *)v376.__r_.__value_.__r.__words[0];
            if (!v376.__r_.__value_.__r.__words[0])
              goto LABEL_286;
            v376.__r_.__value_.__l.__size_ = v376.__r_.__value_.__r.__words[0];
            goto LABEL_274;
          }
          goto LABEL_304;
        }
LABEL_65:
        v65 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferRowAlignment>((__n128 *)this);
        goto LABEL_66;
      }
      if (HIBYTE(v374.__r_.__value_.__r.__words[2]) != 22)
        goto LABEL_127;
      v52 = &v374;
    }
    v54 = v52->__r_.__value_.__r.__words[0];
    v55 = v52->__r_.__value_.__l.__size_;
    v56 = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 6);
    if (v54 != 0x67696C615F776F72 || v55 != 0x6E695F746E656D6ELL || v56 != 0x73657479625F6E69)
      goto LABEL_127;
    goto LABEL_56;
  }
  v26 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v26) == 28)
  {
    v27 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(_QWORD *)v27 + 88))(v27) <= 2)
    {
      v241 = *((_QWORD *)this + 4);
      v242 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v243 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v242 + 24))(v242);
      MIL::TextLocationFromScannerLocation(v241, v243, &v389);
      v244 = __cxa_allocate_exception(0x48uLL);
      v360 = v389;
      if (*((_QWORD *)&v389 + 1))
      {
        v245 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
      }
      std::string::basic_string[abi:ne180100]<0>(v359, "Syntax version 1.2+ is required for pixel buffers");
      MIL::ParseError::ParseError((uint64_t)v244, &v360, (uint64_t)v359, 114);
    }
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v358);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v358);
    v28 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v29);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v357);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
    if ((MIL::IsValidIRPixelFormatTypeString((unsigned __int8 *)&__p) & 1) == 0)
    {
      v251 = __cxa_allocate_exception(0x48uLL);
      v252 = *((_QWORD *)this + 4);
      v253 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v253 + 24))(v253);
      MIL::TextLocationFromScannerLocation(v252, v254, &v389);
      v356 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v355, "A valid pixel format type expected here");
      MIL::ParseError::ParseError((uint64_t)v251, &v356, (uint64_t)v355, 113);
    }
    v30 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v31);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v354);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v376);
    if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v376.__r_.__value_.__l.__size_ != 5)
        goto LABEL_303;
      v32 = (std::string *)v376.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_303;
      v32 = &v376;
    }
    v109 = (int)v32->__r_.__value_.__l.__data_;
    v110 = v32->__r_.__value_.__s.__data_[4];
    if (v109 != 1885431923 || v110 != 101)
    {
LABEL_303:
      v221 = __cxa_allocate_exception(0x48uLL);
      v222 = *((_QWORD *)this + 4);
      v223 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v224 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 24))(v223);
      MIL::TextLocationFromScannerLocation(v222, v224, &v389);
      v353 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v352, "Shape field expected here");
      MIL::ParseError::ParseError((uint64_t)v221, &v353, (uint64_t)v352, 113);
    }
    v112 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 24))(v112);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v113);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v351);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v374.__r_.__value_.__l.__data_);
    v114 = 0;
    v115 = 0;
    memset(&v370, 0, sizeof(v370));
    memset(&v363, 0, sizeof(v363));
    v391 = 1065353216;
    v389 = 0u;
    v390 = 0u;
    while (1)
    {
      while (1)
      {
        v116 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (MIL::Scanner::Token::GetType(v116) != 9)
        {
          v137 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 24))(v137);
          MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v138);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v342);
          v139 = (void (***)(MIL::MILContextImpl *__hidden))*((_QWORD *)this + 1);
          if ((v115 & v114 & 1) != 0)
          {
            v140 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&__p);
            v141 = MIL::IRPixelBufferValueType::MakeWithShapeBytesPerRowNumSlices(v139, v140, (__int128 *)&v374, (std::__shared_weak_count_vtbl **)&v370, (std::__shared_weak_count_vtbl **)&v363, (uint64_t *)&v389);
          }
          else if ((v115 & 1) != 0)
          {
            v142 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&__p);
            v141 = MIL::IRPixelBufferValueType::MakeWithShape(v139, v142, (__int128 *)&v374, (uint64_t)&v370, (uint64_t *)&v389);
          }
          else
          {
            v149 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&__p);
            if ((v114 & 1) != 0)
              v141 = MIL::IRPixelBufferValueType::MakeWithShapeNumSlices(v139, v149, (__int128 *)&v374, (uint64_t)&v363, (uint64_t *)&v389);
            else
              v141 = MIL::IRPixelBufferValueType::MakeWithShape(v139, v149, (__int128 *)&v374, (uint64_t *)&v389);
          }
          v33 = v141;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v389);
          if (v363.__r_.__value_.__r.__words[0])
          {
            v363.__r_.__value_.__l.__size_ = v363.__r_.__value_.__r.__words[0];
            operator delete(v363.__r_.__value_.__l.__data_);
          }
          if (v370.__r_.__value_.__r.__words[0])
          {
            v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
            operator delete(v370.__r_.__value_.__l.__data_);
          }
          if (v374.__r_.__value_.__r.__words[0])
          {
            v374.__r_.__value_.__l.__size_ = v374.__r_.__value_.__r.__words[0];
            operator delete(v374.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v376.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_286:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v197 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_288:
              operator delete(v197);
            }
            return v33;
          }
          v193 = (void *)v376.__r_.__value_.__r.__words[0];
LABEL_274:
          operator delete(v193);
          goto LABEL_286;
        }
        (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v350);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v350);
        v117 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (MIL::Scanner::Token::GetType(v117) == 54)
          break;
        v118 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (MIL::Scanner::Token::GetType(v118) == 3)
        {
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v387);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v389, (uint64_t *)v387);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v387);
        }
      }
      MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, v387);
      if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v376.__r_.__value_.__l.__data_);
      v376 = v387[0];
      if (SHIBYTE(v387[0].__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v387[0].__r_.__value_.__r.__words[2]) == 10)
      {
        v121 = &v376;
LABEL_161:
        v122 = v121->__r_.__value_.__r.__words[0];
        v123 = LOWORD(v121->__r_.__value_.__r.__words[1]);
        if (v122 != 0x63696C735F6D756ELL || v123 != 29541)
          goto LABEL_305;
        goto LABEL_166;
      }
      if (HIBYTE(v387[0].__r_.__value_.__r.__words[2]) != 13)
        goto LABEL_305;
      if (v376.__r_.__value_.__r.__words[0] != 0x65705F7365747962
        || *(std::string::size_type *)((char *)v376.__r_.__value_.__r.__words + 5) != 0x776F725F7265705FLL)
      {
        goto LABEL_305;
      }
LABEL_166:
      v125 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
      MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v126);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v347);
      v127 = HIBYTE(v376.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
      {
        v129 = v376.__r_.__value_.__l.__size_;
        if (v376.__r_.__value_.__l.__size_ != 13)
          goto LABEL_184;
        v128 = (std::string *)v376.__r_.__value_.__r.__words[0];
LABEL_171:
        v130 = v128->__r_.__value_.__r.__words[0];
        v131 = *(std::string::size_type *)((char *)v128->__r_.__value_.__r.__words + 5);
        if (v130 == 0x65705F7365747962 && v131 == 0x776F725F7265705FLL)
        {
          if ((v115 & 1) != 0)
          {
            v278 = __cxa_allocate_exception(0x48uLL);
            v279 = *((_QWORD *)this + 4);
            v280 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
            v281 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v280 + 24))(v280);
            MIL::TextLocationFromScannerLocation(v279, v281, v387);
            v346 = *(_OWORD *)&v387[0].__r_.__value_.__l.__data_;
            *(_OWORD *)&v387[0].__r_.__value_.__l.__data_ = 0uLL;
            std::string::basic_string[abi:ne180100]<0>(v345, "bytes_per_row unexpectedly set twice");
            MIL::ParseError::ParseError((uint64_t)v278, &v346, (uint64_t)v345, 113);
          }
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferBytesPerRowVec>((__n128 *)this, (void **)&v387[0].__r_.__value_.__l.__data_);
          if (v370.__r_.__value_.__r.__words[0])
          {
            v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
            operator delete(v370.__r_.__value_.__l.__data_);
          }
          v370 = v387[0];
          v127 = HIBYTE(v376.__r_.__value_.__r.__words[2]);
          v115 = 1;
        }
        if ((v127 & 0x80) == 0)
          goto LABEL_181;
        v129 = v376.__r_.__value_.__l.__size_;
LABEL_184:
        if (v129 == 10)
        {
          v133 = (std::string *)v376.__r_.__value_.__r.__words[0];
          goto LABEL_186;
        }
      }
      else
      {
        if (HIBYTE(v376.__r_.__value_.__r.__words[2]) == 13)
        {
          v128 = &v376;
          goto LABEL_171;
        }
LABEL_181:
        if (v127 == 10)
        {
          v133 = &v376;
LABEL_186:
          v134 = v133->__r_.__value_.__r.__words[0];
          v135 = LOWORD(v133->__r_.__value_.__r.__words[1]);
          if (v134 == 0x63696C735F6D756ELL && v135 == 29541)
          {
            if ((v114 & 1) != 0)
            {
              v294 = __cxa_allocate_exception(0x48uLL);
              v295 = *((_QWORD *)this + 4);
              v296 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
              v297 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v296 + 24))(v296);
              MIL::TextLocationFromScannerLocation(v295, v297, v387);
              v344 = *(_OWORD *)&v387[0].__r_.__value_.__l.__data_;
              *(_OWORD *)&v387[0].__r_.__value_.__l.__data_ = 0uLL;
              std::string::basic_string[abi:ne180100]<0>(v343, "num_slices unexpectedly set twice");
              MIL::ParseError::ParseError((uint64_t)v294, &v344, (uint64_t)v343, 113);
            }
            MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferNumSlicesVec>((__n128 *)this, (void **)&v387[0].__r_.__value_.__l.__data_);
            if (v363.__r_.__value_.__r.__words[0])
            {
              v363.__r_.__value_.__l.__size_ = v363.__r_.__value_.__r.__words[0];
              operator delete(v363.__r_.__value_.__l.__data_);
            }
            v363 = v387[0];
            v114 = 1;
          }
        }
      }
    }
    if (v376.__r_.__value_.__l.__size_ != 10)
    {
      if (v376.__r_.__value_.__l.__size_ != 13
        || (*(_QWORD *)v376.__r_.__value_.__l.__data_ == 0x65705F7365747962
          ? (v120 = *(_QWORD *)(v376.__r_.__value_.__r.__words[0] + 5) == 0x776F725F7265705FLL)
          : (v120 = 0),
            !v120))
      {
LABEL_305:
        v226 = *((_QWORD *)this + 4);
        v227 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        v228 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v227 + 24))(v227);
        MIL::TextLocationFromScannerLocation(v226, v228, v387);
        v229 = __cxa_allocate_exception(0x48uLL);
        v349 = *(_OWORD *)&v387[0].__r_.__value_.__l.__data_;
        if (v387[0].__r_.__value_.__l.__size_)
        {
          v230 = (unint64_t *)(v387[0].__r_.__value_.__l.__size_ + 8);
          do
            v231 = __ldxr(v230);
          while (__stxr(v231 + 1, v230));
        }
        std::string::basic_string[abi:ne180100]<0>(v348, "bytes_per_row or num_slices field expected here");
        MIL::ParseError::ParseError((uint64_t)v229, &v349, (uint64_t)v348, 113);
      }
      goto LABEL_166;
    }
    v121 = (std::string *)v376.__r_.__value_.__r.__words[0];
    goto LABEL_161;
  }
  v37 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v37) == 29)
  {
    v38 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(_QWORD *)v38 + 88))(v38) <= 2)
    {
      v271 = *((_QWORD *)this + 4);
      v272 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v273 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v272 + 24))(v272);
      MIL::TextLocationFromScannerLocation(v271, v273, &v389);
      v274 = __cxa_allocate_exception(0x48uLL);
      v341 = v389;
      if (*((_QWORD *)&v389 + 1))
      {
        v275 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
        do
          v276 = __ldxr(v275);
        while (__stxr(v276 + 1, v275));
      }
      std::string::basic_string[abi:ne180100]<0>(v340, "Syntax version 1.2+ is required for circular buffers");
      MIL::ParseError::ParseError((uint64_t)v274, &v341, (uint64_t)v340, 114);
    }
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v339);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v339);
    v39 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v40);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v338);
    v41 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
    v42 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v43);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v337);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 5)
        goto LABEL_321;
      v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_321;
      v44 = &__p;
    }
    v150 = (int)v44->__r_.__value_.__l.__data_;
    v151 = v44->__r_.__value_.__s.__data_[4];
    if (v150 != 1885431923 || v151 != 101)
    {
LABEL_321:
      v247 = __cxa_allocate_exception(0x48uLL);
      v248 = *((_QWORD *)this + 4);
      v249 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v250 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v249 + 24))(v249);
      MIL::TextLocationFromScannerLocation(v248, v250, &v389);
      v336 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v335, "Shape field expected here");
      MIL::ParseError::ParseError((uint64_t)v247, &v336, (uint64_t)v335, 113);
    }
    v153 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v153 + 24))(v153);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v154);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v334);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v376.__r_.__value_.__l.__data_);
    v155 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 24))(v155);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v156);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v333);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v389);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[2] = v390;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v389;
    if (SBYTE7(v390) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 7)
        goto LABEL_323;
      v157 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SBYTE7(v390) != 7)
        goto LABEL_323;
      v157 = &__p;
    }
    v158 = (int)v157->__r_.__value_.__l.__data_;
    v159 = *(_DWORD *)((char *)v157->__r_.__value_.__r.__words + 3);
    if (v158 != 1769108595 || v159 != 1936024681)
    {
LABEL_323:
      v255 = __cxa_allocate_exception(0x48uLL);
      v256 = *((_QWORD *)this + 4);
      v257 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v258 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v257 + 24))(v257);
      MIL::TextLocationFromScannerLocation(v256, v258, &v389);
      v332 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v331, "Strides field expected here");
      MIL::ParseError::ParseError((uint64_t)v255, &v332, (uint64_t)v331, 113);
    }
    v161 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v162 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 24))(v161);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v162);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v330);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferStrides>((__n128 *)this, (void **)&v374.__r_.__value_.__l.__data_);
    v163 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 24))(v163);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v164);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v329);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v389);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[2] = v390;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v389;
    if (SBYTE7(v390) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 18)
        goto LABEL_324;
      v165 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SBYTE7(v390) != 18)
        goto LABEL_324;
      v165 = &__p;
    }
    v166 = v165->__r_.__value_.__r.__words[0];
    v167 = v165->__r_.__value_.__l.__size_;
    v168 = LOWORD(v165->__r_.__value_.__r.__words[2]);
    if (v166 != 0x61656C7265746E69 || v167 != 0x6F746361665F6576 || v168 != 29554)
    {
LABEL_324:
      v259 = __cxa_allocate_exception(0x48uLL);
      v260 = *((_QWORD *)this + 4);
      v261 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v261 + 24))(v261);
      MIL::TextLocationFromScannerLocation(v260, v262, &v389);
      v328 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v327, "Interleave factors field expected here");
      MIL::ParseError::ParseError((uint64_t)v259, &v328, (uint64_t)v327, 113);
    }
    v171 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v172 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 24))(v171);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v172);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v326);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactors>((__n128 *)this, (void **)&v370.__r_.__value_.__l.__data_);
    v173 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 24))(v173);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v174);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v325);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v389);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[2] = v390;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v389;
    if (SBYTE7(v390) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 8)
        goto LABEL_325;
      v175 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SBYTE7(v390) != 8)
        goto LABEL_325;
      v175 = &__p;
    }
    if (v175->__r_.__value_.__r.__words[0] == 0x6D69645F70617277)
    {
      v176 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 24))(v176);
      MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v177);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v322);
      v178 = (_QWORD *)MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferWrapDim>((__n128 *)this);
      v179 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v180 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v179 + 24))(v179);
      MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v180);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v321);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v389);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[2] = v390;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v389;
      if (SBYTE7(v390) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 19)
          goto LABEL_326;
        v181 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SBYTE7(v390) != 19)
          goto LABEL_326;
        v181 = &__p;
      }
      v182 = v181->__r_.__value_.__r.__words[0];
      v183 = v181->__r_.__value_.__l.__size_;
      v184 = *(std::string::size_type *)((char *)&v181->__r_.__value_.__r.__words[1] + 3);
      if (v182 == 0x72775F6563696C73 && v183 == 0x735F6D69645F7061 && v184 == 0x657A69735F6D6964)
      {
        v187 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        v188 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187);
        MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v188);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v318);
        v189 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferSliceWrapDimSize>((__n128 *)this);
        v389 = 0u;
        v390 = 0u;
        v391 = 1065353216;
        v190 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (MIL::Scanner::Token::GetType(v190) == 9)
        {
          (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v317);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v317);
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v387);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v389, (uint64_t *)v387);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v387);
        }
        v191 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        v192 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 24))(v191);
        MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v192);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v316);
        if ((v41 - 31) >= 0x16)
        {
          v277 = __cxa_allocate_exception(8uLL);
          *v277 = MEMORY[0x1E0DE5060] + 16;
          __cxa_throw(v277, MEMORY[0x1E0DE4EB0], MEMORY[0x1E0DE4DD0]);
        }
        v33 = MIL::IRCircularBufferValueType::MakeWithShape(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), dword_1E0B07B6C[v41 - 31], (uint64_t)&v376, (uint64_t)&v374, (uint64_t)&v370, v178, v189, (uint64_t *)&v389);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v389);
        if (v370.__r_.__value_.__r.__words[0])
        {
          v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
          operator delete(v370.__r_.__value_.__l.__data_);
        }
        v90 = (void *)v374.__r_.__value_.__r.__words[0];
        if (!v374.__r_.__value_.__r.__words[0])
          goto LABEL_272;
        v374.__r_.__value_.__l.__size_ = v374.__r_.__value_.__r.__words[0];
        goto LABEL_271;
      }
LABEL_326:
      v267 = __cxa_allocate_exception(0x48uLL);
      v268 = *((_QWORD *)this + 4);
      v269 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v270 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v269 + 24))(v269);
      MIL::TextLocationFromScannerLocation(v268, v270, &v389);
      v320 = v389;
      v389 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(v319, "Slice wrap dim size field expected here");
      MIL::ParseError::ParseError((uint64_t)v267, &v320, (uint64_t)v319, 113);
    }
LABEL_325:
    v263 = __cxa_allocate_exception(0x48uLL);
    v264 = *((_QWORD *)this + 4);
    v265 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v266 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v265 + 24))(v265);
    MIL::TextLocationFromScannerLocation(v264, v266, &v389);
    v324 = v389;
    v389 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v323, "Wrap dim field expected here");
    MIL::ParseError::ParseError((uint64_t)v263, &v324, (uint64_t)v323, 113);
  }
  v96 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  v97 = MIL::Scanner::Token::GetType(v96);
  v98 = **((_QWORD **)this + 2);
  if (v97 == 24)
  {
    (*(void (**)(_QWORD *__return_ptr))(v98 + 16))(v315);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v315);
    v99 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 1, v100);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v314);
    v101 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
    v102 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 24))(v102);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 9, v103);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v313);
    v104 = (const MIL::IRValueType *)MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeLength>((__n128 *)this);
    v105 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 24))(v105);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 2, v106);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v312);
    return MIL::IRListValueType::MakeWithDimension(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v101, v104, v107);
  }
  v143 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v98 + 24))();
  v144 = MIL::Scanner::Token::GetType(v143);
  v145 = **((_QWORD **)this + 2);
  if (v144 == 25)
  {
    (*(void (**)(_QWORD *__return_ptr))(v145 + 16))(v311);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v311);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 1);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v310);
    v146 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v309);
    v147 = (const MIL::IRValueType *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 2);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v308);
    return MIL::IRDictionaryValueType::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v146, v147, v148);
  }
  v194 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v145 + 24))();
  v195 = MIL::Scanner::Token::GetType(v194);
  v196 = **((_QWORD **)this + 2);
  if (v195 != 26)
  {
    v199 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v196 + 24))();
    v200 = MIL::Scanner::Token::GetType(v199);
    v201 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v202 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 88))(v201);
    if (v200 == 30)
    {
      if (v202 <= 3)
      {
        v288 = *((_QWORD *)this + 4);
        v289 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        v290 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v289 + 24))(v289);
        MIL::TextLocationFromScannerLocation(v288, v290, &v389);
        v291 = __cxa_allocate_exception(0x48uLL);
        v304 = v389;
        if (*((_QWORD *)&v389 + 1))
        {
          v292 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
          do
            v293 = __ldxr(v292);
          while (__stxr(v293 + 1, v292));
        }
        std::string::basic_string[abi:ne180100]<0>(v303, "Syntax version 1.3+ is required for states");
        MIL::ParseError::ParseError((uint64_t)v291, &v304, (uint64_t)v303, 114);
      }
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v302);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v302);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 1);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v301);
      v203 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 2);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v300);
      return MIL::IRStateValueType::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v203, v204);
    }
    else
    {
      if (v202 < 2
        || (v205 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2)),
            DTypeFirstSet = (_QWORD *)MIL::ParserContext::GetDTypeFirstSet(*((MIL::ParserContext **)this + 3)),
            LODWORD(v389) = MIL::Scanner::Token::GetType(v205),
            !std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTypeFirstSet, (unsigned int *)&v389)))
      {
        v282 = *((_QWORD *)this + 4);
        v283 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        v284 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283);
        MIL::TextLocationFromScannerLocation(v282, v284, &v389);
        v285 = __cxa_allocate_exception(0x48uLL);
        v299 = v389;
        if (*((_QWORD *)&v389 + 1))
        {
          v286 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
          do
            v287 = __ldxr(v286);
          while (__stxr(v287 + 1, v286));
        }
        std::string::basic_string[abi:ne180100]<0>(v298, "Type declaration expected here.");
        MIL::ParseError::ParseError((uint64_t)v285, &v299, (uint64_t)v298, 113);
      }
      v207 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
      v208 = (void (***)(MIL::MILContextImpl *__hidden))*((_QWORD *)this + 1);
      v209 = MIL::TokenToIRDataType(v207);
      return MIL::IRTensorValueType::MakeScalar(v208, v209);
    }
  }
  (*(void (**)(_QWORD *__return_ptr))(v196 + 16))(v307);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v307);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 1);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v306);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeList>((__n128 *)this, (void **)&v389);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect((uint64_t)this, 2);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v305);
  v33 = MIL::IRTupleValueType::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), (uint64_t)&v389);
  v197 = (void *)v389;
  if ((_QWORD)v389)
  {
    *((_QWORD *)&v389 + 1) = v389;
    goto LABEL_288;
  }
  return v33;
}

void sub_1E0657704(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;

  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x980]);
  if (v2)
    __cxa_free_exception(v1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3 - 240);
  v5 = (void *)STACK[0x710];
  if (STACK[0x710])
  {
    STACK[0x718] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0x7C0];
  if (STACK[0x7C0])
  {
    STACK[0x7C8] = (unint64_t)v6;
    operator delete(v6);
  }
  v7 = (void *)STACK[0x828];
  if (STACK[0x828])
  {
    STACK[0x830] = (unint64_t)v7;
    operator delete(v7);
  }
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  if (SLOBYTE(STACK[0x8D7]) < 0)
    operator delete((void *)STACK[0x8C0]);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Expect(uint64_t a1, uint64_t a2)
{
  uint64_t Options;
  uint64_t v5;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  return MIL::Scanner::Expect(*(_QWORD *)(a1 + 16), a2, v5);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99D2D0;
  return MIL::Text::Parser::DType::Parse((MIL::Text::Parser::DType *)v3);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>(__n128 *a1@<X0>, void **a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99CAE8;
  MIL::Text::Parser::TensorShape::Parse((MIL::Text::Parser::TensorShape *)v4, a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99D118;
  MIL::Text::Parser::AttributesMap::Parse((MIL::Text::Parser::AttributesMap *)v4, a2);
}

uint64_t MIL::TokenToIRDataType(int a1)
{
  _QWORD *exception;

  if ((a1 - 31) >= 0x16)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x1E0DE5060] + 16;
    __cxa_throw(exception, MEMORY[0x1E0DE4EB0], MEMORY[0x1E0DE4DD0]);
  }
  return dword_1E0B07B6C[a1 - 31];
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferStrides>(__n128 *a1@<X0>, void **a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99CBF0;
  MIL::Text::Parser::TensorBufferStrides::Parse((MIL::Text::Parser::TensorBufferStrides *)v4, a2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferRowAlignment>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  MIL::MILContext *v2;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CC48;
  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(&v4);
  return MIL::IRConstantProperty::MakeUInt64Scalar((void (***)(MIL::MILContextImpl *__hidden))v4.n128_u64[1], v2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactors>(__n128 *a1@<X0>, void **a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99CD50;
  MIL::Text::Parser::TensorBufferInterleaveFactors::Parse((MIL::Text::Parser::TensorBufferInterleaveFactors *)v4, a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferBytesPerRowVec>(__n128 *a1@<X0>, void **a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99CE00;
  MIL::Text::Parser::PixelBufferBytesPerRowVec::Parse((MIL::Text::Parser::PixelBufferBytesPerRowVec *)v4, a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferNumSlicesVec>(__n128 *a1@<X0>, void **a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99CEB0;
  MIL::Text::Parser::PixelBufferNumSlicesVec::Parse((MIL::Text::Parser::PixelBufferNumSlicesVec *)v4, a2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferWrapDim>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  MIL::MILContext *v2;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CCA0;
  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(&v4);
  return MIL::IRConstantProperty::MakeInt64Scalar((void (***)(MIL::MILContextImpl *__hidden))v4.n128_u64[1], v2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferSliceWrapDimSize>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  MIL::MILContext *v2;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CCF8;
  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(&v4);
  return MIL::IRConstantDimension::Make((void (***)(MIL::MILContextImpl *__hidden))v4.n128_u64[1], v2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeLength>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CA38;
  return MIL::Text::Parser::TypeLength::Parse((MIL::Text::Parser::TypeLength *)v3);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeList>@<X0>(__n128 *a1@<X0>, void **a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C9E0;
  return MIL::Text::Parser::TypeList::Parse((MIL::Text::Parser::TypeList *)v5, a2);
}

uint64_t MIL::Text::Parser::TypeList::Parse@<X0>(MIL::Text::Parser::TypeList *this@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  MIL::Scanner::Token *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[4];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = ((uint64_t (*)(void))MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>)();
  v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
  v7 = &v5[v6];
  *v5 = v4;
  v8 = v5 + 1;
  v10 = (char *)*a2;
  v9 = (char *)a2[1];
  if (v9 != *a2)
  {
    do
    {
      v11 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      *--v5 = v11;
    }
    while (v9 != v10);
    v9 = (char *)*a2;
  }
  *a2 = v5;
  a2[1] = v8;
  a2[2] = v7;
  if (v9)
    operator delete(v9);
  while (1)
  {
    a2[1] = v8;
    v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    result = MIL::Scanner::Token::GetType(v12);
    if ((_DWORD)result != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v27);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
    v14 = MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
    v15 = v14;
    v17 = (uint64_t *)a2[1];
    v16 = (unint64_t)a2[2];
    if ((unint64_t)v17 >= v16)
    {
      v18 = ((char *)v17 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v19 = v16 - (_QWORD)*a2;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v21);
      else
        v22 = 0;
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v15;
      v8 = v23 + 1;
      v25 = (char *)*a2;
      v24 = (char *)a2[1];
      if (v24 != *a2)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v23 = v26;
        }
        while (v24 != v25);
        v24 = (char *)*a2;
      }
      *a2 = v23;
      a2[1] = v8;
      a2[2] = &v22[8 * v21];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v17 = v14;
      v8 = v17 + 1;
    }
  }
  return result;
}

void sub_1E0658468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TypeLength::Parse(MIL::Text::Parser::TypeLength *this)
{
  MIL::Scanner::Token *v2;
  MIL::MILContext *v4;
  _QWORD v5[4];

  v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v2) == 13)
  {
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v5);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v5);
    return MIL::IRUnknownDimension::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), 0);
  }
  else
  {
    v4 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>((__n128 *)this);
    return MIL::IRConstantDimension::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v4);
  }
}

unint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99DC70;
  return MIL::Text::Parser::UINT64::Parse((MIL::Text::Parser::UINT64 *)v3);
}

uint64_t *MIL::Text::Parser::DimLength::Parse(MIL::Text::Parser::DimLength *this)
{
  uint64_t *result;
  MIL::Scanner::Token *v3;
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  void *exception;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;
  _QWORD v13[4];

  result = MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt<MIL::Text::Parser::TypeLength>((__n128 *)this);
  if (!result)
  {
    v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v3) != 15)
    {
      v4 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v4, v6, &v12);
      exception = __cxa_allocate_exception(0x48uLL);
      v11 = v12;
      if (*((_QWORD *)&v12 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      std::string::basic_string[abi:ne180100]<0>(v10, "Dimension length expected here.");
      MIL::ParseError::ParseError((uint64_t)exception, &v11, (uint64_t)v10, 105);
    }
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v13);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v13);
    return (uint64_t *)MIL::IRUnknownDimension::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), (MIL::MILContext *)1);
  }
  return result;
}

void sub_1E0658680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt<MIL::Text::Parser::TypeLength>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CA38;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::ParseOpt((uint64_t)v3);
}

void MIL::Text::Parser::TensorShape::Parse(MIL::Text::Parser::TensorShape *this@<X0>, void **a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  MIL::Scanner::Token *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t **v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::ParseOpt<MIL::Text::Parser::DimLength>((__n128 *)this);
  if (v6)
  {
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
    v9 = &v7[v8];
    *v7 = v6;
    v10 = v7 + 1;
    v12 = (char *)*a2;
    v11 = (char *)a2[1];
    if (v11 != *a2)
    {
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v7 = v13;
      }
      while (v11 != v12);
      v11 = (char *)*a2;
    }
    *a2 = v7;
    a2[1] = v10;
    a2[2] = v9;
    if (v11)
      operator delete(v11);
    while (1)
    {
      a2[1] = v10;
      v14 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      if (MIL::Scanner::Token::GetType(v14) != 9)
        break;
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v31);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v31);
      v15 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::Parse<MIL::Text::Parser::DimLength>((__n128 *)this);
      v16 = v15;
      v18 = (uint64_t **)a2[1];
      v17 = (unint64_t)a2[2];
      if ((unint64_t)v18 >= v17)
      {
        v19 = ((char *)v18 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v20 = v17 - (_QWORD)*a2;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v22);
        else
          v23 = 0;
        v24 = (uint64_t **)&v23[8 * v19];
        *v24 = v16;
        v10 = v24 + 1;
        v26 = (char *)*a2;
        v25 = (char *)a2[1];
        if (v25 != *a2)
        {
          do
          {
            v27 = (uint64_t *)*((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)*a2;
        }
        *a2 = v24;
        a2[1] = v10;
        a2[2] = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v18 = v15;
        v10 = v18 + 1;
      }
    }
  }
  v28 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v29);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v30);
}

void sub_1E0658934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::ParseOpt<MIL::Text::Parser::DimLength>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CA90;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt((uint64_t)v3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::Parse<MIL::Text::Parser::DimLength>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CA90;
  return MIL::Text::Parser::DimLength::Parse((MIL::Text::Parser::DimLength *)v3);
}

uint64_t MIL::Text::Parser::TensorBufferInterleaveFactor::Parse(MIL::Text::Parser::TensorBufferInterleaveFactor *this)
{
  MIL::MILContext *v2;

  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::Parse<MIL::Text::Parser::UINT8>((__n128 *)this);
  return MIL::IRConstantProperty::MakeUInt8Scalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::Parse<MIL::Text::Parser::UINT8>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99DB68;
  return MIL::Text::Parser::UINT8::Parse((MIL::Text::Parser::UINT8 *)v3);
}

uint64_t MIL::Text::Parser::TensorBufferStride::Parse(MIL::Text::Parser::TensorBufferStride *this)
{
  MIL::Scanner::Token *v2;
  MIL::MILContext *v4;
  _QWORD v5[4];

  v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v2) == 13)
  {
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v5);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v5);
    return MIL::IRUnknownProperty::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), 0);
  }
  else
  {
    v4 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>((__n128 *)this);
    return MIL::IRConstantProperty::MakeInt64Scalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v4);
  }
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99DC18;
  return MIL::Text::Parser::INT64::Parse((MIL::Text::Parser::INT64 *)v3);
}

void MIL::Text::Parser::TensorBufferStrides::Parse(MIL::Text::Parser::TensorBufferStrides *this@<X0>, void **a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  MIL::Scanner::Token *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferStride>((__n128 *)this);
  if (v6)
  {
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
    v9 = &v7[v8];
    *v7 = v6;
    v10 = v7 + 1;
    v12 = (char *)*a2;
    v11 = (char *)a2[1];
    if (v11 != *a2)
    {
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v7 = v13;
      }
      while (v11 != v12);
      v11 = (char *)*a2;
    }
    *a2 = v7;
    a2[1] = v10;
    a2[2] = v9;
    if (v11)
      operator delete(v11);
    while (1)
    {
      a2[1] = v10;
      v14 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      if (MIL::Scanner::Token::GetType(v14) != 9)
        break;
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v31);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v31);
      v15 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferStride>((__n128 *)this);
      v16 = v15;
      v18 = (uint64_t *)a2[1];
      v17 = (unint64_t)a2[2];
      if ((unint64_t)v18 >= v17)
      {
        v19 = ((char *)v18 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v20 = v17 - (_QWORD)*a2;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v22);
        else
          v23 = 0;
        v24 = (uint64_t *)&v23[8 * v19];
        *v24 = v16;
        v10 = v24 + 1;
        v26 = (char *)*a2;
        v25 = (char *)a2[1];
        if (v25 != *a2)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)*a2;
        }
        *a2 = v24;
        a2[1] = v10;
        a2[2] = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v18 = v15;
        v10 = v18 + 1;
      }
    }
  }
  v28 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v29);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v30);
}

void sub_1E0658D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferStride>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CB98;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::ParseOpt((uint64_t)v3);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferStride>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CB98;
  return MIL::Text::Parser::TensorBufferStride::Parse((MIL::Text::Parser::TensorBufferStride *)v3);
}

uint64_t MIL::Text::Parser::TensorBufferRowAlignment::Parse(MIL::Text::Parser::TensorBufferRowAlignment *this)
{
  MIL::MILContext *v2;

  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>((__n128 *)this);
  return MIL::IRConstantProperty::MakeUInt64Scalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v2);
}

uint64_t MIL::Text::Parser::CircularBufferWrapDim::Parse(MIL::Text::Parser::CircularBufferWrapDim *this)
{
  MIL::MILContext *v2;

  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>((__n128 *)this);
  return MIL::IRConstantProperty::MakeInt64Scalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v2);
}

uint64_t MIL::Text::Parser::CircularBufferSliceWrapDimSize::Parse(MIL::Text::Parser::CircularBufferSliceWrapDimSize *this)
{
  MIL::MILContext *v2;

  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>((__n128 *)this);
  return MIL::IRConstantDimension::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v2);
}

void MIL::Text::Parser::TensorBufferInterleaveFactors::Parse(MIL::Text::Parser::TensorBufferInterleaveFactors *this@<X0>, void **a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  MIL::Scanner::Token *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferInterleaveFactor>((__n128 *)this);
  if (v6)
  {
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
    v9 = &v7[v8];
    *v7 = v6;
    v10 = v7 + 1;
    v12 = (char *)*a2;
    v11 = (char *)a2[1];
    if (v11 != *a2)
    {
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v7 = v13;
      }
      while (v11 != v12);
      v11 = (char *)*a2;
    }
    *a2 = v7;
    a2[1] = v10;
    a2[2] = v9;
    if (v11)
      operator delete(v11);
    while (1)
    {
      a2[1] = v10;
      v14 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
      if (MIL::Scanner::Token::GetType(v14) != 9)
        break;
      (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v31);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v31);
      v15 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactor>((__n128 *)this);
      v16 = v15;
      v18 = (uint64_t *)a2[1];
      v17 = (unint64_t)a2[2];
      if ((unint64_t)v18 >= v17)
      {
        v19 = ((char *)v18 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v20 = v17 - (_QWORD)*a2;
        v21 = v20 >> 2;
        if (v20 >> 2 <= (unint64_t)(v19 + 1))
          v21 = v19 + 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v22);
        else
          v23 = 0;
        v24 = (uint64_t *)&v23[8 * v19];
        *v24 = v16;
        v10 = v24 + 1;
        v26 = (char *)*a2;
        v25 = (char *)a2[1];
        if (v25 != *a2)
        {
          do
          {
            v27 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = (char *)*a2;
        }
        *a2 = v24;
        a2[1] = v10;
        a2[2] = &v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v18 = v15;
        v10 = v18 + 1;
      }
    }
  }
  v28 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v29);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v30);
}

void sub_1E06590C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferInterleaveFactor>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99CB40;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::ParseOpt((uint64_t)v3);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactor>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  MIL::MILContext *v2;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CB40;
  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::Parse<MIL::Text::Parser::UINT8>(&v4);
  return MIL::IRConstantProperty::MakeUInt8Scalar((void (***)(MIL::MILContextImpl *__hidden))v4.n128_u64[1], v2);
}

uint64_t MIL::Text::Parser::PixelBufferBytesPerRow::Parse(MIL::Text::Parser::PixelBufferBytesPerRow *this)
{
  MIL::MILContext *v2;

  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>((__n128 *)this);
  return MIL::IRConstantProperty::MakeInt64Scalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v2);
}

void MIL::Text::Parser::PixelBufferBytesPerRowVec::Parse(MIL::Text::Parser::PixelBufferBytesPerRowVec *this@<X0>, void **a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  MIL::Scanner::Token *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferBytesPerRow>((__n128 *)this);
  v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
  v9 = &v7[v8];
  *v7 = v6;
  v10 = v7 + 1;
  v12 = (char *)*a2;
  v11 = (char *)a2[1];
  if (v11 != *a2)
  {
    do
    {
      v13 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *--v7 = v13;
    }
    while (v11 != v12);
    v11 = (char *)*a2;
  }
  *a2 = v7;
  a2[1] = v10;
  a2[2] = v9;
  if (v11)
    operator delete(v11);
  while (1)
  {
    a2[1] = v10;
    v14 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v14) != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v31);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v31);
    v15 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferBytesPerRow>((__n128 *)this);
    v16 = v15;
    v18 = (uint64_t *)a2[1];
    v17 = (unint64_t)a2[2];
    if ((unint64_t)v18 >= v17)
    {
      v19 = ((char *)v18 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v20 = v17 - (_QWORD)*a2;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v19];
      *v24 = v16;
      v10 = v24 + 1;
      v26 = (char *)*a2;
      v25 = (char *)a2[1];
      if (v25 != *a2)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v24 = v27;
        }
        while (v25 != v26);
        v25 = (char *)*a2;
      }
      *a2 = v24;
      a2[1] = v10;
      a2[2] = &v23[8 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v18 = v15;
      v10 = v18 + 1;
    }
  }
  v28 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v29);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v30);
}

void sub_1E06593D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferBytesPerRow>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  MIL::MILContext *v2;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CDA8;
  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(&v4);
  return MIL::IRConstantProperty::MakeInt64Scalar((void (***)(MIL::MILContextImpl *__hidden))v4.n128_u64[1], v2);
}

uint64_t MIL::Text::Parser::PixelBufferNumSlices::Parse(MIL::Text::Parser::PixelBufferNumSlices *this)
{
  MIL::MILContext *v2;

  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>((__n128 *)this);
  return MIL::IRConstantProperty::MakeInt64Scalar(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), v2);
}

void MIL::Text::Parser::PixelBufferNumSlicesVec::Parse(MIL::Text::Parser::PixelBufferNumSlicesVec *this@<X0>, void **a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  MIL::Scanner::Token *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  char v32[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferNumSlices>((__n128 *)this);
  v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
  v9 = &v7[v8];
  *v7 = v6;
  v10 = v7 + 1;
  v12 = (char *)*a2;
  v11 = (char *)a2[1];
  if (v11 != *a2)
  {
    do
    {
      v13 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *--v7 = v13;
    }
    while (v11 != v12);
    v11 = (char *)*a2;
  }
  *a2 = v7;
  a2[1] = v10;
  a2[2] = v9;
  if (v11)
    operator delete(v11);
  while (1)
  {
    a2[1] = v10;
    v14 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v14) != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v31);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v31);
    v15 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferNumSlices>((__n128 *)this);
    v16 = v15;
    v18 = (uint64_t *)a2[1];
    v17 = (unint64_t)a2[2];
    if ((unint64_t)v18 >= v17)
    {
      v19 = ((char *)v18 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v20 = v17 - (_QWORD)*a2;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v22);
      else
        v23 = 0;
      v24 = (uint64_t *)&v23[8 * v19];
      *v24 = v16;
      v10 = v24 + 1;
      v26 = (char *)*a2;
      v25 = (char *)a2[1];
      if (v25 != *a2)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v24 = v27;
        }
        while (v25 != v26);
        v25 = (char *)*a2;
      }
      *a2 = v24;
      a2[1] = v10;
      a2[2] = &v23[8 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v18 = v15;
      v10 = v18 + 1;
    }
  }
  v28 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v29);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v30);
}

void sub_1E0659684(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferNumSlices>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  MIL::MILContext *v2;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CE58;
  v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(&v4);
  return MIL::IRConstantProperty::MakeInt64Scalar((void (***)(MIL::MILContextImpl *__hidden))v4.n128_u64[1], v2);
}

void MIL::Text::Parser::Argument::Parse(__n128 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const MIL::IROperator *v8;
  int IsConstexprOpTakingInputs;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t Options;
  uint64_t v40;
  void *exception;
  unint64_t *v42;
  unint64_t v43;
  _QWORD v44[3];
  __int128 v45;
  __int128 v46;
  std::string v47;
  __int128 v48;
  __int128 v49;
  std::string v50;
  __int128 v51;
  std::string v52;

  MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::ID>(this, &v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v52.__r_.__value_.__l.__size_)
    {
      v7 = this[1].n128_i64[1];
      v4 = &this[1].n128_i64[1];
      v5 = v7;
      std::string::__init_copy_ctor_external(&v50, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
LABEL_6:
      MIL::ParserContext::GetConstexprVariableValue(v5, (unsigned __int8 *)&v50, &v51);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if ((_QWORD)v51)
      {
        MIL::ParserContext::GetCurrentOperator(*v4, &v49);
        IsConstexprOpTakingInputs = MIL::Util::IsConstexprOpTakingInputs((MIL::Util *)v49, v8);
        v10 = IsConstexprOpTakingInputs;
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
        if (!*((_QWORD *)&v49 + 1))
          goto LABEL_13;
        v12 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          if (v10)
          {
LABEL_14:
            v48 = v51;
            if (*((_QWORD *)&v51 + 1))
            {
              v14 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
              do
                v15 = __ldxr(v14);
              while (__stxr(v15 + 1, v14));
            }
            MIL::IRArgument::Make(&v48, (uint64_t *)&v49);
            v16 = v49;
            *a2 = v49;
            if (v16)
            {
              v17 = (_QWORD *)operator new();
              v18 = v49;
              *v17 = &unk_1EA9942C8;
              v17[1] = 0;
              v17[2] = 0;
              v17[3] = v18;
            }
            else
            {
              v17 = 0;
            }
            a2[1] = v17;
            *(_QWORD *)&v49 = 0;
            v34 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
            if (*((_QWORD *)&v48 + 1))
            {
              v35 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
            if (*((_QWORD *)&v51 + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
              do
                v27 = __ldaxr(v37);
              while (__stlxr(v27 - 1, v37));
              goto LABEL_55;
            }
            goto LABEL_57;
          }
        }
        else
        {
LABEL_13:
          if (IsConstexprOpTakingInputs)
            goto LABEL_14;
        }
      }
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
      else
        v47 = v52;
      MIL::IRArgument::Make((uint64_t)&v47, (uint64_t *)&v51);
      v31 = v51;
      *a2 = v51;
      if (v31)
      {
        v32 = (_QWORD *)operator new();
        v33 = v51;
        *v32 = &unk_1EA9942C8;
        v32[1] = 0;
        v32[2] = 0;
        v32[3] = v33;
      }
      else
      {
        v32 = 0;
      }
      a2[1] = v32;
      *(_QWORD *)&v51 = 0;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      goto LABEL_57;
    }
  }
  else if (*((_BYTE *)&v52.__r_.__value_.__s + 23))
  {
    v6 = this[1].n128_i64[1];
    v4 = &this[1].n128_i64[1];
    v5 = v6;
    v50 = v52;
    goto LABEL_6;
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::Value>(this, &v51);
  if (!(_QWORD)v51)
  {
    v38 = this[2].n128_u64[0];
    Options = MIL::ParserContext::GetOptions((MIL::ParserContext *)this[1].n128_u64[1]);
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::TextLocationFromScannerLocation(v38, v40, &v49);
    exception = __cxa_allocate_exception(0x48uLL);
    v45 = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    std::string::basic_string[abi:ne180100]<0>(v44, "Argument binding must be either a Value or a name.");
    MIL::ParseError::ParseError((uint64_t)exception, &v45, (uint64_t)v44, 101);
  }
  v46 = v51;
  v51 = 0uLL;
  MIL::IRArgument::Make(&v46, (uint64_t *)&v49);
  v19 = v49;
  *a2 = v49;
  if (v19)
  {
    v20 = (_QWORD *)operator new();
    v21 = v49;
    *v20 = &unk_1EA9942C8;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
  }
  else
  {
    v20 = 0;
  }
  a2[1] = v20;
  *(_QWORD *)&v49 = 0;
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_55:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_57:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
}

void sub_1E0659B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  int v30;
  uint64_t v31;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v31 - 72);
      if (*(char *)(v31 - 33) < 0)
        operator delete(*(void **)(v31 - 56));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v30)
      goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::ID>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99DDD0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::ID,std::string>::ParseOpt((uint64_t)v5, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::Value>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C5C0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::ParseOpt((uint64_t)v5, a2);
}

void MIL::Text::Parser::ArgumentList::Parse(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  _QWORD v16[4];
  __int128 v17;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>(this, &v17);
  std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)a2, &v17);
  while (1)
  {
    v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    if (MIL::Scanner::Token::GetType(v4) != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this[1].n128_u64[0] + 16))(v16);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
    MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>(this, &v15);
    v5 = v15;
    v15 = 0uLL;
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v17 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)a2, &v17);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E0659E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CF08;
  MIL::Text::Parser::Argument::Parse(&v4, a2);
}

void MIL::Text::Parser::IDArgumentBinding::Parse(MIL::Text::Parser::IDArgumentBinding *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  MIL::Scanner::Token *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD v16[4];
  _BYTE v17[32];
  std::string v18;
  void **v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v18);
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 0, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v17);
  v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v6) == 5)
  {
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v16);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBinding,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::ArgumentList>((__n128 *)this, (uint64_t)&v14);
    v7 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 6, v8);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v13);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)a2, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      *(std::string *)a2 = v18;
    *(_OWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 40) = v15;
    v15 = 0;
    v14 = 0uLL;
    v19 = (void **)&v14;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
  else
  {
    MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>((__n128 *)this, v21);
    v14 = 0uLL;
    v15 = 0;
    v19 = (void **)&v14;
    v20 = 0;
    v9 = operator new(0x10uLL);
    *(_QWORD *)&v14 = v9;
    *((_QWORD *)&v14 + 1) = v9;
    v15 = v9 + 2;
    v10 = v21[1];
    *v9 = v21[0];
    v9[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_QWORD *)&v14 + 1) = v9 + 2;
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<true,0>((std::string *)a2, (__int128 *)&v18, (_QWORD **)&v14);
    v19 = (void **)&v14;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v19);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v21);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1E065A114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 - 40);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBinding,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::ArgumentList>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4.n128_u64[0] = (unint64_t)&off_1EA99CF60;
  MIL::Text::Parser::ArgumentList::Parse(&v4, a2);
}

void MIL::Text::Parser::IDArgumentBindingMap::Parse(MIL::Text::Parser::IDArgumentBindingMap *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v4;
  char v5;
  unint64_t v6;
  uint64_t Options;
  uint64_t v8;
  void *exception;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v12[24];
  __int128 v13;
  __int128 v14;
  std::string v15;
  std::string __p;
  uint64_t v17;
  _QWORD v18[4];
  __int128 v19;
  char v20;
  uint64_t v21;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::IDArgumentBinding>((__n128 *)this, (uint64_t)&v19);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>((uint64_t **)a2, (const void **)&v19, &v19);
  while (1)
  {
    v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v4) != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v18);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v18);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::IDArgumentBinding>((__n128 *)this, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v15 = __p;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
    if (!v5)
    {
      v6 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v6, v8, &v14);
      exception = __cxa_allocate_exception(0x48uLL);
      v13 = v14;
      if (*((_QWORD *)&v14 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::operator+<char>();
      MIL::ParseError::ParseError((uint64_t)exception, &v13, (uint64_t)v12, 100);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v20 < 0)
    operator delete((void *)v19);
}

void sub_1E065A3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::~pair(v28 - 96);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v27, *(_QWORD **)(v27 + 8));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::IDArgumentBinding>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v4[2];
  __n128 v5;
  uint64_t v6;

  v4[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4[0] = &off_1EA99CFB8;
  MIL::Text::Parser::IDArgumentBinding::Parse((MIL::Text::Parser::IDArgumentBinding *)v4, a2);
}

void MIL::Text::Parser::IDValueBinding::Parse(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  std::string __p;

  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &__p);
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBinding,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::ValueAssign>(this, &v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)a2 = __p;
  *(_OWORD *)(a2 + 24) = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E065A550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBinding,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::ValueAssign>@<X0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  _QWORD v5[2];
  __n128 v6;
  uint64_t v7;

  v5[1] = a1->n128_u64[1];
  v6 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  v7 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v5[0] = &off_1EA99C618;
  return MIL::Text::Parser::ValueAssign::Parse((MIL::Text::Parser::ValueAssign *)v5, a2);
}

uint64_t MIL::Text::Parser::IDValueBindingMap::Parse@<X0>(MIL::Text::Parser::IDValueBindingMap *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  MIL::Scanner::Token *v7;
  uint64_t result;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t Options;
  uint64_t v13;
  void *exception;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v17[24];
  __int128 v18;
  __int128 v19;
  std::string v20;
  _QWORD v21[4];
  std::string v22;
  std::__shared_weak_count *v23;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::IDValueBinding>((__n128 *)this, (uint64_t)&v22);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>(a2, (unsigned __int8 *)&v22, (uint64_t)&v22);
  v4 = v23;
  if (!v23)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
LABEL_4:
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  while (1)
  {
LABEL_6:
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    result = MIL::Scanner::Token::GetType(v7);
    if ((_DWORD)result != 9)
      return result;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v21);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v21);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::IDValueBinding>((__n128 *)this, (uint64_t)&v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v20 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>(a2, (unsigned __int8 *)&v22, (uint64_t)&v22);
    if (!v9)
    {
      v11 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v11, v13, &v19);
      exception = __cxa_allocate_exception(0x48uLL);
      v18 = v19;
      if (*((_QWORD *)&v19 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      std::operator+<char>();
      MIL::ParseError::ParseError((uint64_t)exception, &v18, (uint64_t)v17, 100);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    v4 = v23;
    if (v23)
    {
      v10 = (unint64_t *)&v23->__shared_owners_;
      do
        v6 = __ldaxr(v10);
      while (__stlxr(v6 - 1, v10));
      goto LABEL_4;
    }
  }
}

void sub_1E065A7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t v28;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      if (a25 < 0)
        operator delete(a20);
      std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v28 - 72);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v25);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v27)
      goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void sub_1E065A83C()
{
  JUMPOUT(0x1E065A848);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::IDValueBinding>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::Scanner::Token *v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4.n128_u64[0] = (unint64_t)&off_1EA99D068;
  MIL::Text::Parser::IDValueBinding::Parse(&v4, a2);
}

void MIL::Text::Parser::AttributesMap::Parse(MIL::Text::Parser::AttributesMap *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 3, v5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IDValueBindingMap>((__n128 *)this, a2);
  v6 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 4, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v8);
}

void sub_1E065A974(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::IDTypeBinding::Parse(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  std::string v6;

  v4 = MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  MIL::IRNamedValueType::Make((uint64_t *)&__p, v4, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1E065AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **MIL::Text::Parser::IDTypeBindingMap::Parse@<X0>(MIL::Text::Parser::IDTypeBindingMap *this@<X0>, uint64_t a2@<X8>)
{
  const void **Name;
  MIL::Scanner::Token *v5;
  MIL::IRNamedValueType *v6;
  void **v7;
  void **v8;
  const void **v9;
  char v10;
  unint64_t v11;
  uint64_t Options;
  uint64_t v13;
  void *exception;
  unint64_t *v15;
  unint64_t v16;
  void **result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[4];
  MIL::IRNamedValueType *v22;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>((__n128 *)this, (uint64_t *)&v22);
  Name = (const void **)MIL::IRNamedValueType::GetName(v22);
  *(_QWORD *)&v20 = MIL::IRNamedValueType::GetType(v22);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>((uint64_t **)a2, Name, (uint64_t)Name, &v20);
  while (1)
  {
    v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v5) != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v21);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v21);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>((__n128 *)this, (uint64_t *)&v20);
    v6 = (MIL::IRNamedValueType *)v20;
    *(_QWORD *)&v20 = 0;
    v7 = (void **)v22;
    v22 = v6;
    if (v7)
    {
      MIL::IRNamedValueType::~IRNamedValueType(v7);
      MEMORY[0x1E0C023A0]();
      v8 = (void **)v20;
      *(_QWORD *)&v20 = 0;
      if (v8)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v8);
        MEMORY[0x1E0C023A0]();
      }
    }
    v9 = (const void **)MIL::IRNamedValueType::GetName(v22);
    *(_QWORD *)&v20 = MIL::IRNamedValueType::GetType(v22);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>((uint64_t **)a2, v9, (uint64_t)v9, &v20);
    if (!v10)
    {
      v11 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v11, v13, &v20);
      exception = __cxa_allocate_exception(0x48uLL);
      v19 = v20;
      if (*((_QWORD *)&v20 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      MIL::IRNamedValueType::GetName(v22);
      std::operator+<char>();
      MIL::ParseError::ParseError((uint64_t)exception, &v19, (uint64_t)&v18, 100);
    }
  }
  result = (void **)v22;
  v22 = 0;
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    return (void **)MEMORY[0x1E0C023A0]();
  }
  return result;
}

void sub_1E065AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;

  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
      std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100]((void ***)(v20 - 40), 0);
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v17, *(char **)(v17 + 8));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  MIL::Scanner::Token *v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;

  v4.n128_u64[1] = a1->n128_u64[1];
  v5 = a1[1];
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  v6 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v3);
  v4.n128_u64[0] = (unint64_t)&off_1EA99D170;
  MIL::Text::Parser::IDTypeBinding::Parse(&v4, a2);
}

uint64_t MIL::Text::Parser::IDTypeBindingList::Parse@<X0>(MIL::Text::Parser::IDTypeBindingList *this@<X0>, MIL::IRNamedValueType ***a2@<X8>)
{
  MIL::IRNamedValueType *v4;
  _QWORD *v5;
  MIL::IRNamedValueType *v6;
  unint64_t v7;
  MIL::IRNamedValueType **v8;
  MIL::IRNamedValueType **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  MIL::IRNamedValueType **v16;
  MIL::IRNamedValueType **v17;
  MIL::IRNamedValueType **v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  MIL::IRNamedValueType **v22;
  void **v23;
  MIL::Scanner::Token *v24;
  uint64_t result;
  MIL::IRNamedValueType **v26;
  MIL::IRNamedValueType **v27;
  unsigned __int8 *Name;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  MIL::IRNamedValueType *v35;
  _QWORD *v36;
  MIL::IRNamedValueType *v37;
  unint64_t v38;
  MIL::IRNamedValueType **v39;
  MIL::IRNamedValueType **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  MIL::IRNamedValueType **v47;
  MIL::IRNamedValueType **v48;
  MIL::IRNamedValueType **v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  MIL::IRNamedValueType **v53;
  void **v54;
  unint64_t v55;
  uint64_t Options;
  uint64_t v57;
  void *exception;
  unint64_t *v59;
  unint64_t v60;
  char v61[24];
  __int128 v62;
  MIL::IRNamedValueType *v63[4];
  MIL::IRNamedValueType *v64;
  MIL::IRNamedValueType *v65;
  _QWORD *v66;
  _BYTE v67[24];
  MIL::IRNamedValueType **v68;
  _QWORD *v69;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>((__n128 *)this, (uint64_t *)&v64);
  v4 = v64;
  v65 = v64;
  if (v64)
  {
    v5 = (_QWORD *)operator new();
    v6 = v64;
    *v5 = &unk_1EA993900;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  v66 = v5;
  v64 = 0;
  v7 = (unint64_t)a2[2];
  v8 = a2[1];
  if ((unint64_t)v8 >= v7)
  {
    v10 = ((char *)v8 - (char *)*a2) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)*a2;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v69 = a2 + 2;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a2 + 2), v13);
    v16 = (MIL::IRNamedValueType **)&v14[16 * v10];
    *v16 = v4;
    v16[1] = (MIL::IRNamedValueType *)v5;
    v65 = 0;
    v66 = 0;
    v18 = *a2;
    v17 = a2[1];
    if (v17 == *a2)
    {
      v21 = vdupq_n_s64((unint64_t)v17);
      v19 = &v14[16 * v10];
    }
    else
    {
      v19 = &v14[16 * v10];
      do
      {
        v20 = *((_OWORD *)v17 - 1);
        v17 -= 2;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *v17 = 0;
        v17[1] = 0;
      }
      while (v17 != v18);
      v21 = *(int64x2_t *)a2;
    }
    v9 = v16 + 2;
    *a2 = (MIL::IRNamedValueType **)v19;
    a2[1] = v16 + 2;
    *(int64x2_t *)&v67[8] = v21;
    v22 = a2[2];
    a2[2] = (MIL::IRNamedValueType **)&v14[16 * v15];
    v68 = v22;
    *(_QWORD *)v67 = v21.i64[0];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v67);
  }
  else
  {
    *v8 = v4;
    v8[1] = (MIL::IRNamedValueType *)v5;
    v9 = v8 + 2;
  }
  a2[1] = v9;
  v23 = (void **)v64;
  v64 = 0;
  if (v23)
  {
    MIL::IRNamedValueType::~IRNamedValueType(v23);
    MEMORY[0x1E0C023A0]();
  }
  while (1)
  {
    v24 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    result = MIL::Scanner::Token::GetType(v24);
    if ((_DWORD)result != 9)
      return result;
    (*(void (**)(MIL::IRNamedValueType **__return_ptr))(**((_QWORD **)this + 2) + 16))(v63);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v63);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>((__n128 *)this, (uint64_t *)&v64);
    v26 = *a2;
    v27 = a2[1];
    while (v26 != v27)
    {
      Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v26);
      v29 = MIL::IRNamedValueType::GetName(v64);
      v30 = Name[23];
      if ((v30 & 0x80u) == 0)
        v31 = Name[23];
      else
        v31 = *((_QWORD *)Name + 1);
      v32 = *(unsigned __int8 *)(v29 + 23);
      v33 = (char)v32;
      if ((v32 & 0x80u) != 0)
        v32 = *(_QWORD *)(v29 + 8);
      if (v31 == v32)
      {
        if (v33 >= 0)
          v34 = (unsigned __int8 *)v29;
        else
          v34 = *(unsigned __int8 **)v29;
        if ((v30 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)Name, v34, *((_QWORD *)Name + 1)))
          {
LABEL_59:
            v55 = *((_QWORD *)this + 4);
            Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
            v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
            MIL::TextLocationFromScannerLocation(v55, v57, v67);
            exception = __cxa_allocate_exception(0x48uLL);
            v62 = *(_OWORD *)v67;
            if (*(_QWORD *)&v67[8])
            {
              v59 = (unint64_t *)(*(_QWORD *)&v67[8] + 8);
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
            MIL::IRNamedValueType::GetName(v64);
            std::operator+<char>();
            MIL::ParseError::ParseError((uint64_t)exception, &v62, (uint64_t)v61, 100);
          }
        }
        else
        {
          if (!Name[23])
            goto LABEL_59;
          while (*Name == *v34)
          {
            ++Name;
            ++v34;
            if (!--v30)
              goto LABEL_59;
          }
        }
      }
      v26 += 2;
    }
    v35 = v64;
    v65 = v64;
    if (v64)
    {
      v36 = (_QWORD *)operator new();
      v37 = v64;
      *v36 = &unk_1EA993900;
      v36[1] = 0;
      v36[2] = 0;
      v36[3] = v37;
    }
    else
    {
      v36 = 0;
    }
    v66 = v36;
    v64 = 0;
    v39 = a2[1];
    v38 = (unint64_t)a2[2];
    if ((unint64_t)v39 >= v38)
    {
      v41 = ((char *)v39 - (char *)*a2) >> 4;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v43 = v38 - (_QWORD)*a2;
      if (v43 >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      v69 = a2 + 2;
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a2 + 2), v44);
      v47 = (MIL::IRNamedValueType **)&v45[16 * v41];
      *v47 = v35;
      v47[1] = (MIL::IRNamedValueType *)v36;
      v49 = *a2;
      v48 = a2[1];
      if (v48 == *a2)
      {
        v52 = vdupq_n_s64((unint64_t)v48);
        v50 = &v45[16 * v41];
      }
      else
      {
        v50 = &v45[16 * v41];
        do
        {
          v51 = *((_OWORD *)v48 - 1);
          v48 -= 2;
          *((_OWORD *)v50 - 1) = v51;
          v50 -= 16;
          *v48 = 0;
          v48[1] = 0;
        }
        while (v48 != v49);
        v52 = *(int64x2_t *)a2;
      }
      v40 = v47 + 2;
      *a2 = (MIL::IRNamedValueType **)v50;
      a2[1] = v47 + 2;
      *(int64x2_t *)&v67[8] = v52;
      v53 = a2[2];
      a2[2] = (MIL::IRNamedValueType **)&v45[16 * v46];
      v68 = v53;
      *(_QWORD *)v67 = v52.i64[0];
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v67);
    }
    else
    {
      *v39 = v35;
      v39[1] = (MIL::IRNamedValueType *)v36;
      v40 = v39 + 2;
    }
    a2[1] = v40;
    v54 = (void **)v64;
    v64 = 0;
    if (v54)
    {
      MIL::IRNamedValueType::~IRNamedValueType(v54);
      MEMORY[0x1E0C023A0]();
    }
  }
}

void sub_1E065B1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100](&a22, 0);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::IDList::Parse@<X0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  MIL::Scanner::Token *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  _QWORD v30[4];
  std::string __p;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &__p);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v10)
      v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v10);
    else
      v11 = 0;
    v12 = v11 + v7;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    memset(&__p, 0, sizeof(__p));
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v14 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a2 + 8) = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    *(_QWORD *)(a2 + 8) = v5 + 24;
  }
  while (1)
  {
    v16 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    result = MIL::Scanner::Token::GetType(v16);
    if ((_DWORD)result != 9)
      break;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this[1].n128_u64[0] + 16))(v30);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v30);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &__p);
    v19 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a2 + 16);
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)a2) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a2) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v24)
        v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v24);
      else
        v25 = 0;
      v26 = v25 + v21;
      __v.__first_ = v25;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v25[v24];
      v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v26->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v26 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v28 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a2 + 8) = v28;
      if (v29 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v19 = v20;
      *(_QWORD *)(a2 + 8) = v19 + 24;
    }
  }
  return result;
}

void sub_1E065B4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, std::__split_buffer<std::string> *a11, uint64_t a12, uint64_t a13, void *__pa, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a20);
  if (a19 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DType::Parse(MIL::Text::Parser::DType *this)
{
  uint64_t v2;
  _QWORD *DTypeFirstSet;
  uint64_t Type;
  unint64_t v6;
  uint64_t Options;
  uint64_t v8;
  void *exception;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[4];
  _QWORD v13[3];
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  MIL::Scanner::Token::Token(v16, v2);
  DTypeFirstSet = (_QWORD *)MIL::ParserContext::GetDTypeFirstSet(*((MIL::ParserContext **)this + 3));
  LODWORD(v15) = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v16);
  if (!std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTypeFirstSet, (unsigned int *)&v15))
  {
    v6 = *((_QWORD *)this + 4);
    Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::TextLocationFromScannerLocation(v6, v8, &v15);
    exception = __cxa_allocate_exception(0x48uLL);
    v14 = v15;
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "Unknown data type token.");
    MIL::ParseError::ParseError((uint64_t)exception, &v14, (uint64_t)v13, 113);
  }
  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v12);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v16);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
  return Type;
}

void sub_1E065B68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  if (a19 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(v24 - 64));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    if (!v23)
      goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t MIL::Text::Parser::DTYPE_BOOL::Parse(MIL::Text::Parser::DTYPE_BOOL *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 31, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065B760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_STRING::Parse(MIL::Text::Parser::DTYPE_STRING *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 32, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_BF16::Parse(MIL::Text::Parser::DTYPE_BF16 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 33, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065B850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_FP16::Parse(MIL::Text::Parser::DTYPE_FP16 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 34, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065B8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_FP8E5M2::Parse(MIL::Text::Parser::DTYPE_FP8E5M2 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 35, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065B940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_FP8E4M3FN::Parse(MIL::Text::Parser::DTYPE_FP8E4M3FN *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 36, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065B9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_FP32::Parse(MIL::Text::Parser::DTYPE_FP32 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 37, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_FP64::Parse(MIL::Text::Parser::DTYPE_FP64 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 38, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_INT4::Parse(MIL::Text::Parser::DTYPE_INT4 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 39, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_INT8::Parse(MIL::Text::Parser::DTYPE_INT8 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 40, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_INT16::Parse(MIL::Text::Parser::DTYPE_INT16 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 41, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_INT32::Parse(MIL::Text::Parser::DTYPE_INT32 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 42, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_INT64::Parse(MIL::Text::Parser::DTYPE_INT64 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 43, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT1::Parse(MIL::Text::Parser::DTYPE_UINT1 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 44, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT2::Parse(MIL::Text::Parser::DTYPE_UINT2 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 45, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT3::Parse(MIL::Text::Parser::DTYPE_UINT3 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 46, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT4::Parse(MIL::Text::Parser::DTYPE_UINT4 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 47, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT6::Parse(MIL::Text::Parser::DTYPE_UINT6 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 48, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT8::Parse(MIL::Text::Parser::DTYPE_UINT8 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 49, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT16::Parse(MIL::Text::Parser::DTYPE_UINT16 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 50, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065C048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT32::Parse(MIL::Text::Parser::DTYPE_UINT32 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 51, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_UINT64::Parse(MIL::Text::Parser::DTYPE_UINT64 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t Type;
  _BYTE v6[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 52, v3);
  Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  return Type;
}

void sub_1E065C138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

float MIL::Text::Parser::FP32::Parse(MIL::Text::Parser::FP32 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t ProgramFirstSet;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  _BYTE v15[32];
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 19, v3);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v15);
  v5 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)ProgramFirstSet;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  v10 = *((_QWORD *)this + 4);
  v11 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v13 = MIL::Util::stof(&__dst, v10, v12);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1E065C278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  return __dst;
}

double MIL::Text::Parser::FP64::Parse(MIL::Text::Parser::FP64 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t ProgramFirstSet;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _BYTE v15[32];
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 19, v3);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v15);
  v5 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)ProgramFirstSet;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  v10 = *((_QWORD *)this + 4);
  v11 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v13 = MIL::Util::stod(&__dst, v10, v12);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1E065C478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::UINT8::Parse(MIL::Text::Parser::UINT8 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t ProgramFirstSet;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  int BaseAndPrepIntStringForParse;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 18, v3);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v16);
  v5 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)ProgramFirstSet;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v11 = *((_QWORD *)this + 4);
  v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v14 = MIL::Util::stoui8(&__dst, BaseAndPrepIntStringForParse, v11, v13);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1E065C5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::INT32::Parse(MIL::Text::Parser::INT32 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t ProgramFirstSet;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  int BaseAndPrepIntStringForParse;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 18, v3);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v14);
  v5 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)ProgramFirstSet;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v14);
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v11 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v12 = MIL::Util::stoi(&__dst, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1E065C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::INT64::Parse(MIL::Text::Parser::INT64 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t ProgramFirstSet;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  int BaseAndPrepIntStringForParse;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 18, v3);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v14);
  v5 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)ProgramFirstSet;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v14);
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v11 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v12 = MIL::Util::stoll(&__dst, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1E065C898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a10);
  _Unwind_Resume(a1);
}

unint64_t MIL::Text::Parser::UINT64::Parse(MIL::Text::Parser::UINT64 *this)
{
  uint64_t Options;
  uint64_t v3;
  uint64_t ProgramFirstSet;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  int BaseAndPrepIntStringForParse;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE v16[32];
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 18, v3);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v16);
  v5 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)ProgramFirstSet;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v11 = *((_QWORD *)this + 4);
  v12 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v14 = MIL::Util::stoull(&__dst, BaseAndPrepIntStringForParse, v11, v13);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1E065C9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a10);
  _Unwind_Resume(a1);
}

BOOL MIL::Text::Parser::BOOL::Parse(MIL::Text::Parser::BOOL *this)
{
  MIL::Scanner::Token *v2;
  MIL::Scanner::Token *v3;
  _BOOL8 v4;
  unint64_t v6;
  uint64_t Options;
  uint64_t v8;
  void *exception;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  __int128 v13;
  _OWORD v14[2];

  v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  if (MIL::Scanner::Token::GetType(v2) != 21)
  {
    v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
    if (MIL::Scanner::Token::GetType(v3) != 22)
    {
      v6 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v6, v8, v14);
      exception = __cxa_allocate_exception(0x48uLL);
      v13 = v14[0];
      if (*((_QWORD *)&v14[0] + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v14[0] + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::string::basic_string[abi:ne180100]<0>(v12, "Boolean expected here.");
      MIL::ParseError::ParseError((uint64_t)exception, &v13, (uint64_t)v12, 112);
    }
  }
  (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v14);
  v4 = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v14) == 21;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v14);
  return v4;
}

void sub_1E065CB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void MIL::Text::Parser::STRING::Parse(MIL::Text::Parser::STRING *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Options;
  uint64_t v5;
  uint64_t ProgramFirstSet;
  size_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[32];

  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*((_QWORD *)this + 2), 20, v5);
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v12);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    a2[1] = v7;
    a2[2] = v10 | 0x8000000000000000;
    *a2 = v11;
    a2 = v11;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v7;
    if (!v7)
      goto LABEL_9;
  }
  memmove(a2, v8, v7);
LABEL_9:
  *((_BYTE *)a2 + v7) = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
}

void sub_1E065CC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::SYNTAX_VERSION::Parse(MIL::Text::Parser::SYNTAX_VERSION *this)
{
  float v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t Options;
  uint64_t v7;
  void *exception;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];
  __int128 v12;
  __int128 v13;

  v2 = MIL::Text::Parser::Rule<MIL::Text::Parser::SYNTAX_VERSION,MIL::SyntaxVersion>::Parse<MIL::Text::Parser::FP32>((__n128 *)this);
  if (MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.0, 0.00000011921))
    return 1;
  if (MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.1, 0.00000011921))
    return 2;
  v3 = 3;
  if (!MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.2, 0.00000011921))
  {
    if (!MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.3, 0.00000011921))
    {
      v5 = *((_QWORD *)this + 4);
      Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v5, v7, &v13);
      exception = __cxa_allocate_exception(0x48uLL);
      v12 = v13;
      if (*((_QWORD *)&v13 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      std::string::basic_string[abi:ne180100]<0>(v11, "Unknown text syntax version.");
      MIL::ParseError::ParseError((uint64_t)exception, &v12, (uint64_t)v11, 401);
    }
    return 4;
  }
  return v3;
}

void sub_1E065CE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

float MIL::Text::Parser::Rule<MIL::Text::Parser::SYNTAX_VERSION,MIL::SyntaxVersion>::Parse<MIL::Text::Parser::FP32>(__n128 *a1)
{
  MIL::Scanner::Token *v1;
  _QWORD v3[2];
  __n128 v4;
  uint64_t v5;

  v3[1] = a1->n128_u64[1];
  v4 = a1[1];
  v1 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(v1);
  v3[0] = &off_1EA99DAB8;
  return MIL::Text::Parser::FP32::Parse((MIL::Text::Parser::FP32 *)v3);
}

void MIL::Text::Parser::ID::Parse(MIL::Text::Parser::ID *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  MIL::Scanner::Token *v5;
  unsigned int Type;
  uint64_t Options;
  uint64_t v8;
  uint64_t ProgramFirstSet;
  size_t v10;
  const void *v11;
  MIL::ParserContext *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *exception;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD __dst[3];
  __int128 v28;
  _QWORD v29[4];
  std::string v30;
  char v31;
  _OWORD v32[2];

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  MIL::Scanner::Token::Token(v32, v4);
  Type = MIL::Scanner::Token::GetType(v5);
  if (Type == 54)
  {
    Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::Scanner::Expect(*((_QWORD *)this + 2), 54, v8);
    ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v30);
    v10 = *(_QWORD *)(ProgramFirstSet + 8);
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = *(const void **)ProgramFirstSet;
    if (v10 >= 0x17)
    {
      v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v15 = v10 | 7;
      v16 = v15 + 1;
      v17 = (std::string *)operator new(v15 + 1);
      a2->__r_.__value_.__l.__size_ = v10;
      a2->__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      a2 = v17;
    }
    else
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = v10;
      if (!v10)
        goto LABEL_14;
    }
    memmove(a2, v11, v10);
LABEL_14:
    a2->__r_.__value_.__s.__data_[v10] = 0;
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v30);
    goto LABEL_15;
  }
  v12 = (MIL::ParserContext *)*((_QWORD *)this + 3);
  v13 = MIL::ParserContext::GetOptions(v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
  MIL::ParserContext::GetFallbackIDForKeyword((uint64_t)v12, Type, v14, &v30);
  if (!v31)
  {
    v18 = *((_QWORD *)this + 4);
    v19 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    MIL::TextLocationFromScannerLocation(v18, v20, &v28);
    v21 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v32);
    std::string::basic_string<std::string_view,0>(__dst, v21);
    exception = __cxa_allocate_exception(0x48uLL);
    v26 = v28;
    if (*((_QWORD *)&v28 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::operator+<char>();
    MIL::ParseError::ParseError((uint64_t)exception, &v26, (uint64_t)&v25, 201);
  }
  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 2) + 16))(v29);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v29);
  if (!v31)
    std::__throw_bad_optional_access[abi:ne180100]();
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    if (v31 && SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = v30;
  }
LABEL_15:
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v32);
}

void sub_1E065D11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a22 < 0)
        operator delete(a17);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      if (*(_BYTE *)(v25 - 72))
      {
        if (*(char *)(v25 - 73) < 0)
          operator delete(*(void **)(v25 - 96));
      }
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(v25 - 64));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (!v24)
      goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void MIL::Text::Parser::Program::~Program(MIL::Text::Parser::Program *this)
{
  *(_QWORD *)this = &off_1EA99C250;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
}

{
  *(_QWORD *)this = &off_1EA99C250;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *ProgramFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  ProgramFirstSet = (_QWORD *)MIL::ParserContext::GetProgramFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ProgramFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  return result;
}

void MIL::Text::Parser::Function::~Function(MIL::Text::Parser::Function *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *FunctionFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  FunctionFirstSet = (_QWORD *)MIL::ParserContext::GetFunctionFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FunctionFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void MIL::Text::Parser::FunctionMap::~FunctionMap(MIL::Text::Parser::FunctionMap *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *FunctionMapFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  FunctionMapFirstSet = (_QWORD *)MIL::ParserContext::GetFunctionMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FunctionMapFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void MIL::Text::Parser::OpsetBlock::~OpsetBlock(MIL::Text::Parser::OpsetBlock *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *OpsetBlockFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  OpsetBlockFirstSet = (_QWORD *)MIL::ParserContext::GetOpsetBlockFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpsetBlockFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void MIL::Text::Parser::OpsetBlockMap::~OpsetBlockMap(MIL::Text::Parser::OpsetBlockMap *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *OpsetBlockMapFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  OpsetBlockMapFirstSet = (_QWORD *)MIL::ParserContext::GetOpsetBlockMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpsetBlockMapFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void MIL::Text::Parser::Block::~Block(MIL::Text::Parser::Block *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *BlockFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  BlockFirstSet = (_QWORD *)MIL::ParserContext::GetBlockFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BlockFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::BlockList::~BlockList(MIL::Text::Parser::BlockList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BlockList,std::vector<std::shared_ptr<MIL::IRBlock>>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *BlockListFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  BlockListFirstSet = (_QWORD *)MIL::ParserContext::GetBlockListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BlockListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void MIL::Text::Parser::BlockInputDecls::~BlockInputDecls(MIL::Text::Parser::BlockInputDecls *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *BlockInputDeclsFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  BlockInputDeclsFirstSet = (_QWORD *)MIL::ParserContext::GetBlockInputDeclsFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BlockInputDeclsFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::Op::~Op(MIL::Text::Parser::Op *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *OpFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  OpFirstSet = (_QWORD *)MIL::ParserContext::GetOpFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void MIL::Text::Parser::OpList::~OpList(MIL::Text::Parser::OpList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *OpListFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  OpListFirstSet = (_QWORD *)MIL::ParserContext::GetOpListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void MIL::Text::Parser::Value::~Value(MIL::Text::Parser::Value *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *ValueFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  ValueFirstSet = (_QWORD *)MIL::ParserContext::GetValueFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ValueFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void MIL::Text::Parser::ValueAssign::~ValueAssign(MIL::Text::Parser::ValueAssign *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueAssign,std::shared_ptr<MIL::IRValue const>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *ValueAssignFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  ValueAssignFirstSet = (_QWORD *)MIL::ParserContext::GetValueAssignFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ValueAssignFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void MIL::Text::Parser::ValueLiteral::~ValueLiteral(MIL::Text::Parser::ValueLiteral *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *ValueLiteralFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  ValueLiteralFirstSet = (_QWORD *)MIL::ParserContext::GetValueLiteralFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ValueLiteralFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::IValue::~IValue(MIL::Text::Parser::IValue *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *IValueFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  IValueFirstSet = (_QWORD *)MIL::ParserContext::GetIValueFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IValueFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::RefValue::~RefValue(MIL::Text::Parser::RefValue *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *RefValueFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  RefValueFirstSet = (_QWORD *)MIL::ParserContext::GetRefValueFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(RefValueFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::TupleVal::~TupleVal(MIL::Text::Parser::TupleVal *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TupleVal,std::unique_ptr<MIL::IRTupleValue const>,MIL::IRTupleValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *TupleValFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  TupleValFirstSet = (_QWORD *)MIL::ParserContext::GetTupleValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TupleValFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::ListVal::~ListVal(MIL::Text::Parser::ListVal *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ListVal,std::unique_ptr<MIL::IRListValue const>,MIL::IRListValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *ListValFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  ListValFirstSet = (_QWORD *)MIL::ParserContext::GetListValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ListValFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::DictItem::~DictItem(MIL::Text::Parser::DictItem *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictItem,std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>,MIL::IRValueType const*,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *DictItemFirstSet;
  MIL::Scanner::Token *v9;
  uint64_t *result;
  unsigned int Type;

  DictItemFirstSet = (_QWORD *)MIL::ParserContext::GetDictItemFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v9);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DictItemFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void MIL::Text::Parser::DictItemList::~DictItemList(MIL::Text::Parser::DictItemList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *DictItemListFirstSet;
  MIL::Scanner::Token *v9;
  uint64_t *result;
  unsigned int Type;

  DictItemListFirstSet = (_QWORD *)MIL::ParserContext::GetDictItemListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v9);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DictItemListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

void MIL::Text::Parser::DictVal::~DictVal(MIL::Text::Parser::DictVal *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictVal,std::unique_ptr<MIL::IRDictionaryValue const>,MIL::IRDictionaryValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *DictValFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  DictValFirstSet = (_QWORD *)MIL::ParserContext::GetDictValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DictValFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::TensorVal::~TensorVal(MIL::Text::Parser::TensorVal *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorVal,std::unique_ptr<MIL::IRTensorValue const>,MIL::IRTensorValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *TensorValFirstSet;
  MIL::Scanner::Token *v7;
  uint64_t *result;
  unsigned int Type;

  TensorValFirstSet = (_QWORD *)MIL::ParserContext::GetTensorValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v7);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorValFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::Type::~Type(MIL::Text::Parser::Type *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::ParseOpt(uint64_t a1)
{
  _QWORD *TypeFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  TypeFirstSet = (_QWORD *)MIL::ParserContext::GetTypeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TypeFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::TypeList::~TypeList(MIL::Text::Parser::TypeList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TypeList,std::vector<MIL::IRValueType const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *TypeListFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  TypeListFirstSet = (_QWORD *)MIL::ParserContext::GetTypeListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TypeListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::TypeLength::~TypeLength(MIL::Text::Parser::TypeLength *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::ParseOpt(uint64_t a1)
{
  _QWORD *TypeLengthFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  TypeLengthFirstSet = (_QWORD *)MIL::ParserContext::GetTypeLengthFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TypeLengthFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DimLength::~DimLength(MIL::Text::Parser::DimLength *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt(uint64_t a1)
{
  _QWORD *DimLengthFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DimLengthFirstSet = (_QWORD *)MIL::ParserContext::GetDimLengthFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DimLengthFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::TensorShape::~TensorShape(MIL::Text::Parser::TensorShape *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *TensorShapeFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  TensorShapeFirstSet = (_QWORD *)MIL::ParserContext::GetTensorShapeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorShapeFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::TensorBufferInterleaveFactor::~TensorBufferInterleaveFactor(MIL::Text::Parser::TensorBufferInterleaveFactor *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  _QWORD *TensorBufferInterleaveFactorFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  TensorBufferInterleaveFactorFirstSet = (_QWORD *)MIL::ParserContext::GetTensorBufferInterleaveFactorFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferInterleaveFactorFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::TensorBufferStride::~TensorBufferStride(MIL::Text::Parser::TensorBufferStride *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  _QWORD *TensorBufferStrideFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  TensorBufferStrideFirstSet = (_QWORD *)MIL::ParserContext::GetTensorBufferStrideFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferStrideFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::TensorBufferStrides::~TensorBufferStrides(MIL::Text::Parser::TensorBufferStrides *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *TensorBufferStridesFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  TensorBufferStridesFirstSet = (_QWORD *)MIL::ParserContext::GetTensorBufferStridesFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferStridesFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::TensorBufferRowAlignment::~TensorBufferRowAlignment(MIL::Text::Parser::TensorBufferRowAlignment *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferRowAlignment,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  _QWORD *TensorBufferRowAlignmentFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  TensorBufferRowAlignmentFirstSet = (_QWORD *)MIL::ParserContext::GetTensorBufferRowAlignmentFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferRowAlignmentFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::CircularBufferWrapDim::~CircularBufferWrapDim(MIL::Text::Parser::CircularBufferWrapDim *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::CircularBufferWrapDim,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  _QWORD *CircularBufferWrapDimFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  CircularBufferWrapDimFirstSet = (_QWORD *)MIL::ParserContext::GetCircularBufferWrapDimFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(CircularBufferWrapDimFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::CircularBufferSliceWrapDimSize::~CircularBufferSliceWrapDimSize(MIL::Text::Parser::CircularBufferSliceWrapDimSize *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::CircularBufferSliceWrapDimSize,MIL::IRDimension const*>::ParseOpt(uint64_t a1)
{
  _QWORD *CircularBufferSliceWrapDimSizeFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  CircularBufferSliceWrapDimSizeFirstSet = (_QWORD *)MIL::ParserContext::GetCircularBufferSliceWrapDimSizeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(CircularBufferSliceWrapDimSizeFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::TensorBufferInterleaveFactors::~TensorBufferInterleaveFactors(MIL::Text::Parser::TensorBufferInterleaveFactors *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *TensorBufferInterleaveFactorsFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  TensorBufferInterleaveFactorsFirstSet = (_QWORD *)MIL::ParserContext::GetTensorBufferInterleaveFactorsFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferInterleaveFactorsFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::PixelBufferBytesPerRow::~PixelBufferBytesPerRow(MIL::Text::Parser::PixelBufferBytesPerRow *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRow,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  _QWORD *PixelBufferBytesPerRowFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  PixelBufferBytesPerRowFirstSet = (_QWORD *)MIL::ParserContext::GetPixelBufferBytesPerRowFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferBytesPerRowFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::PixelBufferBytesPerRowVec::~PixelBufferBytesPerRowVec(MIL::Text::Parser::PixelBufferBytesPerRowVec *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *PixelBufferBytesPerRowVecFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  PixelBufferBytesPerRowVecFirstSet = (_QWORD *)MIL::ParserContext::GetPixelBufferBytesPerRowVecFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferBytesPerRowVecFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::PixelBufferNumSlices::~PixelBufferNumSlices(MIL::Text::Parser::PixelBufferNumSlices *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlices,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  _QWORD *PixelBufferNumSlicesFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  PixelBufferNumSlicesFirstSet = (_QWORD *)MIL::ParserContext::GetPixelBufferNumSlicesFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferNumSlicesFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::PixelBufferNumSlicesVec::~PixelBufferNumSlicesVec(MIL::Text::Parser::PixelBufferNumSlicesVec *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *PixelBufferNumSlicesVecFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  PixelBufferNumSlicesVecFirstSet = (_QWORD *)MIL::ParserContext::GetPixelBufferNumSlicesVecFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferNumSlicesVecFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::Argument::~Argument(MIL::Text::Parser::Argument *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *ArgumentFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  ArgumentFirstSet = (_QWORD *)MIL::ParserContext::GetArgumentFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ArgumentFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void MIL::Text::Parser::ArgumentList::~ArgumentList(MIL::Text::Parser::ArgumentList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *ArgumentListFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  ArgumentListFirstSet = (_QWORD *)MIL::ParserContext::GetArgumentListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ArgumentListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::IDArgumentBinding::~IDArgumentBinding(MIL::Text::Parser::IDArgumentBinding *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBinding,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>::ParseOpt@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *IDArgumentBindingFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  IDArgumentBindingFirstSet = (_QWORD *)MIL::ParserContext::GetIDArgumentBindingFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDArgumentBindingFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

void MIL::Text::Parser::IDArgumentBindingMap::~IDArgumentBindingMap(MIL::Text::Parser::IDArgumentBindingMap *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *IDArgumentBindingMapFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  IDArgumentBindingMapFirstSet = (_QWORD *)MIL::ParserContext::GetIDArgumentBindingMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDArgumentBindingMapFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void MIL::Text::Parser::IDValueBinding::~IDValueBinding(MIL::Text::Parser::IDValueBinding *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBinding,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *IDValueBindingFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  IDValueBindingFirstSet = (_QWORD *)MIL::ParserContext::GetIDValueBindingFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDValueBindingFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void MIL::Text::Parser::IDValueBindingMap::~IDValueBindingMap(MIL::Text::Parser::IDValueBindingMap *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *IDValueBindingMapFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  IDValueBindingMapFirstSet = (_QWORD *)MIL::ParserContext::GetIDValueBindingMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDValueBindingMapFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void MIL::Text::Parser::AttributesMap::~AttributesMap(MIL::Text::Parser::AttributesMap *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::AttributesMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *AttributesMapFirstSet;
  MIL::Scanner::Token *v5;
  double result;
  unsigned int Type;

  AttributesMapFirstSet = (_QWORD *)MIL::ParserContext::GetAttributesMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(AttributesMapFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void MIL::Text::Parser::IDTypeBinding::~IDTypeBinding(MIL::Text::Parser::IDTypeBinding *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBinding,std::unique_ptr<MIL::IRNamedValueType>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *IDTypeBindingFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  IDTypeBindingFirstSet = (_QWORD *)MIL::ParserContext::GetIDTypeBindingFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDTypeBindingFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  return result;
}

void MIL::Text::Parser::IDTypeBindingMap::~IDTypeBindingMap(MIL::Text::Parser::IDTypeBindingMap *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *IDTypeBindingMapFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  IDTypeBindingMapFirstSet = (_QWORD *)MIL::ParserContext::GetIDTypeBindingMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDTypeBindingMapFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void MIL::Text::Parser::IDTypeBindingList::~IDTypeBindingList(MIL::Text::Parser::IDTypeBindingList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingList,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *IDTypeBindingListFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  IDTypeBindingListFirstSet = (_QWORD *)MIL::ParserContext::GetIDTypeBindingListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDTypeBindingListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::IDList::~IDList(MIL::Text::Parser::IDList *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDList,std::vector<std::string>>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *IDListFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  IDListFirstSet = (_QWORD *)MIL::ParserContext::GetIDListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDListFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::DType::~DType(MIL::Text::Parser::DType *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DType,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTypeFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTypeFirstSet = (_QWORD *)MIL::ParserContext::GetDTypeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTypeFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_BOOL::~DTYPE_BOOL(MIL::Text::Parser::DTYPE_BOOL *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_BOOL,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_BOOLFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_BOOLFirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_BOOLFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_BOOLFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_STRING::~DTYPE_STRING(MIL::Text::Parser::DTYPE_STRING *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_STRING,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_STRINGFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_STRINGFirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_STRINGFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_STRINGFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_BF16::~DTYPE_BF16(MIL::Text::Parser::DTYPE_BF16 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_BF16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_BF16FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_BF16FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_BF16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_BF16FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_FP16::~DTYPE_FP16(MIL::Text::Parser::DTYPE_FP16 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_FP16FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_FP16FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_FP16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP16FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_FP8E5M2::~DTYPE_FP8E5M2(MIL::Text::Parser::DTYPE_FP8E5M2 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP8E5M2,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_FP8E5M2FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_FP8E5M2FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_FP8E5M2FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP8E5M2FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_FP8E4M3FN::~DTYPE_FP8E4M3FN(MIL::Text::Parser::DTYPE_FP8E4M3FN *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP8E4M3FN,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_FP8E4M3FNFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_FP8E4M3FNFirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_FP8E4M3FNFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP8E4M3FNFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_FP32::~DTYPE_FP32(MIL::Text::Parser::DTYPE_FP32 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP32,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_FP32FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_FP32FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_FP32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP32FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_FP64::~DTYPE_FP64(MIL::Text::Parser::DTYPE_FP64 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP64,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_FP64FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_FP64FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_FP64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP64FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_INT4::~DTYPE_INT4(MIL::Text::Parser::DTYPE_INT4 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT4,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_INT4FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_INT4FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_INT4FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT4FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_INT8::~DTYPE_INT8(MIL::Text::Parser::DTYPE_INT8 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT8,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_INT8FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_INT8FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_INT8FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT8FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_INT16::~DTYPE_INT16(MIL::Text::Parser::DTYPE_INT16 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_INT16FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_INT16FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_INT16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT16FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_INT32::~DTYPE_INT32(MIL::Text::Parser::DTYPE_INT32 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT32,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_INT32FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_INT32FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_INT32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT32FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_INT64::~DTYPE_INT64(MIL::Text::Parser::DTYPE_INT64 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT64,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_INT64FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_INT64FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_INT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT64FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT1::~DTYPE_UINT1(MIL::Text::Parser::DTYPE_UINT1 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT1,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT1FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT1FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT1FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT1FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT2::~DTYPE_UINT2(MIL::Text::Parser::DTYPE_UINT2 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT2,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT2FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT2FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT2FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT2FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT3::~DTYPE_UINT3(MIL::Text::Parser::DTYPE_UINT3 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT3,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT3FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT3FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT3FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT3FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT4::~DTYPE_UINT4(MIL::Text::Parser::DTYPE_UINT4 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT4,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT4FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT4FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT4FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT4FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT6::~DTYPE_UINT6(MIL::Text::Parser::DTYPE_UINT6 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT6,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT6FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT6FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT6FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT6FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT8::~DTYPE_UINT8(MIL::Text::Parser::DTYPE_UINT8 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT8,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT8FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT8FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT8FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT8FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT16::~DTYPE_UINT16(MIL::Text::Parser::DTYPE_UINT16 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT16FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT16FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT16FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT32::~DTYPE_UINT32(MIL::Text::Parser::DTYPE_UINT32 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT32,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT32FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT32FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT32FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::DTYPE_UINT64::~DTYPE_UINT64(MIL::Text::Parser::DTYPE_UINT64 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT64,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  _QWORD *DTYPE_UINT64FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  DTYPE_UINT64FirstSet = (_QWORD *)MIL::ParserContext::GetDTYPE_UINT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT64FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::FP32::~FP32(MIL::Text::Parser::FP32 *this)
{
  JUMPOUT(0x1E0C023A0);
}

float MIL::Text::Parser::Rule<MIL::Text::Parser::FP32,float>::ParseOpt(uint64_t a1)
{
  _QWORD *FP32FirstSet;
  MIL::Scanner::Token *v3;
  float result;
  unsigned int Type;

  FP32FirstSet = (_QWORD *)MIL::ParserContext::GetFP32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  if (!std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FP32FirstSet, &Type))return 0.0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::FP64::~FP64(MIL::Text::Parser::FP64 *this)
{
  JUMPOUT(0x1E0C023A0);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FP64,double>::ParseOpt(uint64_t a1)
{
  _QWORD *FP64FirstSet;
  MIL::Scanner::Token *v3;
  double result;
  unsigned int Type;

  FP64FirstSet = (_QWORD *)MIL::ParserContext::GetFP64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  if (!std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FP64FirstSet, &Type))return 0.0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::UINT8::~UINT8(MIL::Text::Parser::UINT8 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::UINT8,unsigned char>::ParseOpt(uint64_t a1)
{
  _QWORD *UINT8FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  UINT8FirstSet = (_QWORD *)MIL::ParserContext::GetUINT8FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(UINT8FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::INT32::~INT32(MIL::Text::Parser::INT32 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::INT32,int>::ParseOpt(uint64_t a1)
{
  _QWORD *INT32FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  INT32FirstSet = (_QWORD *)MIL::ParserContext::GetINT32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(INT32FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::INT64::~INT64(MIL::Text::Parser::INT64 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::INT64,long long>::ParseOpt(uint64_t a1)
{
  _QWORD *INT64FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  INT64FirstSet = (_QWORD *)MIL::ParserContext::GetINT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(INT64FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::UINT64::~UINT64(MIL::Text::Parser::UINT64 *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::UINT64,unsigned long long>::ParseOpt(uint64_t a1)
{
  _QWORD *UINT64FirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  UINT64FirstSet = (_QWORD *)MIL::ParserContext::GetUINT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(UINT64FirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::BOOL::~BOOL(MIL::Text::Parser::BOOL *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BOOL,BOOL>::ParseOpt(uint64_t a1)
{
  _QWORD *BOOLFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  BOOLFirstSet = (_QWORD *)MIL::ParserContext::GetBOOLFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BOOLFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::STRING::~STRING(MIL::Text::Parser::STRING *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::STRING,std::string>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *STRINGFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  STRINGFirstSet = (_QWORD *)MIL::ParserContext::GetSTRINGFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(STRINGFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::SYNTAX_VERSION::~SYNTAX_VERSION(MIL::Text::Parser::SYNTAX_VERSION *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::SYNTAX_VERSION,MIL::SyntaxVersion>::ParseOpt(uint64_t a1)
{
  _QWORD *SYNTAX_VERSIONFirstSet;
  MIL::Scanner::Token *v3;
  uint64_t *result;
  unsigned int Type;

  SYNTAX_VERSIONFirstSet = (_QWORD *)MIL::ParserContext::GetSYNTAX_VERSIONFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v3);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(SYNTAX_VERSIONFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return result;
}

void MIL::Text::Parser::ID::~ID(MIL::Text::Parser::ID *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ID,std::string>::ParseOpt@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *IDFirstSet;
  MIL::Scanner::Token *v5;
  uint64_t *result;
  unsigned int Type;

  IDFirstSet = (_QWORD *)MIL::ParserContext::GetIDFirstSet(*(MIL::ParserContext **)(a1 + 24));
  v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  Type = MIL::Scanner::Token::GetType(v5);
  result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDFirstSet, &Type);
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::TextFileLocation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::TextFileLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::TextFileLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string,std::unique_ptr<MIL::IRFunction>,0>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  return a1;
}

void sub_1E06601B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, _QWORD **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>((char *)&this[1], *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return this;
}

void sub_1E0660240(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions &,void>@<X0>(const MIL::ParserOptions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE18uLL);
  result = std::__shared_ptr_emplace<MIL::ParserContext>::__shared_ptr_emplace[abi:ne180100]<MIL::ParserOptions &,std::allocator<MIL::ParserContext>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1E06602A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::ParserContext>::__shared_ptr_emplace[abi:ne180100]<MIL::ParserOptions &,std::allocator<MIL::ParserContext>,0>(_QWORD *a1, const MIL::ParserOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99DEB8;
  MIL::ParserContext::ParserContext((MIL::ParserContext *)(a1 + 3), a2);
  return a1;
}

void sub_1E06602E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::ParserContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99DEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::ParserContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99DEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::ParserContext>::__on_zero_shared(uint64_t a1)
{
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)(a1 + 24));
}

MIL::Attributes::BlobFileMutabilityInfo *std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::reset[abi:ne180100](MIL::Attributes::BlobFileMutabilityInfo **a1, MIL::Attributes::BlobFileMutabilityInfo *a2)
{
  MIL::Attributes::BlobFileMutabilityInfo *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string&,std::unique_ptr<MIL::IRBlock>>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string&,std::unique_ptr<MIL::IRBlock>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string&,std::unique_ptr<MIL::IRBlock>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  uint64_t v10;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  v10 = *a3;
  *a3 = 0;
  *((_QWORD *)v8 + 7) = v10;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E06604AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E066072C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E06607A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v8 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v9 = *((_QWORD *)a3 + 2);
    v10 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    v6[2] = v8;
    *((_QWORD *)v6 + 6) = v9;
    *((_QWORD *)v6 + 7) = v10;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v6;
}

void std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__base_destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 16)
  {
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = *(_QWORD **)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 16);
    do
    {
      v9 = *(a3 - 2);
      a3 -= 2;
      *a3 = 0;
      *v8 = v9;
      v10 = a3[1];
      a3[1] = 0;
      v8[1] = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 16;
      v8 -= 2;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;

  for (i = *(uint64_t **)(a2 + 32); i != *(uint64_t **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i[1];
    i[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *i;
    *i = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    i = (uint64_t *)(*(_QWORD *)(a2 + 32) + 16);
  }
}

void **std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destruct_at_end[abi:ne180100](a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destruct_at_end[abi:ne180100](_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v6;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = (_QWORD **)(v2 - 16);
      v4[2] = v2 - 16;
      v6 = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      result = *v5;
      *v5 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1E0660CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x38uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E0660F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>(uint64_t **a1, const void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::string const&,MIL::IRValueType const*>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::string const&,MIL::IRValueType const*>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v8 + 7) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E06610B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void MIL::Text::BasicSerializer::~BasicSerializer(MIL::Text::BasicSerializer *this)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table((uint64_t)this + 328);
  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *((_QWORD *)this + 6) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 48) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 7) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8]((char *)this + 160);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t MIL::Text::BasicSerializer::BasicSerializer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  const std::locale *v7;
  std::ios_base *v8;
  std::locale *rdbuf;
  std::locale v11;
  std::locale v12;
  std::locale v13;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 48);
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a3;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v5 = *(_QWORD **)(a1 + 40);
  v6 = *(_QWORD *)(*v5 - 24);
  v7 = std::locale::classic();
  v8 = (std::ios_base *)((char *)v5 + v6);
  std::ios_base::getloc(v8);
  std::ios_base::imbue(v8, v7);
  std::locale::~locale(&v13);
  rdbuf = (std::locale *)v8->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v7);
    std::locale::locale(&v12, rdbuf + 1);
    std::locale::operator=(rdbuf + 1, v7);
    std::locale::~locale(&v12);
  }
  std::locale::~locale(&v11);
  return a1;
}

void sub_1E0661288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 39) < 0)
    operator delete(*(void **)(v10 + 16));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::BasicSerializer(MIL::Text::BasicSerializer *this, const MIL::Text::SerializerOptions *a2)
{
  _QWORD *v4;
  uint64_t v5;
  const std::locale *v6;
  std::ios_base *v7;
  std::locale *rdbuf;
  std::locale v10;
  std::locale v11;
  std::locale v12;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 48);
  *((_BYTE *)this + 312) = 0;
  *((_QWORD *)this + 40) = a2;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 90) = 1065353216;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = *(_QWORD *)(*v4 - 24);
  v6 = std::locale::classic();
  v7 = (std::ios_base *)((char *)v4 + v5);
  std::ios_base::getloc(v7);
  std::ios_base::imbue(v7, v6);
  std::locale::~locale(&v12);
  rdbuf = (std::locale *)v7->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v6);
    std::locale::locale(&v11, rdbuf + 1);
    std::locale::operator=(rdbuf + 1, v6);
    std::locale::~locale(&v11);
  }
  std::locale::~locale(&v10);
  return this;
}

void sub_1E06613EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 39) < 0)
    operator delete(*(void **)(v10 + 16));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::GetOutput(MIL::Text::BasicSerializer *this)
{
  return std::stringbuf::str();
}

std::string *MIL::Text::BasicSerializer::Indent(MIL::Text::BasicSerializer *this)
{
  return std::string::append((std::string *)((char *)this + 16), "    ", 4uLL);
}

double MIL::Text::BasicSerializer::Unindent(MIL::Text::BasicSerializer *this)
{
  std::string *v2;
  uint64_t v3;
  double result;
  std::string v5;
  char v6;

  v2 = (std::string *)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    v3 = *((_QWORD *)this + 3);
  else
    v3 = *((unsigned __int8 *)this + 39);
  std::string::basic_string(&v5, v2, 0, v3 - 4, (std::allocator<char> *)&v6);
  if (*((char *)this + 39) < 0)
    operator delete(v2->__r_.__value_.__l.__data_);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *v2 = v5;
  return result;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Program(MIL::Text::BasicSerializer *this, const MIL::IRProgram *a2)
{
  std::__shared_weak_count *size;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  __int128 *v13;
  uint64_t *v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 *v19;
  std::string::size_type v20;
  int v21;
  size_t v22;
  std::string *v23;
  const void *v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *Attributes;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  MIL::Text::BasicSerializer *v46;
  uint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  MIL::Text::BasicSerializer *v57;
  MIL::Blob::StorageWriter *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::error_code *v62;
  const std::__fs::filesystem::path *v63;
  _BOOL4 v64;
  unint64_t *v65;
  unint64_t v66;
  MIL::Text::BasicSerializer *v67;
  MIL::Text::BasicSerializer *v68;
  BOOL v69;
  std::runtime_error *v71;
  char *v72;
  std::string *v73;
  __int128 v74;
  std::runtime_error *exception;
  std::string::size_type v76;
  std::string::size_type v77;
  std::string __p;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unsigned __int8 v81;
  std::string *p_p;
  std::string v83;
  std::string v84;
  _QWORD v85[22];

  v85[20] = *MEMORY[0x1E0C80C00];
  (*(void (**)(std::string *__return_ptr, const MIL::IRProgram *))(*(_QWORD *)a2 + 48))(&v84, a2);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)this, (__int128 *)&v84);
  size = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
  if (v84.__r_.__value_.__l.__size_)
  {
    v5 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 120))(*((_QWORD *)this + 40));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 176))(*((_QWORD *)this + 40));
  v9 = (const void **)v8;
  if (*(char *)(v7 + 23) >= 0)
    v10 = *(unsigned __int8 *)(v7 + 23);
  else
    v10 = *(_QWORD *)(v7 + 8);
  v11 = *(unsigned __int8 *)(v8 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v8 + 8);
  if (v10)
  {
    if (v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v84, "Serializing with both Weights file path, and weights directory set, is invalid");
      std::runtime_error::runtime_error(exception, &v84);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::ofstream::basic_ofstream(&v84);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v84 + *(_QWORD *)(v84.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v84 + *(_QWORD *)(v84.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    __p.__r_.__value_.__s.__data_[0] = 0;
    std::allocate_shared[abi:ne180100]<MIL::Blob::StorageWriter,std::allocator<MIL::Blob::StorageWriter>,std::string const&,BOOL,void>(v7, (unsigned __int8 *)&__p, &v79);
    MIL::Util::FindBlobFilePaths(a2, (uint64_t *)&v83);
    v12 = v83.__r_.__value_.__l.__size_;
    v13 = (__int128 *)v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__r.__words[0] == v83.__r_.__value_.__l.__size_)
      goto LABEL_122;
    do
    {
      p_p = (std::string *)v13;
      v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 46, (const void **)v13, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v14 + 7, &v79);
      v13 = (__int128 *)((char *)v13 + 24);
    }
    while (v13 != (__int128 *)v12);
    if (v83.__r_.__value_.__l.__size_ == v83.__r_.__value_.__r.__words[0])
    {
LABEL_122:
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      p_p = &__p;
      v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 46, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v15 + 7, &v79);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v16 = v80;
    if (v80)
    {
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v84.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
    *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words
                              + *(_QWORD *)(v84.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                + 24);
    MEMORY[0x1E0C020C4](&v84.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x1E0C022F8](v85);
  }
  else if (v11)
  {
    MIL::Util::FindBlobFilePaths(a2, (uint64_t *)&v83);
    v77 = v83.__r_.__value_.__l.__size_;
    v19 = (__int128 *)v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__r.__words[0] != v83.__r_.__value_.__l.__size_)
    {
      v20 = *MEMORY[0x1E0DE4F48];
      v76 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
      v21 = 1;
      do
      {
        if (*((char *)v9 + 23) >= 0)
          v22 = *((unsigned __int8 *)v9 + 23);
        else
          v22 = (size_t)v9[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v22 + 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &__p;
        else
          v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v22)
        {
          if (*((char *)v9 + 23) >= 0)
            v24 = v9;
          else
            v24 = *v9;
          memmove(v23, v24, v22);
        }
        strcpy((char *)v23 + v22, "/weights");
        std::to_string(&v84, v21);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v84;
        else
          v25 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          v26 = v84.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v25, v26);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        std::string::append(&__p, ".bin");
        std::ofstream::basic_ofstream(&v84);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)&v84 + *(_QWORD *)(v84.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v84 + *(_QWORD *)(v84.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
        v81 = 0;
        std::allocate_shared[abi:ne180100]<MIL::Blob::StorageWriter,std::allocator<MIL::Blob::StorageWriter>,std::string &,BOOL,void>((uint64_t)&__p, &v81, &v79);
        p_p = (std::string *)v19;
        v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 46, (const void **)v19, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v27 + 7, &v79);
        v28 = v80;
        if (v80)
        {
          v29 = (unint64_t *)&v80->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v84.__r_.__value_.__r.__words[0] = v20;
        *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + *(_QWORD *)(v20 - 24)) = v76;
        MEMORY[0x1E0C020C4](&v84.__r_.__value_.__r.__words[1]);
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](v85);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v21;
        v19 = (__int128 *)((char *)v19 + 24);
      }
      while (v19 != (__int128 *)v77);
    }
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  }
  v31 = *((char *)this + 39);
  if (v31 >= 0)
    v32 = (char *)this + 16;
  else
    v32 = (char *)*((_QWORD *)this + 2);
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)this + 39);
  else
    v33 = *((_QWORD *)this + 3);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)v32, v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"program(", 8);
  v36 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 104))(*((_QWORD *)this + 40));
  std::string::basic_string[abi:ne180100]<0>(&v84, off_1EA99DF98[v36 - 1]);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v84;
  else
    v37 = (std::string *)v84.__r_.__value_.__r.__words[0];
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  else
    v38 = v84.__r_.__value_.__l.__size_;
  v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)")", 1);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  v40 = *(_QWORD *)(MIL::IRObject::GetAttributes(a2) + 24);
  v41 = (_QWORD *)*((_QWORD *)this + 5);
  if (v40)
  {
    v84.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v84, 1);
    Attributes = (_QWORD *)MIL::IRObject::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t **)this, Attributes);
    v41 = (_QWORD *)*((_QWORD *)this + 5);
    v84.__r_.__value_.__s.__data_[0] = 10;
  }
  else
  {
    v84.__r_.__value_.__s.__data_[0] = 32;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v84, 1);
  v43 = (_QWORD *)*((_QWORD *)this + 5);
  v84.__r_.__value_.__s.__data_[0] = 123;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v84, 1);
  std::string::append((std::string *)((char *)this + 16), "    ", 4uLL);
  if (*(_QWORD *)((*(uint64_t (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 72))(a2) + 24))
  {
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"\n", 1);
    v45 = *((char *)this + 39);
    v46 = v45 >= 0
        ? (MIL::Text::BasicSerializer *)((char *)this + 16)
        : (MIL::Text::BasicSerializer *)*((_QWORD *)this + 2);
    v47 = v45 >= 0 ? *((unsigned __int8 *)this + 39) : *((_QWORD *)this + 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
    v48 = (_QWORD *)(*(uint64_t (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 72))(a2);
    (*(void (**)(std::string *__return_ptr, const MIL::IRProgram *))(*(_QWORD *)a2 + 48))(&v84, a2);
    MIL::Text::BasicSerializer::FunctionMap((uint64_t)this, v48, (MIL::IROpset *)v84.__r_.__value_.__l.__data_);
    v49 = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
    if (v84.__r_.__value_.__l.__size_)
    {
      v50 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  MIL::Text::BasicSerializer::Unindent(this);
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"\n", 1);
  v53 = *((char *)this + 39);
  if (v53 >= 0)
    v54 = (char *)this + 16;
  else
    v54 = (char *)*((_QWORD *)this + 2);
  if (v53 >= 0)
    v55 = *((unsigned __int8 *)this + 39);
  else
    v55 = *((_QWORD *)this + 3);
  v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"}", 1);
  if (*((_QWORD *)this + 48))
  {
    if (!*((_BYTE *)this + 312))
    {
      v57 = (MIL::Text::BasicSerializer *)*((_QWORD *)this + 46);
      if (v57 != (MIL::Text::BasicSerializer *)((char *)this + 376))
      {
        do
        {
          v58 = (MIL::Blob::StorageWriter *)*((_QWORD *)v57 + 7);
          v59 = (std::__shared_weak_count *)*((_QWORD *)v57 + 8);
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          MIL::Blob::StorageWriter::GetFilePath(v58, &v84);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v63 = (const std::__fs::filesystem::path *)&v84;
          else
            v63 = (const std::__fs::filesystem::path *)v84.__r_.__value_.__r.__words[0];
          v64 = remove(v63, v62);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          if (v64)
          {
            v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v83, "encountered error when trying to delete weights file: ");
            v72 = strerror(v64);
            v73 = std::string::append(&v83, v72);
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v71, &v84);
            __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (v59)
          {
            v65 = (unint64_t *)&v59->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v67 = (MIL::Text::BasicSerializer *)*((_QWORD *)v57 + 1);
          if (v67)
          {
            do
            {
              v68 = v67;
              v67 = *(MIL::Text::BasicSerializer **)v67;
            }
            while (v67);
          }
          else
          {
            do
            {
              v68 = (MIL::Text::BasicSerializer *)*((_QWORD *)v57 + 2);
              v69 = *(_QWORD *)v68 == (_QWORD)v57;
              v57 = v68;
            }
            while (!v69);
          }
          v57 = v68;
        }
        while (v68 != (MIL::Text::BasicSerializer *)((char *)this + 376));
      }
    }
  }
  return this;
}

void sub_1E0661DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1E0C020B8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1E0662028(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1E0C020C4](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](a1 + 52);
  return a1;
}

uint64_t **MIL::Text::BasicSerializer::AttributesMap(uint64_t **a1, _QWORD *a2)
{
  if (a2[3])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[5], (uint64_t)"[", 1);
    MIL::Text::BasicSerializer::IDValueBindingMap(a1, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[5], (uint64_t)"]", 1);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::FunctionMap(uint64_t a1, _QWORD *a2, MIL::IROpset *a3)
{
  uint64_t *v6;
  std::string *end;
  __int128 *v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v13;
  char v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::vector<std::string> v22;
  char v23;
  std::vector<std::string> *v24;

  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::reserve(&v22, a2[3]);
  v6 = (uint64_t *)a2[2];
  if (v6)
  {
    end = v22.__end_;
    do
    {
      v8 = (__int128 *)(v6 + 2);
      if (end >= v22.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v22, v8);
      }
      else
      {
        if (*((char *)v6 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v6[2], v6[3]);
        }
        else
        {
          v9 = *v8;
          end->__r_.__value_.__r.__words[2] = v6[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        }
        ++end;
      }
      v22.__end_ = end;
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    end = v22.__end_;
  }
  v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v22.__begin_) >> 3));
  if (end == v22.__begin_)
    v11 = 0;
  else
    v11 = v10;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v22.__begin_, (const void **)&end->__r_.__value_.__l.__data_, (uint64_t)&v23, v11, 1);
  begin = v22.__begin_;
  v13 = v22.__end_;
  if (v22.__begin_ != v22.__end_)
  {
    v14 = 1;
    do
    {
      v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin);
      v16 = v15;
      if (!v15)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if ((v14 & 1) != 0)
      {
        MIL::Text::BasicSerializer::Function(a1, (uint64_t)begin, *((MIL::IRObject **)v15 + 5), a3);
      }
      else
      {
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
        v18 = *(char *)(a1 + 39);
        if (v18 >= 0)
          v19 = a1 + 16;
        else
          v19 = *(_QWORD *)(a1 + 16);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(a1 + 39);
        else
          v20 = *(_QWORD *)(a1 + 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        MIL::Text::BasicSerializer::Function(a1, (uint64_t)begin, *((MIL::IRObject **)v16 + 5), a3);
      }
      v14 = 0;
      ++begin;
    }
    while (begin != v13);
  }
  v24 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  return a1;
}

void sub_1E06622E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::Function(uint64_t a1, uint64_t a2, MIL::IRObject *a3, MIL::IROpset *a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *Attributes;
  MIL::IRObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned __int8 **v40;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  _QWORD *v44[2];

  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"func ", 5);
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"<", 1);
  v14 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a3 + 32))(a3);
  v15 = *(char *)(v14 + 23);
  if (v15 >= 0)
    v16 = v14;
  else
    v16 = *(_QWORD *)v14;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 23);
  else
    v17 = *(_QWORD *)(v14 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">(", 2);
  v19 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a3 + 128))(a3);
  v20 = v19 + 1;
  v21 = (_QWORD *)*v19;
  if ((_QWORD *)*v19 != v19 + 1)
  {
    v22 = "";
    do
    {
      v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)v22, v23);
      MIL::Text::BasicSerializer::IDTypeBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)(v21 + 4), (const MIL::IRValueType *)v21[7]);
      v24 = (_QWORD *)v21[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v21[2];
          v26 = *v25 == (_QWORD)v21;
          v21 = v25;
        }
        while (!v26);
      }
      v22 = ", ";
      v21 = v25;
    }
    while (v25 != v20);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (*(_QWORD *)(MIL::IRObject::GetAttributes(a3) + 24))
  {
    v27 = *(_QWORD **)(a1 + 40);
    LOBYTE(v44[0]) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v44, 1);
    Attributes = (_QWORD *)MIL::IRObject::GetAttributes(a3);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t **)a1, Attributes);
  }
  std::string::append((std::string *)(a1 + 16), "    ", 4uLL);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)" ", 1);
  v29 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a3 + 40))(a3);
  (*(void (**)(MIL::IRObject *))(*(_QWORD *)a3 + 32))(a3);
  v30 = v43;
  v44[0] = v42;
  v44[1] = &v43->__vftable;
  v42 = 0;
  v43 = 0;
  MIL::Text::BasicSerializer::Block(a1, v29, v44);
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (*(_QWORD *)((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a3 + 112))(a3) + 16) >= 2uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
    v36 = *(char *)(a1 + 39);
    if (v36 >= 0)
      v37 = a1 + 16;
    else
      v37 = *(_QWORD *)(a1 + 16);
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(a1 + 39);
    else
      v38 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), v37, v38);
    v39 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a3 + 112))(a3);
    v40 = (unsigned __int8 **)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a3 + 32))(a3);
    MIL::Text::BasicSerializer::OpsetBlockMap(a1, v39, v40, a4);
  }
  MIL::Text::BasicSerializer::Unindent((MIL::Text::BasicSerializer *)a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)";", 1);
  return a1;
}

void sub_1E0662664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDTypeBinding(MIL::Text::BasicSerializer *a1, uint64_t a2, const MIL::IRValueType *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  MIL::Text::BasicSerializer::Type(a1, a3);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)" ", 1);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  return a1;
}

uint64_t MIL::Text::BasicSerializer::Block(uint64_t a1, MIL::IRObject *a2, _QWORD **a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *Attributes;
  _QWORD *v9;
  uint64_t v10;
  MIL::IRObject ****v11;
  MIL::IRObject **v12;
  MIL::IRObject **v13;
  MIL::IRObject *v14;
  MIL::IRObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v24;

  v6 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 40))(a2);
  MIL::Text::BasicSerializer::BlockInputDecls((MIL::Text::BasicSerializer *)a1, v6);
  v7 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 40))(a2);
  if (*v7 != v7[1])
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)" ", 1);
  if (*(_QWORD *)(MIL::IRObject::GetAttributes(a2) + 24))
  {
    Attributes = (_QWORD *)MIL::IRObject::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t **)a1, Attributes);
    v9 = *(_QWORD **)(a1 + 40);
    v24 = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v24, 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"{", 1);
  v10 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 56))(a2);
  if (**(_QWORD **)v10 != *(_QWORD *)(*(_QWORD *)v10 + 8))
  {
    std::string::append((std::string *)(a1 + 16), "    ", 4uLL);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
    v11 = (MIL::IRObject ****)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 56))(a2);
    v12 = **v11;
    v13 = (*v11)[1];
    while (v12 != v13)
    {
      v15 = *v12;
      v12 += 2;
      v14 = v15;
      v16 = *(char *)(a1 + 39);
      if (v16 >= 0)
        v17 = a1 + 16;
      else
        v17 = *(_QWORD *)(a1 + 16);
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a1 + 39);
      else
        v18 = *(_QWORD *)(a1 + 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), v17, v18);
      MIL::Text::BasicSerializer::Op(a1, v14, a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
    }
    MIL::Text::BasicSerializer::Unindent((MIL::Text::BasicSerializer *)a1);
    v19 = *(char *)(a1 + 39);
    if (v19 >= 0)
      v20 = a1 + 16;
    else
      v20 = *(_QWORD *)(a1 + 16);
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a1 + 39);
    else
      v21 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), v20, v21);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"} -> (", 6);
  v22 = (uint64_t *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 88))(a2);
  MIL::Text::BasicSerializer::IDList(a1, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  return a1;
}

MIL::IROpset *`anonymous namespace'::TryGetOpsetNames@<X0>(MIL::IROpset *result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4[5];

  if (result
    && (result = (MIL::IROpset *)(*(uint64_t (**)(MIL::IROpset *))(*(_QWORD *)result + 16))(result)) != 0)
  {
    MIL::IROpset::GetReversedOperatorNamesMap(result, (uint64_t)v4);
    v3 = operator new(0x40uLL);
    v3[2] = 0;
    *v3 = &unk_1EA99DF08;
    v3[1] = 0;
    *a2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v3 + 3), v4);
    a2[1] = (uint64_t)v3;
    return (MIL::IROpset *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_1E0662968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::OpsetBlockMap(uint64_t a1, _QWORD *a2, unsigned __int8 **a3, MIL::IROpset *a4)
{
  _QWORD *v8;
  std::string *end;
  __int128 *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v18;
  char v19;
  MIL::IRObject **v20;
  uint64_t v21;
  std::string::size_type size;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  MIL::IRObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  MIL::IRObject *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::vector<std::string> *v44;
  std::__shared_weak_count *v45;
  std::vector<std::string> *v46;
  std::__shared_weak_count *v47;
  std::vector<std::string> v48;

  memset(&v48, 0, sizeof(v48));
  std::vector<std::string>::reserve(&v48, a2[2]);
  v8 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    end = v48.__end_;
  }
  else
  {
    end = v48.__end_;
    do
    {
      v10 = (__int128 *)(v8 + 4);
      if (end >= v48.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v48, v10);
      }
      else
      {
        if (*((char *)v8 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v8[4], v8[5]);
        }
        else
        {
          v11 = *v10;
          end->__r_.__value_.__r.__words[2] = v8[6];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
        }
        ++end;
      }
      v48.__end_ = end;
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
    }
    while (v13 != a2 + 1);
  }
  v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v48.__begin_) >> 3));
  if (end == v48.__begin_)
    v16 = 0;
  else
    v16 = v15;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v48.__begin_, (const void **)&end->__r_.__value_.__l.__data_, (uint64_t)&v44, v16, 1);
  begin = v48.__begin_;
  v18 = v48.__end_;
  if (v48.__begin_ != v48.__end_)
  {
    v19 = 1;
    do
    {
      v20 = (MIL::IRObject **)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at((uint64_t)a2, (const void **)&begin->__r_.__value_.__l.__data_);
      v21 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      else
        size = begin->__r_.__value_.__l.__size_;
      v23 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      v24 = (char)v23;
      if ((char)v23 < 0)
        v23 = a3[1];
      if ((unsigned __int8 *)size != v23)
        goto LABEL_38;
      if (v24 >= 0)
        v25 = (unsigned __int8 *)a3;
      else
        v25 = *a3;
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(begin->__r_.__value_.__l.__data_, v25, begin->__r_.__value_.__l.__size_))
          goto LABEL_38;
      }
      else if (*((_BYTE *)&begin->__r_.__value_.__s + 23))
      {
        v26 = 0;
        while (begin->__r_.__value_.__s.__data_[v26] == v25[v26])
        {
          if (v21 == ++v26)
            goto LABEL_65;
        }
LABEL_38:
        if ((v19 & 1) != 0)
        {
          v27 = *v20;
          v28 = v45;
          v46 = v44;
          v47 = v45;
          v44 = 0;
          v45 = 0;
          MIL::Text::BasicSerializer::OpsetBlock(a1, (uint64_t)begin, v27, (_QWORD **)&v46);
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(p_shared_owners);
            while (__stlxr(v30 - 1, p_shared_owners));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = v45;
          if (v45)
          {
            v32 = (unint64_t *)&v45->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
LABEL_62:
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
        else
        {
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
          v35 = *(char *)(a1 + 39);
          if (v35 >= 0)
            v36 = a1 + 16;
          else
            v36 = *(_QWORD *)(a1 + 16);
          if (v35 >= 0)
            v37 = *(unsigned __int8 *)(a1 + 39);
          else
            v37 = *(_QWORD *)(a1 + 24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
          v38 = *v20;
          v39 = v45;
          v46 = v44;
          v47 = v45;
          v44 = 0;
          v45 = 0;
          MIL::Text::BasicSerializer::OpsetBlock(a1, (uint64_t)begin, v38, (_QWORD **)&v46);
          if (v39)
          {
            v40 = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v31 = v45;
          if (v45)
          {
            v42 = (unint64_t *)&v45->__shared_owners_;
            do
              v33 = __ldaxr(v42);
            while (__stlxr(v33 - 1, v42));
            goto LABEL_62;
          }
        }
        v19 = 0;
      }
LABEL_65:
      ++begin;
    }
    while (begin != v18);
  }
  v46 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  return a1;
}

void sub_1E0662CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::OpsetBlock(uint64_t a1, uint64_t a2, MIL::IRObject *a3, _QWORD **a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"<", 1);
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"> ", 2);
  return MIL::Text::BasicSerializer::Block(a1, a3, a4);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::BlockInputDecls(MIL::Text::BasicSerializer *a1, uint64_t a2)
{
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"(", 1);
    MIL::Text::BasicSerializer::IDTypeBindingList(a1, (MIL::IRNamedValueType ***)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)")", 1);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::Op(uint64_t a1, MIL::IRObject *a2, _QWORD **a3)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  const void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *Attributes;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD **v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  const void *v36;
  void **p_dst;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::runtime_error *exception;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  void **__dst;
  size_t v48;
  int64_t v49;
  std::string v50;

  v6 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v7;
  }
  if (*a3)
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*a3, (unsigned __int8 *)&v50);
    if (v8)
    {
      std::string::operator=(&v50, (const std::string *)(v8 + 40));
      goto LABEL_7;
    }
    if ((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 232))(a2))
    {
      v32 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 232))(a2);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v35 = v34;
      if (v34 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v36 = (const void *)v33;
      if (v34 >= 0x17)
      {
        v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v38 = v34 | 7;
        v39 = v38 + 1;
        p_dst = (void **)operator new(v38 + 1);
        v48 = v35;
        v49 = v39 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v49) = v34;
        p_dst = (void **)&__dst;
        if (!v34)
          goto LABEL_53;
      }
      memmove(p_dst, v36, v35);
LABEL_53:
      *((_BYTE *)p_dst + v35) = 0;
      v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v45, (unsigned __int8 *)&v50);
      if (v40)
        std::string::operator=(&v50, (const std::string *)(v40 + 40));
      v41 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (SHIBYTE(v49) < 0)
        operator delete(__dst);
    }
  }
LABEL_7:
  v9 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 176))(a2);
  if (*(_QWORD *)v9 != *(_QWORD *)(v9 + 8))
  {
    MIL::Text::BasicSerializer::IDTypeBindingList((MIL::Text::BasicSerializer *)a1, (MIL::IRNamedValueType ***)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)" = ", 3);
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v50;
  else
    v10 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    size = v50.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)v10, size);
  if ((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 232))(a2))
  {
    if ((*(int (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 104))(*(_QWORD *)(a1 + 320)) <= 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Program version 1.2+ required to specify opsets on operations.  Use MIL::Text::Serialize overload with the options parameter instead");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v12 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 232))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    v15 = v14;
    if (v14 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v16 = (const void *)v13;
    if (v14 >= 0x17)
    {
      v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v18 = v14 | 7;
      v19 = v18 + 1;
      v17 = (void **)operator new(v18 + 1);
      v48 = v15;
      v49 = v19 | 0x8000000000000000;
      __dst = v17;
    }
    else
    {
      HIBYTE(v49) = v14;
      v17 = (void **)&__dst;
      if (!v14)
      {
LABEL_25:
        *((_BYTE *)v17 + v15) = 0;
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"<", 1);
        if (v49 >= 0)
          v21 = (void **)&__dst;
        else
          v21 = __dst;
        if (v49 >= 0)
          v22 = HIBYTE(v49);
        else
          v22 = v48;
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)">", 1);
        if (SHIBYTE(v49) < 0)
          operator delete(__dst);
        goto LABEL_33;
      }
    }
    memmove(v17, v16, v15);
    goto LABEL_25;
  }
LABEL_33:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"(", 1);
  v24 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 160))(a2);
  MIL::Text::BasicSerializer::IDArgumentBindingMap((MIL::Text::BasicSerializer *)a1, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  Attributes = (_QWORD *)MIL::IRObject::GetAttributes(a2);
  MIL::Text::BasicSerializer::OpAttrsMap((uint64_t **)a1, Attributes);
  std::string::append((std::string *)(a1 + 16), "    ", 4uLL);
  v26 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 208))(a2);
  if (**(_QWORD **)v26 != *(_QWORD *)(*(_QWORD *)v26 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
    v27 = *(char *)(a1 + 39);
    if (v27 >= 0)
      v28 = a1 + 16;
    else
      v28 = *(_QWORD *)(a1 + 16);
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a1 + 39);
    else
      v29 = *(_QWORD *)(a1 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), v28, v29);
    v30 = (_QWORD **)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 208))(a2);
    MIL::Text::BasicSerializer::BlockList(a1, v30);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)";", 1);
  MIL::Text::BasicSerializer::Unindent((MIL::Text::BasicSerializer *)a1);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1E0663298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::IDList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = "";
    do
    {
      v6 = strlen(v5);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)v5, v6);
      v8 = *(char *)(v3 + 23);
      if (v8 >= 0)
        v9 = v3;
      else
        v9 = *(_QWORD *)v3;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v3 + 23);
      else
        v10 = *(_QWORD *)(v3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      v3 += 24;
      v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::BlockList(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)**a2;
  if (v3 != (_QWORD *)(*a2)[1])
  {
    MIL::Text::BasicSerializer::Block(a1, *v3);
    if ((*a2)[1] - **a2 >= 0x11uLL)
    {
      v5 = 1;
      v6 = 16;
      do
      {
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
        v8 = *(char *)(a1 + 39);
        if (v8 >= 0)
          v9 = a1 + 16;
        else
          v9 = *(_QWORD *)(a1 + 16);
        if (v8 >= 0)
          v10 = *(unsigned __int8 *)(a1 + 39);
        else
          v10 = *(_QWORD *)(a1 + 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
        MIL::Text::BasicSerializer::Block(a1, *(_QWORD *)(**a2 + v6));
        ++v5;
        v6 += 16;
      }
      while (v5 < (uint64_t)((*a2)[1] - **a2) >> 4);
    }
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDTypeBindingList(MIL::Text::BasicSerializer *a1, MIL::IRNamedValueType ***a2)
{
  MIL::IRNamedValueType **v3;
  MIL::IRNamedValueType **v4;
  const char *v5;
  size_t v6;
  uint64_t Name;
  MIL::IRNamedValueType *v8;
  const MIL::IRValueType *Type;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = "";
    do
    {
      v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v5, v6);
      Name = MIL::IRNamedValueType::GetName(*v3);
      v8 = *v3;
      v3 += 2;
      Type = (const MIL::IRValueType *)MIL::IRNamedValueType::GetType(v8);
      MIL::Text::BasicSerializer::IDTypeBinding(a1, Name, Type);
      v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDArgumentBindingMap(MIL::Text::BasicSerializer *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = "";
    do
    {
      v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v5, v6);
      MIL::Text::BasicSerializer::IDArgumentBinding(a1, (uint64_t)(v4 + 4), (uint64_t)(v4 + 7));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v5 = ", ";
      v4 = v8;
    }
    while (v8 != v3);
  }
  return a1;
}

uint64_t **MIL::Text::BasicSerializer::OpAttrsMap(uint64_t **a1, _QWORD *a2)
{
  uint64_t v3;
  char v5;
  void *__p[2];
  char v8;

  v3 = a2[3];
  if (v3)
  {
    if (v3 != 1)
      goto LABEL_8;
    std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p))
    {
      v5 = (*(uint64_t (**)(uint64_t *))(*a1[40] + 160))(a1[40]) ^ 1;
    }
    else
    {
      v5 = 0;
    }
    if (v8 < 0)
    {
      operator delete(__p[0]);
      if ((v5 & 1) != 0)
        return a1;
      goto LABEL_8;
    }
    if ((v5 & 1) == 0)
    {
LABEL_8:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[5], (uint64_t)"[", 1);
      MIL::Text::BasicSerializer::IDValueBindingMap(a1, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[5], (uint64_t)"]", 1);
    }
  }
  return a1;
}

void sub_1E06636A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::OpList(uint64_t a1, MIL::IRObject ****a2, _QWORD **a3)
{
  MIL::IRObject **v4;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = **a2;
  if (v4 != (*a2)[1])
  {
    MIL::Text::BasicSerializer::Op(a1, *v4, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
    if ((unint64_t)((char *)(*a2)[1] - (char *)**a2) >= 0x11)
    {
      v7 = 1;
      v8 = 2;
      do
      {
        v9 = *(char *)(a1 + 39);
        if (v9 >= 0)
          v10 = a1 + 16;
        else
          v10 = *(_QWORD *)(a1 + 16);
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(a1 + 39);
        else
          v11 = *(_QWORD *)(a1 + 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), v10, v11);
        MIL::Text::BasicSerializer::Op(a1, (**a2)[v8], a3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)"\n", 1);
        ++v7;
        v8 += 2;
      }
      while (v7 < ((char *)(*a2)[1] - (char *)**a2) >> 4);
    }
  }
  return a1;
}

uint64_t **MIL::Text::BasicSerializer::IDValueBindingMap(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v4;
  std::string *end;
  __int128 *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v11;
  const char *v12;
  uint64_t v13;
  std::string::size_type size;
  std::string::size_type v15;
  int v16;
  std::string *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  std::string::size_type v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  std::string::size_type v25;
  char *v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unsigned __int8 *v31;
  size_t v32;
  unsigned __int8 *v33;
  const void **i;
  uint64_t *v35;
  void *v36;
  _QWORD *v37;
  size_t v38;
  MIL::IRTupleValue *v39;
  uint64_t v40;
  MIL::Attributes::BlobFileMutabilityInfo *v41;
  uint64_t v42;
  _QWORD *v44;
  int v45;
  std::vector<std::string>::pointer v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  std::logic_error *exception;
  std::string __p[2];
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  std::string v63[2];
  std::__shared_weak_count *v64;
  void *v65[2];
  unsigned __int8 v66;
  void *v67[2];
  unsigned __int8 v68;
  std::vector<std::string> v69;

  memset(&v69, 0, sizeof(v69));
  std::vector<std::string>::reserve(&v69, a2[3]);
  v4 = (uint64_t *)a2[2];
  if (v4)
  {
    end = v69.__end_;
    do
    {
      v6 = (__int128 *)(v4 + 2);
      if (end >= v69.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v69, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          v7 = *v6;
          end->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        }
        ++end;
      }
      v69.__end_ = end;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    end = v69.__end_;
  }
  v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v69.__begin_) >> 3));
  if (end == v69.__begin_)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v69.__begin_, (const void **)&end->__r_.__value_.__l.__data_, (uint64_t)v63, v9, 1);
  std::string::basic_string[abi:ne180100]<0>(v67, "BlobFileMutabilityInfo");
  begin = v69.__begin_;
  v11 = v69.__end_;
  if (v69.__begin_ != v69.__end_)
  {
    v12 = "";
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
      v13 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if ((v13 & 0x80u) == 0)
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      else
        size = begin->__r_.__value_.__l.__size_;
      v15 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      v16 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = __p[0].__r_.__value_.__l.__size_;
      if (size != v15)
        goto LABEL_33;
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = __p;
      else
        v17 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(begin->__r_.__value_.__l.__data_, v17, begin->__r_.__value_.__l.__size_))
          goto LABEL_33;
      }
      else if (*((_BYTE *)&begin->__r_.__value_.__s + 23))
      {
        v18 = 0;
        while (begin->__r_.__value_.__s.__data_[v18] == v17->__r_.__value_.__s.__data_[v18])
        {
          if (v13 == ++v18)
            goto LABEL_35;
        }
LABEL_33:
        if (v16 < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
LABEL_35:
      v19 = (*(uint64_t (**)(uint64_t *, std::string *))(*a1[40] + 160))(a1[40], v17);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v19 & 1) == 0)
        goto LABEL_71;
LABEL_38:
      v20 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if ((v20 & 0x80u) == 0)
        v21 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      else
        v21 = begin->__r_.__value_.__l.__size_;
      v22 = v68;
      if ((v68 & 0x80u) != 0)
        v22 = (unint64_t)v67[1];
      if (v21 != v22)
        goto LABEL_54;
      if ((v68 & 0x80u) == 0)
        v23 = v67;
      else
        v23 = (void **)v67[0];
      if ((v20 & 0x80) != 0)
      {
        if (memcmp(begin->__r_.__value_.__l.__data_, v23, begin->__r_.__value_.__l.__size_))
          goto LABEL_54;
      }
      else if (*((_BYTE *)&begin->__r_.__value_.__s + 23))
      {
        v24 = 0;
        while (begin->__r_.__value_.__s.__data_[v24] == *((unsigned __int8 *)v23 + v24))
        {
          if (v20 == ++v24)
            goto LABEL_71;
        }
LABEL_54:
        std::string::basic_string[abi:ne180100]<0>(v65, "[A-Za-z_][A-Za-z0-9_@]*");
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((std::regex_traits<char> *)v63, (uint64_t)v65, 0);
        v25 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
        if ((v25 & 0x80u) == 0)
          v26 = (char *)begin;
        else
          v26 = (char *)begin->__r_.__value_.__r.__words[0];
        if ((v25 & 0x80u) != 0)
          v25 = begin->__r_.__value_.__l.__size_;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        memset(__p, 0, 41);
        v27 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v26, &v26[v25], (uint64_t)__p, (uint64_t)v63, 0);
        if (__p[0].__r_.__value_.__r.__words[0])
        {
          __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        v28 = v64;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        std::locale::~locale((std::locale *)v63);
        if ((v27 & 1) == 0)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"String \"", 8);
          v45 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
          if (v45 >= 0)
            v46 = begin;
          else
            v46 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
          if (v45 >= 0)
            v47 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
          else
            v47 = begin->__r_.__value_.__l.__size_;
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
          v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"\" is not a valid id key which does not match \"", 46);
          if ((v66 & 0x80u) == 0)
            v50 = v65;
          else
            v50 = (void **)v65[0];
          if ((v66 & 0x80u) == 0)
            v51 = v66;
          else
            v51 = (uint64_t)v65[1];
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\".", 2);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, v63);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        v31 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin);
        if (!v31)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v32 = strlen(v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[5], (uint64_t)v12, v32);
        MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)begin, *((const MIL::IRValue **)v31 + 5));
        if ((char)v66 < 0)
          operator delete(v65[0]);
        v12 = ", ";
      }
LABEL_71:
      if (++begin == v11)
        goto LABEL_74;
    }
  }
  v12 = "";
LABEL_74:
  v33 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v67);
  if (v33)
  {
    MIL::Attributes::BlobFileMutabilityInfo::Make(*((MIL::Attributes::BlobFileMutabilityInfo **)v33 + 5), v65);
    for (i = *(const void ***)(MIL::Attributes::BlobFileMutabilityInfo::GetAllPaths((MIL::Attributes::BlobFileMutabilityInfo *)v65[0])
                              + 16); i; i = (const void **)*i)
    {
      if (a1 + 47 != (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)(a1 + 46), i + 5))
      {
        v63[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 5);
        v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 46, i + 5, (uint64_t)&std::piecewise_construct, (__int128 **)v63);
        MIL::Blob::StorageWriter::GetFilePath((MIL::Blob::StorageWriter *)v35[7], __p);
        MIL::Attributes::BlobFileMutabilityInfo::UpdateMutabilityPaths((std::string **)v65[0], (uint64_t)(i + 5), __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    v36 = v65[0];
    v37 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1[40] + 32))(a1[40]);
    MIL::Attributes::BlobFileMutabilityInfo::ReplaceModelPaths((uint64_t)v36, v37);
    v38 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[5], (uint64_t)v12, v38);
    MIL::Attributes::BlobFileMutabilityInfo::GetValue((MIL::Attributes::BlobFileMutabilityInfo *)v65[0], (void (***)(MIL::MILContextImpl *__hidden))*a1, (uint64_t *)__p);
    MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)v67, (const MIL::IRValue *)__p[0].__r_.__value_.__l.__data_);
    v39 = (MIL::IRTupleValue *)__p[0].__r_.__value_.__r.__words[0];
    __p[0].__r_.__value_.__r.__words[0] = 0;
    if (v39)
    {
      MIL::IRTupleValue::~IRTupleValue(v39);
      MEMORY[0x1E0C023A0](v40);
    }
    v41 = (MIL::Attributes::BlobFileMutabilityInfo *)v65[0];
    v65[0] = 0;
    if (v41)
    {
      MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v41);
      MEMORY[0x1E0C023A0](v42);
    }
  }
  if ((char)v68 < 0)
    operator delete(v67[0]);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a1;
}

void sub_1E0663DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (*(char *)(v16 - 209) < 0)
  {
    operator delete(*(void **)(v16 - 232));
    if ((v15 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&__p);
      if (*(char *)(v16 - 145) < 0)
        operator delete(*(void **)(v16 - 168));
      if (*(char *)(v16 - 121) < 0)
        operator delete(*(void **)(v16 - 144));
      __p = (void *)(v16 - 120);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Value(MIL::Text::BasicSerializer *this, const MIL::IRValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *p_p;
  uint64_t v8;
  const MIL::IRValueType *v9;
  void *__p;
  uint64_t v12;
  unsigned __int8 v13;

  v4 = (*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)a2 + 40))(a2);
  if (!v4)
    goto LABEL_16;
  v5 = v4;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4))
    goto LABEL_16;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 128))(&__p, v5);
  if ((char)v13 < 0)
  {
    v6 = v12;
    if (v12)
      goto LABEL_7;
    operator delete(__p);
LABEL_16:
    v9 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)a2 + 32))(a2);
    MIL::Text::BasicSerializer::Type(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"(", 1);
    MIL::Text::BasicSerializer::ValueLiteral(this, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)")", 1);
    return this;
  }
  if (!v13)
    goto LABEL_16;
  v6 = v12;
LABEL_7:
  if ((v13 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = v6;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)p_p, v8);
  if ((char)v13 < 0)
    operator delete(__p);
  return this;
}

void sub_1E066401C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRValueType *a2)
{
  const MIL::IRTensorValueType *v4;
  const MIL::IRTupleValueType *v5;
  const MIL::IRListValueType *v6;
  const MIL::IRDictionaryValueType *v7;
  const MIL::IRMemoryLayoutValueType *v8;
  const MIL::IRStateValueType *v9;
  std::runtime_error *exception;

  v4 = (const MIL::IRTensorValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 24))(a2);
  if (v4)
  {
    MIL::Text::BasicSerializer::Type(this, v4);
  }
  else
  {
    v5 = (const MIL::IRTupleValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 40))(a2);
    if (v5)
    {
      MIL::Text::BasicSerializer::Type(this, v5);
    }
    else
    {
      v6 = (const MIL::IRListValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 32))(a2);
      if (v6)
      {
        MIL::Text::BasicSerializer::Type(this, v6);
      }
      else
      {
        v7 = (const MIL::IRDictionaryValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 48))(a2);
        if (v7)
        {
          MIL::Text::BasicSerializer::Type(this, v7);
        }
        else
        {
          v8 = (const MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(a2);
          if (v8)
          {
            MIL::Text::BasicSerializer::Type(this, v8);
          }
          else
          {
            v9 = (const MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(a2);
            if (!v9)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            MIL::Text::BasicSerializer::Type(this, v9);
          }
        }
      }
    }
  }
  return this;
}

void sub_1E0664150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Text::BasicSerializer::ValueLiteral(MIL::Text::BasicSerializer *this, const MIL::IRValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const MIL::IRTupleValue *v7;
  const MIL::IRListValue *v8;
  const MIL::IRDictionaryValue *v9;
  std::runtime_error *exception;

  v4 = (*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)a2 + 40))(a2);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  }
  else
  {
    v7 = (const MIL::IRTupleValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)a2 + 56))(a2);
    if (v7)
    {
      MIL::Text::BasicSerializer::Val(this, v7);
    }
    else
    {
      v8 = (const MIL::IRListValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)a2 + 48))(a2);
      if (v8)
      {
        MIL::Text::BasicSerializer::Val(this, v8);
      }
      else
      {
        v9 = (const MIL::IRDictionaryValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(_QWORD *)a2 + 64))(a2);
        if (!v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Value type is not supported by the serializer.");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        MIL::Text::BasicSerializer::Val(this, v9);
      }
    }
  }
}

void sub_1E0664270(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ValueAssign(MIL::Text::BasicSerializer *this, const MIL::IRValue *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"= ", 2);
  return MIL::Text::BasicSerializer::Value(this, a2);
}

void MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRTensorValue *a2)
{
  uint64_t v2;
  int v3;

  v2 = (*(uint64_t (**)(const MIL::IRTensorValue *))(*(_QWORD *)a2 + 32))(a2);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRTupleValue *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"(", 1);
  v6[0] = MIL::IRTupleValue::GetValues(a2);
  v6[1] = v4;
  MIL::Text::BasicSerializer::ValueLiteralList(this, (uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)")", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRListValue *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"[", 1);
  v6[0] = MIL::IRListValue::GetValues(a2);
  v6[1] = v4;
  MIL::Text::BasicSerializer::ValueLiteralList(this, (uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"]", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRDictionaryValue *a2)
{
  std::vector<std::string>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  char *v18;
  char v19;
  std::vector<std::string>::pointer end;
  std::string::size_type v21;
  std::string *v22;
  const std::string::value_type *v23;
  const std::string::value_type *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  unint64_t v31;
  uint64_t v32;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v34;
  const char *v35;
  size_t v36;
  int v37;
  uint64_t v38;
  uint64_t size;
  void *__p[2];
  unsigned __int8 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::vector<std::string> v47;
  std::__split_buffer<std::string> __v;
  _QWORD v49[5];

  v49[2] = *MEMORY[0x1E0C80C00];
  memset(&v47, 0, sizeof(v47));
  v4 = MIL::IRDictionaryValue::Size(a2);
  std::vector<std::string>::reserve(&v47, v4);
  v5 = MIL::IRDictionaryValue::begin(a2);
  v6 = MIL::IRDictionaryValue::end(a2);
  if (v5 != v6)
  {
    v7 = "{";
    v8 = ", ";
    do
    {
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v5 + 16) + 72))(&v43);
      v9 = std::string::insert(&v43, 0, v7);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v44, v8);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v5 + 32) + 72))(__p);
      if ((v42 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v42 & 0x80u) == 0)
        v14 = v42;
      else
        v14 = (std::string::size_type)__p[1];
      v15 = std::string::append(&v45, (const std::string::value_type *)v13, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v46, "}");
      v18 = (char *)v17->__r_.__value_.__r.__words[0];
      v49[0] = v17->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      end = v47.__end_;
      if (v47.__end_ >= v47.__end_cap_.__value_)
      {
        v23 = v8;
        v24 = v7;
        v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3) > v26)
          v26 = 0x5555555555555556 * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3) >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v26;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v47.__end_cap_;
        if (v27)
          v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v47.__end_cap_, v27);
        else
          v28 = 0;
        v29 = v28 + v25;
        __v.__first_ = v28;
        __v.__begin_ = v29;
        __v.__end_cap_.__value_ = &v28[v27];
        v30 = v49[0];
        v29->__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v29->__r_.__value_.__l.__size_ = v30;
        *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v49 + 7);
        *((_BYTE *)&v29->__r_.__value_.__s + 23) = v19;
        v49[0] = 0;
        *(_QWORD *)((char *)v49 + 7) = 0;
        __v.__end_ = v29 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v47, &__v);
        v22 = v47.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v7 = v24;
        v8 = v23;
      }
      else
      {
        v21 = v49[0];
        v47.__end_->__r_.__value_.__l.__data_ = v18;
        end->__r_.__value_.__l.__size_ = v21;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v49 + 7);
        *((_BYTE *)&end->__r_.__value_.__s + 23) = v19;
        v49[0] = 0;
        *(_QWORD *)((char *)v49 + 7) = 0;
        v22 = end + 1;
      }
      v47.__end_ = v22;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if ((char)v42 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v5 = *(_QWORD *)v5;
    }
    while (v5 != v6);
  }
  v31 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3));
  if (v47.__end_ == v47.__begin_)
    v32 = 0;
  else
    v32 = v31;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v47.__begin_, (const void **)&v47.__end_->__r_.__value_.__l.__data_, (uint64_t)&__v, v32, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"{", 1);
  begin = v47.__begin_;
  v34 = v47.__end_;
  if (v47.__begin_ != v47.__end_)
  {
    v35 = "";
    do
    {
      v36 = strlen(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)v35, v36);
      v37 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v37 >= 0)
        v38 = (uint64_t)begin;
      else
        v38 = begin->__r_.__value_.__r.__words[0];
      if (v37 >= 0)
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      else
        size = begin->__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), v38, size);
      ++begin;
      v35 = ", ";
    }
    while (begin != v34);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"}", 1);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return this;
}

void sub_1E06647CC(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char *__pa,std::__split_buffer<std::string> *a36,uint64_t a37,char a38)
{
  __pa = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ValueLiteralList(MIL::Text::BasicSerializer *a1, uint64_t a2)
{
  uint64_t v3;
  const MIL::IRValue **v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  const MIL::IRValue *v8;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(const MIL::IRValue ***)a2;
    v5 = 16 * v3;
    v6 = "";
    do
    {
      v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v6, v7);
      v8 = *v4;
      v4 += 2;
      MIL::Text::BasicSerializer::ValueLiteral(a1, v8);
      v6 = ", ";
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void MIL::Util::DispatchToCppType<MIL::Text::BasicSerializer &,`anonymous namespace'::SerializeTensorHelper,MIL::Text::BasicSerializer &,MIL::IRTensorValue const&>(int a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1E0664950@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<BOOL>(v5, v6);
}

uint64_t sub_1E0664980@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<long long>(v5, v6);
}

uint64_t sub_1E06649B0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<unsigned char>(v5, v6);
}

uint64_t sub_1E06649E0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<unsigned short>(v5, v6);
}

uint64_t sub_1E0664A10@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::UInt1>(v5, v6);
}

uint64_t sub_1E0664A40@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<double>(v5, v6);
}

uint64_t sub_1E0664A70@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<short>(v5, v6);
}

uint64_t sub_1E0664AA0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::UInt2>(v5, v6);
}

uint64_t sub_1E0664AD0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::Fp8E5M2>(v5, v6);
}

uint64_t sub_1E0664B00@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<std::string>(v5, v6);
}

uint64_t sub_1E0664B30@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::Fp16>(v5, v6);
}

uint64_t sub_1E0664B60@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<float>(v5, v6);
}

uint64_t sub_1E0664B90@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<signed char>(v5, v6);
}

uint64_t sub_1E0664BC0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<int>(v5, v6);
}

uint64_t sub_1E0664BF0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::Int4>(v5, v6);
}

uint64_t sub_1E0664C20@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<unsigned int>(v5, v6);
}

uint64_t sub_1E0664C50@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::Bf16>(v5, v6);
}

uint64_t sub_1E0664C80@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<unsigned long long>(v5, v6);
}

uint64_t sub_1E0664CB0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::UInt4>(v5, v6);
}

uint64_t sub_1E0664CE0@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::UInt6>(v5, v6);
}

uint64_t sub_1E0664D10@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::UInt3>(v5, v6);
}

uint64_t sub_1E0664D40@<X0>(const void *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  MIL::IRTensorValue *v6;

  return MIL::Text::BasicSerializer::Val<MIL::Fp8E4M3FN>(v5, v6);
}

void sub_1E0664D70()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "cannot dispatch on type");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1E0664DA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRTensorValueType *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  void *p_p;
  uint64_t v12;
  _QWORD *v13;
  const MIL::IRDimension ***v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;

  v4 = (_QWORD *)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 80))(a2);
  if ((*(int (**)(_QWORD))(**((_QWORD **)this + 40) + 104))(*((_QWORD *)this + 40)) < 2
    || !MIL::IRTensorValueType::IsScalar(a2)
    || v4[3])
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"tensor<", 7);
    v10 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2);
    MIL::IRDataTypeToString(v10, &__p);
    if ((v18 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v18 & 0x80u) == 0)
      v12 = v18;
    else
      v12 = v17;
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    if ((char)v18 < 0)
      operator delete(__p);
    v14 = (const MIL::IRDimension ***)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
    MIL::Text::BasicSerializer::TensorShape(this, v14);
    if (v4[3])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", ", 2);
      MIL::Text::BasicSerializer::AttributesMap((uint64_t **)this, v4);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  }
  else
  {
    v5 = (_QWORD *)*((_QWORD *)this + 5);
    v6 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2);
    MIL::IRDataTypeToString(v6, &__p);
    if ((v18 & 0x80u) == 0)
      v7 = &__p;
    else
      v7 = __p;
    if ((v18 & 0x80u) == 0)
      v8 = v18;
    else
      v8 = v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  return this;
}

void sub_1E0664F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRTupleValueType *a2)
{
  const MIL::IRValueType ***v4;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"tuple<", 6);
  v4 = (const MIL::IRValueType ***)(*(uint64_t (**)(const MIL::IRTupleValueType *))(*(_QWORD *)a2 + 64))(a2);
  MIL::Text::BasicSerializer::TypeList(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRListValueType *a2)
{
  const MIL::IRValueType *v4;
  const MIL::IRDimension *v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"list<", 5);
  v4 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(_QWORD *)a2 + 64))(a2);
  MIL::Text::BasicSerializer::Type(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", ", 2);
  v5 = (const MIL::IRDimension *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(_QWORD *)a2 + 72))(a2);
  MIL::Text::BasicSerializer::Dimension(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRDictionaryValueType *a2)
{
  const MIL::IRValueType *v4;
  const MIL::IRValueType *v5;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"dict<", 5);
  v4 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(_QWORD *)a2 + 64))(a2);
  MIL::Text::BasicSerializer::Type(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", ", 2);
  v5 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(_QWORD *)a2 + 72))(a2);
  MIL::Text::BasicSerializer::Type(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRMemoryLayoutValueType *a2)
{
  const MIL::IRTensorBufferValueType *v4;
  const MIL::IRPixelBufferValueType *v5;
  const MIL::IRCircularBufferValueType *v6;
  std::runtime_error *exception;

  if ((*(int (**)(_QWORD))(**((_QWORD **)this + 40) + 104))(*((_QWORD *)this + 40)) <= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Program version 1.2+ required for memory layouts.  Use MIL::Text::Serialize overload with the options parameter instead");
    goto LABEL_10;
  }
  v4 = (const MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(a2);
  if (!v4)
  {
    v5 = (const MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(a2);
    if (v5)
    {
      MIL::Text::BasicSerializer::Type(this, v5);
      return this;
    }
    v6 = (const MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(a2);
    if (v6)
    {
      MIL::Text::BasicSerializer::Type(this, v6);
      return this;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Provided memory layout type is not supported by the serializer.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Text::BasicSerializer::Type(this, v4);
  return this;
}

void sub_1E06651E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRStateValueType *a2)
{
  const MIL::IRValueType *WrappedType;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"state<", 6);
  WrappedType = (const MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(a2);
  MIL::Text::BasicSerializer::Type(this, WrappedType);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::TensorShape(MIL::Text::BasicSerializer *a1, const MIL::IRDimension ***a2)
{
  const MIL::IRDimension **v4;
  const MIL::IRDimension **v5;
  const char *v6;
  size_t v7;
  const MIL::IRDimension *v8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"[", 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = "";
    do
    {
      v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v6, v7);
      v8 = *v4++;
      MIL::Text::BasicSerializer::Dimension(a1, v8);
      v6 = ", ";
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"]", 1);
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Dimension(MIL::Text::BasicSerializer *this, const MIL::IRDimension *a2)
{
  uint64_t v4;
  const MIL::IRUnknownDimension *v5;
  std::runtime_error *exception;

  v4 = (*(uint64_t (**)(const MIL::IRDimension *))(*(_QWORD *)a2 + 16))(a2);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    std::ostream::operator<<();
  }
  else
  {
    v5 = (const MIL::IRUnknownDimension *)(*(uint64_t (**)(const MIL::IRDimension *))(*(_QWORD *)a2 + 24))(a2);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Dimension type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    MIL::Text::BasicSerializer::Dimension(this, v5);
  }
  return this;
}

void sub_1E06653B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::TypeList(MIL::Text::BasicSerializer *a1, const MIL::IRValueType ***a2)
{
  const MIL::IRValueType **v3;
  const MIL::IRValueType **v4;
  const char *v5;
  const MIL::IRValueType *v6;
  size_t v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = "";
    do
    {
      v6 = *v3++;
      v7 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v5, v7);
      MIL::Text::BasicSerializer::Type(a1, v6);
      v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::PropertyItem<unsigned char>(uint64_t a1, MIL::IRConstantProperty *this)
{
  MIL::IRConstantProperty::GetUInt8ScalarValue(this);
  std::ostream::operator<<();
  return a1;
}

uint64_t MIL::Text::BasicSerializer::PropertyItem<unsigned long long>(uint64_t a1, MIL::IRConstantProperty *this)
{
  MIL::IRConstantProperty::GetUInt64ScalarValue(this);
  std::ostream::operator<<();
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyItem(MIL::Text::BasicSerializer *this, const MIL::IRUnknownProperty *a2)
{
  const char *v3;
  uint64_t v4;

  if (MIL::IRUnknownProperty::IsVariadic(a2))
  {
    v3 = "...";
    v4 = 3;
  }
  else
  {
    v3 = "?";
    v4 = 1;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)v3, v4);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRTensorBufferValueType *a2)
{
  _QWORD *v4;
  int DataType;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  const MIL::IRDimension ***Shape;
  uint64_t Strides;
  _QWORD *v11;
  MIL::IRProperty ***v12;
  MIL::IRProperty *RowAlignmentInBytes;
  MIL::IRConstantProperty *v14;
  MIL::IRProperty ***InterleaveFactors;
  _QWORD *Attributes;
  void *__p[2];
  unsigned __int8 v19;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"tensor_buffer<", 14);
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  DataType = MIL::IRTensorBufferValueType::GetDataType(a2);
  MIL::IRDataTypeToString(DataType, __p);
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", shape=", 8);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  Shape = (const MIL::IRDimension ***)MIL::IRTensorBufferValueType::GetShape(a2);
  MIL::Text::BasicSerializer::TensorShape(this, Shape);
  Strides = MIL::IRTensorBufferValueType::TryGetStrides(a2);
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  if (Strides)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", strides=", 10);
    v12 = (MIL::IRProperty ***)MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)a2);
    MIL::Text::BasicSerializer::PropertyList<long long>(this, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", row_alignment_in_bytes=", 25);
    RowAlignmentInBytes = (MIL::IRProperty *)MIL::IRTensorBufferValueType::GetRowAlignmentInBytes((MIL::IRTensorBufferValueTypeImpl **)a2);
    v14 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(RowAlignmentInBytes);
    MIL::IRConstantProperty::GetUInt64ScalarValue(v14);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", interleave_factors=", 21);
  InterleaveFactors = (MIL::IRProperty ***)MIL::IRTensorBufferValueType::GetInterleaveFactors(a2);
  MIL::Text::BasicSerializer::PropertyList<unsigned char>(this, InterleaveFactors);
  if (*(_QWORD *)(MIL::IRTensorBufferValueType::GetAttributes(a2) + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", ", 2);
    Attributes = (_QWORD *)MIL::IRTensorBufferValueType::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t **)this, Attributes);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

void sub_1E06656A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRPixelBufferValueType *a2)
{
  _QWORD *v4;
  unsigned int PixelFormatType;
  void **v6;
  uint64_t v7;
  const MIL::IRDimension ***Shape;
  uint64_t BytesPerRow;
  MIL::IRProperty ***v10;
  uint64_t NumSlices;
  MIL::IRProperty ***v12;
  _QWORD *Attributes;
  void *__p[2];
  unsigned __int8 v16;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"pixel_buffer<", 13);
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(a2);
  MIL::IRPixelFormatTypeToString(PixelFormatType, __p);
  if ((v16 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", shape=", 8);
  Shape = (const MIL::IRDimension ***)MIL::IRPixelBufferValueType::GetShape(a2);
  MIL::Text::BasicSerializer::TensorShape(this, Shape);
  BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(a2);
  if (BytesPerRow)
  {
    v10 = (MIL::IRProperty ***)BytesPerRow;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", bytes_per_row=", 16);
    MIL::Text::BasicSerializer::PropertyList<long long>(this, v10);
  }
  NumSlices = MIL::IRPixelBufferValueType::TryGetNumSlices(a2);
  if (NumSlices)
  {
    v12 = (MIL::IRProperty ***)NumSlices;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", num_slices=", 13);
    MIL::Text::BasicSerializer::PropertyList<long long>(this, v12);
  }
  if (*(_QWORD *)(MIL::IRPixelBufferValueType::GetAttributes(a2) + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", ", 2);
    Attributes = (_QWORD *)MIL::IRPixelBufferValueType::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t **)this, Attributes);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

void sub_1E0665828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRCircularBufferValueType *a2)
{
  _QWORD *v4;
  int DataType;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  const MIL::IRDimension ***Shape;
  MIL::IRProperty ***Strides;
  MIL::IRProperty ***InterleaveFactors;
  void *WrapDim;
  MIL::IRConstantProperty *v13;
  _QWORD *SliceShape;
  void *v15;
  MIL::IRConstantProperty *v16;
  unint64_t Int64ScalarValue;
  _QWORD *Attributes;
  void *__p[2];
  unsigned __int8 v21;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)"circular_buffer<", 16);
  v4 = (_QWORD *)*((_QWORD *)this + 5);
  DataType = MIL::IRCircularBufferValueType::GetDataType(a2);
  MIL::IRDataTypeToString(DataType, __p);
  if ((v21 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v7 = v21;
  else
    v7 = (uint64_t)__p[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", shape=", 8);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  Shape = (const MIL::IRDimension ***)MIL::IRCircularBufferValueType::GetShape(a2);
  MIL::Text::BasicSerializer::TensorShape(this, Shape);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", strides=", 10);
  Strides = (MIL::IRProperty ***)MIL::IRCircularBufferValueType::GetStrides(a2);
  MIL::Text::BasicSerializer::PropertyList<long long>(this, Strides);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", interleave_factors=", 21);
  InterleaveFactors = (MIL::IRProperty ***)MIL::IRCircularBufferValueType::GetInterleaveFactors(a2);
  MIL::Text::BasicSerializer::PropertyList<unsigned char>(this, InterleaveFactors);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", wrap_dim=", 11);
  WrapDim = (void *)MIL::IRCircularBufferValueType::GetWrapDim(a2);
  v13 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(WrapDim);
  MIL::IRConstantProperty::GetInt64ScalarValue(v13);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", slice_wrap_dim_size=", 22);
  SliceShape = (_QWORD *)MIL::IRCircularBufferValueType::GetSliceShape(a2);
  v15 = (void *)MIL::IRCircularBufferValueType::GetWrapDim(a2);
  v16 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v15);
  Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v16);
  if (Int64ScalarValue >= (uint64_t)(SliceShape[1] - *SliceShape) >> 3)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  MIL::Text::BasicSerializer::Dimension(this, *(const MIL::IRDimension **)(*SliceShape + 8 * Int64ScalarValue));
  if (*(_QWORD *)(MIL::IRCircularBufferValueType::GetAttributes(a2) + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)", ", 2);
    Attributes = (_QWORD *)MIL::IRCircularBufferValueType::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t **)this, Attributes);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)">", 1);
  return this;
}

void sub_1E0665A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyList<long long>(MIL::Text::BasicSerializer *a1, MIL::IRProperty ***a2)
{
  MIL::IRProperty **v4;
  MIL::IRProperty **v5;
  const char *v6;
  size_t v7;
  MIL::IRProperty *v8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"[", 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = "";
    do
    {
      v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v6, v7);
      v8 = *v4++;
      MIL::Text::BasicSerializer::PropertyItem<long long>(a1, v8);
      v6 = ", ";
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"]", 1);
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyList<unsigned char>(MIL::Text::BasicSerializer *a1, MIL::IRProperty ***a2)
{
  MIL::IRProperty **v4;
  MIL::IRProperty **v5;
  const char *v6;
  size_t v7;
  MIL::IRProperty *v8;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"[", 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = "";
    do
    {
      v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v6, v7);
      v8 = *v4++;
      MIL::Text::BasicSerializer::PropertyItem<unsigned char>(a1, v8);
      v6 = ", ";
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"]", 1);
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Dimension(MIL::Text::BasicSerializer *this, const MIL::IRConstantDimension *a2)
{
  (*(void (**)(const MIL::IRConstantDimension *))(*(_QWORD *)a2 + 48))(a2);
  std::ostream::operator<<();
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Dimension(MIL::Text::BasicSerializer *this, const MIL::IRUnknownDimension *a2)
{
  const char *v3;
  uint64_t v4;

  if ((*(unsigned int (**)(const MIL::IRUnknownDimension *))(*(_QWORD *)a2 + 32))(a2))
  {
    v3 = "...";
    v4 = 3;
  }
  else
  {
    v3 = "?";
    v4 = 1;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)this + 5), (uint64_t)v3, v4);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Argument(MIL::Text::BasicSerializer *this, const MIL::IRArgument *a2)
{
  _QWORD *v4;
  uint64_t Name;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const MIL::IRValue *Value;

  if ((*(unsigned int (**)(const MIL::IRArgument *))(*(_QWORD *)a2 + 16))(a2))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 5);
    Name = MIL::IRArgument::GetName(a2);
    v6 = *(char *)(Name + 23);
    if (v6 >= 0)
      v7 = Name;
    else
      v7 = *(_QWORD *)Name;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(Name + 23);
    else
      v8 = *(_QWORD *)(Name + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  }
  else
  {
    Value = (const MIL::IRValue *)MIL::IRArgument::GetValue(a2);
    MIL::Text::BasicSerializer::Value(this, Value);
  }
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ArgumentList(MIL::Text::BasicSerializer *a1, const MIL::IRArgument ***a2)
{
  const MIL::IRArgument **v3;
  const MIL::IRArgument **v4;
  const char *v5;
  size_t v6;
  const MIL::IRArgument *v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = "";
    do
    {
      v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v5, v6);
      v7 = *v3;
      v3 += 2;
      MIL::Text::BasicSerializer::Argument(a1, v7);
      v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDArgumentBinding(MIL::Text::BasicSerializer *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::runtime_error *exception;
  std::string v12;

  v5 = (_QWORD *)*((_QWORD *)a1 + 5);
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" = ", 3);
  v9 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v9 < 0x11)
  {
    if (v9 != 16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v12);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    MIL::Text::BasicSerializer::Argument(a1, **(const MIL::IRArgument ***)a3);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"(", 1);
    MIL::Text::BasicSerializer::ArgumentList(a1, (const MIL::IRArgument ***)a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)")", 1);
  }
  return a1;
}

void sub_1E0665E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::Text::BasicSerializer::IDValueBinding(MIL::Text::BasicSerializer *a1, uint64_t a2, const MIL::IRValue *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = (_QWORD *)*((_QWORD *)a1 + 5);
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)"= ", 2);
  return MIL::Text::BasicSerializer::Value(a1, a3);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDTypeBindingMap(MIL::Text::BasicSerializer *a1, _QWORD *a2)
{
  uint64_t *v4;
  std::string *end;
  __int128 *v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v11;
  const char *v12;
  unsigned __int8 *v13;
  const MIL::IRValueType *v14;
  size_t v15;
  std::vector<std::string> v17;
  char v18;
  std::vector<std::string> *v19;

  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::reserve(&v17, a2[3]);
  v4 = (uint64_t *)a2[2];
  if (v4)
  {
    end = v17.__end_;
    do
    {
      v6 = (__int128 *)(v4 + 2);
      if (end >= v17.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          v7 = *v6;
          end->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        }
        ++end;
      }
      v17.__end_ = end;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    end = v17.__end_;
  }
  v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v17.__begin_) >> 3));
  if (end == v17.__begin_)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v17.__begin_, (const void **)&end->__r_.__value_.__l.__data_, (uint64_t)&v18, v9, 1);
  begin = v17.__begin_;
  v11 = v17.__end_;
  if (v17.__begin_ != v17.__end_)
  {
    v12 = "";
    do
    {
      v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin);
      if (!v13)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v14 = (const MIL::IRValueType *)*((_QWORD *)v13 + 5);
      v15 = strlen(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 5), (uint64_t)v12, v15);
      MIL::Text::BasicSerializer::IDTypeBinding(a1, (uint64_t)begin++, v14);
      v12 = ", ";
    }
    while (begin != v11);
  }
  v19 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  return a1;
}

void sub_1E0666074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::Val<BOOL>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<BOOL>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<BOOL>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<BOOL>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<BOOL>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<BOOL>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<BOOL>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<BOOL>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<BOOL>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0666CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<BOOL>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  int ScalarValue;
  const char *v7;
  uint64_t v8;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v11;
  uint64_t v12;

  Type = MIL::IRTypedTensorValue<BOOL>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v11 = 0;
  v12 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v11)
  {
    ScalarValue = MIL::IRTypedTensorValue<BOOL>::GetScalarValue(a1);
    if (ScalarValue)
      v7 = "true";
    else
      v7 = "false";
    if (ScalarValue)
      v8 = 4;
    else
      v8 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, v8);
  }
  Values = MIL::IRTypedTensorValue<BOOL>::GetValues(a1);
  if (__p)
  {
    v11 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0667000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<std::string>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<std::string>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<std::string>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<std::string>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<std::string>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<std::string>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<std::string>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<std::string>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<std::string>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0667C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<std::string>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  std::string __p;
  void *v7;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<std::string>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v7, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v7 == v8)
  {
    MIL::IRTypedTensorValue<std::string>::GetScalarValue(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = MIL::IRTypedTensorValue<std::string>::GetValues(a1);
  if (v7)
  {
    v8 = (MIL::IRDimension **)v7;
    operator delete(v7);
  }
}

void sub_1E0667F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Bf16>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Bf16>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Bf16>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<MIL::Bf16>((uint64_t)a2, *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 320));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::Bf16>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0668BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<MIL::Bf16>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v7;
  MIL::Bf16 *Values;
  void *__p;
  MIL::IRDimension **v10;
  uint64_t v11;

  Type = MIL::IRTypedTensorValue<MIL::Bf16>::GetType(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (__p == v10)
  {
    LOWORD(Values) = MIL::IRTypedTensorValue<MIL::Bf16>::GetScalarValue(a1);
    MIL::Bf16::GetFloat((MIL::Bf16 *)&Values);
  }
  Values = (MIL::Bf16 *)MIL::IRTypedTensorValue<MIL::Bf16>::GetValues(a1);
  if (__p)
  {
    v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0668F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Fp16>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp16>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp16>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<MIL::Fp16>((uint64_t)a2, *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 320));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::Fp16>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0669B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<MIL::Fp16>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v7;
  MIL::Fp16 *Values;
  void *__p;
  MIL::IRDimension **v10;
  uint64_t v11;

  Type = MIL::IRTypedTensorValue<MIL::Fp16>::GetType(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (__p == v10)
  {
    LOWORD(Values) = MIL::IRTypedTensorValue<MIL::Bf16>::GetScalarValue(a1);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&Values);
  }
  Values = (MIL::Fp16 *)MIL::IRTypedTensorValue<MIL::Bf16>::GetValues(a1);
  if (__p)
  {
    v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0669E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Fp8E5M2>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<MIL::Fp8E5M2>((uint64_t)a2, *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 320));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E066AAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<MIL::Fp8E5M2>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v7;
  MIL::Fp8E5M2 *Values;
  void *__p;
  MIL::IRDimension **v10;
  uint64_t v11;

  Type = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (__p == v10)
  {
    LOBYTE(Values) = MIL::IRTypedTensorValue<BOOL>::GetScalarValue(a1);
    MIL::Fp8E5M2::GetFloat((MIL::Fp8E5M2 *)&Values);
  }
  Values = (MIL::Fp8E5M2 *)MIL::IRTypedTensorValue<BOOL>::GetValues(a1);
  if (__p)
  {
    v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E066AE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Fp8E4M3FN>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<MIL::Fp8E4M3FN>((uint64_t)a2, *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 320));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E066BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<MIL::Fp8E4M3FN>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v7;
  MIL::Fp8E4M3FN *Values;
  void *__p;
  MIL::IRDimension **v10;
  uint64_t v11;

  Type = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (__p == v10)
  {
    LOBYTE(Values) = MIL::IRTypedTensorValue<BOOL>::GetScalarValue(a1);
    MIL::Fp8E4M3FN::GetFloat((MIL::Fp8E4M3FN *)&Values);
  }
  Values = (MIL::Fp8E4M3FN *)MIL::IRTypedTensorValue<BOOL>::GetValues(a1);
  if (__p)
  {
    v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E066BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<float>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<float>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<float>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<float>((uint64_t)a2, *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 320));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<float>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<float>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<float>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<float>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<float>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E066C9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<float>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v7;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v10;
  uint64_t v11;

  Type = MIL::IRTypedTensorValue<float>::GetType(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (__p == v10)
  {
    MIL::IRTypedTensorValue<float>::GetScalarValue(a1);
  }
  Values = MIL::IRTypedTensorValue<float>::GetValues(a1);
  if (__p)
  {
    v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E066CD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<double>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<double>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<double>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<double>((uint64_t)a2, *(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 320));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<double>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<double>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<double>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<double>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<double>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E066D960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<double>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v7;
  double ScalarValue;
  void *__p;
  MIL::IRDimension **v10;
  uint64_t v11;

  Type = MIL::IRTypedTensorValue<double>::GetType(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  if (__p == v10)
  {
    ScalarValue = MIL::IRTypedTensorValue<double>::GetScalarValue(a1);
  }
  ScalarValue = COERCE_DOUBLE(MIL::IRTypedTensorValue<double>::GetValues(a1));
  if (__p)
  {
    v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E066DC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Int4>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Int4>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Int4>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelperForSubByteTypes<MIL::Int4>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::Int4>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E066E8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<signed char>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<signed char>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<signed char>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<signed char>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<signed char>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<signed char>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<signed char>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<signed char>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<signed char>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E066F774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<signed char>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<signed char>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<signed char>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<BOOL>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E066FA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<short>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<short>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<short>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<short>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<short>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<short>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<short>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<short>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<short>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E06706D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<short>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<short>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<short>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<MIL::Bf16>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E06709D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<int>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<int>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<int>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<int>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<int>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<int>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<int>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<int>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<int>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0671634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<int>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<int>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<int>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<float>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0671934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<long long>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<long long>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<long long>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<long long>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<long long>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<long long>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<long long>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<long long>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<long long>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0672594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<long long>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<long long>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<long long>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<double>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0672894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt1>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt1>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt1>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelperForSubByteTypes<MIL::UInt1>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::UInt1>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E06734F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt2>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt2>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt2>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelperForSubByteTypes<MIL::UInt2>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::UInt2>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0674390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt3>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt3>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::UInt3>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt3>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelperForSubByteTypes<MIL::UInt3>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::UInt3>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::UInt3>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt3>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::UInt3>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt3>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::UInt3>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::UInt3>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::UInt3>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E067522C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt4>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt4>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::UInt4>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt4>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelperForSubByteTypes<MIL::UInt4>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::UInt4>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::UInt4>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt4>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::UInt4>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt4>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::UInt4>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::UInt4>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::UInt4>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E06760C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt6>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt6>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<MIL::UInt6>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt6>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelperForSubByteTypes<MIL::UInt6>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<MIL::UInt6>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<MIL::UInt6>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt6>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<MIL::UInt6>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<MIL::UInt6>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<MIL::UInt6>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<MIL::UInt6>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<MIL::UInt6>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0676F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<unsigned char>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned char>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<unsigned char>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned char>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<unsigned char>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<unsigned char>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<unsigned char>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<unsigned char>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<unsigned char>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<unsigned char>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<unsigned char>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<unsigned char>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<unsigned char>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0677E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<unsigned char>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<unsigned char>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<BOOL>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<BOOL>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0678100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<unsigned short>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned short>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<unsigned short>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned short>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<unsigned short>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<unsigned short>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<unsigned short>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<unsigned short>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<unsigned short>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<unsigned short>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<unsigned short>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<unsigned short>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<unsigned short>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0678D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<unsigned short>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<unsigned short>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<MIL::Bf16>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<MIL::Bf16>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0679060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<unsigned int>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned int>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<unsigned int>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned int>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<unsigned int>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<unsigned int>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<unsigned int>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<unsigned int>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<unsigned int>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<unsigned int>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<unsigned int>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<unsigned int>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<unsigned int>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E0679CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<unsigned int>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<unsigned int>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<int>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<float>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E0679FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<unsigned long long>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4;
  MIL::IRValueType *Type;
  uint64_t v6;
  unint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  const void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t FileProperties;
  _QWORD *v24;
  unsigned __int8 *v25;
  std::__shared_weak_count *size;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const MIL::IRTensorValueType *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  const void *v49;
  uint64_t *v50;
  const void *v51;
  uint64_t *v52;
  const void *v53;
  uint64_t *v54;
  const void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  std::string::size_type v80;
  void (***v81)(MIL::MILContextImpl *__hidden);
  uint64_t v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  std::__shared_weak_count *v90;
  MIL::Blob::StorageWriter *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  MIL::IRValueType *v95;
  _anonymous_namespace_ *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  std::logic_error *exception;
  std::string *v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  __int128 *v111[2];
  std::string __str;
  uint64_t v113;
  std::string __p;
  MIL::Blob::StorageWriter *v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  int v118;

  v4 = *(_QWORD *)(a1 + 384);
  if (v4)
  {
    Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned long long>::GetType((uint64_t)a2);
    v6 = MIL::IRValueType::AsTensorType(Type);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = v7 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 136))(*(_QWORD *)(a1 + 320));
  }
  else
  {
    v8 = MIL::IRTypedTensorValue<unsigned long long>::UsesFileStorage((uint64_t)a2);
  }
  v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<unsigned long long>::GetType((uint64_t)a2);
  v10 = MIL::IRValueType::AsTensorType(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  v12 = v11;
  if (v4 && v8 && (v11 <= 0x19 ? (v13 = ((1 << v11) & 0x3F9EE30) == 0) : (v13 = 1), v13) || (v8 & 1) == 0)
  {
    ValHelper<unsigned long long>((uint64_t)a2, *(_QWORD **)(a1 + 40));
    return a1;
  }
  memset(v117, 0, sizeof(v117));
  v118 = 1065353216;
  if (!v4)
  {
    FileProperties = MIL::IRTypedTensorValue<unsigned long long>::GetFileProperties((uint64_t)a2);
    if (v117 != (_OWORD *)FileProperties)
    {
      v118 = *(_DWORD *)(FileProperties + 32);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(FileProperties + 16), 0);
    }
    goto LABEL_100;
  }
  v115 = 0;
  v116 = 0;
  if (MIL::IRTypedTensorValue<unsigned long long>::UsesFileStorage((uint64_t)a2))
  {
    v14 = (_QWORD *)MIL::IRTypedTensorValue<unsigned long long>::GetFileProperties((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "path");
    v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v14, (unsigned __int8 *)&__p);
    if (!v15)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v17 = (const void *)*((_QWORD *)v15 + 5);
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    MIL::IRValue::GetScalar<std::string>(v17, &__p);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v20 = (uint64_t *)std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v110);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, v20 + 7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v115, (uint64_t *)(*(_QWORD *)(a1 + 368) + 56));
  }
  memset(&__p, 0, sizeof(__p));
  v113 = 0;
  if (!MIL::IRTypedTensorValue<unsigned long long>::UsesFileStorage((uint64_t)a2))
    goto LABEL_66;
  v24 = (_QWORD *)MIL::IRTypedTensorValue<unsigned long long>::GetFileProperties((uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  if (!v25)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (const void *)*((_QWORD *)v25 + 5);
  size = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)size;
  if (size)
  {
    v28 = (unint64_t *)&size->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v27, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
  v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v31)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v33 = (__int128 *)*((_QWORD *)v32 + 5);
      v34 = (__int128 *)*((_QWORD *)v32 + 6);
      v111[0] = v33;
      v111[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)v34 + 1;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v113 = MIL::IRValue::GetScalar<unsigned long long>(v33);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p))
      {
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((_QWORD *)(a1 + 328), (unsigned __int8 *)&__p);
        if (!v37)
          goto LABEL_146;
        v38 = v37 + 40;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((_QWORD *)v37 + 5, (unint64_t *)&v113))
        {
          v39 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v38, (unint64_t *)&v113);
          if (v39)
          {
            v40 = (const MIL::IRTensorValueType *)v39[3];
            LOBYTE(v31) = 1;
LABEL_53:
            if (v34)
            {
              v41 = (unint64_t *)v34 + 1;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                (*(void (**)(__int128 *))(*(_QWORD *)v34 + 16))(v34);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
              }
            }
            size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
            if (!v110.__r_.__value_.__l.__size_)
              goto LABEL_65;
            goto LABEL_62;
          }
LABEL_146:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
      LOBYTE(v31) = 0;
      v40 = 0;
      goto LABEL_53;
    }
  }
  else if (v30)
  {
    goto LABEL_41;
  }
  v40 = 0;
  if (!size)
    goto LABEL_65;
LABEL_62:
  v43 = (unint64_t *)&size->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if ((v31 & 1) == 0)
      goto LABEL_66;
    goto LABEL_87;
  }
LABEL_65:
  if ((v31 & 1) == 0)
  {
LABEL_66:
    switch(v12)
    {
      case 4:
        v45 = (uint64_t *)v115;
        v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp16>(v46);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(v45);
        break;
      case 5:
        v74 = (uint64_t *)v115;
        v75 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<float>(v75);
        v47 = MIL::Blob::StorageWriter::WriteData<float>(v74);
        break;
      case 9:
        v68 = (uint64_t *)v115;
        v69 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<signed char>(v69);
        v47 = MIL::Blob::StorageWriter::WriteData<signed char>(v68);
        break;
      case 10:
        v72 = (uint64_t *)v115;
        v73 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<short>(v73);
        v47 = MIL::Blob::StorageWriter::WriteData<short>(v72);
        break;
      case 11:
        v62 = (uint64_t *)v115;
        v63 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<int>(v63);
        v47 = MIL::Blob::StorageWriter::WriteData<int>(v62);
        break;
      case 13:
        v66 = (uint64_t *)v115;
        v67 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Int4>(v67);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>(v66);
        break;
      case 14:
        v76 = (uint64_t *)v115;
        v77 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned char>(v77);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned char>(v76);
        break;
      case 15:
        v70 = (uint64_t *)v115;
        v71 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned short>(v71);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned short>(v70);
        break;
      case 16:
        v56 = (uint64_t *)v115;
        v57 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<unsigned int>(v57);
        v47 = MIL::Blob::StorageWriter::WriteData<unsigned int>(v56);
        break;
      case 19:
        v50 = (uint64_t *)v115;
        v51 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt2>(v51);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(v50);
        break;
      case 20:
        v54 = (uint64_t *)v115;
        v55 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt4>(v55);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(v54);
        break;
      case 21:
        v48 = (uint64_t *)v115;
        v49 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt1>(v49);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(v48);
        break;
      case 22:
        v52 = (uint64_t *)v115;
        v53 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt3>(v53);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(v52);
        break;
      case 23:
        v58 = (uint64_t *)v115;
        v59 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::UInt6>(v59);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(v58);
        break;
      case 24:
        v60 = (uint64_t *)v115;
        v61 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v61);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(v60);
        break;
      case 25:
        v64 = (uint64_t *)v115;
        v65 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
        MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v65);
        v47 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(v64);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v12, &v110);
        v107 = std::string::insert(&v110, 0, "[MIL Serialization] Unsupported Data type ");
        v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &__str);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v40 = (const MIL::IRTensorValueType *)v47;
    if (MIL::IRTypedTensorValue<unsigned long long>::UsesFileStorage((uint64_t)a2))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v78 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v78 + 40), (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, &__str)[3] = v40;
    }
  }
LABEL_87:
  v79 = MIL::IRTypedTensorValue<unsigned long long>::GetType((uint64_t)a2);
  v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v81 = *(void (****)(MIL::MILContextImpl *__hidden))a1;
  MIL::Blob::StorageWriter::GetFilePath(v115, &__str);
  MIL::IRTensorValueType::MakeValueFromBlobFile(v80, v81, (uint64_t)&__str, v40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v82 = v110.__r_.__value_.__r.__words[0];
  *(_BYTE *)(a1 + 312) = 1;
  v83 = MIL::IRTypedTensorValue<unsigned long long>::GetFileProperties(v82);
  if (v117 != (_OWORD *)v83)
  {
    v118 = *(_DWORD *)(v83 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v117, *(uint64_t **)(v83 + 16), 0);
  }
  v84 = v110.__r_.__value_.__r.__words[0];
  v110.__r_.__value_.__r.__words[0] = 0;
  if (v84)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = v116;
  if (v116)
  {
    v86 = (unint64_t *)&v116->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_100:
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v88)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::IRValue::GetScalar<std::string>(*((const void **)v88 + 5), &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "type");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&__str);
  if (!v89)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v91 = (MIL::Blob::StorageWriter *)*((_QWORD *)v89 + 5);
  v90 = (std::__shared_weak_count *)*((_QWORD *)v89 + 6);
  v115 = v91;
  v116 = v90;
  if (v90)
  {
    v92 = (unint64_t *)&v90->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  MIL::IRValue::GetScalar<std::string>(v91, &__str);
  v94 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
  MIL::Util::ReplaceModelPaths(&__str, v94);
  v95 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::Blob::StorageWriter *))(*(_QWORD *)v91 + 32))(v91);
  v96 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v95);
  v109 = __str;
  memset(&__str, 0, sizeof(__str));
  MIL::IRTensorValueType::MakeStringValue(v96, (const MIL::IRTensorValueType *)&v109, &v113);
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v111[0] = (__int128 *)&v110;
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v117, (unsigned __int8 *)&v110, (uint64_t)&std::piecewise_construct, v111);
  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v97 + 5, &v113);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v98 = v113;
  v113 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v90)
  {
    v99 = (unint64_t *)&v90->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v102 = __p.__r_.__value_.__l.__size_;
  v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)p_p, v102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::string::basic_string[abi:ne180100]<0>(&v110, "path");
  v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v117, (unsigned __int8 *)&v110);
  if (!v104)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Text::BasicSerializer::IDValueBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)&__str, *((const MIL::IRValue **)v104 + 5));
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "path");
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v117, (unsigned __int8 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)", ", 2);
  MIL::Text::BasicSerializer::IDValueBindingMap((uint64_t **)a1, v117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a1 + 40), (uint64_t)")", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v117);
  return a1;
}

void sub_1E067AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a28 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0)
        operator delete(a30);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v39 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

void ValHelper<unsigned long long>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t Values;
  void *__p;
  MIL::IRDimension **v8;
  uint64_t v9;

  Type = MIL::IRTypedTensorValue<unsigned long long>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v8 = 0;
  v9 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<long long>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  Values = MIL::IRTypedTensorValue<double>::GetValues(a1);
  if (__p)
  {
    v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_1E067AF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99DF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99DF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,std::string>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<unsigned long long,unsigned long long>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<unsigned long long,unsigned long long>>,0>(uint64_t a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Blob::StorageWriter,std::allocator<MIL::Blob::StorageWriter>,std::string const&,BOOL,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL,std::allocator<MIL::Blob::StorageWriter>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E067B0DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL,std::allocator<MIL::Blob::StorageWriter>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EA99DF58;
  MIL::Blob::StorageWriter::StorageWriter(a1 + 3, a2, *a3);
  return a1;
}

void sub_1E067B12C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99DF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99DF58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::__on_zero_shared(uint64_t a1)
{
  MIL::Blob::StorageWriter::~StorageWriter((MIL::Blob::FileWriter ***)(a1 + 24));
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1E067B2B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Blob::StorageWriter,std::allocator<MIL::Blob::StorageWriter>,std::string &,BOOL,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::__shared_ptr_emplace[abi:ne180100]<std::string &,BOOL,std::allocator<MIL::Blob::StorageWriter>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E067B41C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::Blob::StorageWriter>::__shared_ptr_emplace[abi:ne180100]<std::string &,BOOL,std::allocator<MIL::Blob::StorageWriter>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EA99DF58;
  MIL::Blob::StorageWriter::StorageWriter(a1 + 3, a2, *a3);
  return a1;
}

void sub_1E067B46C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<BOOL,MIL::Util::Span<BOOL const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  const char *v13;
  unint64_t v14;
  size_t v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = "";
          v14 = *a3 + v9;
          do
          {
            v15 = strlen(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v15);
            if (*(_BYTE *)*a3)
              v16 = "true";
            else
              v16 = "false";
            if (*(_BYTE *)*a3)
              v17 = 4;
            else
              v17 = 5;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            v18 = *a3 + 1;
            *a3 = v18;
            v13 = ", ";
          }
          while (v18 < v14);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E067B868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E067B914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<unsigned long long,unsigned long long>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E067BB78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v8 + 5, v4 + 5);
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, (__int128 *)v4 + 1);
    v4 = (uint64_t *)*v4;
  }
}

void sub_1E067BC60(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1E067BC7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1E067C158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1E067C1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ScalarToString<std::string>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14[2];
  unsigned __int8 v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  char v20;

  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"", 1);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = *((char *)a1 + 23) < 0;
  v5 = *((unsigned __int8 *)a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a1[1];
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v4)
        v7 = (uint64_t *)*a1;
      else
        v7 = a1;
      v8 = *((unsigned __int8 *)v7 + v6);
      if (v8 == 92 || v8 == 34)
      {
        v20 = 92;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      }
      v20 = v8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v20, 1);
      ++v6;
      v4 = *((char *)a1 + 23) < 0;
      v9 = *((unsigned __int8 *)a1 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = a1[1];
    }
    while (v6 < v9);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](&v19);
  if ((v15 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v12 = v15;
  else
    v12 = (uint64_t)v14[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\"", 1);
  if ((char)v15 < 0)
    operator delete(v14[0]);
}

void sub_1E067C3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<std::string,MIL::Util::Span<std::string const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, uint64_t **a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = (unint64_t)&(*a3)[3 * v9];
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            v16 = (unint64_t)(*a3 + 3);
            *a3 = (uint64_t *)v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1E067C624(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0C022F8](a1 + 128);
  return a1;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<MIL::Bf16,MIL::Util::Span<MIL::Bf16 const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, MIL::Bf16 **a3, _QWORD *a4, uint64_t a5)
{
  MIL::IRDimension **v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRDimension **v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v9 = result;
    v10 = MIL::IRDimension::AsConstant(*result);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v11)
    {
      if (a2 - 1 == v9)
      {
        if (v11 >= 1)
        {
          v15 = (unint64_t)*a3 + 2 * v11;
          v16 = "";
          do
          {
            v17 = strlen(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            MIL::Bf16::GetFloat(*a3);
            v18 = (unint64_t)*a3 + 2;
            *a3 = (MIL::Bf16 *)v18;
            v16 = ", ";
          }
          while (v18 < v15);
        }
      }
      else
      {
        v12 = v9 + 1;
        v13 = "";
        do
        {
          v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v14);
          v13 = ", ";
          --v11;
        }
        while (v11);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

_QWORD *`anonymous namespace'::FloatToString<float>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  _QWORD *result;
  std::runtime_error *exception;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, a1);
  if (v4 == 1)
  {
    *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) |= 0x104u;
    result = (_QWORD *)std::ostream::operator<<();
    *(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 8) = *(_DWORD *)((_BYTE *)result
                                                                              + *(_QWORD *)(*result - 24)
                                                                              + 8) & 0xFFFFFEFB | 4;
  }
  else
  {
    if (v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected float serialization mode.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = 9;
    return (_QWORD *)std::ostream::operator<<();
  }
  return result;
}

void sub_1E067C93C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<MIL::Fp16,MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, MIL::Fp16 **a3, _QWORD *a4, uint64_t a5)
{
  MIL::IRDimension **v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRDimension **v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v9 = result;
    v10 = MIL::IRDimension::AsConstant(*result);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v11)
    {
      if (a2 - 1 == v9)
      {
        if (v11 >= 1)
        {
          v15 = (unint64_t)*a3 + 2 * v11;
          v16 = "";
          do
          {
            v17 = strlen(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            MIL::Fp16::GetFloat(*a3);
            v18 = (unint64_t)*a3 + 2;
            *a3 = (MIL::Fp16 *)v18;
            v16 = ", ";
          }
          while (v18 < v15);
        }
      }
      else
      {
        v12 = v9 + 1;
        v13 = "";
        do
        {
          v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v14);
          v13 = ", ";
          --v11;
        }
        while (v11);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<MIL::Fp8E5M2,MIL::Util::Span<MIL::Fp8E5M2 const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, MIL::Fp8E5M2 **a3, _QWORD *a4, uint64_t a5)
{
  MIL::IRDimension **v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRDimension **v12;
  const char *v13;
  size_t v14;
  char *v15;
  const char *v16;
  size_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v9 = result;
    v10 = MIL::IRDimension::AsConstant(*result);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v11)
    {
      if (a2 - 1 == v9)
      {
        if (v11 >= 1)
        {
          v15 = (char *)*a3 + v11;
          v16 = "";
          do
          {
            v17 = strlen(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            MIL::Fp8E5M2::GetFloat(*a3);
            v18 = (unint64_t)*a3 + 1;
            *a3 = (MIL::Fp8E5M2 *)v18;
            v16 = ", ";
          }
          while (v18 < (unint64_t)v15);
        }
      }
      else
      {
        v12 = v9 + 1;
        v13 = "";
        do
        {
          v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v14);
          v13 = ", ";
          --v11;
        }
        while (v11);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<MIL::Fp8E4M3FN,MIL::Util::Span<MIL::Fp8E4M3FN const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, MIL::Fp8E4M3FN **a3, _QWORD *a4, uint64_t a5)
{
  MIL::IRDimension **v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRDimension **v12;
  const char *v13;
  size_t v14;
  char *v15;
  const char *v16;
  size_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v9 = result;
    v10 = MIL::IRDimension::AsConstant(*result);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v11)
    {
      if (a2 - 1 == v9)
      {
        if (v11 >= 1)
        {
          v15 = (char *)*a3 + v11;
          v16 = "";
          do
          {
            v17 = strlen(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            MIL::Fp8E4M3FN::GetFloat(*a3);
            v18 = (unint64_t)*a3 + 1;
            *a3 = (MIL::Fp8E4M3FN *)v18;
            v16 = ", ";
          }
          while (v18 < (unint64_t)v15);
        }
      }
      else
      {
        v12 = v9 + 1;
        v13 = "";
        do
        {
          v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v14);
          v13 = ", ";
          --v11;
        }
        while (v11);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<float,MIL::Util::Span<float const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4, uint64_t a5)
{
  MIL::IRDimension **v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRDimension **v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v9 = result;
    v10 = MIL::IRDimension::AsConstant(*result);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v11)
    {
      if (a2 - 1 == v9)
      {
        if (v11 >= 1)
        {
          v15 = *a3 + 4 * v11;
          v16 = "";
          do
          {
            v17 = strlen(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            v18 = *a3 + 4;
            *a3 = v18;
            v16 = ", ";
          }
          while (v18 < v15);
        }
      }
      else
      {
        v12 = v9 + 1;
        v13 = "";
        do
        {
          v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v14);
          v13 = ", ";
          --v11;
        }
        while (v11);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

_QWORD *`anonymous namespace'::ScalarToString<double>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  _QWORD *result;
  std::runtime_error *exception;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, 6);
  if (v4 == 1)
  {
    *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) |= 0x104u;
    result = (_QWORD *)std::ostream::operator<<();
    *(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 8) = *(_DWORD *)((_BYTE *)result
                                                                              + *(_QWORD *)(*result - 24)
                                                                              + 8) & 0xFFFFFEFB | 4;
  }
  else
  {
    if (v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected float serialization mode.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = 17;
    return (_QWORD *)std::ostream::operator<<();
  }
  return result;
}

void sub_1E067CFC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<double,MIL::Util::Span<double const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  MIL::IRDimension **v9;
  uint64_t v10;
  uint64_t v11;
  MIL::IRDimension **v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  unint64_t v18;

  if (result != a2)
  {
    v9 = result;
    v10 = MIL::IRDimension::AsConstant(*result);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v11)
    {
      if (a2 - 1 == v9)
      {
        if (v11 >= 1)
        {
          v15 = *a3 + 8 * v11;
          v16 = "";
          do
          {
            v17 = strlen(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v16, v17);
            v18 = *a3 + 8;
            *a3 = v18;
            v16 = ", ";
          }
          while (v18 < v15);
        }
      }
      else
      {
        v12 = v9 + 1;
        v13 = "";
        do
        {
          v14 = strlen(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v13, v14);
          v13 = ", ";
          --v11;
        }
        while (v11);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

void ValHelperForSubByteTypes<MIL::Int4>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  MIL::IRDimension **v35;
  uint64_t v36;

  Type = MIL::IRTypedTensorValue<MIL::Int4>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v34 == v35)
  {
    LOBYTE(v32) = MIL::IRTypedTensorValue<MIL::Int4>::GetScalarValue(a1);
    MIL::Int4::GetInt((MIL::Int4 *)&v32);
    std::ostream::operator<<();
  }
  MIL::IRTypedTensorValue<MIL::Int4>::GetValues(a1);
  v8 = ((v7 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v7 & 1);
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v9, (uint64_t)v9 + v8, v8);
  v10 = MIL::IRTypedTensorValue<MIL::Int4>::GetType(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  MIL::UnPackSubByteVec<MIL::Int4>(&v32, &__p, v11);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = (char *)v32;
  v13 = v33;
  if (v32 == v33)
  {
    v14 = 0;
    v26 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v14 >= v31)
      {
        v15 = (unint64_t)__p;
        v16 = v14 - (_BYTE *)__p;
        v17 = v14 - (_BYTE *)__p + 1;
        if (v17 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v31 - (_BYTE *)__p;
        if (2 * (v31 - (_BYTE *)__p) > (unint64_t)v17)
          v17 = 2 * v18;
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)operator new(v19);
        else
          v20 = 0;
        v21 = &v20[v16];
        v22 = &v20[v16];
        *v22 = *v12;
        v23 = v22 + 1;
        if (v14 != (char *)v15)
        {
          v24 = &v14[~v15];
          do
          {
            v25 = *--v14;
            (v24--)[(_QWORD)v20] = v25;
          }
          while (v14 != (char *)v15);
          v14 = (char *)__p;
          v21 = v20;
        }
        __p = v21;
        v30 = v23;
        v31 = &v20[v19];
        if (v14)
          operator delete(v14);
        v14 = v23;
      }
      else
      {
        *v14++ = *v12;
      }
      v30 = v14;
      ++v12;
    }
    while (v12 != v13);
    v26 = (char *)__p;
  }
  if (v14 == v26)
    v27 = 0;
  else
    v27 = (unint64_t)v26;
  v28 = v27;
  if (v26)
    operator delete(v26);
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = (MIL::IRDimension **)v34;
    operator delete(v34);
  }
}

void sub_1E067D364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<signed char,MIL::Util::Span<signed char const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 1;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<short,MIL::Util::Span<short const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + 2 * v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 2;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<int,MIL::Util::Span<int const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + 4 * v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 4;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<long long,MIL::Util::Span<long long const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + 8 * v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 8;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

void ValHelperForSubByteTypes<MIL::UInt1>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  MIL::IRDimension **v35;
  uint64_t v36;

  Type = MIL::IRTypedTensorValue<MIL::UInt1>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v34 == v35)
  {
    LOBYTE(v32) = MIL::IRTypedTensorValue<MIL::UInt1>::GetScalarValue(a1);
    MIL::UInt1::GetInt((MIL::UInt1 *)&v32);
    std::ostream::operator<<();
  }
  MIL::IRTypedTensorValue<MIL::UInt1>::GetValues(a1);
  if ((v7 & 7) != 0)
    v8 = (v7 >> 3) + 1;
  else
    v8 = v7 >> 3;
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v9, (uint64_t)v9 + v8, v8);
  v10 = MIL::IRTypedTensorValue<MIL::UInt1>::GetType(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  MIL::UnPackSubByteVec<MIL::UInt1>(&v32, &__p, v11);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = (char *)v32;
  v13 = v33;
  if (v32 == v33)
  {
    v14 = 0;
    v26 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v14 >= v31)
      {
        v15 = (unint64_t)__p;
        v16 = v14 - (_BYTE *)__p;
        v17 = v14 - (_BYTE *)__p + 1;
        if (v17 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v31 - (_BYTE *)__p;
        if (2 * (v31 - (_BYTE *)__p) > (unint64_t)v17)
          v17 = 2 * v18;
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)operator new(v19);
        else
          v20 = 0;
        v21 = &v20[v16];
        v22 = &v20[v16];
        *v22 = *v12;
        v23 = v22 + 1;
        if (v14 != (char *)v15)
        {
          v24 = &v14[~v15];
          do
          {
            v25 = *--v14;
            (v24--)[(_QWORD)v20] = v25;
          }
          while (v14 != (char *)v15);
          v14 = (char *)__p;
          v21 = v20;
        }
        __p = v21;
        v30 = v23;
        v31 = &v20[v19];
        if (v14)
          operator delete(v14);
        v14 = v23;
      }
      else
      {
        *v14++ = *v12;
      }
      v30 = v14;
      ++v12;
    }
    while (v12 != v13);
    v26 = (char *)__p;
  }
  if (v14 == v26)
    v27 = 0;
  else
    v27 = (unint64_t)v26;
  v28 = v27;
  if (v26)
    operator delete(v26);
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = (MIL::IRDimension **)v34;
    operator delete(v34);
  }
}

void sub_1E067DB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<unsigned char,MIL::Util::Span<unsigned char const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 1;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

void ValHelperForSubByteTypes<MIL::UInt2>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  MIL::IRDimension **v35;
  uint64_t v36;

  Type = MIL::IRTypedTensorValue<MIL::UInt2>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v34 == v35)
  {
    LOBYTE(v32) = MIL::IRTypedTensorValue<MIL::UInt2>::GetScalarValue(a1);
    MIL::UInt2::GetInt((MIL::UInt2 *)&v32);
    std::ostream::operator<<();
  }
  MIL::IRTypedTensorValue<MIL::UInt2>::GetValues(a1);
  if ((v7 & 3) != 0)
    v8 = ((v7 >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  else
    v8 = (v7 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v9, (uint64_t)v9 + v8, v8);
  v10 = MIL::IRTypedTensorValue<MIL::UInt2>::GetType(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  MIL::UnPackSubByteVec<MIL::UInt2>(&v32, &__p, v11);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = (char *)v32;
  v13 = v33;
  if (v32 == v33)
  {
    v14 = 0;
    v26 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v14 >= v31)
      {
        v15 = (unint64_t)__p;
        v16 = v14 - (_BYTE *)__p;
        v17 = v14 - (_BYTE *)__p + 1;
        if (v17 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v31 - (_BYTE *)__p;
        if (2 * (v31 - (_BYTE *)__p) > (unint64_t)v17)
          v17 = 2 * v18;
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)operator new(v19);
        else
          v20 = 0;
        v21 = &v20[v16];
        v22 = &v20[v16];
        *v22 = *v12;
        v23 = v22 + 1;
        if (v14 != (char *)v15)
        {
          v24 = &v14[~v15];
          do
          {
            v25 = *--v14;
            (v24--)[(_QWORD)v20] = v25;
          }
          while (v14 != (char *)v15);
          v14 = (char *)__p;
          v21 = v20;
        }
        __p = v21;
        v30 = v23;
        v31 = &v20[v19];
        if (v14)
          operator delete(v14);
        v14 = v23;
      }
      else
      {
        *v14++ = *v12;
      }
      v30 = v14;
      ++v12;
    }
    while (v12 != v13);
    v26 = (char *)__p;
  }
  if (v14 == v26)
    v27 = 0;
  else
    v27 = (unint64_t)v26;
  v28 = v27;
  if (v26)
    operator delete(v26);
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = (MIL::IRDimension **)v34;
    operator delete(v34);
  }
}

void sub_1E067DF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ValHelperForSubByteTypes<MIL::UInt3>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  MIL::IRDimension **v35;
  uint64_t v36;

  Type = MIL::IRTypedTensorValue<MIL::UInt3>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v34 == v35)
  {
    LOBYTE(v32) = MIL::IRTypedTensorValue<MIL::UInt3>::GetScalarValue(a1);
    MIL::UInt3::GetInt((MIL::UInt3 *)&v32);
    std::ostream::operator<<();
  }
  MIL::IRTypedTensorValue<MIL::UInt3>::GetValues(a1);
  if (((3 * v7) & 7) != 0)
    v8 = ((unint64_t)(3 * v7) >> 3) + 1;
  else
    v8 = (unint64_t)(3 * v7) >> 3;
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v9, (uint64_t)v9 + v8, v8);
  v10 = MIL::IRTypedTensorValue<MIL::UInt3>::GetType(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  MIL::UnPackSubByteVec<MIL::UInt3>(&v32, &__p, v11);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = (char *)v32;
  v13 = v33;
  if (v32 == v33)
  {
    v14 = 0;
    v26 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v14 >= v31)
      {
        v15 = (unint64_t)__p;
        v16 = v14 - (_BYTE *)__p;
        v17 = v14 - (_BYTE *)__p + 1;
        if (v17 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v31 - (_BYTE *)__p;
        if (2 * (v31 - (_BYTE *)__p) > (unint64_t)v17)
          v17 = 2 * v18;
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)operator new(v19);
        else
          v20 = 0;
        v21 = &v20[v16];
        v22 = &v20[v16];
        *v22 = *v12;
        v23 = v22 + 1;
        if (v14 != (char *)v15)
        {
          v24 = &v14[~v15];
          do
          {
            v25 = *--v14;
            (v24--)[(_QWORD)v20] = v25;
          }
          while (v14 != (char *)v15);
          v14 = (char *)__p;
          v21 = v20;
        }
        __p = v21;
        v30 = v23;
        v31 = &v20[v19];
        if (v14)
          operator delete(v14);
        v14 = v23;
      }
      else
      {
        *v14++ = *v12;
      }
      v30 = v14;
      ++v12;
    }
    while (v12 != v13);
    v26 = (char *)__p;
  }
  if (v14 == v26)
    v27 = 0;
  else
    v27 = (unint64_t)v26;
  v28 = v27;
  if (v26)
    operator delete(v26);
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = (MIL::IRDimension **)v34;
    operator delete(v34);
  }
}

void sub_1E067E1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ValHelperForSubByteTypes<MIL::UInt4>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  MIL::IRDimension **v35;
  uint64_t v36;

  Type = MIL::IRTypedTensorValue<MIL::UInt4>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v34 == v35)
  {
    LOBYTE(v32) = MIL::IRTypedTensorValue<MIL::UInt4>::GetScalarValue(a1);
    MIL::UInt4::GetInt((MIL::UInt4 *)&v32);
    std::ostream::operator<<();
  }
  MIL::IRTypedTensorValue<MIL::UInt4>::GetValues(a1);
  v8 = ((v7 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v7 & 1);
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v9, (uint64_t)v9 + v8, v8);
  v10 = MIL::IRTypedTensorValue<MIL::UInt4>::GetType(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  MIL::UnPackSubByteVec<MIL::UInt4>(&v32, &__p, v11);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = (char *)v32;
  v13 = v33;
  if (v32 == v33)
  {
    v14 = 0;
    v26 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v14 >= v31)
      {
        v15 = (unint64_t)__p;
        v16 = v14 - (_BYTE *)__p;
        v17 = v14 - (_BYTE *)__p + 1;
        if (v17 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v31 - (_BYTE *)__p;
        if (2 * (v31 - (_BYTE *)__p) > (unint64_t)v17)
          v17 = 2 * v18;
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)operator new(v19);
        else
          v20 = 0;
        v21 = &v20[v16];
        v22 = &v20[v16];
        *v22 = *v12;
        v23 = v22 + 1;
        if (v14 != (char *)v15)
        {
          v24 = &v14[~v15];
          do
          {
            v25 = *--v14;
            (v24--)[(_QWORD)v20] = v25;
          }
          while (v14 != (char *)v15);
          v14 = (char *)__p;
          v21 = v20;
        }
        __p = v21;
        v30 = v23;
        v31 = &v20[v19];
        if (v14)
          operator delete(v14);
        v14 = v23;
      }
      else
      {
        *v14++ = *v12;
      }
      v30 = v14;
      ++v12;
    }
    while (v12 != v13);
    v26 = (char *)__p;
  }
  if (v14 == v26)
    v27 = 0;
  else
    v27 = (unint64_t)v26;
  v28 = v27;
  if (v26)
    operator delete(v26);
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = (MIL::IRDimension **)v34;
    operator delete(v34);
  }
}

void sub_1E067E49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void ValHelperForSubByteTypes<MIL::UInt6>(uint64_t a1, _QWORD *a2)
{
  uint64_t Type;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  char *v24;
  char v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  MIL::IRDimension **v35;
  uint64_t v36;

  Type = MIL::IRTypedTensorValue<MIL::UInt6>::GetType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 96))(Type);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  if (v34 == v35)
  {
    LOBYTE(v32) = MIL::IRTypedTensorValue<MIL::UInt6>::GetScalarValue(a1);
    MIL::UInt6::GetInt((MIL::UInt6 *)&v32);
    std::ostream::operator<<();
  }
  MIL::IRTypedTensorValue<MIL::UInt6>::GetValues(a1);
  if (((6 * v7) & 6) != 0)
    v8 = (((unint64_t)(3 * v7) >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  else
    v8 = ((unint64_t)(3 * v7) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
  if (v8)
    v9 = v6;
  else
    v9 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v9, (uint64_t)v9 + v8, v8);
  v10 = MIL::IRTypedTensorValue<MIL::UInt6>::GetType(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  MIL::UnPackSubByteVec<MIL::UInt6>(&v32, &__p, v11);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  v12 = (char *)v32;
  v13 = v33;
  if (v32 == v33)
  {
    v14 = 0;
    v26 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      if (v14 >= v31)
      {
        v15 = (unint64_t)__p;
        v16 = v14 - (_BYTE *)__p;
        v17 = v14 - (_BYTE *)__p + 1;
        if (v17 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v31 - (_BYTE *)__p;
        if (2 * (v31 - (_BYTE *)__p) > (unint64_t)v17)
          v17 = 2 * v18;
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)operator new(v19);
        else
          v20 = 0;
        v21 = &v20[v16];
        v22 = &v20[v16];
        *v22 = *v12;
        v23 = v22 + 1;
        if (v14 != (char *)v15)
        {
          v24 = &v14[~v15];
          do
          {
            v25 = *--v14;
            (v24--)[(_QWORD)v20] = v25;
          }
          while (v14 != (char *)v15);
          v14 = (char *)__p;
          v21 = v20;
        }
        __p = v21;
        v30 = v23;
        v31 = &v20[v19];
        if (v14)
          operator delete(v14);
        v14 = v23;
      }
      else
      {
        *v14++ = *v12;
      }
      v30 = v14;
      ++v12;
    }
    while (v12 != v13);
    v26 = (char *)__p;
  }
  if (v14 == v26)
    v27 = 0;
  else
    v27 = (unint64_t)v26;
  v28 = v27;
  if (v26)
    operator delete(v26);
  if (v32)
  {
    v33 = (char *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = (MIL::IRDimension **)v34;
    operator delete(v34);
  }
}

void sub_1E067E758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  if (v17)
    operator delete(v17);
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<unsigned short,MIL::Util::Span<unsigned short const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + 2 * v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 2;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<unsigned int,MIL::Util::Span<unsigned int const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + 4 * v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 4;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::IRDimension **`anonymous namespace'::SerializeImmediateTensorDim<unsigned long long,MIL::Util::Span<unsigned long long const,18446744073709551615ul>>(MIL::IRDimension **result, MIL::IRDimension **a2, unint64_t *a3, _QWORD *a4)
{
  MIL::IRDimension **v7;
  uint64_t v8;
  uint64_t v9;
  MIL::IRDimension **v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  unint64_t v16;

  if (result != a2)
  {
    v7 = result;
    v8 = MIL::IRDimension::AsConstant(*result);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"[", 1);
    if (v9)
    {
      if (a2 - 1 == v7)
      {
        if (v9 >= 1)
        {
          v13 = *a3 + 8 * v9;
          v14 = "";
          do
          {
            v15 = strlen(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v14, v15);
            std::ostream::operator<<();
            v16 = *a3 + 8;
            *a3 = v16;
            v14 = ", ";
          }
          while (v16 < v13);
        }
      }
      else
      {
        v10 = v7 + 1;
        v11 = "";
        do
        {
          v12 = strlen(v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v11, v12);
          v11 = ", ";
          --v9;
        }
        while (v9);
      }
    }
    return (MIL::IRDimension **)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"]", 1);
  }
  return result;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyItem<long long>(MIL::Text::BasicSerializer *a1, MIL::IRProperty *this)
{
  MIL::IRConstantProperty *v4;
  const MIL::IRUnknownProperty *v5;
  std::runtime_error *exception;

  v4 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(this);
  if (v4)
  {
    MIL::IRConstantProperty::GetInt64ScalarValue(v4);
    std::ostream::operator<<();
  }
  else
  {
    v5 = (const MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(this);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Property type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    MIL::Text::BasicSerializer::PropertyItem(a1, v5);
  }
  return a1;
}

void sub_1E067EC30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyItem<unsigned char>(MIL::Text::BasicSerializer *a1, MIL::IRProperty *this)
{
  MIL::IRConstantProperty *v4;
  const MIL::IRUnknownProperty *v5;
  std::runtime_error *exception;

  v4 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(this);
  if (v4)
  {
    MIL::IRConstantProperty::GetUInt8ScalarValue(v4);
    std::ostream::operator<<();
  }
  else
  {
    v5 = (const MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(this);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Property type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    MIL::Text::BasicSerializer::PropertyItem(a1, v5);
  }
  return a1;
}

void sub_1E067ECD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  std::match_results<const char *> __p;

  v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_1E067EDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  std::vector<std::ssub_match>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::vector<std::ssub_match>::pointer end;
  std::sub_match<std::__wrap_iter<const char *>> *v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12 * 24);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12 * 24);
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12 * 24);
      v21 = *((_BYTE *)v20 + 16);
      begin = a1->__begin_;
      end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[4].__end_ = v23;
  LOBYTE(a1[4].__begin_) = *((_BYTE *)a4 + 96);
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2;
  BOOL v3;
  std::vector<std::ssub_match>::size_type v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::__compressed_pair<std::ssub_match *> *p_end_cap;
  std::sub_match<std::__wrap_iter<const char *>> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::size_type v17;
  std::sub_match<std::__wrap_iter<const char *>> *v18;
  std::sub_match<std::__wrap_iter<const char *>> *v19;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &v7[__n];
      v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    v16 = &v15[__n];
    v17 = 24 * __n;
    v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v15[-1].matched = *(_QWORD *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
      operator delete(end);
  }
}

void MIL::Text::ParseProgram(_QWORD *a1@<X0>, uint64_t a2@<X1>, _anonymous_namespace_::IRProgramImpl **a3@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v3 = a1[1];
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v7 = a2;
    a2 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(v7 + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(a2 + 23);
  }
  MIL::Text::ParseProgramView(&v11, a2, v6, a3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1E067F1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const MIL::ParserOptions *MIL::Text::ParseProgramView@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _anonymous_namespace_::IRProgramImpl **a4@<X8>)
{
  __int128 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const MIL::ParserOptions *result;
  __int128 v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  const MIL::ParserOptions *v24;
  uint64_t v25[2];

  v25[0] = a2;
  v25[1] = a3;
  MIL::ParserOptions::Make((uint64_t *)&v24);
  v6 = (__int128 *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)v24 + 24))(v24);
  MIL::Scanner::Make(v25, v6, &v23);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions &,void>(v24, &v21);
  v18 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  MIL::Text::Parser::Program::Program((uint64_t)v19, (uint64_t *)&v18, v23, v21);
  MIL::Text::Parser::Program::Parse((MIL::Text::Parser::Program *)v19, a4);
  v19[0] = &off_1EA99C250;
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v23;
  v23 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  result = v24;
  v24 = 0;
  if (result)
    return (const MIL::ParserOptions *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E067F344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 a16, char a17, uint64_t a18, void (**a19)(MIL::Text::Parser::Program *__hidden this))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *exception;
  _QWORD *v27;
  void (**v28)(MIL::Text::Parser::Program *__hidden);
  char *v29;

  a19 = &off_1EA99C250;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 + 40);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v20 - 88);
  v23 = *(_QWORD *)(v20 - 72);
  *(_QWORD *)(v20 - 72) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(v20 - 64);
  *(_QWORD *)(v20 - 64) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    v25 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&a19);
    *(_QWORD *)&a16 = a19;
    if (a19)
    {
      v27 = (_QWORD *)operator new();
      v28 = a19;
      *v27 = &unk_1EA9940C8;
      v27[1] = 0;
      v27[2] = 0;
      v27[3] = v28;
    }
    else
    {
      v27 = 0;
    }
    *((_QWORD *)&a16 + 1) = v27;
    a19 = 0;
    v29 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
    std::string::basic_string[abi:ne180100]<0>(&__p, v29);
    MIL::ParseError::ParseError((uint64_t)exception, &a16, (uint64_t)&__p, 1);
  }
  _Unwind_Resume(a1);
}

void MIL::Text::ParseProgram(uint64_t *a1@<X0>, uint64_t a2@<X1>, const MIL::ParserOptions *a3@<X2>, _anonymous_namespace_::IRProgramImpl **a4@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v5 = (std::__shared_weak_count *)a1[1];
  v13 = *a1;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v9 = a2;
    a2 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  MIL::Text::ParseProgramView((uint64_t)&v13, a2, v8, a3, a4);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1E067F5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::ParseProgramView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const MIL::ParserOptions *a4@<X3>, _anonymous_namespace_::IRProgramImpl **a5@<X8>)
{
  __int128 *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19[3];
  _QWORD v20[6];
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25[2];

  v25[0] = a2;
  v25[1] = a3;
  v8 = (__int128 *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)a4 + 24))(a4);
  MIL::Scanner::Make(v25, v8, &v24);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions const&,void>(a4, &v22);
  *(_OWORD *)v19 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  MIL::Text::Parser::Program::Program((uint64_t)v20, v19, v24, v22);
  MIL::Text::Parser::Program::Parse((MIL::Text::Parser::Program *)v20, a5);
  v20[0] = &off_1EA99C250;
  v9 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)v19[1];
  if (v19[1])
  {
    v13 = (unint64_t *)(v19[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  result = v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E067F768(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string *a8, uint64_t a9, void *__pa, uint64_t a11, char a12, __int128 a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  void *v21;
  void *exception;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  void (**v26)(MIL::Text::Parser::Program *__hidden);
  char *v27;
  __int128 v28;
  va_list va;
  uint64_t v30;
  va_list va1;
  uint64_t v32;
  uint64_t v33;
  void (**v34)(MIL::Text::Parser::Program *__hidden);
  va_list va2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va3;

  va_start(va3, a15);
  va_start(va2, a15);
  va_start(va1, a15);
  va_start(va, a15);
  v28 = va_arg(va1, __int128);
  va_copy(va2, va1);
  v30 = va_arg(va2, _QWORD);
  v32 = va_arg(va2, _QWORD);
  v33 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  va_arg(va3, _QWORD);
  v36 = va_arg(va3, _QWORD);
  v37 = va_arg(va3, _QWORD);
  v38 = va_arg(va3, _QWORD);
  v39 = va_arg(va3, _QWORD);
  v17 = v15;
  v18 = (int)__p;
  v34 = &off_1EA99C250;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16 - 80);
  v20 = *(_QWORD *)(v16 - 64);
  *(_QWORD *)(v16 - 64) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v18 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (v18 == 1)
  {
    v21 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    if (*(char *)(v23 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a13, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v23;
      a14 = *(_QWORD *)(v23 + 16);
      a13 = v24;
    }
    MIL::TextFileLocation::Make((uint64_t)&a13, 0, 0, (uint64_t *)va2);
    *(_QWORD *)&v28 = v34;
    if (v34)
    {
      v25 = (_QWORD *)operator new();
      v26 = v34;
      *v25 = &unk_1EA99DE28;
      v25[1] = 0;
      v25[2] = 0;
      v25[3] = v26;
    }
    else
    {
      v25 = 0;
    }
    *((_QWORD *)&v28 + 1) = v25;
    v34 = 0;
    v27 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
    std::string::basic_string[abi:ne180100]<0>(&__pa, v27);
    MIL::ParseError::ParseError((uint64_t)exception, (__int128 *)va, (uint64_t)&__pa, 1);
  }
  _Unwind_Resume(a1);
}

void MIL::Text::TryParseProgram(_QWORD *a1@<X0>, uint64_t a2@<X1>, const MIL::ParserOptions *a3@<X2>, uint64_t a4@<X3>, _anonymous_namespace_::IRProgramImpl **a5@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v7 = a1[1];
  *(_QWORD *)&v15 = *a1;
  *((_QWORD *)&v15 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v11 = a2;
    a2 = *(_QWORD *)a2;
    v10 = *(_QWORD *)(v11 + 8);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  MIL::Text::TryParseProgramView(&v15, a2, v10, a3, a4, a5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E067FA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Text::TryParseProgramView(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const MIL::ParserOptions *a4@<X3>, uint64_t a5@<X4>, _anonymous_namespace_::IRProgramImpl **a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v10[48];
  int v11;
  __int128 v12;

  v12 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  MIL::Text::ParseProgramView((uint64_t)&v12, a2, a3, a4, a6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  MIL::ParseResult::ParseResult((MIL::ParseResult *)v10);
  MIL::MILResult::operator=(a5, (uint64_t)v10);
  *(_DWORD *)(a5 + 48) = v11;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)v10);
}

void sub_1E067FB20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,__int128 a23,uint64_t a24,void *a25,_QWORD *a26,void *a27,std::string *a28,int a29,__int16 a30,char a31,char a32,__int128 a33,uint64_t a34)
{
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  MIL::ParseError *v41;
  uint64_t ParseResult;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;

  v40 = *v34;
  *v34 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (a2 == 4)
  {
    v41 = (MIL::ParseError *)__cxa_begin_catch(a1);
    ParseResult = MIL::ParseError::GetParseResult(v41);
    MIL::ValidationResult::operator=(v35, ParseResult);
    goto LABEL_38;
  }
  if (a2 == 3)
  {
    v43 = __cxa_begin_catch(a1);
    v44 = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v43 + 48))(v43);
    v45 = v44[1];
    a15 = *v44;
    a16 = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v43 + 24))(&__p, v43);
    MIL::ParseResult::ParseResult(v37 - 120, &a15, 1, &__p);
    MIL::MILResult::operator=(v35, v37 - 120);
    *(_DWORD *)(v35 + 48) = *(_DWORD *)(v37 - 72);
    MIL::ParseResult::~ParseResult((MIL::ParseResult *)(v37 - 120));
    if (a14 < 0)
      operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    goto LABEL_38;
  }
  v48 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v49 = v48;
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
    if (*(char *)(v50 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a23, *(const std::string::value_type **)v50, *(_QWORD *)(v50 + 8));
    }
    else
    {
      v51 = *(_OWORD *)v50;
      a24 = *(_QWORD *)(v50 + 16);
      a23 = v51;
    }
    MIL::TextFileLocation::Make((uint64_t)&a23, 0, 0, (uint64_t *)(v37 - 144));
    a25 = *(void **)(v37 - 144);
    if (a25)
    {
      v54 = (_QWORD *)operator new();
      v55 = *(_QWORD *)(v37 - 144);
      *v54 = &unk_1EA99DE28;
      v54[1] = 0;
      v54[2] = 0;
      v54[3] = v55;
    }
    else
    {
      v54 = 0;
    }
    a26 = v54;
    *(_QWORD *)(v37 - 144) = 0;
    v59 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v49 + 16))(v49);
    std::string::basic_string[abi:ne180100]<0>(&a17, v59);
    MIL::ParseResult::ParseResult(v37 - 120, &a25, 1, &a17);
    MIL::MILResult::operator=(v35, v37 - 120);
    *(_DWORD *)(v35 + 48) = *(_DWORD *)(v37 - 72);
    MIL::ParseResult::~ParseResult((MIL::ParseResult *)(v37 - 120));
    if (a22 < 0)
      operator delete(a17);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    v60 = *(_QWORD *)(v37 - 144);
    *(_QWORD *)(v37 - 144) = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    if (SHIBYTE(a24) < 0)
    {
      v61 = (void *)a23;
LABEL_37:
      operator delete(v61);
    }
  }
  else
  {
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
    if (*(char *)(v52 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a33, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
    }
    else
    {
      v53 = *(_OWORD *)v52;
      a34 = *(_QWORD *)(v52 + 16);
      a33 = v53;
    }
    MIL::TextFileLocation::Make((uint64_t)&a33, 0, 0, (uint64_t *)(v37 - 144));
    v56 = *(_QWORD *)(v37 - 144);
    *(_QWORD *)(v37 - 136) = v56;
    if (v56)
    {
      v57 = (_QWORD *)operator new();
      v58 = *(_QWORD *)(v37 - 144);
      *v57 = &unk_1EA99DE28;
      v57[1] = 0;
      v57[2] = 0;
      v57[3] = v58;
    }
    else
    {
      v57 = 0;
    }
    *(_QWORD *)(v37 - 128) = v57;
    *(_QWORD *)(v37 - 144) = 0;
    std::string::basic_string[abi:ne180100]<0>(&a27, "Unknown error");
    MIL::ParseResult::ParseResult(v37 - 120, v37 - 136, 1, &a27);
    MIL::MILResult::operator=(v35, v37 - 120);
    *(_DWORD *)(v35 + 48) = *(_DWORD *)(v37 - 72);
    MIL::ParseResult::~ParseResult((MIL::ParseResult *)(v37 - 120));
    if (a32 < 0)
      operator delete(a27);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 136);
    v62 = *(_QWORD *)(v37 - 144);
    *(_QWORD *)(v37 - 144) = 0;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    if (SHIBYTE(a34) < 0)
    {
      v61 = (void *)a33;
      goto LABEL_37;
    }
  }
LABEL_38:
  *v34 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1E067FB08);
}

void sub_1E067FE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v44;

  v44 = *(_QWORD *)(v42 - 144);
  *(_QWORD *)(v42 - 144) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (a42 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void MIL::Text::ParseProgramFromFile(__int128 *a1@<X0>, const MIL::ParserOptions *a2@<X1>, _anonymous_namespace_::IRProgramImpl **a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  MIL::Blob::MMapFileReader *v8;
  uint64_t Length;
  unint64_t Data;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  MIL::Blob::MMapFileReader *v23;
  uint64_t v24[17];
  __int128 v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  MIL::Blob::MMapFileReader *v31;
  std::string v32;

  v6 = (*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)a2 + 24))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v7;
  }
  MIL::Blob::MakeMMapFileReader((uint64_t)&v32, (uint64_t *)&v31);
  v8 = v31;
  Length = MIL::Blob::MMapFileReader::GetLength(v31);
  Data = MIL::Blob::MMapFileReader::ReadData(v8, 0, Length);
  if (v11)
    v12 = Data;
  else
    v12 = 0;
  v24[0] = v12;
  v24[1] = v11;
  MIL::Scanner::Make(v24, &v30);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions const&,void>(a2, &v28);
  v25 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  MIL::Text::Parser::Program::Program((uint64_t)v26, (uint64_t *)&v25, v30, v28);
  MIL::Text::Parser::Program::Parse((MIL::Text::Parser::Program *)v26, a3);
  v26[0] = &off_1EA99C250;
  v13 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v30;
  v30 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v31;
  v31 = 0;
  if (v23)
  {
    MIL::Blob::MMapFileReader::~MMapFileReader(v23);
    MEMORY[0x1E0C023A0]();
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1E0680188(_Unwind_Exception *a1, std::string *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::string *a14, uint64_t a15, __int128 a16, std::string::size_type a17, __int128 a18, void *__pa, uint64_t a20,uint64_t a21,__int128 a22,uint64_t a23,uint64_t a24,__int128 a25,char a26,uint64_t a27,void (**a28)(MIL::Text::Parser::Program *__hidden this),uint64_t a29,std::string::size_type a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  void *v37;
  void *exception;
  _QWORD *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string *v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  void (**v51)(MIL::Text::Parser::Program *__hidden);
  char *v52;

  v34 = (int)a2;
  a28 = &off_1EA99C250;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v31 + 40);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v33 - 112);
  v36 = *(_QWORD *)(v33 - 96);
  *(_QWORD *)(v33 - 96) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100]((MIL::Blob::MMapFileReader **)(v33 - 88), 0);
  switch(v34)
  {
    case 3:
      __cxa_begin_catch(a1);
      __cxa_rethrow();
    case 2:
      v37 = __cxa_begin_catch(a1);
      exception = __cxa_allocate_exception(0x48uLL);
      MIL::UnknownLocation::Make((_QWORD *)(v33 - 112));
      *(_QWORD *)&a18 = *(_QWORD *)(v33 - 112);
      if ((_QWORD)a18)
      {
        v39 = (_QWORD *)operator new();
        v43 = *(_QWORD *)(v33 - 112);
        *v39 = &unk_1EA9940C8;
        v39[1] = 0;
        v39[2] = 0;
        v39[3] = v43;
      }
      else
      {
        v39 = 0;
      }
      *((_QWORD *)&a18 + 1) = v39;
      *(_QWORD *)(v33 - 112) = 0;
      std::operator+<char>();
      v44 = std::string::append((std::string *)&a10, "\" cannot be read: ");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      a30 = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)(v32 + 16) = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
      v47 = std::string::append((std::string *)&a28, v46);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      a17 = v47->__r_.__value_.__r.__words[2];
      a16 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)exception, &a18, (uint64_t)&a16, 200);
    case 1:
      v40 = __cxa_begin_catch(a1);
      v41 = __cxa_allocate_exception(0x48uLL);
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
      if (*(char *)(v42 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&a22, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
      }
      else
      {
        v49 = *(_OWORD *)v42;
        a23 = *(_QWORD *)(v42 + 16);
        a22 = v49;
      }
      MIL::TextFileLocation::Make((uint64_t)&a22, 0, 0, (uint64_t *)&a28);
      *(_QWORD *)&a25 = a28;
      if (a28)
      {
        v50 = (_QWORD *)operator new();
        v51 = a28;
        *v50 = &unk_1EA99DE28;
        v50[1] = 0;
        v50[2] = 0;
        v50[3] = v51;
      }
      else
      {
        v50 = 0;
      }
      *((_QWORD *)&a25 + 1) = v50;
      a28 = 0;
      v52 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      std::string::basic_string[abi:ne180100]<0>(&__pa, v52);
      MIL::ParseError::ParseError((uint64_t)v41, &a25, (uint64_t)&__pa, 1);
  }
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(a1);
}

const MIL::ParserOptions *MIL::Text::ParseValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  MIL::Scanner::Token *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  const MIL::ParserOptions *result;
  _QWORD v13[5];
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  const MIL::ParserOptions *v17;

  MIL::ParserOptions::Make((uint64_t *)&v17);
  v6 = (__int128 *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)v17 + 24))(v17);
  MIL::Scanner::Make(a2, v6, &v16);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions &,void>(v17, &v14);
  v13[0] = off_1EA99DFC8;
  v13[1] = a1;
  v13[2] = v16;
  v13[3] = v14;
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v13[4] = *(_QWORD *)MIL::Scanner::Token::GetLocation(v7);
  v13[0] = &off_1EA99C5C0;
  MIL::Text::Parser::Value::Parse((MIL::Text::Parser::Value *)v13, a3);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v17;
  v17 = 0;
  if (result)
    return (const MIL::ParserOptions *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E06806E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *exception;
  _QWORD *v24;
  uint64_t v25;
  char *v26;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v17 - 72);
  v20 = *(_QWORD *)(v17 - 56);
  *(_QWORD *)(v17 - 56) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(v17 - 48);
  *(_QWORD *)(v17 - 48) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    v22 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&a17);
    *(_QWORD *)&a16 = a17;
    if (a17)
    {
      v24 = (_QWORD *)operator new();
      v25 = a17;
      *v24 = &unk_1EA9940C8;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = v25;
    }
    else
    {
      v24 = 0;
    }
    *((_QWORD *)&a16 + 1) = v24;
    a17 = 0;
    v26 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
    std::string::basic_string[abi:ne180100]<0>(&__p, v26);
    MIL::ParseError::ParseError((uint64_t)exception, &a16, (uint64_t)&__p, 1);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::ParseValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const MIL::ParserOptions *a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 *v8;
  MIL::Scanner::Token *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t result;
  _QWORD v14[5];
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v8 = (__int128 *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)a3 + 24))(a3);
  MIL::Scanner::Make(a2, v8, &v17);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions const&,void>(a3, &v15);
  v14[0] = off_1EA99DFC8;
  v14[1] = a1;
  v14[2] = v17;
  v14[3] = v15;
  v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  v14[4] = *(_QWORD *)MIL::Scanner::Token::GetLocation(v9);
  v14[0] = &off_1EA99C5C0;
  MIL::Text::Parser::Value::Parse((MIL::Text::Parser::Value *)v14, a4);
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E06809C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, __int128 a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v19;
  void *v20;
  void *exception;
  _QWORD *v22;
  uint64_t v23;
  char *v24;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16 - 64);
  v19 = *(_QWORD *)(v16 - 48);
  *(_QWORD *)(v16 - 48) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&a16);
    *(_QWORD *)&a15 = a16;
    if (a16)
    {
      v22 = (_QWORD *)operator new();
      v23 = a16;
      *v22 = &unk_1EA9940C8;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = v23;
    }
    else
    {
      v22 = 0;
    }
    *((_QWORD *)&a15 + 1) = v22;
    a16 = 0;
    v24 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    std::string::basic_string[abi:ne180100]<0>(&__p, v24);
    MIL::ParseError::ParseError((uint64_t)exception, &a15, (uint64_t)&__p, 1);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::ParseValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const MIL::ParserOptions *v5;
  void *__p[2];
  uint64_t v8;
  const MIL::ParserOptions *v9;

  MIL::ParserOptions::Make((uint64_t *)&v9);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v4 = MIL::Text::ParseValueType(a1, (uint64_t)__p, v9);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  v5 = v9;
  v9 = 0;
  if (v5)
    (*(void (**)(const MIL::ParserOptions *))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_1E0680C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v25;
  void *v26;
  void *exception;
  _QWORD *v28;
  uint64_t v29;
  char *v30;

  if (a22 < 0)
    operator delete(__p);
  v25 = *(_QWORD *)(v22 - 40);
  *(_QWORD *)(v22 - 40) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (a2 == 2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    v26 = __cxa_begin_catch(exception_object);
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make((_QWORD *)(v22 - 40));
    *(_QWORD *)&a16 = *(_QWORD *)(v22 - 40);
    if ((_QWORD)a16)
    {
      v28 = (_QWORD *)operator new();
      v29 = *(_QWORD *)(v22 - 40);
      *v28 = &unk_1EA9940C8;
      v28[1] = 0;
      v28[2] = 0;
      v28[3] = v29;
    }
    else
    {
      v28 = 0;
    }
    *((_QWORD *)&a16 + 1) = v28;
    *(_QWORD *)(v22 - 40) = 0;
    v30 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
    std::string::basic_string[abi:ne180100]<0>(&a10, v30);
    MIL::ParseError::ParseError((uint64_t)exception, &a16, (uint64_t)&a10, 1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::ParseValueType(uint64_t a1, uint64_t a2, const MIL::ParserOptions *a3)
{
  __int128 *v6;
  MIL::Scanner::Token *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v6 = (__int128 *)(*(uint64_t (**)(const MIL::ParserOptions *))(*(_QWORD *)a3 + 24))(a3);
  MIL::Scanner::Make(a2, v6, &v17);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions const&,void>(a3, &v15);
  v14[0] = off_1EA99DFF8;
  v14[1] = a1;
  v14[2] = v17;
  v14[3] = v15;
  v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  v14[4] = *(_QWORD *)MIL::Scanner::Token::GetLocation(v7);
  v14[0] = &off_1EA99C988;
  v8 = MIL::Text::Parser::Type::Parse((MIL::Text::Parser::Type *)v14);
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v8;
}

void sub_1E0680EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, __int128 a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v19;
  void *v20;
  void *exception;
  _QWORD *v22;
  uint64_t v23;
  char *v24;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v16 - 64);
  v19 = *(_QWORD *)(v16 - 48);
  *(_QWORD *)(v16 - 48) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&a16);
    *(_QWORD *)&a15 = a16;
    if (a16)
    {
      v22 = (_QWORD *)operator new();
      v23 = a16;
      *v22 = &unk_1EA9940C8;
      v22[1] = 0;
      v22[2] = 0;
      v22[3] = v23;
    }
    else
    {
      v22 = 0;
    }
    *((_QWORD *)&a15 + 1) = v22;
    a16 = 0;
    v24 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    std::string::basic_string[abi:ne180100]<0>(&__p, v24);
    MIL::ParseError::ParseError((uint64_t)exception, &a15, (uint64_t)&__p, 1);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions const&,void>@<X0>(const MIL::ParserOptions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE18uLL);
  result = std::__shared_ptr_emplace<MIL::ParserContext>::__shared_ptr_emplace[abi:ne180100]<MIL::ParserOptions const&,std::allocator<MIL::ParserContext>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1E06810C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::ParserContext>::__shared_ptr_emplace[abi:ne180100]<MIL::ParserOptions const&,std::allocator<MIL::ParserContext>,0>(_QWORD *a1, const MIL::ParserOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99DEB8;
  MIL::ParserContext::ParserContext((MIL::ParserContext *)(a1 + 3), a2);
  return a1;
}

void sub_1E068110C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void MIL::ScanError::~ScanError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ScanError::ScanError(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;

  v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::ParseError::ParseError((uint64_t)a1, &v11, (uint64_t)__p, a4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *a1 = &off_1EA99E028;
  return a1;
}

void sub_1E068127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::UnexpectedTokenTypeError::~UnexpectedTokenTypeError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99E078;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&this[5]);
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
}

{
  MIL::UnexpectedTokenTypeError::~UnexpectedTokenTypeError(this);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::UnexpectedTokenTypeError::UnexpectedTokenTypeError(uint64_t a1, __int128 *a2, unsigned int a3, MIL::ParserContext *a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *ProgramFirstSet;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v24;
  char v25;
  __int128 v26;
  void *__p[2];
  unsigned __int8 v28;
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  v26 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v9 = *(char *)(a5 + 23);
  if (v9 >= 0)
    v10 = a5;
  else
    v10 = *(_QWORD *)a5;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a5 + 23);
  else
    v11 = *(_QWORD *)(a5 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": got '", 7);
  ProgramFirstSet = (uint64_t *)MIL::ParserContext::GetProgramFirstSet(a4);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *ProgramFirstSet, ProgramFirstSet[1]);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' when expecting token of type '", 32);
  MIL::GetTokenName(a3, __p);
  if ((v28 & 0x80u) == 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v28 & 0x80u) == 0)
    v18 = v28;
  else
    v18 = (uint64_t)__p[1];
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"'.", 2);
  if ((char)v28 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v29[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v29[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](&v31);
  MIL::ScanError::ScanError((_QWORD *)a1, (uint64_t)&v26, (uint64_t)&v24, 201);
  if (v25 < 0)
    operator delete(v24);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)a1 = &off_1EA99E078;
  *(_DWORD *)(a1 + 72) = a3;
  MIL::Scanner::Token::Token((_OWORD *)(a1 + 80), (uint64_t)a4);
  return a1;
}

void sub_1E0681508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::UnexpectedTokenTypeError::GetExpectedTokenType(MIL::UnexpectedTokenTypeError *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t MIL::UnexpectedTokenTypeError::GetActualToken(MIL::UnexpectedTokenTypeError *this)
{
  return (uint64_t)this + 80;
}

void MIL::UnexpectedTokenValueError::~UnexpectedTokenValueError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99E0C8;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&this[6]);
  if (SHIBYTE(this[5].__imp_.__imp_) < 0)
    operator delete((void *)this[4].__imp_.__imp_);
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
}

{
  MIL::UnexpectedTokenValueError::~UnexpectedTokenValueError(this);
  JUMPOUT(0x1E0C023A0);
}

uint64_t MIL::UnexpectedTokenValueError::UnexpectedTokenValueError(uint64_t a1, __int128 *a2, uint64_t a3, MIL::ParserContext *a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *ProgramFirstSet;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  void *v26;
  char v27;
  __int128 v28;
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  v28 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  v9 = *(char *)(a5 + 23);
  if (v9 >= 0)
    v10 = a5;
  else
    v10 = *(_QWORD *)a5;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a5 + 23);
  else
    v11 = *(_QWORD *)(a5 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": got '", 7);
  ProgramFirstSet = (uint64_t *)MIL::ParserContext::GetProgramFirstSet(a4);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, *ProgramFirstSet, ProgramFirstSet[1]);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' when expecting '", 18);
  v17 = *(char *)(a3 + 23);
  if (v17 >= 0)
    v18 = a3;
  else
    v18 = *(_QWORD *)a3;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a3 + 23);
  else
    v19 = *(_QWORD *)(a3 + 8);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"'.", 2);
  std::stringbuf::str();
  v29[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v29[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](&v31);
  MIL::ScanError::ScanError((_QWORD *)a1, (uint64_t)&v28, (uint64_t)&v26, 202);
  if (v27 < 0)
    operator delete(v26);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)a1 = &off_1EA99E0C8;
  v24 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::Scanner::Token::Token((_OWORD *)(a1 + 96), (uint64_t)a4);
  return a1;
}

void sub_1E06817D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::UnexpectedTokenValueError::GetExpectedTokenValue(MIL::UnexpectedTokenValueError *this)
{
  return (uint64_t)this + 72;
}

uint64_t MIL::UnexpectedTokenValueError::GetActualToken(MIL::UnexpectedTokenValueError *this)
{
  return (uint64_t)this + 96;
}

void MIL::UnexpectedEOFError::~UnexpectedEOFError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1EA99BFA8;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::UnexpectedEOFError::UnexpectedEOFError(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  uint64_t v9;
  __int128 v10;

  v10 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::ScanError::ScanError(a1, (uint64_t)&v10, (uint64_t)__p, 1);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1EA99E118;
  return a1;
}

void sub_1E0681950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 MIL::Scanner::Token::Token(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 MIL::Scanner::Token::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t MIL::Scanner::Token::Token(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  return result;
}

uint64_t MIL::Scanner::Token::Token(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

BOOL MIL::Scanner::Token::operator==(uint64_t a1, uint64_t a2)
{
  size_t v4;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (v4 = *(_QWORD *)(a1 + 16), v4 == *(_QWORD *)(a2 + 16))
    && !memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v4)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
  {
    return *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  }
  else
  {
    return 0;
  }
}

uint64_t MIL::Scanner::Token::GetType(MIL::Scanner::Token *this)
{
  return *(unsigned int *)this;
}

BOOL MIL::Scanner::Token::operator!=(uint64_t a1, uint64_t a2)
{
  return !MIL::Scanner::Token::operator==(a1, a2);
}

uint64_t MIL::Scanner::Token::GetLocation(MIL::Scanner::Token *this)
{
  return (uint64_t)this + 24;
}

_QWORD *MIL::Scanner::Scanner(_QWORD *this)
{
  *this = off_1EA99E1C8;
  return this;
}

uint64_t MIL::Scanner::Expect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *exception;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  _QWORD v16[3];
  _OWORD v17[2];
  _QWORD v18[2];
  std::string v19;
  uint64_t v20[3];
  std::string v21;

  v6 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*v6 != (_DWORD)a2)
  {
    v8 = v6;
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v21 = *(std::string *)a3;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v19, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    else
      v19 = v21;
    MIL::TextFileLocation::Make((uint64_t)&v19, v8[6], v8[7], v20);
    v9 = v20[0];
    v20[1] = v20[0];
    if (v20[0])
    {
      v10 = (_QWORD *)operator new();
      v11 = v20[0];
      *v10 = &unk_1EA99DE28;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = v11;
    }
    else
    {
      v10 = 0;
    }
    v20[2] = (uint64_t)v10;
    v20[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x70uLL);
    v18[0] = v9;
    v18[1] = v10;
    if (v10)
    {
      v13 = v10 + 1;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *((_OWORD *)v8 + 1);
    v17[0] = *(_OWORD *)v8;
    v17[1] = v15;
    std::string::basic_string[abi:ne180100]<0>(v16, "Unexpected token type");
    MIL::UnexpectedTokenTypeError::UnexpectedTokenTypeError(exception, v18, a2, v17, v16);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_1E0681C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  uint64_t v28;

  if (a28)
    (*(void (**)(uint64_t))(*(_QWORD *)a28 + 8))(a28);
  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Scanner::Expect(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  size_t v8;
  std::string::size_type v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string::size_type v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *exception;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  _OWORD v26[2];
  std::string v27;
  _QWORD v28[2];
  std::string __dst;
  std::string v30;
  uint64_t v31[2];
  _QWORD v32[3];
  _OWORD v33[2];
  _QWORD v34[2];
  std::string v35;
  std::string v36;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7 = (_OWORD *)v6;
  if (*a2 != *(_DWORD *)v6)
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v36 = *(std::string *)a3;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v35, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      v35 = v36;
    MIL::TextFileLocation::Make((uint64_t)&v35, a2[6], a2[7], v31);
    v12 = v31[0];
    __dst.__r_.__value_.__r.__words[0] = v31[0];
    if (v31[0])
    {
      v13 = (_QWORD *)operator new();
      v18 = v31[0];
      *v13 = &unk_1EA99DE28;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v18;
    }
    else
    {
      v13 = 0;
    }
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    v31[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x70uLL);
    v34[0] = v12;
    v34[1] = v13;
    if (v13)
    {
      v20 = v13 + 1;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = *a2;
    v23 = v7[1];
    v33[0] = *v7;
    v33[1] = v23;
    std::string::basic_string[abi:ne180100]<0>(v32, "Unexpected token type");
    MIL::UnexpectedTokenTypeError::UnexpectedTokenTypeError(exception, v34, v22, v33, v32);
  }
  v8 = *((_QWORD *)a2 + 2);
  if (v8 != *(_QWORD *)(v6 + 16) || memcmp(*((const void **)a2 + 1), *(const void **)(v6 + 8), v8))
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v36 = *(std::string *)a3;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      v30 = v36;
    MIL::TextFileLocation::Make((uint64_t)&v30, a2[6], a2[7], (uint64_t *)&__dst);
    v10 = __dst.__r_.__value_.__r.__words[0];
    v31[0] = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v11 = (_QWORD *)operator new();
      v14 = __dst.__r_.__value_.__r.__words[0];
      *v11 = &unk_1EA99DE28;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v14;
    }
    else
    {
      v11 = 0;
    }
    v31[1] = (uint64_t)v11;
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)(a2 + 2));
    v15 = __cxa_allocate_exception(0x80uLL);
    v28[0] = v10;
    v28[1] = v11;
    if (v11)
    {
      v16 = v11 + 1;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v27, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v27 = __dst;
    v24 = v7[1];
    v26[0] = *v7;
    v26[1] = v24;
    std::string::basic_string[abi:ne180100]<0>(v25, "Unexpected token value");
    MIL::UnexpectedTokenValueError::UnexpectedTokenValueError(v15, v28, &v27, v26, v25);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_1E0682018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  uint64_t v48;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  __cxa_free_exception(v47);
  if (a33 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (*(char *)(v48 - 73) < 0)
    operator delete(*(void **)(v48 - 96));
  _Unwind_Resume(a1);
}

void MIL::Scanner::Make(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *__p[2];
  char v6;
  std::string v7;

  v4 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v7 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v6 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *a2 = v4;
}

void sub_1E0682230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x1E0C023A0](v21, 0x10D3C4074676381);
  _Unwind_Resume(a1);
}

void MIL::Scanner::Make(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::string __p;

  v6 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a3 = v6;
}

void sub_1E0682320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1E0C023A0](v14, 0x10D3C4074676381);
  _Unwind_Resume(a1);
}

void MIL::Scanner::Make(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v4 = operator new();
  v5 = *a1;
  v6 = a1[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (v8 < 0)
    operator delete(__p[0]);
  *a2 = v4;
}

void sub_1E06823E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1E0C023A0](v15, 0x10D3C40F412050CLL);
  _Unwind_Resume(a1);
}

uint64_t MIL::Scanner::Make@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  *a3 = v6;
  return result;
}

void sub_1E0682478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1E0C023A0](v1, 0x10D3C40F412050CLL);
  _Unwind_Resume(a1);
}

_QWORD *MIL::GetTokenName@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  std::runtime_error *exception;

  if (a1 >= 0x39)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Internal error");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1EA99E288[a1]);
}

void sub_1E06824FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ScannerImpl<std::string>::ScannerImpl(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = off_1EA99E208;
  v5 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *v5 = v6;
  }
  v7 = v5;
  if (*(char *)(a1 + 31) < 0)
    v7 = *(_OWORD **)v5;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = 1;
  v8 = (std::string *)(a1 + 72);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_DWORD *)(a1 + 96) = 55;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = "";
  return a1;
}

void sub_1E06825D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::ScannerImpl<std::string>::~ScannerImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99E208;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void `anonymous namespace'::ScannerImpl<std::string>::~ScannerImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99E208;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1E0C023A0);
}

__n128 `anonymous namespace'::ScannerImpl<std::string>::Next@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  result = *(__n128 *)v4;
  v6 = *(_OWORD *)(v4 + 16);
  *a2 = *(_OWORD *)v4;
  a2[1] = v6;
  a1[4] = a1[5];
  return result;
}

uint64_t `anonymous namespace'::ScannerImpl<std::string>::Peek(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v2 = a1 + 32;
  if (v4 != v3)
    return a1 + 96;
  if (*(char *)(a1 + 31) < 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v6 = a1 + 8;
    v7 = *(unsigned __int8 *)(a1 + 31);
  }
  MIL::NextToken(v2, v6 + v7, (uint64_t)&v9);
  *(_DWORD *)(a1 + 96) = v9;
  v5 = a1 + 96;
  *(_OWORD *)(v5 + 8) = v10;
  *(_QWORD *)(v5 + 24) = v11;
  return v5;
}

uint64_t `anonymous namespace'::ScannerImpl<std::string_view>::ScannerImpl(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1EA99E250;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 1;
  v5 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 88) = 55;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = "";
  return a1;
}

uint64_t `anonymous namespace'::ScannerImpl<std::string_view>::~ScannerImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99E250;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return a1;
}

void `anonymous namespace'::ScannerImpl<std::string_view>::~ScannerImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99E250;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  JUMPOUT(0x1E0C023A0);
}

__n128 `anonymous namespace'::ScannerImpl<std::string_view>::Next@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  result = *(__n128 *)v4;
  v6 = *(_OWORD *)(v4 + 16);
  *a2 = *(_OWORD *)v4;
  a2[1] = v6;
  a1[3] = a1[4];
  return result;
}

uint64_t `anonymous namespace'::ScannerImpl<std::string_view>::Peek(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  __int128 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v2 = a1 + 24;
  if (v4 != v3)
    return a1 + 88;
  MIL::NextToken(v2, *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16), (uint64_t)&v7);
  *(_DWORD *)(a1 + 88) = v7;
  v5 = a1 + 88;
  *(_OWORD *)(v5 + 8) = v8;
  *(_QWORD *)(v5 + 24) = v9;
  return v5;
}

MIL::IRProgram *MIL::Text::Serialize(MIL::Text *this, const MIL::IRProgram *a2)
{
  const MIL::Text::SerializerOptions *v3;
  MIL::IRProgram *result;
  MIL::IRProgram *v5;

  MIL::Text::SerializerOptions::Make((uint64_t *)&v5);
  MIL::Text::Serialize(this, v5, v3);
  result = v5;
  v5 = 0;
  if (result)
    return (MIL::IRProgram *)(*(uint64_t (**)(MIL::IRProgram *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E068294C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void MIL::Text::Serialize(MIL::Text *this, const MIL::IRProgram *a2, const MIL::Text::SerializerOptions *a3)
{
  MIL::Text::BasicSerializer *v4;
  _BYTE v5[392];

  MIL::Text::BasicSerializer::BasicSerializer((MIL::Text::BasicSerializer *)v5, a2);
  v4 = MIL::Text::BasicSerializer::Program((MIL::Text::BasicSerializer *)v5, this);
  MIL::Text::BasicSerializer::GetOutput(v4);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)v5);
}

void sub_1E06829C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)va);
  _Unwind_Resume(a1);
}

void MIL::Text::SerializeToStream(const MIL::IRProgram *a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[392];

  MIL::Text::BasicSerializer::BasicSerializer(v4, a3, a2);
  MIL::Text::BasicSerializer::Program((MIL::Text::BasicSerializer *)v4, a1);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)v4);
}

void sub_1E0682A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::SerializeToFile(MIL::Text *this, const MIL::IRProgram *a2, const MIL::Text::SerializerOptions *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::logic_error *exception;
  _BYTE v9[392];
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[20];

  v12[19] = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 16))(a2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "A file path must be provided to serialize to file. The file path is set by SerializerOptions.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  (*(void (**)(const MIL::IRProgram *))(*(_QWORD *)a2 + 16))(a2);
  std::ofstream::basic_ofstream(&v10);
  MIL::Text::BasicSerializer::BasicSerializer(v9, &v10, a2);
  MIL::Text::BasicSerializer::Program((MIL::Text::BasicSerializer *)v9, this);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)v9);
  v10 = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)&v10 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1E0C020C4](&v11);
  std::ostream::~ostream();
  return MEMORY[0x1E0C022F8](v12);
}

void sub_1E0682B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;

  __cxa_free_exception(v59);
  _Unwind_Resume(a1);
}

BOOL MIL::Text::ModelPathLengthComparator::operator()(int a1, _QWORD *a2, _QWORD *__s1)
{
  size_t v3;
  int v4;
  size_t v5;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (*((char *)__s1 + 23) < 0)
  {
    v5 = __s1[1];
    if (v3 != v5)
      return v3 > v5;
    __s1 = (_QWORD *)*__s1;
  }
  else
  {
    v5 = *((unsigned __int8 *)__s1 + 23);
    if (v3 != v5)
      return v3 > v5;
  }
  if (v4 < 0)
    a2 = (_QWORD *)*a2;
  return memcmp(__s1, a2, v3) != 0;
}

_QWORD *MIL::Text::SerializerOptions::SerializerOptions(_QWORD *this)
{
  *this = off_1EA99E460;
  return this;
}

double MIL::Text::SerializerOptions::Make@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_QWORD *)(v3 + 208) = 0;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)v3 = &off_1EA99E538;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 72) = 1065353216;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 80) = v3 + 88;
  *(_DWORD *)(v3 + 104) = 1;
  *(_QWORD *)(v3 + 112) = 10;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 144) = 1;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 1065353216;
  *a1 = v3;
  return result;
}

void `anonymous namespace'::SerializerOptionsImpl::~SerializerOptionsImpl(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 176);
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 40);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  JUMPOUT(0x1E0C023A0);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetModelFilePath(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return (uint64_t)this + 8;
}

__n128 `anonymous namespace'::SerializerOptionsImpl::SetModelFilePath(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  __n128 result;

  v3 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetModelPaths(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return (uint64_t)this + 80;
}

void `anonymous namespace'::SerializerOptionsImpl::SetModelPaths(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::string __p;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = &v14;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v4[4], v4[5]);
      else
        __p = *(std::string *)(v4 + 4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v3);
  }
  v9 = *(char **)(a1 + 88);
  v8 = (_QWORD *)(a1 + 88);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)(v8 - 1), v9);
  v10 = v14;
  *(v8 - 1) = v13;
  *v8 = v10;
  v11 = v15;
  v8[1] = v15;
  if (v11)
  {
    *(_QWORD *)(v10 + 16) = v8;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
    v10 = 0;
  }
  else
  {
    *(v8 - 1) = v8;
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v13, (char *)v10);
}

void sub_1E0682EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::SerializerOptionsImpl::SetModelPathsFromVector(uint64_t a1, __int128 **a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  std::string __p;
  std::string v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = &v13;
  v3 = *a2;
  v4 = a2[1];
  while (v3 != v4)
  {
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v11.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
    }
    __p = v11;
    memset(&v11, 0, sizeof(v11));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    v3 = (__int128 *)((char *)v3 + 24);
  }
  v7 = *(char **)(a1 + 88);
  v6 = (_QWORD *)(a1 + 88);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)(v6 - 1), v7);
  v8 = v13;
  *(v6 - 1) = v12;
  *v6 = v8;
  v9 = v14;
  v6[1] = v14;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v6;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
    v8 = 0;
  }
  else
  {
    *(v6 - 1) = v6;
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v12, (char *)v8);
}

void sub_1E068301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,char *a23)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::AddModelPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v5;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1E06830B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `anonymous namespace'::SerializerOptionsImpl::RemoveModelPath(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  void *__p[2];
  char v8;

  if (*((char *)a2 + 23) < 0)
  {
    v2 = a2[1];
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    if (!*((_BYTE *)a2 + 23))
      goto LABEL_10;
    v2 = *((unsigned __int8 *)a2 + 23);
  }
  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if (*((_BYTE *)v3 + v2 - 1) == 47)
  {
    v4 = std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__erase_unique<std::string>((uint64_t **)(a1 + 80), a2);
    return v4 != 0;
  }
LABEL_10:
  v5 = (uint64_t **)(a1 + 80);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, (uint64_t)__p);
  v4 = std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__erase_unique<std::string>(v5, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  return v4 != 0;
}

void sub_1E0683180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetFloatSerializeMode(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetFloatSerializeMode(uint64_t a1, int a2)
{
  uint64_t *v3;
  unsigned int *v4;
  int v6;

  v6 = a2;
  v3 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::find<int>((_QWORD *)(a1 + 40), &v6);
  v4 = (unsigned int *)(a1 + 32);
  if (v3)
    v4 = (unsigned int *)v3 + 5;
  return *v4;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::SetFloatSerializeMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

_QWORD *`anonymous namespace'::SerializerOptionsImpl::SetFloatSerializeMode(uint64_t a1, int a2, int a3)
{
  _QWORD *result;
  int v5;
  int *v6;

  v5 = a3;
  v6 = &v5;
  result = std::__hash_table<std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>,std::__unordered_map_hasher<MIL::IRDataType,std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>,std::hash<MIL::IRDataType>,std::equal_to<MIL::IRDataType>,true>,std::__unordered_map_equal<MIL::IRDataType,std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>,std::equal_to<MIL::IRDataType>,std::hash<MIL::IRDataType>,true>,std::allocator<std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>>>::__emplace_unique_key_args<MIL::IRDataType,std::piecewise_construct_t const&,std::tuple<MIL::IRDataType const&>,std::tuple<>>(a1 + 40, &v5, (uint64_t)&std::piecewise_construct, &v6);
  *((_DWORD *)result + 5) = a2;
  return result;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetSyntaxVersion(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::SetSyntaxVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 104) = a2;
  return result;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetWeightsFilePath(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return (uint64_t)this + 120;
}

__n128 `anonymous namespace'::SerializerOptionsImpl::SetWeightsFilePath(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  __n128 result;

  v3 = a1 + 120;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)v3);
  result = *a2;
  *(_QWORD *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetWeightsBlobNumElementsThreshold(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::SetWeightsBlobNumElementsThreshold(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 112) = a2;
  return this;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::SetSerializeTraceabilityInfoFlag(uint64_t this, char a2)
{
  *(_BYTE *)(this + 144) = a2;
  return this;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetSerializeTraceabilityInfoFlag(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 144);
}

std::string *`anonymous namespace'::SerializerOptionsImpl::SetWeightsDirectory(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 152), a2);
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::GetWeightsDirectory(_anonymous_namespace_::SerializerOptionsImpl *this)
{
  return (uint64_t)this + 152;
}

uint64_t `anonymous namespace'::SerializerOptionsImpl::AddModelPath(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  void *__p[2];
  uint64_t v12;

  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 23))
      goto LABEL_9;
    v4 = *(unsigned __int8 *)(a1 + 23);
  }
  v5 = v4 - 1;
  v6 = a1;
  if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
    v6 = *(_QWORD *)a1;
  if (*(_BYTE *)(v6 + v5) == 47)
  {
    std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a2, (_QWORD *)a1, a1);
    v8 = v7;
    return v8 & 1;
  }
LABEL_9:
  std::string::push_back((std::string *)a1, 47);
  *(_OWORD *)__p = *(_OWORD *)a1;
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a2, __p, (uint64_t)__p);
  v8 = v9;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return v8 & 1;
}

void sub_1E068339C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        LODWORD(a1) = MIL::Text::ModelPathLengthComparator::operator()(a1, a3, v4 + 4);
        if (!(_DWORD)a1)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      LODWORD(a1) = MIL::Text::ModelPathLengthComparator::operator()(0, v8, a3);
      if (!(_DWORD)a1)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t **v3;

  v3 = (uint64_t **)std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == v3)
    return 0;
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::erase(a1, (uint64_t)v3);
  return 1;
}

_QWORD *std::__tree<std::string,MIL::Text::ModelPathLengthComparator,std::allocator<std::string>>::find<std::string>(uint64_t a1, _QWORD *__s1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    LODWORD(a1) = MIL::Text::ModelPathLengthComparator::operator()(a1, v3 + 4, __s1);
    v6 = v3 + 1;
    if (!(_DWORD)a1)
    {
      v6 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v5 == v2 || MIL::Text::ModelPathLengthComparator::operator()(a1, __s1, v5 + 4))
    return v2;
  return v5;
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>,std::__unordered_map_hasher<MIL::IRDataType,std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>,std::hash<MIL::IRDataType>,std::equal_to<MIL::IRDataType>,true>,std::__unordered_map_equal<MIL::IRDataType,std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>,std::equal_to<MIL::IRDataType>,std::hash<MIL::IRDataType>,true>,std::allocator<std::__hash_value_type<MIL::IRDataType,MIL::Text::SerializerOptions::FloatSerializeMode>>>::__emplace_unique_key_args<MIL::IRDataType,std::piecewise_construct_t const&,std::tuple<MIL::IRDataType const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1E068379C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp8E4M3FN>(uint64_t a1, MIL::Scanner::Token *a2)
{
  uint64_t Options;
  uint64_t v4;
  unint64_t v5;
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  float v12;
  MIL::Fp8E4M3FN *v13;
  uint64_t v14;
  void *exception;
  uint64_t v17;
  void *v18;
  _QWORD v19[3];
  __int128 v20;
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(a2);
  if (MIL::Scanner::Token::GetType(a2) != 19 && MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v17 = v4;
    v18 = exception;
    MIL::TextLocationFromScannerLocation(v5, v17, &__dst);
    v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v19, "Float value expected.");
    MIL::ParseError::ParseError((uint64_t)v18, &v20, (uint64_t)v19, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_10:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v12 = MIL::Util::stof(&__dst, v5, v4);
  v14 = MIL::Fp8E4M3FN::FromFloat(v13, v12);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1E0683944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v24)
    __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp8E5M2>(uint64_t a1, MIL::Scanner::Token *a2)
{
  uint64_t Options;
  uint64_t v4;
  unint64_t v5;
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  float v12;
  MIL::Fp8E5M2 *v13;
  uint64_t v14;
  void *exception;
  uint64_t v17;
  void *v18;
  _QWORD v19[3];
  __int128 v20;
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(a2);
  if (MIL::Scanner::Token::GetType(a2) != 19 && MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v17 = v4;
    v18 = exception;
    MIL::TextLocationFromScannerLocation(v5, v17, &__dst);
    v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v19, "Float value expected.");
    MIL::ParseError::ParseError((uint64_t)v18, &v20, (uint64_t)v19, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_10:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v12 = MIL::Util::stof(&__dst, v5, v4);
  v14 = MIL::Fp8E5M2::FromFloat(v13, v12);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1E0683B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v24)
    __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::Bf16>(uint64_t a1, MIL::Scanner::Token *a2)
{
  uint64_t Options;
  uint64_t v4;
  unint64_t v5;
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  MIL::Bf16 *v12;
  float v13;
  float v14;
  uint64_t v16;
  void *exception;
  void *v19;
  _QWORD v20[3];
  __int128 v21;
  void *v22[3];
  __int128 v23;
  __int128 v24;
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(a2);
  if (MIL::Scanner::Token::GetType(a2) != 19 && MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v5, v4, &__dst);
    v21 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v20, "Float value expected.");
    MIL::ParseError::ParseError((uint64_t)exception, &v21, (uint64_t)v20, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_10:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v13 = MIL::Util::stof(&__dst, v5, v4);
  v14 = fabsf(v13);
  if (v14 != INFINITY && v13 != 0.0 && (v14 > 3.3895e38 || v14 < COERCE_FLOAT(0x10000)))
  {
    v19 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v5, v4, &v23);
    v24 = v23;
    v23 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not within range of type: bf16", (const void **)&__dst.__r_.__value_.__l.__data_, v22);
    MIL::ParseError::ParseError((uint64_t)v19, &v24, (uint64_t)v22, 400);
  }
  v16 = MIL::Bf16::FromFloat(v12, v13);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1E0683DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  int v27;
  void *v28;
  uint64_t v29;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (v27)
    __cxa_free_exception(v28);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp16>(uint64_t a1, MIL::Scanner::Token *a2)
{
  uint64_t Options;
  uint64_t v4;
  unint64_t v5;
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  MIL::Fp16 *v12;
  float v13;
  float v14;
  uint64_t v16;
  void *exception;
  void *v19;
  _QWORD v20[3];
  __int128 v21;
  void *v22[3];
  __int128 v23;
  __int128 v24;
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(a2);
  if (MIL::Scanner::Token::GetType(a2) != 19 && MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v5, v4, &__dst);
    v21 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v20, "Float value expected.");
    MIL::ParseError::ParseError((uint64_t)exception, &v21, (uint64_t)v20, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_10:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v13 = MIL::Util::stof(&__dst, v5, v4);
  v14 = fabsf(v13);
  if (v14 != INFINITY && v13 != 0.0 && (v14 > 65504.0 || v14 < 0.000000059605))
  {
    v19 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v5, v4, &v23);
    v24 = v23;
    v23 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not within range of type: fp16", (const void **)&__dst.__r_.__value_.__l.__data_, v22);
    MIL::ParseError::ParseError((uint64_t)v19, &v24, (uint64_t)v22, 400);
  }
  v16 = MIL::Fp16::FromFloat(v12, v13);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1E06840D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  int v27;
  void *v28;
  uint64_t v29;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (v27)
    __cxa_free_exception(v28);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(a1);
}

float MIL::Text::Parser::TensorVal::ParseToken<float>(uint64_t a1, MIL::Scanner::Token *a2)
{
  uint64_t Options;
  uint64_t v4;
  unint64_t v5;
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  float v12;
  void *exception;
  uint64_t v15;
  void *v16;
  _QWORD v17[3];
  __int128 v18;
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(a2);
  if (MIL::Scanner::Token::GetType(a2) != 19 && MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v15 = v4;
    v16 = exception;
    MIL::TextLocationFromScannerLocation(v5, v15, &__dst);
    v18 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v17, "Float value expected.");
    MIL::ParseError::ParseError((uint64_t)v16, &v18, (uint64_t)v17, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_10:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v12 = MIL::Util::stof(&__dst, v5, v4);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1E0684318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v24)
    __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

double MIL::Text::Parser::TensorVal::ParseToken<double>(uint64_t a1, MIL::Scanner::Token *a2)
{
  uint64_t Options;
  uint64_t v4;
  unint64_t v5;
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  double v12;
  void *exception;
  uint64_t v15;
  void *v16;
  _QWORD v17[3];
  __int128 v18;
  std::string __dst;

  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  v5 = *(_QWORD *)MIL::Scanner::Token::GetLocation(a2);
  if (MIL::Scanner::Token::GetType(a2) != 19 && MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v15 = v4;
    v16 = exception;
    MIL::TextLocationFromScannerLocation(v5, v15, &__dst);
    v18 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v17, "Double value expected.");
    MIL::ParseError::ParseError((uint64_t)v16, &v18, (uint64_t)v17, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_10:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v12 = MIL::Util::stod(&__dst, v5, v4);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1E0684514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (v24)
    __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

BOOL MIL::Text::Parser::TensorVal::ParseToken<BOOL>(uint64_t a1, MIL::Scanner::Token *this)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  std::string::size_type v12;
  const void *v13;
  std::string *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  int BaseAndPrepIntStringForParse;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  BOOL v23;
  void *v25;
  void *exception;
  _QWORD v27[3];
  __int128 v28;
  void *__p;
  char v30;
  std::string v31;
  __int128 v32;
  std::string __dst;

  v4 = *(_QWORD *)MIL::Scanner::Token::GetLocation(this);
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(this) == 18)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "BOOLean");
    if (MIL::Scanner::Token::GetType(this) != 18)
    {
      exception = __cxa_allocate_exception(0x48uLL);
      MIL::TextLocationFromScannerLocation(v4, v6, &v31);
      v32 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = 0uLL;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)&__p, (void **)&__dst.__r_.__value_.__l.__data_);
      MIL::ParseError::ParseError((uint64_t)exception, &v32, (uint64_t)&__dst, 112);
    }
    ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
    v8 = *(_QWORD *)(ProgramFirstSet + 8);
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = *(const void **)ProgramFirstSet;
    if (v8 >= 0x17)
    {
      v16 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v16 = v8 | 7;
      v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
      p_dst = &__dst;
      if (!v8)
      {
LABEL_18:
        p_dst->__r_.__value_.__s.__data_[v8] = 0;
        BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
        v19 = std::stoi(&__dst, 0, BaseAndPrepIntStringForParse);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v30 < 0)
          operator delete(__p);
        v15 = v19 != 0;
        if (v19 > 1)
          goto LABEL_37;
        return v15;
      }
    }
    memmove(p_dst, v9, v8);
    goto LABEL_18;
  }
  if (MIL::Scanner::Token::GetType(this) != 19)
  {
    if (MIL::Scanner::Token::GetType(this) == 21)
      return 1;
    if (MIL::Scanner::Token::GetType(this) != 22)
      goto LABEL_37;
    return 0;
  }
  v11 = MIL::ParserContext::GetProgramFirstSet(this);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = *(const void **)v11;
  if (v12 >= 0x17)
  {
    v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v20 = v12 | 7;
    v21 = v20 + 1;
    v14 = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v12;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    goto LABEL_29;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v11 + 8);
  v14 = &__dst;
  if (v12)
LABEL_29:
    memmove(v14, v13, v12);
  v14->__r_.__value_.__s.__data_[v12] = 0;
  v22 = MIL::Util::stod(&__dst, v4, v6);
  v15 = v22 != 0.0;
  v23 = v22 != 0.0 && v22 != 1.0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v23)
  {
LABEL_37:
    v25 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &__dst);
    v28 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v27, "Bool value expected.");
    MIL::ParseError::ParseError((uint64_t)v25, &v28, (uint64_t)v27, 112);
  }
  return v15;
}

void sub_1E06849C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  int v42;
  void *v43;
  uint64_t v44;

  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v44 - 128);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v44 - 144);
  if (v42)
    __cxa_free_exception(v43);
  if (*(char *)(v44 - 89) < 0)
    operator delete(*(void **)(v44 - 112));
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<unsigned char>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "8 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_1E0684BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::TokenToInt<unsigned char,unsigned short,unsigned long>(MIL::Scanner::Token *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ProgramFirstSet;
  std::string::size_type v9;
  const void *v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  int BaseAndPrepIntStringForParse;
  unsigned int v15;
  void *exception;
  uint64_t v18;
  void *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  void *v30[3];
  __int128 v31;
  std::string __dst;

  if (MIL::Scanner::Token::GetType(a1) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(a2, a4, &__dst);
    v31 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)a3, v30);
    MIL::ParseError::ParseError((uint64_t)exception, &v31, (uint64_t)v30, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a1);
  v9 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = *(const void **)ProgramFirstSet;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v9)
LABEL_9:
    memmove(p_dst, v10, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v15 = (unsigned __int16)std::stoul(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v15 > 0xFF)
  {
    v18 = MIL::ParserContext::GetProgramFirstSet(a1);
    std::string::basic_string<std::string_view,0>(&__dst, v18);
    v19 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(a2, a4, &v28);
    v29 = v28;
    v28 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not valid or is outside the range of ", (const void **)&__dst.__r_.__value_.__l.__data_, (void **)&v25.__r_.__value_.__l.__data_);
    v20 = *(char *)(a3 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)a3;
    else
      v21 = *(const std::string::value_type **)a3;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a3 + 23);
    else
      v22 = *(_QWORD *)(a3 + 8);
    v23 = std::string::append(&v25, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v26, 46);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
    MIL::ParseError::ParseError((uint64_t)v19, &v29, (uint64_t)&v27, 400);
  }
  return v15;
}

void sub_1E0684E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  int v40;
  void *v41;
  uint64_t v42;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v40)
    __cxa_free_exception(v41);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<unsigned short>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  int BaseAndPrepIntStringForParse;
  int v14;
  void *exception;
  uint64_t v17;
  void *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  std::string __dst;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "16 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v26);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)__p, (void **)&__dst.__r_.__value_.__l.__data_);
    MIL::ParseError::ParseError((uint64_t)exception, (__int128 *)&v27, (uint64_t)&__dst, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v8 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = *(const void **)ProgramFirstSet;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v14 = std::stoul(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((v14 & 0xFFFF0000) != 0)
  {
    v17 = MIL::ParserContext::GetProgramFirstSet(a2);
    std::string::basic_string<std::string_view,0>(&__dst, v17);
    v18 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v28);
    v29 = v28;
    v28 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not valid or is outside the range of ", (const void **)&__dst.__r_.__value_.__l.__data_, (void **)&v25.__r_.__value_.__l.__data_);
    if ((v24 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v20 = v24;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&v25, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v26, 46);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
    MIL::ParseError::ParseError((uint64_t)v18, &v29, (uint64_t)&v27, 400);
  }
  if ((char)v24 < 0)
    operator delete(__p[0]);
  return (unsigned __int16)v14;
}

void sub_1E0685258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (v35)
    __cxa_free_exception(v36);
  if (*(char *)(v37 - 65) < 0)
    operator delete(*(void **)(v37 - 88));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

unint64_t MIL::Text::Parser::TensorVal::ParseToken<unsigned int>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  int BaseAndPrepIntStringForParse;
  unint64_t v14;
  void *exception;
  uint64_t v17;
  void *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  std::string __dst;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "32 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v26);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)__p, (void **)&__dst.__r_.__value_.__l.__data_);
    MIL::ParseError::ParseError((uint64_t)exception, (__int128 *)&v27, (uint64_t)&__dst, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v8 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = *(const void **)ProgramFirstSet;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v14 = std::stoull(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (HIDWORD(v14))
  {
    v17 = MIL::ParserContext::GetProgramFirstSet(a2);
    std::string::basic_string<std::string_view,0>(&__dst, v17);
    v18 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v28);
    v29 = v28;
    v28 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not valid or is outside the range of ", (const void **)&__dst.__r_.__value_.__l.__data_, (void **)&v25.__r_.__value_.__l.__data_);
    if ((v24 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v20 = v24;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&v25, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v26, 46);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
    MIL::ParseError::ParseError((uint64_t)v18, &v29, (uint64_t)&v27, 400);
  }
  if ((char)v24 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_1E0685648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (v35)
    __cxa_free_exception(v36);
  if (*(char *)(v37 - 65) < 0)
    operator delete(*(void **)(v37 - 88));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

unint64_t MIL::Text::Parser::TensorVal::ParseToken<unsigned long long>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  int BaseAndPrepIntStringForParse;
  unint64_t v14;
  void *exception;
  void *__p;
  char v18;
  std::string v19;
  __int128 v20;
  std::string __dst;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "64 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v19);
    v20 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)&__p, (void **)&__dst.__r_.__value_.__l.__data_);
    MIL::ParseError::ParseError((uint64_t)exception, &v20, (uint64_t)&__dst, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v8 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = *(const void **)ProgramFirstSet;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v14 = std::stoull(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(__p);
  return v14;
}

void sub_1E0685A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (v35)
    __cxa_free_exception(v36);
  if (*(char *)(v37 - 65) < 0)
    operator delete(*(void **)(v37 - 88));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt1>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  unsigned __int8 v7;
  void *__p[2];
  char v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "1 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::UInt1::UInt1((MIL::UInt1 *)&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1E0685BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt2>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  unsigned __int8 v7;
  void *__p[2];
  char v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "2 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::UInt2::UInt2((MIL::UInt2 *)&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1E0685CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt3>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  unsigned __int8 v7;
  void *__p[2];
  char v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "3 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::UInt3::UInt3((MIL::UInt3 *)&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1E0685D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt4>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  unsigned __int8 v7;
  void *__p[2];
  char v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "4 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::UInt4::UInt4((MIL::UInt4 *)&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1E0685DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt6>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  unsigned __int8 v7;
  void *__p[2];
  char v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "6 bit unsigned integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::UInt6::UInt6((MIL::UInt6 *)&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1E0685E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<MIL::Int4>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  signed __int8 v7;
  void *__p[2];
  char v10;
  unsigned __int8 v11;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "4 bit integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Int4::Int4((MIL::Int4 *)&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_1E0685F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::TokenToInt<signed char,short,int>(MIL::Scanner::Token *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ProgramFirstSet;
  std::string::size_type v9;
  const void *v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  int BaseAndPrepIntStringForParse;
  __int16 v15;
  void *exception;
  uint64_t v18;
  void *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  void *v30[3];
  __int128 v31;
  std::string __dst;

  if (MIL::Scanner::Token::GetType(a1) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(a2, a4, &__dst);
    v31 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)a3, v30);
    MIL::ParseError::ParseError((uint64_t)exception, &v31, (uint64_t)v30, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a1);
  v9 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = *(const void **)ProgramFirstSet;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v9)
LABEL_9:
    memmove(p_dst, v10, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v15 = std::stoi(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v15 > 127 || v15 < -128)
  {
    v18 = MIL::ParserContext::GetProgramFirstSet(a1);
    std::string::basic_string<std::string_view,0>(&__dst, v18);
    v19 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(a2, a4, &v28);
    v29 = v28;
    v28 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not valid or is outside the range of ", (const void **)&__dst.__r_.__value_.__l.__data_, (void **)&v25.__r_.__value_.__l.__data_);
    v20 = *(char *)(a3 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)a3;
    else
      v21 = *(const std::string::value_type **)a3;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a3 + 23);
    else
      v22 = *(_QWORD *)(a3 + 8);
    v23 = std::string::append(&v25, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v26, 46);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
    MIL::ParseError::ParseError((uint64_t)v19, &v29, (uint64_t)&v27, 400);
  }
  return (char)v15;
}

void sub_1E06861E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  int v40;
  void *v41;
  uint64_t v42;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v40)
    __cxa_free_exception(v41);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<signed char>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "8 bit integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_1E0686398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<short>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  int BaseAndPrepIntStringForParse;
  int v14;
  void *exception;
  uint64_t v17;
  void *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  std::string __dst;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "16 bit integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v26);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)__p, (void **)&__dst.__r_.__value_.__l.__data_);
    MIL::ParseError::ParseError((uint64_t)exception, (__int128 *)&v27, (uint64_t)&__dst, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v8 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = *(const void **)ProgramFirstSet;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v14 = std::stoi(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v14 >= 0x8000 || v14 < -32768)
  {
    v17 = MIL::ParserContext::GetProgramFirstSet(a2);
    std::string::basic_string<std::string_view,0>(&__dst, v17);
    v18 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v28);
    v29 = v28;
    v28 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not valid or is outside the range of ", (const void **)&__dst.__r_.__value_.__l.__data_, (void **)&v25.__r_.__value_.__l.__data_);
    if ((v24 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v20 = v24;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&v25, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v26, 46);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
    MIL::ParseError::ParseError((uint64_t)v18, &v29, (uint64_t)&v27, 400);
  }
  if ((char)v24 < 0)
    operator delete(__p[0]);
  return (__int16)v14;
}

void sub_1E0686668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (v35)
    __cxa_free_exception(v36);
  if (*(char *)(v37 - 65) < 0)
    operator delete(*(void **)(v37 - 88));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<int>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  int BaseAndPrepIntStringForParse;
  uint64_t v14;
  void *exception;
  uint64_t v17;
  void *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int128 v28;
  __int128 v29;
  std::string __dst;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "32 bit integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v26);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)__p, (void **)&__dst.__r_.__value_.__l.__data_);
    MIL::ParseError::ParseError((uint64_t)exception, (__int128 *)&v27, (uint64_t)&__dst, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v8 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = *(const void **)ProgramFirstSet;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v14 = std::stoll(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v14 > 0x7FFFFFFF || v14 < (uint64_t)0xFFFFFFFF80000000)
  {
    v17 = MIL::ParserContext::GetProgramFirstSet(a2);
    std::string::basic_string<std::string_view,0>(&__dst, v17);
    v18 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v28);
    v29 = v28;
    v28 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not valid or is outside the range of ", (const void **)&__dst.__r_.__value_.__l.__data_, (void **)&v25.__r_.__value_.__l.__data_);
    if ((v24 & 0x80u) == 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v20 = v24;
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&v25, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v26, 46);
    v27 = v26;
    memset(&v26, 0, sizeof(v26));
    MIL::ParseError::ParseError((uint64_t)v18, &v29, (uint64_t)&v27, 400);
  }
  if ((char)v24 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_1E0686A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (v35)
    __cxa_free_exception(v36);
  if (*(char *)(v37 - 65) < 0)
    operator delete(*(void **)(v37 - 88));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseToken<long long>(uint64_t a1, MIL::Scanner::Token *a2)
{
  unint64_t v4;
  uint64_t Options;
  uint64_t v6;
  uint64_t ProgramFirstSet;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  int BaseAndPrepIntStringForParse;
  uint64_t v14;
  void *exception;
  void *__p;
  char v18;
  std::string v19;
  __int128 v20;
  std::string __dst;

  v4 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "64 bit integer");
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (MIL::Scanner::Token::GetType(a2) != 18)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v4, v6, &v19);
    v20 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" value expected.", (const void **)&__p, (void **)&__dst.__r_.__value_.__l.__data_);
    MIL::ParseError::ParseError((uint64_t)exception, &v20, (uint64_t)&__dst, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  v8 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = *(const void **)ProgramFirstSet;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v8)
LABEL_9:
    memmove(p_dst, v9, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  v14 = std::stoll(&__dst, 0, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(__p);
  return v14;
}

void sub_1E0686E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  int v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 112);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (v35)
    __cxa_free_exception(v36);
  if (*(char *)(v37 - 65) < 0)
    operator delete(*(void **)(v37 - 88));
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::TensorVal::ParseToken<std::string>(MIL::Scanner::Token *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  uint64_t ProgramFirstSet;
  std::string::size_type v7;
  const void *v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::string::size_type size;
  char *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  std::string::size_type v21;
  std::string::size_type v22;
  void *exception;
  unint64_t v24;
  uint64_t Options;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  std::string v29;
  std::string __dst;
  unsigned __int8 v31;

  if (MIL::Scanner::Token::GetType(this) != 20)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v24 = *(_QWORD *)(a2 + 32);
    Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a2 + 24));
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::TextLocationFromScannerLocation(v24, v26, &__dst);
    v28 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v27, "String value expected.");
    MIL::ParseError::ParseError((uint64_t)exception, &v28, (uint64_t)v27, 112);
  }
  ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
  v7 = *(_QWORD *)(ProgramFirstSet + 8);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = *(const void **)ProgramFirstSet;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v7)
LABEL_9:
    memmove(p_dst, v8, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v29 = __dst;
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if (HIBYTE(v29.__r_.__value_.__r.__words[2]) > 1u)
    {
      v14 = &v29.__r_.__value_.__s.__data_[1];
      v15 = &v29;
      goto LABEL_20;
    }
LABEL_17:
    *a3 = v29;
    memset(&v29, 0, sizeof(v29));
    if ((v12 & 0x80000000) == 0)
      return;
    goto LABEL_30;
  }
  size = v29.__r_.__value_.__l.__size_;
  if (v29.__r_.__value_.__l.__size_ < 2)
    goto LABEL_17;
  v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
  v14 = (char *)(v29.__r_.__value_.__r.__words[0] + 1);
LABEL_20:
  std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v14, (char *)v15 + size - 1, (char *)v15 + size - 1 - v14);
  v16 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v16 & 0x80u) == 0)
    v17 = a3;
  else
    v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((v16 & 0x80u) != 0)
    v16 = a3->__r_.__value_.__l.__size_;
  v31 = 92;
  v18 = std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(v17, (unsigned __int8 *)v17 + v16, &v31);
  v19 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  v20 = (char)v19;
  v21 = (std::string::size_type)a3 + v19;
  if (v20 >= 0)
  {
    v22 = (std::string::size_type)a3;
  }
  else
  {
    v21 = a3->__r_.__value_.__r.__words[0] + a3->__r_.__value_.__l.__size_;
    v22 = a3->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a3, (std::string::size_type)&v18[-v22], v21 - (_QWORD)v18);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0)
      return;
    goto LABEL_30;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (v12 < 0)
LABEL_30:
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1E06871EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25)
{
  void *v25;
  int v26;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (v26)
    __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::TensorVal::ParseTokens<BOOL,unsigned char>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  BOOL *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<BOOL>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E06873C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseScalar(MIL::Text::Parser::TensorVal *this@<X0>, const MIL::IRTensorValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t Options;
  uint64_t v8;
  _BOOL8 v9;
  const MIL::IRTensorValueType *v10;
  unsigned __int8 v11;
  const MIL::IRTensorValueType *v12;
  char v13;
  _BYTE *v14;
  const MIL::IRTensorValueType *v15;
  char v16;
  _BYTE *v17;
  const MIL::IRTensorValueType *v18;
  const MIL::IRTensorValueType *v19;
  const MIL::IRTensorValueType *v20;
  char v21;
  _BYTE *v22;
  unsigned __int8 v23;
  float v24;
  const MIL::IRTensorValueType *v25;
  const MIL::IRTensorValueType *v26;
  char v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  void *v31;
  double v32;
  const MIL::IRTensorValueType *v33;
  unsigned __int16 v34;
  const MIL::IRTensorValueType *v35;
  unsigned __int16 v36;
  char v37;
  _BYTE *v38;
  void *exception;
  void *v40;
  int v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50[2];
  unsigned __int8 v51;
  __int128 v52;
  std::string::size_type v53;
  __int128 v54;
  __int128 v55;
  std::string v56;
  std::string v57;
  std::string __p;
  std::string v59;
  _QWORD v60[3];
  __int128 v61;

  v6 = *((_QWORD *)this + 4);
  Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  if (!MIL::IRTensorValueType::IsScalar(a2))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(v6, v8, &v59);
    v61 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v60, "Attempted to parse a scalar tensor, but declared a tensor with at least 1 dimension");
    MIL::ParseError::ParseError((uint64_t)exception, &v61, (uint64_t)v60, 112);
  }
  switch((*(unsigned int (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2))
  {
    case 2u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v9 = MIL::Text::Parser::TensorVal::ParseToken<BOOL>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeBoolValue(a2, (const MIL::IRTensorValueType *)v9, a3);
      goto LABEL_31;
    case 3u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      MIL::Text::Parser::TensorVal::ParseToken<std::string>((MIL::Scanner::Token *)&v59, (uint64_t)this, &v56);
      MIL::IRTensorValueType::MakeStringValue(a2, (const MIL::IRTensorValueType *)&v56, a3);
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
      v31 = (void *)v56.__r_.__value_.__r.__words[0];
      goto LABEL_30;
    case 4u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v34 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp16>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeFloat16Value(a2, (const MIL::IRTensorValueType *)v34, a3);
      goto LABEL_31;
    case 5u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v24 = MIL::Text::Parser::TensorVal::ParseToken<float>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeFloat32Value(a2, v24, v25, a3);
      goto LABEL_31;
    case 6u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v32 = MIL::Text::Parser::TensorVal::ParseToken<double>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeFloat64Value(a2, v32, v33, a3);
      goto LABEL_31;
    case 7u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v36 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Bf16>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeBFloat16Value(a2, (const MIL::IRTensorValueType *)v36, a3);
      goto LABEL_31;
    case 9u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v18 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<signed char>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeInt8Value(a2, v18, a3);
      goto LABEL_31;
    case 0xAu:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v35 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<short>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeInt16Value(a2, v35, a3);
      goto LABEL_31;
    case 0xBu:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v19 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<int>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeInt32Value(a2, v19, a3);
      goto LABEL_31;
    case 0xCu:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v12 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<long long>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeInt64Value(a2, v12, a3);
      goto LABEL_31;
    case 0xDu:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v16 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Int4>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      v17 = operator new(1uLL);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      *v17 = v16;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 1);
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 1);
      MIL::PackSubByteVec((uint64_t *)&v57, &__p);
      MIL::IRTensorValueType::MakeInt4Value(a2, (const MIL::IRTensorValueType *)*__p.__r_.__value_.__l.__data_, a3);
      goto LABEL_26;
    case 0xEu:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v10 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<unsigned char>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeUInt8Value(a2, v10, a3);
      goto LABEL_31;
    case 0xFu:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v15 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<unsigned short>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeUInt16Value(a2, v15, a3);
      goto LABEL_31;
    case 0x10u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v20 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<unsigned int>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeUInt32Value(a2, v20, a3);
      goto LABEL_31;
    case 0x11u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v26 = (const MIL::IRTensorValueType *)MIL::Text::Parser::TensorVal::ParseToken<unsigned long long>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeUInt64Value(a2, v26, a3);
      goto LABEL_31;
    case 0x13u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v29 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt2>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      v30 = operator new(1uLL);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      *v30 = v29;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v30 + 1);
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v30 + 1);
      MIL::PackSubByteVec((uint64_t *)&v57, &__p);
      MIL::IRTensorValueType::MakeUInt2Value(a2, (const MIL::IRTensorValueType *)*__p.__r_.__value_.__l.__data_, a3);
      goto LABEL_26;
    case 0x14u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v27 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt4>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      v28 = operator new(1uLL);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      *v28 = v27;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v28 + 1);
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v28 + 1);
      MIL::PackSubByteVec((uint64_t *)&v57, &__p);
      MIL::IRTensorValueType::MakeUInt4Value(a2, (const MIL::IRTensorValueType *)*__p.__r_.__value_.__l.__data_, a3);
      goto LABEL_26;
    case 0x15u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v21 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt1>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      v22 = operator new(1uLL);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      *v22 = v21;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v22 + 1);
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
      MIL::PackSubByteVec((uint64_t *)&v57, &__p);
      MIL::IRTensorValueType::MakeUInt1Value(a2, (const MIL::IRTensorValueType *)*__p.__r_.__value_.__l.__data_, a3);
      goto LABEL_26;
    case 0x16u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v37 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt3>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      v38 = operator new(1uLL);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      *v38 = v37;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v38 + 1);
      MIL::PackSubByteVec((unsigned __int8 **)&v57, &__p);
      MIL::IRTensorValueType::MakeUInt3Value(a2, (const MIL::IRTensorValueType *)*__p.__r_.__value_.__l.__data_, a3);
      goto LABEL_26;
    case 0x17u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v13 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt6>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      v14 = operator new(1uLL);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      *v14 = v13;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 1);
      v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 1);
      MIL::PackSubByteVec((unsigned __int8 **)&v57, &__p);
      MIL::IRTensorValueType::MakeUInt6Value(a2, (const MIL::IRTensorValueType *)*__p.__r_.__value_.__l.__data_, a3);
LABEL_26:
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v31 = (void *)v57.__r_.__value_.__r.__words[0];
      if (!v57.__r_.__value_.__r.__words[0])
        goto LABEL_31;
      v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v31);
LABEL_31:
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v59);
      return;
    case 0x18u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v11 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp8E4M3FN>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeFloat8E4M3FNValue(a2, (const MIL::IRTensorValueType *)v11, a3);
      goto LABEL_31;
    case 0x19u:
      (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 16))(&v59);
      v23 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp8E5M2>((uint64_t)this, (MIL::Scanner::Token *)&v59);
      MIL::IRTensorValueType::MakeFloat8E5M2Value(a2, (const MIL::IRTensorValueType *)v23, a3);
      goto LABEL_31;
    default:
      v40 = __cxa_allocate_exception(0x48uLL);
      MIL::TextLocationFromScannerLocation(v6, v8, &v54);
      v55 = v54;
      v54 = 0uLL;
      v41 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2);
      MIL::IRDataTypeToString(v41, &v57);
      v42 = std::string::insert(&v57, 0, "Scalars with data type ");
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v44 = std::string::append(&__p, " are not supported by the scalar parser. The following are supported: ");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      MIL::Util::ValidTensorDataTypesStr(v50, (MIL::Util *)v44);
      if ((v51 & 0x80u) == 0)
        v46 = (const std::string::value_type *)v50;
      else
        v46 = (const std::string::value_type *)v50[0];
      if ((v51 & 0x80u) == 0)
        v47 = v51;
      else
        v47 = v50[1];
      v48 = std::string::append(&v59, v46, v47);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v53 = v48->__r_.__value_.__r.__words[2];
      v52 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)v40, &v55, (uint64_t)&v52, 114);
  }
}

void sub_1E0687BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v46 - 121) < 0)
    operator delete(*(void **)(v46 - 144));
  if (a44 < 0)
    operator delete(a39);
  if (a38 < 0)
    operator delete(a33);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (v45)
    __cxa_free_exception(v44);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::TensorVal::ParseDim(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Options;
  uint64_t v7;
  _DWORD *v8;
  MIL::Scanner::Token *v9;
  uint64_t i;
  MIL::Scanner::Token *v11;
  MIL::Scanner::Token *v12;
  int Type;
  _DWORD *v14;
  uint64_t j;
  MIL::Scanner::Token *v16;
  MIL::Scanner::Token *v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  MIL::Scanner::Token *v38;
  uint64_t v39;
  uint64_t v40;
  void *exception;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[32];
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[4];
  _QWORD v53[3];
  __int128 v54;
  void *v55[4];
  void *__p;
  _BYTE *v57;
  uint64_t v58;
  void *v59;
  _DWORD *v60;
  uint64_t v61;
  char v62[32];
  __int128 v63;
  uint64_t v64;
  __int128 __src;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
  MIL::Scanner::Expect(*(_QWORD *)(a1 + 16), 3, v7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v62);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = operator new(0x14uLL);
  v8[4] = 22;
  *(_OWORD *)v8 = xmmword_1E0B086E8;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<MIL::Scanner::TokenType>::__init_with_size[abi:ne180100]<MIL::Scanner::TokenType*,MIL::Scanner::TokenType*>(&v59, v8, (uint64_t)(v8 + 5), 5uLL);
  v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  if (MIL::Scanner::Token::GetType(v9) == 3)
  {
    v63 = 0uLL;
    v64 = 0;
    MIL::Text::Parser::TensorVal::ParseDim(&__p, a1, a2);
    std::vector<std::vector<unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v63, (uint64_t)&__p);
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
    for (i = 1; ; ++i)
    {
      v11 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
      if (MIL::Scanner::Token::GetType(v11) != 9)
        break;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(v55);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v55);
      MIL::Text::Parser::TensorVal::ParseDim(&__p, a1, a2);
      std::vector<std::vector<unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v63, (uint64_t)&__p);
      if (__p)
      {
        v57 = __p;
        operator delete(__p);
      }
    }
    v57 = 0;
    v58 = 0;
    __p = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)v63, *(_QWORD *)(v63 + 8), (uint64_t)(*(_QWORD *)(v63 + 8) - *(_QWORD *)v63) >> 3);
    v21 = *((_QWORD *)&v63 + 1);
    v20 = v63;
    if ((_QWORD)v63 != *((_QWORD *)&v63 + 1))
    {
      v22 = __p;
      v23 = v57 - (_BYTE *)__p;
      do
      {
        if (*(_QWORD *)(v20 + 8) - *(_QWORD *)v20 != v23 || memcmp(*(const void **)v20, v22, v23))
        {
          exception = __cxa_allocate_exception(0x48uLL);
          v42 = *(_QWORD *)(a1 + 32);
          v43 = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
          MIL::TextLocationFromScannerLocation(v42, v44, &__src);
          v54 = __src;
          __src = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(v53, "Tensor dimensions must have identical subshapes.");
          MIL::ParseError::ParseError((uint64_t)exception, &v54, (uint64_t)v53, 104);
        }
        v20 += 24;
      }
      while (v20 != v21);
    }
    *(_QWORD *)&__src = i;
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a3, (char *)&__src, (uint64_t)&__src + 8, 1uLL);
    v24 = __p;
    v25 = v57;
    if (__p != v57)
    {
      v26 = (_QWORD *)(a3 + 16);
      v27 = *(_QWORD **)(a3 + 8);
      do
      {
        v28 = *v24;
        if ((unint64_t)v27 >= *v26)
        {
          v30 = *(_QWORD **)a3;
          v31 = ((uint64_t)v27 - *(_QWORD *)a3) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v33 = *v26 - (_QWORD)v30;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v34);
            v30 = *(_QWORD **)a3;
            v27 = *(_QWORD **)(a3 + 8);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v28;
          v29 = v36 + 8;
          while (v27 != v30)
          {
            v37 = *--v27;
            *((_QWORD *)v36 - 1) = v37;
            v36 -= 8;
          }
          *(_QWORD *)a3 = v36;
          *(_QWORD *)(a3 + 8) = v29;
          *(_QWORD *)(a3 + 16) = &v35[8 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v27 = v28;
          v29 = v27 + 1;
        }
        *(_QWORD *)(a3 + 8) = v29;
        ++v24;
        v27 = v29;
      }
      while (v24 != v25);
      v24 = __p;
    }
    if (v24)
    {
      v57 = v24;
      operator delete(v24);
    }
    __p = &v63;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
    Type = MIL::Scanner::Token::GetType(v12);
    v14 = v59;
    if (v59 != v60)
    {
      while (*v14 != Type)
      {
        if (++v14 == v60)
        {
          v14 = v60;
          break;
        }
      }
    }
    if (v14 == v60)
    {
      v38 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
      if (MIL::Scanner::Token::GetType(v38) == 4)
      {
        *(_QWORD *)&v63 = 0;
        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a3, (char *)&v63, (uint64_t)&v63 + 8, 1uLL);
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(&v63);
      std::vector<MIL::Scanner::Token>::push_back[abi:ne180100](a2, (uint64_t)&v63);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v63);
      for (j = 1; ; ++j)
      {
        v16 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        if (MIL::Scanner::Token::GetType(v16) != 9)
          break;
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(v52);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v52);
        v17 = (MIL::Scanner::Token *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        v18 = MIL::Scanner::Token::GetType(v17);
        v19 = v59;
        if (v59 != v60)
        {
          while (*v19 != v18)
          {
            if (++v19 == v60)
            {
              v19 = v60;
              break;
            }
          }
        }
        if (v19 == v60)
        {
          v45 = __cxa_allocate_exception(0x48uLL);
          v46 = *(_QWORD *)(a1 + 32);
          v47 = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
          MIL::TextLocationFromScannerLocation(v46, v48, &v63);
          v51 = v63;
          v63 = 0uLL;
          std::string::basic_string[abi:ne180100]<0>(v50, "Expected value here.");
          MIL::ParseError::ParseError((uint64_t)v45, &v51, (uint64_t)v50, 115);
        }
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(&v63);
        std::vector<MIL::Scanner::Token>::push_back[abi:ne180100](a2, (uint64_t)&v63);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v63);
      }
      *(_QWORD *)&v63 = j;
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a3, (char *)&v63, (uint64_t)&v63 + 8, 1uLL);
    }
  }
  v39 = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
  MIL::Scanner::Expect(*(_QWORD *)(a1 + 16), 4, v40);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v49);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  operator delete(v8);
}

void sub_1E0688398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  void *v44;
  void *v46;

  if (__p)
    operator delete(__p);
  operator delete(v44);
  v46 = *(void **)v43;
  if (*(_QWORD *)v43)
  {
    *(_QWORD *)(v43 + 8) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1E0688608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MIL::Scanner::Token>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v9];
    v17 = &v13[32 * v12];
    MIL::Scanner::Token::Token(v15, a2);
    v16 = v15 + 32;
    std::vector<MIL::Scanner::Token>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<MIL::Scanner::Token>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    MIL::Scanner::Token::Token(*(_OWORD **)(v4 - 8), a2);
    v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
}

void sub_1E0688708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIL::Scanner::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::TensorVal::ParseTensor(MIL::Text::Parser::TensorVal *this@<X0>, const MIL::IRTensorValueType *a2@<X1>, _QWORD *a3@<X8>)
{
  MIL::MILContext **v6;
  MIL::MILContext **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (***v21)(MIL::MILContextImpl *__hidden);
  int v22;
  const MIL::IRValueType *v23;
  const MIL::IRValueType *v24;
  unint64_t i;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  void *exception;
  unint64_t v40;
  uint64_t Options;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  __int128 v48;
  const MIL::IRDimension ***v49;
  MIL::Text::BasicSerializer *v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  __int128 v73;
  __int128 v74;
  std::string::size_type v75;
  __int128 v76;
  _QWORD v77[2];
  unsigned __int8 v78;
  std::string __p[16];
  uint64_t v80[2];
  unsigned __int8 v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  std::string::size_type v87;
  __int128 v88;
  __int128 v89;
  const MIL::Text::SerializerOptions *v90;
  uint64_t *v91;
  uint64_t *v92;
  char *v93;
  unint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  MIL::MILContext **v97;
  MIL::MILContext **v98;
  MIL::Scanner::Token *v99[3];
  _QWORD v100[3];
  __int128 v101;

  if (MIL::IRTensorValueType::IsScalar(a2))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v40 = *((_QWORD *)this + 4);
    Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Options + 24))(Options);
    MIL::TextLocationFromScannerLocation(v40, v42, __p);
    v101 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v100, "Attempted to parse a tensor, but declared a 0 dimensional tensor (scalar)");
    MIL::ParseError::ParseError((uint64_t)exception, &v101, (uint64_t)v100, 112);
  }
  memset(v99, 0, sizeof(v99));
  MIL::Text::Parser::TensorVal::ParseDim((uint64_t)this, (uint64_t *)v99, (uint64_t)&v97);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v94, v97, (uint64_t)v98, v98 - v97);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v6 = v97;
  v7 = v98;
  if (v97 != v98)
  {
    do
    {
      v8 = MIL::IRConstantDimension::Make(*((void (****)(MIL::MILContextImpl *__hidden))this + 1), *v6);
      v9 = v8;
      v10 = v92;
      if (v92 >= (uint64_t *)v93)
      {
        v12 = v92 - v91;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = (v93 - (char *)v91) >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)(v93 - (char *)v91) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v93, v14);
        else
          v15 = 0;
        v16 = (uint64_t *)&v15[8 * v12];
        *v16 = v9;
        v11 = v16 + 1;
        v18 = v91;
        v17 = v92;
        if (v92 != v91)
        {
          do
          {
            v19 = *--v17;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = v91;
        }
        v91 = v16;
        v92 = v11;
        v93 = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v92 = v8;
        v11 = v10 + 1;
      }
      v92 = v11;
      ++v6;
    }
    while (v6 != v7);
    if (v91 != v11)
    {
      v20 = MIL::IRDimension::AsConstant((MIL::IRDimension *)*(v11 - 1));
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20))
      {
        for (i = v92 - v91; ; ++i)
        {
          v26 = (_QWORD *)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
          if (i >= (uint64_t)(v26[1] - *v26) >> 3)
            break;
          v27 = *(_QWORD *)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
          v28 = v92;
          if (v92 >= (uint64_t *)v93)
          {
            v30 = v92 - v91;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v31 = (v93 - (char *)v91) >> 2;
            if (v31 <= v30 + 1)
              v31 = v30 + 1;
            if ((unint64_t)(v93 - (char *)v91) >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v93, v32);
            else
              v33 = 0;
            v34 = (uint64_t *)&v33[8 * v30];
            *v34 = *(_QWORD *)(v27 + 8 * i);
            v29 = v34 + 1;
            v36 = v91;
            v35 = v92;
            if (v92 != v91)
            {
              do
              {
                v37 = *--v35;
                *--v34 = v37;
              }
              while (v35 != v36);
              v35 = v91;
            }
            v91 = v34;
            v92 = v29;
            v93 = &v33[8 * v32];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v92 = *(_QWORD *)(v27 + 8 * i);
            v29 = v28 + 1;
          }
          v92 = v29;
        }
      }
    }
  }
  v21 = (void (***)(MIL::MILContextImpl *__hidden))*((_QWORD *)this + 1);
  v22 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2);
  v23 = (const MIL::IRValueType *)MIL::IRTensorValueType::MakeWithShape(v21, v22, (uint64_t)&v91);
  if ((MIL::IsEqualOrStrongerType(a2, v23, v24) & 1) == 0)
  {
    MIL::Text::SerializerOptions::Make((uint64_t *)&v90);
    v43 = __cxa_allocate_exception(0x48uLL);
    v44 = *((_QWORD *)this + 4);
    v45 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
    MIL::TextLocationFromScannerLocation(v44, v46, &v88);
    v89 = v88;
    v88 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&v82, "Size of dimensions of declared type and provided tensor literal are not compatible. ");
    v47 = std::string::append(&v82, "Declared shape: ");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    MIL::Text::BasicSerializer::BasicSerializer((MIL::Text::BasicSerializer *)__p, v90);
    v49 = (const MIL::IRDimension ***)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
    v50 = MIL::Text::BasicSerializer::TensorShape((MIL::Text::BasicSerializer *)__p, v49);
    MIL::Text::BasicSerializer::GetOutput(v80, v50);
    if ((v81 & 0x80u) == 0)
      v51 = (const std::string::value_type *)v80;
    else
      v51 = (const std::string::value_type *)v80[0];
    if ((v81 & 0x80u) == 0)
      v52 = v81;
    else
      v52 = v80[1];
    v53 = std::string::append(&v83, v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v84, " but expected shape ");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MIL::Text::Parser::TensorVal::ParseTensor(MIL::IRTensorValueType const*)::$_0::operator()(&v94);
    if ((v78 & 0x80u) == 0)
      v57 = (const std::string::value_type *)v77;
    else
      v57 = (const std::string::value_type *)v77[0];
    if ((v78 & 0x80u) == 0)
      v58 = v78;
    else
      v58 = v77[1];
    v59 = std::string::append(&v85, v57, v58);
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v87 = v59->__r_.__value_.__r.__words[2];
    v86 = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    MIL::ParseError::ParseError((uint64_t)v43, &v89, (uint64_t)&v86, 104);
  }
  switch((*(unsigned int (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2))
  {
    case 2u:
      MIL::Text::Parser::TensorVal::ParseTokens<BOOL,unsigned char>((uint64_t)this, v99, (unint64_t *)__p);
      MIL::IRTensorValueType::MakeBoolValue((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 3u:
      MIL::Text::Parser::TensorVal::ParseTokens<std::string,std::string>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeStringValue((uint64_t)v23, (uint64_t)__p, a3);
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      goto LABEL_72;
    case 4u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::Fp16,MIL::Fp16>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeFloat16Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 5u:
      MIL::Text::Parser::TensorVal::ParseTokens<float,float>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeFloat32Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 6u:
      MIL::Text::Parser::TensorVal::ParseTokens<double,double>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeFloat64Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 7u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::Bf16,MIL::Bf16>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeBFloat16Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 9u:
      MIL::Text::Parser::TensorVal::ParseTokens<signed char,signed char>((uint64_t)this, v99, (unint64_t *)__p);
      MIL::IRTensorValueType::MakeInt8Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0xAu:
      MIL::Text::Parser::TensorVal::ParseTokens<short,short>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeInt16Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0xBu:
      MIL::Text::Parser::TensorVal::ParseTokens<int,int>((uint64_t)this, v99, (std::vector<unsigned int> *)__p);
      MIL::IRTensorValueType::MakeInt32Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0xCu:
      MIL::Text::Parser::TensorVal::ParseTokens<long long,long long>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeInt64Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0xDu:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::Int4,MIL::Int4>((uint64_t)this, v99, (unint64_t *)&v85);
      MIL::PackSubByteVec((uint64_t *)&v85, __p);
      MIL::IRTensorValueType::MakeInt4Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_67;
    case 0xEu:
      MIL::Text::Parser::TensorVal::ParseTokens<unsigned char,unsigned char>((uint64_t)this, v99, (unint64_t *)__p);
      MIL::IRTensorValueType::MakeUInt8Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0xFu:
      MIL::Text::Parser::TensorVal::ParseTokens<unsigned short,unsigned short>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeUInt16Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0x10u:
      MIL::Text::Parser::TensorVal::ParseTokens<unsigned int,unsigned int>((uint64_t)this, v99, (std::vector<unsigned int> *)__p);
      MIL::IRTensorValueType::MakeUInt32Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0x11u:
      MIL::Text::Parser::TensorVal::ParseTokens<unsigned long long,unsigned long long>((uint64_t)this, v99, (uint64_t)__p);
      MIL::IRTensorValueType::MakeUInt64Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0x13u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt2,MIL::UInt2>((uint64_t)this, v99, (unint64_t *)&v85);
      MIL::PackSubByteVec((uint64_t *)&v85, __p);
      MIL::IRTensorValueType::MakeUInt2Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_67;
    case 0x14u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt4,MIL::UInt4>((uint64_t)this, v99, (unint64_t *)&v85);
      MIL::PackSubByteVec((uint64_t *)&v85, __p);
      MIL::IRTensorValueType::MakeUInt4Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_67;
    case 0x15u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt1,MIL::UInt1>((uint64_t)this, v99, (unint64_t *)&v85);
      MIL::PackSubByteVec((uint64_t *)&v85, __p);
      MIL::IRTensorValueType::MakeUInt1Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_67;
    case 0x16u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt3,MIL::UInt3>((uint64_t)this, v99, (unint64_t *)&v85);
      MIL::PackSubByteVec((unsigned __int8 **)&v85, __p);
      MIL::IRTensorValueType::MakeUInt3Value((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_67;
    case 0x17u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt6,MIL::UInt6>((uint64_t)this, v99, (unint64_t *)&v85);
      MIL::PackSubByteVec((unsigned __int8 **)&v85, __p);
      MIL::IRTensorValueType::MakeUInt6Value((uint64_t)v23, (uint64_t)__p, a3);
LABEL_67:
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      v38 = (void *)v85.__r_.__value_.__r.__words[0];
      if (!v85.__r_.__value_.__r.__words[0])
        goto LABEL_72;
      v85.__r_.__value_.__l.__size_ = v85.__r_.__value_.__r.__words[0];
      goto LABEL_71;
    case 0x18u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::Fp8E4M3FN,MIL::Fp8E4M3FN>((uint64_t)this, v99, (unint64_t *)__p);
      MIL::IRTensorValueType::MakeFloat8E4M3FNValue((uint64_t)v23, (uint64_t)__p, a3);
      goto LABEL_64;
    case 0x19u:
      MIL::Text::Parser::TensorVal::ParseTokens<MIL::Fp8E5M2,MIL::Fp8E5M2>((uint64_t)this, v99, (unint64_t *)__p);
      MIL::IRTensorValueType::MakeFloat8E5M2Value((uint64_t)v23, (uint64_t)__p, a3);
LABEL_64:
      v38 = (void *)__p[0].__r_.__value_.__r.__words[0];
      if (!__p[0].__r_.__value_.__r.__words[0])
        goto LABEL_72;
      __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
LABEL_71:
      operator delete(v38);
LABEL_72:
      if (v91)
      {
        v92 = v91;
        operator delete(v91);
      }
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v97)
      {
        v98 = v97;
        operator delete(v97);
      }
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
      std::vector<MIL::Scanner::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
    default:
      v61 = __cxa_allocate_exception(0x48uLL);
      v62 = *((_QWORD *)this + 4);
      v63 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
      MIL::TextLocationFromScannerLocation(v62, v64, &v82);
      v76 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
      v65 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2);
      MIL::IRDataTypeToString(v65, &v84);
      v66 = std::string::insert(&v84, 0, "Tensor values with data type ");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = std::string::append(&v85, " are not supported by the tensor parser. The following are supported: ");
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      MIL::Util::ValidTensorDataTypesStr((uint64_t *)&v83, (MIL::Util *)v68);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v83;
      else
        v70 = (std::string *)v83.__r_.__value_.__r.__words[0];
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      else
        size = v83.__r_.__value_.__l.__size_;
      v72 = std::string::append(__p, (const std::string::value_type *)v70, size);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v75 = v72->__r_.__value_.__r.__words[2];
      v74 = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)v61, &v76, (uint64_t)&v74, 114);
  }
}

void sub_1E068915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28)
{
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;

  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  if (a27 < 0)
    operator delete(a22);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)&a28);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v30 - 256);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  if (v28)
    __cxa_free_exception(v29);
  v32 = *(_QWORD *)(v30 - 240);
  *(_QWORD *)(v30 - 240) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(void **)(v30 - 232);
  if (v33)
  {
    *(_QWORD *)(v30 - 224) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v30 - 208);
  if (v34)
  {
    *(_QWORD *)(v30 - 200) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v30 - 184);
  if (v35)
  {
    *(_QWORD *)(v30 - 176) = v35;
    operator delete(v35);
  }
  a28 = (void *)(v30 - 160);
  std::vector<MIL::Scanner::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

void sub_1E0689570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  int v28;
  void *v29;
  uint64_t v30;
  void *v32;
  void *v33;
  void *v34;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (v28)
    __cxa_free_exception(v29);
  __cxa_end_catch();
  v32 = *(void **)(v30 - 232);
  if (v32)
  {
    *(_QWORD *)(v30 - 224) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v30 - 208);
  if (v33)
  {
    *(_QWORD *)(v30 - 200) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v30 - 184);
  if (v34)
  {
    *(_QWORD *)(v30 - 176) = v34;
    operator delete(v34);
  }
  a28 = (void **)(v30 - 160);
  std::vector<MIL::Scanner::Token>::__destroy_vector::operator()[abi:ne180100](&a28);
  _Unwind_Resume(a1);
}

void sub_1E06895BC()
{
  JUMPOUT(0x1E0689610);
}

void sub_1E06895C4()
{
  JUMPOUT(0x1E0689620);
}

void sub_1E06895CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  void *v27;
  void *v28;
  void *v29;

  __cxa_end_catch();
  v27 = *(void **)(v25 - 232);
  if (v27)
  {
    *(_QWORD *)(v25 - 224) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v25 - 208);
  if (v28)
  {
    *(_QWORD *)(v25 - 200) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v25 - 184);
  if (v29)
  {
    *(_QWORD *)(v25 - 176) = v29;
    operator delete(v29);
  }
  a25 = (void **)(v25 - 160);
  std::vector<MIL::Scanner::Token>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::TensorVal::ParseTensor(MIL::IRTensorValueType const*)::$_0::operator()(unint64_t **a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v10;
  std::string __p;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      v4 = *v2;
      if (v15 >= 0)
        v5 = &v13;
      else
        v5 = v13;
      if (v15 >= 0)
        v6 = HIBYTE(v15);
      else
        v6 = v14;
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v5, v6);
      std::to_string(&__p, v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      MEMORY[0x1E0C02010](&v13, ", ");
      ++v2;
    }
    while (v2 != v3);
  }
  std::stringbuf::str();
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E0C022F8](&v19);
}

void sub_1E06897AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::Fp8E4M3FN,MIL::Fp8E4M3FN>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp8E4M3FN>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E0689934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::Fp8E5M2,MIL::Fp8E5M2>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp8E5M2>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E0689A9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::Bf16,MIL::Bf16>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  _WORD *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Bf16>(a1, v6);
      v9 = v8;
      v11 = *(_WORD **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(_WORD **)a3;
        v14 = (uint64_t)v11 - *(_QWORD *)a3;
        if (v14 <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v14 >> 1;
        v16 = v10 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a3 + 16, v18);
          v13 = *(_WORD **)a3;
          v11 = *(_WORD **)(a3 + 8);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[2 * v15];
        *(_WORD *)v20 = v9;
        v12 = v20 + 2;
        while (v11 != v13)
        {
          v21 = *--v11;
          *((_WORD *)v20 - 1) = v21;
          v20 -= 2;
        }
        *(_QWORD *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v19[2 * v18];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E0689BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  _WORD *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Fp16>(a1, v6);
      v9 = v8;
      v11 = *(_WORD **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(_WORD **)a3;
        v14 = (uint64_t)v11 - *(_QWORD *)a3;
        if (v14 <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v14 >> 1;
        v16 = v10 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a3 + 16, v18);
          v13 = *(_WORD **)a3;
          v11 = *(_WORD **)(a3 + 8);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[2 * v15];
        *(_WORD *)v20 = v9;
        v12 = v20 + 2;
        while (v11 != v13)
        {
          v21 = *--v11;
          *((_WORD *)v20 - 1) = v21;
          v20 -= 2;
        }
        *(_QWORD *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v19[2 * v18];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E0689D54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<float,float>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  int v20;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<float>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<float>(a1, v6);
      v9 = v8;
      v11 = *(float **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(float **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v17);
          v13 = *(float **)a3;
          v11 = *(float **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E0689EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<double,double>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<double>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<double>(a1, v6);
      v9 = v8;
      v11 = *(double **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(double **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v17);
          v13 = *(double **)a3;
          v11 = *(double **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (double *)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11-- - 1);
          *((_QWORD *)v19-- - 1) = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A014(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::Int4,MIL::Int4>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::Int4>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A17C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt6,MIL::UInt6>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt6>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A2E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt4,MIL::UInt4>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt4>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt3,MIL::UInt3>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt3>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A5B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt2,MIL::UInt2>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt2>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A71C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<MIL::UInt1,MIL::UInt1>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<MIL::UInt1>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<unsigned char,unsigned char>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<unsigned char>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068A9EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<unsigned short,unsigned short>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  _WORD *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<unsigned short>(a1, v6);
      v9 = v8;
      v11 = *(_WORD **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(_WORD **)a3;
        v14 = (uint64_t)v11 - *(_QWORD *)a3;
        if (v14 <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v14 >> 1;
        v16 = v10 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a3 + 16, v18);
          v13 = *(_WORD **)a3;
          v11 = *(_WORD **)(a3 + 8);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[2 * v15];
        *(_WORD *)v20 = v9;
        v12 = v20 + 2;
        while (v11 != v13)
        {
          v21 = *--v11;
          *((_WORD *)v20 - 1) = v21;
          v20 -= 2;
        }
        *(_QWORD *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v19[2 * v18];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068AB48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<unsigned int,unsigned int>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v12;
  std::vector<unsigned int>::pointer begin;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<unsigned int>(a1, v6);
      v9 = v8;
      end = a3->__end_;
      value = a3->__end_cap_.__value_;
      if (end >= value)
      {
        begin = a3->__begin_;
        v14 = end - a3->__begin_;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = (char *)value - (char *)begin;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a3->__end_cap_, v17);
          begin = a3->__begin_;
          end = a3->__end_;
        }
        else
        {
          v18 = 0;
        }
        v19 = (unsigned int *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (end != begin)
        {
          v20 = *--end;
          *--v19 = v20;
        }
        a3->__begin_ = v19;
        a3->__end_ = v12;
        a3->__end_cap_.__value_ = (unsigned int *)&v18[4 * v17];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v8;
        v12 = end + 1;
      }
      a3->__end_ = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068ACA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<unsigned long long,unsigned long long>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<unsigned long long>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<unsigned long long>(a1, v6);
      v9 = v8;
      v11 = *(unint64_t **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(unint64_t **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v17);
          v13 = *(unint64_t **)a3;
          v11 = *(unint64_t **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (unint64_t *)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068AE08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<signed char,signed char>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, unint64_t *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  char v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned char>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<signed char>(a1, v6);
      v9 = v8;
      v11 = (_BYTE *)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = &v11[-*a3];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*a3;
          v19 = v18;
        }
        *a3 = (unint64_t)v19;
        a3[1] = (unint64_t)v12;
        a3[2] = (unint64_t)&v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a3[1] = (unint64_t)v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068AF70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<short,short>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  _WORD *v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<short>(a1, v6);
      v9 = v8;
      v11 = *(_WORD **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(_WORD **)a3;
        v14 = (uint64_t)v11 - *(_QWORD *)a3;
        if (v14 <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v14 >> 1;
        v16 = v10 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a3 + 16, v18);
          v13 = *(_WORD **)a3;
          v11 = *(_WORD **)(a3 + 8);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[2 * v15];
        *(_WORD *)v20 = v9;
        v12 = v20 + 2;
        while (v11 != v13)
        {
          v21 = *--v11;
          *((_WORD *)v20 - 1) = v21;
          v20 -= 2;
        }
        *(_QWORD *)a3 = v20;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v19[2 * v18];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068B0CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<int,int>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v12;
  std::vector<unsigned int>::pointer begin;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int *v19;
  unsigned int v20;

  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<int>(a1, v6);
      v9 = v8;
      end = a3->__end_;
      value = a3->__end_cap_.__value_;
      if (end >= value)
      {
        begin = a3->__begin_;
        v14 = end - a3->__begin_;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = (char *)value - (char *)begin;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a3->__end_cap_, v17);
          begin = a3->__begin_;
          end = a3->__end_;
        }
        else
        {
          v18 = 0;
        }
        v19 = (unsigned int *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (end != begin)
        {
          v20 = *--end;
          *--v19 = v20;
        }
        a3->__begin_ = v19;
        a3->__end_ = v12;
        a3->__end_cap_.__value_ = (unsigned int *)&v18[4 * v17];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v8;
        v12 = end + 1;
      }
      a3->__end_ = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068B22C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<long long,long long>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<unsigned long long>::reserve((void **)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v8 = MIL::Text::Parser::TensorVal::ParseToken<long long>(a1, v6);
      v9 = v8;
      v11 = *(uint64_t **)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(uint64_t **)a3;
        v14 = ((uint64_t)v11 - *(_QWORD *)a3) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v17);
          v13 = *(uint64_t **)a3;
          v11 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068B38C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::TensorVal::ParseTokens<std::string,std::string>(uint64_t a1@<X0>, MIL::Scanner::Token **a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Scanner::Token *v6;
  MIL::Scanner::Token *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  std::string __p;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a3, (a2[1] - *a2) >> 5);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      MIL::Text::Parser::TensorVal::ParseToken<std::string>(v6, a1, &__p);
      v9 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(a3 + 16);
      if (v9 >= v8)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)a3) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a3) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v14)
          v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v14);
        else
          v15 = 0;
        v16 = v15 + v11;
        __v.__first_ = v15;
        __v.__begin_ = v16;
        __v.__end_cap_.__value_ = &v15[v14];
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v16->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v16 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v18 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v18;
        if (v19 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v9 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v9 = v10;
        *(_QWORD *)(a3 + 8) = v9 + 24;
      }
      v6 = (MIL::Scanner::Token *)((char *)v6 + 32);
    }
    while (v6 != v7);
  }
}

void sub_1E068B540(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, ...)
{
  va_list __pa;

  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

_QWORD *std::vector<MIL::Scanner::TokenType>::__init_with_size[abi:ne180100]<MIL::Scanner::TokenType*,MIL::Scanner::TokenType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E068B648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E068B808(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Scanner::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    MIL::Scanner::Token::Token((_OWORD *)(v6 - 32), v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<MIL::Scanner::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<MIL::Scanner::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(v4 - 32));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *MIL::PackSubByteVec@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    v4 = 0;
  else
    v4 = *a1;
  return MIL::PackSubByteVecImpl<MIL::Int4>(v4, v3, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    v4 = 0;
  else
    v4 = *a1;
  return MIL::PackSubByteVecImpl<MIL::UInt4>(v4, v3, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    v4 = 0;
  else
    v4 = *a1;
  return MIL::PackSubByteVecImpl<MIL::UInt2>(v4, v3, a2);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    v4 = 0;
  else
    v4 = *a1;
  return MIL::PackSubByteVecImpl<MIL::UInt1>(v4, v3, a2);
}

_QWORD *MIL::PackSubByteVecImpl<MIL::Int4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  char v8;
  unint64_t v9;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  result = std::vector<unsigned char>::vector(a3, vcvtpd_u64_f64((double)(unint64_t)(4 * a2) * 0.125));
  if (a2)
  {
    v7 = 0;
    do
    {
      v8 = *(_BYTE *)(a1 + v7);
      if ((v8 + 8) >= 0x10u)
      {
        v9 = v7;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v29, *(char *)(a1 + v9));
        v11 = std::string::insert(&v29, 0, "Value ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v30, " is outside allowed subbyte datatype range [");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, -8);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v28;
        else
          v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v17 = std::string::append(&v31, (const std::string::value_type *)v15, size);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v32, ", ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v27, 7);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v27;
        else
          v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          v22 = v27.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v34, "].");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v35);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
      }
      *(_BYTE *)(*a3 + (v7 >> 1)) |= (v8 & 0xF) << (4 * (v7 & 1));
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_1E068BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;

  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v49 & 1) == 0)
    {
LABEL_22:
      v52 = *(void **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)(v47 + 8) = v52;
        operator delete(v52);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_22;
  }
  __cxa_free_exception(v48);
  goto LABEL_22;
}

_QWORD *MIL::PackSubByteVec@<X0>(unsigned __int8 **a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    v4 = 0;
  else
    v4 = *a1;
  return MIL::PackSubByteVecForNonByteAligned<MIL::UInt6>(v4, v3, a2);
}

{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    v4 = 0;
  else
    v4 = *a1;
  return MIL::PackSubByteVecForNonByteAligned<MIL::UInt3>(v4, v3, a2);
}

_QWORD *MIL::PackSubByteVecImpl<MIL::UInt4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  result = std::vector<unsigned char>::vector(a3, vcvtpd_u64_f64((double)(unint64_t)(4 * a2) * 0.125));
  if (a2)
  {
    v7 = 0;
    do
    {
      v8 = *(unsigned __int8 *)(a1 + v7);
      if (v8 > 0xF)
      {
        v9 = v7;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v29, *(unsigned __int8 *)(a1 + v9));
        v11 = std::string::insert(&v29, 0, "Value ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v30, " is outside allowed subbyte datatype range [");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, 0);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v28;
        else
          v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v17 = std::string::append(&v31, (const std::string::value_type *)v15, size);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v32, ", ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v27, 15);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v27;
        else
          v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          v22 = v27.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v34, "].");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v35);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
      }
      *(_BYTE *)(*a3 + (v7 >> 1)) |= (_BYTE)v8 << (4 * (v7 & 1));
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_1E068BFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;

  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v49 & 1) == 0)
    {
LABEL_22:
      v52 = *(void **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)(v47 + 8) = v52;
        operator delete(v52);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_22;
  }
  __cxa_free_exception(v48);
  goto LABEL_22;
}

_QWORD *MIL::PackSubByteVecImpl<MIL::UInt2>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  result = std::vector<unsigned char>::vector(a3, vcvtpd_u64_f64((double)(unint64_t)(2 * a2) * 0.125));
  if (a2)
  {
    v7 = 0;
    do
    {
      v8 = *(unsigned __int8 *)(a1 + v7);
      if (v8 > 3)
      {
        v9 = v7;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v29, *(unsigned __int8 *)(a1 + v9));
        v11 = std::string::insert(&v29, 0, "Value ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v30, " is outside allowed subbyte datatype range [");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, 0);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v28;
        else
          v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v17 = std::string::append(&v31, (const std::string::value_type *)v15, size);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v32, ", ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v27, 3);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v27;
        else
          v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          v22 = v27.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v34, "].");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v35);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
      }
      *(_BYTE *)(*a3 + (v7 >> 2)) |= (_BYTE)v8 << (2 * (v7 & 3));
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_1E068C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;

  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v49 & 1) == 0)
    {
LABEL_22:
      v52 = *(void **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)(v47 + 8) = v52;
        operator delete(v52);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_22;
  }
  __cxa_free_exception(v48);
  goto LABEL_22;
}

_QWORD *MIL::PackSubByteVecImpl<MIL::UInt1>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  result = std::vector<unsigned char>::vector(a3, vcvtpd_u64_f64((double)a2 * 0.125));
  if (a2)
  {
    v7 = 0;
    do
    {
      v8 = *(unsigned __int8 *)(a1 + v7);
      if (v8 > 1)
      {
        v9 = v7;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v29, *(unsigned __int8 *)(a1 + v9));
        v11 = std::string::insert(&v29, 0, "Value ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v30, " is outside allowed subbyte datatype range [");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v28, 0);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v28;
        else
          v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          size = v28.__r_.__value_.__l.__size_;
        v17 = std::string::append(&v31, (const std::string::value_type *)v15, size);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        v19 = std::string::append(&v32, ", ");
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v27, 1);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v27;
        else
          v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          v22 = v27.__r_.__value_.__l.__size_;
        v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v34, "].");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v35);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
      }
      *(_BYTE *)(*a3 + (v7 >> 3)) |= (_BYTE)v8 << (v7 & 7);
      ++v7;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_1E068C69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;

  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v49 & 1) == 0)
    {
LABEL_22:
      v52 = *(void **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)(v47 + 8) = v52;
        operator delete(v52);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_22;
  }
  __cxa_free_exception(v48);
  goto LABEL_22;
}

uint64_t MIL::UnPackSubByteVecImpl<MIL::Int4>@<X0>(uint64_t *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[2];

  result = (uint64_t)std::vector<MIL::Int4>::vector(a3, a2);
  v7 = *a1;
  if (a1[1] - *a1 != vcvtpd_u64_f64((double)(4 * a2) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unpacking to sub-byte type vector has invalid number of elements. Sub-byte vector with NumElements requires exactly vec.size() bytes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (!a2)
    v7 = 0;
  v10[0] = v7;
  v10[1] = a2;
  if (a2)
  {
    v8 = 0;
    do
    {
      result = MIL::Util::Span<MIL::Int4,18446744073709551615ul>::ValueAt(v10, v8);
      *(_BYTE *)(*a3 + v8++) = result;
    }
    while (a2 != v8);
  }
  return result;
}

void sub_1E068C8AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::UnPackSubByteVecImpl<MIL::UInt6>@<X0>(uint64_t *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[2];

  result = (uint64_t)std::vector<MIL::UInt6>::vector(a3, a2);
  v7 = *a1;
  if (a1[1] - *a1 != vcvtpd_u64_f64((double)(6 * a2) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unpacking to sub-byte type vector has invalid number of elements. Sub-byte vector with NumElements requires exactly vec.size() bytes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (!a2)
    v7 = 0;
  v10[0] = v7;
  v10[1] = a2;
  if (a2)
  {
    v8 = 0;
    do
    {
      result = MIL::Util::Span<MIL::UInt6,18446744073709551615ul>::ValueAt(v10, v8);
      *(_BYTE *)(*a3 + v8++) = result;
    }
    while (a2 != v8);
  }
  return result;
}

void sub_1E068C9BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::UnPackSubByteVecImpl<MIL::UInt4>@<X0>(uint64_t *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[2];

  result = (uint64_t)std::vector<MIL::UInt4>::vector(a3, a2);
  v7 = *a1;
  if (a1[1] - *a1 != vcvtpd_u64_f64((double)(4 * a2) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unpacking to sub-byte type vector has invalid number of elements. Sub-byte vector with NumElements requires exactly vec.size() bytes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (!a2)
    v7 = 0;
  v10[0] = v7;
  v10[1] = a2;
  if (a2)
  {
    v8 = 0;
    do
    {
      result = MIL::Util::Span<MIL::UInt4,18446744073709551615ul>::ValueAt(v10, v8);
      *(_BYTE *)(*a3 + v8++) = result;
    }
    while (a2 != v8);
  }
  return result;
}

void sub_1E068CAC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::UnPackSubByteVecImpl<MIL::UInt3>@<X0>(uint64_t *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[2];

  result = (uint64_t)std::vector<MIL::UInt3>::vector(a3, a2);
  v7 = *a1;
  if (a1[1] - *a1 != vcvtpd_u64_f64((double)(3 * a2) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unpacking to sub-byte type vector has invalid number of elements. Sub-byte vector with NumElements requires exactly vec.size() bytes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (!a2)
    v7 = 0;
  v10[0] = v7;
  v10[1] = a2;
  if (a2)
  {
    v8 = 0;
    do
    {
      result = MIL::Util::Span<MIL::UInt3,18446744073709551615ul>::ValueAt(v10, v8);
      *(_BYTE *)(*a3 + v8++) = result;
    }
    while (a2 != v8);
  }
  return result;
}

void sub_1E068CBD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::UnPackSubByteVecImpl<MIL::UInt2>@<X0>(uint64_t *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[2];

  result = (uint64_t)std::vector<MIL::UInt2>::vector(a3, a2);
  v7 = *a1;
  if (a1[1] - *a1 != vcvtpd_u64_f64((double)(2 * a2) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unpacking to sub-byte type vector has invalid number of elements. Sub-byte vector with NumElements requires exactly vec.size() bytes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (!a2)
    v7 = 0;
  v10[0] = v7;
  v10[1] = a2;
  if (a2)
  {
    v8 = 0;
    do
    {
      result = MIL::Util::Span<MIL::UInt2,18446744073709551615ul>::ValueAt(v10, v8);
      *(_BYTE *)(*a3 + v8++) = result;
    }
    while (a2 != v8);
  }
  return result;
}

void sub_1E068CCE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::UnPackSubByteVecImpl<MIL::UInt1>@<X0>(uint64_t *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[2];

  result = (uint64_t)std::vector<MIL::UInt1>::vector(a3, a2);
  v7 = *a1;
  if (a1[1] - *a1 != vcvtpd_u64_f64((double)a2 * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unpacking to sub-byte type vector has invalid number of elements. Sub-byte vector with NumElements requires exactly vec.size() bytes.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (!a2)
    v7 = 0;
  v10[0] = v7;
  v10[1] = a2;
  if (a2)
  {
    v8 = 0;
    do
    {
      result = MIL::Util::Span<MIL::UInt1,18446744073709551615ul>::ValueAt(v10, v8);
      *(_BYTE *)(*a3 + v8++) = result;
    }
    while (a2 != v8);
  }
  return result;
}

void sub_1E068CDE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *MIL::Int4::Int4(_BYTE *this, char a2)
{
  std::runtime_error *exception;

  if ((a2 + 8) >= 0x10u)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Int4 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068CE8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Int4::FromInt(MIL::Int4 *this)
{
  unsigned __int8 v2;

  v2 = 0;
  MIL::Int4::SetInt(&v2, (int)this);
  return v2;
}

_BYTE *MIL::Int4::SetInt(_BYTE *this, int a2)
{
  std::runtime_error *exception;

  if ((a2 + 8) >= 0x10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Int4 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068CF28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Int4::GetInt(MIL::Int4 *this)
{
  return *(char *)this;
}

BOOL MIL::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

{
  return *a1 == *a2;
}

{
  return *a1 == *a2;
}

{
  return *a1 == *a2;
}

{
  return *a1 == *a2;
}

{
  return *a1 == *a2;
}

BOOL MIL::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 != *a2;
}

{
  return *a1 != *a2;
}

{
  return *a1 != *a2;
}

{
  return *a1 != *a2;
}

{
  return *a1 != *a2;
}

{
  return *a1 != *a2;
}

_BYTE *MIL::UInt6::UInt6(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 0x40)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt6 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068CFC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt6::FromInt(MIL::UInt6 *this)
{
  unsigned __int8 v2;

  v2 = 0;
  MIL::UInt6::SetInt(&v2, this);
  return v2;
}

_BYTE *MIL::UInt6::SetInt(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 0x40)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt6 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D058(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt6::GetInt(MIL::UInt6 *this)
{
  return *(unsigned __int8 *)this;
}

_BYTE *MIL::UInt4::UInt4(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 0x10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt4 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D0F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt4::FromInt(MIL::UInt4 *this)
{
  unsigned __int8 v2;

  v2 = 0;
  MIL::UInt4::SetInt(&v2, this);
  return v2;
}

_BYTE *MIL::UInt4::SetInt(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 0x10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt4 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D188(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt4::GetInt(MIL::UInt4 *this)
{
  return *(unsigned __int8 *)this;
}

_BYTE *MIL::UInt3::UInt3(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt3 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D220(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt3::FromInt(MIL::UInt3 *this)
{
  unsigned __int8 v2;

  v2 = 0;
  MIL::UInt3::SetInt(&v2, this);
  return v2;
}

_BYTE *MIL::UInt3::SetInt(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt3 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D2B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt3::GetInt(MIL::UInt3 *this)
{
  return *(unsigned __int8 *)this;
}

_BYTE *MIL::UInt2::UInt2(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt2 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt2::FromInt(MIL::UInt2 *this)
{
  unsigned __int8 v2;

  v2 = 0;
  MIL::UInt2::SetInt(&v2, this);
  return v2;
}

_BYTE *MIL::UInt2::SetInt(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt2 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D3E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt2::GetInt(MIL::UInt2 *this)
{
  return *(unsigned __int8 *)this;
}

_BYTE *MIL::UInt1::UInt1(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt1 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D480(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt1::FromInt(MIL::UInt1 *this)
{
  unsigned __int8 v2;

  v2 = 0;
  MIL::UInt1::SetInt(&v2, this);
  return v2;
}

_BYTE *MIL::UInt1::SetInt(_BYTE *this, unsigned int a2)
{
  std::runtime_error *exception;

  if (a2 >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "UInt1 value is out of range.");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  *this = a2;
  return this;
}

void sub_1E068D518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::UInt1::GetInt(MIL::UInt1 *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t std::hash<MIL::Int4>::operator()(uint64_t a1, char *a2)
{
  return *a2 + 128;
}

uint64_t std::hash<MIL::UInt6>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 + 128;
}

uint64_t std::hash<MIL::UInt4>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 + 128;
}

uint64_t std::hash<MIL::UInt3>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 + 128;
}

uint64_t std::hash<MIL::UInt2>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 + 128;
}

uint64_t std::hash<MIL::UInt1>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 + 128;
}

_QWORD *MIL::PackSubByteVecForNonByteAligned<MIL::UInt6>@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  unint64_t v7;
  unsigned int v8;
  std::runtime_error *exception;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;

  v3 = a2;
  v34.__r_.__value_.__s.__data_[0] = 0;
  result = std::vector<unsigned char>::vector(a3, vcvtpd_u64_f64((double)(unint64_t)(6 * a2) * 0.125), &v34);
  if (v3)
  {
    v7 = 0;
    do
    {
      v8 = *a1;
      if (v8 > 0x3F)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v28, *a1);
        v10 = std::string::insert(&v28, 0, "Value ");
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        v12 = std::string::append(&v29, " is outside allowed subbyte datatype range [");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v27, 0);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v27;
        else
          v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          size = v27.__r_.__value_.__l.__size_;
        v16 = std::string::append(&v30, (const std::string::value_type *)v14, size);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        v18 = std::string::append(&v31, ", ");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v26, 63);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v26;
        else
          v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        else
          v21 = v26.__r_.__value_.__l.__size_;
        v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v33, "].");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
      }
      *(_BYTE *)(*a3 + (v7 >> 3)) |= (_BYTE)v8 << (v7 & 6);
      if ((v7 & 6) > 2)
        *(_BYTE *)((v7 >> 3) + *a3 + 1) |= *a1 >> (8 - (v7 & 6));
      ++a1;
      v7 += 6;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_1E068D804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;

  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v49 & 1) == 0)
    {
LABEL_22:
      v52 = *(void **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)(v47 + 8) = v52;
        operator delete(v52);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_22;
  }
  __cxa_free_exception(v48);
  goto LABEL_22;
}

_QWORD *MIL::PackSubByteVecForNonByteAligned<MIL::UInt3>@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  unint64_t v7;
  unsigned int v8;
  std::runtime_error *exception;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;

  v3 = a2;
  v34.__r_.__value_.__s.__data_[0] = 0;
  result = std::vector<unsigned char>::vector(a3, vcvtpd_u64_f64((double)(unint64_t)(3 * a2) * 0.125), &v34);
  if (v3)
  {
    v7 = 0;
    do
    {
      v8 = *a1;
      if (v8 > 7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v28, *a1);
        v10 = std::string::insert(&v28, 0, "Value ");
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        v12 = std::string::append(&v29, " is outside allowed subbyte datatype range [");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v27, 0);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v27;
        else
          v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          size = v27.__r_.__value_.__l.__size_;
        v16 = std::string::append(&v30, (const std::string::value_type *)v14, size);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        v18 = std::string::append(&v31, ", ");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v26, 7);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v26;
        else
          v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        else
          v21 = v26.__r_.__value_.__l.__size_;
        v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v33, "].");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v34);
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
      }
      *(_BYTE *)(*a3 + (v7 >> 3)) |= (_BYTE)v8 << (v7 & 7);
      if ((v7 & 7) > 5)
        *(_BYTE *)((v7 >> 3) + *a3 + 1) |= *a1 >> (8 - (v7 & 7));
      ++a1;
      v7 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_1E068DB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;

  if (*(char *)(v50 - 57) < 0)
    operator delete(*(void **)(v50 - 80));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v49 & 1) == 0)
    {
LABEL_22:
      v52 = *(void **)v47;
      if (*(_QWORD *)v47)
      {
        *(_QWORD *)(v47 + 8) = v52;
        operator delete(v52);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_22;
  }
  __cxa_free_exception(v48);
  goto LABEL_22;
}

uint64_t MIL::Util::Span<MIL::Int4,18446744073709551615ul>::ValueAt(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  std::logic_error *exception;
  unsigned __int8 v5;

  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  v2 = ((15 << ((4 * a2) & 4)) & *(unsigned __int8 *)(*a1 + ((a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL))) >> ((4 * a2) & 4);
  if ((v2 & 8) != 0)
    LOBYTE(v2) = v2 | 0xF0;
  MIL::Int4::Int4(&v5, v2);
  return v5;
}

void sub_1E068DD64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::Int4>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E068DDCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<MIL::UInt6,18446744073709551615ul>::ValueAt(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int64x2_t v18;
  uint32x4_t v19;
  uint64x2_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int8x16_t v23;
  uint64x2_t v24;
  uint64x2_t v25;
  uint64x2_t v26;
  uint64x2_t v27;
  uint64x2_t v28;
  uint64x2_t v29;
  uint64x2_t v30;
  uint64x2_t v31;
  int8x16_t v32;
  std::logic_error *exception;
  unsigned __int8 v35;

  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  v2 = (6 * a2) & 6;
  v3 = (unsigned __int8 *)(*a1 + ((6 * a2) >> 3));
  v4 = ((63 << v2) & *v3) >> v2;
  if (v2 >= 3)
  {
    v5 = ((_BYTE)v2 + 13) & 0x10;
    v6 = (int32x4_t)xmmword_1E0B00290;
    v7 = (int32x4_t)xmmword_1E0B002A0;
    v8 = (int32x4_t)xmmword_1E0B002B0;
    v9 = (int32x4_t)xmmword_1E0B002C0;
    v10 = (int64x2_t)xmmword_1E0B002D0;
    v11 = (int64x2_t)xmmword_1E0B002E0;
    v12 = (int64x2_t)xmmword_1E0B002F0;
    v13 = (int64x2_t)xmmword_1E0B00300;
    v14 = (int64x2_t)xmmword_1E0B00310;
    v15 = (int64x2_t)xmmword_1E0B00320;
    v16 = (int64x2_t)xmmword_1E0B00330;
    v17 = 0uLL;
    v18 = (int64x2_t)xmmword_1E0B00340;
    v19.i64[0] = 0x100000001;
    v19.i64[1] = 0x100000001;
    v20 = (uint64x2_t)vdupq_n_s64(v2 - 3);
    v21.i64[0] = 0x1000000010;
    v21.i64[1] = 0x1000000010;
    v22 = vdupq_n_s64(0x10uLL);
    do
    {
      v23 = v17;
      v24 = (uint64x2_t)v10;
      v25 = (uint64x2_t)v11;
      v26 = (uint64x2_t)v12;
      v27 = (uint64x2_t)v13;
      v28 = (uint64x2_t)v14;
      v29 = (uint64x2_t)v15;
      v17 = vorrq_s8(v17, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vshlq_u32(v19, (uint32x4_t)v9), (int16x8_t)vshlq_u32(v19, (uint32x4_t)v8)), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_u32(v19, (uint32x4_t)v7), (int16x8_t)vshlq_u32(v19, (uint32x4_t)v6))));
      v30 = (uint64x2_t)v16;
      v15 = vaddq_s64(v15, v22);
      v31 = (uint64x2_t)v18;
      v16 = vaddq_s64(v16, v22);
      v18 = vaddq_s64(v18, v22);
      v14 = vaddq_s64(v14, v22);
      v13 = vaddq_s64(v13, v22);
      v12 = vaddq_s64(v12, v22);
      v11 = vaddq_s64(v11, v22);
      v10 = vaddq_s64(v10, v22);
      v9 = vaddq_s32(v9, v21);
      v8 = vaddq_s32(v8, v21);
      v7 = vaddq_s32(v7, v21);
      v6 = vaddq_s32(v6, v21);
      v5 -= 16;
    }
    while (v5);
    v32 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v31, v20), (int32x4_t)vcgtq_u64(v30, v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v29, v20), (int32x4_t)vcgtq_u64(v28, v20))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v27, v20), (int32x4_t)vcgtq_u64(v26, v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v25, v20), (int32x4_t)vcgtq_u64(v24, v20)))), v23, v17);
    *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    v4 |= ((v32.i32[0] | v32.i32[1] | ((unint64_t)(v32.i64[0] | HIDWORD(v32.i64[0])) >> 16) | ((v32.i32[0] | v32.i32[1] | ((unint64_t)(v32.i64[0] | HIDWORD(v32.i64[0])) >> 16)) >> 8)) & v3[1]) << (8 - v2);
  }
  MIL::UInt6::UInt6(&v35, v4);
  return v35;
}

void sub_1E068DFFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::UInt6>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E068E064(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<MIL::UInt4,18446744073709551615ul>::ValueAt(_QWORD *a1, unint64_t a2)
{
  std::logic_error *exception;
  unsigned __int8 v4;

  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  MIL::UInt4::UInt4(&v4, ((15 << ((4 * a2) & 4)) & *(unsigned __int8 *)(*a1 + ((a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL))) >> ((4 * a2) & 4));
  return v4;
}

void sub_1E068E10C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::UInt4>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E068E174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<MIL::UInt3,18446744073709551615ul>::ValueAt(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  int32x2_t v6;
  int8x8_t v7;
  uint64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int8x8_t v11;
  uint64x2_t v12;
  int8x8_t v13;
  std::logic_error *exception;
  unsigned __int8 v16;

  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  v2 = (3 * a2) & 7;
  v3 = (unsigned __int8 *)(*a1 + ((3 * a2) >> 3));
  v4 = ((7 << v2) & *v3) >> v2;
  if (v2 >= 6)
  {
    v5 = v2 - ((3 * (_BYTE)a2) & 1) - 4;
    v6 = (int32x2_t)0x100000000;
    v7 = 0;
    v8 = (uint64x2_t)vdupq_n_s64(v2 - 6);
    v9 = (int64x2_t)xmmword_1E0B00340;
    v10 = vdupq_n_s64(2uLL);
    do
    {
      v11 = v7;
      v12 = (uint64x2_t)v9;
      v7 = vorr_s8(v7, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v6));
      v9 = vaddq_s64(v9, v10);
      v6 = vadd_s32(v6, (int32x2_t)0x200000002);
      v5 -= 2;
    }
    while (v5);
    v13 = vbsl_s8((int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64(v12, v8)), v11, v7);
    v4 |= ((v13.i32[0] | v13.i32[1]) & v3[1]) << (8 - v2);
  }
  MIL::UInt3::UInt3(&v16, v4);
  return v16;
}

void sub_1E068E2AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::UInt3>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E068E314(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<MIL::UInt2,18446744073709551615ul>::ValueAt(_QWORD *a1, unint64_t a2)
{
  std::logic_error *exception;
  unsigned __int8 v4;

  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  MIL::UInt2::UInt2(&v4, ((3 << ((2 * a2) & 6)) & *(unsigned __int8 *)(*a1 + ((a2 >> 2) & 0x1FFFFFFFFFFFFFFFLL))) >> ((2 * a2) & 6));
  return v4;
}

void sub_1E068E3BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::UInt2>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E068E424(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<MIL::UInt1,18446744073709551615ul>::ValueAt(_QWORD *a1, unint64_t a2)
{
  std::logic_error *exception;
  unsigned __int8 v4;

  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  MIL::UInt1::UInt1(&v4, ((1 << (a2 & 7)) & *(unsigned __int8 *)(*a1 + (a2 >> 3))) >> (a2 & 7));
  return v4;
}

void sub_1E068E4C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::UInt1>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E068E530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 MIL::Transform::NewOperationOutput::NewOperationOutput(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Transform::NewOperationOutput::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Transform::NewOperationOutputList::NewOperationOutputList(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Transform::NewOperationOutputList::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *MIL::Transform::NewOperationOutputList::operator[]@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  return result;
}

uint64_t MIL::Transform::NewOperationOutputList::size(MIL::Transform::NewOperationOutputList *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t MIL::Transform::ArgumentDescription::operator=(uint64_t a1, uint64_t a2)
{
  MIL::Util::OpaqueStorage<32ul,8ul,MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl>::operator=(a1, a2);
  return a1;
}

{
  MIL::Util::OpaqueStorage<32ul,8ul,MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl>::operator=(a1, a2);
  return a1;
}

uint64_t MIL::Util::OpaqueStorage<32ul,8ul,MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EA99E790[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))off_1EA99E608[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EA99E7F8[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))off_1EA99E608[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

MIL::Transform::ArgumentDescription *MIL::Transform::ArgumentDescription::ArgumentDescription(MIL::Transform::ArgumentDescription *this, const MIL::Matching::ArgumentView *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  MIL::MatchingPrivate::MatchPrivate::GetIRArgumentFromArgumentView((uint64_t)a2, &v12);
  v3 = v12;
  v4 = v13;
  v12 = 0;
  v13 = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *((_DWORD *)this + 6) = 1;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return this;
}

MIL::Transform::ArgumentDescription *MIL::Transform::ArgumentDescription::ArgumentDescription(MIL::Transform::ArgumentDescription *this, const MIL::Matching::OutputView *a2)
{
  uint64_t Name;
  __int128 v4;
  std::__shared_weak_count_vtbl *v5;
  std::string __p;
  std::__shared_weak_count_vtbl *v8;

  Name = MIL::Matching::OutputView::GetName(a2);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v4 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  MIL::IRArgument::Make((uint64_t)&__p, (uint64_t *)&v8);
  v5 = v8;
  v8 = 0;
  if (v5)
    (*((void (**)(std::__shared_weak_count_vtbl *))v5->~__shared_weak_count + 1))(v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_1E068E8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::OpaqueStorage<32ul,8ul,MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl>::OpaqueStorage<std::in_place_type_t<`anonymous namespace'::Argument> const&,std::unique_ptr<MIL::IRArgument>>(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

__n128 MIL::Transform::ArgumentDescription::ArgumentDescription(MIL::Transform::ArgumentDescription *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_DWORD *)this + 6) = 2;
  return result;
}

{
  __n128 result;

  result = *a2;
  *(__n128 *)this = *a2;
  *((_DWORD *)this + 6) = 2;
  return result;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;
  std::__shared_weak_count_vtbl *v9;

  v8 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  MIL::IRArgument::Make(&v8, (uint64_t *)&v9);
  v3 = v9;
  v9 = 0;
  if (v3)
    (*((void (**)(std::__shared_weak_count_vtbl *))v3->~__shared_weak_count + 1))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl::SetString(a1, a2);
  return a1;
}

void sub_1E068EAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t this, int a2)
{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 9;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 9;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 10;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 10;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 11;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 11;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t this, uint64_t a2)
{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 12;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 12;
  *(_DWORD *)(this + 24) = 3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 17;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 17;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t this, unsigned int a2)
{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 14;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 14;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 15;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 15;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 16;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 16;
  *(_DWORD *)(this + 24) = 4;
  return this;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t result, __int16 a2)
{
  *(_WORD *)result = a2;
  *(_DWORD *)(result + 24) = 7;
  return result;
}

{
  *(_WORD *)result = a2;
  *(_DWORD *)(result + 24) = 7;
  return result;
}

{
  *(_WORD *)result = a2;
  *(_DWORD *)(result + 24) = 8;
  return result;
}

{
  *(_WORD *)result = a2;
  *(_DWORD *)(result + 24) = 8;
  return result;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t result, char a2)
{
  *(_BYTE *)result = a2;
  *(_DWORD *)(result + 24) = 9;
  return result;
}

{
  *(_BYTE *)result = a2;
  *(_DWORD *)(result + 24) = 9;
  return result;
}

{
  *(_BYTE *)result = a2;
  *(_DWORD *)(result + 24) = 10;
  return result;
}

{
  *(_BYTE *)result = a2;
  *(_DWORD *)(result + 24) = 10;
  return result;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_DWORD *)(this + 24) = 5;
  return this;
}

{
  *(float *)this = a2;
  *(_DWORD *)(this + 24) = 5;
  return this;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_DWORD *)(this + 24) = 6;
  return this;
}

{
  *(double *)this = a2;
  *(_DWORD *)(this + 24) = 6;
  return this;
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t this, char a2)
{
  *(_BYTE *)this = a2;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)this = a2;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

MIL::Transform::ArgumentDescription *MIL::Transform::ArgumentDescription::ArgumentDescription(MIL::Transform::ArgumentDescription *this, const char *__s)
{
  size_t v4;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = strlen(__s);
  MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl::SetString((uint64_t)this, __s, v4);
  return this;
}

void sub_1E068EDB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl::SetString(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  void *__p[2];
  unint64_t v8;

  if (a3 > 0x17)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    __p[1] = (void *)a3;
    v8 = ((a3 | 7) + 1) | 0x8000000000000000;
    __p[0] = operator new((a3 | 7) + 1);
    memmove(__p[0], a2, a3);
    *((_BYTE *)__p[0] + a3) = 0;
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v6 != -1)
      ((void (*)(void **, uint64_t))off_1EA99E608[v6])(__p, a1);
    *(_DWORD *)(a1 + 24) = -1;
    *(_DWORD *)(a1 + 24) = 11;
  }
}

void sub_1E068EEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Transform::ArgumentDescription::ArgumentDescription(uint64_t a1, _QWORD *a2)
{
  size_t v3;
  size_t v4;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v4 = v3;
  }
  MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl::SetString(a1, a2, v4);
  return a1;
}

void sub_1E068EF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1E068EF60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

_BYTE *MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl::SetString(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  const void *v7;
  size_t v8;
  _BYTE *result;
  char v10;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 > 0x17)
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v10, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const void *)a2;
  else
    v7 = *(const void **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = 11;
  return result;
}

void MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl::CreateIRArgument(unsigned __int8 *a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  _anonymous_namespace_ *Scalar;
  __int128 *v10;
  __int128 v11;
  _anonymous_namespace_ *v12;
  _QWORD *v13;
  uint64_t v14;
  _anonymous_namespace_ *v16;
  std::string::size_type *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t **v32;
  char v33;
  char v34;
  char v35;
  char v36;
  _anonymous_namespace_ *v37;
  const MIL::IRTensorValueType *v38;
  _anonymous_namespace_ *v39;
  uint64_t **v40;
  char v41;
  char v42;
  char v43;
  _anonymous_namespace_ *v44;
  const MIL::IRTensorValueType *v45;
  _anonymous_namespace_ *v46;
  MIL::Builder::OperationBuilder **v47;
  uint64_t Operator;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string::size_type v59;
  MIL::IRTensorValueType *v60;
  _QWORD *v61;
  std::string::size_type v62;
  MIL::IRTensorValueType *v63;
  _QWORD *v64;
  std::string::size_type v65;
  MIL::IRTensorValueType *v66;
  _QWORD *v67;
  std::string::size_type v68;
  MIL::IRTensorValueType *v69;
  _QWORD *v70;
  std::string::size_type v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  MIL::IRTensorValueType *v75;
  _QWORD *v76;
  std::string::size_type v77;
  MIL::IRTensorValueType *v78;
  _QWORD *v79;
  std::string::size_type v80;
  MIL::IRTensorValueType *v81;
  _QWORD *v82;
  std::string::size_type v83;
  MIL::IRTensorValueType *v84;
  _QWORD *v85;
  std::string::size_type v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *size;
  unint64_t *v91;
  unint64_t v92;
  MIL::IRTensorValueType *v93;
  _QWORD *v94;
  uint64_t v95;
  MIL::IRTypedArgument *OutputType;
  uint64_t OutputName;
  __int128 v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t *v122;
  std::string::size_type v123;
  unint64_t *p_shared_owners;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::logic_error *exception;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  unint64_t *v136;
  uint64_t v137;
  unint64_t *v138;
  std::string::size_type v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  std::logic_error *v144;
  std::logic_error *v145;
  const MIL::IRTensorValueType *v146;
  const MIL::IRTensorValueType *v147;
  int v148;
  int v149;
  char v150;
  __int128 v151;
  std::string::size_type v152;
  std::string v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;

  v8 = *((_DWORD *)a1 + 6);
  switch(v8)
  {
    case 12:
      Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a2, 3);
      v10 = *(__int128 **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v153.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v11;
      }
      MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)&v153, &v151);
      *(_QWORD *)&v156 = v151;
      if ((_QWORD)v151)
      {
        v19 = (_QWORD *)operator new();
        v20 = v151;
        *v19 = &unk_1EA992A68;
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = v20;
      }
      else
      {
        v19 = 0;
      }
      *((_QWORD *)&v156 + 1) = v19;
      *(_QWORD *)&v151 = 0;
      MIL::IRArgument::Make(&v156, (uint64_t *)&v154);
      v21 = v154;
      *(_QWORD *)a5 = v154;
      if (v21)
      {
        v22 = (_QWORD *)operator new();
        v23 = v154;
        *v22 = &unk_1EA9942C8;
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = v23;
      }
      else
      {
        v22 = 0;
      }
      *(_BYTE *)(a5 + 40) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 8) = v22;
      *(_BYTE *)(a5 + 32) = 0;
      *(_QWORD *)&v154 = 0;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
      if (*((_QWORD *)&v156 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        goto LABEL_29;
      }
      goto LABEL_31;
    case 11:
      v12 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a2, 3);
      std::string::__init_with_size[abi:ne180100]<char *,char *>(&v153, (char *)a1 + 1, (char *)&a1[*a1 + 1], *a1);
      MIL::IRTensorValueType::MakeStringValue(v12, (const MIL::IRTensorValueType *)&v153, &v151);
      *(_QWORD *)&v156 = v151;
      if ((_QWORD)v151)
      {
        v13 = (_QWORD *)operator new();
        v14 = v151;
        *v13 = &unk_1EA992A68;
        v13[1] = 0;
        v13[2] = 0;
        v13[3] = v14;
      }
      else
      {
        v13 = 0;
      }
      *((_QWORD *)&v156 + 1) = v13;
      *(_QWORD *)&v151 = 0;
      MIL::IRArgument::Make(&v156, (uint64_t *)&v154);
      v27 = v154;
      *(_QWORD *)a5 = v154;
      if (v27)
      {
        v28 = (_QWORD *)operator new();
        v29 = v154;
        *v28 = &unk_1EA9942C8;
        v28[1] = 0;
        v28[2] = 0;
        v28[3] = v29;
      }
      else
      {
        v28 = 0;
      }
      *(_BYTE *)(a5 + 40) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_QWORD *)(a5 + 8) = v28;
      *(_BYTE *)(a5 + 32) = 0;
      *(_QWORD *)&v154 = 0;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
      if (*((_QWORD *)&v156 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v26 = __ldaxr(v30);
        while (__stlxr(v26 - 1, v30));
LABEL_29:
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
LABEL_31:
      v31 = v151;
      *(_QWORD *)&v151 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      return;
    case 10:
      v16 = (_anonymous_namespace_ *)*a1;
      v17 = (std::string::size_type *)a5;
      v18 = 25;
LABEL_43:
LABEL_44:
      *(_BYTE *)(a5 + 40) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)(a5 + 24) = 0;
      *(_BYTE *)(a5 + 32) = 0;
      return;
    case 9:
      v16 = (_anonymous_namespace_ *)*a1;
      v17 = (std::string::size_type *)a5;
      v18 = 24;
      goto LABEL_43;
    case 8:
      v16 = (_anonymous_namespace_ *)*(unsigned __int16 *)a1;
      v17 = (std::string::size_type *)a5;
      v18 = 4;
      goto LABEL_43;
    case 7:
      v16 = (_anonymous_namespace_ *)*(unsigned __int16 *)a1;
      v17 = (std::string::size_type *)a5;
      v18 = 7;
      goto LABEL_43;
    case 6:
      v16 = *(_anonymous_namespace_ **)a1;
      v17 = (std::string::size_type *)a5;
      v18 = 6;
      goto LABEL_43;
    case 5:
      v16 = (_anonymous_namespace_ *)*(unsigned int *)a1;
      v17 = (std::string::size_type *)a5;
      v18 = 5;
      goto LABEL_43;
    case 4:
      v147 = *(const MIL::IRTensorValueType **)a1;
      v149 = *((_DWORD *)a1 + 2);
      v32 = *(uint64_t ***)(a3 + 16);
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(*v32[2] + 24))(v32[2]);
          if (v37)
          {
            v39 = v37;
            {
              switch((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v39 + 88))(v39))
              {
                case 0xEu:
                  goto LABEL_54;
                case 0xFu:
                  v34 = 1;
                  break;
                case 0x10u:
                  v35 = 1;
                  break;
                case 0x11u:
                  v36 = 1;
                  break;
                case 0x12u:
                  v36 = 1;
                  v35 = 1;
                  v34 = 1;
LABEL_54:
                  v33 = 1;
                  break;
                default:
                  break;
              }
            }
          }
          v32 = (uint64_t **)*v32;
        }
        while (v32);
      }
      else
      {
        v36 = 0;
        v35 = 0;
        v34 = 0;
        v33 = 0;
      }
      switch(v149)
      {
        case 14:
          if ((v33 & 1) == 0)
            goto LABEL_97;
          v60 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 14);
          MIL::IRTensorValueType::MakeUInt8Value(v60, (const MIL::IRTensorValueType *)v147, &v152);
          v153.__r_.__value_.__r.__words[0] = v152;
          if (v152)
          {
            v61 = (_QWORD *)operator new();
            v62 = v152;
            *v61 = &unk_1EA992A68;
            v61[1] = 0;
            v61[2] = 0;
            v61[3] = v62;
          }
          else
          {
            v61 = 0;
          }
          v153.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
          v152 = 0;
          MIL::IRArgument::Make((__int128 *)&v153, &v155);
          v87 = v155;
          if (v155)
          {
            v88 = (std::__shared_weak_count *)operator new();
            v118 = v155;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v88->__shared_owners_ = 0;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
          }
          else
          {
            v88 = 0;
          }
          v155 = 0;
          size = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
          if (!v153.__r_.__value_.__l.__size_)
            goto LABEL_190;
          v122 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v92 = __ldaxr(v122);
          while (__stlxr(v92 - 1, v122));
          goto LABEL_188;
        case 15:
LABEL_97:
          if ((v34 & 1) == 0)
            goto LABEL_100;
          v63 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 15);
          MIL::IRTensorValueType::MakeUInt16Value(v63, (const MIL::IRTensorValueType *)(unsigned __int16)v147, &v152);
          *(_QWORD *)&v156 = v152;
          if (v152)
          {
            v64 = (_QWORD *)operator new();
            v65 = v152;
            *v64 = &unk_1EA992A68;
            v64[1] = 0;
            v64[2] = 0;
            v64[3] = v65;
          }
          else
          {
            v64 = 0;
          }
          *((_QWORD *)&v156 + 1) = v64;
          v152 = 0;
          MIL::IRArgument::Make(&v156, &v155);
          v87 = v155;
          if (v155)
          {
            v88 = (std::__shared_weak_count *)operator new();
            v116 = v155;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v88->__shared_owners_ = 0;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = (std::__shared_weak_count_vtbl *)v116;
          }
          else
          {
            v88 = 0;
          }
          v155 = 0;
          size = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
          if (!*((_QWORD *)&v156 + 1))
            goto LABEL_190;
          v117 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v92 = __ldaxr(v117);
          while (__stlxr(v92 - 1, v117));
          goto LABEL_188;
        case 16:
LABEL_100:
          if ((v35 & 1) == 0)
            goto LABEL_103;
          v66 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 16);
          MIL::IRTensorValueType::MakeUInt32Value(v66, v147, &v152);
          *(_QWORD *)&v154 = v152;
          if (v152)
          {
            v67 = (_QWORD *)operator new();
            v68 = v152;
            *v67 = &unk_1EA992A68;
            v67[1] = 0;
            v67[2] = 0;
            v67[3] = v68;
          }
          else
          {
            v67 = 0;
          }
          *((_QWORD *)&v154 + 1) = v67;
          v152 = 0;
          MIL::IRArgument::Make(&v154, &v155);
          v87 = v155;
          if (v155)
          {
            v88 = (std::__shared_weak_count *)operator new();
            v114 = v155;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v88->__shared_owners_ = 0;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
          }
          else
          {
            v88 = 0;
          }
          v155 = 0;
          size = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
          if (!*((_QWORD *)&v154 + 1))
            goto LABEL_190;
          v115 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
          do
            v92 = __ldaxr(v115);
          while (__stlxr(v92 - 1, v115));
          goto LABEL_188;
        case 17:
LABEL_103:
          if ((v36 & 1) == 0)
            goto LABEL_203;
          v69 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 17);
          MIL::IRTensorValueType::MakeUInt64Value(v69, v147, &v152);
          *(_QWORD *)&v151 = v152;
          if (v152)
          {
            v70 = (_QWORD *)operator new();
            v71 = v152;
            *v70 = &unk_1EA992A68;
            v70[1] = 0;
            v70[2] = 0;
            v70[3] = v71;
          }
          else
          {
            v70 = 0;
          }
          *((_QWORD *)&v151 + 1) = v70;
          v152 = 0;
          MIL::IRArgument::Make(&v151, &v155);
          v87 = v155;
          if (v155)
          {
            v88 = (std::__shared_weak_count *)operator new();
            v89 = v155;
            v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v88->__shared_owners_ = 0;
            v88->__shared_weak_owners_ = 0;
            v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
          }
          else
          {
            v88 = 0;
          }
          v155 = 0;
          size = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (!*((_QWORD *)&v151 + 1))
            goto LABEL_190;
          v91 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
LABEL_188:
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
LABEL_190:
          v123 = v152;
          v152 = 0;
          if (v123)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v123 + 8))(v123);
          if (v87)
          {
            *(_QWORD *)a5 = v87;
            *(_QWORD *)(a5 + 8) = v88;
            if (v88)
            {
              p_shared_owners = (unint64_t *)&v88->__shared_owners_;
              do
                v125 = __ldxr(p_shared_owners);
              while (__stxr(v125 + 1, p_shared_owners));
            }
            *(_BYTE *)(a5 + 40) = 0;
            *(_QWORD *)(a5 + 16) = 0;
            *(_QWORD *)(a5 + 24) = 0;
            *(_BYTE *)(a5 + 32) = 0;
          }
          if (v88)
          {
            v126 = (unint64_t *)&v88->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          if (!v87)
          {
LABEL_203:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, &v153);
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          return;
        default:
          goto LABEL_252;
      }
      return;
    case 3:
      v146 = *(const MIL::IRTensorValueType **)a1;
      v148 = *((_DWORD *)a1 + 2);
      v40 = *(uint64_t ***)(a3 + 16);
      if (v40)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v150 = 0;
        do
        {
          v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(*v40[2] + 24))(v40[2]);
          if (v44)
          {
            v46 = v44;
            {
              switch((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)v46 + 88))(v46))
              {
                case 9u:
                  goto LABEL_69;
                case 0xAu:
                  v42 = 1;
                  break;
                case 0xBu:
                  v43 = 1;
                  break;
                case 0xCu:
                  v150 = 1;
                  break;
                case 0x12u:
                  v150 = 1;
                  v43 = 1;
                  v42 = 1;
LABEL_69:
                  v41 = 1;
                  break;
                default:
                  break;
              }
            }
          }
          v40 = (uint64_t **)*v40;
        }
        while (v40);
      }
      else
      {
        v150 = 0;
        v43 = 0;
        v42 = 0;
        v41 = 0;
      }
      switch(v148)
      {
        case 9:
          if ((v41 & 1) == 0)
            goto LABEL_116;
          v75 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 9);
          MIL::IRTensorValueType::MakeInt8Value(v75, (const MIL::IRTensorValueType *)(char)v146, &v152);
          v153.__r_.__value_.__r.__words[0] = v152;
          if (v152)
          {
            v76 = (_QWORD *)operator new();
            v77 = v152;
            *v76 = &unk_1EA992A68;
            v76[1] = 0;
            v76[2] = 0;
            v76[3] = v77;
          }
          else
          {
            v76 = 0;
          }
          v153.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
          v152 = 0;
          MIL::IRArgument::Make((__int128 *)&v153, &v155);
          v108 = v155;
          if (v155)
          {
            v109 = (std::__shared_weak_count *)operator new();
            v137 = v155;
            v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v109->__shared_owners_ = 0;
            v109->__shared_weak_owners_ = 0;
            v109[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
          }
          else
          {
            v109 = 0;
          }
          v155 = 0;
          v111 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
          if (!v153.__r_.__value_.__l.__size_)
            goto LABEL_237;
          v138 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v113 = __ldaxr(v138);
          while (__stlxr(v113 - 1, v138));
          goto LABEL_235;
        case 10:
LABEL_116:
          if ((v42 & 1) == 0)
            goto LABEL_119;
          v78 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 10);
          MIL::IRTensorValueType::MakeInt16Value(v78, (const MIL::IRTensorValueType *)(__int16)v146, &v152);
          *(_QWORD *)&v156 = v152;
          if (v152)
          {
            v79 = (_QWORD *)operator new();
            v80 = v152;
            *v79 = &unk_1EA992A68;
            v79[1] = 0;
            v79[2] = 0;
            v79[3] = v80;
          }
          else
          {
            v79 = 0;
          }
          *((_QWORD *)&v156 + 1) = v79;
          v152 = 0;
          MIL::IRArgument::Make(&v156, &v155);
          v108 = v155;
          if (v155)
          {
            v109 = (std::__shared_weak_count *)operator new();
            v135 = v155;
            v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v109->__shared_owners_ = 0;
            v109->__shared_weak_owners_ = 0;
            v109[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
          }
          else
          {
            v109 = 0;
          }
          v155 = 0;
          v111 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
          if (!*((_QWORD *)&v156 + 1))
            goto LABEL_237;
          v136 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v113 = __ldaxr(v136);
          while (__stlxr(v113 - 1, v136));
          goto LABEL_235;
        case 11:
LABEL_119:
          if ((v43 & 1) == 0)
            goto LABEL_122;
          v81 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 11);
          MIL::IRTensorValueType::MakeInt32Value(v81, v146, &v152);
          *(_QWORD *)&v154 = v152;
          if (v152)
          {
            v82 = (_QWORD *)operator new();
            v83 = v152;
            *v82 = &unk_1EA992A68;
            v82[1] = 0;
            v82[2] = 0;
            v82[3] = v83;
          }
          else
          {
            v82 = 0;
          }
          *((_QWORD *)&v154 + 1) = v82;
          v152 = 0;
          MIL::IRArgument::Make(&v154, &v155);
          v108 = v155;
          if (v155)
          {
            v109 = (std::__shared_weak_count *)operator new();
            v133 = v155;
            v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v109->__shared_owners_ = 0;
            v109->__shared_weak_owners_ = 0;
            v109[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
          }
          else
          {
            v109 = 0;
          }
          v155 = 0;
          v111 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
          if (!*((_QWORD *)&v154 + 1))
            goto LABEL_237;
          v134 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
          do
            v113 = __ldaxr(v134);
          while (__stlxr(v113 - 1, v134));
          goto LABEL_235;
        case 12:
LABEL_122:
          if ((v150 & 1) == 0)
            goto LABEL_250;
          v84 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 12);
          MIL::IRTensorValueType::MakeInt64Value(v84, v146, &v152);
          *(_QWORD *)&v151 = v152;
          if (v152)
          {
            v85 = (_QWORD *)operator new();
            v86 = v152;
            *v85 = &unk_1EA992A68;
            v85[1] = 0;
            v85[2] = 0;
            v85[3] = v86;
          }
          else
          {
            v85 = 0;
          }
          *((_QWORD *)&v151 + 1) = v85;
          v152 = 0;
          MIL::IRArgument::Make(&v151, &v155);
          v108 = v155;
          if (v155)
          {
            v109 = (std::__shared_weak_count *)operator new();
            v110 = v155;
            v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9942C8;
            v109->__shared_owners_ = 0;
            v109->__shared_weak_owners_ = 0;
            v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
          }
          else
          {
            v109 = 0;
          }
          v155 = 0;
          v111 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (!*((_QWORD *)&v151 + 1))
            goto LABEL_237;
          v112 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
LABEL_235:
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
LABEL_237:
          v139 = v152;
          v152 = 0;
          if (v139)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v139 + 8))(v139);
          if (v108)
          {
            *(_QWORD *)a5 = v108;
            *(_QWORD *)(a5 + 8) = v109;
            if (v109)
            {
              v140 = (unint64_t *)&v109->__shared_owners_;
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            *(_BYTE *)(a5 + 40) = 0;
            *(_QWORD *)(a5 + 16) = 0;
            *(_QWORD *)(a5 + 24) = 0;
            *(_BYTE *)(a5 + 32) = 0;
          }
          if (v109)
          {
            v142 = (unint64_t *)&v109->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          if (!v108)
          {
LABEL_250:
            v144 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v144, &v153);
            v144->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v144, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          return;
        default:
LABEL_252:
          v145 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v145, "Unexpected type");
          goto LABEL_254;
      }
      return;
    case 2:
      if (*(_QWORD *)a1 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 4))
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v47 = (MIL::Builder::OperationBuilder **)(*a4 + 16 * *(_QWORD *)a1);
      v156 = 0uLL;
      Operator = MIL::Builder::OperationBuilder::GetOperator(*v47);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Operator + 104))(Operator))
      {
        MIL::Builder::OperationBuilder::CreateOperation((const void ****)*v47, (_anonymous_namespace_::IROperationImpl **)&v151);
        v49 = MIL::Builder::OperationBuilder::GetOperator(*v47);
        (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v49 + 112))(&v153, v49, v151);
        v154 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v50 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        MIL::IRTypedArgument::Make((uint64_t *)&v154, &v155);
        std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(&v156, &v155);
        v52 = v155;
        v155 = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
        if (*((_QWORD *)&v154 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
        if (v153.__r_.__value_.__l.__size_)
        {
          v57 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v151;
        *(_QWORD *)&v151 = 0;
        if (!v59)
          goto LABEL_138;
      }
      else
      {
        OutputType = (MIL::IRTypedArgument *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*v47, *((_QWORD *)a1 + 1));
        MIL::IRTypedArgument::Make(OutputType, &v153);
        std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(&v156, (uint64_t *)&v153);
        v59 = v153.__r_.__value_.__r.__words[0];
        v153.__r_.__value_.__r.__words[0] = 0;
        if (!v59)
        {
LABEL_138:
          OutputName = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*v47, *((_QWORD *)a1 + 1));
          if (*(char *)(OutputName + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
          }
          else
          {
            v98 = *(_OWORD *)OutputName;
            v153.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
            *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v98;
          }
          MIL::IRArgument::Make((uint64_t)&v153, (uint64_t *)&v151);
          v99 = v151;
          *(_QWORD *)a5 = v151;
          if (v99)
          {
            v100 = (_QWORD *)operator new();
            v101 = v151;
            *v100 = &unk_1EA9942C8;
            v100[1] = 0;
            v100[2] = 0;
            v100[3] = v101;
          }
          else
          {
            v100 = 0;
          }
          v102 = v156;
          *(_QWORD *)(a5 + 8) = v100;
          *(_OWORD *)(a5 + 16) = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v103 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v104 = __ldxr(v103);
            while (__stxr(v104 + 1, v103));
          }
          *(_QWORD *)(a5 + 32) = *(_QWORD *)a1;
          *(_BYTE *)(a5 + 40) = 1;
          *(_QWORD *)&v151 = 0;
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          v105 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
          if (*((_QWORD *)&v156 + 1))
          {
            v106 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          return;
        }
      }
      (*(void (**)(std::string::size_type))(*(_QWORD *)v59 + 8))(v59);
      goto LABEL_138;
    case 1:
      v72 = *((_QWORD *)a1 + 1);
      *(_QWORD *)a5 = *(_QWORD *)a1;
      *(_QWORD *)(a5 + 8) = v72;
      if (v72)
      {
        v73 = (unint64_t *)(v72 + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      goto LABEL_44;
  }
  if (v8)
  {
    v145 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v145, "Trying to visit a std::variant that is in an invalid state");
LABEL_254:
    __cxa_throw(v145, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v93 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a2, 2);
  MIL::IRTensorValueType::MakeBoolValue(v93, (const MIL::IRTensorValueType *)*a1, &v154);
  v153.__r_.__value_.__r.__words[0] = v154;
  if ((_QWORD)v154)
  {
    v94 = (_QWORD *)operator new();
    v95 = v154;
    *v94 = &unk_1EA992A68;
    v94[1] = 0;
    v94[2] = 0;
    v94[3] = v95;
  }
  else
  {
    v94 = 0;
  }
  v153.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
  *(_QWORD *)&v154 = 0;
  MIL::IRArgument::Make((__int128 *)&v153, (uint64_t *)&v156);
  v119 = v156;
  *(_QWORD *)a5 = v156;
  if (v119)
  {
    v120 = (_QWORD *)operator new();
    v121 = v156;
    *v120 = &unk_1EA9942C8;
    v120[1] = 0;
    v120[2] = 0;
    v120[3] = v121;
  }
  else
  {
    v120 = 0;
  }
  *(_BYTE *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 8) = v120;
  *(_BYTE *)(a5 + 32) = 0;
  *(_QWORD *)&v156 = 0;
  v129 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
  if (v153.__r_.__value_.__l.__size_)
  {
    v130 = (unint64_t *)(v153.__r_.__value_.__l.__size_ + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v154;
  *(_QWORD *)&v154 = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
}

void sub_1E0690280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  if (a16)
  {
    p_shared_owners = (unint64_t *)&a16->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = this;
  a3[1] = a2;
  return this;
}

uint64_t std::variant<`anonymous namespace'::BooleanScalar,`anonymous namespace'::Argument,`anonymous namespace'::FromNewOperationOutput,`anonymous namespace'::SignedIntegerScalar,`anonymous namespace'::UnsignedIntegerScalar,`anonymous namespace'::FloatScalar<float>,`anonymous namespace'::FloatScalar<double>,`anonymous namespace'::FloatScalar<MIL::Bf16>,`anonymous namespace'::FloatScalar<MIL::Fp16>,`anonymous namespace'::FloatScalar<MIL::Fp8E4M3FN>,`anonymous namespace'::FloatScalar<MIL::Fp8E5M2>,`anonymous namespace'::SmallStringConstant,`anonymous namespace'::LargeStringConstant>::emplace[abi:ne180100]<`anonymous namespace'::LargeStringConstant,std::string,12ul,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E608[v4])(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  v5 = (char *)operator new(0x30uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_1EA99E680;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v5 + 5) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = 12;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILST_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILST_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
}

_BYTE *`anonymous namespace'::SmallStringConstant::SmallStringConstant(_BYTE *a1, const void *a2, size_t a3)
{
  std::logic_error *exception;

  *a1 = a3;
  if (a3 >= 0x18)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "String is too long");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  memcpy(a1 + 1, a2, a3);
  return a1;
}

void sub_1E069093C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99E680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99E680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

_QWORD *`anonymous namespace'::CreateIRArgumentFromFloatScalar@<X0>(_anonymous_namespace_ *CanTakeScalar@<X0>, int a2@<W1>, void (***a3)(MIL::MILContextImpl *__hidden this)@<X2>, uint64_t a4@<X3>, std::string::size_type *a5@<X8>)
{
  uint64_t **v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  const MIL::IRTensorValueType *v13;
  _anonymous_namespace_ *v14;
  float Float;
  std::string::size_type v16;
  std::string::size_type *v17;
  _anonymous_namespace_ *v18;
  _QWORD *v19;
  std::string::size_type v20;
  double v21;
  float v22;
  std::string::size_type v23;
  _anonymous_namespace_ *v24;
  _QWORD *v25;
  std::string::size_type v26;
  _anonymous_namespace_ *Scalar;
  _QWORD *v28;
  std::string::size_type v29;
  MIL::IRTensorValueType *v30;
  const MIL::IRTensorValueType *v31;
  _QWORD *v32;
  std::string::size_type v33;
  float v34;
  unsigned __int16 v35;
  std::string::size_type v36;
  std::string::size_type v37;
  _QWORD *result;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string::size_type v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  std::__shared_weak_count *size;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::string::size_type v58;
  uint64_t v59;
  std::logic_error *exception;
  std::logic_error *v61;
  double v64;
  std::string::size_type v66;
  std::string v67;
  std::string::size_type v68;

  v64 = *(double *)&CanTakeScalar;
  v6 = *(uint64_t ***)(a4 + 16);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      CanTakeScalar = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(*v6[2] + 24))(v6[2]);
      if (CanTakeScalar)
      {
        v14 = CanTakeScalar;
        if ((_DWORD)CanTakeScalar)
        {
          CanTakeScalar = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v14 + 88))(v14);
          if ((int)CanTakeScalar > 17)
          {
            switch((_DWORD)CanTakeScalar)
            {
              case 0x12:
                v12 = 1;
                v11 = 1;
                v10 = 1;
                v9 = 1;
                v8 = 1;
LABEL_13:
                v7 = 1;
                break;
              case 0x18:
                v11 = 1;
                break;
              case 0x19:
                v12 = 1;
                break;
            }
          }
          else
          {
            switch((int)CanTakeScalar)
            {
              case 4:
                v8 = 1;
                break;
              case 5:
                v9 = 1;
                break;
              case 6:
                v10 = 1;
                break;
              case 7:
                goto LABEL_13;
              default:
                break;
            }
          }
        }
      }
      v6 = (uint64_t **)*v6;
    }
    while (v6);
    if ((v7 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  if ((v8 & 1) == 0 && (v9 & 1) == 0 && (v10 & 1) == 0 && (v12 & 1) == 0 && (v11 & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v67);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
LABEL_26:
  Float = *(float *)&v64;
  switch(a2)
  {
    case 4:
      if ((v8 & 1) == 0)
      {
        LOWORD(v67.__r_.__value_.__l.__data_) = LOWORD(v64);
        Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v67);
        goto LABEL_54;
      }
      v16 = v67.__r_.__value_.__r.__words[0];
      v17 = a5;
      *a5 = v67.__r_.__value_.__r.__words[0];
      if (!v16)
        goto LABEL_100;
      goto LABEL_56;
    case 5:
LABEL_54:
      if ((v9 & 1) != 0)
        goto LABEL_55;
      goto LABEL_46;
    case 6:
      v21 = v64;
      if ((v10 & 1) != 0)
        goto LABEL_47;
      if ((v9 & 1) == 0)
        goto LABEL_49;
      v22 = v64;
      v23 = v67.__r_.__value_.__r.__words[0];
      v17 = a5;
      *a5 = v67.__r_.__value_.__r.__words[0];
      if (v23)
        goto LABEL_56;
      goto LABEL_100;
    case 7:
      if ((v7 & 1) == 0)
      {
        LOWORD(v67.__r_.__value_.__l.__data_) = LOWORD(v64);
        Float = MIL::Bf16::GetFloat((MIL::Bf16 *)&v67);
        if ((v9 & 1) != 0)
          goto LABEL_55;
        goto LABEL_46;
      }
      Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a3, 7);
      MIL::IRTensorValueType::MakeBFloat16Value(Scalar, (const MIL::IRTensorValueType *)LOWORD(v64), &v68);
      v67.__r_.__value_.__r.__words[0] = v68;
      if (v68)
      {
        v28 = (_QWORD *)operator new();
        v17 = a5;
        v29 = v68;
        *v28 = &unk_1EA992A68;
        v28[1] = 0;
        v28[2] = 0;
        v28[3] = v29;
      }
      else
      {
        v28 = 0;
        v17 = a5;
      }
      v67.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
      v68 = 0;
      MIL::IRArgument::Make((__int128 *)&v67, (uint64_t *)&v66);
      size = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
      if (v67.__r_.__value_.__l.__size_)
      {
        v51 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v53 = v68;
      v68 = 0;
      if (v53)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 8))(v53);
      v54 = v66;
      *v17 = v66;
      if (!v54)
        goto LABEL_100;
      goto LABEL_98;
    default:
      if (a2 == 25)
      {
        if ((v12 & 1) != 0)
        {
          v24 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a3, 25);
          MIL::IRTensorValueType::MakeFloat8E5M2Value(v24, (const MIL::IRTensorValueType *)LOBYTE(v64), &v68);
          v67.__r_.__value_.__r.__words[0] = v68;
          if (v68)
          {
            v25 = (_QWORD *)operator new();
            v17 = a5;
            v26 = v68;
            *v25 = &unk_1EA992A68;
            v25[1] = 0;
            v25[2] = 0;
            v25[3] = v26;
          }
          else
          {
            v25 = 0;
            v17 = a5;
          }
          v67.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
          v68 = 0;
          MIL::IRArgument::Make((__int128 *)&v67, (uint64_t *)&v66);
          v45 = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
          if (v67.__r_.__value_.__l.__size_)
          {
            v46 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = v68;
          v68 = 0;
          if (v48)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v48 + 8))(v48);
          v49 = v66;
          *v17 = v66;
          if (v49)
            goto LABEL_98;
          goto LABEL_100;
        }
        v67.__r_.__value_.__s.__data_[0] = LOBYTE(v64);
        Float = MIL::Fp8E5M2::GetFloat((MIL::Fp8E5M2 *)&v67);
        if ((v9 & 1) == 0)
          goto LABEL_46;
LABEL_55:
        v37 = v67.__r_.__value_.__r.__words[0];
        v17 = a5;
        *a5 = v67.__r_.__value_.__r.__words[0];
        if (!v37)
          goto LABEL_100;
        goto LABEL_56;
      }
      if (a2 != 24)
      {
        v61 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v61, "Unexpected type");
        __cxa_throw(v61, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      if ((v11 & 1) != 0)
      {
        v18 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a3, 24);
        MIL::IRTensorValueType::MakeFloat8E4M3FNValue(v18, (const MIL::IRTensorValueType *)LOBYTE(v64), &v68);
        v67.__r_.__value_.__r.__words[0] = v68;
        if (v68)
        {
          v19 = (_QWORD *)operator new();
          v17 = a5;
          v20 = v68;
          *v19 = &unk_1EA992A68;
          v19[1] = 0;
          v19[2] = 0;
          v19[3] = v20;
        }
        else
        {
          v19 = 0;
          v17 = a5;
        }
        v67.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
        v68 = 0;
        MIL::IRArgument::Make((__int128 *)&v67, (uint64_t *)&v66);
        v55 = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
        if (v67.__r_.__value_.__l.__size_)
        {
          v56 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v58 = v68;
        v68 = 0;
        if (v58)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v58 + 8))(v58);
        v59 = v66;
        *v17 = v66;
        if (v59)
          goto LABEL_98;
        goto LABEL_100;
      }
      v67.__r_.__value_.__s.__data_[0] = LOBYTE(v64);
      Float = MIL::Fp8E4M3FN::GetFloat((MIL::Fp8E4M3FN *)&v67);
      if ((v9 & 1) != 0)
        goto LABEL_55;
LABEL_46:
      v21 = Float;
      if ((v10 & 1) == 0)
      {
LABEL_49:
        v34 = v21;
        v35 = MIL::Fp16::FromFloat(CanTakeScalar, v34);
        v36 = v67.__r_.__value_.__r.__words[0];
        v17 = a5;
        *a5 = v67.__r_.__value_.__r.__words[0];
        if (!v36)
          goto LABEL_100;
LABEL_56:
        result = (_QWORD *)operator new();
        v39 = v67.__r_.__value_.__r.__words[0];
LABEL_99:
        *result = &unk_1EA9942C8;
        result[1] = 0;
        result[2] = 0;
        result[3] = v39;
        goto LABEL_101;
      }
LABEL_47:
      v30 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(a3, 6);
      MIL::IRTensorValueType::MakeFloat64Value(v30, v21, v31, &v68);
      v67.__r_.__value_.__r.__words[0] = v68;
      if (v68)
      {
        v32 = (_QWORD *)operator new();
        v33 = v68;
        *v32 = &unk_1EA992A68;
        v32[1] = 0;
        v32[2] = 0;
        v32[3] = v33;
      }
      else
      {
        v32 = 0;
      }
      v67.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
      v68 = 0;
      MIL::IRArgument::Make((__int128 *)&v67, (uint64_t *)&v66);
      v40 = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
      v17 = a5;
      if (v67.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v68;
      v68 = 0;
      if (v43)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v43 + 8))(v43);
      v44 = v66;
      *a5 = v66;
      if (v44)
      {
LABEL_98:
        result = (_QWORD *)operator new();
        v39 = v66;
        goto LABEL_99;
      }
LABEL_100:
      result = 0;
LABEL_101:
      v17[1] = (std::string::size_type)result;
      return result;
  }
}

void sub_1E069113C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::CanTakeScalar(_anonymous_namespace_ *this, const MIL::IRTensorValueType *a2)
{
  _QWORD *v4;

  if (MIL::IRTensorValueType::IsScalar(this))
    return 1;
  v4 = (_QWORD *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 96))(this);
  if (v4[1] - *v4 == 8)
    return (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 104))(this) ^ 1;
  else
    return 0;
}

uint64_t `anonymous namespace'::MakeCantConvertErrorMessage(int a1, uint64_t a2)
{
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *__p;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Can't convert a scalar of type ", 31);
  MIL::IRDataTypeToString(a1, &__p);
  if ((v16 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v16 & 0x80u) == 0)
    v6 = v16;
  else
    v6 = v15;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to any of the following types: ", 32);
  if ((char)v16 < 0)
    operator delete(__p);
  v8 = *(_QWORD **)(a2 + 16);
  if (v8)
  {
    v9 = 1;
    do
    {
      v10 = v8[2];
      if ((v9 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v10 + 56))(&__p, v10);
      if ((v16 & 0x80u) == 0)
        v11 = &__p;
      else
        v11 = __p;
      if ((v16 & 0x80u) == 0)
        v12 = v16;
      else
        v12 = v15;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v11, v12);
      if ((char)v16 < 0)
        operator delete(__p);
      v9 = 0;
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1E0C022F8](&v19);
}

void sub_1E0691404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::MakeFloat16Value@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, unsigned __int16 a2@<W1>, uint64_t *a3@<X8>)
{
  _anonymous_namespace_ *Scalar;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;

  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  MIL::IRTensorValueType::MakeFloat16Value(Scalar, (const MIL::IRTensorValueType *)a2, &v12);
  *(_QWORD *)&v13 = v12;
  if (v12)
  {
    v6 = (_QWORD *)operator new();
    v7 = v12;
    *v6 = &unk_1EA992A68;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)&v13 + 1) = v6;
  v12 = 0;
  MIL::IRArgument::Make(&v13, a3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E0691528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::MakeFloat32Value@<X0>(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  MIL::IRTensorValueType *Scalar;
  const MIL::IRTensorValueType *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;

  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar(this, 5);
  MIL::IRTensorValueType::MakeFloat32Value(Scalar, a2, v7, &v14);
  *(_QWORD *)&v15 = v14;
  if (v14)
  {
    v8 = (_QWORD *)operator new();
    v9 = v14;
    *v8 = &unk_1EA992A68;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v9;
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)&v15 + 1) = v8;
  v14 = 0;
  MIL::IRArgument::Make(&v15, a3);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E0691648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::OpaqueStorage<32ul,8ul,MIL::Transform::ArgumentDescription::ArgumentDescriptionImpl>::OpaqueStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EA99E6C0[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EA99E728[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

void sub_1E06916DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<`anonymous namespace'::BooleanScalar,`anonymous namespace'::Argument,`anonymous namespace'::FromNewOperationOutput,`anonymous namespace'::SignedIntegerScalar,`anonymous namespace'::UnsignedIntegerScalar,`anonymous namespace'::FloatScalar<float>,`anonymous namespace'::FloatScalar<double>,`anonymous namespace'::FloatScalar<MIL::Bf16>,`anonymous namespace'::FloatScalar<MIL::Fp16>,`anonymous namespace'::FloatScalar<MIL::Fp8E4M3FN>,`anonymous namespace'::FloatScalar<MIL::Fp8E5M2>,`anonymous namespace'::SmallStringConstant,`anonymous namespace'::LargeStringConstant>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E608[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRS11_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a2, a3);
    result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  v6 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EA99E608[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[2] = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_DWORD *)(v4 + 24) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1EA99E608[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[6] = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 8;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 9)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 9;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 10)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 10;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 11)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EA99E608[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[1].n128_u32[2] = 11;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRS10_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEERKS18_EEEDcS10_DpT0_(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 12)
      return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a2, a3);
    result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  v6 = a3[1];
  *(_QWORD *)v4 = *a3;
  *(_QWORD *)(v4 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(v4 + 24) = 12;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a2, (__int128 *)a3);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v7, v4);
  }
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EA99E608[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[2] = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_DWORD *)(v4 + 24) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1EA99E608[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[6] = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 8;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 9)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 9;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 10)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1EA99E608[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 10;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 11)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1EA99E608[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[1].n128_u32[2] = 11;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_113BooleanScalarENS8_8ArgumentENS8_22FromNewOperationOutputENS8_19SignedIntegerScalarENS8_21UnsignedIntegerScalarENS8_11FloatScalarIfEENSE_IdEENSE_IN3MIL4Bf16EEENSE_INSH_4Fp16EEENSE_INSH_9Fp8E4M3FNEEENSE_INSH_7Fp8E5M2EEENS8_19SmallStringConstantENS8_19LargeStringConstantEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJS9_SA_SB_SC_SD_SF_SG_SJ_SL_SN_SP_SQ_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 12)
    {
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a2, (__int128 *)a3);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EA99E608[v5])(&v7, v4);
  }
  result = *(__n128 *)a3;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(v4 + 24) = 12;
  return result;
}

MIL::Transform::NameGenerator *MIL::Transform::NameGenerator::NameGenerator(MIL::Transform::NameGenerator **this, const MIL::IRProgram *a2)
{
  _QWORD *v4;
  uint64_t v5;
  MIL::Transform::NameGenerator *v6;
  MIL::Transform::NameGenerator *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *p_p;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = std::string::basic_string[abi:ne180100]<0>(this, "tmp_");
  v4[3] = 0;
  v4[4] = 0;
  v5 = (uint64_t)(v4 + 3);
  v4[5] = 0;
  if (*((char *)v4 + 23) < 0)
  {
    v7 = *this;
    v6 = this[1];
  }
  else
  {
    v6 = (MIL::Transform::NameGenerator *)*((unsigned __int8 *)v4 + 23);
    v7 = (MIL::Transform::NameGenerator *)this;
  }
  v16[0] = v7;
  v16[1] = v6;
  v14 = 0;
  v15 = 0;
  __p = 0;
  v17[0] = &off_1EA99E870;
  v17[1] = v16;
  v17[2] = &__p;
  v18 = v17;
  MIL::Util::ForEachVariableName((uint64_t)a2, (uint64_t)v17);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_9:
  if (SHIBYTE(v15) < 0)
  {
    v10 = v14;
    if (v14)
    {
      p_p = __p;
      goto LABEL_14;
    }
  }
  else
  {
    v10 = HIBYTE(v15);
    if (HIBYTE(v15))
    {
      p_p = &__p;
LABEL_14:
      std::string::__assign_with_sentinel[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>(v5, (uint64_t)p_p + v10, (uint64_t)p_p + v10, (uint64_t)p_p, (uint64_t)p_p);
      goto LABEL_16;
    }
  }
  MEMORY[0x1E0C02010](v5, "0");
LABEL_16:
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  return (MIL::Transform::NameGenerator *)this;
}

void sub_1E0692750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v20;
  void **v21;
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a20;
  if (a20 == v22)
  {
    v25 = 4;
    v24 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 47) < 0)
    operator delete(*v21);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::Increment(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  BOOL v4;
  char v5;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) == 0)
    v2 = (_BYTE *)a1;
  else
    v2 = *(_BYTE **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    while (1)
    {
      v3 = (char)*v2;
      v4 = v3 <= 56;
      v5 = v3 <= 56 ? v3 + 1 : 48;
      *v2 = v5;
      if (v4)
        break;
      ++v2;
      if (!--v1)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    std::string::push_back((std::string *)a1, 49);
  }
}

void MIL::Transform::NameGenerator::GenerateTmpName(MIL::Transform::NameGenerator *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void **v12;
  std::string::size_type v13;
  void *__p[2];
  unsigned __int8 v15;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)this + 23) < 0)
    v4 = *((_QWORD *)this + 1);
  else
    v4 = *((unsigned __int8 *)this + 23);
  if (*((char *)this + 47) < 0)
    v5 = *((_QWORD *)this + 4);
  else
    v5 = *((unsigned __int8 *)this + 47);
  std::string::reserve(a2, v5 + v4);
  v6 = *((char *)this + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)this;
  else
    v7 = *(const std::string::value_type **)this;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 23);
  else
    v8 = *((_QWORD *)this + 1);
  std::string::append(a2, v7, v8);
  v9 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
  {
    v11 = (char *)*((_QWORD *)this + 3);
    v10 = (uint64_t)&v11[*((_QWORD *)this + 4)];
  }
  else
  {
    v10 = (uint64_t)&v9[*((unsigned __int8 *)this + 47)];
    v11 = (char *)this + 24;
  }
  if ((char *)v10 != v11)
  {
    std::string::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>(__p, v10, v10, (uint64_t)v11, (uint64_t)v11, v10 - (_QWORD)v11);
    if ((v15 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v13 = v15;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v12, v13);
    if ((char)v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_1E0692914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void MIL::Transform::NameGenerator::TakeBack(uint64_t a1, const void **a2)
{
  size_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  BOOL v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;

  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = a2;
  else
    v5 = *a2;
  if ((v4 & 0x80u) != 0)
    v4 = (size_t)a2[1];
  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(const void **)a1;
    v6 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 23);
    v7 = (const void *)a1;
  }
  if (v4 >= v6 && !memcmp(v5, v7, v6))
  {
    v8 = (_BYTE *)(a1 + 24);
    v9 = *(unsigned __int8 *)(a1 + 47);
    if (*(char *)(a1 + 47) < 0)
    {
      v11 = *(_BYTE **)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 32);
      if (v10 == 1)
      {
        if (*v11 == 48)
          return;
        v12 = v11 + 1;
        goto LABEL_21;
      }
    }
    else
    {
      if (v9 == 1 && *v8 == 48)
        return;
      v10 = *(unsigned __int8 *)(a1 + 47);
      v11 = (_BYTE *)(a1 + 24);
    }
    if (!v10)
      goto LABEL_31;
    v12 = &v11[v10];
LABEL_21:
    v13 = v11 + 1;
    do
    {
      v14 = (char)*(v13 - 1);
      v15 = v14 <= 48;
      if (v14 <= 48)
        v16 = 57;
      else
        v16 = v14 - 1;
      *(v13 - 1) = v16;
    }
    while (v15 && v13++ != v12);
    v9 = *(unsigned __int8 *)(a1 + 47);
LABEL_31:
    if ((v9 & 0x80) != 0)
    {
      v20 = *(_QWORD *)(a1 + 32);
      if (v20 >= 2)
      {
        v19 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v19 + v20 - 1) == 48)
        {
          v18 = v20 - 1;
          *(_QWORD *)(a1 + 32) = v18;
          goto LABEL_38;
        }
      }
    }
    else if (v9 >= 2 && v8[v9 - 1] == 48)
    {
      v18 = v9 - 1;
      *(_BYTE *)(a1 + 47) = v18 & 0x7F;
      v19 = a1 + 24;
LABEL_38:
      *(_BYTE *)(v19 + v18) = 0;
    }
    v21 = *((_BYTE *)a2 + 23);
    v22 = (char *)*a2;
    if (v21 >= 0)
      v22 = (char *)a2;
    if (*(char *)(a1 + 23) < 0)
      v23 = *(char **)(a1 + 8);
    else
      v23 = (char *)*(unsigned __int8 *)(a1 + 23);
    v24 = &v23[(_QWORD)v22];
    if (v21 >= 0)
      v25 = (char *)*((unsigned __int8 *)a2 + 23);
    else
      v25 = (char *)a2[1];
    v26 = (unsigned __int8 *)&v25[(_QWORD)v22];
    if (*(char *)(a1 + 47) < 0)
    {
      v28 = *(unsigned __int8 **)(a1 + 24);
      v27 = &v28[*(_QWORD *)(a1 + 32)];
    }
    else
    {
      v27 = &v8[*(unsigned __int8 *)(a1 + 47)];
      v28 = (unsigned __int8 *)(a1 + 24);
    }
    v29 = v26 - (unsigned __int8 *)v24;
    if (v26 - (unsigned __int8 *)v24 == v27 - v28)
    {
      if (v23 == v25)
      {
LABEL_57:
        if (v27 == v28)
          return;
      }
      else
      {
        v30 = &v27[v24 - (char *)v26];
        while (v27 != v28)
        {
          v31 = *--v27;
          if (*v24 != v31)
            break;
          ++v24;
          if (!--v29)
          {
            v27 = v30;
            goto LABEL_57;
          }
        }
      }
    }
  }
}

void std::__function::__func<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0,std::allocator<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

__n128 std::__function::__func<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0,std::allocator<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA99E870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0,std::allocator<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA99E870;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0,std::allocator<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0>,void ()(std::string const&)>::operator()(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  const void *v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  v2 = *(char *)(a2 + 23);
  if (v2 >= 0)
    v3 = *(unsigned __int8 *)(a2 + 23);
  else
    v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(v4 + 8);
  if (v3 >= v5)
  {
    v6 = result;
    v7 = *(const void **)v4;
    v8 = v2 >= 0 ? (char *)a2 : *(char **)a2;
    result = memcmp(v8, v7, v5);
    if (!(_DWORD)result)
    {
      v9 = &v8[v5];
      v10 = v3 - v5;
      if (!v10)
        goto LABEL_17;
      do
      {
        if (*v9 != 48)
        {
          v11 = 0;
          while (v9[v11] - 48 < 0xA)
          {
            if (v10 == ++v11)
              goto LABEL_17;
          }
          return result;
        }
        ++v9;
        --v10;
      }
      while (v10);
      v9 = &v8[v3];
LABEL_17:
      v12 = *(char **)(v6 + 16);
      if (v12[23] < 0)
      {
        v14 = *(char **)v12;
        v13 = *((_QWORD *)v12 + 1);
      }
      else
      {
        v13 = v12[23];
        v14 = v12;
      }
      if (v10 == v13)
      {
        result = memcmp(v9, v14, v10);
        if ((int)result > 0)
LABEL_24:
          JUMPOUT(0x1E0C0201CLL);
      }
      else if (v10 > v13)
      {
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0,std::allocator<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0,std::allocator<`anonymous namespace'::FindLargestTmpSuffixInProgram(MIL::IRProgram const&,std::string_view)::$_0>,void ()(std::string const&)>::target_type()
{
}

void std::string::__assign_with_sentinel[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  std::string::__init_with_sentinel[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>(&__p, a2, a3, a4, a5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x1E0C0201C](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1E0692D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>(std::string *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::value_type v8;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a3 != a5)
  {
    v8 = *(_BYTE *)--a3;
    std::string::push_back(this, v8);
  }
}

void sub_1E0692DEC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1E0692E08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char *>>,std::reverse_iterator<std::__wrap_iter<char *>>>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a6 > 0x16)
  {
    v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v10 = a6 | 7;
    v11 = v10 + 1;
    result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *v6 = result;
    v6 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    v12 = *(_BYTE *)--a3;
    *(_BYTE *)v6 = v12;
    v6 = (_QWORD *)((char *)v6 + 1);
  }
  *(_BYTE *)v6 = 0;
  return result;
}

uint64_t MIL::Transform::OperationChange::operator=(uint64_t a1, uint64_t a2)
{
  MIL::Util::OpaqueStorage<128ul,8ul,MIL::Transform::OperationChange::OperationChangeImpl>::operator=(a1, a2);
  return a1;
}

{
  MIL::Util::OpaqueStorage<128ul,8ul,MIL::Transform::OperationChange::OperationChangeImpl>::operator=(a1, a2);
  return a1;
}

uint64_t MIL::Util::OpaqueStorage<128ul,8ul,MIL::Transform::OperationChange::OperationChangeImpl>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 64);
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    off_1EA99E968[v4]((int)&v6, (std::string *)a1, (std::string *)a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))off_1EA99E8F0[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v3 = *(unsigned int *)(a1 + 64);
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_5:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EA99E990[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t, uint64_t))off_1EA99E8F0[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

double MIL::Transform::ChangeOperator@<D0>(MIL::Transform *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;

  std::string::basic_string[abi:ne180100]<0>(&v5, (char *)this);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 64) = 1;
  return result;
}

__n128 MIL::Transform::ChangeOperator@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[4].n128_u32[0] = 1;
  return result;
}

void MIL::Transform::ChangeArgument(char *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  *(_OWORD *)a4 = *(_OWORD *)__p;
  v7 = v9;
  __p[1] = 0;
  v9 = 0;
  __p[0] = 0;
  *(_QWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 24) = a2;
  MIL::Transform::ArgumentDescription::ArgumentDescription(a4 + 32, a3);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a4 + 64) = 2;
}

void sub_1E0693128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  MIL::IRFunction::Make((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Transform::ReplaceArgument(char *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v6;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 16) = v6;
  __p[1] = 0;
  v6 = 0;
  __p[0] = 0;
  MIL::Transform::ArgumentDescription::ArgumentDescription(a3 + 24, a2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a3 + 64) = 3;
}

void sub_1E06931BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  MIL::IRFunction::Make((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 MIL::Transform::ReplaceArguments@<Q0>(char *__s@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v6;
  uint64_t v7;

  std::string::basic_string[abi:ne180100]<0>(&v6, __s);
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v7;
  result = *a2;
  *(__n128 *)(a3 + 24) = *a2;
  *(_QWORD *)(a3 + 40) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_DWORD *)(a3 + 64) = 4;
  return result;
}

__n128 MIL::Transform::ReplaceAttribute@<Q0>(char *__s@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v6;
  uint64_t v7;

  std::string::basic_string[abi:ne180100]<0>(&v6, __s);
  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(__n128 *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

void MIL::TransformPrivate::OperationChangePrivate::ApplyChange(uint64_t *a1, std::string::size_type a2, uint64_t a3, uint64_t a4)
{
  MIL::Transform::OperationChange::OperationChangeImpl::ApplyChange(a2, a1, a3, a4);
}

void MIL::Transform::OperationChange::OperationChangeImpl::ApplyChange(std::string::size_type a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t i;
  _OWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  uint64_t Parameter;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _OWORD *v53;
  int v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t *v62;
  std::logic_error *exception;
  uint64_t v64;
  char *v65;
  size_t v66;
  std::string *v67;
  char *v68;
  int v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::logic_error *v74;
  _BYTE v75[32];
  __int128 v76;
  std::string v77;

  switch(*(_DWORD *)(a1 + 64))
  {
    case 0:
      if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2 + 10, (unsigned __int8 *)a1))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
        v65 = (char *)v64;
        if (*(char *)(v64 + 23) >= 0)
          v66 = *(unsigned __int8 *)(v64 + 23);
        else
          v66 = *(_QWORD *)(v64 + 8);
        v67 = &v77;
        std::string::basic_string[abi:ne180100]((uint64_t)&v77, v66 + 21);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v67 = (std::string *)v77.__r_.__value_.__r.__words[0];
        if (v66)
        {
          if (v65[23] >= 0)
            v68 = v65;
          else
            v68 = *(char **)v65;
          memmove(v67, v68, v66);
        }
        strcpy((char *)v67 + v66, ": No attribute named ");
        v69 = *(char *)(a1 + 23);
        if (v69 >= 0)
          v70 = (const std::string::value_type *)a1;
        else
          v70 = *(const std::string::value_type **)a1;
        if (v69 >= 0)
          v71 = *(unsigned __int8 *)(a1 + 23);
        else
          v71 = *(_QWORD *)(a1 + 8);
        v72 = std::string::append(&v77, v70, v71);
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        *(_QWORD *)&v75[16] = *((_QWORD *)&v72->__r_.__value_.__l + 2);
        *(_OWORD *)v75 = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, (const std::string *)v75);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      *(_QWORD *)v75 = a1;
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 10), (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v8 + 5, (uint64_t *)(a1 + 24));
      return;
    case 1:
      v54 = *(char *)(a1 + 23);
      if (v54 >= 0)
        v55 = (unsigned __int8 *)a1;
      else
        v55 = *(unsigned __int8 **)a1;
      if (v54 >= 0)
        v56 = *(unsigned __int8 *)(a1 + 23);
      else
        v56 = *(_QWORD *)(a1 + 8);
      MIL::Matching::GetOperatorByQualifiedName(a3, v55, v56, v75);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)v75);
      v42 = *(std::__shared_weak_count **)&v75[8];
      if (!*(_QWORD *)&v75[8])
        return;
      v57 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
      do
        v44 = __ldaxr(v57);
      while (__stlxr(v44 - 1, v57));
      break;
    case 2:
      v28 = (uint64_t)(a2 + 2);
      v27 = *a2;
      v29 = *(char *)(a1 + 23);
      if (v29 >= 0)
        v30 = (const std::string::value_type *)a1;
      else
        v30 = *(const std::string::value_type **)a1;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(a1 + 23);
      else
        v31 = *(_QWORD *)(a1 + 8);
      Parameter = MIL::Transform::GetParameter(v27, v30, v31);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Parameter + 16))(Parameter);
      MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateIRArgument(v75, a1 + 32, a3, v33, a4);
      v77.__r_.__value_.__r.__words[0] = a1;
      v34 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v77);
      v35 = *((_QWORD *)v34 + 5);
      v36 = *(_QWORD *)(a1 + 24);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v34 + 6) - v35) >> 4) <= v36)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v37 = v35 + 48 * v36;
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v37, (__int128 *)v75);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](v37 + 16, (__int128 *)&v75[16]);
      v38 = v76;
      *(_BYTE *)(v37 + 40) = BYTE8(v76);
      *(_QWORD *)(v37 + 32) = v38;
      v39 = *(std::__shared_weak_count **)&v75[24];
      if (*(_QWORD *)&v75[24])
      {
        v40 = (unint64_t *)(*(_QWORD *)&v75[24] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&v75[8];
      if (!*(_QWORD *)&v75[8])
        return;
      v43 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      break;
    case 3:
      v46 = (uint64_t)(a2 + 2);
      v45 = *a2;
      v47 = *(char *)(a1 + 23);
      if (v47 >= 0)
        v48 = (const std::string::value_type *)a1;
      else
        v48 = *(const std::string::value_type **)a1;
      if (v47 >= 0)
        v49 = *(unsigned __int8 *)(a1 + 23);
      else
        v49 = *(_QWORD *)(a1 + 8);
      v50 = MIL::Transform::GetParameter(v45, v48, v49);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
      MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateIRArgument(v75, a1 + 24, a3, v51, a4);
      v77.__r_.__value_.__r.__words[0] = a1;
      v52 = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v77);
      std::vector<MIL::TransformPrivate::ArgumentAndType>::__base_destruct_at_end[abi:ne180100]((uint64_t)(v52 + 5), v52[5]);
      v53 = (_OWORD *)v52[6];
      if ((unint64_t)v53 >= v52[7])
      {
        v58 = std::vector<MIL::TransformPrivate::ArgumentAndType>::__push_back_slow_path<MIL::TransformPrivate::ArgumentAndType>(v52 + 5, (uint64_t)v75);
        v59 = *(std::__shared_weak_count **)&v75[24];
        v52[6] = v58;
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
      }
      else
      {
        *v53 = *(_OWORD *)v75;
        *(_OWORD *)v75 = 0uLL;
        v53[1] = *(_OWORD *)&v75[16];
        *(_OWORD *)&v75[16] = 0uLL;
        v53[2] = v76;
        v52[6] = (uint64_t)(v53 + 3);
      }
      v42 = *(std::__shared_weak_count **)&v75[8];
      if (!*(_QWORD *)&v75[8])
        return;
      v62 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
      do
        v44 = __ldaxr(v62);
      while (__stlxr(v44 - 1, v62));
      break;
    case 4:
      v10 = (uint64_t)(a2 + 2);
      v9 = *a2;
      v11 = *(char *)(a1 + 23);
      if (v11 >= 0)
        v12 = (const std::string::value_type *)a1;
      else
        v12 = *(const std::string::value_type **)a1;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a1 + 23);
      else
        v13 = *(_QWORD *)(a1 + 8);
      v14 = MIL::Transform::GetParameter(v9, v12, v13);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      *(_QWORD *)v75 = a1;
      v16 = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
      std::vector<MIL::TransformPrivate::ArgumentAndType>::__base_destruct_at_end[abi:ne180100]((uint64_t)(v16 + 5), v16[5]);
      v17 = *(_QWORD *)(a1 + 24);
      for (i = *(_QWORD *)(a1 + 32); v17 != i; v17 += 32)
      {
        MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateIRArgument(v75, v17, a3, v15, a4);
        v19 = (_OWORD *)v16[6];
        if ((unint64_t)v19 >= v16[7])
        {
          v20 = std::vector<MIL::TransformPrivate::ArgumentAndType>::__push_back_slow_path<MIL::TransformPrivate::ArgumentAndType>(v16 + 5, (uint64_t)v75);
          v21 = *(std::__shared_weak_count **)&v75[24];
          v16[6] = v20;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
        else
        {
          *v19 = *(_OWORD *)v75;
          *(_OWORD *)v75 = 0uLL;
          v19[1] = *(_OWORD *)&v75[16];
          *(_OWORD *)&v75[16] = 0uLL;
          v19[2] = v76;
          v16[6] = (uint64_t)(v19 + 3);
        }
        v24 = *(std::__shared_weak_count **)&v75[8];
        if (*(_QWORD *)&v75[8])
        {
          v25 = (unint64_t *)(*(_QWORD *)&v75[8] + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      return;
    default:
      v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v74, "Trying to visit a std::variant that is in an invalid state");
      __cxa_throw(v74, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
}

void sub_1E06938AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  int v25;
  void *v26;

  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v25 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1E0693BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E0693C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::TransformPrivate::ArgumentAndType>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::TransformPrivate::ArgumentAndType>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<MIL::TransformPrivate::ArgumentAndType>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<MIL::TransformPrivate::ArgumentAndType>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<MIL::TransformPrivate::ArgumentAndType>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<MIL::TransformPrivate::ArgumentAndType>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 48;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v4 - 32);
      result = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<MIL::TransformPrivate::ArgumentAndType>::__push_back_slow_path<MIL::TransformPrivate::ArgumentAndType>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[48 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  v14[2] = v11 + 48;
  std::vector<MIL::TransformPrivate::ArgumentAndType>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1E0693EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MIL::TransformPrivate::ArgumentAndType>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::TransformPrivate::ArgumentAndType>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::TransformPrivate::ArgumentAndType>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 32);
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MIL::TransformPrivate::ArgumentAndType>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MIL::TransformPrivate::ArgumentAndType>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<MIL::TransformPrivate::ArgumentAndType>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<MIL::TransformPrivate::ArgumentAndType>,std::reverse_iterator<MIL::TransformPrivate::ArgumentAndType*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1 + 16);
    result = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
    v1 += 48;
  }
  return result;
}

uint64_t std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(v4 + 16) = v2 - 48;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 - 32);
      result = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v5);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t MIL::Util::OpaqueStorage<128ul,8ul,MIL::Transform::OperationChange::OperationChangeImpl>::OpaqueStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EA99E918[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 64) = v3;
  }
  return a1;
}

{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EA99E940[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 64) = v3;
  }
  return a1;
}

void sub_1E0694154(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 24);
  std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v4 - 32));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_QWORD *)a3 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 3);
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 4), (uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 5);
}

void sub_1E06943F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__ctor<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__construct_alt[abi:ne180100]<2ul,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentChange const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)&this[1].__r_.__value_.__r.__words[1], (const MIL::Transform::ArgumentDescription *)(a2 + 2));
  return this;
}

void sub_1E0694470(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__variant_detail::__ctor<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__construct_alt[abi:ne180100]<3ul,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::SingleArgumentReplacement const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)&this[1], (const MIL::Transform::ArgumentDescription *)((char *)a2 + 24));
  return this;
}

void sub_1E06944E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<MIL::MatchingPrivate::MatchItem>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Transform::ArgumentDescription>,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1E0694564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Transform::ArgumentDescription>,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)(a4 + v7), (const MIL::Transform::ArgumentDescription *)(a2 + v7));
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1E06945E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

void sub_1E06946BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  result = *(__n128 *)((char *)a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = *(__n128 *)((char *)a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__construct_alt[abi:ne180100]<2ul,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentChange>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  MIL::Transform::ArgumentDescription::ArgumentDescription(a1 + 32, a2 + 2);
  return a1;
}

void sub_1E06947B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__construct_alt[abi:ne180100]<3ul,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::SingleArgumentReplacement>(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  MIL::Transform::ArgumentDescription::ArgumentDescription(a1 + 24, (char *)a2 + 24);
  return a1;
}

void sub_1E069480C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, std::string *this, std::string *__str)
{
  uint64_t v4;
  std::string::size_type size;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string __p;
  std::string::pointer data;
  std::__shared_weak_count *v14;

  v4 = *a1;
  if (*(_DWORD *)(*a1 + 64))
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    else
      __p = *__str;
    size = __str[1].__r_.__value_.__l.__size_;
    data = __str[1].__r_.__value_.__l.__data_;
    v14 = (std::__shared_weak_count *)size;
    if (size)
    {
      v7 = (unint64_t *)(size + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::operator=(this, __str);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](this[1].__r_.__value_.__r.__words, (uint64_t *)&__str[1]);
  }
}

void sub_1E0694928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()();
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, std::string *this, std::string *__str)
{
  uint64_t v3;
  std::string __p;

  v3 = *a1;
  if (*(_DWORD *)(*a1 + 64) == 1)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    else
      __p = *__str;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1E06949D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, std::string *this, std::string *__str)
{
  uint64_t v4;
  uint64_t v5;
  std::string *result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      std::string::operator=(this, __str);
      this[1].__r_.__value_.__r.__words[0] = __str[1].__r_.__value_.__r.__words[0];
      return (std::string *)MIL::Transform::ArgumentDescription::operator=((uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)&__str[1].__r_.__value_.__l.__size_);
    }
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_DWORD *)(v4 + 64) = 2;
  return result;
}

std::string *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, std::string *this, std::string *__str)
{
  uint64_t v4;
  uint64_t v5;
  std::string *result;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      std::string::operator=(this, __str);
      return (std::string *)MIL::Transform::ArgumentDescription::operator=((uint64_t)&this[1], (uint64_t)&__str[1]);
    }
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 64) = -1;
  *(_DWORD *)(v4 + 64) = 3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEERKSU_EEEDcSM_DpT0_(uint64_t *a1, std::string *this, std::string *__str)
{
  uint64_t v4;
  std::string __p;
  _QWORD v7[4];
  void **v8;

  v4 = *a1;
  if (*(_DWORD *)(*a1 + 64) == 4)
  {
    std::string::operator=(this, __str);
    if (this != __str)
      std::vector<MIL::Transform::ArgumentDescription>::__assign_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>((void **)&this[1].__r_.__value_.__l.__data_, (uint64_t)__str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_, (uint64_t)(__str[1].__r_.__value_.__l.__size_ - __str[1].__r_.__value_.__r.__words[0]) >> 5);
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    else
      __p = *__str;
    memset(v7, 0, 24);
    std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(v7, (uint64_t)__str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_, (uint64_t)(__str[1].__r_.__value_.__l.__size_ - __str[1].__r_.__value_.__r.__words[0]) >> 5);
    v8 = (void **)v7;
    std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1E0694C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 40) = v14;
  std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__emplace[abi:ne180100]<0ul,`anonymous namespace'::AttributeReplacement>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 64) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__emplace[abi:ne180100]<1ul,`anonymous namespace'::OperatorChange>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 64) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 64) = 1;
  return a1;
}

void std::vector<MIL::Transform::ArgumentDescription>::__assign_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = (char *)*a1;
  if (a4 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5)
  {
    std::vector<MIL::Transform::ArgumentDescription>::__vdeallocate(a1);
    if (a4 >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = (_BYTE *)a1[2] - (_BYTE *)*a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<MIL::MatchingPrivate::MatchItem>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Transform::ArgumentDescription>,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(v8, v6, a3, (uint64_t)a1[1]);
LABEL_15:
    a1[1] = (void *)v13;
    return;
  }
  v14 = (char *)a1[1];
  v15 = (v14 - v9) >> 5;
  if (v15 < a4)
  {
    v16 = a2 + 32 * v15;
    if (v14 != v9)
    {
      v17 = 32 * v15;
      do
      {
        MIL::Transform::ArgumentDescription::operator=((uint64_t)v9, v6);
        v6 += 32;
        v9 += 32;
        v17 -= 32;
      }
      while (v17);
      v9 = (char *)a1[1];
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Transform::ArgumentDescription>,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(v8, v16, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = v9;
  }
  else
  {
    v18 = v9;
    do
    {
      MIL::Transform::ArgumentDescription::operator=((uint64_t)v9, v6);
      v6 += 32;
      v9 += 32;
      v18 += 32;
    }
    while (v6 != a3);
    v14 = (char *)a1[1];
  }
  while (v14 != v18)
    MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v14 - 32));
  a1[1] = v18;
}

void sub_1E0694ED0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<MIL::Transform::ArgumentDescription>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v3 - 32));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<`anonymous namespace'::AttributeReplacement,`anonymous namespace'::OperatorChange,`anonymous namespace'::SingleArgumentChange,`anonymous namespace'::SingleArgumentReplacement,`anonymous namespace'::VariadicArgumentReplacement>>::__emplace[abi:ne180100]<4ul,`anonymous namespace'::VariadicArgumentReplacement>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v4])(&v7, a1);
  *(_DWORD *)(a1 + 64) = -1;
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 64) = 4;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v7;

  v4 = *a1;
  if (*(_DWORD *)(v4 + 64))
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v7 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  return std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](a2 + 24, (__int128 *)(a3 + 24));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;

  v4 = *a1;
  if (*(_DWORD *)(v4 + 64) == 1)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v6 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = v6;
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 64) = -1;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v7 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  return MIL::Transform::ArgumentDescription::operator=(a2 + 32, a3 + 32);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, uint64_t))off_1EA99E8F0[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 64) = -1;
    *(_DWORD *)(v4 + 64) = 3;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v7 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
  return MIL::Transform::ArgumentDescription::operator=(a2 + 24, a3 + 24);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN12_GLOBAL__N_120AttributeReplacementENS8_14OperatorChangeENS8_20SingleArgumentChangeENS8_25SingleArgumentReplacementENS8_27VariadicArgumentReplacementEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJS9_SA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v6;

  v4 = *a1;
  if (*(_DWORD *)(v4 + 64) == 4)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v6 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = v6;
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
    std::vector<MIL::Transform::ArgumentDescription>::__vdeallocate((void **)(a2 + 24));
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
  }
}

uint64_t MIL::Transform::GetParameter(uint64_t a1, const void *a2, std::string::size_type a3)
{
  uint64_t v6;
  _QWORD *v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  std::logic_error *exception;
  std::string __dst;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (_QWORD *)v6;
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v7, (unsigned __int8 *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &__dst);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return *((_QWORD *)v11 + 5);
}

void sub_1E0695404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  int v15;
  void *v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t MIL::Transform::`anonymous namespace'::MakeNoSuchParameterErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  void *__p;
  char *v36;
  char *v37;
  _QWORD v38[11];
  char v39;
  uint64_t v40;
  char v41;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v38);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"No such parameter '", 19);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, a1, a2);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"' defined for operator '", 24);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = v9;
  else
    v11 = *(_QWORD *)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"'. ", 3);
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3) + 24))
  {
    __p = 0;
    v36 = 0;
    v37 = 0;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
    std::vector<MIL::Passes::BlockInfo>::reserve(&__p, *(_QWORD *)(v14 + 24));
    v15 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3) + 16);
    if (v15)
    {
      do
      {
        if (*((char *)v15 + 39) < 0)
        {
          v16 = (uint64_t *)v15[2];
          v17 = v15[3];
        }
        else
        {
          v16 = v15 + 2;
          v17 = *((unsigned __int8 *)v15 + 39);
        }
        v18 = v36;
        if (v36 >= v37)
        {
          v20 = (v36 - (_BYTE *)__p) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v22 = v37 - (_BYTE *)__p;
          if ((v37 - (_BYTE *)__p) >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v37, v23);
          else
            v24 = 0;
          v25 = &v24[16 * v20];
          *(_QWORD *)v25 = v16;
          *((_QWORD *)v25 + 1) = v17;
          v27 = (char *)__p;
          v26 = v36;
          v28 = v25;
          if (v36 != __p)
          {
            do
            {
              *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
              v28 -= 16;
              v26 -= 16;
            }
            while (v26 != v27);
            v26 = (char *)__p;
          }
          v19 = v25 + 16;
          __p = v28;
          v36 = v25 + 16;
          v37 = &v24[16 * v23];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_QWORD *)v36 = v16;
          *((_QWORD *)v18 + 1) = v17;
          v19 = v18 + 16;
        }
        v36 = v19;
        v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      v19 = v36;
    }
    v29 = 126 - 2 * __clz((v19 - (_BYTE *)__p) >> 4);
    if (v19 == __p)
      v30 = 0;
    else
      v30 = v29;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *,false>((__int128 *)__p, (__int128 *)v19, (uint64_t)&v41, v30, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Valid parameter names are: ", 27);
    v31 = (char *)__p;
    if (v36 != __p)
    {
      v32 = 0;
      v33 = 0;
      do
      {
        if (v33)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", ", 2);
          v31 = (char *)__p;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, *(_QWORD *)&v31[v32], *(_QWORD *)&v31[v32 + 8]);
        ++v33;
        v31 = (char *)__p;
        v32 += 16;
      }
      while (v33 < (v36 - (_BYTE *)__p) >> 4);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)".", 1);
    if (__p)
    {
      v36 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"This operator has no defined parameters.", 40);
  }
  std::stringbuf::str();
  v38[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v38[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v39 < 0)
    operator delete((void *)v38[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1E0C022F8](&v40);
}

void sub_1E06957B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL MIL::Transform::HasWriteEffectAndNoOutputs(MIL::Builder::OperationBuilder **a1)
{
  uint64_t Operator;
  uint64_t v3;
  void *v4;
  _BOOL8 result;

  Operator = MIL::Builder::OperationBuilder::GetOperator(*a1);
  result = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 240))(Operator))
  {
    v3 = MIL::Builder::OperationBuilder::GetOperator(*a1);
    v4 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
    if (MIL::IRMemoryEffect::TryAsStateWriteEffect(v4))
    {
      if (!MIL::Builder::OperationBuilder::GetNumOutputs(*a1))
        return 1;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *,false>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;

uint64_t std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((__int128 *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = result + 16;
    if ((__int128 *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (__int128 *)result;
      do
      {
        v11 = (uint64_t)v10;
        v10 = (__int128 *)v7;
        result = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, v7, v11);
        if ((_DWORD)result)
        {
          v14 = *v10;
          v12 = v9;
          while (1)
          {
            *(_OWORD *)((char *)v6 + v12 + 16) = *(_OWORD *)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 16;
            result = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v14, (uint64_t)v6 + v12);
            if ((result & 1) == 0)
            {
              v13 = (_OWORD *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14;
        }
        v7 = (uint64_t)(v10 + 1);
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((__int128 *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (__int128 *)result;
    v7 = result + 16;
    if ((__int128 *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = (uint64_t)v6;
        v6 = (__int128 *)v7;
        result = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 16);
            result = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 32) = v12;
        }
        v7 = (uint64_t)(v6 + 1);
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a4, (uint64_t)a2, (uint64_t)a1);
  result = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a4, (uint64_t)a3, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a4, (uint64_t)a2, (uint64_t)a1))return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a4, (uint64_t)a3, (uint64_t)a2))return 1;
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    return 2;
  }
  v10 = *a1;
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string_view *,std::__less<void,void> &>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v6;
  unint64_t v7;
  int v8;
  __int128 *v9;
  __int128 v11;
  __int128 v12;

  v4 = a2;
  v11 = *a1;
  if ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v11, (uint64_t)(a2 - 1)) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v11, (uint64_t)v6) & 1) == 0);
  }
  else
  {
    v7 = (unint64_t)(a1 + 1);
    do
    {
      v6 = (__int128 *)v7;
      if (v7 >= (unint64_t)v4)
        break;
      v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v11, v7);
      v7 = (unint64_t)(v6 + 1);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v11, (uint64_t)v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v12 = *v6;
    *v6 = *v4;
    *v4 = v12;
    do
      ++v6;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v11, (uint64_t)v6));
    do
      --v4;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v11, (uint64_t)v4) & 1) != 0);
  }
  v9 = v6 - 1;
  if (v6 - 1 != a1)
    *a1 = *v9;
  *v9 = v11;
  return v6;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string_view *,std::__less<void,void> &>(__int128 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&a1[v6], (uint64_t)&v13) & 1) != 0);
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if ((unint64_t)v7 >= a2)
        break;
      a2 -= 16;
    }
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, a2, (uint64_t)&v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, a2, (uint64_t)&v13));
  }
  if ((unint64_t)v7 < a2)
  {
    v9 = &a1[v6];
    v10 = (__int128 *)a2;
    do
    {
      v14 = *v9;
      v11 = v14;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)v9, (uint64_t)&v13) & 1) != 0);
      do
        --v10;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)v10, (uint64_t)&v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  __int128 *v16;
  __int128 v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)(a2 - 1), (uint64_t)a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = (uint64_t)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__int128 *)((char *)a1 + v14 + 48) = *(__int128 *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v14 -= 16;
        if ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)&v17, (uint64_t)(v15 + 16)) & 1) == 0)
        {
          v16 = (__int128 *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = (uint64_t)v11;
    v12 += 16;
    if (++v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a2, a3, a5);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a5, (uint64_t)a4, (uint64_t)a3))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a5, (uint64_t)a3, (uint64_t)a2))
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a5, (uint64_t)a2, (uint64_t)a1))
      {
        result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a2, a3, a4, a6);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a6, (uint64_t)a5, (uint64_t)a4))
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a6, (uint64_t)a4, (uint64_t)a3))
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a6, (uint64_t)a3, (uint64_t)a2))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a6, (uint64_t)a2, (uint64_t)a1))
        {
          result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *,std::string_view *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a4, (uint64_t)v14, (uint64_t)a1))
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 1;
      do
      {
        v21 = *a1;
        v18 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(a1, a4, v16);
        if (v17 == v18)
        {
          *v18 = v21;
        }
        else
        {
          *v18 = *v17;
          *v17 = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>((uint64_t)a1, (uint64_t)(v18 + 1), a4, v18 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  double result;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v21 = v4;
    v22 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      v12 = ((uint64_t)a4 - a1) >> 3;
      v13 = v12 + 1;
      v14 = (__int128 *)(a1 + 16 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a2, a1 + 16 * (v12 + 1), (uint64_t)(v14 + 1)))
      {
        ++v14;
        v13 = v15;
      }
      if ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a2, (uint64_t)v14, (uint64_t)v7) & 1) == 0)
      {
        v20 = *v7;
        do
        {
          v17 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v18 = (2 * v13) | 1;
          v14 = (__int128 *)(a1 + 16 * v18);
          v19 = 2 * v13 + 2;
          if (v19 < a3)
          {
            if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a2, a1 + 16 * v18, (uint64_t)(v14 + 1)))
            {
              ++v14;
              v18 = v19;
            }
          }
          v7 = v17;
          v13 = v18;
        }
        while (!std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a2, (uint64_t)v14, (uint64_t)&v20));
        result = *(double *)&v20;
        *v17 = v20;
      }
    }
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a2, (uint64_t)&a1[v6 + 1], (uint64_t)&a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v15 = v4;
    v16 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 16 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 16);
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)v10, a2 - 16))
    {
      v14 = *v11;
      do
      {
        v13 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 16 * v9);
        v11 = v13;
      }
      while ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)v10, (uint64_t)&v14) & 1) != 0);
      result = *(double *)&v14;
      *v13 = v14;
    }
  }
  return result;
}

uint64_t MIL::Transform::MatchContext::GetMILContext(MIL::Transform::MatchContext *this)
{
  return **(_QWORD **)this;
}

_QWORD **MIL::Transform::MatchContext::GetMILContextPtr@<X0>(_QWORD **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = (*this)[1];
  *a2 = **this;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t MIL::Transform::MatchContext::RejectMatch(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)this + 48) = 1;
  return this;
}

uint64_t MIL::Transform::MatchContext::AddOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;

  v4 = a3[1];
  if (v4)
    v5 = *a3;
  else
    v5 = 0;
  return MIL::Transform::MatchContext::AddOperation(a1, a2, v5, v4, a4);
}

uint64_t MIL::Transform::MatchContext::AddOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  _OWORD v8[2];
  int v9;

  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  v6 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, 1uLL, a3, a4, (uint64_t)v8, 0);
  MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v6, 0, a5);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v8);
}

void sub_1E06968B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::MatchContext::AddVariadicParamOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3[1];
  if (v4)
    v5 = *a3;
  else
    v5 = 0;
  return MIL::Transform::MatchContext::AddVariadicParamOperation(a1, a2, v5, v4, a4);
}

uint64_t MIL::Transform::MatchContext::AddVariadicParamOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  _OWORD v8[2];
  int v9;

  memset(v8, 0, sizeof(v8));
  v9 = 1065353216;
  v6 = MIL::Transform::MatchContext::MatchContextImpl::AddVariadicParamOperation(*a1, a2, 1uLL, a3, a4, (uint64_t)v8, 0);
  MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v6, 0, a5);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v8);
}

void sub_1E0696940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::MatchContext::AddOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a3[1];
  if (v7)
    v8 = *a3;
  else
    v8 = 0;
  v9 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, 1uLL, v8, v7, a4, 0);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v9, 0, a5);
}

uint64_t MIL::Transform::MatchContext::AddOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  v7 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, 1uLL, a3, a4, a5, 0);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v7, 0, a6);
}

uint64_t MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *a1;
  v8 = a3[1];
  if (v8)
    v9 = *a3;
  else
    v9 = 0;
  v10 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(v7, a2, 1uLL, v9, v8, a4, 1);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v10, 0, a5);
}

uint64_t MIL::Transform::MatchContext::MatchContextImpl::AddOperation(uint64_t *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v12;
  const MIL::Transform::ArgumentDescription *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v21;
  _BYTE *v22;
  char *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char **v31;
  char v32;
  _BYTE v33[32];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::reserve((uint64_t *)&v28, a5);
  if (a5)
  {
    v12 = 40 * a5;
    v13 = (const MIL::Transform::ArgumentDescription *)(a4 + 8);
    do
    {
      MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)v33, v13);
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v31 = &v21;
      v32 = 0;
      v21 = (char *)operator new(0x20uLL);
      v22 = v21;
      v23 = v21 + 32;
      v22 = (_BYTE *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Transform::ArgumentDescription>,MIL::Transform::ArgumentDescription const*,MIL::Transform::ArgumentDescription const*,MIL::Transform::ArgumentDescription*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v34, (uint64_t)v21);
      v24 = (char **)*((_QWORD *)v13 - 1);
      v26 = 0;
      v27 = 0;
      v25 = 0;
      std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(&v25, (uint64_t)v21, (uint64_t)v22, (v22 - v21) >> 5);
      v14 = v29;
      if ((unint64_t)v29 >= v30)
      {
        v15 = std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__push_back_slow_path<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>((uint64_t *)&v28, &v24);
      }
      else
      {
        *(_QWORD *)v29 = v24;
        *((_QWORD *)v14 + 2) = 0;
        *((_QWORD *)v14 + 3) = 0;
        *((_QWORD *)v14 + 1) = 0;
        std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>((_QWORD *)v14 + 1, v25, v26, (v26 - v25) >> 5);
        v15 = (uint64_t)(v14 + 32);
      }
      v29 = (char *)v15;
      v31 = (char **)&v25;
      std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      v31 = &v21;
      std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)v33);
      v13 = (const MIL::Transform::ArgumentDescription *)((char *)v13 + 40);
      v12 -= 40;
    }
    while (v12);
  }
  if (v29 == v28)
    v16 = 0;
  else
    v16 = (uint64_t)v28;
  v17 = MIL::Transform::MatchContext::MatchContextImpl::AddVariadicParamOperation(a1, a2, a3, v16, (v29 - v28) >> 5, a6, a7);
  v24 = &v28;
  std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  return v17;
}

void sub_1E0696C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a14 = (void **)&a18;
  std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::MatchContext::AddVariadicParamOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a3[1];
  if (v7)
    v8 = *a3;
  else
    v8 = 0;
  v9 = MIL::Transform::MatchContext::MatchContextImpl::AddVariadicParamOperation(*a1, a2, 1uLL, v8, v7, a4, 0);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v9, 0, a5);
}

uint64_t MIL::Transform::MatchContext::AddVariadicParamOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  v7 = MIL::Transform::MatchContext::MatchContextImpl::AddVariadicParamOperation(*a1, a2, 1uLL, a3, a4, a5, 0);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v7, 0, a6);
}

uint64_t MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  v7 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, 1uLL, a3, a4, a5, 1);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v7, 0, a6);
}

uint64_t MIL::Transform::MatchContext::MatchContextImpl::AddVariadicParamOperation(uint64_t *a1, char *__s, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v12;
  size_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t Operator;
  size_t v20;
  uint64_t Parameter;
  uint64_t v22;
  const MIL::Transform::ArgumentDescription *v23;
  const MIL::Transform::ArgumentDescription *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  MIL::IRArgument *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  __int128 v43;
  int64x2_t v44;
  _OWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *i;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  size_t v74;
  void *v75;
  _QWORD *OpsetName;
  int v77;
  size_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::logic_error *exception;
  std::string *v93;
  __int128 v94;
  unint64_t v95;
  std::string *p_p;
  std::string::size_type size;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  char *__sa;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::string v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  std::string __p;
  void *__s2[3];
  std::__shared_weak_count *v122;
  unint64_t v123;
  char v124;
  std::string v125;
  std::string v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  __int128 v129;
  _OWORD v130[2];
  int v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::string v134;
  uint64_t v135;
  unsigned __int8 *v136;
  std::string v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v13 = strlen(__s);
  __sa = __s;
  MIL::Matching::GetOperatorByQualifiedName(v12, (unsigned __int8 *)__s, v13, &v132);
  memset(v130, 0, sizeof(v130));
  v131 = 1065353216;
  v127 = v132;
  v128 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v105 = a6;
  MIL::Builder::OperationBuilder::Make(&v127, (uint64_t *)&v129);
  v16 = v128;
  if (!v128)
    goto LABEL_8;
  v17 = (unint64_t *)&v128->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!a5)
      goto LABEL_61;
  }
  else
  {
LABEL_8:
    if (!a5)
      goto LABEL_61;
  }
  v106 = a4 + 32 * a5;
  do
  {
    Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v129);
    v20 = strlen(*(const char **)a4);
    Parameter = MIL::Transform::GetParameter(Operator, *(const void **)a4, v20);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Parameter + 16))(Parameter);
    std::unordered_set<MIL::IRValueType const*>::unordered_set((uint64_t)&v126, v22);
    memset(&v125, 0, sizeof(v125));
    std::vector<std::shared_ptr<MIL::IROperation>>::reserve(&v125.__r_.__value_.__l.__data_, (uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 5);
    v24 = *(const MIL::Transform::ArgumentDescription **)(a4 + 8);
    v23 = *(const MIL::Transform::ArgumentDescription **)(a4 + 16);
    while (v24 != v23)
    {
      v25 = MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)&v137, v24);
      MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateIRArgument(__s2, v25, *a1, &v126, a1 + 7);
      std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100](&v125.__r_.__value_.__l.__data_, (__int128 *)__s2);
      std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)a4);
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v130, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v134);
      v27 = (MIL::IRArgument *)__s2[0];
      v117 = __s2[2];
      v118 = v122;
      if (v122)
      {
        v28 = (unint64_t *)&v122->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::Transform::MatchContext::MatchContextImpl::GetTypedArgument(v27, (uint64_t *)&v117, a1[4], (uint64_t *)&v119);
      v30 = *((_QWORD *)v26 + 7);
      v31 = (_OWORD *)*((_QWORD *)v26 + 6);
      if ((unint64_t)v31 >= v30)
      {
        v32 = *((_QWORD *)v26 + 5);
        v33 = ((uint64_t)v31 - v32) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v35 = v30 - v32;
        if (v35 >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v136 = v26 + 56;
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 56), v36);
        v39 = &v37[16 * v33];
        *(_OWORD *)v39 = v119;
        v119 = 0uLL;
        v41 = (_QWORD *)*((_QWORD *)v26 + 5);
        v40 = (_QWORD *)*((_QWORD *)v26 + 6);
        if (v40 == v41)
        {
          v44 = vdupq_n_s64((unint64_t)v40);
          v42 = &v37[16 * v33];
        }
        else
        {
          v42 = &v37[16 * v33];
          do
          {
            v43 = *((_OWORD *)v40 - 1);
            v40 -= 2;
            *((_OWORD *)v42 - 1) = v43;
            v42 -= 16;
            *v40 = 0;
            v40[1] = 0;
          }
          while (v40 != v41);
          v44 = *(int64x2_t *)(v26 + 40);
        }
        v45 = v39 + 16;
        *((_QWORD *)v26 + 5) = v42;
        *((_QWORD *)v26 + 6) = v39 + 16;
        *(int64x2_t *)&v134.__r_.__value_.__r.__words[1] = v44;
        v46 = *((_QWORD *)v26 + 7);
        *((_QWORD *)v26 + 7) = &v37[16 * v38];
        v135 = v46;
        v134.__r_.__value_.__r.__words[0] = v44.i64[0];
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v134);
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
        *((_QWORD *)v26 + 6) = v45;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
        *v31 = v119;
        v119 = 0uLL;
        *((_QWORD *)v26 + 6) = v31 + 1;
      }
      v50 = v118;
      if (v118)
      {
        v51 = (unint64_t *)&v118->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v124)
      v53 = v122;
      if (v122)
      {
        v54 = (unint64_t *)&v122->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)__s2[1];
      if (__s2[1])
      {
        v57 = (unint64_t *)((char *)__s2[1] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)&v137);
      v24 = (const MIL::Transform::ArgumentDescription *)((char *)v24 + 32);
    }
    v59 = v129;
    std::string::basic_string[abi:ne180100]<0>(v113, *(char **)a4);
    MIL::Builder::OperationBuilder::AddInput(v59, (uint64_t)v113, (uint64_t **)&v125, &v115);
    v60 = v116;
    if (v116)
    {
      v61 = (unint64_t *)&v116->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v114 < 0)
      operator delete(v113[0]);
    __s2[0] = &v125;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s2);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v126);
    a4 += 32;
  }
  while (a4 != v106);
LABEL_61:
  for (i = *(uint64_t **)(v105 + 16); i; i = (uint64_t *)*i)
  {
    v64 = v129;
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&v110, (const std::string::value_type *)i[2], i[3]);
    else
      v110 = *(std::string *)(i + 2);
    v65 = (std::__shared_weak_count *)i[6];
    v108 = i[5];
    v109 = v65;
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
    MIL::Builder::OperationBuilder::SetAttribute(v64, (uint64_t)&v110, &v108, &v111);
    v68 = v112;
    if (v112)
    {
      v69 = (unint64_t *)&v112->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v109;
    if (v109)
    {
      v72 = (unint64_t *)&v109->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
  }
  v74 = strlen(__sa);
  MIL::Matching::ParseQualifiedOpName((unsigned __int8 *)__sa, v74, __s2);
  if (a7)
  {
    v75 = __s2[1];
LABEL_90:
    v80 = v129;
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v134, (char *)__s2[0], (char *)__s2[0] + (unint64_t)v75, (unint64_t)v75);
    MIL::Builder::OperationBuilder::SetSpecificationOpsetName(v80, &v134);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  OpsetName = (_QWORD *)MIL::Builder::BlockBuilder::GetOpsetName((MIL::Builder::BlockBuilder *)a1[4]);
  v77 = *((char *)OpsetName + 23);
  if (v77 >= 0)
    v78 = *((unsigned __int8 *)OpsetName + 23);
  else
    v78 = OpsetName[1];
  v75 = __s2[1];
  if ((void *)v78 != __s2[1])
    goto LABEL_90;
  if (v77 < 0)
    OpsetName = (_QWORD *)*OpsetName;
  v79 = memcmp(OpsetName, __s2[0], v78);
  v75 = (void *)v78;
  if (v79)
    goto LABEL_90;
LABEL_92:
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132) > a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
    std::operator+<char>();
    v93 = std::string::append(&v125, "' produces at least ");
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
    std::to_string(&__p, v95);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v98 = std::string::append(&v137, (const std::string::value_type *)p_p, size);
    v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v126.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    v100 = std::string::append(&v126, " outputs");
    v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v134);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v107 = v129;
  v129 = 0uLL;
  v81 = MIL::Transform::MatchContext::MatchContextImpl::InferOutputTypesAndAddOperation((uint64_t)a1, (uint64_t)v130, a3, (MIL::Builder::OperationBuilder **)&v107);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v130);
  v88 = v133;
  if (v133)
  {
    v89 = (unint64_t *)&v133->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  return v81;
}

void sub_1E06975C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  int v57;
  uint64_t v58;

  if (*(char *)(v58 - 153) < 0)
    operator delete(*(void **)(v58 - 176));
  if (a56 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  if (a50 < 0)
  {
    operator delete(a45);
    if ((v57 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v58 - 256);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v58 - 240);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v58 - 192);
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v56);
  goto LABEL_14;
}

uint64_t MIL::Transform::MatchContext::AddOperation@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, std::string::size_type *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;

  v4 = a3[1];
  if (v4)
    v5 = *a3;
  else
    v5 = 0;
  return MIL::Transform::MatchContext::AddOperation(a1, a2, v5, v4, a4);
}

uint64_t MIL::Transform::MatchContext::AddOperation@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  MIL::Builder::OperationBuilder *Operation;
  uint64_t v10;
  std::logic_error *exception;
  MIL::MatchingPrivate::MatchItem *v13;

  MIL::Matching::MatchView::MatchView(&v13, a2);
  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchPrivate::GetOperation(&v13);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v13);
  if (MIL::Builder::OperationBuilder::GetNumOutputs(Operation) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Source operation does not have exactly one output. Please use AddMultiOutputOperation() instead.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v10 = MIL::Transform::MatchContext::MatchContextImpl::AddOperationFromPrototype(*a1, Operation, a3, a4);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v10, 0, a5);
}

void sub_1E0697874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::MatchContext::MatchContextImpl::AddOperationFromPrototype(uint64_t *a1, MIL::Builder::OperationBuilder *this, std::string::size_type a3, uint64_t a4)
{
  _QWORD *Parameters;
  uint64_t Attributes;
  uint64_t v10;
  uint64_t *i;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int64x2_t *v16;
  uint64_t v17;
  MIL::IRArgument *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  _OWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t NumOutputs;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  MIL::Builder::OperationBuilder *v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  _OWORD v61[2];
  int v62;
  __int128 v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _BYTE v66[16];
  uint64_t *v67;
  _BYTE v68[24];
  _BYTE v69[40];
  __int128 *v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;

  MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr((uint64_t)this, &v64);
  Parameters = (_QWORD *)MIL::Builder::OperationBuilder::GetParameters(this);
  MIL::Transform::MatchContext::MatchContextImpl::ConvertParamMap(Parameters, (uint64_t)v66);
  MIL::Builder::OperationBuilder::GetBlocks(this, (uint64_t)v68);
  Attributes = MIL::Builder::OperationBuilder::GetAttributes(this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v69, Attributes);
  if (a4)
  {
    v10 = a4 << 7;
    do
    {
      MIL::TransformPrivate::OperationChangePrivate::ApplyChange(&v64, a3, *a1, (uint64_t)(a1 + 7));
      a3 += 128;
      v10 -= 128;
    }
    while (v10);
  }
  v56 = this;
  MIL::Transform::MatchContext::MatchContextImpl::CreateOperationBuilderFromProperties((MIL::Transform::MatchContext::MatchContextImpl *)&v64, (uint64_t *)&v63);
  memset(v61, 0, sizeof(v61));
  v62 = 1065353216;
  for (i = v67; i; i = (uint64_t *)*i)
  {
    v70 = (__int128 *)(i + 2);
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v61, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v70);
    v14 = i[5];
    v13 = i[6];
    if (v14 != v13)
    {
      v15 = v12;
      v16 = (int64x2_t *)(v12 + 40);
      v17 = (uint64_t)(v12 + 56);
      do
      {
        v18 = *(MIL::IRArgument **)v14;
        v19 = *(std::__shared_weak_count **)(v14 + 24);
        v58 = *(_QWORD *)(v14 + 16);
        v59 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        MIL::Transform::MatchContext::MatchContextImpl::GetTypedArgument(v18, &v58, a1[4], (uint64_t *)&v60);
        v22 = (_OWORD *)*((_QWORD *)v15 + 6);
        v23 = *((_QWORD *)v15 + 7);
        if ((unint64_t)v22 >= v23)
        {
          v24 = ((uint64_t)v22 - v16->i64[0]) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v26 = v23 - v16->i64[0];
          if (v26 >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          v73 = v17;
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v17, v27);
          v30 = &v28[16 * v24];
          *(_OWORD *)v30 = v60;
          v60 = 0uLL;
          v32 = (_QWORD *)*((_QWORD *)v15 + 5);
          v31 = (_QWORD *)*((_QWORD *)v15 + 6);
          if (v31 == v32)
          {
            v35 = vdupq_n_s64((unint64_t)v31);
            v33 = &v28[16 * v24];
          }
          else
          {
            v33 = &v28[16 * v24];
            do
            {
              v34 = *((_OWORD *)v31 - 1);
              v31 -= 2;
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 16;
              *v31 = 0;
              v31[1] = 0;
            }
            while (v31 != v32);
            v35 = *v16;
          }
          v36 = v30 + 16;
          *((_QWORD *)v15 + 5) = v33;
          *((_QWORD *)v15 + 6) = v30 + 16;
          v71 = v35;
          v37 = *((_QWORD *)v15 + 7);
          *((_QWORD *)v15 + 7) = &v28[16 * v29];
          v72 = v37;
          v70 = (__int128 *)v35.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v70);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          *((_QWORD *)v15 + 6) = v36;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        else
        {
          *v22 = v60;
          v60 = 0uLL;
          *((_QWORD *)v15 + 6) = v22 + 1;
        }
        v41 = v59;
        if (v59)
        {
          v42 = (unint64_t *)&v59->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (*(_BYTE *)(v14 + 40))
        v14 += 48;
      }
      while (v14 != v13);
    }
  }
  NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs(v56);
  v57 = v63;
  v63 = 0uLL;
  v45 = MIL::Transform::MatchContext::MatchContextImpl::InferOutputTypesAndAddOperation((uint64_t)a1, (uint64_t)v61, NumOutputs, (MIL::Builder::OperationBuilder **)&v57);
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v61);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v69);
  v70 = (__int128 *)v68;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::~__hash_table((uint64_t)v66);
  v52 = v65;
  if (v65)
  {
    v53 = (unint64_t *)&v65->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return v45;
}

void sub_1E0697C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  MIL::TransformPrivate::OperationProperties::~OperationProperties((MIL::TransformPrivate::OperationProperties *)&a28);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::MatchContext::AddMultiOutputOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;

  v5 = a4[1];
  if (v5)
    v6 = *a4;
  else
    v6 = 0;
  return MIL::Transform::MatchContext::AddMultiOutputOperation(a1, a2, a3, v6, v5, a5);
}

uint64_t MIL::Transform::MatchContext::AddMultiOutputOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  _OWORD v10[2];
  int v11;

  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v8 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, a3, a4, a5, (uint64_t)v10, 0);
  MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v8, a3, a6);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v10);
}

void sub_1E0697D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::MatchContext::AddMultiOutputOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a4[1];
  if (v9)
    v10 = *a4;
  else
    v10 = 0;
  v11 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, a3, v10, v9, a5, 0);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v11, a3, a6);
}

uint64_t MIL::Transform::MatchContext::AddMultiOutputOperation@<X0>(uint64_t **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v9;

  v9 = MIL::Transform::MatchContext::MatchContextImpl::AddOperation(*a1, a2, a3, a4, a5, a6, 0);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v9, a3, a7);
}

uint64_t MIL::Transform::MatchContext::AddMultiOutputOperation@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, std::string::size_type *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;

  v4 = a3[1];
  if (v4)
    v5 = *a3;
  else
    v5 = 0;
  return MIL::Transform::MatchContext::AddMultiOutputOperation(a1, a2, v5, v4, a4);
}

uint64_t MIL::Transform::MatchContext::AddMultiOutputOperation@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  MIL::Builder::OperationBuilder *Operation;
  uint64_t v10;
  uint64_t NumOutputs;
  MIL::MatchingPrivate::MatchItem *v13;

  MIL::Matching::MatchView::MatchView(&v13, a2);
  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchPrivate::GetOperation(&v13);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v13);
  v10 = MIL::Transform::MatchContext::MatchContextImpl::AddOperationFromPrototype(*a1, Operation, a3, a4);
  NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
  return MIL::TransformPrivate::ArgumentDescriptionPrivate::CreateNewOperationOutput(v10, NumOutputs, a5);
}

void sub_1E0697EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)va);
  _Unwind_Resume(a1);
}

void MIL::Transform::MatchContext::MapOutput(MIL::Transform::MatchContext *this, const MIL::Transform::NewOperationOutput *a2, const MIL::Matching::OutputView *a3)
{
  uint64_t OperationAndOutputIndex;
  const MIL::Matching::OutputView *v6;
  const MIL::Matching::OutputView *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  __int128 v23;

  OperationAndOutputIndex = MIL::MatchingPrivate::MatchPrivate::GetOperationAndOutputIndex(a3, a2);
  v7 = v6;
  v8 = MIL::MatchingPrivate::MatchPrivate::GetOperationAndOutputIndex(a2, v6);
  v10 = v8;
  v11 = v9;
  v12 = *(_QWORD **)this;
  v14 = (uint64_t *)v12[11];
  v13 = v12[12];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (uint64_t *)v12[10];
    v17 = ((char *)v14 - (char *)v16) >> 5;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v19 = v13 - (_QWORD)v16;
    if (v19 >> 4 > v18)
      v18 = v19 >> 4;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
      v20 = 0x7FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = (char *)operator new(32 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = (uint64_t *)&v21[32 * v17];
    *v22 = OperationAndOutputIndex;
    v22[1] = (uint64_t)v7;
    v22[2] = v10;
    v22[3] = v11;
    v15 = v22 + 4;
    if (v14 != v16)
    {
      do
      {
        v23 = *((_OWORD *)v14 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v14 - 2);
        *((_OWORD *)v22 - 1) = v23;
        v22 -= 4;
        v14 -= 4;
      }
      while (v14 != v16);
      v14 = (uint64_t *)v12[10];
    }
    v12[10] = v22;
    v12[11] = v15;
    v12[12] = &v21[32 * v20];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = OperationAndOutputIndex;
    v14[1] = (uint64_t)v7;
    v15 = v14 + 4;
    v14[2] = v8;
    v14[3] = v9;
  }
  v12[11] = v15;
}

void MIL::Transform::ProgramTransformer::~ProgramTransformer(MIL::Transform::ProgramTransformer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Transform::ProgramTransformer::ProgramTransformerImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<MIL::Transform::ProgramTransformer::ProgramTransformerImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

MIL::Transform::ProgramTransformer *MIL::Transform::ProgramTransformer::ProgramTransformer(MIL::Transform::ProgramTransformer *this, const MIL::IRProgram *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;

  (*(void (**)(__int128 *__return_ptr, const MIL::IRProgram *))(*(_QWORD *)a2 + 48))(&v12, a2);
  v4 = operator new();
  v13 = v12;
  v12 = 0uLL;
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ProgramTransformerImpl(v4, &v13, a2);
  *(_QWORD *)this = v4;
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return this;
}

void sub_1E0698150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1E0C023A0](v11, 0x1022C40DEB6DFD1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::MatchAndReplace(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplace(*a1, a2, a3);
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplace(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[752];

  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper::MatchAndReplaceHelper((uint64_t)v6, a1, a1 + 2);
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace((uint64_t)a1, (uint64_t)v6, a2, a3);
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper::~MatchAndReplaceHelper((MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper *)v6);
}

void sub_1E06981F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper::~MatchAndReplaceHelper((MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper *)&a9);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::MatchAndReplace(MIL::MILContext ***a1, const MIL::Matching::Pattern *a2, uint64_t a3)
{
  _BYTE v5[16];

  MIL::Matching::CompiledPattern::CompiledPattern((MIL::Matching::CompiledPattern *)v5, a2, **a1);
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplace(*a1, (uint64_t)v5, a3);
  MIL::Matching::CompiledPattern::~CompiledPattern((MIL::Matching::CompiledPattern *)v5);
}

void sub_1E069825C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MIL::Matching::CompiledPattern::~CompiledPattern((MIL::Matching::CompiledPattern *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::ProgramTransformer::EliminateDeadNodes(MIL::Builder::ProgramBuilder ***this)
{
  return MIL::Transform::ProgramTransformer::ProgramTransformerImpl::EliminateDeadNodes(*this);
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::EliminateDeadNodes(MIL::Builder::ProgramBuilder **this)
{
  uint64_t result;
  uint64_t **i;
  uint64_t **j;
  unsigned __int8 *Name;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::runtime_error *exception;
  MIL::Builder::BlockBuilder *v14;
  std::__shared_weak_count *v15;
  std::string v16;
  __int128 v17;
  __int128 v18;
  int v19;
  _OWORD v20[2];
  int v21;
  std::string *v22;

  result = MIL::Builder::ProgramBuilder::GetFunctions(this[4]);
  for (i = *(uint64_t ***)(result + 16); i; i = (uint64_t **)*i)
  {
    memset(v20, 0, sizeof(v20));
    v21 = 1065353216;
    MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)i[5], (uint64_t)&v17);
    for (j = (uint64_t **)v18; j; j = (uint64_t **)*j)
    {
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName((MIL::Builder::Variable::VariableImpl **)j[2]);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v20, Name, (uint64_t)Name);
    }
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v17);
    v17 = 0u;
    v18 = 0u;
    v19 = 1065353216;
    v6 = (_QWORD *)(MIL::Builder::FunctionBuilder::GetSpecializations((MIL::Builder::FunctionBuilder *)i[5]) + 16);
    while (1)
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        break;
      v7 = (std::__shared_weak_count *)v6[6];
      v14 = (MIL::Builder::BlockBuilder *)v6[5];
      v15 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetBlockOutsAndWriteEffectOpIns(&v14, &v16);
      MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps((uint64_t)this, v6 + 5, v20, (uint64_t *)&v16, &v17);
      v22 = &v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      v10 = v15;
      if (v15)
      {
        v11 = (unint64_t *)&v15->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (*((_QWORD *)&v18 + 1))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "found unresolved names! please check your inputs & outputs");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
    result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v20);
  }
  return result;
}

void sub_1E0698414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::ExtractSubProgram(uint64_t *a1, unsigned __int8 **a2, uint64_t *a3, unsigned __int8 *a4)
{
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ExtractSubProgram(*a1, a2, a3, a4);
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ExtractSubProgram(uint64_t a1, unsigned __int8 **a2, uint64_t *a3, unsigned __int8 *a4)
{
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl **v7;
  unsigned __int8 *v8;
  uint64_t i;
  uint64_t v10;
  MIL::Builder::OperationBuilder *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *j;
  MIL::Builder::Variable::VariableImpl **v23;
  uint64_t Type;
  unsigned __int8 *Name;
  uint64_t k;
  uint64_t v27;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  MIL::Builder::Variable::VariableImpl ***v32;
  MIL::Builder::Variable::VariableImpl ***v33;
  MIL::Builder::Variable::VariableImpl **v34;
  __int128 *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl **v41;
  __int128 v42;
  unsigned __int8 *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *v50;
  std::logic_error *exception;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::logic_error *v54;
  std::runtime_error *v55;
  uint64_t v56;
  std::string v57;
  std::string v58;
  _BYTE v59[32];
  int v60;
  __int128 v61;
  _QWORD *v62;
  _OWORD v63[2];
  int v64;
  MIL::Builder::OperationBuilder *v65;
  std::__shared_weak_count *v66;
  MIL::Builder::BlockBuilder *v67;
  std::__shared_weak_count *v68;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl **v69;
  std::__shared_weak_count *v70;
  __int128 *v71;

  MIL::Builder::ProgramBuilder::GetFunction(*(_QWORD *)(a1 + 32), a4, &v69);
  v7 = v69;
  v8 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization((MIL::Builder::FunctionBuilder *)v69);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v7, v8, &v67);
  MIL::Builder::BlockBuilder::GetOperations(v67, (uint64_t)v63);
  v10 = *((_QWORD *)&v63[0] + 1);
  for (i = *(_QWORD *)&v63[0]; i != v10; i += 16)
  {
    v11 = *(MIL::Builder::OperationBuilder **)i;
    v12 = *(std::__shared_weak_count **)(i + 8);
    *(_QWORD *)&v61 = *(_QWORD *)i;
    *((_QWORD *)&v61 + 1) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v65 = v11;
      v66 = v12;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    else
    {
      v65 = v11;
      v66 = 0;
    }
    v16 = MIL::Transform::HasWriteEffectAndNoOutputs(&v65);
    v17 = v66;
    if (v66)
    {
      v18 = (unint64_t *)&v66->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v16)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "This ExtractSubProgram function with inputs/outputs arguments is not supported currently for programs with ops that have write-state-effect and no outputs. The other ExtractSubProgram overload with op indices is supported.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    if (*((_QWORD *)&v61 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v61 + 1) + 16))(*((_QWORD *)&v61 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v61 + 1));
      }
    }
  }
  *(_QWORD *)&v61 = v63;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  memset(v63, 0, sizeof(v63));
  v64 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs(v69, (uint64_t)&v61);
  for (j = v62; j; j = (_QWORD *)*j)
  {
    v23 = (MIL::Builder::Variable::VariableImpl **)j[2];
    Type = MIL::Builder::Variable::TryGetType(v23);
    Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v23);
    if (!Type)
    {
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v52, (const std::string *)v59);
      __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *(_QWORD *)v59 = Name;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v63, Name, (uint64_t)&std::piecewise_construct, (__int128 **)v59)+ 5) = Type;
  }
  v56 = a1;
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v61);
  MIL::Builder::BlockBuilder::GetOperations(v67, (uint64_t)&v61);
  v27 = *((_QWORD *)&v61 + 1);
  for (k = v61; k != v27; k += 16)
  {
    v28 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)k;
    v29 = *(std::__shared_weak_count **)(k + 8);
    v58.__r_.__value_.__r.__words[0] = *(_QWORD *)k;
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    MIL::Builder::OperationBuilder::GetOutputs(v28, (void **)v59);
    v32 = *(MIL::Builder::Variable::VariableImpl ****)&v59[8];
    v33 = *(MIL::Builder::Variable::VariableImpl ****)v59;
    if (*(_QWORD *)v59 != *(_QWORD *)&v59[8])
    {
      do
      {
        v34 = *v33;
        if (!*v33)
        {
          v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "invalid operation output variable.");
          __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v35 = (__int128 *)MIL::Builder::Variable::GetName(*v33);
        v36 = MIL::Builder::Variable::TryGetType(v34);
        v71 = v35;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v63, (unsigned __int8 *)v35, (uint64_t)&std::piecewise_construct, &v71)+ 5) = v36;
        ++v33;
      }
      while (v33 != v32);
      v33 = *(MIL::Builder::Variable::VariableImpl ****)v59;
    }
    if (v33)
    {
      *(_QWORD *)&v59[8] = v33;
      operator delete(v33);
    }
    if (v29)
    {
      v37 = (unint64_t *)&v29->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  *(_QWORD *)v59 = &v61;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  if (*a3 == a3[1])
  {
    v54 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v54, "output names cannot be empty");
    v54->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v54, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)&v61, *a2, a2[1]);
  memset(v59, 0, sizeof(v59));
  v60 = 1065353216;
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(v56, (std::string::size_type *)&v67, &v61, a3, v59);
  if (*(_QWORD *)&v59[24])
  {
    v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "found unresolved names! please check your inputs & outputs");
    __cxa_throw(v55, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Builder::BlockBuilder::UpdateOutputNames((std::string::size_type)v67, (__int128 **)a3);
  MIL::Builder::FunctionBuilder::ClearInputs((MIL::Builder::FunctionBuilder *)v69);
  v39 = *a2;
  v40 = a2[1];
  if (*a2 != v40)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v63, v39))
      {
        v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v53, &v58);
        __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v41 = v69;
      if ((char)v39[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
      }
      else
      {
        v42 = *(_OWORD *)v39;
        v57.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v42;
      }
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      v43 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v63, v39, (uint64_t)&std::piecewise_construct, (__int128 **)&v58);
      MIL::Builder::FunctionBuilder::AddInput((std::string::size_type)v41, (uint64_t)&v57, *((_QWORD *)v43 + 5));
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v39 += 24;
    }
    while (v39 != v40);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v59);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v61);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v63);
  v44 = v68;
  if (v68)
  {
    v45 = (unint64_t *)&v68->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v70;
  if (v70)
  {
    v48 = (unint64_t *)&v70->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1E0698A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  uint64_t v37;

  __cxa_free_exception(v36);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a36);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 136);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 120);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::ExtractSubProgram(uint64_t **a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ExtractSubProgram(*a1, a2, a3, a4);
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ExtractSubProgram(uint64_t *a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  MIL::Builder::FunctionBuilder *v8;
  unsigned __int8 *v9;
  uint64_t i;
  std::string::size_type v11;
  uint64_t Type;
  MIL::Builder::FunctionBuilder *v13;
  __int128 v14;
  uint64_t v15;
  std::string::size_type v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::logic_error *exception;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  unint64_t NumOperations;
  std::string *v34;
  std::string::size_type size;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::logic_error *v40;
  unint64_t v41;
  std::logic_error *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string __p;
  std::string v52;
  __int128 *v53[3];
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  MIL::Builder::BlockBuilder::BlockBuilderImpl **v59;
  std::__shared_weak_count *v60;
  MIL::Builder::FunctionBuilder *v61;
  std::__shared_weak_count *v62;

  MIL::Builder::ProgramBuilder::GetFunction(a1[4], a4, &v61);
  v8 = v61;
  v9 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(v61);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v8, v9, &v59);
  if (MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)v59) < a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v55, a3);
    v29 = std::string::insert(&v55, 0, "Attempted to extract upto opIdxEnd ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v56, " , but block contains only a total of ");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    NumOperations = MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)v59);
    std::to_string(&v54, NumOperations);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v54;
    else
      v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      size = v54.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v57, (const std::string::value_type *)v34, size);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v58, " operations.");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v52);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (a2 >= a3)
  {
    v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v41 = a2;
    v42 = v40;
    std::to_string(&v56, v41);
    v43 = std::string::insert(&v56, 0, "opIdxBegin ");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v57, " needs to be strictly less than opIdxEnd ");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, a3);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v55;
    else
      v47 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      v48 = v55.__r_.__value_.__l.__size_;
    v49 = std::string::append(&v58, (const std::string::value_type *)v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v42, &v52);
    v42->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v42, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetInputsAndOutputs(a1, a4, a2, a3, &v52);
  MIL::Builder::FunctionBuilder::ClearInputs(v61);
  v11 = v52.__r_.__value_.__l.__size_;
  for (i = v52.__r_.__value_.__r.__words[0]; i != v11; i += 24)
  {
    Type = MIL::Builder::BlockBuilder::GetType((uint64_t)v59, i);
    if (Type)
    {
      v13 = v61;
      if (*(char *)(i + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
      }
      else
      {
        v14 = *(_OWORD *)i;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      MIL::Builder::FunctionBuilder::AddInput((std::string::size_type)v13, (uint64_t)&__p, Type);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v15 = MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)v59);
  std::vector<unsigned long>::vector(&v58, a2 - a3 + v15);
  v16 = v58.__r_.__value_.__r.__words[0];
  v17 = (_QWORD *)(v58.__r_.__value_.__r.__words[0] + 8 * (int)a2);
  if (a2 << 32)
  {
    v18 = 0;
    v19 = 8 * (int)a2;
    do
    {
      *(_QWORD *)(v16 + 8 * v18) = v18;
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v20 = v58.__r_.__value_.__l.__size_;
  while (v17 != (_QWORD *)v20)
    *v17++ = a3++;
  if (v20 == v16)
    v21 = 0;
  else
    v21 = (unint64_t *)v16;
  MIL::Builder::BlockBuilder::RemoveOperations((uint64_t)v59, v21, (uint64_t)(v20 - v16) >> 3, 1);
  MIL::Builder::BlockBuilder::UpdateOutputNames((std::string::size_type)v59, v53);
  MIL::Builder::BlockBuilder::UpdateStateDependencyMap(v59);
  if (v58.__r_.__value_.__r.__words[0])
  {
    v58.__r_.__value_.__l.__size_ = v58.__r_.__value_.__r.__words[0];
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v22 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v62;
  if (v62)
  {
    v26 = (unint64_t *)&v62->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1E0699090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  int v50;
  uint64_t v51;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  if (a30 < 0)
    operator delete(a25);
  if (a49 < 0)
    operator delete(a44);
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v50 & 1) == 0)
    {
LABEL_16:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v51 - 112);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v51 - 96);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v49);
  goto LABEL_16;
}

uint64_t MIL::Transform::ProgramTransformer::FoldConstantNodes(MIL::Transform::ProgramTransformer *this)
{
  uint64_t v1;
  MIL::Builder::ProgramBuilder *v2;
  uint64_t v4;

  v1 = *(_QWORD *)this;
  v2 = *(MIL::Builder::ProgramBuilder **)(*(_QWORD *)this + 32);
  v4 = v1;
  return MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodes(void)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(v2, &v4);
}

uint64_t MIL::Transform::ProgramTransformer::GetProgram@<X0>(MIL::Transform::ProgramTransformer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  std::runtime_error *exception;
  std::string v6;
  uint64_t v7;
  _QWORD v8[7];

  MIL::Builder::ProgramBuilder::CreateProgram(*(MIL::Builder::ProgramBuilder::ProgramBuilderImpl ***)(*(_QWORD *)this + 32), (uint64_t)&v7);
  if (((*(uint64_t (**)(_QWORD *))(v8[0] + 16))(v8) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v8);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v6);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = v7;
  v7 = 0;
  *a2 = v3;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v8);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E0699360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  MIL::ValidationResult *v16;
  void *v17;
  int v18;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      MIL::ValidationResult::~ValidationResult(v16);
      if (a16)
        (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t MIL::Transform::ProgramTransformer::GetProgramWithoutValidation@<X0>(MIL::Transform::ProgramTransformer *this@<X0>, _anonymous_namespace_::IRProgramImpl **a2@<X8>)
{
  return MIL::Builder::ProgramBuilder::CreateProgramWithoutValidation(*(MIL::Builder::ProgramBuilder::ProgramBuilderImpl ***)(*(_QWORD *)this + 32), a2);
}

uint64_t MIL::Transform::ProgramTransformer::GetProgramBuilder@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)this + 40);
  *a2 = *(_QWORD *)(*(_QWORD *)this + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void **std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::~__split_buffer(v7);
  }
  return result;
}

void sub_1E0699470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 32);
      v9 -= 32;
      *(_QWORD *)(v7 - 24) = 0;
      v11 = (_QWORD *)(v7 - 24);
      *(v11 - 1) = v10;
      v11[1] = 0;
      v11[2] = 0;
      std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>(v11, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 5);
      v7 = *((_QWORD *)&v17 + 1) - 32;
      *((_QWORD *)&v17 + 1) -= 32;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1E06995B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>,std::reverse_iterator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 8);
    std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 32;
  }
}

void **std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v4 = (void **)(i - 24);
    std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__push_back_slow_path<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<MIL::Transform::ArgumentDescription>::__init_with_size[abi:ne180100]<MIL::Transform::ArgumentDescription*,MIL::Transform::ArgumentDescription*>((_QWORD *)v11 + 1, a2[1], a2[2], (uint64_t)(a2[2] - a2[1]) >> 5);
  v15 += 32;
  std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::~__split_buffer(v14);
  return v12;
}

void sub_1E06997B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Transform::ArgumentDescription>,MIL::Transform::ArgumentDescription const*,MIL::Transform::ArgumentDescription const*,MIL::Transform::ArgumentDescription*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)(a4 + v7), (const MIL::Transform::ArgumentDescription *)(a2 + v7));
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1E0699820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const,std::allocator<std::pair<char const*,std::vector<MIL::Transform::ArgumentDescription>> const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<MIL::Transform::ArgumentDescription>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void MIL::Transform::MatchContext::MatchContextImpl::GetTypedArgument(MIL::IRArgument *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *Name;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  MIL::IRTypedArgument *Type;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v42);
  if (v42)
  {
    v40 = v42;
    v41 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MIL::IRTypedArgument::Make(&v40, &v38);
    v10 = v38;
    *a4 = v38;
    if (v10)
    {
      v11 = (_QWORD *)operator new();
      v12 = v38;
      *v11 = &unk_1EA994910;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v12;
    }
    else
    {
      v11 = 0;
    }
    a4[1] = (uint64_t)v11;
    v38 = 0;
    v14 = v41;
    if (v41)
    {
      v15 = (unint64_t *)&v41->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_13;
    }
  }
  else
  {
    if (*a2)
    {
      v13 = a2[1];
      *a4 = *a2;
      a4[1] = v13;
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_35;
    }
    Name = (unsigned __int8 *)MIL::IRArgument::GetName(a1);
    MIL::Builder::BlockBuilder::GetValue(a3, Name, &v38);
    if (v38)
    {
      v35 = v38;
      v36 = v39;
      if (v39)
      {
        v18 = (unint64_t *)&v39->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::IRTypedArgument::Make(&v35, &v37);
      v20 = v37;
      *a4 = v37;
      if (v20)
      {
        v21 = (_QWORD *)operator new();
        v22 = v37;
        *v21 = &unk_1EA994910;
        v21[1] = 0;
        v21[2] = 0;
        v21[3] = v22;
      }
      else
      {
        v21 = 0;
      }
      a4[1] = (uint64_t)v21;
      v37 = 0;
      v28 = v36;
      if (v36)
      {
        v29 = (unint64_t *)&v36->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
      v23 = MIL::IRArgument::GetName(a1);
      Type = (MIL::IRTypedArgument *)MIL::Builder::BlockBuilder::GetType(a3, v23);
      MIL::IRTypedArgument::Make(Type, &v37);
      v25 = v37;
      *a4 = v37;
      if (v25)
      {
        v26 = (_QWORD *)operator new();
        v27 = v37;
        *v26 = &unk_1EA994910;
        v26[1] = 0;
        v26[2] = 0;
        v26[3] = v27;
      }
      else
      {
        v26 = 0;
      }
      a4[1] = (uint64_t)v26;
    }
    v14 = v39;
    if (v39)
    {
      v31 = (unint64_t *)&v39->__shared_owners_;
      do
        v16 = __ldaxr(v31);
      while (__stlxr(v16 - 1, v31));
LABEL_13:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
LABEL_35:
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1E0699B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (a5)
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v5 - 48);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::NewOperationDependencyMap::AddDependency(_anonymous_namespace_::NewOperationDependencyMap *this, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = (char *)this + 16;
  v5 = *((_QWORD *)this + 2);
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)this;
    v9 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v4, v12);
      v8 = *(_QWORD **)this;
      v6 = (_QWORD *)*((_QWORD *)this + 1);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)this = v14;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 1) = v7;
}

void `anonymous namespace'::NewOperationDependencyMap::NextOperation(_anonymous_namespace_::NewOperationDependencyMap *this)
{
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;

  v2 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  v5 = *((_QWORD *)this + 5);
  if ((unint64_t)v3 >= v5)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 3);
    v8 = v3 - v7;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)v7;
    v10 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v4, v11);
      v7 = (uint64_t *)*((_QWORD *)this + 3);
      v3 = (uint64_t *)*((_QWORD *)this + 4);
    }
    else
    {
      v12 = 0;
    }
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v2;
    v6 = v13 + 1;
    while (v3 != v7)
    {
      v15 = *--v3;
      *--v13 = v15;
    }
    *((_QWORD *)this + 3) = v13;
    *((_QWORD *)this + 4) = v6;
    *((_QWORD *)this + 5) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v3 = v2;
    v6 = v3 + 1;
  }
  *((_QWORD *)this + 4) = v6;
}

uint64_t MIL::Transform::MatchContext::MatchContextImpl::InferOutputTypesAndAddOperation(uint64_t a1, uint64_t a2, unint64_t a3, MIL::Builder::OperationBuilder **a4)
{
  uint64_t BlocksRef;
  MIL::Builder::BlockBuilder::BlockBuilderImpl ***v6;
  MIL::Builder::BlockBuilder::BlockBuilderImpl ***v7;
  MIL::Builder::Variable::VariableImpl ***v8;
  MIL::Builder::Variable::VariableImpl ***v9;
  uint64_t Type;
  uint64_t v11;
  std::string::size_type size;
  std::string::size_type v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t Operator;
  std::__shared_weak_count *v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t Attributes;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  unint64_t v30;
  uint64_t v31;
  MIL::Builder::OperationBuilder *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  std::logic_error *exception;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;
  std::string __p[11];
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  MIL::Builder::Variable::VariableImpl ***v62;
  MIL::Builder::Variable::VariableImpl ***v63;
  uint64_t v64[4];

  memset(v64, 0, 24);
  BlocksRef = MIL::Builder::OperationBuilder::GetBlocksRef(*a4);
  v6 = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ****)BlocksRef;
  v7 = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ****)(BlocksRef + 8);
  if (*(MIL::Builder::BlockBuilder::BlockBuilderImpl ****)BlocksRef != v7)
  {
    do
    {
      memset(__p, 0, 24);
      MIL::Builder::BlockBuilder::GetOutputs(*v6, (void **)&v62);
      v9 = v62;
      v8 = v63;
      if (v62 != v63)
      {
        do
        {
          Type = MIL::Builder::Variable::TryGetType(*v9);
          v11 = Type;
          size = __p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__l.__size_ >= __p[0].__r_.__value_.__r.__words[2])
          {
            v14 = (uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v14 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v15 = (uint64_t)(__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__r.__words[0]) >> 2;
            if (v15 <= v14 + 1)
              v15 = v14 + 1;
            if (__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
              v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p[0].__r_.__value_.__r.__words[2], v16);
            else
              v17 = 0;
            v18 = (uint64_t *)&v17[8 * v14];
            *v18 = v11;
            v13 = (std::string::size_type)(v18 + 1);
            v19 = (char *)__p[0].__r_.__value_.__l.__size_;
            v20 = __p[0].__r_.__value_.__r.__words[0];
            if (__p[0].__r_.__value_.__l.__size_ != __p[0].__r_.__value_.__r.__words[0])
            {
              do
              {
                v21 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *--v18 = v21;
              }
              while (v19 != (char *)v20);
              v19 = (char *)__p[0].__r_.__value_.__r.__words[0];
            }
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
            __p[0].__r_.__value_.__l.__size_ = v13;
            __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v17[8 * v16];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *(_QWORD *)__p[0].__r_.__value_.__l.__size_ = Type;
            v13 = size + 8;
          }
          __p[0].__r_.__value_.__l.__size_ = v13;
          ++v9;
        }
        while (v9 != v8);
        v9 = v62;
      }
      if (v9)
      {
        v63 = v9;
        operator delete(v9);
      }
      std::vector<std::vector<MIL::IRValueType const*>>::push_back[abi:ne180100](v64, (uint64_t)__p);
      if (__p[0].__r_.__value_.__r.__words[0])
      {
        __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  Operator = MIL::Builder::OperationBuilder::GetOperator(*a4);
  MIL::UnknownLocation::Make(&v59);
  v60 = v59;
  if (v59)
  {
    v23 = (std::__shared_weak_count *)operator new();
    v24 = v59;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23[1].__vftable = v24;
  }
  else
  {
    v23 = 0;
  }
  v61 = v23;
  v59 = 0;
  Attributes = MIL::Builder::OperationBuilder::GetAttributes(*a4);
  memset(__p, 0, 24);
  (*(void (**)(MIL::Builder::Variable::VariableImpl ****__return_ptr, uint64_t, uint64_t, std::__shared_weak_count_vtbl **, uint64_t, uint64_t, std::string *))(*(_QWORD *)Operator + 192))(&v62, Operator, a1, &v60, a2, Attributes, __p);
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  v26 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v59;
  v59 = 0;
  if (v29)
    (*((void (**)(std::__shared_weak_count_vtbl *))v29->~__shared_weak_count + 1))(v29);
  if (a3 > v63 - v62)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Attempted to create an operation with ", 38);
    v39 = (_QWORD *)std::ostream::operator<<();
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" output(s), ", 12);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"but operator '", 14);
    v42 = MIL::Builder::OperationBuilder::GetOperator(*a4);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
    v44 = *(char *)(v43 + 23);
    if (v44 >= 0)
      v45 = v43;
    else
      v45 = *(_QWORD *)v43;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v43 + 23);
    else
      v46 = *(_QWORD *)(v43 + 8);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v45, v46);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"' ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"produces only ", 14);
    v49 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" output(s).", 11);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v57);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (a3)
  {
    v30 = 0;
    do
    {
      if (v30 >= v63 - v62)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v31 = (uint64_t)v62[v30];
      MIL::Transform::NameGenerator::GenerateTmpName(*(MIL::Transform::NameGenerator **)(a1 + 16), __p);
      v32 = *a4;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v54, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      else
        v54 = __p[0];
      MIL::Builder::OperationBuilder::AddOutput((uint64_t)v32, (uint64_t)&v54, v31, &v55);
      v33 = v56;
      if (v56)
      {
        v34 = (unint64_t *)&v56->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      ++v30;
    }
    while (v30 != a3);
  }
  v36 = *(_QWORD *)(a1 + 56);
  v37 = *(_QWORD *)(a1 + 64);
  std::vector<std::shared_ptr<MIL::Validation::Constraints const>>::push_back[abi:ne180100]((char **)(a1 + 56), (uint64_t)a4);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return (v37 - v36) >> 4;
}

void sub_1E069A2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;
  void *v37;

  if (a27 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a28);
      v37 = *(void **)(v35 - 136);
      if (v37)
      {
        *(_QWORD *)(v35 - 128) = v37;
        operator delete(v37);
      }
      a28 = (void *)(v35 - 112);
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t std::unordered_set<MIL::IRValueType const*>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::__emplace_unique_key_args<MIL::IRValueType const*,MIL::IRValueType const* const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1E069A434(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1E069A6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRValueType const*>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<MIL::IRValueType const*>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1E069A818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Transform::MatchContext::MatchContextImpl::ConvertParamMap(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void ***v5;
  void ***v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  BOOL v21;
  void **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = (unsigned __int8 *)(a1 + 1);
  v4 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      std::vector<MIL::TransformPrivate::ArgumentAndType>::reserve(&v27, (uint64_t)(*((_QWORD *)v4 + 8) - *((_QWORD *)v4 + 7)) >> 4);
      v5 = (void ***)*((_QWORD *)v4 + 7);
      v6 = (void ***)*((_QWORD *)v4 + 8);
      while (v5 != v6)
      {
        v7 = *v5;
        v8 = (std::__shared_weak_count *)v5[1];
        v22 = *v5;
        v23 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        BYTE8(v26) = 0;
        v24 = 0;
        v25 = 0;
        LOBYTE(v26) = 0;
        v11 = v28;
        if ((unint64_t)v28 >= v29)
        {
          v12 = std::vector<MIL::TransformPrivate::ArgumentAndType>::__push_back_slow_path<MIL::TransformPrivate::ArgumentAndType>(&v27, (uint64_t)&v22);
          v13 = v25;
          v28 = (_QWORD *)v12;
          if (v25)
          {
            v14 = (unint64_t *)&v25->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
        else
        {
          *v28 = v7;
          v11[1] = v23;
          v11[2] = 0;
          v22 = 0;
          v23 = 0;
          v11[3] = 0;
          v24 = 0;
          v25 = 0;
          *((_OWORD *)v11 + 2) = v26;
          v28 = v11 + 6;
        }
        v16 = v23;
        if (v23)
        {
          v17 = (unint64_t *)&v23->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v5 += 2;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<MIL::TransformPrivate::ArgumentAndType>>(a2, v4 + 32, (__int128 *)v4 + 2, (uint64_t)&v27);
      v22 = (void **)&v27;
      std::vector<MIL::TransformPrivate::ArgumentAndType>::__destroy_vector::operator()[abi:ne180100](&v22);
      v19 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(unsigned __int8 **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v21 = *(_QWORD *)v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v21);
      }
      v4 = v20;
    }
    while (v20 != v3);
  }
}

void sub_1E069AA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  a10 = (void **)&a16;
  std::vector<MIL::TransformPrivate::ArgumentAndType>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void MIL::Transform::MatchContext::MatchContextImpl::CreateOperationBuilderFromProperties(MIL::Transform::MatchContext::MatchContextImpl *this@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *i;
  uint64_t *v12;
  uint64_t *j;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *k;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::string v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v56 = *(_QWORD *)this;
  v57 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::Builder::OperationBuilder::Make(&v56, a2);
  v8 = v57;
  if (v57)
  {
    v9 = (unint64_t *)&v57->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  for (i = (uint64_t *)*((_QWORD *)this + 4); i; i = (uint64_t *)*i)
  {
    v12 = (uint64_t *)i[5];
    for (j = (uint64_t *)i[6]; v12 != j; v12 += 6)
    {
      v14 = *a2;
      if (*((char *)i + 39) < 0)
        std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)i[2], i[3]);
      else
        v53 = *(std::string *)(i + 2);
      v15 = v12[1];
      v51 = *v12;
      v52 = (std::__shared_weak_count *)v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      MIL::Builder::OperationBuilder::AddInput(v14, (uint64_t)&v53, &v51, &v54);
      v18 = v55;
      if (v55)
      {
        v19 = (unint64_t *)&v55->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v52;
      if (v52)
      {
        v22 = (unint64_t *)&v52->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
    }
  }
  v24 = (uint64_t *)*((_QWORD *)this + 7);
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  while (v24 != v25)
  {
    v26 = *a2;
    v27 = (std::__shared_weak_count *)v24[1];
    v49 = *v24;
    v50 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    MIL::Builder::OperationBuilder::AddBlock(v26, (uint64_t)&v49);
    v30 = v50;
    if (v50)
    {
      v31 = (unint64_t *)&v50->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v24 += 2;
  }
  for (k = (uint64_t *)*((_QWORD *)this + 12); k; k = (uint64_t *)*k)
  {
    v34 = *a2;
    if (*((char *)k + 39) < 0)
      std::string::__init_copy_ctor_external(&v46, (const std::string::value_type *)k[2], k[3]);
    else
      v46 = *(std::string *)(k + 2);
    v35 = (std::__shared_weak_count *)k[6];
    v44 = k[5];
    v45 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    MIL::Builder::OperationBuilder::SetAttribute(v34, (uint64_t)&v46, &v44, &v47);
    v38 = v48;
    if (v48)
    {
      v39 = (unint64_t *)&v48->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v45;
    if (v45)
    {
      v42 = (unint64_t *)&v45->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
}

void sub_1E069AD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v29 - 80);
  _Unwind_Resume(a1);
}

void MIL::TransformPrivate::OperationProperties::~OperationProperties(MIL::TransformPrivate::OperationProperties *this)
{
  void **v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 80);
  v2 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::~__hash_table((uint64_t)this + 16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t std::vector<MIL::TransformPrivate::ArgumentAndType>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<MIL::TransformPrivate::ArgumentAndType>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1E069AEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MIL::TransformPrivate::ArgumentAndType>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<MIL::TransformPrivate::ArgumentAndType>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__construct_node_hash<std::string const&,std::vector<MIL::TransformPrivate::ArgumentAndType>>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1E069B144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__construct_node_hash<std::string const&,std::vector<MIL::TransformPrivate::ArgumentAndType>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<std::string const&,std::vector<std::shared_ptr<MIL::IRArgument>>,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1E069B1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::TransformPrivate::ArgumentAndType>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::TransformPrivate::ArgumentAndType>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MIL::Builder::ProgramBuilder *v8;
  uint64_t result;
  _QWORD v10[5];
  char v11;

  do
  {
    v11 = 0;
    v8 = *(MIL::Builder::ProgramBuilder **)(a1 + 32);
    v10[0] = a1;
    v10[1] = a2;
    v10[2] = a3;
    v10[3] = a4;
    v10[4] = &v11;
    result = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace(MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper &,MIL::Matching::CompiledPattern const&,std::function<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)> const&)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(v8, (uint64_t)v10);
  }
  while (v11);
  return result;
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper::MatchAndReplaceHelper(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t matched;

  matched = MIL::Transform::MatchContext::MatchContextImpl::MatchContextImpl(a1, a2, a3);
  *(_QWORD *)(matched + 152) = matched;
  MIL::Matching::Match::Match((MIL::Matching::Match *)(matched + 160));
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  return a1;
}

void sub_1E069B378(_Unwind_Exception *a1)
{
  MIL::Transform::MatchContext::MatchContextImpl *v1;

  MIL::Transform::MatchContext::MatchContextImpl::~MatchContextImpl(v1);
  _Unwind_Resume(a1);
}

void MIL::Transform::MatchContext::MatchContextImpl::~MatchContextImpl(MIL::Transform::MatchContext::MatchContextImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t MIL::Transform::MatchContext::MatchContextImpl::MatchContextImpl(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v10 = operator new(8uLL);
  *v10 = 0;
  *(_QWORD *)(a1 + 136) = v10 + 1;
  *(_QWORD *)(a1 + 144) = v10 + 1;
  *(_QWORD *)(a1 + 128) = v10;
  return a1;
}

void sub_1E069B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;

  v14 = v13;
  a10 = v14;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace(MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper &,MIL::Matching::CompiledPattern const&,std::function<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)> const&)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(MIL::Builder::ProgramBuilder *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t **i;
  MIL::Builder::BlockBuilder::BlockBuilderImpl ***j;

  result = MIL::Builder::ProgramBuilder::GetFunctions(a1);
  for (i = *(uint64_t ***)(result + 16); i; i = (uint64_t **)*i)
  {
    result = MIL::Builder::FunctionBuilder::GetSpecializations((MIL::Builder::FunctionBuilder *)i[5]);
    for (j = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ****)(result + 16);
          j;
          j = (MIL::Builder::BlockBuilder::BlockBuilderImpl ***)*j)
    {
      result = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace(MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper &,MIL::Matching::CompiledPattern const&,std::function<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)> const&)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(j + 5, a2);
    }
  }
  return result;
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace(MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper &,MIL::Matching::CompiledPattern const&,std::function<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)> const&)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(MIL::Builder::BlockBuilder::BlockBuilderImpl ***a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t result;
  char *v11;
  char v12;
  _QWORD v13[3];
  __int128 v14;
  void **v15;

  if (MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a1))
  {
    v4 = 0;
    do
    {
      MIL::Builder::BlockBuilder::GetOperation(*a1, v4, &v14);
      MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v14, (uint64_t)v13);
      v5 = v13[0];
      v6 = v13[1];
      while (v5 != v6)
      {
        MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::DoMatchAndReplace(MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper &,MIL::Matching::CompiledPattern const&,std::function<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)> const&)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(v5, a2);
        v5 += 16;
      }
      v15 = (void **)v13;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v15);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      ++v4;
    }
    while (v4 < MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a1));
  }
  result = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceWithinBlock(*(MIL::Transform::ProgramTransformer::ProgramTransformerImpl **)a2, *(_QWORD *)(a2 + 8), *(const MIL::Matching::CompiledPattern **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t *)a1);
  v11 = *(char **)(a2 + 32);
  if (*v11)
    v12 = 1;
  else
    v12 = result;
  *v11 = v12;
  return result;
}

void sub_1E069B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceWithinBlock(MIL::Transform::ProgramTransformer::ProgramTransformerImpl *a1, uint64_t a2, const MIL::Matching::CompiledPattern *a3, uint64_t a4, uint64_t *a5)
{
  char v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a2 + 152) + 32), a5);
  v10 = 0;
  if (MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a5))
  {
    v11 = 0;
    do
    {
      MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*a5, v11, &v17);
      v12 = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::PrepareMatcher(a1, (MIL::Builder::BlockBuilder *)*a5, (MIL::Builder::OperationBuilder *)v17, a3);
      while (!MIL::Matching::Matcher::FindNextMatch((uint64_t)v12, (uint64_t *)(a2 + 160), 0x7FFFFFFFFFFFFFFFLL))
      {
        if ((MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ProcessMatch((uint64_t)a1, a2, a4, (MIL::Builder::BlockBuilder *)*a5) & 1) != 0)
        {
          v10 = 1;
          break;
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      ++v11;
    }
    while (v11 < MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a5));
  }
  return v10 & 1;
}

void sub_1E069B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *MIL::Transform::ProgramTransformer::ProgramTransformerImpl::PrepareMatcher(MIL::Transform::ProgramTransformer::ProgramTransformerImpl *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3, const MIL::Matching::CompiledPattern *a4)
{
  char *v4;
  MIL::Builder::OperationBuilder *v6;
  MIL::Builder::BlockBuilder *v7;

  v6 = a3;
  v7 = a2;
  v4 = (char *)this + 48;
  if (*((_BYTE *)this + 56))
    MIL::Matching::Matcher::Reset((MIL::Transform::ProgramTransformer::ProgramTransformerImpl *)((char *)this + 48), a2, a3, a4);
  else
    std::optional<MIL::Matching::Matcher>::emplace[abi:ne180100]<MIL::Builder::BlockBuilder *&,MIL::Builder::OperationBuilder *&,MIL::Matching::CompiledPattern const&,void>((MIL::Transform::ProgramTransformer::ProgramTransformerImpl *)((char *)this + 48), &v7, &v6, a4);
  return v4;
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ProcessMatch(uint64_t a1, uint64_t a2, uint64_t a3, MIL::Builder::BlockBuilder *a4)
{
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  MIL::Builder::OperationBuilder *v15;
  MIL::Builder::OperationBuilder *v16;
  uint64_t NumOutputs;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  MIL::Builder::OperationBuilder **v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  MIL::Builder::OperationBuilder **v29;
  MIL::Builder::OperationBuilder **v30;
  __int128 v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OutputName;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  __int128 *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  __int128 *v55;
  unint64_t v56;
  uint64_t v57;
  MIL::BuilderPrivate::OperationBuilderPrivate **v58;
  MIL::BuilderPrivate::OperationBuilderPrivate **v59;
  MIL::BuilderPrivate::OperationBuilderPrivate *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  __int128 *v69;
  unint64_t v70;
  __int128 *v71;
  _OWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v86;
  unint64_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  _QWORD *v97;
  __int128 v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  MIL::Builder::OperationBuilder::OperationBuilderImpl ***v110;
  unint64_t v111;
  MIL::Builder::OperationBuilder::OperationBuilderImpl ***v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  MIL::Builder::OperationBuilder::OperationBuilderImpl ***v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v121;
  const void **v122;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  void **v146;
  unint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t MatchedOperationIndex;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  _QWORD *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  MIL::Builder::BlockBuilder::BlockBuilderImpl **v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  char **v188;
  std::string::size_type v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  std::string::size_type *v198;
  char *v199;
  char *v200;
  std::string::size_type *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  void **v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  size_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  const MIL::Builder::OperationBuilder *v232;
  _QWORD *Parameters;
  uint64_t v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  uint64_t **i;
  char **v238;
  char *v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  std::string::size_type *v243;
  char *v244;
  std::string::size_type v245;
  char *v246;
  unint64_t v247;
  _QWORD *v248;
  char *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  BOOL v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void **v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char *v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t Operator;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  std::logic_error *v307;
  _QWORD *v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  std::logic_error *v314;
  std::logic_error *exception;
  std::logic_error *v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t **v320;
  void **v321;
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl *v322;
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl *v323;
  const MIL::Builder::OperationBuilder *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  _QWORD *v329;
  MIL::Transform::_anonymous_namespace_::TopoSortViaDepthFirstSearch *v330;
  MIL::Transform::_anonymous_namespace_::TopoSortViaDepthFirstSearch *v331;
  uint64_t v332;
  void *__p;
  void *v334;
  uint64_t v335;
  std::string v336;
  std::string v337;

  v8 = a2 + 168;
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a2 + 168);
  v9 = a2 + 160;
  MIL::MatchingPrivate::MatchPrivate::GetAllMatchedOperations((uint64_t ***)(a2 + 160), (void **)(a2 + 168));
  v10 = *(const void **)v8;
  v11 = *(_QWORD *)(v8 + 8);
  if (*(_QWORD *)v8 == v11)
    return 0;
  __p = 0;
  v334 = 0;
  v335 = 0;
  std::vector<MIL::Builder::OperationBuilder *>::__init_with_size[abi:ne180100]<MIL::Builder::OperationBuilder **,MIL::Builder::OperationBuilder **>(&__p, v10, v11, (v11 - (uint64_t)v10) >> 3);
  v330 = (MIL::Transform::_anonymous_namespace_::TopoSortViaDepthFirstSearch *)(a2 + 192);
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetOperationIndices((uint64_t)&__p, a4, (unint64_t **)(a2 + 192), (char **)(a2 + 216));
  if (__p)
  {
    v334 = __p;
    operator delete(__p);
  }
  MIL::Transform::MatchContext::MatchContextImpl::PrepareForNewMatch((MIL::Transform::MatchContext::MatchContextImpl *)a2);
  MIL::Matching::Match::GetRootView(v9, &v332);
  v12 = *(_QWORD *)(a3 + 24);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, a2 + 152, &v332);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v332);
  if (*(_BYTE *)(a2 + 48))
    return 0;
  v324 = (const MIL::Builder::OperationBuilder *)(a2 + 216);
  v326 = a1;
  v317 = **(_QWORD **)(a2 + 192);
  v320 = (uint64_t **)a4;
  v322 = *(MIL::Transform::ProgramTransformer::ProgramTransformerImpl **)(*(_QWORD *)(a2 + 200) - 8);
  MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)a4, (unint64_t)v322, &v337);
  v329 = (_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a2 + 56) == v14)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Match callback returned an empty replacement. If you want to remove the matched operations from the graph, you must instead add an identity operation, and then run an identity elimination pass. Otherwise, your intent may be ambiguous, as there could be several different options to what is considered the input to the identity operation.");
    goto LABEL_414;
  }
  if (*(_QWORD *)(a2 + 80) != *(_QWORD *)(a2 + 88))
    goto LABEL_30;
  v15 = (MIL::Builder::OperationBuilder *)v337.__r_.__value_.__r.__words[0];
  v16 = *(MIL::Builder::OperationBuilder **)(v14 - 16);
  NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v337.__r_.__value_.__l.__data_);
  if (NumOutputs != MIL::Builder::OperationBuilder::GetNumOutputs(v16))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Last replacement operation does not have the same number of outputs as the old operation");
LABEL_414:
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (MIL::Builder::OperationBuilder::GetNumOutputs(v15))
  {
    v18 = 0;
    do
    {
      v19 = ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4) - 1;
      v21 = *(MIL::Builder::OperationBuilder ***)(a2 + 88);
      v20 = *(_QWORD *)(a2 + 96);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *(char **)(a2 + 80);
        v24 = ((char *)v21 - v23) >> 5;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 4 > v25)
          v25 = v26 >> 4;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
          v27 = 0x7FFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          if (v27 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = (char *)operator new(32 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = (MIL::Builder::OperationBuilder **)&v28[32 * v24];
        *v29 = v15;
        v29[1] = (MIL::Builder::OperationBuilder *)v18;
        v29[2] = (MIL::Builder::OperationBuilder *)v19;
        v29[3] = (MIL::Builder::OperationBuilder *)v18;
        v30 = v29;
        if (v21 != (MIL::Builder::OperationBuilder **)v23)
        {
          do
          {
            v31 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 4;
            v21 -= 4;
          }
          while (v21 != (MIL::Builder::OperationBuilder **)v23);
          v21 = *(MIL::Builder::OperationBuilder ***)(a2 + 80);
        }
        v22 = v29 + 4;
        *(_QWORD *)(a2 + 80) = v30;
        *(_QWORD *)(a2 + 88) = v29 + 4;
        *(_QWORD *)(a2 + 96) = &v28[32 * v27];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v21 = v15;
        v21[1] = (MIL::Builder::OperationBuilder *)v18;
        v22 = v21 + 4;
        v21[2] = (MIL::Builder::OperationBuilder *)v19;
        v21[3] = (MIL::Builder::OperationBuilder *)v18;
      }
      *(_QWORD *)(a2 + 88) = v22;
      ++v18;
    }
    while (v18 < MIL::Builder::OperationBuilder::GetNumOutputs(v15));
  }
LABEL_30:
  size = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
  if (v337.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v35 = (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  std::vector<BOOL>::resize(a2 + 296, v35, 0);
  *(_QWORD *)(a2 + 328) = *(_QWORD *)(a2 + 320);
  v36 = (char **)(a2 + 264);
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a2 + 264);
  std::vector<MIL::Passes::BlockInfo>::reserve((void **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 5);
  v37 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  if (v37 == v38)
  {
    v45 = *(__int128 **)(a2 + 272);
  }
  else
  {
    do
    {
      OutputName = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)v37, *(_QWORD *)(v37 + 8));
      v40 = *(char *)(OutputName + 23);
      if (v40 >= 0)
        v41 = OutputName;
      else
        v41 = *(_QWORD *)OutputName;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(OutputName + 23);
      else
        v42 = *(_QWORD *)(OutputName + 8);
      v44 = *(uint64_t **)(a2 + 272);
      v43 = *(_QWORD *)(a2 + 280);
      if ((unint64_t)v44 >= v43)
      {
        v46 = ((char *)v44 - *v36) >> 4;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v48 = v43 - (_QWORD)*v36;
        if (v48 >> 3 > v47)
          v47 = v48 >> 3;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(a2 + 280, v49);
        else
          v50 = 0;
        v51 = (uint64_t *)&v50[16 * v46];
        *v51 = v41;
        v51[1] = v42;
        v53 = *(char **)(a2 + 264);
        v52 = *(char **)(a2 + 272);
        v54 = v51;
        if (v52 != v53)
        {
          do
          {
            *((_OWORD *)v54 - 1) = *((_OWORD *)v52 - 1);
            v54 -= 2;
            v52 -= 16;
          }
          while (v52 != v53);
          v52 = *v36;
        }
        v45 = (__int128 *)(v51 + 2);
        *(_QWORD *)(a2 + 264) = v54;
        *(_QWORD *)(a2 + 272) = v51 + 2;
        *(_QWORD *)(a2 + 280) = &v50[16 * v49];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *v44 = v41;
        v44[1] = v42;
        v45 = (__int128 *)(v44 + 2);
      }
      *(_QWORD *)(a2 + 272) = v45;
      v37 += 32;
    }
    while (v37 != v38);
  }
  v55 = *(__int128 **)(a2 + 264);
  v56 = 126 - 2 * __clz(v45 - v55);
  if (v45 == v55)
    v57 = 0;
  else
    v57 = v56;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *,false>(v55, v45, (uint64_t)&v337, v57, 1);
  v58 = *(MIL::BuilderPrivate::OperationBuilderPrivate ***)(a2 + 56);
  v59 = *(MIL::BuilderPrivate::OperationBuilderPrivate ***)(a2 + 64);
  while (v58 != v59)
  {
    v60 = *v58;
    v58 += 2;
    MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AddMatchedDependencies(v60, v324, (uint64_t *)(a2 + 264), (uint64_t)v320, (MIL::Transform::_anonymous_namespace_::IndexSet *)(a2 + 288));
  }
  v61 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a2 + 328) != v61)
  {
    v62 = 0;
    do
    {
      v63 = v62 + 1;
      MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AddMatchedDependencies(*(MIL::BuilderPrivate::OperationBuilderPrivate **)(*(_QWORD *)(a2 + 56) + 16 * *(_QWORD *)(v61 + 8 * v62)), v324, (uint64_t *)(a2 + 264), (uint64_t)v320, (MIL::Transform::_anonymous_namespace_::IndexSet *)(a2 + 288));
      v61 = *(_QWORD *)(a2 + 320);
      v62 = v63;
    }
    while (v63 < (*(_QWORD *)(a2 + 328) - v61) >> 3);
  }
  v64 = *(__int128 **)(a2 + 240);
  *(_QWORD *)(a2 + 248) = v64;
  v66 = *(char **)(a2 + 80);
  v65 = *(char **)(a2 + 88);
  v67 = v65 - v66;
  v68 = (v65 - v66) >> 5;
  if (v68 > (uint64_t)(*(_QWORD *)(a2 + 256) - (_QWORD)v64) >> 4)
  {
    if ((v67 & 0x8000000000000000) != 0)
LABEL_386:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v69 = (__int128 *)operator new(v67 >> 1);
    *(_QWORD *)(a2 + 240) = v69;
    *(_QWORD *)(a2 + 248) = v69;
    *(_QWORD *)(a2 + 256) = &v69[v68];
    if (v64)
    {
      operator delete(v64);
      v64 = *(__int128 **)(a2 + 248);
      v66 = *(char **)(a2 + 80);
      v65 = *(char **)(a2 + 88);
    }
    else
    {
      v64 = v69;
    }
  }
  if (v66 == v65)
  {
    v71 = v64;
  }
  else
  {
    do
    {
      v70 = *(_QWORD *)(a2 + 256);
      if ((unint64_t)v64 >= v70)
      {
        v72 = *(_OWORD **)(a2 + 240);
        v73 = v64 - v72;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 60)
          goto LABEL_386;
        v75 = v70 - (_QWORD)v72;
        if (v75 >> 3 > v74)
          v74 = v75 >> 3;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
          v76 = 0xFFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          if (v76 >> 60)
            goto LABEL_398;
          v77 = (char *)operator new(16 * v76);
        }
        else
        {
          v77 = 0;
        }
        v78 = &v77[16 * v73];
        *(_OWORD *)v78 = *(_OWORD *)v66;
        v79 = v78;
        if (v64 != v72)
        {
          do
          {
            *((_OWORD *)v79 - 1) = *(v64 - 1);
            v79 -= 16;
            --v64;
          }
          while (v64 != v72);
          v64 = *(__int128 **)(a2 + 240);
        }
        v71 = (__int128 *)(v78 + 16);
        *(_QWORD *)(a2 + 240) = v79;
        *(_QWORD *)(a2 + 248) = v78 + 16;
        *(_QWORD *)(a2 + 256) = &v77[16 * v76];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v64 = *(_OWORD *)v66;
        v71 = v64 + 1;
      }
      *(_QWORD *)(a2 + 248) = v71;
      v66 += 32;
      v64 = v71;
    }
    while (v66 != v65);
  }
  v80 = *(_QWORD *)(a2 + 240);
  v81 = 126 - 2 * __clz(((uint64_t)v71 - v80) >> 4);
  if (v71 == (__int128 *)v80)
    v82 = 0;
  else
    v82 = v81;
  v83 = *(_QWORD *)(a2 + 168);
  v84 = (uint64_t)v320;
  if (*(_QWORD *)(a2 + 176) != v83)
  {
    v85 = 0;
    do
    {
      v86 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(v83 + 8 * v85);
      {
        v87 = 0;
        do
        {
          v88 = *(char **)(a2 + 240);
          v89 = *(char **)(a2 + 248);
          if (v89 != v88)
          {
            v90 = (v89 - v88) >> 4;
            do
            {
              v91 = v90 >> 1;
              v92 = (unint64_t *)&v88[16 * (v90 >> 1)];
              v95 = *v92;
              v93 = v92 + 1;
              v94 = v95;
              if (v95 < (unint64_t)v86 || (unint64_t)v86 >= v94 && *v93 < v87)
              {
                v88 += 16 * (v90 >> 1) + 16;
                v91 = v90 + ~v91;
              }
              v90 = v91;
            }
            while (v91);
          }
          if (v88 == v89
            || (unint64_t)v86 < *(_QWORD *)v88
            || *(_QWORD *)v88 >= (unint64_t)v86 && v87 < *((_QWORD *)v88 + 1))
          {
            v96 = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(v86, v87);
            v97 = MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(v84, v96) + 2;
            while (1)
            {
              v97 = (_QWORD *)*v97;
              if (!v97)
                break;
              MIL::Builder::DataDependency::GetConsumer((uint64_t)(v97 + 2), &v337);
              v98 = *(_OWORD *)&v337.__r_.__value_.__l.__data_;
              if (v337.__r_.__value_.__l.__size_)
              {
                v99 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v98 + 1));
                }
              }
              if ((_QWORD)v98)
              {
                MIL::Builder::DataDependency::GetConsumer((uint64_t)(v97 + 2), &v337);
                v101 = *(_QWORD **)(a2 + 168);
                v102 = *(_QWORD **)(a2 + 176);
                if (v101 != v102)
                {
                  while (*v101 != v337.__r_.__value_.__r.__words[0])
                  {
                    if (++v101 == v102)
                    {
                      v101 = *(_QWORD **)(a2 + 176);
                      break;
                    }
                  }
                }
                v103 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
                if (v337.__r_.__value_.__l.__size_)
                {
                  v104 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
                v84 = (uint64_t)v320;
                if (v101 != v102)
                  continue;
              }
              return 0;
            }
          }
          ++v87;
        }
        while (v87 < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v86));
      }
      ++v85;
      v83 = *(_QWORD *)(a2 + 168);
    }
    while (v85 < (*(_QWORD *)(a2 + 176) - v83) >> 3);
  }
  v106 = *(_QWORD **)(a2 + 320);
  v107 = *(_QWORD **)(a2 + 328);
  if (v106 != v107)
  {
    v108 = *(_QWORD *)(a2 + 216);
    v109 = *(char **)(a2 + 240);
    v110 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ****)(a2 + 248);
    do
    {
      if ((unint64_t)((*(_QWORD *)(a2 + 224) - v108) >> 3) <= *v106)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v111 = *(_QWORD *)(v108 + 8 * *v106);
      v112 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ****)(a2 + 240);
      if (v110 != (MIL::Builder::OperationBuilder::OperationBuilderImpl ***)v109)
      {
        v112 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ****)(a2 + 240);
        v113 = ((char *)v110 - v109) >> 4;
        do
        {
          v114 = v113 >> 1;
          v115 = (unint64_t *)&v112[2 * (v113 >> 1)];
          v117 = *v115;
          v116 = (MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(v115 + 2);
          v113 += ~(v113 >> 1);
          if (v117 < v111)
            v112 = v116;
          else
            v113 = v114;
        }
        while (v113);
      }
      if (v112 != v110 && *v112 == (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v111)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v337);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"One of the operations that has been matched is being used as a dependency ", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"for a newly added operation, and thus must be kept in the graph. ", 65);
        v308 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"On the other hand, its output named '", 37);
        v309 = MIL::Builder::OperationBuilder::GetOutputName(*v112, (unint64_t)v112[1]);
        v310 = *(char *)(v309 + 23);
        if (v310 >= 0)
          v311 = v309;
        else
          v311 = *(_QWORD *)v309;
        if (v310 >= 0)
          v312 = *(unsigned __int8 *)(v309 + 23);
        else
          v312 = *(_QWORD *)(v309 + 8);
        v313 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, v311, v312);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v313, (uint64_t)"' has been remapped ", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"to another newly added operation using MatchContext::MapOutput(). ", 66);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"This is currently disallowed.", 29);
        v314 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::logic_error::logic_error(v314, &v336);
        v314->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v314, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      ++v106;
    }
    while (v106 != v107);
  }
  v118 = *(_QWORD *)(a2 + 88);
  if (v118 != *(_QWORD *)(a2 + 80))
  {
    v119 = *(_QWORD *)(v326 + 16);
    v120 = *(_QWORD *)(a2 + 88);
    do
    {
      v121 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(*v329 + 16 * *(_QWORD *)(v118 - 16));
      v122 = (const void **)MIL::Builder::OperationBuilder::GetOutputName(v121, *(_QWORD *)(v118 - 8));
      MIL::Transform::NameGenerator::TakeBack(v119, v122);
      v123 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(v120 - 32);
      v124 = *(_QWORD *)(v120 - 24);
      v120 -= 32;
      v125 = *(_QWORD *)(v118 - 8);
      v126 = MIL::Builder::OperationBuilder::GetOutputName(v123, v124);
      if (*(char *)(v126 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v337, *(const std::string::value_type **)v126, *(_QWORD *)(v126 + 8));
      }
      else
      {
        v127 = *(_OWORD *)v126;
        v337.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 16);
        *(_OWORD *)&v337.__r_.__value_.__l.__data_ = v127;
      }
      MIL::Builder::OperationBuilder::RenameOutput((uint64_t)v121, v125, (std::string::size_type)&v337, (uint64_t *)&v336);
      v128 = (std::__shared_weak_count *)v336.__r_.__value_.__l.__size_;
      if (v336.__r_.__value_.__l.__size_)
      {
        v129 = (unint64_t *)(v336.__r_.__value_.__l.__size_ + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v337.__r_.__value_.__l.__data_);
      v118 = v120;
    }
    while (v120 != *(_QWORD *)(a2 + 80));
  }
  v131 = (void **)(a2 + 344);
  *(_QWORD *)(a2 + 352) = *(_QWORD *)(a2 + 344);
  std::vector<unsigned long long>::reserve((void **)(a2 + 344), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  if (*(_QWORD *)(a2 + 200) != *(_QWORD *)(a2 + 192))
  {
    v132 = 0;
    do
    {
      v134 = *(_QWORD *)v330;
      if ((v133 & 1) == 0)
      {
        v136 = *(char **)(a2 + 352);
        v135 = *(_QWORD *)(a2 + 360);
        if ((unint64_t)v136 >= v135)
        {
          v138 = (char *)*v131;
          v139 = (v136 - (_BYTE *)*v131) >> 3;
          v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v141 = v135 - (_QWORD)v138;
          if (v141 >> 2 > v140)
            v140 = v141 >> 2;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
            v142 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (v142)
          {
            v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 360, v142);
            v138 = *(char **)(a2 + 344);
            v136 = *(char **)(a2 + 352);
          }
          else
          {
            v143 = 0;
          }
          v144 = &v143[8 * v139];
          *(_QWORD *)v144 = *(_QWORD *)(v134 + 8 * v132);
          v137 = v144 + 8;
          while (v136 != v138)
          {
            v145 = *((_QWORD *)v136 - 1);
            v136 -= 8;
            *((_QWORD *)v144 - 1) = v145;
            v144 -= 8;
          }
          *(_QWORD *)(a2 + 344) = v144;
          *(_QWORD *)(a2 + 352) = v137;
          *(_QWORD *)(a2 + 360) = &v143[8 * v142];
          if (v138)
            operator delete(v138);
        }
        else
        {
          *(_QWORD *)v136 = *(_QWORD *)(v134 + 8 * v132);
          v137 = v136 + 8;
        }
        *(_QWORD *)(a2 + 352) = v137;
        v134 = *(_QWORD *)(a2 + 192);
      }
      ++v132;
    }
    while (v132 < (*(_QWORD *)(a2 + 200) - v134) >> 3);
  }
  v146 = (void **)(a2 + 424);
  v147 = (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4;
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  std::vector<BOOL>::resize(a2 + 376, v147, 0);
  *(_QWORD *)(a2 + 408) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 432) = *(_QWORD *)(a2 + 424);
  std::vector<MIL::Passes::BlockInfo>::reserve((void **)(a2 + 424), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  v148 = *(uint64_t **)(a2 + 80);
  v327 = *(uint64_t **)(a2 + 88);
  if (v148 != v327)
  {
    v149 = 0;
    while (1)
    {
      {
        MatchedOperationIndex = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetMatchedOperationIndex(*v148, v330, (uint64_t)v324);
        v151 = *(_QWORD *)(a2 + 400);
        if (v149 < (*(_QWORD *)(a2 + 408) - v151) >> 3)
          break;
      }
LABEL_211:
      v148 += 4;
      if (v148 == v327)
        goto LABEL_212;
    }
    v152 = MatchedOperationIndex;
    while (1)
    {
      v153 = *(_QWORD *)(v151 + 8 * v149);
      v155 = *(char **)(a2 + 432);
      v154 = *(_QWORD *)(a2 + 440);
      if ((unint64_t)v155 >= v154)
      {
        v157 = (char *)*v146;
        v158 = (v155 - (_BYTE *)*v146) >> 4;
        v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v160 = v154 - (_QWORD)v157;
        if (v160 >> 3 > v159)
          v159 = v160 >> 3;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF0)
          v161 = 0xFFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(a2 + 440, v161);
          v157 = *(char **)(a2 + 424);
          v155 = *(char **)(a2 + 432);
        }
        else
        {
          v162 = 0;
        }
        v163 = (uint64_t *)&v162[16 * v158];
        *v163 = v152;
        v163[1] = v153;
        v164 = v163;
        if (v155 != v157)
        {
          do
          {
            *((_OWORD *)v164 - 1) = *((_OWORD *)v155 - 1);
            v164 -= 2;
            v155 -= 16;
          }
          while (v155 != v157);
          v157 = (char *)*v146;
        }
        v156 = v163 + 2;
        *(_QWORD *)(a2 + 424) = v164;
        *(_QWORD *)(a2 + 432) = v163 + 2;
        *(_QWORD *)(a2 + 440) = &v162[16 * v161];
        if (v157)
          operator delete(v157);
      }
      else
      {
        *(_QWORD *)v155 = v152;
        *((_QWORD *)v155 + 1) = v153;
        v156 = v155 + 16;
      }
      *(_QWORD *)(a2 + 432) = v156;
      v165 = *(_QWORD *)(a2 + 128);
      v166 = (*(_QWORD *)(a2 + 136) - v165) >> 3;
      if (v166 <= v153 || v166 <= v153 + 1)
        break;
      v167 = *(_QWORD *)(v165 + 8 * v153);
      v168 = *(_QWORD *)(v165 + 8 * (v153 + 1));
      if (v168 == v167)
        v169 = 0;
      else
        v169 = (uint64_t *)(*(_QWORD *)(a2 + 104) + 8 * v167);
      if (v168 != v167)
      {
        v170 = 8 * v168 - 8 * v167;
        do
        {
          v171 = *v169++;
          v170 -= 8;
        }
        while (v170);
      }
      ++v149;
      v151 = *(_QWORD *)(a2 + 400);
      if (v149 >= (*(_QWORD *)(a2 + 408) - v151) >> 3)
        goto LABEL_211;
    }
LABEL_382:
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_212:
  v172 = (MIL::Builder::BlockBuilder::BlockBuilderImpl **)v320;
  if (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a2 + 56))
  {
    v173 = 0;
    v174 = 0;
    do
    {
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v337);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"Replacement callback has added an operation whose outputs are not used anywhere. ", 81);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"(The operation's index is ", 26);
        std::ostream::operator<<();
        v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)" and the operator name is '", 27);
        v300 = *(_QWORD *)(a2 + 56);
        if (v174 < (*(_QWORD *)(a2 + 64) - v300) >> 4)
        {
          v301 = v299;
          Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(v300 + v173));
          v303 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
          v304 = *(char *)(v303 + 23);
          if (v304 >= 0)
            v305 = v303;
          else
            v305 = *(_QWORD *)v303;
          if (v304 >= 0)
            v306 = *(unsigned __int8 *)(v303 + 23);
          else
            v306 = *(_QWORD *)(v303 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v301, v305, v306);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"'.) You likely meant to do one of the following things:\n", 56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"    1. Add another operation that consumes this operation's output.\n", 68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"    2. Use MatchContext::MapOutput() to map the output of this operation to\n", 76);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"       an output of some matched operation.\n", 44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"    3. Remove the MatchContext::AddOperation()/AddMultiOutputOperation() call\n", 78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v337, (uint64_t)"       that is responsible for adding this operation.\n", 54);
          v307 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(v307, &v336);
          v307->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v307, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      ++v174;
      v173 += 16;
    }
    while (v174 < (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
  }
  v175 = *(unint64_t **)(a2 + 424);
  v176 = *(unint64_t **)(a2 + 432);
  v177 = 126 - 2 * __clz(((char *)v176 - (char *)v175) >> 4);
  if (v176 == v175)
    v178 = 0;
  else
    v178 = v177;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,false>(v175, v176, (uint64_t)&v337, v178, 1);
  v179 = *(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344);
  if (v179)
    v180 = *(unint64_t **)(a2 + 344);
  else
    v180 = 0;
  MIL::Builder::BlockBuilder::RemoveOperations((uint64_t)v320, v180, v179 >> 3, 1);
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AdjustInsertionPositionsAfterRemoval((unint64_t **)(a2 + 344), (unint64_t **)(a2 + 424));
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetOperationsToInsertAndTheirPositions(v329, a2 + 424, a2 + 448, a2 + 472);
  v181 = *(_QWORD *)(a2 + 456) - *(_QWORD *)(a2 + 448);
  v182 = v181 >> 4;
  if (v181)
    v183 = *(_QWORD *)(a2 + 448);
  else
    v183 = 0;
  v184 = *(_QWORD *)(a2 + 480) - *(_QWORD *)(a2 + 472);
  if (v184)
    v185 = *(unint64_t **)(a2 + 472);
  else
    v185 = 0;
  MIL::Builder::BlockBuilder::InsertOperations(v320, v183, v182, v185, v184 >> 3);
  v186 = v317;
  v319 = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AdjustMaxIndex(v322, (uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3, (uint64_t)(*(_QWORD *)(a2 + 480) - *(_QWORD *)(a2 + 472)) >> 3);
  v187 = v319 - v317;
  if (v319 < v317)
  {
    v316 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v316, "maxIndex must be greater or equal to minIndex");
    __cxa_throw(v316, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v188 = (char **)(a2 + 496);
  *(_QWORD *)(a2 + 504) = *(_QWORD *)(a2 + 496);
  do
  {
    MIL::Builder::BlockBuilder::GetOperation(v172, v186, &v337);
    v189 = v337.__r_.__value_.__r.__words[0];
    v191 = *(_QWORD **)(a2 + 504);
    v190 = *(_QWORD *)(a2 + 512);
    if ((unint64_t)v191 >= v190)
    {
      v193 = ((char *)v191 - *v188) >> 4;
      v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v195 = v190 - (_QWORD)*v188;
      if (v195 >> 3 > v194)
        v194 = v195 >> 3;
      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF0)
        v196 = 0xFFFFFFFFFFFFFFFLL;
      else
        v196 = v194;
      if (v196)
        v197 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(a2 + 512, v196);
      else
        v197 = 0;
      v198 = (std::string::size_type *)&v197[16 * v193];
      *v198 = v189;
      v198[1] = v186;
      v200 = *(char **)(a2 + 496);
      v199 = *(char **)(a2 + 504);
      v201 = v198;
      if (v199 != v200)
      {
        do
        {
          *((_OWORD *)v201 - 1) = *((_OWORD *)v199 - 1);
          v201 -= 2;
          v199 -= 16;
        }
        while (v199 != v200);
        v199 = *v188;
      }
      v192 = v198 + 2;
      *(_QWORD *)(a2 + 496) = v201;
      *(_QWORD *)(a2 + 504) = v198 + 2;
      *(_QWORD *)(a2 + 512) = &v197[16 * v196];
      if (v199)
        operator delete(v199);
    }
    else
    {
      *v191 = v337.__r_.__value_.__r.__words[0];
      v191[1] = v186;
      v192 = v191 + 2;
    }
    *(_QWORD *)(a2 + 504) = v192;
    v202 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
    if (v337.__r_.__value_.__l.__size_)
    {
      v203 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    ++v186;
    v172 = (MIL::Builder::BlockBuilder::BlockBuilderImpl **)v320;
  }
  while (v186 <= v319);
  v205 = *(_QWORD *)(a2 + 496);
  v206 = *(unint64_t **)(a2 + 504);
  v207 = 126 - 2 * __clz(((uint64_t)v206 - v205) >> 4);
  if (v206 == (unint64_t *)v205)
    v208 = 0;
  else
    v208 = v207;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,false>(v205, v206, (uint64_t)&v337, v208, 1);
  *(_QWORD *)(a2 + 576) = v320;
  *(_QWORD *)(a2 + 592) = v188;
  v209 = (void **)(a2 + 624);
  *(_QWORD *)(a2 + 584) = v317;
  std::vector<unsigned long>::resize(a2 + 624, 1uLL);
  v210 = *(char **)(a2 + 600);
  *(_QWORD *)(a2 + 608) = v210;
  v211 = v187 + 1;
  if (v187 == -1)
  {
    *(_QWORD *)(a2 + 648) = v317;
    *(_QWORD *)(a2 + 664) = *(_QWORD *)(a2 + 656);
    v212 = v317;
  }
  else
  {
    v213 = *(_QWORD *)(a2 + 616) - (_QWORD)v210;
    if (v211 <= v213 >> 4)
    {
      bzero(v210, 16 * v187 + 16);
      *(_QWORD *)(a2 + 608) = &v210[16 * v211];
    }
    else
    {
      if (v211 >> 60)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v214 = v213 >> 3;
      if (v213 >> 3 <= v211)
        v214 = v187 + 1;
      if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF0)
        v215 = 0xFFFFFFFFFFFFFFFLL;
      else
        v215 = v214;
      if (v215 >> 60)
LABEL_398:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v216 = (char *)operator new(16 * v215);
      bzero(v216, 16 * v187 + 16);
      *(_QWORD *)(a2 + 600) = v216;
      *(_QWORD *)(a2 + 608) = &v216[16 * v211];
      *(_QWORD *)(a2 + 616) = &v216[16 * v215];
      if (v210)
        operator delete(v210);
    }
    *(_QWORD *)(a2 + 648) = v317;
    v217 = *(char **)(a2 + 656);
    *(_QWORD *)(a2 + 664) = v217;
    v218 = *(_QWORD *)(a2 + 672) - (_QWORD)v217;
    if (v218 >= v211)
    {
      bzero(v217, v187 + 1);
      v212 = v317;
      *(_QWORD *)(a2 + 664) = &v217[v211];
    }
    else
    {
      if ((v211 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v219 = 2 * v218;
      if (2 * v218 <= v211)
        v219 = v187 + 1;
      if (v218 >= 0x3FFFFFFFFFFFFFFFLL)
        v220 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v220 = v219;
      v221 = (char *)operator new(v220);
      bzero(v221, v187 + 1);
      *(_QWORD *)(a2 + 656) = v221;
      *(_QWORD *)(a2 + 664) = &v221[v211];
      *(_QWORD *)(a2 + 672) = &v221[v220];
      v212 = v317;
      if (v217)
      {
        operator delete(v217);
        v212 = v317;
      }
    }
  }
  *(_QWORD *)(a2 + 712) = *(_QWORD *)(a2 + 704);
  v331 = (MIL::Transform::_anonymous_namespace_::TopoSortViaDepthFirstSearch *)(a2 + 576);
  v321 = (void **)(a2 + 704);
  v222 = *(_QWORD *)(a2 + 680);
  v223 = v212;
  do
  {
    *(_QWORD *)(a2 + 688) = v222;
    v318 = v223;
    v222 = *(_QWORD *)(a2 + 680);
    if (v222 != *(_QWORD *)(a2 + 688))
    {
      v222 = *(_QWORD *)(a2 + 688);
      do
      {
        v224 = *(_QWORD *)(v222 - 8);
        v225 = v224 - *(_QWORD *)(a2 + 584);
        v226 = *(_QWORD *)(a2 + 600);
        if (v225 >= (*(_QWORD *)(a2 + 608) - v226) >> 4)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v227 = (MIL::Transform::ProgramTransformer::ProgramTransformerImpl *)(v226 + 16 * v225);
        v228 = *(_QWORD *)v227;
        if (!*(_QWORD *)v227)
        {
          v323 = v227;
          v325 = v224;
          MIL::Builder::BlockBuilder::GetOperation(*(MIL::Builder::BlockBuilder::BlockBuilderImpl ***)(a2 + 576), v224, &v336);
          v229 = v336.__r_.__value_.__r.__words[0];
          v230 = *(_QWORD *)(a2 + 632);
          v231 = *(_QWORD *)(a2 + 624);
          Parameters = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters((MIL::BuilderPrivate::OperationBuilderPrivate *)v336.__r_.__value_.__l.__data_, v232);
          v234 = (v230 - v231) >> 3;
          v235 = (unsigned __int8 *)(Parameters + 1);
          v236 = (unsigned __int8 *)*Parameters;
          v328 = v234;
          if ((_QWORD *)*Parameters != Parameters + 1)
          {
            do
            {
              for (i = (uint64_t **)*((_QWORD *)MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(*(_QWORD *)v331, v229, v236 + 32)+ 2); i; i = (uint64_t **)*i)
              {
                MIL::Builder::DataDependency::GetProducer(i + 2, &v337);
                if (v337.__r_.__value_.__r.__words[0])
                {
                  v238 = *(char ***)(a2 + 592);
                  v240 = *v238;
                  v239 = v238[1];
                  if (v239 != v240)
                  {
                    v241 = (v239 - v240) >> 4;
                    do
                    {
                      v242 = v241 >> 1;
                      v243 = (std::string::size_type *)&v240[16 * (v241 >> 1)];
                      v245 = *v243;
                      v244 = (char *)(v243 + 2);
                      v241 += ~(v241 >> 1);
                      if (v245 < v337.__r_.__value_.__r.__words[0])
                        v240 = v244;
                      else
                        v241 = v242;
                    }
                    while (v241);
                  }
                  if (v240 != v239 && *(_QWORD *)v240 == v337.__r_.__value_.__r.__words[0])
                  {
                    v246 = *(char **)(a2 + 632);
                    v247 = *(_QWORD *)(a2 + 640);
                    if ((unint64_t)v246 >= v247)
                    {
                      v249 = (char *)*v209;
                      v250 = (v246 - (_BYTE *)*v209) >> 3;
                      v251 = v250 + 1;
                      if ((unint64_t)(v250 + 1) >> 61)
                        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                      v252 = v247 - (_QWORD)v249;
                      if (v252 >> 2 > v251)
                        v251 = v252 >> 2;
                      if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF8)
                        v253 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v253 = v251;
                      if (v253)
                      {
                        v254 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 640, v253);
                        v246 = *(char **)(a2 + 632);
                        v249 = *(char **)(a2 + 624);
                      }
                      else
                      {
                        v254 = 0;
                      }
                      v255 = &v254[8 * v250];
                      *(_QWORD *)v255 = *((_QWORD *)v240 + 1);
                      v248 = v255 + 8;
                      while (v246 != v249)
                      {
                        v256 = *((_QWORD *)v246 - 1);
                        v246 -= 8;
                        *((_QWORD *)v255 - 1) = v256;
                        v255 -= 8;
                      }
                      *(_QWORD *)(a2 + 624) = v255;
                      *(_QWORD *)(a2 + 632) = v248;
                      *(_QWORD *)(a2 + 640) = &v254[8 * v253];
                      if (v249)
                        operator delete(v249);
                    }
                    else
                    {
                      *(_QWORD *)v246 = *((_QWORD *)v240 + 1);
                      v248 = v246 + 8;
                    }
                    *(_QWORD *)(a2 + 632) = v248;
                    ++v234;
                  }
                }
                v257 = (std::__shared_weak_count *)v337.__r_.__value_.__l.__size_;
                if (v337.__r_.__value_.__l.__size_)
                {
                  v258 = (unint64_t *)(v337.__r_.__value_.__l.__size_ + 8);
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                    std::__shared_weak_count::__release_weak(v257);
                  }
                }
              }
              v260 = (unsigned __int8 *)*((_QWORD *)v236 + 1);
              if (v260)
              {
                do
                {
                  v261 = v260;
                  v260 = *(unsigned __int8 **)v260;
                }
                while (v260);
              }
              else
              {
                do
                {
                  v261 = (unsigned __int8 *)*((_QWORD *)v236 + 2);
                  v262 = *(_QWORD *)v261 == (_QWORD)v236;
                  v236 = v261;
                }
                while (!v262);
              }
              v236 = v261;
            }
            while (v261 != v235);
          }
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          v227 = v323;
          *(_QWORD *)v323 = v328;
          *((_QWORD *)v323 + 1) = v234;
          v263 = (std::__shared_weak_count *)v336.__r_.__value_.__l.__size_;
          v224 = v325;
          if (v336.__r_.__value_.__l.__size_)
          {
            v264 = (unint64_t *)(v336.__r_.__value_.__l.__size_ + 8);
            do
              v265 = __ldaxr(v264);
            while (__stlxr(v265 - 1, v264));
            if (!v265)
            {
              ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
              std::__shared_weak_count::__release_weak(v263);
            }
          }
          v228 = *(_QWORD *)v323;
        }
        if (v228 == *((_QWORD *)v227 + 1))
        {
          v266 = v224 - *(_QWORD *)(a2 + 648);
          v267 = *(_QWORD *)(a2 + 656);
          if (*(_QWORD *)(a2 + 664) - v267 <= v266)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          *(_BYTE *)(v267 + v266) = 2;
          v268 = *(unint64_t **)(a2 + 712);
          v269 = *(_QWORD *)(a2 + 720);
          if ((unint64_t)v268 >= v269)
          {
            v271 = (unint64_t *)*v321;
            v272 = ((char *)v268 - (_BYTE *)*v321) >> 3;
            v273 = v272 + 1;
            if ((unint64_t)(v272 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v274 = v269 - (_QWORD)v271;
            if (v274 >> 2 > v273)
              v273 = v274 >> 2;
            if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFF8)
              v275 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v275 = v273;
            if (v275)
            {
              v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 720, v275);
              v268 = *(unint64_t **)(a2 + 712);
              v271 = *(unint64_t **)(a2 + 704);
            }
            else
            {
              v276 = 0;
            }
            v277 = (unint64_t *)&v276[8 * v272];
            *v277 = v224;
            v270 = v277 + 1;
            while (v268 != v271)
            {
              v278 = *--v268;
              *--v277 = v278;
            }
            *(_QWORD *)(a2 + 704) = v277;
            *(_QWORD *)(a2 + 712) = v270;
            *(_QWORD *)(a2 + 720) = &v276[8 * v275];
            if (v271)
              operator delete(v271);
          }
          else
          {
            *v268 = v224;
            v270 = v268 + 1;
          }
          *(_QWORD *)(a2 + 712) = v270;
          v222 = *(_QWORD *)(a2 + 688) - 8;
          *(_QWORD *)(a2 + 688) = v222;
        }
        else
        {
          *(_QWORD *)v227 = v228 + 1;
          v222 = *(_QWORD *)(a2 + 688);
        }
      }
      while (*(_QWORD *)(a2 + 680) != v222);
    }
    v223 = v318 + 1;
  }
  while (v318 + 1 <= v319);
  v279 = *(_QWORD *)(a2 + 712);
  v280 = *(_QWORD *)(a2 + 704);
  v281 = (void **)(a2 + 728);
  v282 = (v279 - v280) >> 3;
  *(_QWORD *)(a2 + 736) = *(_QWORD *)(a2 + 728);
  std::vector<unsigned long long>::reserve((void **)(a2 + 728), v282);
  if (v279 != v280)
  {
    v283 = 0;
    if (v282 <= 1)
      v282 = 1;
    v284 = v317;
    while (1)
    {
      v285 = *(_QWORD *)(a2 + 704);
      if (v283 >= (*(_QWORD *)(a2 + 712) - v285) >> 3)
        goto LABEL_382;
      v286 = *(_QWORD *)(v285 + 8 * v283) - v284;
      v287 = *(char **)(a2 + 736);
      v288 = *(_QWORD *)(a2 + 744);
      if ((unint64_t)v287 >= v288)
      {
        v290 = (char *)*v281;
        v291 = (v287 - (_BYTE *)*v281) >> 3;
        v292 = v291 + 1;
        if ((unint64_t)(v291 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v293 = v288 - (_QWORD)v290;
        if (v293 >> 2 > v292)
          v292 = v293 >> 2;
        if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
          v294 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v294 = v292;
        if (v294)
        {
          v295 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 744, v294);
          v287 = *(char **)(a2 + 736);
          v290 = *(char **)(a2 + 728);
        }
        else
        {
          v295 = 0;
        }
        v296 = (uint64_t *)&v295[8 * v291];
        *v296 = v286;
        v289 = (char *)(v296 + 1);
        while (v287 != v290)
        {
          v297 = *((_QWORD *)v287 - 1);
          v287 -= 8;
          *--v296 = v297;
        }
        *(_QWORD *)(a2 + 728) = v296;
        *(_QWORD *)(a2 + 736) = v289;
        *(_QWORD *)(a2 + 744) = &v295[8 * v294];
        if (v290)
          operator delete(v290);
        v284 = v317;
      }
      else
      {
        *(_QWORD *)v287 = v286;
        v289 = v287 + 8;
      }
      *(_QWORD *)(a2 + 736) = v289;
      if (++v283 == v282)
        goto LABEL_376;
    }
  }
  v289 = *(char **)(a2 + 736);
  v284 = v317;
LABEL_376:
  if (v289 == *v281)
    v298 = 0;
  else
    v298 = (uint64_t)*v281;
  MIL::BuilderPrivate::BlockBuilderPrivate::PermuteOperations((uint64_t)v320, v284, v298, (v289 - (_BYTE *)*v281) >> 3);
  return 1;
}

void sub_1E069D0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;

  if (a31 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t std::optional<MIL::Matching::Matcher>::emplace[abi:ne180100]<MIL::Builder::BlockBuilder *&,MIL::Builder::OperationBuilder *&,MIL::Matching::CompiledPattern const&,void>(MIL::Matching::Matcher *a1, MIL::Builder::BlockBuilder **a2, MIL::Builder::OperationBuilder **a3, MIL::Matching::CompiledPattern *a4)
{
  uint64_t result;

  if (*((_BYTE *)a1 + 8))
  {
    MIL::Matching::Matcher::~Matcher(a1);
    *((_BYTE *)a1 + 8) = 0;
  }
  result = MIL::Matching::Matcher::Matcher(a1, *a2, *a3, a4);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

unint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetOperationIndices(uint64_t a1, MIL::Builder::BlockBuilder *this, unint64_t **a3, char **a4)
{
  unint64_t result;
  unint64_t i;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;

  a3[1] = *a3;
  a4[1] = *a4;
  result = MIL::Builder::BlockBuilder::GetNumOperations(this);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)this, i, &v38);
      v10 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
        }
      }
      v14 = *(_QWORD **)a1;
      v13 = *(_QWORD **)(a1 + 8);
      if (*(_QWORD **)a1 != v13)
      {
        while (*v14 != (_QWORD)v10)
        {
          if (++v14 == v13)
          {
            v14 = *(_QWORD **)(a1 + 8);
            break;
          }
        }
      }
      if (v14 != v13)
      {
        v16 = a3[1];
        v15 = (unint64_t)a3[2];
        if ((unint64_t)v16 >= v15)
        {
          v18 = *a3;
          v19 = v16 - *a3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v21 = v15 - (_QWORD)v18;
          if (v21 >> 2 > v20)
            v20 = v21 >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v22);
            v18 = *a3;
            v16 = a3[1];
          }
          else
          {
            v23 = 0;
          }
          v24 = (unint64_t *)&v23[8 * v19];
          *v24 = i;
          v17 = v24 + 1;
          while (v16 != v18)
          {
            v25 = *--v16;
            *--v24 = v25;
          }
          *a3 = v24;
          a3[1] = v17;
          a3[2] = (unint64_t *)&v23[8 * v22];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v16 = i;
          v17 = v16 + 1;
        }
        a3[1] = v17;
        v27 = (unint64_t)a4[1];
        v26 = (unint64_t)a4[2];
        if (v27 >= v26)
        {
          v29 = (uint64_t)(v27 - (_QWORD)*a4) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v30 = v26 - (_QWORD)*a4;
          v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1))
            v31 = v29 + 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v32);
          else
            v33 = 0;
          v34 = &v33[8 * *((_QWORD *)&v10 + 1)];
          *(_QWORD *)v34 = v10;
          v28 = (uint64_t)(v34 + 8);
          v36 = *a4;
          v35 = a4[1];
          if (v35 != *a4)
          {
            do
            {
              v37 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *((_QWORD *)v34 - 1) = v37;
              v34 -= 8;
            }
            while (v35 != v36);
            v35 = *a4;
          }
          *a4 = v34;
          a4[1] = (char *)v28;
          a4[2] = &v33[8 * v32];
          if (v35)
            operator delete(v35);
        }
        else
        {
          **((_QWORD **)&v10 + 1) = v10;
          v28 = *((_QWORD *)&v10 + 1) + 8;
        }
        a4[1] = (char *)v28;
      }
      result = MIL::Builder::BlockBuilder::GetNumOperations(this);
    }
  }
  return result;
}

void MIL::Transform::MatchContext::MatchContextImpl::PrepareForNewMatch(MIL::Transform::MatchContext::MatchContextImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_BYTE *)this + 48) = 0;
  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 7);
  while (v2 != v3)
    v2 = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v2 - 16);
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  std::vector<unsigned long>::resize((uint64_t)this + 104, 1uLL);
  std::vector<unsigned long>::resize((uint64_t)this + 128, 1uLL);
}

unint64_t **MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AdjustInsertionPositionsAfterRemoval(unint64_t **result, unint64_t **a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *result;
  v3 = result[1];
  v5 = *a2;
  v4 = a2[1];
  if (*result == v3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    do
    {
      v5 = v4;
      if (v7 != v4)
      {
        v8 = *v2;
        while (*v7 <= v8)
        {
          *v7 -= v6;
          v7 += 2;
          if (v7 == v4)
          {
            v5 = v4;
            goto LABEL_9;
          }
        }
        v5 = v7;
      }
LABEL_9:
      ++v6;
      ++v2;
      v7 = v5;
    }
    while (v2 != v3);
  }
  while (v5 != v4)
  {
    *v5 -= v6;
    v5 += 2;
  }
  return result;
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetOperationsToInsertAndTheirPositions(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v9 = *(char **)a3;
  for (i = *(_QWORD *)(a3 + 8); (char *)i != v9; i = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *(_QWORD *)(a3 + 8) = v9;
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)a3, (uint64_t)(a1[1] - *a1) >> 4);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  std::vector<unsigned long long>::reserve((void **)a4, (uint64_t)(a1[1] - *a1) >> 4);
  v10 = *(_QWORD **)a2;
  v11 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v11)
  {
    do
    {
      v12 = v10[1];
      if (v12 >= (uint64_t)(a1[1] - *a1) >> 4)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)a3, (__int128 *)(*a1 + 16 * v12));
      v14 = *(_QWORD **)(a4 + 8);
      v13 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *(_QWORD **)a4;
        v17 = ((uint64_t)v14 - *(_QWORD *)a4) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a4 + 16, v20);
          v16 = *(_QWORD **)a4;
          v14 = *(_QWORD **)(a4 + 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v17];
        *(_QWORD *)v22 = *v10;
        v15 = v22 + 8;
        while (v14 != v16)
        {
          v23 = *--v14;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        *(_QWORD *)a4 = v22;
        *(_QWORD *)(a4 + 8) = v15;
        *(_QWORD *)(a4 + 16) = &v21[8 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = *v10;
        v15 = v14 + 1;
      }
      *(_QWORD *)(a4 + 8) = v15;
      v10 += 2;
    }
    while (v10 != v11);
  }
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AdjustMaxIndex(MIL::Transform::ProgramTransformer::ProgramTransformerImpl *this, unint64_t a2, uint64_t a3)
{
  std::logic_error *exception;

  if ((unint64_t)this + 1 < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "numRemoved is too big");
    goto LABEL_6;
  }
  if (!a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "numInserted is zero");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return (uint64_t)this + a3 - a2;
}

void sub_1E069D7F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::Builder::OperationBuilder *>::__init_with_size[abi:ne180100]<MIL::Builder::OperationBuilder **,MIL::Builder::OperationBuilder **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E069D86C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1E069DB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1E069DBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::AddMatchedDependencies(MIL::BuilderPrivate::OperationBuilderPrivate *a1, const MIL::Builder::OperationBuilder *a2, uint64_t *a3, uint64_t a4, MIL::Transform::_anonymous_namespace_::IndexSet *a5)
{
  _QWORD *Parameters;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v29;
  std::__shared_weak_count *v30;

  Parameters = (_QWORD *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(a1, a2);
  v6 = (_QWORD *)*Parameters;
  v24 = Parameters + 1;
  if ((_QWORD *)*Parameters != Parameters + 1)
  {
    do
    {
      v8 = (_QWORD *)v6[7];
      v7 = (_QWORD *)v6[8];
      while (v8 != v7)
      {
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8);
        if (v9)
        {
          v10 = (const void **)v9;
          v12 = *a3;
          v11 = a3[1];
          if (v11 == *a3)
            goto LABEL_15;
          v13 = (v11 - *a3) >> 4;
          do
          {
            v14 = v12 + 16 * (v13 >> 1);
            v15 = std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string>((uint64_t)&v29, v14, v10);
            if (v15)
              v13 += ~(v13 >> 1);
            else
              v13 >>= 1;
            if (v15)
              v12 = v14 + 16;
          }
          while (v13);
          if (v12 == v11
            || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string_view>((uint64_t)&v29, v10, v12))
          {
LABEL_15:
            MIL::Builder::BlockBuilder::TryGetOperation(a4, (unsigned __int8 *)v10, &v29);
            if (v29)
            {
              v16 = (_QWORD *)*((_QWORD *)a2 + 1);
              v17 = *(_QWORD **)a2;
              if (*(_QWORD **)a2 != v16)
              {
                while (*v17 != v29)
                {
                  if (++v17 == v16)
                  {
                    v17 = (_QWORD *)*((_QWORD *)a2 + 1);
                    break;
                  }
                }
              }
              if (v17 != v16)
            }
            v18 = v30;
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
          }
        }
        v8 += 2;
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v6[2];
          v23 = *v22 == (_QWORD)v6;
          v6 = v22;
        }
        while (!v23);
      }
      v6 = v22;
    }
    while (v22 != v24);
  }
}

void sub_1E069E0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL MIL::Transform::`anonymous namespace'::IndexSet::Add(MIL::Transform::_anonymous_namespace_::IndexSet *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = (_QWORD *)((char *)this + 8);
  v4 = a2 - *(_QWORD *)this;
  if (*((_QWORD *)this + 2) <= v4)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v5 = *(_QWORD *)(*v3 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v4);
  if (!v5)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = (char *)*((_QWORD *)this + 5);
    if ((unint64_t)v8 >= v7)
    {
      v10 = (char *)*((_QWORD *)this + 4);
      v11 = (v8 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v12 = v7 - (_QWORD)v10;
      v13 = (uint64_t)(v7 - (_QWORD)v10) >> 2;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)this + 48, v14);
        v10 = (char *)*((_QWORD *)this + 4);
        v8 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a2;
      v9 = v16 + 8;
      while (v8 != v10)
      {
        v18 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      *((_QWORD *)this + 4) = v16;
      *((_QWORD *)this + 5) = v9;
      *((_QWORD *)this + 6) = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      v9 = v8 + 8;
    }
    *((_QWORD *)this + 5) = v9;
    *(_QWORD *)(*((_QWORD *)this + 1) + (((unint64_t)(a2 - *(_QWORD *)this) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (a2 - *(_BYTE *)this);
  }
  return v5 == 0;
}

uint64_t std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string_view>(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3;
  const void *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;
  unsigned int v10;

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = memcmp(v4, v6, v8);
  if (v5 < v7)
    v10 = -1;
  else
    v10 = 1;
  if (v5 == v7)
    v10 = 0;
  if (v9)
    v10 = v9;
  return v10 >> 31;
}

uint64_t std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string>(uint64_t a1, uint64_t a2, const void **a3)
{
  const void *v3;
  size_t v4;
  int v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;
  unsigned int v10;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *((char *)a3 + 23);
  if (v5 >= 0)
    v6 = a3;
  else
    v6 = *a3;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  v9 = memcmp(v3, v6, v8);
  if (v4 < v7)
    v10 = -1;
  else
    v10 = 1;
  if (v4 == v7)
    v10 = 0;
  if (v9)
    v10 = v9;
  return v10 >> 31;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::OldOutput *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 *k;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *j;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  __int128 *v57;
  BOOL v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _OWORD *v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::OldOutput *>(__int128 *result, unint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *a2;
  if (*a2 >= *(_QWORD *)result && (*(_QWORD *)result < v3 || a2[1] >= *((_QWORD *)result + 1)))
  {
    if (*(_QWORD *)a3 < v3 || v3 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
    {
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
      *a3 = v5;
      if (*a2 < *(_QWORD *)result || *(_QWORD *)result >= *a2 && a2[1] < *((_QWORD *)result + 1))
      {
        v6 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v6;
      }
    }
  }
  else
  {
    if (*(_QWORD *)a3 < v3 || v3 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
    {
      v4 = *result;
      *result = *a3;
LABEL_17:
      *a3 = v4;
      return result;
    }
    v7 = *result;
    *result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    if (*(_QWORD *)a3 < *a2 || *a2 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
    {
      v4 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::OldOutput *>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_QWORD *)a2 - 2);
      if (v7 < *(_QWORD *)a1 || *(_QWORD *)a1 >= v7 && *((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 8))
      {
        v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v8;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v19 = (__int128 *)(a1 + 16);
      v20 = (__int128 *)(a1 + 32);
      v21 = (__int128 *)(a1 + 48);
      v22 = a2 - 1;
      v23 = *((_QWORD *)a2 - 2);
      v24 = *(_QWORD *)(a1 + 48);
      if (v23 < v24 || v24 >= v23 && *((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 56))
      {
        v25 = *v21;
        *v21 = *v22;
        *v22 = v25;
        v26 = *(_QWORD *)(a1 + 48);
        v27 = *(_QWORD *)(a1 + 32);
        if (v26 < v27 || v27 >= v26 && *(_QWORD *)(a1 + 56) < *(_QWORD *)(a1 + 40))
        {
          v28 = *v20;
          *v20 = *v21;
          *v21 = v28;
          v29 = *(_QWORD *)(a1 + 32);
          v30 = *(_QWORD *)(a1 + 16);
          if (v29 < v30 || v30 >= v29 && *(_QWORD *)(a1 + 40) < *(_QWORD *)(a1 + 24))
          {
            v31 = *v19;
            *v19 = *v20;
            *v20 = v31;
            v32 = *(_QWORD *)(a1 + 16);
            if (v32 < *(_QWORD *)a1 || *(_QWORD *)a1 >= v32 && *(_QWORD *)(a1 + 24) < *(_QWORD *)(a1 + 8))
            {
              v33 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *v19 = v33;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (__int128 *)(a1 + 32);
      v10 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 < *(_QWORD *)v9)
      break;
    if (*(_QWORD *)v9 >= v13)
    {
      v14 = *((_QWORD *)v10 + 1);
      if (v14 < *((_QWORD *)v9 + 1))
        goto LABEL_10;
    }
LABEL_20:
    v9 = v10;
    v11 += 16;
    if (++v10 == a2)
      return 1;
  }
  v14 = *((_QWORD *)v10 + 1);
LABEL_10:
  *v10 = *v9;
  v15 = (_QWORD *)a1;
  if (v9 != (__int128 *)a1)
  {
    v16 = v11;
    while (1)
    {
      v17 = a1 + v16;
      v18 = *(_QWORD *)(a1 + v16 + 16);
      if (v13 >= v18)
      {
        if (v18 < v13)
        {
          v15 = v9;
          goto LABEL_19;
        }
        if (v14 >= *(_QWORD *)(v17 + 24))
          break;
      }
      --v9;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + v16 + 16);
      v16 -= 16;
      if (v16 == -32)
      {
        v15 = (_QWORD *)a1;
        goto LABEL_19;
      }
    }
    v15 = (_QWORD *)(a1 + v16 + 32);
  }
LABEL_19:
  *v15 = v13;
  v15[1] = v14;
  if (++v12 != 8)
    goto LABEL_20;
  return v10 + 1 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::OldOutput *>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a3 >= *(_QWORD *)a4 && *(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)a3 < *a2 || *a2 >= *(_QWORD *)a3 && *(_QWORD *)(a3 + 8) < a2[1])
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= *a2 && a2[1] < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t MIL::Transform::`anonymous namespace'::IndexSet::Contains(MIL::Transform::_anonymous_namespace_::IndexSet *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)((char *)this + 8);
  v4 = a2 - *(_QWORD *)this;
  if (*((_QWORD *)this + 2) <= v4)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  return (*(_QWORD *)(*v3 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1;
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetMatchedOperationIndex(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  std::logic_error *exception;

  v3 = *(_QWORD **)(a3 + 8);
  v4 = *(_QWORD **)a3;
  if (*(_QWORD **)a3 != v3)
  {
    while (*v4 != a1)
    {
      if (++v4 == v3)
      {
        v4 = *(_QWORD **)(a3 + 8);
        break;
      }
    }
  }
  if (v4 == v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Operation not found in list of matched ops");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v5 = ((uint64_t)v4 - *(_QWORD *)a3) >> 3;
  if (v5 >= (uint64_t)(a2[1] - *a2) >> 3)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  return *(_QWORD *)(*a2 + 8 * v5);
}

void sub_1E069F2F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  char v18;
  BOOL v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        if (v6 < *v5)
          break;
        if (*v5 >= v6)
        {
          v7 = v5[3];
          if (v7 < v5[1])
            goto LABEL_6;
        }
LABEL_19:
        v2 = v4 + 2;
        v3 += 16;
        if (v4 + 2 == a2)
          return result;
      }
      v7 = v5[3];
LABEL_6:
      *(_OWORD *)v4 = *(_OWORD *)v5;
      v8 = result;
      if (v5 != result)
      {
        v9 = v3;
        while (1)
        {
          v10 = (_OWORD *)((char *)result + v9);
          v11 = *(unint64_t *)((char *)result + v9 - 16);
          if (v6 >= v11)
          {
            if (v11 < v6)
            {
              v8 = v5;
              goto LABEL_18;
            }
            if (v7 >= *((_QWORD *)v10 - 1))
              break;
          }
          v5 -= 2;
          *v10 = *(_OWORD *)((char *)result + v9 - 16);
          v9 -= 16;
          if (!v9)
          {
            v8 = result;
            goto LABEL_18;
          }
        }
        v8 = (unint64_t *)((char *)result + v9);
      }
LABEL_18:
      *v8 = v6;
      v8[1] = v7;
      goto LABEL_19;
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;

  if (result != a2)
  {
    while (1)
    {
      if (result + 2 == a2)
        return result;
      v2 = result;
      result += 2;
      v3 = v2[2];
      if (v3 >= *v2)
      {
        if (*v2 >= v3)
        {
          v4 = v2[3];
          if (v4 < v2[1])
            goto LABEL_7;
        }
      }
      else
      {
        v4 = v2[3];
        do
        {
          do
          {
LABEL_7:
            v5 = v2;
            *((_OWORD *)v2 + 1) = *(_OWORD *)v2;
            v7 = *(v2 - 2);
            v2 -= 2;
            v6 = v7;
          }
          while (v3 < v7);
        }
        while (v6 >= v3 && v4 < *(v5 - 1));
        *v5 = v3;
        v5[1] = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(__int128 *a1, unint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= v3 && a2[1] < *((_QWORD *)a1 + 1))
  {
    if (*(_QWORD *)a3 < v3 || v3 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
    {
      v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      v8 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*(_QWORD *)a3 < *a2 || *a2 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
      {
        v9 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v9;
        return 2;
      }
    }
    return 1;
  }
  if (*(_QWORD *)a3 < v3 || v3 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= *a2 && a2[1] < *((_QWORD *)a1 + 1))
    {
      v7 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(a2 - 16);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(_QWORD *)(a2 - 8)))
  {
    for (i = a1 + 2; (unint64_t)i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_QWORD *)(a2 + 8); a2 -= 16)
    {
      v8 = *(_QWORD *)(a2 - 16);
      v4 = v8;
    }
  }
  while ((unint64_t)i < a2)
  {
    v14 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v14;
    do
    {
      v10 = i[2];
      i += 2;
      v9 = v10;
    }
    while (v2 >= v10 && (v9 < v2 || v3 >= i[1]));
    do
    {
      do
      {
        v12 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v11 = v12;
      }
      while (v2 < v12);
    }
    while (v11 >= v2 && v3 < *(_QWORD *)(a2 + 8));
  }
  if (i - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v19;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(_QWORD *)(a2 - 16);
      a2 -= 16;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  v12 = v6;
  if (v6 < a2)
  {
    v13 = a2;
    do
    {
      v19 = *(_OWORD *)v12;
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)v13 = v19;
      do
      {
        do
        {
          v15 = *(_QWORD *)(v12 + 16);
          v12 += 16;
          v14 = v15;
        }
        while (v15 < v3);
      }
      while (v3 >= v14 && *(_QWORD *)(v12 + 8) < v4);
      do
      {
        v17 = *(_QWORD *)(v13 - 16);
        v13 -= 16;
        v16 = v17;
      }
      while (v17 >= v3 && (v3 < v16 || *(_QWORD *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((unint64_t *)(v12 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 16);
  *(_QWORD *)(v12 - 16) = v3;
  *(_QWORD *)(v12 - 8) = v4;
  return v12 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_QWORD *)a2 - 2);
      if (v7 < *(_QWORD *)a1 || *(_QWORD *)a1 >= v7 && *((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 8))
      {
        v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(a1, (unint64_t *)(a1 + 16), a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((__n128 *)a1, (unint64_t *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v9 = (__int128 *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((__int128 *)a1, (unint64_t *)(a1 + 16), (__int128 *)(a1 + 32));
      v10 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 < *(_QWORD *)v9)
      break;
    if (*(_QWORD *)v9 >= v13)
    {
      v14 = *((_QWORD *)v10 + 1);
      if (v14 < *((_QWORD *)v9 + 1))
        goto LABEL_12;
    }
LABEL_22:
    v9 = v10;
    v11 += 16;
    if (++v10 == a2)
      return 1;
  }
  v14 = *((_QWORD *)v10 + 1);
LABEL_12:
  *v10 = *v9;
  v15 = (_QWORD *)a1;
  if (v9 != (__int128 *)a1)
  {
    v16 = v11;
    while (1)
    {
      v17 = a1 + v16;
      v18 = *(_QWORD *)(a1 + v16 + 16);
      if (v13 >= v18)
      {
        if (v18 < v13)
        {
          v15 = v9;
          goto LABEL_21;
        }
        if (v14 >= *(_QWORD *)(v17 + 24))
          break;
      }
      --v9;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + v16 + 16);
      v16 -= 16;
      if (v16 == -32)
      {
        v15 = (_QWORD *)a1;
        goto LABEL_21;
      }
    }
    v15 = (_QWORD *)(a1 + v16 + 32);
  }
LABEL_21:
  *v15 = v13;
  v15[1] = v14;
  if (++v12 != 8)
    goto LABEL_22;
  return v10 + 1 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((__int128 *)a1, a2, (__int128 *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a3 >= *(_QWORD *)a4 && *(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)a3 < *a2 || *a2 >= *(_QWORD *)a3 && *(_QWORD *)(a3 + 8) < a2[1])
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= *a2 && a2[1] < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(__n128 *a1, unint64_t *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0] || a4->n128_u64[0] >= a5->n128_u64[0] && a5->n128_u64[1] < a4->n128_u64[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < a3->n128_u64[0] || a3->n128_u64[0] >= a4->n128_u64[0] && a4->n128_u64[1] < a3->n128_u64[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a3->n128_u64[0] < *a2 || *a2 >= a3->n128_u64[0] && a3->n128_u64[1] < a2[1])
      {
        result = *(__n128 *)a2;
        *(__n128 *)a2 = *a3;
        *a3 = result;
        if (*a2 < a1->n128_u64[0] || a1->n128_u64[0] >= *a2 && a2[1] < a1->n128_u64[1])
        {
          result = *a1;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*v14 < *a1 || *a1 >= *v14 && v14[1] < a1[1])
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 2;
      do
      {
        v21 = *(_OWORD *)a1;
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
        v17 -= 2;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && v8[1] < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (*v8 >= *a4)
      {
        v12 = a4[1];
        if (v11 < *v8 || v8[1] >= v12)
        {
          *(_OWORD *)a4 = *(_OWORD *)v8;
          if (v5 >= v7)
          {
            while (1)
            {
              v14 = 2 * v7;
              v7 = (2 * v7) | 1;
              v13 = (unint64_t *)(result + 16 * v7);
              v15 = v14 + 2;
              if (v15 < a3)
              {
                v16 = v13[2];
                if (*v13 < v16 || v16 >= *v13 && v13[1] < v13[3])
                {
                  v13 += 2;
                  v7 = v15;
                }
              }
              if (*v13 < v11 || v11 >= *v13 && v13[1] < v12)
                break;
              *(_OWORD *)v8 = *(_OWORD *)v13;
              v8 = v13;
              if (v5 < v7)
                goto LABEL_22;
            }
          }
          v13 = v8;
LABEL_22:
          *v13 = v11;
          v13[1] = v12;
        }
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 2 * v3 + 2;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3)
    {
      v9 = a1[2];
      if (*a1 < v9 || v9 >= *a1 && a1[1] < a1[3])
      {
        a1 += 2;
        v3 = v8;
      }
    }
    result = *(__n128 *)a1;
    *(_OWORD *)v6 = *(_OWORD *)a1;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (v7 < *v6)
        return result;
      v8 = *(_QWORD *)(a2 - 8);
      if (v6[1] >= v8)
        return result;
    }
    else
    {
      v8 = *(_QWORD *)(a2 - 8);
    }
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        v10 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v9 = (unint64_t *)(result + 16 * v5);
        if (*v9 >= v7 && (v7 < *v9 || v9[1] >= v8))
          break;
        *(_OWORD *)v6 = *(_OWORD *)v9;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v10 <= 1)
          goto LABEL_12;
      }
    }
    v9 = v6;
LABEL_12:
    *v9 = v7;
    v9[1] = v8;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  char v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 2);
        v24 = *v9;
        if (v23 < *v9)
        {
          v25 = v9[1];
          v26 = *(a2 - 1);
LABEL_34:
          *v9 = v23;
          v9[1] = v26;
          *(a2 - 2) = v24;
          *(a2 - 1) = v25;
          return result;
        }
        if (v24 >= v23)
        {
          v26 = *(a2 - 1);
          v25 = v9[1];
          if (v26 < v25)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            v17 = v9[1];
            v18 = v15[1];
            *v9 = *v15;
            v9[1] = v18;
            *v15 = v16;
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v19 = *(v9 - 2);
          if (v19 >= *v9 && (*v9 < v19 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,std::__less<void,void> &>(v9, a2);
            v9 = (unint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,std::__less<void,void> &>(v9, a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, v20);
          v9 = v20 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v20 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = v5[3];
      v9 = v5[1];
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = v5[3];
      v9 = v5[1];
    }
    v5[2] = v7;
    v4[1] = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(unint64_t *)((char *)result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(unint64_t *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 2;
      v14 = (unint64_t *)((char *)result + v11);
      *v14 = v12;
      v14[1] = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = (unint64_t *)((char *)result + v11);
      v13 = *(unint64_t *)((char *)result + v11 - 8);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *v10 = v6;
    v10[1] = v8;
LABEL_19:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *i;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *j;
  unint64_t v9;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      for (i = result + 1; ; i += 2)
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4)
          break;
        if (v6 >= v5)
        {
          v7 = v4[3];
          if (v7 < v4[1])
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 2;
        if (result + 2 == a2)
          return result;
      }
      v7 = v4[3];
LABEL_6:
      for (j = i; ; j -= 2)
      {
        v9 = *j;
        j[1] = v6;
        j[2] = v9;
        v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2)))
          break;
      }
      *(j - 1) = v5;
      *j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = a3[1];
      v10 = a2[1];
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = a2[1];
      v11 = a3[1];
    }
    *a2 = v9;
    a2[1] = v11;
    *a3 = v3;
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12)
        return 1;
      v15 = a2[1];
      v14 = a1[1];
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = a1[1];
      v15 = a2[1];
    }
    *a1 = v12;
    a1[1] = v15;
    result = 2;
    *a2 = v13;
    a2[1] = v14;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3)
    {
      v6 = a3[1];
LABEL_6:
      v7 = a1[1];
      *a1 = v5;
      a1[1] = v6;
      *a3 = v4;
      a3[1] = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = a3[1];
      v16 = a2[1];
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = a2[1];
    }
    v17 = a1[1];
    *a1 = v3;
    a1[1] = v16;
    *a2 = v4;
    a2[1] = v17;
    v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = a3[1];
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = a3[1];
    }
    *a2 = v18;
    a2[1] = v19;
    result = 2;
    *a3 = v4;
    a3[1] = v17;
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[2];
      i += 2;
      v9 = v11;
      v12 = *(i - 1);
      *(i - 1) = a2[1];
      a2[1] = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= i[1]))
      {
        v13 = i[2];
        i += 2;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(a2 - 2);
          a2 -= 2;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    v15 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v15;
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unint64_t *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unint64_t *)v6;
    v14 = a2;
    do
    {
      v15 = v13[1];
      v16 = v14[1];
      *v13 = v12;
      v13[1] = v16;
      *v14 = v5;
      v14[1] = v15;
      do
      {
        do
        {
          v17 = v13[2];
          v13 += 2;
          v5 = v17;
        }
        while (v17 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    v19 = *(v13 - 1);
    *a1 = *(v13 - 2);
    a1[1] = v19;
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        v8 = a1[1];
        v9 = *(a2 - 1);
LABEL_30:
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(a2 - 1);
        v8 = a1[1];
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *v11;
  v15 = *v10;
  if (*v11 >= *v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = v11[1];
    v17 = v10[1];
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = v11[1];
    v17 = v10[1];
  }
  *v11 = v15;
  v11[1] = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = (char *)a1 + v19;
    v21 = *(unint64_t *)((char *)a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(unint64_t *)((char *)a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = (unint64_t *)((char *)a1 + v19 + 32);
LABEL_20:
        *v18 = v14;
        v18[1] = v16;
        if (++v13 == 8)
          return v11 + 2 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 2;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *((_QWORD *)v20 + 3);
    }
    v10 -= 2;
    *((_QWORD *)v20 + 4) = v21;
    *(unint64_t *)((char *)a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 >= *a3)
  {
    if (v10 < v9)
      return result;
    v12 = a4[1];
    v11 = a3[1];
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = a3[1];
    v12 = a4[1];
  }
  *a3 = v9;
  a3[1] = v12;
  *a4 = v10;
  a4[1] = v11;
  v13 = *a3;
  v14 = *a2;
  if (*a3 >= *a2)
  {
    if (v14 < v13)
      return result;
    v16 = a3[1];
    v15 = a2[1];
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = a2[1];
    v16 = a3[1];
  }
  *a2 = v13;
  a2[1] = v16;
  *a3 = v14;
  a3[1] = v15;
  v17 = *a2;
  v18 = *a1;
  if (*a2 < *a1)
  {
    v19 = a1[1];
    v20 = a2[1];
LABEL_15:
    *a1 = v17;
    a1[1] = v20;
    *a2 = v18;
    a2[1] = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = a2[1];
    v19 = a1[1];
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 >= *a4)
  {
    if (v12 < v11)
      return result;
    v14 = a5[1];
    v13 = a4[1];
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = a4[1];
    v14 = a5[1];
  }
  *a4 = v11;
  a4[1] = v14;
  *a5 = v12;
  a5[1] = v13;
  v15 = *a4;
  v16 = *a3;
  if (*a4 >= *a3)
  {
    if (v16 < v15)
      return result;
    v18 = a4[1];
    v17 = a3[1];
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = a3[1];
    v18 = a4[1];
  }
  *a3 = v15;
  a3[1] = v18;
  *a4 = v16;
  a4[1] = v17;
  v19 = *a3;
  v20 = *a2;
  if (*a3 >= *a2)
  {
    if (v20 < v19)
      return result;
    v22 = a3[1];
    v21 = a2[1];
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = a2[1];
    v22 = a3[1];
  }
  *a2 = v19;
  a2[1] = v22;
  *a3 = v20;
  a3[1] = v21;
  v23 = *a2;
  v24 = *a1;
  if (*a2 < *a1)
  {
    v25 = a1[1];
    v26 = a2[1];
LABEL_9:
    *a1 = v23;
    a1[1] = v26;
    *a2 = v24;
    a2[1] = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = a2[1];
    v25 = a1[1];
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 >= *a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = v14[1];
          v18 = a1[1];
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = v14[1];
          v18 = a1[1];
        }
        *v14 = v16;
        v14[1] = v18;
        *a1 = v15;
        a1[1] = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>((uint64_t)a1, a4, v9, a1);
LABEL_12:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v19 = (unint64_t)v8 >> 4;
      v20 = a2 - 2;
      do
      {
        v22 = *a1;
        v21 = a1[1];
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *v23 = v22;
          v23[1] = v21;
        }
        else
        {
          v24 = v20[1];
          *v23 = *v20;
          v23[1] = v24;
          *v20 = v22;
          v20[1] = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>((uint64_t)a1, (uint64_t)(v23 + 2), a4, ((char *)(v23 + 2) - (char *)a1) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v14 = v8[1];
          v13 = a4[1];
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
          v14 = v8[1];
        }
        *a4 = v11;
        a4[1] = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = (unint64_t *)(result + 16 * v7);
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(_QWORD *)(result + 16 * v7 + 8) < v15[3])
              {
                v15 += 2;
                v7 = v17;
              }
            }
            v19 = *v15;
            if (*v15 < v12)
              break;
            v20 = v15[1];
            if (v12 >= v19 && v20 < v13)
              break;
            *v8 = v19;
            v8[1] = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *v15 = v12;
        v15[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    v11 = result[1];
    *v6 = *result;
    v6[1] = v11;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<MIL::Builder::OperationBuilder *,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_QWORD *)(result + 16 * v5 + 8);
      v9 = *(_QWORD *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
      v10 = v6[1];
    }
    *(_QWORD *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (unint64_t *)(result + 16 * v5);
        v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_QWORD *)(result + 16 * v5 + 8);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = v11[1];
        }
        *v6 = v13;
        v6[1] = v14;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *v11 = v8;
    v11[1] = v9;
  }
  return result;
}

void MIL::Transform::`anonymous namespace'::TopoSortViaDepthFirstSearch::Push(MIL::Transform::_anonymous_namespace_::TopoSortViaDepthFirstSearch *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  std::logic_error *exception;
  char *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 10);
  v3 = a2 - *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 11) - v2 <= v3)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  if (*(_BYTE *)(v2 + v3))
  {
    if (*(_BYTE *)(v2 + v3) == 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Program's data dependency graph has a cycle");
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  else
  {
    *(_BYTE *)(v2 + v3) = 1;
    v7 = (char *)this + 120;
    v8 = *((_QWORD *)this + 15);
    v9 = (char *)*((_QWORD *)this + 14);
    if ((unint64_t)v9 >= v8)
    {
      v11 = (char *)*((_QWORD *)this + 13);
      v12 = (v9 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)v11;
      v14 = (uint64_t)(v8 - (_QWORD)v11) >> 2;
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      if (v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v7, v15);
        v11 = (char *)*((_QWORD *)this + 13);
        v9 = (char *)*((_QWORD *)this + 14);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *(_QWORD *)v17 = a2;
      v10 = v17 + 8;
      while (v9 != v11)
      {
        v19 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v19;
        v17 -= 8;
      }
      *((_QWORD *)this + 13) = v17;
      *((_QWORD *)this + 14) = v10;
      *((_QWORD *)this + 15) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_QWORD *)v9 = a2;
      v10 = v9 + 8;
    }
    *((_QWORD *)this + 14) = v10;
  }
}

void sub_1E06A155C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper::~MatchAndReplaceHelper(MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void **v26;

  v2 = (void *)*((_QWORD *)this + 91);
  if (v2)
  {
    *((_QWORD *)this + 92) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 88);
  if (v3)
  {
    *((_QWORD *)this + 89) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 85);
  if (v4)
  {
    *((_QWORD *)this + 86) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 82);
  if (v5)
  {
    *((_QWORD *)this + 83) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 78);
  if (v6)
  {
    *((_QWORD *)this + 79) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 75);
  if (v7)
  {
    *((_QWORD *)this + 76) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 69);
  if (v8)
  {
    *((_QWORD *)this + 70) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 66);
  if (v9)
    operator delete(v9);
  v10 = (void *)*((_QWORD *)this + 62);
  if (v10)
  {
    *((_QWORD *)this + 63) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 59);
  if (v11)
  {
    *((_QWORD *)this + 60) = v11;
    operator delete(v11);
  }
  v26 = (void **)((char *)this + 448);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v26);
  v12 = (void *)*((_QWORD *)this + 53);
  if (v12)
  {
    *((_QWORD *)this + 54) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 50);
  if (v13)
  {
    *((_QWORD *)this + 51) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 47);
  if (v14)
    operator delete(v14);
  v15 = (void *)*((_QWORD *)this + 43);
  if (v15)
  {
    *((_QWORD *)this + 44) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 40);
  if (v16)
  {
    *((_QWORD *)this + 41) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 37);
  if (v17)
    operator delete(v17);
  v18 = (void *)*((_QWORD *)this + 33);
  if (v18)
  {
    *((_QWORD *)this + 34) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 30);
  if (v19)
  {
    *((_QWORD *)this + 31) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 27);
  if (v20)
  {
    *((_QWORD *)this + 28) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 24);
  if (v21)
  {
    *((_QWORD *)this + 25) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 21);
  if (v22)
  {
    *((_QWORD *)this + 22) = v22;
    operator delete(v22);
  }
  MIL::Matching::Match::~Match((MIL::Transform::ProgramTransformer::ProgramTransformerImpl::MatchAndReplaceHelper *)((char *)this + 160));
  v23 = (void *)*((_QWORD *)this + 16);
  if (v23)
  {
    *((_QWORD *)this + 17) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 13);
  if (v24)
  {
    *((_QWORD *)this + 14) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 10);
  if (v25)
  {
    *((_QWORD *)this + 11) = v25;
    operator delete(v25);
  }
  v26 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v26);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(uint64_t a1, std::string::size_type *a2, _OWORD *a3, uint64_t *a4, _OWORD *a5)
{
  _QWORD *v10;
  std::logic_error *exception;
  uint64_t v12;
  uint64_t v13;
  size_t NumOperations;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  size_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  MIL::Builder::OperationBuilder *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  MIL::Builder::BlockBuilder::BlockBuilderImpl ***v27;
  MIL::Builder::BlockBuilder::BlockBuilderImpl ***v28;
  MIL::Builder::BlockBuilder::BlockBuilderImpl **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 *i;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  MIL::Builder::Variable::VariableImpl ***v42;
  unsigned __int8 *Name;
  unint64_t *v44;
  unint64_t v45;
  unint64_t j;
  unint64_t *v47;
  unint64_t v48;
  BOOL v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t *v68;
  std::logic_error *v70;
  std::runtime_error *v71;
  size_t v72;
  __int128 v73;
  MIL::Builder::BlockBuilder *v74;
  std::__shared_weak_count *v75;
  std::string v76;
  __int128 v77;
  __int128 v78;
  int v79;
  void *__p;
  char *v81;
  char *v82;
  std::vector<std::string> v83;
  MIL::Builder::BlockBuilder *v84;
  std::__shared_weak_count *v85;
  _QWORD *v86[3];
  _OWORD *v87[5];
  _BYTE v88[32];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  std::string *v93;

  v10 = a3 + 1;
  while (1)
  {
    v10 = (_QWORD *)*v10;
    if (!v10)
      break;
    if (!MIL::Builder::BlockBuilder::TryGetVariable(*a2, (uint64_t)(v10 + 2)))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::logic_error::logic_error(exception, (const std::string *)v88);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  v12 = *a4;
  v13 = a4[1];
  while (v12 != v13)
  {
    if (!MIL::Builder::BlockBuilder::TryGetVariable(*a2, v12))
    {
      v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::logic_error::logic_error(v70, (const std::string *)v88);
      v70->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v70, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v12 += 24;
  }
  NumOperations = MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a2);
  v90 = 0u;
  v91 = 0u;
  v92 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>((uint64_t)&v90, NumOperations);
  v72 = NumOperations;
  if (NumOperations)
  {
    v15 = 0;
    do
    {
      MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*a2, v15, v88);
      v87[0] = v88;
      *((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder>&&>,std::tuple<>>((uint64_t)&v90, v88, (uint64_t)&std::piecewise_construct, v87)+ 32) = 0;
      v16 = *(std::__shared_weak_count **)&v88[8];
      if (*(_QWORD *)&v88[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&v88[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      ++v15;
    }
    while (v15 != v72);
  }
  v89 = 0u;
  memset(v88, 0, sizeof(v88));
  v87[0] = a2;
  v87[1] = a3;
  v87[2] = &v90;
  v87[3] = v88;
  v87[4] = a5;
  v20 = (unsigned __int8 *)*a4;
  v19 = (unsigned __int8 *)a4[1];
  v21 = v72;
  if ((unsigned __int8 *)*a4 != v19)
  {
    do
    {
      MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(std::shared_ptr<MIL::Builder::BlockBuilder> const&,std::unordered_set<std::string> const&,std::vector<std::string> const&,std::unordered_set<std::string>&)::{lambda(std::string const&)#1}::operator()((uint64_t)v87, v20);
      v20 += 24;
    }
    while (v20 != v19);
    while (*((_QWORD *)&v89 + 1))
    {
      v22 = *(_QWORD *)(*(_QWORD *)&v88[8] + (((unint64_t)v89 >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * v89;
      v24 = *(MIL::Builder::OperationBuilder **)v22;
      v23 = *(std::__shared_weak_count **)(v22 + 8);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
      }
      MIL::Builder::OperationBuilder::GetBlocks(v24, (uint64_t)v86);
      v28 = (MIL::Builder::BlockBuilder::BlockBuilderImpl ***)v86[0];
      v27 = (MIL::Builder::BlockBuilder::BlockBuilderImpl ***)v86[1];
      while (v28 != v27)
      {
        v29 = *v28;
        v30 = (std::__shared_weak_count *)v28[1];
        v84 = (MIL::Builder::BlockBuilder *)*v28;
        v85 = v30;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        MIL::Builder::BlockBuilder::GetInputNames(v29, &v83);
        std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&__p, (unsigned __int8 *)v83.__begin_, (unsigned __int8 *)v83.__end_);
        v77 = 0u;
        v78 = 0u;
        v79 = 1065353216;
        v74 = v84;
        v75 = v85;
        if (v85)
        {
          v33 = (unint64_t *)&v85->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetBlockOutsAndWriteEffectOpIns(&v74, &v76);
        MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(a1, &v84, &__p, &v76, &v77);
        v93 = &v76;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        v35 = v75;
        if (v75)
        {
          v36 = (unint64_t *)&v75->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        for (i = (unsigned __int8 *)v78; i; i = *(unsigned __int8 **)i)
          MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(std::shared_ptr<MIL::Builder::BlockBuilder> const&,std::unordered_set<std::string> const&,std::vector<std::string> const&,std::unordered_set<std::string>&)::{lambda(std::string const&)#1}::operator()((uint64_t)v87, i + 16);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v77);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
        __p = &v83;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v39 = v85;
        if (v85)
        {
          v40 = (unint64_t *)&v85->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v28 += 2;
      }
      __p = v86;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v24, (uint64_t)&__p);
      v42 = (MIL::Builder::Variable::VariableImpl ***)v82;
      v21 = v72;
      if (v82)
      {
        do
        {
          Name = (unsigned __int8 *)MIL::Builder::Variable::TryGetName(v42[2]);
          if (Name)
            MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(std::shared_ptr<MIL::Builder::BlockBuilder> const&,std::unordered_set<std::string> const&,std::vector<std::string> const&,std::unordered_set<std::string>&)::{lambda(std::string const&)#1}::operator()((uint64_t)v87, Name);
          v42 = (MIL::Builder::Variable::VariableImpl ***)*v42;
        }
        while (v42);
      }
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&__p);
      std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::pop_front((int64x2_t *)v88);
      if (v23)
      {
        v44 = (unint64_t *)&v23->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  __p = 0;
  v81 = 0;
  v82 = 0;
  if (v21)
  {
    for (j = 0; j != v21; ++j)
    {
      MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*a2, j, &v77);
      v86[0] = &v77;
      if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)&v90, &v77, (uint64_t)&std::piecewise_construct, v86)+ 32))
      {
        v73 = v77;
        if (*((_QWORD *)&v77 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        v49 = MIL::Transform::HasWriteEffectAndNoOutputs((MIL::Builder::OperationBuilder **)&v73);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
        if (*((_QWORD *)&v73 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v21 = v72;
        if (!v49)
        {
          v53 = v81;
          if (v81 >= v82)
          {
            v55 = (char *)__p;
            v56 = (v81 - (_BYTE *)__p) >> 3;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v58 = v82 - (_BYTE *)__p;
            if ((v82 - (_BYTE *)__p) >> 2 > v57)
              v57 = v58 >> 2;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v82, v59);
              v55 = (char *)__p;
              v53 = v81;
            }
            else
            {
              v60 = 0;
            }
            v61 = (unint64_t *)&v60[8 * v56];
            *v61 = j;
            v54 = (char *)(v61 + 1);
            while (v53 != v55)
            {
              v62 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *--v61 = v62;
            }
            __p = v61;
            v81 = v54;
            v82 = &v60[8 * v59];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_QWORD *)v81 = j;
            v54 = v53 + 8;
          }
          v81 = v54;
        }
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    v66 = (char *)__p;
  }
  else
  {
    v66 = 0;
  }
  v67 = (v81 - v66) >> 3;
  if (*((_QWORD *)&v91 + 1) && v67 == *((_QWORD *)&v91 + 1))
  {
    v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "produced an empty program!");
    __cxa_throw(v71, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v81 == v66)
    v68 = 0;
  else
    v68 = (unint64_t *)v66;
  MIL::Builder::BlockBuilder::RemoveOperations(*a2, v68, v67, 1);
  if (__p)
  {
    v81 = (char *)__p;
    operator delete(__p);
  }
  std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100](v88);
  return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v90);
}

void sub_1E06A1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (__p)
    operator delete(__p);
  std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100]((_QWORD *)(v33 - 192));
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v33 - 144);
  _Unwind_Resume(a1);
}

unint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetBlockOutsAndWriteEffectOpIns@<X0>(MIL::Builder::BlockBuilder **a1@<X1>, std::string *a2@<X8>)
{
  unint64_t i;
  unint64_t result;
  unint64_t *v6;
  unint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t **j;
  __int128 *Name;
  void *Type;
  std::string::size_type size;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[16];
  uint64_t **v22;
  __int128 v23;
  __int128 v24;

  MIL::Builder::BlockBuilder::GetOutputNames(*a1, a2);
  for (i = 0; ; ++i)
  {
    result = MIL::Builder::BlockBuilder::GetNumOperations(*a1);
    if (i >= result)
      break;
    MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*a1, i, &v24);
    v23 = v24;
    if (*((_QWORD *)&v24 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = MIL::Transform::HasWriteEffectAndNoOutputs((MIL::Builder::OperationBuilder **)&v23);
    v9 = v8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      goto LABEL_10;
    v11 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v9)
        goto LABEL_20;
    }
    else
    {
LABEL_10:
      if (!v8)
        goto LABEL_20;
    }
    MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v24, (uint64_t)v21);
    for (j = v22; j; j = (uint64_t **)*j)
    {
      Name = (__int128 *)MIL::Builder::Variable::TryGetName((MIL::Builder::Variable::VariableImpl **)j[2]);
      if (Name)
      {
        Type = (void *)MIL::Builder::Variable::TryGetType((MIL::Builder::Variable::VariableImpl **)j[2]);
        if (!MIL::IRValueType::TryCastAsStateType(Type))
        {
          size = a2->__r_.__value_.__l.__size_;
          if (size >= a2->__r_.__value_.__r.__words[2])
          {
            v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, Name);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, Name);
            v17 = size + 24;
          }
          a2->__r_.__value_.__l.__size_ = v17;
        }
      }
    }
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v21);
LABEL_20:
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return result;
}

void sub_1E06A2170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::RemoveRedundantOps(std::shared_ptr<MIL::Builder::BlockBuilder> const&,std::unordered_set<std::string> const&,std::vector<std::string> const&,std::unordered_set<std::string>&)::{lambda(std::string const&)#1}::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 *v10;

  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*(_QWORD **)(a1 + 8), a2))
  {
    MIL::Builder::BlockBuilder::TryGetOperation(**(_QWORD **)a1, a2, &v9);
    if ((_QWORD)v9)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v10 = &v9;
      if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(v4, &v9, (uint64_t)&std::piecewise_construct, (_QWORD **)&v10)+ 32))
      {
        v5 = *(_QWORD *)(a1 + 16);
        v10 = &v9;
        *((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(v5, &v9, (uint64_t)&std::piecewise_construct, (_QWORD **)&v10)+ 32) = 1;
        std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::push_back(*(_QWORD **)(a1 + 24), &v9);
      }
    }
    else
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(_QWORD *)(a1 + 32), a2, (uint64_t)a2);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1E06A22CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::pop_front(int64x2_t *a1)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[2].i64[0]);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1E0B08B80);
  return std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder>&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  *((_OWORD *)v16 + 1) = **a4;
  *v17 = 0;
  v17[1] = 0;
  *((_BYTE *)v16 + 32) = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v13 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_1E06A25B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1E06A2938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_BYTE *)v16 + 32) = 0;
  v31 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10)
          v28 %= v10;
      }
      else
      {
        v28 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  v13 = (_QWORD *)v30[0];
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return v13;
}

void sub_1E06A2C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1E06A2E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetInputsAndOutputs(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, std::string *a5@<X8>)
{
  MIL::Builder::FunctionBuilder *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v15;
  unsigned __int8 *v16;
  unint64_t i;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t j;
  uint64_t OutputName;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  unint64_t v37;
  std::string *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::string *v48;
  const std::string *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v57[2];
  char *v58;
  std::vector<std::string>::size_type __sz;
  std::string *v60;
  std::string *v61;
  unint64_t v62;
  std::vector<std::string> v63;
  _OWORD v64[2];
  std::string v65;
  _QWORD v66[4];
  int v67;
  _BYTE v68[32];
  int v69;
  uint64_t v70;
  uint64_t v71;
  MIL::Builder::BlockBuilder *v72;
  std::__shared_weak_count *v73;
  MIL::Builder::FunctionBuilder *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  int v80;
  __int128 *v81;
  __int128 *v82[3];

  MIL::Builder::ProgramBuilder::GetFunction(a1[4], a2, &v74);
  v8 = v74;
  v9 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(v74);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v8, v9, &v72);
  MIL::Builder::BlockBuilder::GetOperations(v72, (uint64_t)&v70);
  memset(v68, 0, sizeof(v68));
  v69 = 1065353216;
  memset(v66, 0, sizeof(v66));
  v67 = 1065353216;
  v10 = v70;
  if (v71 != v70)
  {
    v11 = 0;
    do
    {
      v12 = *(_OWORD *)(v10 + 16 * v11);
      v64[0] = v12;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v12;
      MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetAllConsumedVariableNames((MIL::Transform::ProgramTransformer::ProgramTransformerImpl *)a1, (unsigned __int8 **)v12, (uint64_t)&v78);
      v16 = (unsigned __int8 *)v79;
      if ((_QWORD)v79)
      {
        do
        {
          *(_QWORD *)&v76 = v16 + 16;
          *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v68, v16 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v76)+ 5) = v11;
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
        v15 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)&v64[0];
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v78);
      for (i = 0; i < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v15); ++i)
      {
        *(_QWORD *)&v78 = MIL::Builder::OperationBuilder::GetOutputName(v15, i);
        *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v66, (unsigned __int8 *)v78, (uint64_t)&std::piecewise_construct, (__int128 **)&v78)+ 5) = v11;
      }
      if (*((_QWORD *)&v64[0] + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v64[0] + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v64[0] + 1) + 16))(*((_QWORD *)&v64[0] + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64[0] + 1));
        }
      }
      ++v11;
      v10 = v70;
    }
    while (v11 < (v71 - v70) >> 4);
  }
  MIL::Builder::BlockBuilder::GetOutputNames(v72, &v65);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v64, (unsigned __int8 *)v65.__r_.__value_.__l.__data_, (unsigned __int8 *)v65.__r_.__value_.__l.__size_);
  memset(&v63, 0, sizeof(v63));
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v58 = 0;
  __sz = 0;
  *(_QWORD *)v57 = &v58;
  if (a3 < a4)
  {
    v20 = a3;
    do
    {
      v21 = *(_OWORD *)(v70 + 16 * v20);
      v76 = v21;
      if (*((_QWORD *)&v21 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v21;
      MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetAllConsumedVariableNames((MIL::Transform::ProgramTransformer::ProgramTransformerImpl *)a1, (unsigned __int8 **)v21, (uint64_t)&v78);
      v25 = (unsigned __int8 *)v79;
      if ((_QWORD)v79)
      {
        do
        {
          v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v66, v25 + 16);
          if (!v26 || *((_QWORD *)v26 + 5) < a3)
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v57, (const void **)v25 + 2, (uint64_t)(v25 + 16));
          v25 = *(unsigned __int8 **)v25;
        }
        while (v25);
        v24 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v76;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v78);
      for (j = 0; j < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v24); ++j)
      {
        OutputName = MIL::Builder::OperationBuilder::GetOutputName(v24, j);
        *(_QWORD *)&v78 = OutputName;
        if (*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v68, (unsigned __int8 *)OutputName, (uint64_t)&std::piecewise_construct, (__int128 **)&v78)+ 5) >= a4|| std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v64, (unsigned __int8 *)OutputName))
        {
          v29 = v61;
          if ((unint64_t)v61 >= v62)
          {
            v31 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, (__int128 *)OutputName);
          }
          else
          {
            if (*(char *)(OutputName + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
            }
            else
            {
              v30 = *(_OWORD *)OutputName;
              v61->__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
              *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
            }
            v31 = v29 + 1;
          }
          v61 = v31;
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      ++v20;
    }
    while (v20 != a4);
  }
  v78 = 0u;
  v79 = 0u;
  v80 = 1065353216;
  v35 = v65.__r_.__value_.__r.__words[0];
  if (v65.__r_.__value_.__l.__size_ != v65.__r_.__value_.__r.__words[0])
  {
    v36 = 0;
    v37 = 0;
    do
    {
      v82[0] = (__int128 *)(v35 + v36);
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v78, (unsigned __int8 *)(v35 + v36), (uint64_t)&std::piecewise_construct, v82)+ 5) = v37++;
      v35 = v65.__r_.__value_.__r.__words[0];
      v36 += 24;
    }
    while (v37 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v65.__r_.__value_.__l.__size_ - v65.__r_.__value_.__r.__words[0]) >> 3));
  }
  v76 = 0uLL;
  v77 = 0;
  v39 = (__int128 *)v60;
  v38 = v61;
  if (v60 == v61)
  {
    v43 = 0;
    v44 = 0;
  }
  else
  {
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v78, (unsigned __int8 *)v39))
      {
        v40 = (__int128 *)*((_QWORD *)&v76 + 1);
        if (*((_QWORD *)&v76 + 1) >= v77)
        {
          v42 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v76, v39);
        }
        else
        {
          if (*((char *)v39 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v76 + 1), *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
          }
          else
          {
            v41 = *v39;
            *(_QWORD *)(*((_QWORD *)&v76 + 1) + 16) = *((_QWORD *)v39 + 2);
            *v40 = v41;
          }
          v42 = (uint64_t)v40 + 24;
        }
        *((_QWORD *)&v76 + 1) = v42;
      }
      v39 = (__int128 *)((char *)v39 + 24);
    }
    while (v39 != (__int128 *)v38);
    v44 = *((_QWORD *)&v76 + 1);
    v43 = v76;
  }
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v43) >> 3);
  if (v45 >= 2)
  {
    v81 = &v78;
    v46 = 126 - 2 * __clz(v45);
    v47 = v44 == v43 ? 0 : v46;
    v48 = v60;
    if (v60 != v61)
    {
      v49 = (const std::string *)v76;
      do
      {
        if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v78, (unsigned __int8 *)v48))
        {
          std::string::operator=(v48, v49++);
        }
        ++v48;
      }
      while (v48 != v61);
    }
  }
  v82[0] = &v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v78);
  std::vector<std::string>::resize(&v63, __sz);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>((int)&v78, *(_QWORD **)v57, &v58, v63.__begin_);
  std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(a5, (__int128 **)&v63, (__int128 **)&v60);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v57, v58);
  *(_QWORD *)&v78 = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  *(_QWORD *)&v78 = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v64);
  *(_QWORD *)&v78 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v66);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v68);
  *(_QWORD *)&v78 = &v70;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  v50 = v73;
  if (v73)
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v75;
  if (v75)
  {
    v54 = (unint64_t *)&v75->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_1E06A344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  *(_QWORD *)(v38 - 104) = v38 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 104));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v38 - 160);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a10, a11);
  *(_QWORD *)(v38 - 192) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 192));
  *(_QWORD *)(v38 - 192) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 192));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a19);
  a19 = (void **)&a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a33);
  a33 = (void **)&a38;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a33);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v38 - 224);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v38 - 208);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::string>,std::vector<std::string>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetAllConsumedVariableNames(MIL::Transform::ProgramTransformer::ProgramTransformerImpl *this@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  const void **i;
  uint64_t NumArguments;
  uint64_t v8;
  MIL::Builder::Variable::VariableImpl **ArgumentForParameter;
  unsigned __int8 *Name;
  uint64_t *BlocksRef;
  uint64_t v12;
  std::__shared_weak_count *v13;
  MIL::Builder::BlockBuilder::BlockBuilderImpl **v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 *j;
  std::string::size_type size;
  void **v19;
  void **v20;
  std::__shared_weak_count *v21;
  MIL::Builder::OperationBuilder::OperationBuilderImpl **v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t k;
  unsigned __int8 *OutputName;
  unsigned __int8 *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 *m;
  std::string::size_type v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::string v35;
  void **v36[3];
  __int128 v37;
  __int128 v38;
  int v39;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  MIL::Builder::OperationBuilder::GetParameterNames(a2, (uint64_t)&v37);
  for (i = (const void **)v38; i; i = (const void **)*i)
  {
    NumArguments = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)a2, i + 2);
    if (NumArguments)
    {
      v8 = 0;
      do
      {
        ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)a2, (uint64_t)(i + 2), v8);
        Name = (unsigned __int8 *)MIL::Builder::Variable::TryGetName(ArgumentForParameter);
        if (Name)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, Name, (uint64_t)Name);
        ++v8;
      }
      while (NumArguments != v8);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v37);
  BlocksRef = (uint64_t *)MIL::Builder::OperationBuilder::GetBlocksRef((MIL::Builder::OperationBuilder *)a2);
  v12 = *BlocksRef;
  v34 = BlocksRef[1];
  if (*BlocksRef != v34)
  {
    do
    {
      v14 = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ***)v12;
      v13 = *(std::__shared_weak_count **)(v12 + 8);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v37 = 0u;
      v38 = 0u;
      v39 = 1065353216;
      MIL::Builder::BlockBuilder::GetInputNames(v14, (std::vector<std::string> *)&v35);
      size = v35.__r_.__value_.__l.__size_;
      for (j = (unsigned __int8 *)v35.__r_.__value_.__r.__words[0]; j != (unsigned __int8 *)size; j += 24)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v37, j, (uint64_t)j);
      v36[0] = (void **)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
      MIL::Builder::BlockBuilder::GetOperations((MIL::Builder::BlockBuilder *)v14, (uint64_t)v36);
      v20 = v36[0];
      v19 = v36[1];
      while (v20 != v19)
      {
        v22 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)*v20;
        v21 = (std::__shared_weak_count *)v20[1];
        if (v21)
        {
          v23 = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        for (k = 0; k < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v22); ++k)
        {
          OutputName = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(v22, k);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v37, OutputName, (uint64_t)OutputName);
        }
        MIL::Transform::ProgramTransformer::ProgramTransformerImpl::GetAllConsumedVariableNames((uint64_t *)&v35, this, (const MIL::Builder::OperationBuilder *)v22);
        v27 = (unsigned __int8 *)v35.__r_.__value_.__r.__words[2];
        if (v35.__r_.__value_.__r.__words[2])
        {
          do
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v37, v27 + 16))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v27 + 16, (uint64_t)(v27 + 16));
            v27 = *(unsigned __int8 **)v27;
          }
          while (v27);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v35);
        if (v21)
        {
          v28 = (unint64_t *)&v21->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v20 += 2;
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      MIL::Builder::BlockBuilder::GetOutputNames((MIL::Builder::BlockBuilder *)v14, &v35);
      v31 = v35.__r_.__value_.__l.__size_;
      for (m = (unsigned __int8 *)v35.__r_.__value_.__r.__words[0]; m != (unsigned __int8 *)v31; m += 24)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v37, m))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, m, (uint64_t)m);
      }
      v36[0] = (void **)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v37);
      if (v13)
      {
        v32 = (unint64_t *)&v13->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v12 += 16;
    }
    while (v12 != v34);
  }
}

void sub_1E06A38C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1E06A3CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E06A3D68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*,false>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  BOOL v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned __int8 *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  __int128 v95;
  int64_t v96;
  void *v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  __int128 v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  unsigned __int8 *v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  int v162;
  uint64_t v163;
  __int128 v164;
  unint64_t v165;
  int64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  int64_t v170;
  char v171;
  __int128 *v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v7 = a1;
  v169 = (unsigned __int8 *)(a2 - 24);
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v73 = *a3;
        *(_QWORD *)&v175 = a2 - 24;
        v74 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v73, v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
        v75 = *a3;
        *(_QWORD *)&v175 = a1;
        if (v74 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v75, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
        {
          v76 = *(_OWORD *)a1;
          v176 = *(_QWORD *)(a1 + 16);
          v175 = v76;
          v77 = *(_OWORD *)v169;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)a1 = v77;
          v78 = v175;
          *(_QWORD *)(a2 - 8) = v176;
          *(_OWORD *)v169 = v78;
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v8 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v79 = (unsigned __int8 *)(a1 + 24);
              if (a1 + 24 != a2)
              {
                v80 = 0;
                v81 = (unsigned __int8 *)a1;
                do
                {
                  v82 = v79;
                  v83 = *a3;
                  *(_QWORD *)&v175 = v79;
                  v84 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v83, v79, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                  v85 = *a3;
                  *(_QWORD *)&v175 = v81;
                  if (v84 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v85, v81, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
                  {
                    v86 = *(_OWORD *)v82;
                    v176 = *((_QWORD *)v82 + 2);
                    v175 = v86;
                    *((_QWORD *)v82 + 1) = 0;
                    *((_QWORD *)v82 + 2) = 0;
                    *(_QWORD *)v82 = 0;
                    v87 = v80;
                    do
                    {
                      v88 = a1 + v87;
                      v89 = (void **)(a1 + v87 + 24);
                      if (*(char *)(a1 + v87 + 47) < 0)
                        operator delete(*v89);
                      *(_OWORD *)v89 = *(_OWORD *)v88;
                      *(_QWORD *)(a1 + v87 + 40) = *(_QWORD *)(v88 + 16);
                      *(_BYTE *)(v88 + 23) = 0;
                      *(_BYTE *)v88 = 0;
                      if (!v87)
                      {
                        v94 = a1;
                        goto LABEL_77;
                      }
                      v90 = *a3;
                      *(_QWORD *)&v177 = &v175;
                      v91 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (unsigned __int8 *)&v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)+ 5);
                      v92 = *a3;
                      *(_QWORD *)&v177 = a1 + v87 - 24;
                      v87 -= 24;
                    }
                    while (v91 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v92, (unsigned __int8 *)v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)+ 5));
                    v93 = *(char *)(a1 + v87 + 47);
                    v94 = a1 + v87 + 24;
                    if (v93 < 0)
                      operator delete(*(void **)v94);
LABEL_77:
                    v95 = v175;
                    *(_QWORD *)(v94 + 16) = v176;
                    *(_OWORD *)v94 = v95;
                  }
                  v79 = v82 + 24;
                  v80 += 24;
                  v81 = v82;
                }
                while (v82 + 24 != (unsigned __int8 *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v149 = (unsigned __int8 *)(a1 + 24);
            if (a1 + 24 != a2)
            {
              v150 = a1 - 24;
              do
              {
                v151 = v149;
                v152 = *a3;
                *(_QWORD *)&v175 = v149;
                v153 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v152, v149, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                v154 = *a3;
                *(_QWORD *)&v175 = a1;
                if (v153 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v154, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
                {
                  v155 = *(_OWORD *)v151;
                  v176 = *((_QWORD *)v151 + 2);
                  v175 = v155;
                  *((_QWORD *)v151 + 1) = 0;
                  *((_QWORD *)v151 + 2) = 0;
                  *(_QWORD *)v151 = 0;
                  v156 = v150;
                  do
                  {
                    v157 = (void **)(v156 + 48);
                    if (*(char *)(v156 + 71) < 0)
                      operator delete(*v157);
                    *(_OWORD *)v157 = *(_OWORD *)(v156 + 24);
                    *(_QWORD *)(v156 + 64) = *(_QWORD *)(v156 + 40);
                    *(_BYTE *)(v156 + 47) = 0;
                    *(_BYTE *)(v156 + 24) = 0;
                    v158 = *a3;
                    *(_QWORD *)&v177 = &v175;
                    v159 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v158, (unsigned __int8 *)&v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v177)+ 5);
                    v160 = *a3;
                    *(_QWORD *)&v177 = v156;
                    v161 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v160, (unsigned __int8 *)v156, (uint64_t)&std::piecewise_construct, (__int128 **)&v177);
                    v156 -= 24;
                  }
                  while (v159 < *((_QWORD *)v161 + 5));
                  v162 = *(char *)(v156 + 71);
                  v163 = v156 + 48;
                  if (v162 < 0)
                    operator delete(*(void **)v163);
                  v164 = v175;
                  *(_QWORD *)(v163 + 16) = v176;
                  *(_OWORD *)v163 = v164;
                }
                v149 = v151 + 24;
                v150 += 24;
                a1 = (uint64_t)v151;
              }
              while (v151 + 24 != (unsigned __int8 *)a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v96 = (v9 - 2) >> 1;
            v97 = &std::piecewise_construct;
            v170 = v96;
            do
            {
              v98 = v96;
              if (v170 >= v96)
              {
                v167 = v96;
                v99 = (2 * v96) | 1;
                v100 = a1 + 24 * v99;
                v101 = 2 * v96 + 2;
                if (v101 < (uint64_t)v9)
                {
                  v102 = *a3;
                  *(_QWORD *)&v175 = a1 + 24 * v99;
                  v103 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v102, (unsigned __int8 *)v175, (uint64_t)v97, (__int128 **)&v175)+ 5);
                  v104 = *a3;
                  *(_QWORD *)&v175 = v100 + 24;
                  if (v103 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, (unsigned __int8 *)(v100 + 24), (uint64_t)v97, (__int128 **)&v175)+ 5))
                  {
                    v100 += 24;
                    v99 = v101;
                  }
                }
                v105 = *a3;
                *(_QWORD *)&v175 = v100;
                v106 = a1 + 24 * v167;
                v107 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v105, (unsigned __int8 *)v100, (uint64_t)v97, (__int128 **)&v175)+ 5);
                v108 = *a3;
                *(_QWORD *)&v175 = v106;
                v109 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v108, (unsigned __int8 *)v106, (uint64_t)v97, (__int128 **)&v175);
                v98 = v167;
                if (v107 >= *((_QWORD *)v109 + 5))
                {
                  v110 = *(_OWORD *)v106;
                  v176 = *(_QWORD *)(v106 + 16);
                  v175 = v110;
                  *(_QWORD *)(v106 + 8) = 0;
                  *(_QWORD *)(v106 + 16) = 0;
                  *(_QWORD *)v106 = 0;
                  while (1)
                  {
                    v111 = v100;
                    if (*(char *)(v106 + 23) < 0)
                      operator delete(*(void **)v106);
                    v112 = *(_OWORD *)v100;
                    *(_QWORD *)(v106 + 16) = *(_QWORD *)(v100 + 16);
                    *(_OWORD *)v106 = v112;
                    *(_BYTE *)(v100 + 23) = 0;
                    *(_BYTE *)v100 = 0;
                    if (v170 < v99)
                      break;
                    v113 = (2 * v99) | 1;
                    v100 = a1 + 24 * v113;
                    v99 = 2 * v99 + 2;
                    if (v99 >= (uint64_t)v9)
                    {
                      v99 = v113;
                    }
                    else
                    {
                      v114 = *a3;
                      *(_QWORD *)&v177 = a1 + 24 * v113;
                      v115 = (uint64_t)v97;
                      v116 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, (unsigned __int8 *)v177, (uint64_t)v97, (__int128 **)&v177)+ 5);
                      v117 = *a3;
                      *(_QWORD *)&v177 = v100 + 24;
                      if (v116 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v117, (unsigned __int8 *)(v100 + 24), v115, (__int128 **)&v177)+ 5))v99 = v113;
                      else
                        v100 += 24;
                      v97 = (void *)v115;
                    }
                    v118 = *a3;
                    *(_QWORD *)&v177 = v100;
                    v119 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v118, (unsigned __int8 *)v100, (uint64_t)v97, (__int128 **)&v177)+ 5);
                    v120 = *a3;
                    *(_QWORD *)&v177 = &v175;
                    v106 = v111;
                    if (v119 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v120, (unsigned __int8 *)&v175, (uint64_t)v97, (__int128 **)&v177)+ 5))
                    {
                      if (*(char *)(v111 + 23) < 0)
                        operator delete(*(void **)v111);
                      break;
                    }
                  }
                  v121 = v175;
                  *(_QWORD *)(v111 + 16) = v176;
                  *(_OWORD *)v111 = v121;
                  v98 = v167;
                }
              }
              v96 = v98 - 1;
            }
            while (v98);
            v122 = v8 / 0x18uLL;
            do
            {
              v123 = 0;
              v124 = a1;
              v165 = a2;
              v168 = *(_QWORD *)a1;
              *(_QWORD *)&v177 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)((char *)&v177 + 7) = *(_QWORD *)(a1 + 15);
              v171 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              do
              {
                v125 = v124 + 24 * v123 + 24;
                v126 = 2 * v123;
                v123 = (2 * v123) | 1;
                v127 = v126 + 2;
                if (v126 + 2 < v122)
                {
                  v128 = *a3;
                  *(_QWORD *)&v175 = v125;
                  v129 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v128, (unsigned __int8 *)v125, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                  v130 = *a3;
                  *(_QWORD *)&v175 = v125 + 24;
                  if (v129 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v130, (unsigned __int8 *)(v125 + 24), (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
                  {
                    v125 += 24;
                    v123 = v127;
                  }
                }
                if (*(char *)(v124 + 23) < 0)
                  operator delete(*(void **)v124);
                v131 = *(_OWORD *)v125;
                *(_QWORD *)(v124 + 16) = *(_QWORD *)(v125 + 16);
                *(_OWORD *)v124 = v131;
                *(_BYTE *)(v125 + 23) = 0;
                *(_BYTE *)v125 = 0;
                v124 = v125;
              }
              while (v123 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
              a2 -= 24;
              if (v125 == v165 - 24)
              {
                *(_QWORD *)v125 = v168;
                v147 = *(_QWORD *)((char *)&v177 + 7);
                *(_QWORD *)(v125 + 8) = v177;
                *(_QWORD *)(v125 + 15) = v147;
                *(_BYTE *)(v125 + 23) = v171;
              }
              else
              {
                v132 = *(_OWORD *)(v165 - 24);
                *(_QWORD *)(v125 + 16) = *(_QWORD *)(v165 - 8);
                *(_OWORD *)v125 = v132;
                *(_QWORD *)(v165 - 24) = v168;
                v133 = v177;
                *(_QWORD *)(v165 - 9) = *(_QWORD *)((char *)&v177 + 7);
                *(_QWORD *)(v165 - 16) = v133;
                *(_BYTE *)(v165 - 1) = v171;
                v134 = v125 - a1 + 24;
                if (v134 >= 25)
                {
                  v135 = (v134 / 0x18uLL - 2) >> 1;
                  v136 = a1 + 24 * v135;
                  v137 = *a3;
                  *(_QWORD *)&v175 = v136;
                  v138 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, (unsigned __int8 *)v136, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                  v139 = *a3;
                  *(_QWORD *)&v175 = v125;
                  if (v138 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v139, (unsigned __int8 *)v125, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
                  {
                    v140 = *(_OWORD *)v125;
                    v176 = *(_QWORD *)(v125 + 16);
                    v175 = v140;
                    *(_QWORD *)(v125 + 8) = 0;
                    *(_QWORD *)(v125 + 16) = 0;
                    *(_QWORD *)v125 = 0;
                    while (1)
                    {
                      v141 = v136;
                      if (*(char *)(v125 + 23) < 0)
                        operator delete(*(void **)v125);
                      v142 = *(_OWORD *)v136;
                      *(_QWORD *)(v125 + 16) = *(_QWORD *)(v136 + 16);
                      *(_OWORD *)v125 = v142;
                      *(_BYTE *)(v136 + 23) = 0;
                      *(_BYTE *)v136 = 0;
                      if (!v135)
                        break;
                      v135 = (v135 - 1) >> 1;
                      v136 = a1 + 24 * v135;
                      v143 = *a3;
                      v174 = (__int128 *)v136;
                      v144 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, (unsigned __int8 *)v136, (uint64_t)&std::piecewise_construct, &v174)+ 5);
                      v145 = *a3;
                      v174 = &v175;
                      v125 = v141;
                      if (v144 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v145, (unsigned __int8 *)&v175, (uint64_t)&std::piecewise_construct, &v174)+ 5))
                      {
                        if (*(char *)(v141 + 23) < 0)
                          operator delete(*(void **)v141);
                        break;
                      }
                    }
                    v146 = v175;
                    *(_QWORD *)(v141 + 16) = v176;
                    *(_OWORD *)v141 = v146;
                  }
                }
              }
            }
            while (v122-- > 2);
          }
          return;
        }
        v10 = v9 >> 1;
        v11 = a1 + 24 * (v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          v7 = a1;
        }
        else
        {
          v7 = a1;
          v12 = *(_OWORD *)a1;
          v176 = *(_QWORD *)(a1 + 16);
          v175 = v12;
          v13 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = v13;
          v14 = v175;
          *(_QWORD *)(v11 + 16) = v176;
          *(_OWORD *)v11 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = *a3;
          *(_QWORD *)&v175 = v7 - 24;
          v16 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, (unsigned __int8 *)(v7 - 24), (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
          v17 = *a3;
          *(_QWORD *)&v175 = a1;
          v7 = a1;
          if (v16 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
          {
            v45 = *(_OWORD *)a1;
            v178 = *(_QWORD *)(a1 + 16);
            v177 = v45;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v46 = *a3;
            *(_QWORD *)&v175 = &v177;
            v47 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
            v48 = *a3;
            *(_QWORD *)&v175 = a2 - 24;
            if (v47 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, v169, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5))
            {
              v52 = a1 + 24;
              do
              {
                v7 = v52;
                if (v52 >= a2)
                  break;
                v53 = *a3;
                *(_QWORD *)&v175 = &v177;
                v54 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                v55 = *a3;
                *(_QWORD *)&v175 = v7;
                v56 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55, (unsigned __int8 *)v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v175);
                v52 = v7 + 24;
              }
              while (v54 >= *((_QWORD *)v56 + 5));
            }
            else
            {
              do
              {
                v49 = *a3;
                *(_QWORD *)&v175 = &v177;
                v7 += 24;
                v50 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                v51 = *a3;
                *(_QWORD *)&v175 = v7;
              }
              while (v50 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, (unsigned __int8 *)v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
            }
            v57 = a2;
            if (v7 < a2)
            {
              v57 = a2;
              do
              {
                v58 = *a3;
                *(_QWORD *)&v175 = &v177;
                v57 -= 24;
                v59 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                v60 = *a3;
                *(_QWORD *)&v175 = v57;
              }
              while (v59 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
            }
            while (v7 < v57)
            {
              v61 = *(_OWORD *)v7;
              v176 = *(_QWORD *)(v7 + 16);
              v175 = v61;
              v62 = *(_OWORD *)v57;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v57 + 16);
              *(_OWORD *)v7 = v62;
              v63 = v175;
              *(_QWORD *)(v57 + 16) = v176;
              *(_OWORD *)v57 = v63;
              do
              {
                v64 = *a3;
                *(_QWORD *)&v175 = &v177;
                v7 += 24;
                v65 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v64, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                v66 = *a3;
                *(_QWORD *)&v175 = v7;
              }
              while (v65 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v66, (unsigned __int8 *)v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
              do
              {
                v67 = *a3;
                *(_QWORD *)&v175 = &v177;
                v57 -= 24;
                v68 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
                v69 = *a3;
                *(_QWORD *)&v175 = v57;
              }
              while (v68 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, (unsigned __int8 *)v57, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
            }
            v70 = (__int128 *)(v7 - 24);
            if (v7 - 24 == a1)
            {
              if (*(char *)(v7 - 1) < 0)
                operator delete(*(void **)a1);
            }
            else
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v71 = *v70;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
              *(_OWORD *)a1 = v71;
              *(_BYTE *)(v7 - 1) = 0;
              *(_BYTE *)(v7 - 24) = 0;
            }
            a5 = 0;
            v72 = v177;
            *(_QWORD *)(v7 - 8) = v178;
            *v70 = v72;
            continue;
          }
        }
        v18 = 0;
        v19 = *(_OWORD *)v7;
        v178 = *(_QWORD *)(v7 + 16);
        v177 = v19;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 0;
        do
        {
          v20 = *a3;
          *(_QWORD *)&v175 = v7 + v18 + 24;
          v21 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)v175, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
          v22 = *a3;
          *(_QWORD *)&v175 = &v177;
          v18 += 24;
        }
        while (v21 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
        v23 = v7 + v18;
        v24 = (unsigned __int8 *)a2;
        if (v18 == 24)
        {
          v24 = (unsigned __int8 *)a2;
          do
          {
            if (v23 >= (unint64_t)v24)
              break;
            v24 -= 24;
            v28 = *a3;
            *(_QWORD *)&v175 = v24;
            v29 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
            v30 = *a3;
            *(_QWORD *)&v175 = &v177;
          }
          while (v29 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
        }
        else
        {
          do
          {
            v24 -= 24;
            v25 = *a3;
            *(_QWORD *)&v175 = v24;
            v26 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v24, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
            v27 = *a3;
            *(_QWORD *)&v175 = &v177;
          }
          while (v26 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
        }
        v7 = v23;
        if (v23 < (unint64_t)v24)
        {
          v31 = v24;
          do
          {
            v32 = *(_OWORD *)v7;
            v176 = *(_QWORD *)(v7 + 16);
            v175 = v32;
            v33 = *(_OWORD *)v31;
            *(_QWORD *)(v7 + 16) = *((_QWORD *)v31 + 2);
            *(_OWORD *)v7 = v33;
            v34 = v175;
            *((_QWORD *)v31 + 2) = v176;
            *(_OWORD *)v31 = v34;
            do
            {
              v7 += 24;
              v35 = *a3;
              *(_QWORD *)&v175 = v7;
              v36 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, (unsigned __int8 *)v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
              v37 = *a3;
              *(_QWORD *)&v175 = &v177;
            }
            while (v36 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
            do
            {
              v31 -= 24;
              v38 = *a3;
              *(_QWORD *)&v175 = v31;
              v39 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, v31, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5);
              v40 = *a3;
              *(_QWORD *)&v175 = &v177;
            }
            while (v39 >= *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (unsigned __int8 *)&v177, (uint64_t)&std::piecewise_construct, (__int128 **)&v175)+ 5));
          }
          while (v7 < (unint64_t)v31);
        }
        v41 = (__int128 *)(v7 - 24);
        if (v7 - 24 == a1)
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v42 = *v41;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
          *(_OWORD *)a1 = v42;
          *(_BYTE *)(v7 - 1) = 0;
          *(_BYTE *)(v7 - 24) = 0;
        }
        v43 = v177;
        *(_QWORD *)(v7 - 8) = v178;
        *v41 = v43;
        if (v23 < (unint64_t)v24)
        {
LABEL_34:
          a5 = 0;
          continue;
        }
        {
          if (v44)
            continue;
          goto LABEL_34;
        }
        a2 = v7 - 24;
        if (!v44)
          goto LABEL_2;
        return;
    }
  }
}

void sub_1E06A4E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36[5];

  v12 = *a6;
  v36[0] = (__int128 *)a5;
  v13 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (unsigned __int8 *)a5, (uint64_t)&std::piecewise_construct, v36)+ 5);
  v14 = *a6;
  v36[0] = (__int128 *)a4;
  if (v13 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, v36)+ 5))
  {
    v16 = *(_QWORD *)(a4 + 16);
    v17 = *(_OWORD *)a4;
    v18 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v18;
    *(_OWORD *)a5 = v17;
    *(_QWORD *)(a5 + 16) = v16;
    v19 = *a6;
    v36[0] = (__int128 *)a4;
    v20 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, v36)+ 5);
    v21 = *a6;
    v36[0] = (__int128 *)a3;
    if (v20 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v36)+ 5))
    {
      v22 = *(_QWORD *)(a3 + 16);
      v23 = *(_OWORD *)a3;
      v24 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v24;
      *(_OWORD *)a4 = v23;
      *(_QWORD *)(a4 + 16) = v22;
      v25 = *a6;
      v36[0] = (__int128 *)a3;
      v26 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v36)+ 5);
      v27 = *a6;
      v36[0] = (__int128 *)a2;
      if (v26 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v36)+ 5))
      {
        v28 = *(_QWORD *)(a2 + 16);
        v29 = *(_OWORD *)a2;
        v30 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v30;
        *(_OWORD *)a3 = v29;
        *(_QWORD *)(a3 + 16) = v28;
        v31 = *a6;
        v36[0] = (__int128 *)a2;
        v32 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v36)+ 5);
        v33 = *a6;
        v36[0] = (__int128 *)a1;
        if (v32 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, v36)+ 5))
        {
          v34 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v35 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v35;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v34;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *result;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37[5];

  v8 = *a4;
  v37[0] = (__int128 *)a2;
  v9 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v37)+ 5);
  v10 = *a4;
  v37[0] = (__int128 *)a1;
  v11 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, v37)+ 5);
  v12 = *a4;
  if (v9 >= v11)
  {
    v37[0] = (__int128 *)a3;
    v19 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v37)+ 5);
    v20 = *a4;
    v37[0] = (__int128 *)a2;
    result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v37);
    if (v19 < *((_QWORD *)result + 5))
    {
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_OWORD *)a2;
      v23 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v23;
      *(_OWORD *)a3 = v22;
      *(_QWORD *)(a3 + 16) = v21;
      v24 = *a4;
      v37[0] = (__int128 *)a2;
      v25 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v37)+ 5);
      v26 = *a4;
      v37[0] = (__int128 *)a1;
      result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, v37);
      if (v25 < *((_QWORD *)result + 5))
      {
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(_OWORD *)a1;
        v29 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v29;
        *(_OWORD *)a2 = v28;
        *(_QWORD *)(a2 + 16) = v27;
      }
    }
  }
  else
  {
    v37[0] = (__int128 *)a3;
    v13 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v37)+ 5);
    v14 = *a4;
    v37[0] = (__int128 *)a2;
    result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v37);
    if (v13 >= *((_QWORD *)result + 5))
    {
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(_OWORD *)a1;
      v32 = *(_QWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v32;
      *(_OWORD *)a2 = v31;
      *(_QWORD *)(a2 + 16) = v30;
      v33 = *a4;
      v37[0] = (__int128 *)a3;
      v34 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v37)+ 5);
      v35 = *a4;
      v37[0] = (__int128 *)a2;
      result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v37);
      if (v34 >= *((_QWORD *)result + 5))
        return result;
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_OWORD *)a2;
      v36 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v36;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = *(_OWORD *)a1;
      v18 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = v18;
    }
    *(_OWORD *)a3 = v17;
    *(_QWORD *)(a3 + 16) = v16;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v6;
  _BOOL8 result;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unsigned __int8 *v33;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (_OWORD *)(a2 - 24);
      v9 = *a3;
      *(_QWORD *)&v31 = a2 - 24;
      v10 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)(a2 - 24), (uint64_t)&std::piecewise_construct, (__int128 **)&v31)+ 5);
      v11 = *a3;
      *(_QWORD *)&v31 = a1;
      if (v10 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v31)+ 5))
      {
        v12 = *(_QWORD *)(a1 + 16);
        v13 = *(_OWORD *)a1;
        v14 = *(_QWORD *)(v4 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v14;
        *v8 = v13;
        *(_QWORD *)(v4 - 8) = v12;
      }
      return 1;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      return 1;
    default:
      v15 = (unsigned __int8 *)(a1 + 48);
      v16 = a1 + 72;
      if (a1 + 72 == v4)
        return 1;
      v17 = 0;
      v18 = 0;
      v30 = v4;
      break;
  }
  while (1)
  {
    v19 = *a3;
    *(_QWORD *)&v31 = v16;
    v20 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (unsigned __int8 *)v16, (uint64_t)&std::piecewise_construct, (__int128 **)&v31)+ 5);
    v21 = *a3;
    *(_QWORD *)&v31 = v15;
    if (v20 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v15, (uint64_t)&std::piecewise_construct, (__int128 **)&v31)+ 5))
    {
      v31 = *(_OWORD *)v16;
      v32 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)v16 = 0;
      v22 = v17;
      do
      {
        v23 = a1 + v22;
        v24 = (void **)(a1 + v22 + 72);
        if (*(char *)(a1 + v22 + 95) < 0)
          operator delete(*v24);
        *(_OWORD *)v24 = *(_OWORD *)(v23 + 48);
        *(_QWORD *)(a1 + v22 + 88) = *(_QWORD *)(v23 + 64);
        *(_BYTE *)(v23 + 71) = 0;
        *(_BYTE *)(v23 + 48) = 0;
        if (v22 == -48)
        {
          v29 = a1;
          goto LABEL_15;
        }
        v25 = *a3;
        v33 = (unsigned __int8 *)&v31;
        v26 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)+ 5);
        v27 = *a3;
        v33 = (unsigned __int8 *)(a1 + v22 + 24);
        v22 -= 24;
      }
      while (v26 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, v33, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)+ 5));
      v28 = *(char *)(a1 + v22 + 95);
      v29 = a1 + v22 + 72;
      if (v28 < 0)
        operator delete(*(void **)v29);
LABEL_15:
      v4 = v30;
      *(_OWORD *)v29 = v31;
      *(_QWORD *)(v29 + 16) = v32;
      if (++v18 == 8)
        return v16 + 24 == v30;
    }
    v15 = (unsigned __int8 *)v16;
    v17 += 24;
    v16 += 24;
    if (v16 == v4)
      return 1;
  }
}

void sub_1E06A5630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28[5];

  v10 = *a5;
  v28[0] = (__int128 *)a4;
  v11 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, v28)+ 5);
  v12 = *a5;
  v28[0] = (__int128 *)a3;
  if (v11 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v28)+ 5))
  {
    v14 = *(_QWORD *)(a3 + 16);
    v15 = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v16;
    *(_OWORD *)a4 = v15;
    *(_QWORD *)(a4 + 16) = v14;
    v17 = *a5;
    v28[0] = (__int128 *)a3;
    v18 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, v28)+ 5);
    v19 = *a5;
    v28[0] = (__int128 *)a2;
    if (v18 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v28)+ 5))
    {
      v20 = *(_QWORD *)(a2 + 16);
      v21 = *(_OWORD *)a2;
      v22 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v22;
      *(_OWORD *)a3 = v21;
      *(_QWORD *)(a3 + 16) = v20;
      v23 = *a5;
      v28[0] = (__int128 *)a2;
      v24 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, v28)+ 5);
      v25 = *a5;
      v28[0] = (__int128 *)a1;
      if (v24 < *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (unsigned __int8 *)a1, (uint64_t)&std::piecewise_construct, v28)+ 5))
      {
        v26 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v27 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v27;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v26;
      }
    }
  }
  return result;
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1E06A5940(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>(int a1, _QWORD *a2, _QWORD *a3, std::string *this)
{
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::string::operator=(this, (const std::string *)(v5 + 4));
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      ++this;
      v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

std::string *std::pair<std::vector<std::string>,std::vector<std::string>>::pair[abi:ne180100]<std::vector<std::string>&,std::vector<std::string>&,0>(std::string *a1, __int128 **a2, __int128 **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_1E06A5A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1E06A5AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodes(void)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(MIL::Builder::ProgramBuilder *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t **i;
  MIL::Builder::BlockBuilder::BlockBuilderImpl ***j;

  result = MIL::Builder::ProgramBuilder::GetFunctions(a1);
  for (i = *(uint64_t ***)(result + 16); i; i = (uint64_t **)*i)
  {
    result = MIL::Builder::FunctionBuilder::GetSpecializations((MIL::Builder::FunctionBuilder *)i[5]);
    for (j = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ****)(result + 16);
          j;
          j = (MIL::Builder::BlockBuilder::BlockBuilderImpl ***)*j)
    {
      result = MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodes(void)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(j + 5, a2);
    }
  }
  return result;
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodes(void)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(MIL::Builder::BlockBuilder::BlockBuilderImpl ***a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[3];
  __int128 v12;
  void **v13;

  if (MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a1))
  {
    v4 = 0;
    do
    {
      MIL::Builder::BlockBuilder::GetOperation(*a1, v4, &v12);
      MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v12, (uint64_t)v11);
      v5 = v11[0];
      v6 = v11[1];
      while (v5 != v6)
      {
        MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ForEachBlock<MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodes(void)::{lambda(std::shared_ptr<MIL::Builder::BlockBuilder> const&)#1}>(v5, a2);
        v5 += 16;
      }
      v13 = (void **)v11;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v13);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      ++v4;
    }
    while (v4 < MIL::Builder::BlockBuilder::GetNumOperations((MIL::Builder::BlockBuilder *)*a1));
  }
  return MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodesWithinBlock(*a2, (MIL::Builder::BlockBuilder **)a1);
}

void sub_1E06A5C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FoldConstantNodesWithinBlock(uint64_t a1, MIL::Builder::BlockBuilder **a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned __int8 *i;
  unsigned __int8 *OperationsByInput;
  unint64_t *v9;
  char v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t j;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *k;
  MIL::Builder::BlockBuilder *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  std::string v54;
  __int128 v55;
  std::string v56;
  void *__p;
  unint64_t *v58;
  unint64_t *v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _OWORD v63[2];
  int v64;
  _QWORD v65[5];
  __int128 v66;
  __int128 v67;
  int v68;
  __int128 *v69;

  v66 = 0u;
  v67 = 0u;
  v68 = 1065353216;
  MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FindAllConstantOpsWithinBlock(a1, a2, &v66, (uint64_t)v65);
  v3 = 0;
  memset(v63, 0, sizeof(v63));
  v64 = 1065353216;
  while (v3 < MIL::Builder::BlockBuilder::GetNumOperations(*a2))
  {
    MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*a2, v3, &v60);
    __p = &v60;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder>&&>,std::tuple<>>((uint64_t)v63, &v60, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p)[4] = v3;
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
    if (*((_QWORD *)&v60 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    ++v3;
  }
  v60 = 0u;
  v61 = 0u;
  v62 = 1065353216;
  for (i = (unsigned __int8 *)v67; i; i = *(unsigned __int8 **)i)
  {
    OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput((uint64_t)*a2, i + 16);
    std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)&__p, (uint64_t)OperationsByInput);
    v9 = v59;
    if (!v59)
      goto LABEL_19;
    v10 = 0;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(v65, v9 + 2))
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v60, i + 16)|| (v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v9 + 2), v11 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)v63, v9 + 2, (uint64_t)&std::piecewise_construct, &v56)[4], v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 16), v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v60, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v56)+ 40), v11 < std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)v63, v56.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct,
                      &v56)[4]))
        {
          v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 16);
          v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v60, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v56);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v12 + 5, (uint64_t *)v9 + 2);
        }
        v10 = 1;
      }
      v9 = (unint64_t *)*v9;
    }
    while (v9);
    if ((v10 & 1) == 0)
    {
LABEL_19:
      MIL::Builder::BlockBuilder::GetOutputNames(*a2, &v56);
      v13 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_, (unsigned __int8 **)i + 2);
      if (v13 != v56.__r_.__value_.__l.__size_)
      {
        v55 = 0uLL;
        v69 = (__int128 *)(i + 16);
        v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v60, i + 16, (uint64_t)&std::piecewise_construct, &v69);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v14 + 40), &v55);
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      *(_QWORD *)&v55 = &v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&__p);
  }
  __p = 0;
  v58 = 0;
  v59 = 0;
  std::vector<unsigned long long>::reserve(&__p, v65[3]);
  for (j = 0; j < MIL::Builder::BlockBuilder::GetNumOperations(*a2); ++j)
  {
    MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*a2, j, &v56);
    v19 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(v65, &v56);
    v20 = v19;
    size = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
    if (!v56.__r_.__value_.__l.__size_)
      goto LABEL_33;
    v22 = (unint64_t *)(v56.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
      if (!v20)
        continue;
    }
    else
    {
LABEL_33:
      if (!v19)
        continue;
    }
    v24 = v58;
    if (v58 >= v59)
    {
      v26 = (unint64_t *)__p;
      v27 = ((char *)v58 - (_BYTE *)__p) >> 3;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v29 = (char *)v59 - (_BYTE *)__p;
      if (((char *)v59 - (_BYTE *)__p) >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v59, v30);
        v26 = (unint64_t *)__p;
        v24 = v58;
      }
      else
      {
        v31 = 0;
      }
      v32 = (unint64_t *)&v31[8 * v27];
      *v32 = j;
      v25 = v32 + 1;
      while (v24 != v26)
      {
        v33 = *--v24;
        *--v32 = v33;
      }
      __p = v32;
      v58 = v25;
      v59 = (unint64_t *)&v31[8 * v30];
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v58 = j;
      v25 = v24 + 1;
    }
    v58 = v25;
  }
  if (v58 == __p)
    v34 = 0;
  else
    v34 = (unint64_t *)__p;
  MIL::Builder::BlockBuilder::RemoveOperations((uint64_t)*a2, v34, ((char *)v58 - (_BYTE *)__p) >> 3, 1);
  for (k = (uint64_t *)v61; k; k = (uint64_t *)*k)
  {
    v36 = *a2;
    if (*((char *)k + 39) < 0)
      std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)k[2], k[3]);
    else
      v54 = *(std::string *)(k + 2);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
    v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v66, (unsigned __int8 *)k + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v56);
    v38 = *((_QWORD *)v37 + 6);
    *(_QWORD *)&v53 = *((_QWORD *)v37 + 5);
    *((_QWORD *)&v53 + 1) = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)k[6];
    v51 = k[5];
    v52 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
    }
    MIL::Builder::BlockBuilder::AddConst(v36, (uint64_t)&v54, &v53, (uint64_t)&v51);
    v44 = v52;
    if (v52)
    {
      v45 = (unint64_t *)&v52->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v58 = (unint64_t *)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v60);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v63);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v65);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v66);
}

void sub_1E06A61D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a36);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v36 - 184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v36 - 144);
  _Unwind_Resume(a1);
}

unint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::FindAllConstantOpsWithinBlock@<X0>(uint64_t a1@<X0>, MIL::Builder::BlockBuilder **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  MIL::Builder::BlockBuilder **v5;
  unint64_t v6;
  unint64_t result;
  uint64_t **v8;
  unsigned __int8 *Name;
  uint64_t Operator;
  _QWORD *Parameters;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  MIL::IRArgument **v14;
  MIL::IRArgument **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  _OWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  BOOL v39;
  __int128 ****i;
  __int128 ****v41;
  _anonymous_namespace_::IRBlockImpl *v42;
  _QWORD *v43;
  _anonymous_namespace_::IRBlockImpl *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _anonymous_namespace_::IRBlockImpl **v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  __int128 v57;
  int64x2_t v58;
  uint64_t v59;
  _anonymous_namespace_::IRBlockImpl *v60;
  uint64_t v61;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t Attributes;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t j;
  __int128 *OutputName;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  _anonymous_namespace_::IRBlockImpl *v84;
  _anonymous_namespace_::IRBlockImpl *v85;
  _QWORD *v86;
  _OWORD v87[2];
  int64x2_t v88;
  _QWORD v89[2];
  _OWORD v90[2];
  int v91;
  __int128 v92;
  std::string v93;
  uint64_t v94;
  std::__shared_weak_count *v95;

  v5 = a2;
  v6 = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  while (1)
  {
    result = MIL::Builder::BlockBuilder::GetNumOperations(*v5);
    if (v6 >= result)
      return result;
    MIL::Builder::BlockBuilder::GetOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl **)*v5, v6, &v92);
    MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v92, (uint64_t)&v93);
    v8 = (uint64_t **)v93.__r_.__value_.__r.__words[2];
    if (v93.__r_.__value_.__r.__words[2])
    {
      while (1)
      {
        Name = (unsigned __int8 *)MIL::Builder::Variable::TryGetName((MIL::Builder::Variable::VariableImpl **)v8[2]);
        if (Name)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, Name))break;
        }
        v8 = (uint64_t **)*v8;
        if (!v8)
          goto LABEL_7;
      }
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v93);
    }
    else
    {
LABEL_7:
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v93);
      Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v92);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 224))(Operator) & 1) != 0)
      {
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a4, &v92, &v92);
        v81 = v6;
        memset(v90, 0, sizeof(v90));
        v91 = 1065353216;
        Parameters = (_QWORD *)MIL::Builder::OperationBuilder::GetParameters((MIL::Builder::OperationBuilder *)v92);
        v13 = (unsigned __int8 *)(Parameters + 1);
        v12 = (unsigned __int8 *)*Parameters;
        if ((_QWORD *)*Parameters != Parameters + 1)
        {
          do
          {
            v88 = 0uLL;
            v89[0] = 0;
            std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v88, (uint64_t)(*((_QWORD *)v12 + 8) - *((_QWORD *)v12 + 7)) >> 4);
            v15 = (MIL::IRArgument **)*((_QWORD *)v12 + 7);
            v14 = (MIL::IRArgument **)*((_QWORD *)v12 + 8);
            while (v15 != v14)
            {
              if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v15 + 24))(*v15))
              {
                (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)*v15 + 48))(v87);
                v16 = v88.i64[1];
                if (v88.i64[1] >= v89[0])
                {
                  v19 = (v88.i64[1] - v88.i64[0]) >> 4;
                  v20 = v19 + 1;
                  if ((unint64_t)(v19 + 1) >> 60)
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v21 = v89[0] - v88.i64[0];
                  if ((v89[0] - v88.i64[0]) >> 3 > v20)
                    v20 = v21 >> 3;
                  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
                    v22 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v22 = v20;
                  v95 = (std::__shared_weak_count *)v89;
                  v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v89, v22);
                  v25 = &v23[16 * v19];
                  *(_OWORD *)v25 = v87[0];
                  v87[0] = 0uLL;
                  v26 = (_QWORD *)v88.i64[1];
                  v27 = (_QWORD *)v88.i64[0];
                  if (v88.i64[1] == v88.i64[0])
                  {
                    v30 = vdupq_n_s64(v88.u64[1]);
                    v28 = &v23[16 * v19];
                  }
                  else
                  {
                    v28 = &v23[16 * v19];
                    do
                    {
                      v29 = *((_OWORD *)v26 - 1);
                      v26 -= 2;
                      *((_OWORD *)v28 - 1) = v29;
                      v28 -= 16;
                      *v26 = 0;
                      v26[1] = 0;
                    }
                    while (v26 != v27);
                    v30 = v88;
                  }
                  v31 = v25 + 16;
                  v88.i64[0] = (uint64_t)v28;
                  v88.i64[1] = (uint64_t)(v25 + 16);
                  *(int64x2_t *)&v93.__r_.__value_.__r.__words[1] = v30;
                  v32 = v89[0];
                  v89[0] = &v23[16 * v24];
                  v94 = v32;
                  v93.__r_.__value_.__r.__words[0] = v30.i64[0];
                  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v93);
                  v33 = (std::__shared_weak_count *)*((_QWORD *)&v87[0] + 1);
                  v88.i64[1] = (uint64_t)v31;
                  if (*((_QWORD *)&v87[0] + 1))
                  {
                    v34 = (unint64_t *)(*((_QWORD *)&v87[0] + 1) + 8);
                    do
                      v35 = __ldaxr(v34);
                    while (__stlxr(v35 - 1, v34));
                    if (!v35)
                    {
                      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                      std::__shared_weak_count::__release_weak(v33);
                    }
                  }
                }
                else
                {
                  *(_OWORD *)v88.i64[1] = v87[0];
                  v88.i64[1] = v16 + 16;
                }
              }
              else
              {
                v17 = (unsigned __int8 *)MIL::IRArgument::GetName(*v15);
                v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a3, v17);
                if (!v18)
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100]((char **)&v88, (__int128 *)(v18 + 40));
              }
              v15 += 2;
            }
            v93.__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 32);
            v36 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v90, v12 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v93)+ 40;
            if (v36 != (unsigned __int8 *)&v88)
              std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)v36, (uint64_t *)v88.i64[0], (uint64_t *)v88.i64[1], (v88.i64[1] - v88.i64[0]) >> 4);
            v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
            std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
            v37 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
            if (v37)
            {
              do
              {
                v38 = v37;
                v37 = *(unsigned __int8 **)v37;
              }
              while (v37);
            }
            else
            {
              do
              {
                v38 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
                v39 = *(_QWORD *)v38 == (_QWORD)v12;
                v12 = v38;
              }
              while (!v39);
            }
            v12 = v38;
          }
          while (v38 != v13);
        }
        v88 = 0uLL;
        v89[0] = 0;
        MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v92, (uint64_t)&v93);
        std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)&v88, (uint64_t)(v93.__r_.__value_.__l.__size_ - v93.__r_.__value_.__r.__words[0]) >> 4);
        *(_QWORD *)&v87[0] = &v93;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v87);
        MIL::Builder::OperationBuilder::GetBlocks((MIL::Builder::OperationBuilder *)v92, (uint64_t)v87);
        v41 = (__int128 ****)*((_QWORD *)&v87[0] + 1);
        for (i = *(__int128 *****)&v87[0]; i != v41; i += 2)
        {
          MIL::Builder::BlockBuilder::CreateBlock(&v84, *i);
          v42 = v84;
          v85 = v84;
          if (v84)
          {
            v43 = (_QWORD *)operator new();
            v44 = v84;
            *v43 = &unk_1EA992F48;
            v43[1] = 0;
            v43[2] = 0;
            v43[3] = v44;
          }
          else
          {
            v43 = 0;
          }
          v86 = v43;
          v84 = 0;
          v45 = v88.i64[1];
          if (v88.i64[1] >= v89[0])
          {
            v47 = (v88.i64[1] - v88.i64[0]) >> 4;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v49 = v89[0] - v88.i64[0];
            if ((v89[0] - v88.i64[0]) >> 3 > v48)
              v48 = v49 >> 3;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v50 = 0xFFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            v95 = (std::__shared_weak_count *)v89;
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v89, v50);
            v53 = (_anonymous_namespace_::IRBlockImpl **)&v51[16 * v47];
            *v53 = v42;
            v53[1] = (_anonymous_namespace_::IRBlockImpl *)v43;
            v85 = 0;
            v86 = 0;
            v54 = (_QWORD *)v88.i64[1];
            v55 = (_QWORD *)v88.i64[0];
            if (v88.i64[1] == v88.i64[0])
            {
              v58 = vdupq_n_s64(v88.u64[1]);
              v56 = &v51[16 * v47];
            }
            else
            {
              v56 = &v51[16 * v47];
              do
              {
                v57 = *((_OWORD *)v54 - 1);
                v54 -= 2;
                *((_OWORD *)v56 - 1) = v57;
                v56 -= 16;
                *v54 = 0;
                v54[1] = 0;
              }
              while (v54 != v55);
              v58 = v88;
            }
            v46 = v53 + 2;
            v88.i64[0] = (uint64_t)v56;
            v88.i64[1] = (uint64_t)(v53 + 2);
            *(int64x2_t *)&v93.__r_.__value_.__r.__words[1] = v58;
            v59 = v89[0];
            v89[0] = &v51[16 * v52];
            v94 = v59;
            v93.__r_.__value_.__r.__words[0] = v58.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v93);
          }
          else
          {
            *(_QWORD *)v88.i64[1] = v42;
            *(_QWORD *)(v45 + 8) = v43;
            v46 = (_QWORD *)(v45 + 16);
          }
          v88.i64[1] = (uint64_t)v46;
          v60 = v84;
          v84 = 0;
          if (v60)
            (*(void (**)(_anonymous_namespace_::IRBlockImpl *))(*(_QWORD *)v60 + 8))(v60);
        }
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        v61 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v92);
        LocationPtr = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr((MIL::Builder::OperationBuilder *)v92);
        v63 = (std::__shared_weak_count *)LocationPtr[1];
        v82 = *LocationPtr;
        v83 = v63;
        v5 = a2;
        if (v63)
        {
          p_shared_owners = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(p_shared_owners);
          while (__stxr(v65 + 1, p_shared_owners));
        }
        Attributes = MIL::Builder::OperationBuilder::GetAttributes((MIL::Builder::OperationBuilder *)v92);
        (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t *, _OWORD *, uint64_t, int64x2_t *, uint64_t))(*(_QWORD *)v61 + 208))(v87, v61, a1, &v82, v90, Attributes, &v88, 0xFFFFFFFFLL);
        v67 = v83;
        if (v83)
        {
          v68 = (unint64_t *)&v83->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        for (j = 0; j < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v92); ++j)
        {
          OutputName = (__int128 *)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v92, j);
          std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>(&v93, OutputName, (std::string::size_type *)(*(_QWORD *)&v87[0] + 16 * j));
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>((uint64_t)a3, (unsigned __int8 *)&v93, (__int128 *)&v93);
          v72 = v95;
          if (v95)
          {
            v73 = (unint64_t *)&v95->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
        }
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v90);
        v6 = v81;
      }
    }
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    ++v6;
  }
}

void sub_1E06A6978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  a19 = (void **)(v27 - 136);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  a17 = (void **)&a23;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a27);
  v29 = *(std::__shared_weak_count **)(v27 - 144);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder>&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  *((_OWORD *)v16 + 1) = **a4;
  *v17 = 0;
  v17[1] = 0;
  v16[4] = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v13 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_1E06A6D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x28uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  v16[2] = **a4;
  v18 = v17[1];
  v16[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v16[4] = 0;
  v31 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10)
          v28 %= v10;
      }
      else
      {
        v28 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  v13 = (_QWORD *)v30[0];
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return v13;
}

void sub_1E06A701C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Transform::ProgramTransformer::ProgramTransformerImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_BYTE *)(a2 + 56))
      MIL::Matching::Matcher::~Matcher((MIL::Matching::Matcher *)(a2 + 48));
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 32);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2 + 16);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x1E0C023A0);
  }
}

uint64_t MIL::Transform::ProgramTransformer::ProgramTransformerImpl::ProgramTransformerImpl(uint64_t a1, _QWORD *a2, const MIL::IRProgram *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::allocate_shared[abi:ne180100]<MIL::Transform::NameGenerator,std::allocator<MIL::Transform::NameGenerator>,MIL::IRProgram const&,void>(a3, (_QWORD *)(a1 + 16));
  v9 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make(&v19, a3, &v21);
  v12 = v21;
  *(_QWORD *)(a1 + 32) = v21;
  if (v12)
  {
    v13 = (_QWORD *)operator new();
    v14 = v21;
    *v13 = &unk_1EA99EA18;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v14;
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a1 + 40) = v13;
  v21 = 0;
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_1E06A71C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = a12;
  a12 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::Transform::NameGenerator,std::allocator<MIL::Transform::NameGenerator>,MIL::IRProgram const&,void>@<X0>(const MIL::IRProgram *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<MIL::Transform::NameGenerator>::__shared_ptr_emplace[abi:ne180100]<MIL::IRProgram const&,std::allocator<MIL::Transform::NameGenerator>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1E06A7250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::Transform::NameGenerator>::__shared_ptr_emplace[abi:ne180100]<MIL::IRProgram const&,std::allocator<MIL::Transform::NameGenerator>,0>(_QWORD *a1, const MIL::IRProgram *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99E9C8;
  MIL::Transform::NameGenerator::NameGenerator((MIL::Transform::NameGenerator *)(a1 + 3), a2);
  return a1;
}

void sub_1E06A7298(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Transform::NameGenerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99E9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Transform::NameGenerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99E9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

void std::__shared_ptr_emplace<MIL::Transform::NameGenerator>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Util::FindBlobFilePaths(MIL::Util *this@<X0>, uint64_t *a2@<X8>)
{
  std::string::__raw *v4;
  uint64_t v5;
  std::string *v6;
  std::string v7;
  std::string **v8;
  std::string *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = 0uLL;
  v6 = &v7;
  v7.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_1EA99EA78;
  v8 = &v6;
  v9 = (std::string *)&v7.__r_.__value_.__r.__words[2];
  MIL::Util::Walk((uint64_t)this, (uint64_t)&v7.__r_.__value_.__r.__words[2]);
  v4 = (std::string::__raw *)v9;
  if (v9 == (std::string *)&v7.__r_.__value_.__r.__words[2])
  {
    v5 = 4;
    v4 = (std::string::__raw *)&v7.__r_.__value_.__r.__words[2];
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(v4->__words[0] + 8 * v5))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::string>::insert<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,0>(a2, 0, v6, &v7);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v6, v7.__r_.__value_.__l.__data_);
}

void sub_1E06A746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, void **a12)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::insert<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,0>(uint64_t *a1, std::string *a2, std::string *a3, std::string *a4)
{
  uint64_t v4;
  std::string *v5;
  std::string *size;
  std::string *v7;
  BOOL v8;

  if (a3 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      size = (std::string *)v5->__r_.__value_.__l.__size_;
      if (size)
      {
        do
        {
          v7 = size;
          size = (std::string *)size->__r_.__value_.__r.__words[0];
        }
        while (size);
      }
      else
      {
        do
        {
          v7 = (std::string *)v5->__r_.__value_.__r.__words[2];
          v8 = v7->__r_.__value_.__r.__words[0] == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, a2, a3, a4, v4);
}

void std::__function::__func<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0,std::allocator<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0,std::allocator<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA99EA78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0,std::allocator<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA99EA78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0,std::allocator<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IRObject *this)
{
  uint64_t **i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  MIL::IRArgument **v15;
  MIL::IRArgument **v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  const void *v29;
  std::__shared_weak_count *v30;
  std::string __p;

  for (i = *(uint64_t ***)(MIL::IRObject::GetAttributes(this) + 16); i; i = (uint64_t **)*i)
  {
    v5 = (*(uint64_t (**)(uint64_t *))(*i[5] + 40))(i[5]);
    if (v5)
    {
      v6 = v5;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5))
      {
        v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
        v8 = *(uint64_t ***)(a1 + 8);
        MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0::operator() const(MIL::IROperation const&)::{lambda(std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&)#1}::operator()(v7, &v29);
        MIL::IRValue::GetScalar<std::string>(v29, &__p);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v8, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v9 = v30;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
    }
  }
  v12 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)this + 160))(this);
  v13 = v12 + 1;
  v14 = (_QWORD *)*v12;
  if ((_QWORD *)*v12 != v12 + 1)
  {
    do
    {
      v15 = (MIL::IRArgument **)v14[7];
      v16 = (MIL::IRArgument **)v14[8];
      while (v15 != v16)
      {
        if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v15 + 24))(*v15))
        {
          Value = MIL::IRArgument::GetValue(*v15);
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Value + 40))(Value);
          if (v18)
          {
            v19 = v18;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 80))(v18))
            {
              v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
              v21 = *(uint64_t ***)(a1 + 8);
              MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0::operator() const(MIL::IROperation const&)::{lambda(std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&)#1}::operator()(v20, &v29);
              MIL::IRValue::GetScalar<std::string>(v29, &__p);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v21, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v22 = v30;
              if (v30)
              {
                v23 = (unint64_t *)&v30->__shared_owners_;
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
            }
          }
        }
        v15 += 2;
      }
      v25 = (_QWORD *)v14[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v14[2];
          v27 = *v26 == (_QWORD)v14;
          v14 = v26;
        }
        while (!v27);
      }
      v14 = v26;
    }
    while (v26 != v13);
  }
  return 1;
}

void sub_1E06A77AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a17 < 0)
    operator delete(__p);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0,std::allocator<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0,std::allocator<MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void MIL::Util::FindBlobFilePaths(MIL::IRProgram const&)::$_0::operator() const(MIL::IROperation const&)::{lambda(std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&)#1}::operator()(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::logic_error *exception;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid file properties: Blob file path property not found.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v5 = *((_QWORD *)v4 + 6);
  *a2 = *((_QWORD *)v4 + 5);
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_1E06A7938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *a1, std::string *a2, std::string *a3, _QWORD *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v20;
  uint64_t v21;
  std::__split_buffer<std::string> v23;
  char v24;

  v5 = a2;
  if (a5 >= 1)
  {
    v10 = (uint64_t)(a1 + 2);
    v9 = a1[2];
    v11 = (std::string *)a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
    {
      v23.__first_ = a3;
      std::__advance[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(&v23, a5);
      v20 = a1[1] - (_QWORD)v5;
      v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
      if (v21 >= a5
        || (v23.__first_ = a3,
            std::__advance[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(&v23, v21), a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>(v10, v23.__first_->__r_.__value_.__r.__words, a4, (std::string *)a1[1]), v20 >= 1))
      {
        std::vector<std::string>::__move_range((std::vector<std::string> *)a1, v5, v11, &v5[a5]);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>((int)&v24, a3, v23.__first_->__r_.__value_.__r.__words, v5);
      }
    }
    else
    {
      v12 = *a1;
      v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *a1) >> 3);
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= v13)
        v16 = v13;
      if (v15 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      v23.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
      if (v17)
        v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), v17);
      else
        v18 = 0;
      v23.__first_ = v18;
      v23.__begin_ = v18 + v14;
      v23.__end_ = v23.__begin_;
      v23.__end_cap_.__value_ = &v18[v17];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t)&v23, a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &v23, v5);
      std::__split_buffer<std::string>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_1E06A7B40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    do
    {
      if (*((char *)a2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)a2[4], a2[5]);
      }
      else
      {
        v7 = *((_OWORD *)a2 + 2);
        v4->__r_.__value_.__r.__words[2] = a2[6];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v8 = (_QWORD *)a2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)a2[2];
          v10 = *v9 == (_QWORD)a2;
          a2 = v9;
        }
        while (!v10);
      }
      ++v4;
      a2 = v9;
    }
    while (v4 != v6);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_1E06A7C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD **std::__advance[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v7;
  _QWORD *v8;

  if (a2 < 0)
  {
    v7 = *result;
    do
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v4 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v7[2];
          v5 = *v4 == (_QWORD)v7;
          v7 = v4;
        }
        while (v5);
      }
      v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2)
      return result;
    v2 = *result;
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (a2-- > 1);
  }
  *result = v4;
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::string*>(uint64_t a1, _QWORD *a2, _QWORD *a3, std::string *this)
{
  std::string *v4;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[3];
  char v13;
  std::string *v14;
  std::string *v15;

  v4 = this;
  v14 = this;
  v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        v7 = *((_OWORD *)v6 + 2);
        v4->__r_.__value_.__r.__words[2] = v6[6];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v4 = ++v15;
      v6 = v9;
    }
    while (v9 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1E06A7E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t ***MIL::Util::ForEachVariableName(uint64_t a1, uint64_t a2)
{
  uint64_t ***result;
  uint64_t **i;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t ***v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;

  result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  for (i = result[2]; i; i = (uint64_t **)*i)
  {
    v5 = i[5];
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v5 + 128))(v5);
    v7 = v6 + 1;
    v8 = (_QWORD *)*v6;
    if ((_QWORD *)*v6 != v6 + 1)
    {
      do
      {
        v9 = *(_QWORD *)(a2 + 24);
        if (!v9)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v8 + 4);
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != v7);
    }
    result = (uint64_t ***)(*(uint64_t (**)(uint64_t *))(*v5 + 112))(v5);
    v13 = result + 1;
    v14 = *result;
    if (*result != (uint64_t **)(result + 1))
    {
      do
      {
        v15 = v14[1];
        if (v15)
        {
          do
          {
            v16 = (uint64_t **)v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (uint64_t **)v14[2];
            v12 = *v16 == (uint64_t *)v14;
            v14 = v16;
          }
          while (!v12);
        }
        v14 = v16;
      }
      while (v16 != (uint64_t **)v13);
    }
  }
  return result;
}

uint64_t ***MIL::Util::`anonymous namespace'::ForEachVariableName(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  MIL::IRNamedValueType **v5;
  MIL::IRNamedValueType **v6;
  uint64_t Name;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ***result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  MIL::IRNamedValueType **v29;
  MIL::IRNamedValueType **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(MIL::IRNamedValueType ***)v4;
  v6 = *(MIL::IRNamedValueType ***)(v4 + 8);
  while (v5 != v6)
  {
    Name = MIL::IRNamedValueType::GetName(*v5);
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
LABEL_33:
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, Name);
    v5 += 2;
  }
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v10 = *v9;
  v11 = v9[1];
  while (v10 != v11)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
      goto LABEL_33;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v10);
    v10 += 24;
  }
  result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v14 = **result;
  v15 = (*result)[1];
  while (v14 != v15)
  {
    v16 = *v14;
    v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v14 + 160))(*v14);
    v18 = v17 + 1;
    v19 = (_QWORD *)*v17;
    if ((_QWORD *)*v17 != v17 + 1)
    {
      do
      {
        v20 = (_QWORD *)v19[7];
        v21 = (_QWORD *)v19[8];
        while (v20 != v21)
        {
          v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 32))(*v20);
          if (v22)
          {
            v23 = v22;
            v24 = *(_QWORD *)(a2 + 24);
            if (!v24)
              goto LABEL_33;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v24, v23);
          }
          v20 += 2;
        }
        v25 = (_QWORD *)v19[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v19[2];
            v27 = *v26 == (_QWORD)v19;
            v19 = v26;
          }
          while (!v27);
        }
        v19 = v26;
      }
      while (v26 != v18);
    }
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 176))(v16);
    v29 = *(MIL::IRNamedValueType ***)v28;
    v30 = *(MIL::IRNamedValueType ***)(v28 + 8);
    while (v29 != v30)
    {
      v31 = MIL::IRNamedValueType::GetName(*v29);
      v32 = *(_QWORD *)(a2 + 24);
      if (!v32)
        goto LABEL_33;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 48))(v32, v31);
      v29 += 2;
    }
    result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 208))(v16);
    v33 = **result;
    v34 = (*result)[1];
    while (v33 != v34)
    {
      v35 = *v33;
      v33 += 2;
    }
    v14 += 2;
  }
  return result;
}

BOOL MIL::Util::DblApproxEqual(MIL::Util *this, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 == a3)
    return 1;
  v4 = 0;
  if (a2 > 0.0 != a3 > 0.0)
    return v4;
  if (vabdd_f64(a2, a3) <= fmax(a2, a3) * a4)
    return 1;
  v5 = *(_QWORD *)&a2 - *(_QWORD *)&a3;
  if ((uint64_t)(*(_QWORD *)&a2 - *(_QWORD *)&a3) < 0)
    v5 = *(_QWORD *)&a3 - *(_QWORD *)&a2;
  return v5 <= (int)this;
}

BOOL MIL::Util::FltApproxEqual(MIL::Util *this, float a2, float a3, float a4)
{
  uint64_t v4;
  int v5;

  if (a2 == a3)
    return 1;
  v4 = 0;
  if (a2 > 0.0 != a3 > 0.0)
    return v4;
  if (vabds_f32(a2, a3) <= (float)(fmaxf(a2, a3) * a4))
    return 1;
  v5 = LODWORD(a2) - LODWORD(a3);
  if (LODWORD(a2) - LODWORD(a3) < 0)
    v5 = LODWORD(a3) - LODWORD(a2);
  return v5 <= (int)this;
}

_QWORD *MIL::Util::HashCombine(_QWORD *this, unint64_t *a2)
{
  *this ^= (unint64_t)&a2[8 * *this + 331804471] + (*this >> 2) + 1;
  return this;
}

uint64_t MIL::Util::Walk(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
  if ((_DWORD)result)
  {
    v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
    v7 = **v6;
    v8 = (*v6)[1];
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      v9 = v7 + 16;
      do
      {
        result = MIL::Util::Walk(*(_QWORD *)(v9 - 16), a2);
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 16;
      }
      while (!v10);
    }
  }
  return result;
}

{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  v3 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v4 = **v3;
  v5 = (*v3)[1];
  if (v4 == v5)
    return 1;
  v6 = v4 + 16;
  do
  {
    result = MIL::Util::Walk(*(_QWORD *)(v6 - 16), a2);
    if ((_DWORD)result)
      v8 = v6 == v5;
    else
      v8 = 1;
    v6 += 16;
  }
  while (!v8);
  return result;
}

{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  v3 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  v4 = **v3;
  v5 = (*v3)[1];
  if (v4 == v5)
    return 1;
  v6 = v4 + 16;
  do
  {
    result = MIL::Util::Walk(*(_QWORD *)(v6 - 16), a2);
    if ((_DWORD)result)
      v8 = v6 == v5;
    else
      v8 = 1;
    v6 += 16;
  }
  while (!v8);
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  _QWORD ***v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
  if ((_DWORD)result)
  {
    v6 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v7 = **v6;
    v8 = (*v6)[1];
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      while (2)
      {
        v9 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 208))(*v7);
        v10 = (_QWORD *)**v9;
        v11 = (_QWORD *)(*v9)[1];
        while (v10 != v11)
        {
          if ((MIL::Util::Walk(*v10, a2) & 1) == 0)
            return 0;
          v10 += 2;
        }
        v7 += 2;
        result = 1;
        if (v7 != v8)
          continue;
        break;
      }
    }
  }
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v4 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v3 + 1)
    return 1;
  do
  {
    result = MIL::Util::Walk(v5[7], a2);
    if (!(_DWORD)result)
      break;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v4);
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v4 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v3 + 1)
    return 1;
  do
  {
    result = MIL::Util::Walk(v5[7], a2);
    if (!(_DWORD)result)
      break;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v4);
  return result;
}

uint64_t MIL::Util::Rewrite(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
  if ((_DWORD)result)
  {
    v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
    v7 = **v6;
    v8 = (*v6)[1];
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      v9 = v7 + 16;
      do
      {
        result = MIL::Util::Rewrite(*(_QWORD *)(v9 - 16), a2);
        if ((_DWORD)result)
          v10 = v9 == v8;
        else
          v10 = 1;
        v9 += 16;
      }
      while (!v10);
    }
  }
  return result;
}

{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  v3 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = **v3;
  v5 = (*v3)[1];
  if (v4 == v5)
    return 1;
  v6 = v4 + 16;
  do
  {
    result = MIL::Util::Rewrite(*(_QWORD *)(v6 - 16), a2);
    if ((_DWORD)result)
      v8 = v6 == v5;
    else
      v8 = 1;
    v6 += 16;
  }
  while (!v8);
  return result;
}

{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  v3 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  v4 = **v3;
  v5 = (*v3)[1];
  if (v4 == v5)
    return 1;
  v6 = v4 + 16;
  do
  {
    result = MIL::Util::Rewrite(*(_QWORD *)(v6 - 16), a2);
    if ((_DWORD)result)
      v8 = v6 == v5;
    else
      v8 = 1;
    v6 += 16;
  }
  while (!v8);
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  _QWORD ***v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
  if ((_DWORD)result)
  {
    v6 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v7 = **v6;
    v8 = (*v6)[1];
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      while (2)
      {
        v9 = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 208))(*v7);
        v10 = (_QWORD *)**v9;
        v11 = (_QWORD *)(*v9)[1];
        while (v10 != v11)
        {
          if ((MIL::Util::Rewrite(*v10, a2) & 1) == 0)
            return 0;
          v10 += 2;
        }
        v7 += 2;
        result = 1;
        if (v7 != v8)
          continue;
        break;
      }
    }
  }
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v3 + 1)
    return 1;
  do
  {
    result = MIL::Util::Rewrite(v5[7], a2);
    if (!(_DWORD)result)
      break;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v4);
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 == v3 + 1)
    return 1;
  do
  {
    result = MIL::Util::Rewrite(v5[7], a2);
    if (!(_DWORD)result)
      break;
    v7 = (_QWORD *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
    }
    v5 = v8;
  }
  while (v8 != v4);
  return result;
}

BOOL MIL::Util::Walk(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  do
    v3 = (_QWORD *)*v3;
  while (v3 && (MIL::Util::Walk(v3[5], a2) & 1) != 0);
  return v3 == 0;
}

{
  _QWORD *v3;

  v3 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  do
    v3 = (_QWORD *)*v3;
  while (v3 && (MIL::Util::Walk(v3[5], a2) & 1) != 0);
  return v3 == 0;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  do
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  while (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, v3[5]) & 1) != 0);
  return v3 == 0;
}

BOOL MIL::Util::Rewrite(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  do
    v3 = (_QWORD *)*v3;
  while (v3 && (MIL::Util::Rewrite(v3[5], a2) & 1) != 0);
  return v3 == 0;
}

{
  _QWORD *v3;

  v3 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  do
    v3 = (_QWORD *)*v3;
  while (v3 && (MIL::Util::Rewrite(v3[5], a2) & 1) != 0);
  return v3 == 0;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 16);
  do
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  while (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, v3[5]) & 1) != 0);
  return v3 == 0;
}

void MIL::Util::OnScopeExit::~OnScopeExit(MIL::Util::OnScopeExit *this)
{
  uint64_t v2;
  MIL::Util::OnScopeExit *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (MIL::Util::OnScopeExit *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

void sub_1E06A8C98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1E06A8C54);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

BOOL MIL::Util::OpMatchesPattern(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  const char *v4;
  const char *v5;

  v3 = (uint64_t *)(a2 + 16);
  do
  {
    v3 = (uint64_t *)*v3;
    if (!v3)
      break;
    v4 = (const char *)(v3 + 2);
    if (*((char *)v3 + 39) < 0)
      v4 = *(const char **)v4;
    v5 = *(char *)(a1 + 23) >= 0 ? (const char *)a1 : *(const char **)a1;
  }
  while (fnmatch(v4, v5, 0));
  return v3 != 0;
}

uint64_t MIL::Util::IsConstexprOpTakingInputs(MIL::Util *this, const MIL::IROperator *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(MIL::Util *, const MIL::IROperator *))(*(_QWORD *)this + 104))(this, a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(MIL::Util *))(*(_QWORD *)this + 24))(this) != 0;
  return result;
}

uint64_t MIL::Util::ValidTensorDataTypesStr(MIL::Util *this)
{
  MIL *v1;
  int *ValidTensorDataTypes;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  size_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  v1 = (MIL *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  ValidTensorDataTypes = (int *)MIL::GetValidTensorDataTypes(v1);
  if (v3)
  {
    v4 = ValidTensorDataTypes;
    v5 = 4 * v3;
    v6 = "";
    do
    {
      v7 = *v4;
      v8 = strlen(v6);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v6, v8);
      MIL::IRDataTypeToString(v7, __p);
      if ((v15 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v15 & 0x80u) == 0)
        v11 = v15;
      else
        v11 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      if ((char)v15 < 0)
        operator delete(__p[0]);
      ++v4;
      v6 = ", ";
      v5 -= 4;
    }
    while (v5);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v12;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1E0C022F8](&v19);
}

void sub_1E06A8F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Util::ApplyModelPath(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _BOOL4 v16;
  uint64_t v17;
  std::__wrap_iter<const char *> v18;
  std::__wrap_iter<const char *> v19;
  std::string *v20;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v23;
  void *exception;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string v29;
  std::string v30;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v31;
  _QWORD v32[3];
  __int128 v33;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xB)
    v3 = 11;
  if (v3)
  {
    v7 = &v4[v3];
    v8 = v4;
    v9 = v7;
    do
    {
      if (*v8 == 64)
      {
        v10 = 1u;
        while (v10 != 11)
        {
          if (&v8[v10] == v7)
            goto LABEL_19;
          v11 = v8[v10];
          v12 = aModelPath_0[v10++];
          if (v11 != v12)
            goto LABEL_11;
        }
        v9 = v8;
      }
LABEL_11:
      ++v8;
    }
    while (v8 != v7);
LABEL_19:
    if (v9 != v7 && v9 == v4)
    {
      v13 = *(unsigned __int8 *)(a2 + 23);
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(a2 + 8);
      if (!v13)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        v26 = a3[1];
        *(_QWORD *)&v33 = *a3;
        *((_QWORD *)&v33 + 1) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        std::string::basic_string[abi:ne180100]<0>(v32, "Cannot interpret @model_path when ModelPath is unset");
        MIL::ParseError::ParseError((uint64_t)exception, &v33, (uint64_t)v32, 109);
      }
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v31.__traits_, "@model_path", 0);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v30 = *(std::string *)a2;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
        if (*(_BYTE *)(v30.__r_.__value_.__r.__words[0] + v30.__r_.__value_.__l.__size_ - 1) != 47)
        {
          v16 = 1;
          goto LABEL_35;
        }
        v14 = --v30.__r_.__value_.__l.__size_;
      }
      else
      {
        if (v30.__r_.__value_.__s.__data_[HIBYTE(v30.__r_.__value_.__r.__words[2]) - 1] != 47)
        {
          v16 = 0;
          goto LABEL_35;
        }
        v14 = HIBYTE(v30.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v30.__r_.__value_.__s + 23) = (*((_BYTE *)&v30.__r_.__value_.__s + 23) - 1) & 0x7F;
        v15 = &v30;
      }
      v15->__r_.__value_.__s.__data_[v14] = 0;
      v16 = (v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
LABEL_35:
      memset(&v29, 0, sizeof(v29));
      v17 = *(unsigned __int8 *)(a1 + 23);
      if ((v17 & 0x80u) == 0)
        v18.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
      else
        v18.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a1 + 8);
      if (v16)
        v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
      else
        v20 = &v30;
      v19.__i_ = &v18.__i_[v17];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v29, v18, v19, &v31, (char *)v20, 0);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(std::string *)a1 = v29;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      cntrl = v31.__start_.__cntrl_;
      if (v31.__start_.__cntrl_)
      {
        p_shared_owners = &v31.__start_.__cntrl_->__shared_owners_;
        do
          v23 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v23 - 1, (unint64_t *)p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
          std::__shared_weak_count::__release_weak(cntrl);
        }
      }
      std::locale::~locale(&v31.__traits_.__loc_);
    }
  }
}

void sub_1E06A9200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::locale::~locale(&a22);
  _Unwind_Resume(a1);
}

void MIL::Util::ApplyModelPath(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  std::__wrap_iter<const char *>::iterator_type v4;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  _BOOL4 v16;
  uint64_t v17;
  std::__wrap_iter<const char *> v18;
  std::__wrap_iter<const char *> v19;
  std::string *v20;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v23;
  void *exception;
  std::string v26;
  std::string v27;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v28;
  _QWORD v29[3];
  __int128 v30;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (std::__wrap_iter<const char *>::iterator_type)a1;
  else
    v4 = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xB)
    v3 = 11;
  if (v3)
  {
    v7 = &v4[v3];
    v8 = v4;
    v9 = v7;
    do
    {
      if (*v8 == 64)
      {
        v10 = 1u;
        while (v10 != 11)
        {
          if (&v8[v10] == v7)
            goto LABEL_19;
          v11 = v8[v10];
          v12 = aModelPath_0[v10++];
          if (v11 != v12)
            goto LABEL_11;
        }
        v9 = v8;
      }
LABEL_11:
      ++v8;
    }
    while (v8 != v7);
LABEL_19:
    if (v9 != v7 && v9 == v4)
    {
      v13 = *(unsigned __int8 *)(a3 + 23);
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(a3 + 8);
      if (!v13)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::TextLocationFromScannerLocation(a2, a1, &v28);
        v30 = *(_OWORD *)&v28.__traits_.__loc_.__locale_;
        v28.__traits_.__loc_.__locale_ = 0;
        v28.__traits_.__ct_ = 0;
        std::string::basic_string[abi:ne180100]<0>(v29, "Cannot interpret @model_path when ModelPath is unset");
        MIL::ParseError::ParseError((uint64_t)exception, &v30, (uint64_t)v29, 109);
      }
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v28.__traits_, "@model_path", 0);
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v27 = *(std::string *)a3;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (*(_BYTE *)(v27.__r_.__value_.__r.__words[0] + v27.__r_.__value_.__l.__size_ - 1) != 47)
        {
          v16 = 1;
          goto LABEL_35;
        }
        v14 = --v27.__r_.__value_.__l.__size_;
      }
      else
      {
        if (v27.__r_.__value_.__s.__data_[HIBYTE(v27.__r_.__value_.__r.__words[2]) - 1] != 47)
        {
          v16 = 0;
          goto LABEL_35;
        }
        v14 = HIBYTE(v27.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&v27.__r_.__value_.__s + 23) = (*((_BYTE *)&v27.__r_.__value_.__s + 23) - 1) & 0x7F;
        v15 = &v27;
      }
      v15->__r_.__value_.__s.__data_[v14] = 0;
      v16 = (v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
LABEL_35:
      memset(&v26, 0, sizeof(v26));
      v17 = *(unsigned __int8 *)(a1 + 23);
      if ((v17 & 0x80u) == 0)
        v18.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
      else
        v18.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a1 + 8);
      if (v16)
        v20 = (std::string *)v27.__r_.__value_.__r.__words[0];
      else
        v20 = &v27;
      v19.__i_ = &v18.__i_[v17];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v26, v18, v19, &v28, (char *)v20, 0);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(std::string *)a1 = v26;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      cntrl = v28.__start_.__cntrl_;
      if (v28.__start_.__cntrl_)
      {
        p_shared_owners = &v28.__start_.__cntrl_->__shared_owners_;
        do
          v23 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v23 - 1, (unint64_t *)p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
          std::__shared_weak_count::__release_weak(cntrl);
        }
      }
      std::locale::~locale(&v28.__traits_.__loc_);
    }
  }
}

void sub_1E06A9554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v25 - 48);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (v24)
    __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Util::ReplaceModelPaths(std::string *__str, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string *v8;
  char v9;
  unsigned __int8 *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unsigned __int8 *v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  int v22;
  std::string *p_stra;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  std::string v31;
  std::string v32;
  std::string __stra;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*a2;
  v2 = a2 + 1;
  v3 = v4;
  if (v4 == v2)
    return;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  p_size = &__str->__r_.__value_.__l.__size_;
  if ((size & 0x80u) == 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  while (1)
  {
    v9 = *((_BYTE *)v3 + 55);
    if (v9 < 0)
      break;
    if (*((_BYTE *)v3 + 55))
      goto LABEL_11;
LABEL_32:
    v16 = (_QWORD *)v3[1];
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (_QWORD *)v3[2];
        v14 = *v17 == (_QWORD)v3;
        v3 = v17;
      }
      while (!v14);
    }
    v3 = v17;
    if (v17 == v2)
      return;
  }
  if (!v3[5])
    goto LABEL_32;
LABEL_11:
  if (v9 >= 0)
    v10 = (unsigned __int8 *)(v3 + 4);
  else
    v10 = (unsigned __int8 *)v3[4];
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v3 + 55);
  else
    v11 = v3[5];
  if (size >= v11)
    v12 = v11;
  else
    v12 = size;
  v13 = (unsigned __int8 *)v8 + v12;
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v19 = (std::string *)((char *)v8 + v12);
  }
  else
  {
    v18 = v8;
    v19 = (std::string *)((char *)v8 + v12);
    do
    {
      if (v18->__r_.__value_.__s.__data_[0] == *v10)
      {
        v20 = 1;
        while (v11 != v20)
        {
          if ((unsigned __int8 *)((char *)v18 + v20) == v13)
            goto LABEL_26;
          v21 = v18->__r_.__value_.__s.__data_[v20];
          v22 = v10[v20++];
          if (v21 != v22)
            goto LABEL_40;
        }
        v19 = v18;
      }
LABEL_40:
      v18 = (std::string *)((char *)v18 + 1);
    }
    while (v18 != (std::string *)v13);
  }
LABEL_26:
  v15 = v19 != (std::string *)v13 || v11 == 0;
  if (!v15 || v19 != v8)
    goto LABEL_32;
  std::string::basic_string(&__stra, __str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_stra = &__stra;
  else
    p_stra = (std::string *)__stra.__r_.__value_.__r.__words[0];
  if (p_stra->__r_.__value_.__s.__data_[0] == 47)
  {
    std::string::basic_string(&v32, &__stra, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__stra.__r_.__value_.__l.__data_);
    __stra = v32;
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "/");
  v24 = std::string::insert(&v31, 0, "@model_path");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &__stra;
  else
    v26 = (std::string *)__stra.__r_.__value_.__r.__words[0];
  if ((__stra.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = HIBYTE(__stra.__r_.__value_.__r.__words[2]);
  else
    v27 = __stra.__r_.__value_.__l.__size_;
  v28 = std::string::append(&v32, (const std::string::value_type *)v26, v27);
  v29 = v28->__r_.__value_.__r.__words[0];
  v34[0] = v28->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str->__r_.__value_.__l.__data_);
  __str->__r_.__value_.__r.__words[0] = v29;
  *p_size = v34[0];
  *(std::string::size_type *)((char *)p_size + 7) = *(_QWORD *)((char *)v34 + 7);
  *((_BYTE *)&__str->__r_.__value_.__s + 23) = v30;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
}

void sub_1E06A98AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::GetBaseAndPrepIntStringForParse(std::string *a1)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  std::string::size_type v5;
  std::string *v6;
  unsigned __int8 *size;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  std::string *v14;
  unsigned __int8 *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;

  v2 = (unsigned __int8 *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v3 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a1->__r_.__value_.__l.__size_)
      v5 = *(unsigned __int8 *)a1->__r_.__value_.__l.__data_ == 45;
    else
      v5 = 0;
    v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
    size = (unsigned __int8 *)a1->__r_.__value_.__l.__size_;
  }
  else
  {
    if (*((_BYTE *)&a1->__r_.__value_.__s + 23))
      v4 = a1->__r_.__value_.__s.__data_[0] == 45;
    else
      v4 = 0;
    v5 = v4;
    v6 = a1;
    size = (unsigned __int8 *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  if ((unint64_t)size >= v5)
  {
    v8 = (char *)v6 + v5;
    v9 = (char *)&size[(_QWORD)v6];
    v10 = (uint64_t)&size[-v5];
    if (v10 >= 2)
    {
      do
      {
        v11 = (char *)memchr(v8, 48, v10 - 1);
        if (!v11)
          break;
        if (*(_WORD *)v11 == 30768)
        {
          if (v11 != v9 && v11 - (char *)v6 == v5)
          {
LABEL_36:
            std::string::erase(a1, v5, 2uLL);
            return 16;
          }
          break;
        }
        v8 = v11 + 1;
        v10 = v9 - v8;
      }
      while (v9 - v8 >= 2);
    }
  }
  v12 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
  v13 = (unsigned __int8 *)a1->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v3 & 0x80u) == 0)
    v15 = v2;
  else
    v15 = (unsigned __int8 *)a1->__r_.__value_.__l.__size_;
  if ((unint64_t)v15 >= v5)
  {
    v16 = (char *)v14 + v5;
    v17 = (char *)&v15[(_QWORD)v14];
    v18 = (uint64_t)&v15[-v5];
    if ((uint64_t)&v15[-v5] >= 2)
    {
      v19 = &v15[-v5];
      v20 = (char *)v14 + v5;
      do
      {
        v21 = (char *)memchr(v20, 48, (size_t)(v19 - 1));
        if (!v21)
          break;
        if (*(_WORD *)v21 == 22576)
        {
          if (v21 != v17 && v21 - (char *)v14 == v5)
            goto LABEL_36;
          break;
        }
        v20 = v21 + 1;
        v19 = (unsigned __int8 *)(v17 - v20);
      }
      while (v17 - v20 >= 2);
      if (v18 < 2)
        goto LABEL_48;
      v23 = v18;
      v24 = (char *)v14 + v5;
      while (1)
      {
        v25 = (char *)memchr(v24, 48, v23 - 1);
        if (!v25)
          goto LABEL_45;
        if (*(_WORD *)v25 == 25136)
          break;
        v24 = v25 + 1;
        v23 = v17 - v24;
        if (v17 - v24 < 2)
          goto LABEL_45;
      }
      if (v25 != v17 && v25 - (char *)v14 == v5)
      {
LABEL_60:
        v22 = 2;
        std::string::erase(a1, v5, 2uLL);
        return v22;
      }
LABEL_45:
      do
      {
        v26 = (char *)memchr(v16, 48, v18 - 1);
        if (!v26)
          break;
        if (*(_WORD *)v26 == 16944)
        {
          if (v26 == v17 || v26 - (char *)v14 != v5)
            break;
          goto LABEL_60;
        }
        v16 = v26 + 1;
        v18 = v17 - (v26 + 1);
      }
      while (v18 >= 2);
    }
  }
LABEL_48:
  if ((v3 & 0x80) == 0)
  {
    if (v3)
    {
      v27 = v12;
      goto LABEL_53;
    }
    return 10;
  }
  if (!v13)
    return 10;
  v27 = *v12;
LABEL_53:
  if (v27 == 48)
    return 8;
  else
    return 10;
}

float MIL::Util::stof(std::string *a1, unint64_t a2, uint64_t a3)
{
  std::string::size_type v6;
  const char *v7;
  const char *v8;
  unint64_t size;
  const char *v10;
  int v11;
  int v12;
  std::string *v13;
  float v14;
  char *v15;
  char *v16;
  std::string::size_type v17;
  std::string *v18;
  BOOL v19;
  char v20;
  char v21;
  void *v23;
  void *exception;
  void *v25[3];
  __int128 v26;
  void *v27[3];
  __int128 v28;
  char *v29;
  std::string v30;

  *__error() = 0;
  v6 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6 <= 1 || a1->__r_.__value_.__s.__data_[v6 - 1] != 102)
    {
      v30.__r_.__value_.__r.__words[0] = 0;
      v10 = (const char *)a1;
      goto LABEL_21;
    }
    v7 = (const char *)a1->__r_.__value_.__r.__words[0];
    v8 = (const char *)a1;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    goto LABEL_8;
  }
  v8 = (const char *)a1->__r_.__value_.__r.__words[0];
  size = a1->__r_.__value_.__l.__size_;
  if (size > 1)
  {
    v7 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (v8[size - 1] == 102)
    {
LABEL_8:
      v11 = v8[size - 2];
      if (v11 < 0)
      {
        v8 = v7;
      }
      else
      {
        v12 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v11 + 60);
        v8 = v7;
        if ((v12 & 0x400) != 0)
        {
          if ((v6 & 0x80u) != 0)
            v6 = a1->__r_.__value_.__l.__size_;
          std::string::basic_string(&v30, a1, 0, v6 - 1, (std::allocator<char> *)&v29);
          v29 = 0;
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v30;
          else
            v13 = (std::string *)v30.__r_.__value_.__r.__words[0];
          v14 = strtof_l((const char *)v13, &v29, 0);
          v15 = v29;
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (char *)(v30.__r_.__value_.__r.__words[0] + v30.__r_.__value_.__l.__size_);
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          else
          {
            v16 = (char *)&v30 + HIBYTE(v30.__r_.__value_.__r.__words[2]);
          }
          v19 = v15 == v16;
          goto LABEL_27;
        }
      }
    }
  }
  v30.__r_.__value_.__r.__words[0] = 0;
  if ((v6 & 0x80u) == 0)
    v10 = (const char *)a1;
  else
    v10 = v8;
LABEL_21:
  v14 = strtof_l(v10, &v30.__r_.__value_.__l.__data_, 0);
  v17 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v17 & 0x80u) == 0)
    v18 = a1;
  else
    v18 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v17 & 0x80u) != 0)
    v17 = a1->__r_.__value_.__l.__size_;
  v19 = v30.__r_.__value_.__r.__words[0] == (_QWORD)v18 + v17;
LABEL_27:
  v20 = v19;
  if (*__error() == 34 && (v14 > 1.1755e-38 || v14 == 0.0 || v14 < -1.1755e-38))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(a2, a3, &v30);
    v28 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is out of range for type float", (const void **)&a1->__r_.__value_.__l.__data_, v27);
    MIL::ParseError::ParseError((uint64_t)exception, &v28, (uint64_t)v27, 400);
  }
  if (!*__error())
  {
    if ((v20 & 1) != 0)
      return v14;
LABEL_41:
    v23 = __cxa_allocate_exception(0x48uLL);
    MIL::TextLocationFromScannerLocation(a2, a3, &v30);
    v26 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not a valid float", (const void **)&a1->__r_.__value_.__l.__data_, v25);
    MIL::ParseError::ParseError((uint64_t)v23, &v26, (uint64_t)v25, 203);
  }
  if (*__error() == 34)
    v21 = v20;
  else
    v21 = 0;
  if ((v21 & 1) == 0)
    goto LABEL_41;
  return v14;
}

