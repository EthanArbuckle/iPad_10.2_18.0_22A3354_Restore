uint64_t OTSVGTableRelease(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](result);
    JUMPOUT(0x1BCCCA1B4);
  }
  return result;
}

_QWORD *SVG::ViewBox::parseViewBox@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _QWORD *result;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;

  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  v7 = v3;
  v8 = v3;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  result = SVG::consumeAlone<std::array<double,4ul>>(a1, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consume4Numbers, (uint64_t)&v7);
  v5 = v9;
  if ((_BYTE)v9)
  {
    v6 = v8;
    *(_OWORD *)a2 = v7;
    *(_OWORD *)(a2 + 16) = v6;
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v5;
  return result;
}

_QWORD *SVG::consumeAlone<std::array<double,4ul>>@<X0>(uint64_t a1@<X0>, _QWORD *(*a2)(__int128 *__return_ptr, uint64_t, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  _QWORD *result;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;

  v6 = 0;
  do
  {
    v7 = v6;
    v6 = SVG::consumeWsp((uint64_t *)a1, v6);
  }
  while (v8);
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v15 = v9;
  v16 = v9;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  result = a2(&v15, a1, v7);
  if (!(_BYTE)v18)
    goto LABEL_10;
  result = (_QWORD *)v17;
  do
  {
    v11 = result;
    result = (_QWORD *)SVG::consumeWsp((uint64_t *)a1, (unint64_t)result);
  }
  while (v12);
  v13 = (_QWORD *)*(unsigned __int8 *)(a1 + 23);
  if ((char)v13 < 0)
    v13 = *(_QWORD **)(a1 + 8);
  if (v11 == v13)
  {
    v14 = v16;
    *(_OWORD *)a3 = v15;
    *(_OWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
LABEL_10:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

void SVG::consume4Numbers(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  v6 = 0;
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  v14 = v7;
  v15 = v7;
  while (1)
  {
    if (v6)
    {
      v8 = SVG::consumeCommaWsp(a1, a2);
      if (v9)
        a2 = v8;
    }
    v11 = -1;
    v12 = 0xAAAAAAAAAAAAAAAALL;
    v13 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeNumber((uint64_t)a1, a2, (uint64_t)&v11);
    if (!(_BYTE)v13)
      break;
    *(_QWORD *)((char *)&v14 + v6) = v11;
    a2 = v12;
    v6 += 8;
    if (v6 == 32)
    {
      v10 = v15;
      *(_OWORD *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v10;
      *(_QWORD *)(a3 + 32) = a2;
      *(_BYTE *)(a3 + 40) = 1;
      return;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 40) = 0;
}

unint64_t SVG::PreserveAspectRatio::parsePreserveAspectRatio(uint64_t a1)
{
  return SVG::consumeAlone<SVG::PreserveAspectRatio>(a1, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumePreserveAspectRatio);
}

unint64_t SVG::consumeAlone<SVG::PreserveAspectRatio>(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t, unint64_t))
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[3];

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a1, v4);
  }
  while (v6);
  memset(v14, 170, sizeof(v14));
  a2(v14, a1, v5);
  if (!LOBYTE(v14[2]))
    goto LABEL_10;
  v7 = v14[1];
  do
  {
    v8 = v7;
    v7 = SVG::consumeWsp((uint64_t *)a1, v7);
  }
  while (v9);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  if (v8 == v10)
  {
    v11 = v14[0] & 0xFFFFFFFFFFFFFF00;
    v12 = LOBYTE(v14[0]);
  }
  else
  {
LABEL_10:
    v11 = 0;
    v12 = 0;
  }
  return v12 | v11;
}

unint64_t SVG::consumePreserveAspectRatio@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  char v37;
  char v38;

  v3 = a2;
  v6 = SVG::consumeString<6ul>((uint64_t)"defer", (uint64_t)a1, a2);
  if (v7)
  {
    result = SVG::consumeWsp(a1, v6);
    if (!v9)
      goto LABEL_29;
    do
    {
      v3 = result;
      result = SVG::consumeWsp(a1, result);
    }
    while (v10);
  }
  v11 = SVG::consumeString<5ul>((uint64_t)"none", (uint64_t)a1, v3);
  if (!v12)
  {
    v15 = SVG::consumeString<9ul>((uint64_t)"xMinYMin", (uint64_t)a1, v3);
    if (v16)
    {
      v13 = v15;
      v14 = 1;
      goto LABEL_24;
    }
    v17 = SVG::consumeString<9ul>((uint64_t)"xMidYMin", (uint64_t)a1, v3);
    if (v18)
    {
      v13 = v17;
      v14 = 2;
      goto LABEL_24;
    }
    v19 = SVG::consumeString<9ul>((uint64_t)"xMaxYMin", (uint64_t)a1, v3);
    if (v20)
    {
      v13 = v19;
      v14 = 3;
      goto LABEL_24;
    }
    v21 = SVG::consumeString<9ul>((uint64_t)"xMinYMid", (uint64_t)a1, v3);
    if (v22)
    {
      v13 = v21;
      v14 = 4;
      goto LABEL_24;
    }
    v23 = SVG::consumeString<9ul>((uint64_t)"xMidYMid", (uint64_t)a1, v3);
    if (v24)
    {
      v13 = v23;
      v14 = 5;
      goto LABEL_24;
    }
    v25 = SVG::consumeString<9ul>((uint64_t)"xMaxYMid", (uint64_t)a1, v3);
    if (v26)
    {
      v13 = v25;
      v14 = 6;
      goto LABEL_24;
    }
    v27 = SVG::consumeString<9ul>((uint64_t)"xMinYMax", (uint64_t)a1, v3);
    if (v28)
    {
      v13 = v27;
      v14 = 7;
      goto LABEL_24;
    }
    v29 = SVG::consumeString<9ul>((uint64_t)"xMidYMax", (uint64_t)a1, v3);
    if (v30)
    {
      v13 = v29;
      v14 = 8;
      goto LABEL_24;
    }
    result = SVG::consumeString<9ul>((uint64_t)"xMaxYMax", (uint64_t)a1, v3);
    if (v31)
    {
      v13 = result;
      v14 = 9;
      goto LABEL_24;
    }
LABEL_29:
    v37 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_34;
  }
  v13 = v11;
  v14 = 0;
LABEL_24:
  result = SVG::consumeWsp(a1, v13);
  if (v32)
  {
    do
    {
      v33 = result;
      result = SVG::consumeWsp(a1, result);
    }
    while (v34);
    result = SVG::consumeString<5ul>((uint64_t)"meet", (uint64_t)a1, v33);
    if (v35)
    {
      v36 = 0;
      v13 = result;
    }
    else
    {
      result = SVG::consumeString<6ul>((uint64_t)"slice", (uint64_t)a1, v33);
      if (v38)
        v13 = result;
      v36 = (unint64_t)(v38 != 0) << 32;
    }
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)a3 = v36 | v14;
  *(_QWORD *)(a3 + 8) = v13;
  v37 = 1;
LABEL_34:
  *(_BYTE *)(a3 + 16) = v37;
  return result;
}

CGAffineTransform *SVG::computeViewBoxTransform@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  __int128 v20;
  char v26;
  double v29;
  double v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGRect v34;
  CGRect v35;

  if (a5 == 0.0 || a6 == 0.0)
  {
LABEL_53:
    v26 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v11 = a9 / a5;
    v12 = a10 / a6;
    switch((int)result)
    {
      case 0:
        v13 = 0.0;
        goto LABEL_37;
      case 1:
        v13 = 0.0;
        if (HIDWORD(result) == 1)
        {
          v15 = v11 < v12;
        }
        else
        {
          if (HIDWORD(result))
          {
            v11 = NAN;
            v12 = NAN;
            goto LABEL_37;
          }
          v15 = v12 < v11;
        }
        if (v15)
          v11 = a10 / a6;
        v12 = v11;
LABEL_37:
        v14 = 0.0;
        goto LABEL_50;
      case 2:
        v14 = 0.5;
        goto LABEL_11;
      case 3:
        v14 = 1.0;
LABEL_11:
        v13 = 0.0;
        goto LABEL_21;
      case 4:
        v14 = 0.0;
        goto LABEL_17;
      case 5:
        v13 = 0.5;
        if (HIDWORD(result) == 1)
        {
          v16 = v11 < v12;
        }
        else
        {
          if (HIDWORD(result))
          {
            v11 = NAN;
            v12 = NAN;
            goto LABEL_43;
          }
          v16 = v12 < v11;
        }
        if (v16)
          v11 = a10 / a6;
        v12 = v11;
LABEL_43:
        v14 = 0.5;
        goto LABEL_50;
      case 6:
        v14 = 1.0;
LABEL_17:
        v13 = 0.5;
        goto LABEL_21;
      case 7:
        v14 = 0.0;
        goto LABEL_20;
      case 8:
        v14 = 0.5;
LABEL_20:
        v13 = 1.0;
LABEL_21:
        if (HIDWORD(result) == 1)
        {
          v17 = v11 < v12;
        }
        else
        {
          if (HIDWORD(result))
          {
            v11 = NAN;
            v12 = NAN;
            goto LABEL_50;
          }
          v17 = v12 < v11;
        }
        if (v17)
          v11 = a10 / a6;
        v12 = v11;
        goto LABEL_50;
      case 9:
        v13 = 1.0;
        if (HIDWORD(result) == 1)
        {
          v18 = v11 < v12;
        }
        else
        {
          if (HIDWORD(result))
          {
            v11 = NAN;
            v12 = NAN;
            goto LABEL_49;
          }
          v18 = v12 < v11;
        }
        if (v18)
          v11 = a10 / a6;
        v12 = v11;
LABEL_49:
        v14 = 1.0;
LABEL_50:
        if (v11 == 0.0 || v12 == 0.0)
          goto LABEL_53;
        *(_QWORD *)&v20 = -1;
        *((_QWORD *)&v20 + 1) = -1;
        *(_OWORD *)&v33.c = v20;
        *(_OWORD *)&v33.tx = v20;
        *(_OWORD *)&v33.a = v20;
        v29 = v11;
        v30 = v12;
        CGAffineTransformMakeScale(&v33, v11, v12);
        v32 = v33;
        v34.origin.x = a3;
        v34.origin.y = a4;
        v34.size.width = a5;
        v34.size.height = a6;
        v35 = CGRectApplyAffineTransform(v34, &v32);
        v31 = v33;
        result = CGAffineTransformTranslate((CGAffineTransform *)a2, &v31, (a7 + v14 * a9 - (v35.origin.x + v14 * v35.size.width)) / v29, (a8 + v13 * a10 - (v35.origin.y + v13 * v35.size.height)) / v30);
        v26 = 1;
        break;
      default:
        v13 = NAN;
        v14 = NAN;
        goto LABEL_50;
    }
  }
  *(_BYTE *)(a2 + 48) = v26;
  return result;
}

unint64_t SVG::consumeString<6ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 5;
  if (v3 >= a3 + 5)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 5)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t SVG::consumeString<5ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 4;
  if (v3 >= a3 + 4)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 4)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t SVG::consumeString<9ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 8;
  if (v3 >= a3 + 8)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 8)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

uint64_t SVG::Presentation::defaultPresentation@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int64x2_t v4;
  char v5;
  _BYTE v6[8];
  _QWORD v7[4];
  unsigned int v8;
  _BYTE v9[8];
  _BYTE v10[8];
  unsigned int v11;
  char v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memcpy((void *)a1, &unk_1B9B90A68, 0x238uLL);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 48) = 2;
  v9[0] = 0;
  v10[0] = 0;
  v11 = 2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>(a1 + 64, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137CC0 + v11))(v6, v9);
  *(_QWORD *)(a1 + 88) = 0x200000000;
  *(_QWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  *(_OWORD *)(a1 + 116) = xmmword_1B9B90A40;
  *(_QWORD *)(a1 + 132) = 0x200000000;
  v7[0] = 2852126720;
  v8 = 2;
  v10[0] = 0;
  v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>((uint64_t)v10, (uint64_t)v7);
  v15 = 2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(a1 + 152, (uint64_t)v9);
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))*(&off_1E7137CF0 + v15))(&v5, v9);
  v15 = -1;
  if (v8 != -1)
    ((void (*)(char *, _QWORD *))*(&off_1E7137D20 + v8))(&v5, v7);
  *(_QWORD *)(a1 + 208) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 216) = 2;
  v4 = vdupq_n_s64(0x200000000uLL);
  *(int64x2_t *)(a1 + 224) = v4;
  v9[0] = 0;
  v10[0] = 0;
  v11 = 2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>(a1 + 248, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137CC0 + v11))(v6, v9);
  *(_QWORD *)(a1 + 272) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 280) = 2;
  *(int64x2_t *)(a1 + 288) = v4;
  *(_QWORD *)(a1 + 308) = 2852126720;
  *(_BYTE *)(a1 + 316) = 1;
  *(_DWORD *)(a1 + 320) = 2;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 336) = 2;
  LODWORD(v7[0]) = 0;
  v8 = 0;
  v10[0] = 0;
  v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>((uint64_t)v10, (uint64_t)v7);
  v15 = 2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(a1 + 352, (uint64_t)v9);
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))*(&off_1E7137CF0 + v15))(&v5, v9);
  v15 = -1;
  if (v8 != -1)
    ((void (*)(char *, _QWORD *))*(&off_1E7137D20 + v8))(&v5, v7);
  v9[0] = 0;
  v12 = 0;
  v13 = 2;
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1>>(a1 + 416, (uint64_t)v9);
  if (v13 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))*(&off_1E7137D98 + v13))(v6, v9);
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 2;
  *(_QWORD *)(a1 + 488) = 0x200000000;
  *(_QWORD *)(a1 + 496) = 0x200000000;
  *(_QWORD *)(a1 + 504) = 0x4010000000000000;
  *(_DWORD *)(a1 + 512) = 2;
  *(_QWORD *)(a1 + 520) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 528) = 2;
  *(_QWORD *)(a1 + 544) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 560) = 2;
  *(_QWORD *)(a1 + 568) = 0x200000000;
  return result;
}

void SVG::Presentation::inherit(SVG::Presentation *this@<X0>, const SVG::Presentation *a2@<X1>, const SVG::Presentation *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  const SVG::Presentation *v19;
  __int128 v20;
  int v21;
  const SVG::Presentation *v22;
  int v23;
  const SVG::Presentation *v24;
  int v25;
  const SVG::Presentation *v26;
  int v27;
  const SVG::Presentation *v28;
  int v29;
  const SVG::Presentation *v30;
  int v31;
  const SVG::Presentation *v32;
  int v33;
  __int128 v34;

  memcpy(a4, &unk_1B9B90A68, 0x240uLL);
  v9 = *((_OWORD *)this + 1);
  *a4 = *(_OWORD *)this;
  a4[1] = v9;
  a4[2] = *((_OWORD *)this + 2);
  *((_QWORD *)a4 + 6) = *((_QWORD *)this + 6);
  *((_BYTE *)a4 + 64) = 0;
  *((_DWORD *)a4 + 20) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a4 + 4), (uint64_t)this + 64);
  *(_OWORD *)((char *)a4 + 88) = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)((char *)a4 + 104) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)((char *)a4 + 120) = *(_OWORD *)((char *)this + 120);
  *((_DWORD *)a4 + 34) = *((_DWORD *)this + 34);
  *((_BYTE *)a4 + 152) = 0;
  *((_DWORD *)a4 + 50) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a4 + 152, (uint64_t)this + 152);
  *((_BYTE *)a4 + 248) = 0;
  v10 = *((_OWORD *)this + 14);
  a4[13] = *((_OWORD *)this + 13);
  a4[14] = v10;
  *((_DWORD *)a4 + 66) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a4 + 248, (uint64_t)this + 248);
  v11 = *((_OWORD *)this + 17);
  a4[18] = *((_OWORD *)this + 18);
  v12 = *((_OWORD *)this + 20);
  a4[19] = *((_OWORD *)this + 19);
  a4[20] = v12;
  *((_QWORD *)a4 + 42) = *((_QWORD *)this + 42);
  a4[17] = v11;
  *((_BYTE *)a4 + 352) = 0;
  *((_DWORD *)a4 + 100) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a4 + 22), (uint64_t)this + 352);
  *((_BYTE *)a4 + 416) = 0;
  *((_DWORD *)a4 + 112) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a4 + 26), (uint64_t)this + 416);
  v13 = *(_OWORD *)((char *)this + 536);
  *(_OWORD *)((char *)a4 + 520) = *(_OWORD *)((char *)this + 520);
  *(_OWORD *)((char *)a4 + 536) = v13;
  *(_OWORD *)((char *)a4 + 552) = *(_OWORD *)((char *)this + 552);
  *((_QWORD *)a4 + 71) = *((_QWORD *)this + 71);
  v14 = *(_OWORD *)((char *)this + 472);
  *(_OWORD *)((char *)a4 + 456) = *(_OWORD *)((char *)this + 456);
  *(_OWORD *)((char *)a4 + 472) = v14;
  v15 = *(_OWORD *)((char *)this + 504);
  *(_OWORD *)((char *)a4 + 488) = *(_OWORD *)((char *)this + 488);
  *(_OWORD *)((char *)a4 + 504) = v15;
  if (*((_DWORD *)this + 23) <= 1u)
    *((_QWORD *)a4 + 11) = *((_QWORD *)a2 + 11);
  if (*((_DWORD *)this + 28) <= 1u)
  {
    a4[6] = *((_OWORD *)a2 + 6);
    *((_DWORD *)a4 + 28) = *((_DWORD *)a2 + 28);
  }
  if (*((_DWORD *)this + 30) <= 1u)
    *(_QWORD *)((char *)a4 + 116) = *(_QWORD *)((char *)a2 + 116);
  if (*((_DWORD *)this + 32) <= 1u)
    *(_QWORD *)((char *)a4 + 124) = *(_QWORD *)((char *)a2 + 124);
  if (*((_DWORD *)this + 50) <= 1u)
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a4 + 152, (uint64_t)a2 + 152);
  if (*((_DWORD *)this + 54) <= 1u)
    a4[13] = *((_OWORD *)a2 + 13);
  if (*((_DWORD *)this + 57) <= 1u)
    *((_QWORD *)a4 + 28) = *((_QWORD *)a2 + 28);
  if (*((_DWORD *)this + 59) <= 1u)
    *((_QWORD *)a4 + 29) = *((_QWORD *)a2 + 29);
  if (*((_DWORD *)this + 75) <= 1u)
    *((_QWORD *)a4 + 37) = *((_QWORD *)a2 + 37);
  if (*((_DWORD *)this + 100) <= 1u)
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a4 + 22), (uint64_t)a2 + 352);
  if (*((_DWORD *)this + 112) <= 1u)
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a4 + 26), (uint64_t)a2 + 416);
  if (*((_DWORD *)this + 120) <= 1u)
  {
    v16 = *(_OWORD *)((char *)a2 + 472);
    *(_OWORD *)((char *)a4 + 456) = *(_OWORD *)((char *)a2 + 456);
    *(_OWORD *)((char *)a4 + 472) = v16;
  }
  if (*((_DWORD *)this + 123) <= 1u)
    *((_QWORD *)a4 + 61) = *((_QWORD *)a2 + 61);
  if (*((_DWORD *)this + 125) <= 1u)
    *((_QWORD *)a4 + 62) = *((_QWORD *)a2 + 62);
  if (*((_DWORD *)this + 128) <= 1u)
    *(_OWORD *)((char *)a4 + 504) = *(_OWORD *)((char *)a2 + 504);
  if (*((_DWORD *)this + 132) <= 1u)
    *(_OWORD *)((char *)a4 + 520) = *(_OWORD *)((char *)a2 + 520);
  if (*((_DWORD *)this + 140) <= 1u)
  {
    v17 = *(_OWORD *)((char *)a2 + 552);
    *(_OWORD *)((char *)a4 + 536) = *(_OWORD *)((char *)a2 + 536);
    *(_OWORD *)((char *)a4 + 552) = v17;
  }
  if (*((_DWORD *)this + 143) <= 1u)
    *((_QWORD *)a4 + 71) = *((_QWORD *)a2 + 71);
  v18 = *((_DWORD *)this + 12);
  v19 = a3;
  if (v18)
  {
    if (v18 != 1)
      goto LABEL_41;
    v19 = a2;
  }
  v20 = *((_OWORD *)v19 + 1);
  *a4 = *(_OWORD *)v19;
  a4[1] = v20;
  a4[2] = *((_OWORD *)v19 + 2);
  *((_QWORD *)a4 + 6) = *((_QWORD *)v19 + 6);
LABEL_41:
  v21 = *((_DWORD *)this + 20);
  v22 = a3;
  if (v21)
  {
    if (v21 != 1)
      goto LABEL_45;
    v22 = a2;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a4 + 4), (uint64_t)v22 + 64);
LABEL_45:
  v23 = *((_DWORD *)this + 34);
  v24 = a3;
  if (v23)
  {
    if (v23 != 1)
      goto LABEL_49;
    v24 = a2;
  }
  *(_QWORD *)((char *)a4 + 132) = *(_QWORD *)((char *)v24 + 132);
LABEL_49:
  v25 = *((_DWORD *)this + 66);
  v26 = a3;
  if (v25)
  {
    if (v25 != 1)
      goto LABEL_53;
    v26 = a2;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a4 + 248, (uint64_t)v26 + 248);
LABEL_53:
  v27 = *((_DWORD *)this + 70);
  v28 = a3;
  if (v27)
  {
    if (v27 != 1)
      goto LABEL_57;
    v28 = a2;
  }
  a4[17] = *((_OWORD *)v28 + 17);
LABEL_57:
  v29 = *((_DWORD *)this + 73);
  v30 = a3;
  if (v29)
  {
    if (v29 != 1)
      goto LABEL_61;
    v30 = a2;
  }
  *((_QWORD *)a4 + 36) = *((_QWORD *)v30 + 36);
LABEL_61:
  v31 = *((_DWORD *)this + 80);
  v32 = a3;
  if (v31)
  {
    if (v31 != 1)
      goto LABEL_65;
    v32 = a2;
  }
  a4[19] = *((_OWORD *)v32 + 19);
  *((_DWORD *)a4 + 80) = *((_DWORD *)v32 + 80);
LABEL_65:
  v33 = *((_DWORD *)this + 84);
  if (v33)
  {
    if (v33 != 1)
      goto LABEL_69;
    a3 = a2;
  }
  *(_OWORD *)((char *)a4 + 328) = *(_OWORD *)((char *)a3 + 328);
LABEL_69:
  if (*((_DWORD *)a4 + 28) != 2)
    goto LABEL_76;
  SVG::resolveCurrentColor((uint64_t)(a4 + 9), *(const void **)((char *)a4 + 100), *((_BYTE *)a4 + 108));
  if (*((_DWORD *)a4 + 28) != 2)
    goto LABEL_76;
  SVG::resolveCurrentColor((uint64_t)a4 + 344, *(const void **)((char *)a4 + 100), *((_BYTE *)a4 + 108));
  if (*((_DWORD *)a4 + 80) != 2)
    goto LABEL_76;
  if (*((_BYTE *)a4 + 316))
    return;
  if (*((_DWORD *)a4 + 28) != 2)
LABEL_76:
    std::__throw_bad_variant_access[abi:nn180100]();
  *(_QWORD *)((char *)&v34 + 4) = *(_QWORD *)((char *)a4 + 100);
  HIDWORD(v34) = *((_DWORD *)a4 + 27);
  a4[19] = v34;
  *((_DWORD *)a4 + 80) = 2;
}

void SVG::resolveCurrentColor(uint64_t a1, const void *a2, char a3)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  const void *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  const void *v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[32];
  int v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) != 2)
    std::__throw_bad_variant_access[abi:nn180100]();
  v4 = a1 + 8;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 3)
  {
    if (*(_BYTE *)(a1 + 40))
      v6 = *(_DWORD *)(a1 + 36) == 1;
    else
      v6 = 0;
    if (v6)
    {
      v7 = *(const void **)(a1 + 16);
      if (v7)
      {
        CFRetain(*(CFTypeRef *)(a1 + 16));
        v8 = *(_BYTE *)(a1 + 41);
        v9 = *(_BYTE *)(a1 + 42);
        v10 = *(_BYTE *)(a1 + 43);
        v12 = v7;
        CFRetain(v7);
      }
      else
      {
        v8 = *(_BYTE *)(a1 + 41);
        v9 = *(_BYTE *)(a1 + 42);
        v10 = *(_BYTE *)(a1 + 43);
        v12 = 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 3;
      v16 = 1;
      v17 = v8;
      v18 = v9;
      v19 = v10;
      v20 = 3;
      v22[0] = 0;
      v23 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>((uint64_t)v22, (uint64_t)&v12);
      v24 = 2;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(v4, (uint64_t)&v21);
      if (v24 != -1)
        ((void (*)(char *, uint64_t *))*(&off_1E7137CF0 + v24))(&v11, &v21);
      v24 = -1;
      if (v20 != -1)
        ((void (*)(char *, const void **))*(&off_1E7137D20 + v20))(&v11, &v12);
      if (v7)
        CFRelease(v7);
    }
  }
  else if (v5 == 1)
  {
    if (a3)
    {
      v12 = a2;
      v20 = 2;
    }
    else
    {
      LODWORD(v12) = 0;
      v20 = 4;
    }
    v22[0] = 0;
    v23 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>((uint64_t)v22, (uint64_t)&v12);
    v24 = 2;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(v4, (uint64_t)&v21);
    if (v24 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7137CF0 + v24))(&v11, &v21);
    v24 = -1;
    if (v20 != -1)
      ((void (*)(char *, const void **))*(&off_1E7137D20 + v20))(&v11, &v12);
  }
}

uint64_t SVG::Presentation::specifiedInherit@<X0>(SVG::Presentation *this@<X0>, const SVG::Presentation *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  memcpy(a3, &unk_1B9B90A68, 0x240uLL);
  v7 = *((_OWORD *)this + 1);
  *a3 = *(_OWORD *)this;
  a3[1] = v7;
  a3[2] = *((_OWORD *)this + 2);
  *((_QWORD *)a3 + 6) = *((_QWORD *)this + 6);
  *((_BYTE *)a3 + 64) = 0;
  *((_DWORD *)a3 + 20) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 4), (uint64_t)this + 64);
  *(_OWORD *)((char *)a3 + 88) = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)((char *)a3 + 120) = *(_OWORD *)((char *)this + 120);
  *((_DWORD *)a3 + 34) = *((_DWORD *)this + 34);
  *((_BYTE *)a3 + 152) = 0;
  *((_DWORD *)a3 + 50) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a3 + 152, (uint64_t)this + 152);
  *((_BYTE *)a3 + 248) = 0;
  v8 = *((_OWORD *)this + 14);
  a3[13] = *((_OWORD *)this + 13);
  a3[14] = v8;
  *((_DWORD *)a3 + 66) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a3 + 248, (uint64_t)this + 248);
  v9 = *((_OWORD *)this + 17);
  a3[18] = *((_OWORD *)this + 18);
  v10 = *((_OWORD *)this + 20);
  a3[19] = *((_OWORD *)this + 19);
  a3[20] = v10;
  *((_QWORD *)a3 + 42) = *((_QWORD *)this + 42);
  a3[17] = v9;
  *((_BYTE *)a3 + 352) = 0;
  *((_DWORD *)a3 + 100) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 22), (uint64_t)this + 352);
  *((_BYTE *)a3 + 416) = 0;
  *((_DWORD *)a3 + 112) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 26), (uint64_t)this + 416);
  v12 = *(_OWORD *)((char *)this + 536);
  *(_OWORD *)((char *)a3 + 520) = *(_OWORD *)((char *)this + 520);
  *(_OWORD *)((char *)a3 + 536) = v12;
  *(_OWORD *)((char *)a3 + 552) = *(_OWORD *)((char *)this + 552);
  *((_QWORD *)a3 + 71) = *((_QWORD *)this + 71);
  v13 = *(_OWORD *)((char *)this + 472);
  *(_OWORD *)((char *)a3 + 456) = *(_OWORD *)((char *)this + 456);
  *(_OWORD *)((char *)a3 + 472) = v13;
  v14 = *(_OWORD *)((char *)this + 504);
  *(_OWORD *)((char *)a3 + 488) = *(_OWORD *)((char *)this + 488);
  *(_OWORD *)((char *)a3 + 504) = v14;
  if (!*((_DWORD *)this + 12) && *((_DWORD *)a2 + 12))
  {
    v15 = *((_OWORD *)a2 + 1);
    *a3 = *(_OWORD *)a2;
    a3[1] = v15;
    a3[2] = *((_OWORD *)a2 + 2);
    *((_QWORD *)a3 + 6) = *((_QWORD *)a2 + 6);
  }
  if (!*((_DWORD *)this + 20) && *((_DWORD *)a2 + 20))
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 4), (uint64_t)a2 + 64);
  if (!*((_DWORD *)this + 23) && *((_DWORD *)a2 + 23))
    *((_QWORD *)a3 + 11) = *((_QWORD *)a2 + 11);
  if (!*((_DWORD *)this + 28) && *((_DWORD *)a2 + 28))
  {
    a3[6] = *((_OWORD *)a2 + 6);
    *((_DWORD *)a3 + 28) = *((_DWORD *)a2 + 28);
  }
  if (!*((_DWORD *)this + 30) && *((_DWORD *)a2 + 30))
    *(_QWORD *)((char *)a3 + 116) = *(_QWORD *)((char *)a2 + 116);
  if (!*((_DWORD *)this + 32) && *((_DWORD *)a2 + 32))
    *(_QWORD *)((char *)a3 + 124) = *(_QWORD *)((char *)a2 + 124);
  if (!*((_DWORD *)this + 34) && *((_DWORD *)a2 + 34))
    *(_QWORD *)((char *)a3 + 132) = *(_QWORD *)((char *)a2 + 132);
  if (!*((_DWORD *)this + 50) && *((_DWORD *)a2 + 50))
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a3 + 152, (uint64_t)a2 + 152);
  if (!*((_DWORD *)this + 54) && *((_DWORD *)a2 + 54))
    a3[13] = *((_OWORD *)a2 + 13);
  if (!*((_DWORD *)this + 57) && *((_DWORD *)a2 + 57))
    *((_QWORD *)a3 + 28) = *((_QWORD *)a2 + 28);
  if (!*((_DWORD *)this + 59) && *((_DWORD *)a2 + 59))
    *((_QWORD *)a3 + 29) = *((_QWORD *)a2 + 29);
  if (!*((_DWORD *)this + 66) && *((_DWORD *)a2 + 66))
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)a3 + 248, (uint64_t)a2 + 248);
  if (!*((_DWORD *)this + 70) && *((_DWORD *)a2 + 70))
    a3[17] = *((_OWORD *)a2 + 17);
  if (!*((_DWORD *)this + 73) && *((_DWORD *)a2 + 73))
    *((_QWORD *)a3 + 36) = *((_QWORD *)a2 + 36);
  if (!*((_DWORD *)this + 75) && *((_DWORD *)a2 + 75))
    *((_QWORD *)a3 + 37) = *((_QWORD *)a2 + 37);
  if (!*((_DWORD *)this + 80) && *((_DWORD *)a2 + 80))
  {
    a3[19] = *((_OWORD *)a2 + 19);
    *((_DWORD *)a3 + 80) = *((_DWORD *)a2 + 80);
  }
  if (!*((_DWORD *)this + 84) && *((_DWORD *)a2 + 84))
    *(_OWORD *)((char *)a3 + 328) = *(_OWORD *)((char *)a2 + 328);
  if (!*((_DWORD *)this + 100) && *((_DWORD *)a2 + 100))
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 22), (uint64_t)a2 + 352);
  if (!*((_DWORD *)this + 112) && *((_DWORD *)a2 + 112))
    result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(a3 + 26), (uint64_t)a2 + 416);
  if (!*((_DWORD *)this + 120) && *((_DWORD *)a2 + 120))
  {
    v16 = *(_OWORD *)((char *)a2 + 472);
    *(_OWORD *)((char *)a3 + 456) = *(_OWORD *)((char *)a2 + 456);
    *(_OWORD *)((char *)a3 + 472) = v16;
  }
  if (!*((_DWORD *)this + 123) && *((_DWORD *)a2 + 123))
    *((_QWORD *)a3 + 61) = *((_QWORD *)a2 + 61);
  if (!*((_DWORD *)this + 125) && *((_DWORD *)a2 + 125))
    *((_QWORD *)a3 + 62) = *((_QWORD *)a2 + 62);
  if (!*((_DWORD *)this + 128) && *((_DWORD *)a2 + 128))
    *(_OWORD *)((char *)a3 + 504) = *(_OWORD *)((char *)a2 + 504);
  if (!*((_DWORD *)this + 132) && *((_DWORD *)a2 + 132))
    *(_OWORD *)((char *)a3 + 520) = *(_OWORD *)((char *)a2 + 520);
  if (!*((_DWORD *)this + 140) && *((_DWORD *)a2 + 140))
  {
    v17 = *(_OWORD *)((char *)a2 + 552);
    *(_OWORD *)((char *)a3 + 536) = *(_OWORD *)((char *)a2 + 536);
    *(_OWORD *)((char *)a3 + 552) = v17;
  }
  if (!*((_DWORD *)this + 143))
  {
    if (*((_DWORD *)a2 + 143))
      *((_QWORD *)a3 + 71) = *((_QWORD *)a2 + 71);
  }
  return result;
}

void SVG::Presentation::Presentation(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  std::string::size_type v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  __darwin_ct_rune_t v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  __darwin_ct_rune_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  _BOOL4 v135;
  unsigned __int8 *v136;
  uint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  char v144;
  __int128 v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  char v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  char v156;
  std::string::size_type v157;
  char v158;
  unsigned __int8 *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  int v163;
  unint64_t v164;
  __int128 v165;
  unint64_t v166;
  char v167;
  _OWORD *v168;
  std::string::size_type v169;
  unint64_t v170;
  char v171;
  std::string::size_type size;
  uint64_t v173;
  unint64_t v174;
  int64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  std::string::size_type v180;
  std::string::size_type v181;
  __int128 v182;
  int64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  int v191;
  unsigned __int8 *v192;
  unint64_t v193;
  unint64_t v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL4 v206;
  unsigned __int8 *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BOOL4 v211;
  unsigned __int8 *v212;
  int64x2_t v213;
  unint64_t v214;
  unint64_t v215;
  char v216;
  unint64_t v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  BOOL v221;
  double v222;
  unsigned __int8 *v224;
  uint64_t v225;
  unsigned __int8 *v226;
  unint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  int v234;
  int v235;
  unsigned __int8 *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unint64_t v242;
  char v243;
  unint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *__dst[2];
  __int128 v256;
  _BYTE __p[32];
  std::string v258;
  __int128 v259;
  int v260;
  _BYTE v261[32];
  char v262;
  unsigned int v263;
  unsigned int v264;
  _BYTE v265[20];
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v5 = a1 + 64;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  v6 = a1 + 152;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  v7 = a1 + 248;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v8 = a1 + 112;
  *(_QWORD *)(a1 + 224) = 0;
  v9 = (uint64_t *)(a1 + 224);
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v10 = (uint64_t *)(a1 + 288);
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  std::string::basic_string[abi:nn180100]<0>(v261, "clip");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v11 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v11)
  {
    v254 = v7;
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", (uint64_t)(v11 + 64)))
    {
      LODWORD(v15) = 0;
      v16 = 1;
    }
    else if (SVG::consumeStringAlone<5ul>((uint64_t)"auto", (uint64_t)(v11 + 64)))
    {
      LODWORD(v12) = 0;
      LOBYTE(v13) = 0;
      LODWORD(v15) = 0;
      *(_DWORD *)&v261[3] = 0;
      *(_DWORD *)v261 = 0;
      v14 = 0uLL;
      v16 = 2;
      v2 = 0;
    }
    else
    {
      v251 = v10;
      v17 = 0;
      do
      {
        v18 = v17;
        v17 = SVG::consumeWsp((uint64_t *)v11 + 8, v17);
      }
      while (v19);
      v20 = SVG::consumeString<5ul>((uint64_t)"rect", (uint64_t)(v11 + 64), v18);
      if (!v21)
        goto LABEL_34;
      do
      {
        v22 = v20;
        v20 = SVG::consumeWsp((uint64_t *)v11 + 8, v20);
      }
      while (v23);
      v24 = SVG::consumeString<2ul>("(", (uint64_t *)v11 + 8, v22);
      if (v25)
      {
        v252 = v8;
        do
        {
          v26 = v24;
          v24 = SVG::consumeWsp((uint64_t *)v11 + 8, v24);
        }
        while (v27);
        v28 = 0;
        *(_QWORD *)&v29 = -1;
        *((_QWORD *)&v29 + 1) = -1;
        *(_OWORD *)v261 = v29;
        *(_OWORD *)&v261[16] = v29;
        do
        {
          if (v28)
          {
            v30 = SVG::consumeCommaWsp((uint64_t *)v11 + 8, v26);
            if (v31)
              v26 = v30;
          }
          *(_QWORD *)__p = -1;
          *(_QWORD *)&__p[8] = 0xAAAAAAAAAAAAAAAALL;
          *(_QWORD *)&__p[16] = 0xAAAAAAAAAAAAAAAALL;
          v32 = SVG::consumeString<5ul>((uint64_t)"auto", (uint64_t)(v11 + 64), v26);
          if (v33)
          {
            v34 = 0;
            v26 = v32;
          }
          else
          {
            SVG::consumeCSSLength((uint64_t)(v11 + 64), v26, (uint64_t)__p);
            v16 = __p[16];
            if (!__p[16])
            {
              LODWORD(v15) = 0;
              v10 = v251;
              goto LABEL_36;
            }
            v34 = *(_QWORD *)__p;
            v26 = *(_QWORD *)&__p[8];
          }
          *(_QWORD *)&v261[v28] = v34;
          v28 += 8;
        }
        while (v28 != 32);
        v15 = *(_QWORD *)v261;
        v250 = *(_OWORD *)&v261[8];
        v2 = *(_QWORD *)&v261[24];
        do
        {
          v35 = v26;
          v26 = SVG::consumeWsp((uint64_t *)v11 + 8, v26);
        }
        while (v36);
        v37 = SVG::consumeString<2ul>(")", (uint64_t *)v11 + 8, v35);
        if (v38)
        {
          do
          {
            v39 = v37;
            v37 = SVG::consumeWsp((uint64_t *)v11 + 8, v37);
          }
          while (v40);
          v41 = v11[87];
          LODWORD(v12) = (char)v41;
          v13 = *((_QWORD *)v11 + 9);
          if ((v41 & 0x80u) != 0)
            v41 = *((_QWORD *)v11 + 9);
          v8 = v252;
          if (v39 == v41)
          {
            v12 = HIDWORD(v15);
            memset(v261, 170, 7);
            v16 = 2;
            LOBYTE(v13) = 1;
            v10 = v251;
            v14 = v250;
          }
          else
          {
            v16 = 0;
            LODWORD(v15) = 0;
            v10 = v251;
          }
          goto LABEL_36;
        }
        v16 = 0;
        LODWORD(v15) = 0;
        v8 = v252;
      }
      else
      {
LABEL_34:
        v16 = 0;
        LODWORD(v15) = 0;
      }
      v10 = v251;
    }
LABEL_36:
    *(_DWORD *)(a1 + 8) = v15;
    *(_DWORD *)(a1 + 12) = v12;
    *(_OWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 32) = v2;
    *(_BYTE *)(a1 + 40) = v13;
    *(_DWORD *)(a1 + 41) = *(_DWORD *)v261;
    *(_DWORD *)(a1 + 44) = *(_DWORD *)&v261[3];
    *(_DWORD *)(a1 + 48) = v16;
    v7 = v254;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "clip-path");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v42 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v42)
  {
    SVG::consumeIRIOrNone((uint64_t)v261, (uint64_t)(v42 + 64));
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)&v261[8]);
    if (*(_DWORD *)&v261[24] != -1)
      ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137CC0 + *(unsigned int *)&v261[24]))(__p, &v261[8]);
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "clip-rule");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v43 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v43)
    *(_QWORD *)(a1 + 88) = SVG::consumeFillRule((uint64_t)(v43 + 64));
  std::string::basic_string[abi:nn180100]<0>(v261, "color");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v44 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v261);
    if (!v44)
      goto LABEL_99;
  }
  else if (!v44)
  {
    goto LABEL_99;
  }
  v45 = (uint64_t *)(v44 + 64);
  v46 = SVG::consumeColorAlone((uint64_t)v45);
  if (!HIDWORD(v47))
  {
    memset(__p, 170, 24);
    SVG::CSS::preprocess(v45, __p);
    v48 = 0;
    do
    {
      v49 = v48;
      v48 = SVG::CSS::consumeWhitespace((uint64_t *)__p, v48);
    }
    while (v50);
    v51 = SVG::consumeString<5ul>((uint64_t)"var(", (uint64_t)__p, v49);
    if (v52)
    {
      do
      {
        v53 = v51;
        v51 = SVG::CSS::consumeWhitespace((uint64_t *)__p, v51);
      }
      while (v54);
      *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v261 = v55;
      *(_OWORD *)&v261[16] = v55;
      SVG::CSS::consumeAName((uint64_t *)__p, v53, (std::string *)v261);
      *(_OWORD *)__dst = *(_OWORD *)v261;
      v56 = *(_QWORD *)&v261[24];
      *(_QWORD *)&v256 = *(_QWORD *)&v261[16];
      memset(v261, 0, 24);
      if (__p[23] >= 0)
        v57 = __p[23];
      else
        v57 = *(_QWORD *)&__p[8];
      do
        SVG::CSS::consumeWhitespace((uint64_t *)__p, --v57);
      while (v58);
      SVG::consumeString<2ul>(")", (uint64_t *)__p, v57);
      if (v59)
      {
        v60 = SVG::consumeString<8ul>((uint64_t)"--color", (uint64_t)__dst, 0);
        if (v61
          && (memset(&v258, 170, sizeof(v258)),
              SVG::consumeInteger((uint64_t)__dst, v60, (uint64_t)&v258),
              v258.__r_.__value_.__s.__data_[16]))
        {
          v62 = v258.__r_.__value_.__r.__words[0];
          if ((uint64_t)v258.__r_.__value_.__l.__data_ >= 0xFFFF)
            v62 = 0xFFFFLL;
          *(_QWORD *)&v265[4] = v62 & ~(v62 >> 63) | 0x1AAAA0000;
          *(_DWORD *)&v265[12] = 2;
        }
        else
        {
          v63 = v9;
          do
          {
            v64 = v56;
            v56 = SVG::CSS::consumeWhitespace((uint64_t *)__p, v56);
          }
          while (v65);
          v66 = SVG::consumeString<2ul>(",", (uint64_t *)__p, v64);
          if (v67)
          {
            v68 = v66;
            v9 = v63;
            do
              SVG::CSS::consumeWhitespace((uint64_t *)__p, v57--);
            while (v69);
            memset(&v258, 170, sizeof(v258));
            std::string::basic_string(&v258, (const std::string *)__p, v68, v57 - v68 + 1, (std::allocator<char> *)v265);
            *(_QWORD *)v265 = SVG::consumeColorAlone((uint64_t)&v258);
            *(_QWORD *)&v265[8] = v70;
            if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v258.__r_.__value_.__l.__data_);
          }
          else
          {
            *(_DWORD *)&v265[4] = 0;
            *(_DWORD *)&v265[12] = 0;
            v9 = v63;
          }
        }
      }
      else
      {
        *(_DWORD *)&v265[4] = 0;
        *(_DWORD *)&v265[12] = 0;
      }
      if (SBYTE7(v256) < 0)
        operator delete(__dst[0]);
      if ((v261[23] & 0x80000000) != 0)
        operator delete(*(void **)v261);
    }
    else
    {
      *(_DWORD *)&v265[4] = 0;
      *(_DWORD *)&v265[12] = 0;
    }
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v47 = *(_QWORD *)&v265[8];
    v46 = *(_QWORD *)v265;
  }
  *(_QWORD *)v261 = v46;
  *(_QWORD *)&v261[8] = v47;
  if (HIDWORD(v47) == 2)
  {
    v71 = *(_QWORD *)&v261[4];
    if (*(_DWORD *)v8 != 2)
      *(_DWORD *)v8 = 2;
    *(_QWORD *)(a1 + 100) = v71;
    *(_BYTE *)(a1 + 108) = 1;
  }
  else
  {
    if (HIDWORD(v47) == 1)
    {
      if (*(_DWORD *)v8 != 1)
        *(_DWORD *)v8 = 1;
    }
    else
    {
      if (HIDWORD(v47))
      {
        v248 = std::__throw_bad_variant_access[abi:nn180100]();
        SVG::consumeIRIOrNone(v248, v249);
        return;
      }
      if (*(_DWORD *)v8)
        *(_DWORD *)v8 = 0;
    }
    *(_DWORD *)(a1 + 100) = 0;
  }
LABEL_99:
  std::string::basic_string[abi:nn180100]<0>(v261, "color-interpolation");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v72 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v72)
  {
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", (uint64_t)(v72 + 64)))
    {
      v73 = 0;
      v74 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<5ul>((uint64_t)"auto", (uint64_t)(v72 + 64)))
    {
      v73 = 0;
      v74 = 0x200000000;
    }
    else if (SVG::consumeStringAlone<5ul>((uint64_t)"sRGB", (uint64_t)(v72 + 64)))
    {
      v74 = 0x200000000;
      v73 = 1;
    }
    else
    {
      v75 = v9;
      v76 = 0;
      do
      {
        v77 = v76;
        v76 = SVG::consumeWsp((uint64_t *)v72 + 8, v76);
      }
      while (v78);
      v79 = SVG::consumeString<10ul>((uint64_t)"linearRGB", (uint64_t)(v72 + 64), v77);
      if (v80)
      {
        do
        {
          v81 = v79;
          v79 = SVG::consumeWsp((uint64_t *)v72 + 8, v79);
        }
        while (v82);
        v83 = v72[87];
        if ((v83 & 0x80u) != 0)
          v83 = *((_QWORD *)v72 + 9);
        v84 = v81 == v83;
        v73 = 2 * v84;
        v74 = v84 << 33;
      }
      else
      {
        v73 = 0;
        v74 = 0;
      }
      v9 = v75;
    }
    *(_QWORD *)(a1 + 116) = v74 | v73;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "color-rendering");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v85 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v85)
    *(_QWORD *)(a1 + 124) = SVG::consumeRenderingQuality((uint64_t)(v85 + 64));
  std::string::basic_string[abi:nn180100]<0>(v261, "display");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v86 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v86)
  {
    v87 = (uint64_t)(v86 + 64);
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", v87))
    {
      v88 = 0;
      v89 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<7ul>((uint64_t)"inline", v87))
    {
      v88 = 0;
      v89 = 0x200000000;
    }
    else
    {
      v89 = 0x200000000;
      if (SVG::consumeStringAlone<6ul>((uint64_t)"block", v87))
      {
        v88 = 1;
      }
      else
      {
        v90 = SVG::consumeStringAlone<5ul>((uint64_t)"none", v87);
        if (!v90)
          v89 = 0;
        v88 = 2;
        if (!v90)
          v88 = 0;
      }
    }
    *(_QWORD *)(a1 + 132) = v89 | v88;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "fill");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v91 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v91)
  {
    SVG::parseAloneOrVar<SVG::Presentation::Paint>((uint64_t)v261, (uint64_t *)v91 + 8);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)&v261[8]);
    if (v264 != -1)
      ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137CF0 + v264))(__p, &v261[8]);
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "fill-opacity");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v92 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v92)
  {
    *(_QWORD *)(a1 + 208) = SVG::consumeOpacity((uint64_t)(v92 + 64));
    *(_QWORD *)(a1 + 216) = v93;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "fill-rule");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v94 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v94)
    *v9 = SVG::consumeFillRule((uint64_t)(v94 + 64));
  std::string::basic_string[abi:nn180100]<0>(v261, "image-rendering");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v95 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v95)
    *(_QWORD *)(a1 + 232) = SVG::consumeRenderingQuality((uint64_t)(v95 + 64));
  std::string::basic_string[abi:nn180100]<0>(v261, "mask");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v96 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v96)
  {
    SVG::consumeIRIOrNone((uint64_t)v261, (uint64_t)(v96 + 64));
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>(v7, (uint64_t)&v261[8]);
    if (*(_DWORD *)&v261[24] != -1)
      ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137CC0 + *(unsigned int *)&v261[24]))(__p, &v261[8]);
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "opacity");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v97 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v97)
  {
    *(_QWORD *)(a1 + 272) = SVG::consumeOpacity((uint64_t)(v97 + 64));
    *(_QWORD *)(a1 + 280) = v98;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "overflow");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v99 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v99)
  {
    v100 = (uint64_t)(v99 + 64);
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", v100))
    {
      v101 = 0;
      v102 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<8ul>((uint64_t)"visible", v100))
    {
      v101 = 0;
      v102 = 0x200000000;
    }
    else
    {
      v102 = 0x200000000;
      if (SVG::consumeStringAlone<7ul>((uint64_t)"hidden", v100))
      {
        v101 = 1;
      }
      else
      {
        v103 = SVG::consumeStringAlone<5ul>((uint64_t)"auto", v100);
        if (!v103)
          v102 = 0;
        v101 = 2;
        if (!v103)
          v101 = 0;
      }
    }
    *v10 = v102 | v101;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "shape-rendering");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v104 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v104)
  {
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", (uint64_t)(v104 + 64)))
    {
      v105 = 0;
      v106 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<14ul>((uint64_t)(v104 + 64)))
    {
      v106 = 0x200000000;
      v105 = 1;
    }
    else
    {
      v253 = v8;
      v107 = 0;
      do
      {
        v108 = v107;
        v107 = SVG::consumeWsp((uint64_t *)v104 + 8, v107);
      }
      while (v109);
      v110 = v104[87];
      if ((v110 & 0x80u) != 0)
        v110 = *((_QWORD *)v104 + 9);
      v111 = v108 + 10;
      if (v110 >= v108 + 10)
      {
        v112 = 0;
        while (1)
        {
          v113 = (v104[87] & 0x80u) == 0 ? (uint64_t)(v104 + 64) : *((_QWORD *)v104 + 8);
          v114 = *(char *)(v113 + v108 + v112);
          v115 = aCrispedges[v112];
          if (__tolower(v115) != v114)
          {
            v116 = (v104[87] & 0x80u) == 0 ? (uint64_t)(v104 + 64) : *((_QWORD *)v104 + 8);
            v117 = *(char *)(v116 + v108 + v112);
            if (__toupper(v115) != v117)
              break;
          }
          if (++v112 == 10)
          {
            do
            {
              v118 = v111;
              v111 = SVG::consumeWsp((uint64_t *)v104 + 8, v111);
            }
            while (v119);
            v120 = v104[87];
            if ((v120 & 0x80u) != 0)
              v120 = *((_QWORD *)v104 + 9);
            if (v118 == v120)
            {
              v106 = 0x200000000;
              v105 = 2;
              goto LABEL_247;
            }
            break;
          }
        }
      }
      v121 = 0;
      do
      {
        v122 = v121;
        v121 = SVG::consumeWsp((uint64_t *)v104 + 8, v121);
      }
      while (v123);
      v124 = v104[87];
      if ((v124 & 0x80u) != 0)
        v124 = *((_QWORD *)v104 + 9);
      v125 = v122 + 18;
      if (v124 >= v122 + 18)
      {
        v126 = 0;
        while (1)
        {
          v127 = (v104[87] & 0x80u) == 0 ? (uint64_t)(v104 + 64) : *((_QWORD *)v104 + 8);
          v128 = *(char *)(v127 + v122 + v126);
          v129 = aGeometricpreci[v126];
          if (__tolower(v129) != v128)
          {
            v130 = (v104[87] & 0x80u) == 0 ? (uint64_t)(v104 + 64) : *((_QWORD *)v104 + 8);
            v131 = *(char *)(v130 + v122 + v126);
            if (__toupper(v129) != v131)
              break;
          }
          if (++v126 == 18)
          {
            do
            {
              v132 = v125;
              v125 = SVG::consumeWsp((uint64_t *)v104 + 8, v125);
            }
            while (v133);
            v134 = v104[87];
            if ((v134 & 0x80u) != 0)
              v134 = *((_QWORD *)v104 + 9);
            if (v132 == v134)
            {
              v106 = 0x200000000;
              v105 = 3;
              goto LABEL_247;
            }
            break;
          }
        }
      }
      v135 = SVG::consumeStringAlone<5ul>((uint64_t)"auto", (uint64_t)(v104 + 64));
      v105 = 0;
      v106 = 0x200000000;
      if (!v135)
        v106 = 0;
LABEL_247:
      v8 = v253;
    }
    *(_QWORD *)(a1 + 296) = v106 | v105;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stop-color");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v136 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v136)
  {
    v137 = (uint64_t *)(v136 + 64);
    memset(v265, 170, sizeof(v265));
    SVG::consumeStopColor((uint64_t)v265, (uint64_t)v137);
    if (*(_DWORD *)&v265[16])
    {
      v259 = *(_OWORD *)v265;
      v260 = *(_DWORD *)&v265[16];
LABEL_284:
      *(_OWORD *)(v8 + 192) = v259;
      *(_DWORD *)(v8 + 208) = v260;
      goto LABEL_285;
    }
    memset(__p, 170, 24);
    SVG::CSS::preprocess(v137, __p);
    v138 = 0;
    do
    {
      v139 = v138;
      v138 = SVG::CSS::consumeWhitespace((uint64_t *)__p, v138);
    }
    while (v140);
    v141 = SVG::consumeString<5ul>((uint64_t)"var(", (uint64_t)__p, v139);
    if (!v142)
    {
      DWORD1(v259) = 0;
      v260 = 0;
LABEL_282:
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      goto LABEL_284;
    }
    do
    {
      v143 = v141;
      v141 = SVG::CSS::consumeWhitespace((uint64_t *)__p, v141);
    }
    while (v144);
    *(_QWORD *)&v145 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v145 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v261 = v145;
    *(_OWORD *)&v261[16] = v145;
    SVG::CSS::consumeAName((uint64_t *)__p, v143, (std::string *)v261);
    *(_OWORD *)__dst = *(_OWORD *)v261;
    v146 = *(_QWORD *)&v261[24];
    *(_QWORD *)&v256 = *(_QWORD *)&v261[16];
    memset(v261, 0, 24);
    if (__p[23] >= 0)
      v147 = __p[23];
    else
      v147 = *(_QWORD *)&__p[8];
    do
      SVG::CSS::consumeWhitespace((uint64_t *)__p, --v147);
    while (v148);
    SVG::consumeString<2ul>(")", (uint64_t *)__p, v147);
    if (v149)
    {
      v150 = SVG::consumeString<8ul>((uint64_t)"--color", (uint64_t)__dst, 0);
      if (v151)
      {
        memset(&v258, 170, sizeof(v258));
        SVG::consumeInteger((uint64_t)__dst, v150, (uint64_t)&v258);
        if (v258.__r_.__value_.__s.__data_[16])
        {
          v152 = v258.__r_.__value_.__r.__words[0];
          if ((uint64_t)v258.__r_.__value_.__l.__data_ >= 0xFFFF)
            v152 = 0xFFFFLL;
          *(_QWORD *)((char *)&v259 + 4) = v152 & ~(v152 >> 63) | 0x1AAAA0000;
          BYTE12(v259) = 1;
          v260 = 2;
          goto LABEL_278;
        }
      }
      do
      {
        v153 = v146;
        v146 = SVG::CSS::consumeWhitespace((uint64_t *)__p, v146);
      }
      while (v154);
      v155 = SVG::consumeString<2ul>(",", (uint64_t *)__p, v153);
      if (v156)
      {
        v157 = v155;
        do
          SVG::CSS::consumeWhitespace((uint64_t *)__p, v147--);
        while (v158);
        memset(&v258, 170, sizeof(v258));
        std::string::basic_string(&v258, (const std::string *)__p, v157, v147 - v157 + 1, (std::allocator<char> *)&v259);
        SVG::consumeStopColor((uint64_t)&v259, (uint64_t)&v258);
        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v258.__r_.__value_.__l.__data_);
        goto LABEL_278;
      }
    }
    DWORD1(v259) = 0;
    v260 = 0;
LABEL_278:
    if (SBYTE7(v256) < 0)
      operator delete(__dst[0]);
    if ((v261[23] & 0x80000000) != 0)
      operator delete(*(void **)v261);
    goto LABEL_282;
  }
LABEL_285:
  std::string::basic_string[abi:nn180100]<0>(v261, "stop-opacity");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v159 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v159)
  {
    *(_QWORD *)(a1 + 328) = SVG::consumeOpacity((uint64_t)(v159 + 64));
    *(_QWORD *)(a1 + 336) = v160;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v161 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v161)
  {
    SVG::parseAloneOrVar<SVG::Presentation::Paint>((uint64_t)v261, (uint64_t *)v161 + 8);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(a1 + 352, (uint64_t)&v261[8]);
    if (v264 != -1)
      ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137CF0 + v264))(__p, &v261[8]);
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-dasharray");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v162 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v261);
    if (!v162)
      goto LABEL_355;
  }
  else if (!v162)
  {
    goto LABEL_355;
  }
  if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", (uint64_t)(v162 + 64)))
  {
    v163 = 1;
    *(_DWORD *)&v261[8] = 0;
LABEL_352:
    v263 = v163;
    goto LABEL_353;
  }
  if (SVG::consumeStringAlone<5ul>((uint64_t)"none", (uint64_t)(v162 + 64)))
  {
    v261[8] = 0;
    v262 = 0;
LABEL_351:
    v163 = 2;
    goto LABEL_352;
  }
  v164 = 0;
  *(_QWORD *)&v165 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v165 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v165;
  v256 = v165;
  do
  {
    v166 = v164;
    v164 = SVG::consumeWsp((uint64_t *)v162 + 8, v164);
  }
  while (v167);
  *(_QWORD *)v261 = -1;
  memset(&v261[8], 170, 24);
  SVG::consumeLength((uint64_t *)v162 + 8, v166, (uint64_t)v261);
  if (v261[24])
  {
    v168 = operator new(0x10uLL);
    v169 = (std::string::size_type)(v168 + 1);
    *v168 = *(_OWORD *)v261;
    v258.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
    v258.__r_.__value_.__r.__words[2] = (std::string::size_type)(v168 + 1);
    while (1)
    {
      v258.__r_.__value_.__l.__size_ = v169;
      v166 = *(_QWORD *)&v261[16];
      v170 = SVG::consumeCommaWsp((uint64_t *)v162 + 8, *(unint64_t *)&v261[16]);
      if (v171)
        v166 = v170;
      SVG::consumeLength((uint64_t *)v162 + 8, v166, (uint64_t)__p);
      *(_OWORD *)&v261[9] = *(_OWORD *)&__p[9];
      *(_OWORD *)v261 = *(_OWORD *)__p;
      if (!__p[24])
        break;
      size = v258.__r_.__value_.__l.__size_;
      if (v258.__r_.__value_.__l.__size_ >= v258.__r_.__value_.__r.__words[2])
      {
        v173 = (uint64_t)(v258.__r_.__value_.__l.__size_ - v258.__r_.__value_.__r.__words[0]) >> 4;
        v174 = v173 + 1;
        if ((unint64_t)(v173 + 1) >> 60)
          abort();
        v175 = v258.__r_.__value_.__r.__words[2] - v258.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v258.__r_.__value_.__r.__words[2] - v258.__r_.__value_.__r.__words[0]) >> 3 > v174)
          v174 = v175 >> 3;
        if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0)
          v176 = 0xFFFFFFFFFFFFFFFLL;
        else
          v176 = v174;
        if (v176)
          v177 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Length>>((uint64_t)&v258.__r_.__value_.__r.__words[2], v176);
        else
          v177 = 0;
        v178 = &v177[16 * v173];
        *(_OWORD *)v178 = *(_OWORD *)v261;
        v179 = (char *)v258.__r_.__value_.__l.__size_;
        v180 = v258.__r_.__value_.__r.__words[0];
        v181 = (std::string::size_type)v178;
        if (v258.__r_.__value_.__l.__size_ != v258.__r_.__value_.__r.__words[0])
        {
          do
          {
            *(_OWORD *)(v181 - 16) = *((_OWORD *)v179 - 1);
            v181 -= 16;
            v179 -= 16;
          }
          while (v179 != (char *)v180);
          v179 = (char *)v258.__r_.__value_.__r.__words[0];
        }
        v169 = (std::string::size_type)(v178 + 16);
        v258.__r_.__value_.__r.__words[0] = v181;
        v258.__r_.__value_.__l.__size_ = (std::string::size_type)(v178 + 16);
        v258.__r_.__value_.__r.__words[2] = (std::string::size_type)&v177[16 * v176];
        if (v179)
          operator delete(v179);
      }
      else
      {
        *(_OWORD *)v258.__r_.__value_.__l.__size_ = *(_OWORD *)v261;
        v169 = size + 16;
      }
    }
    v182 = *(_OWORD *)&v258.__r_.__value_.__l.__data_;
    memset(&v258, 0, sizeof(v258));
    memset(__p, 0, 24);
    v183 = *((_QWORD *)&v182 + 1) - v182;
    if (*((_QWORD *)&v182 + 1) == (_QWORD)v182)
    {
      v185 = 0;
    }
    else
    {
      std::vector<SVG::Length>::__vallocate[abi:nn180100](__p, v183 >> 4);
      v184 = *(_QWORD *)&__p[8];
      memmove(*(void **)&__p[8], (const void *)v182, v183);
      v185 = v184 + v183;
      v183 = *(_QWORD *)__p;
    }
    *(_QWORD *)&__p[24] = v166;
    memset(__p, 0, 24);
    if ((_QWORD)v182)
      operator delete((void *)v182);
    if (v258.__r_.__value_.__r.__words[0])
    {
      v258.__r_.__value_.__l.__size_ = v258.__r_.__value_.__r.__words[0];
      operator delete(v258.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v183 = 0;
    v185 = 0;
  }
  do
  {
    v186 = v166;
    v166 = SVG::consumeWsp((uint64_t *)v162 + 8, v166);
  }
  while (v187);
  v188 = v162[87];
  if ((v188 & 0x80u) != 0)
    v188 = *((_QWORD *)v162 + 9);
  if (v186 == v188)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    *(_QWORD *)&v256 = 0;
    v189 = v185 - v183;
    if (v185 != v183)
    {
      std::vector<SVG::Length>::__vallocate[abi:nn180100](__dst, v189 >> 4);
      v190 = (char *)__dst[1];
      memmove(__dst[1], (const void *)v183, v185 - v183);
      __dst[1] = &v190[v189];
    }
    v191 = 1;
  }
  else
  {
    v191 = 0;
    LOBYTE(__dst[0]) = 0;
  }
  BYTE8(v256) = v191;
  if (v183)
  {
    operator delete((void *)v183);
    v191 = BYTE8(v256);
  }
  if (v191)
  {
    *(_OWORD *)&v261[8] = *(_OWORD *)__dst;
    *(_QWORD *)&v261[24] = v256;
    v262 = 1;
    goto LABEL_351;
  }
  *(_DWORD *)&v261[8] = 0;
  v263 = 0;
LABEL_353:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1>>(a1 + 416, (uint64_t)&v261[8]);
  if (v263 != -1)
    ((void (*)(_BYTE *, _BYTE *))*(&off_1E7137D98 + v263))(__p, &v261[8]);
LABEL_355:
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-dashoffset");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v192 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v192)
  {
    v193 = 0;
    do
    {
      v194 = v193;
      v193 = SVG::consumeWsp((uint64_t *)v192 + 8, v193);
    }
    while (v195);
    *(_QWORD *)v261 = -1;
    memset(&v261[8], 170, 24);
    SVG::consumeLength((uint64_t *)v192 + 8, v194, (uint64_t)v261);
    if (v261[24])
    {
      v196 = *(_QWORD *)&v261[16];
      do
      {
        v197 = v196;
        v196 = SVG::consumeWsp((uint64_t *)v192 + 8, v196);
      }
      while (v198);
      v199 = v192[87];
      if ((v199 & 0x80u) != 0)
        v199 = *((_QWORD *)v192 + 9);
      if (v197 == v199)
      {
        v200 = *(_DWORD *)&v261[8];
        v201 = *(_DWORD *)&v261[12];
        *(_QWORD *)(a1 + 464) = *(_QWORD *)v261;
        *(_DWORD *)(a1 + 472) = v200;
        *(_DWORD *)(a1 + 476) = v201;
        *(_DWORD *)(a1 + 480) = 2;
      }
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-linecap");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v202 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v202)
  {
    v203 = (uint64_t)(v202 + 64);
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", v203))
    {
      v204 = 0;
      v205 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<5ul>((uint64_t)"butt", v203))
    {
      v204 = 0;
      v205 = 0x200000000;
    }
    else
    {
      v205 = 0x200000000;
      if (SVG::consumeStringAlone<6ul>((uint64_t)"round", v203))
      {
        v204 = 1;
      }
      else
      {
        v206 = SVG::consumeStringAlone<7ul>((uint64_t)"square", v203);
        if (!v206)
          v205 = 0;
        v204 = 2;
        if (!v206)
          v204 = 0;
      }
    }
    *(_QWORD *)(v8 + 376) = v205 | v204;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-linejoin");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v207 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v207)
  {
    v208 = (uint64_t)(v207 + 64);
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", v208))
    {
      v209 = 0;
      v210 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<6ul>((uint64_t)"miter", v208))
    {
      v209 = 0;
      v210 = 0x200000000;
    }
    else
    {
      v210 = 0x200000000;
      if (SVG::consumeStringAlone<6ul>((uint64_t)"round", v208))
      {
        v209 = 1;
      }
      else
      {
        v211 = SVG::consumeStringAlone<6ul>((uint64_t)"bevel", v208);
        if (!v211)
          v210 = 0;
        v209 = 2;
        if (!v211)
          v209 = 0;
      }
    }
    *(_QWORD *)(a1 + 496) = v210 | v209;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-miterlimit");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v212 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (!v212)
    goto LABEL_427;
  if (!SVG::consumeStringAlone<8ul>((uint64_t)"inherit", (uint64_t)(v212 + 64)))
  {
    v214 = 0;
    do
    {
      v215 = v214;
      v214 = SVG::consumeWsp((uint64_t *)v212 + 8, v214);
    }
    while (v216);
    *(_QWORD *)v261 = -1;
    *(_QWORD *)&v261[8] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v261[16] = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeNumber((uint64_t)(v212 + 64), v215, (uint64_t)v261);
    if (v261[16])
    {
      v217 = *(_QWORD *)&v261[8];
      do
      {
        v218 = v217;
        v217 = SVG::consumeWsp((uint64_t *)v212 + 8, v217);
      }
      while (v219);
      v220 = v212[87];
      if ((v220 & 0x80u) != 0)
        v220 = *((_QWORD *)v212 + 9);
      v221 = v218 == v220;
      if (v218 == v220)
        v222 = *(double *)v261;
      else
        v222 = 0.0;
      if (v221 && v222 >= 1.0)
      {
        v213 = vdupq_n_s64(2uLL);
LABEL_425:
        *(double *)v213.i64 = v222;
        goto LABEL_426;
      }
    }
    else
    {
      v222 = 0.0;
    }
    *(_QWORD *)&v222 &= 0xFFFFFFFF00000000;
    v213.i64[1] = 0;
    goto LABEL_425;
  }
  v213 = (int64x2_t)xmmword_1B9B90A50;
LABEL_426:
  *(int64x2_t *)(v8 + 392) = v213;
LABEL_427:
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-opacity");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v224 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v224)
  {
    *(_QWORD *)(a1 + 520) = SVG::consumeOpacity((uint64_t)(v224 + 64));
    *(_QWORD *)(a1 + 528) = v225;
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "stroke-width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v226 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v226)
  {
    v227 = 0;
    do
    {
      v228 = v227;
      v227 = SVG::consumeWsp((uint64_t *)v226 + 8, v227);
    }
    while (v229);
    *(_QWORD *)v261 = -1;
    memset(&v261[8], 170, 24);
    SVG::consumeLength((uint64_t *)v226 + 8, v228, (uint64_t)v261);
    if (v261[24])
    {
      v230 = *(_QWORD *)&v261[16];
      do
      {
        v231 = v230;
        v230 = SVG::consumeWsp((uint64_t *)v226 + 8, v230);
      }
      while (v232);
      v233 = v226[87];
      if ((v233 & 0x80u) != 0)
        v233 = *((_QWORD *)v226 + 9);
      if (v231 == v233)
      {
        v234 = *(_DWORD *)&v261[8];
        v235 = *(_DWORD *)&v261[12];
        *(_QWORD *)(a1 + 544) = *(_QWORD *)v261;
        *(_DWORD *)(a1 + 552) = v234;
        *(_DWORD *)(a1 + 556) = v235;
        *(_DWORD *)(a1 + 560) = 2;
      }
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v261, "visibility");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v236 = SVG::Element::findInAttributeMap(a2, (uint64_t)v261, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v261[23] & 0x80000000) != 0)
    operator delete(*(void **)v261);
  if (v236)
  {
    if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", (uint64_t)(v236 + 64)))
    {
      v237 = 0;
      v238 = 0x100000000;
    }
    else if (SVG::consumeStringAlone<8ul>((uint64_t)"visible", (uint64_t)(v236 + 64)))
    {
      v237 = 0;
      v238 = 0x200000000;
    }
    else if (SVG::consumeStringAlone<7ul>((uint64_t)"hidden", (uint64_t)(v236 + 64)))
    {
      v238 = 0x200000000;
      v237 = 1;
    }
    else
    {
      v239 = 0;
      do
      {
        v240 = v239;
        v239 = SVG::consumeWsp((uint64_t *)v236 + 8, v239);
      }
      while (v241);
      v242 = SVG::consumeString<9ul>((uint64_t)"collapse", (uint64_t)(v236 + 64), v240);
      if (v243)
      {
        do
        {
          v244 = v242;
          v242 = SVG::consumeWsp((uint64_t *)v236 + 8, v242);
        }
        while (v245);
        v246 = v236[87];
        if ((v246 & 0x80u) != 0)
          v246 = *((_QWORD *)v236 + 9);
        v247 = v244 == v246;
        v237 = 2 * v247;
        v238 = v247 << 33;
      }
      else
      {
        v237 = 0;
        v238 = 0;
      }
    }
    *(_QWORD *)(a1 + 568) = v238 | v237;
  }
}

void SVG::consumeIRIOrNone(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  CFTypeRef v8;
  CFTypeRef v9;
  char v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf[3];

  if (!SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a2))
  {
    if (SVG::consumeStringAlone<5ul>((uint64_t)"none", a2))
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
LABEL_5:
      v4 = 2;
      goto LABEL_6;
    }
    v5 = 0;
    do
    {
      v6 = v5;
      v5 = SVG::consumeWsp((uint64_t *)a2, v5);
    }
    while (v7);
    memset(cf, 170, sizeof(cf));
    SVG::consumeFuncIRI(a2, v6, (uint64_t)cf);
    if (LOBYTE(cf[2]))
    {
      v8 = cf[1];
      do
      {
        v9 = v8;
        v8 = (CFTypeRef)SVG::consumeWsp((uint64_t *)a2, (unint64_t)v8);
      }
      while (v10);
      v11 = (CFTypeRef)*(unsigned __int8 *)(a2 + 23);
      if ((char)v11 < 0)
        v11 = *(CFTypeRef *)(a2 + 8);
      v12 = cf[0];
      if (v9 == v11)
      {
        if (cf[0])
        {
          CFRetain(cf[0]);
          CFRelease(v12);
          CFRetain(v12);
          *(_QWORD *)(a1 + 8) = v12;
          *(_BYTE *)(a1 + 16) = 1;
          *(_DWORD *)(a1 + 24) = 2;
          CFRelease(v12);
          return;
        }
        *(_QWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 16) = 1;
        goto LABEL_5;
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return;
  }
  *(_DWORD *)(a1 + 8) = 0;
  v4 = 1;
LABEL_6:
  *(_DWORD *)(a1 + 24) = v4;
}

uint64_t SVG::consumeFillRule(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  _BOOL4 v4;

  if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a1))
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  else
  {
    v3 = 0x200000000;
    if (SVG::consumeStringAlone<8ul>((uint64_t)"nonzero", a1))
    {
      v2 = 0;
    }
    else
    {
      v4 = SVG::consumeStringAlone<8ul>((uint64_t)"evenodd", a1);
      if (!v4)
        v3 = 0;
      v2 = v4;
    }
  }
  return v3 | v2;
}

uint64_t SVG::consumeColorAlone(uint64_t a1)
{
  int v2;
  char v3;
  char v4;
  char v5;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a1))
  {
    HIDWORD(v14) = 0;
  }
  else
  {
    v2 = SVG::consumeAlone<SVG::PreserveAspectRatio>(a1, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumeHexColor);
    if (v3
      || (v2 = SVG::consumeAlone<SVG::PreserveAspectRatio>(a1, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumeRGBColor), v4)|| (v2 = SVG::consumeAlone<SVG::PreserveAspectRatio>(a1, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumePercentRGBColor), v5))
    {
      HIDWORD(v14) = v2;
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = v7;
        v7 = SVG::consumeWsp((uint64_t *)a1, v7);
      }
      while (v9);
      memset(v15, 170, sizeof(v15));
      SVG::consumeColorKeyword((uint64_t *)a1, v8, (uint64_t)v15);
      if (!LOBYTE(v15[2]))
        goto LABEL_17;
      v10 = v15[1];
      do
      {
        v11 = v10;
        v10 = SVG::consumeWsp((uint64_t *)a1, v10);
      }
      while (v12);
      v13 = *(unsigned __int8 *)(a1 + 23);
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(a1 + 8);
      if (v11 == v13)
        HIDWORD(v14) = v15[0];
      else
LABEL_17:
        HIDWORD(v14) = 0;
    }
  }
  return v14;
}

uint64_t SVG::consumeRenderingQuality(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __darwin_ct_rune_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a1))
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  else if (SVG::consumeStringAlone<5ul>((uint64_t)"auto", a1))
  {
    v2 = 0;
    v3 = 0x200000000;
  }
  else if (SVG::consumeStringAlone<14ul>(a1))
  {
    v3 = 0x200000000;
    v2 = 1;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v4;
      v4 = SVG::consumeWsp((uint64_t *)a1, v4);
    }
    while (v6);
    v7 = *(unsigned __int8 *)(a1 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a1 + 8);
    v8 = v5 + 15;
    if (v7 >= v5 + 15)
    {
      v9 = 0;
      while (1)
      {
        v10 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
        v11 = *(char *)(v10 + v5 + v9);
        v12 = aOptimizequalit[v9];
        if (__tolower(v12) != v11)
        {
          v13 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
          v14 = *(char *)(v13 + v5 + v9);
          if (__toupper(v12) != v14)
            break;
        }
        if (++v9 == 15)
        {
          do
          {
            v15 = v8;
            v8 = SVG::consumeWsp((uint64_t *)a1, v8);
          }
          while (v16);
          v17 = *(unsigned __int8 *)(a1 + 23);
          if ((v17 & 0x80u) != 0)
            v17 = *(_QWORD *)(a1 + 8);
          v18 = v15 == v17;
          v2 = 2 * v18;
          v3 = v18 << 33;
          return v3 | v2;
        }
      }
    }
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

void SVG::parseAloneOrVar<SVG::Presentation::Paint>(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  std::string::size_type size;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  std::string::size_type v26;
  char v27;
  _QWORD v28[3];
  void *__p[2];
  uint64_t v30;
  void *v31[2];
  __int128 v32;
  std::string __str;
  char v34;
  std::string v35;
  unsigned int v36;
  _OWORD v37[3];
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[2] = v4;
  v38 = v4;
  v37[0] = v4;
  v37[1] = v4;
  SVG::consumePaint((uint64_t)v37, (uint64_t)a2);
  v5 = DWORD2(v38);
  if (DWORD2(v38))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 56) = -1;
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(std::string *))*(&off_1E7137EA8 + v5))(&v35);
      *(_DWORD *)(a1 + 56) = v5;
    }
    goto LABEL_33;
  }
  memset(&__str, 170, sizeof(__str));
  SVG::CSS::preprocess(a2, &__str);
  v6 = 0;
  do
  {
    v7 = v6;
    v6 = SVG::CSS::consumeWhitespace((uint64_t *)&__str, v6);
  }
  while (v8);
  v9 = SVG::consumeString<5ul>((uint64_t)"var(", (uint64_t)&__str, v7);
  if (v10)
  {
    do
    {
      v11 = v9;
      v9 = SVG::CSS::consumeWhitespace((uint64_t *)&__str, v9);
    }
    while (v12);
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v31 = v13;
    v32 = v13;
    SVG::CSS::consumeAName((uint64_t *)&__str, v11, (std::string *)v31);
    *(_OWORD *)__p = *(_OWORD *)v31;
    v14 = *((_QWORD *)&v32 + 1);
    v30 = v32;
    v31[0] = 0;
    v31[1] = 0;
    *(_QWORD *)&v32 = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    do
      SVG::CSS::consumeWhitespace((uint64_t *)&__str, --size);
    while (v16);
    SVG::consumeString<2ul>(")", (uint64_t *)&__str, size);
    if (v17)
    {
      v18 = SVG::consumeString<8ul>((uint64_t)"--color", (uint64_t)__p, 0);
      if (v19)
      {
        memset(v28, 170, sizeof(v28));
        SVG::consumeInteger((uint64_t)__p, v18, (uint64_t)v28);
        if (LOBYTE(v28[2]))
        {
          v20 = v28[0];
          if (v28[0] >= 0xFFFFLL)
            v20 = 0xFFFFLL;
          v35.__r_.__value_.__l.__size_ = v20 & ~(v20 >> 63) | 0x1AAAA0000;
          v36 = 2;
          *(_BYTE *)(a1 + 16) = 0;
          v21 = a1 + 16;
          *(_DWORD *)(v21 + 32) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(v21, (uint64_t)&v35.__r_.__value_.__l.__size_);
          *(_DWORD *)(v21 + 40) = 2;
          if (v36 != -1)
            ((void (*)(char *, std::string::size_type *))*(&off_1E7137D20 + v36))(&v34, &v35.__r_.__value_.__r.__words[1]);
          goto LABEL_27;
        }
      }
      do
      {
        v22 = v14;
        v14 = SVG::CSS::consumeWhitespace((uint64_t *)&__str, v14);
      }
      while (v23);
      v24 = SVG::consumeString<2ul>(",", (uint64_t *)&__str, v22);
      if (v25)
      {
        v26 = v24;
        do
          SVG::CSS::consumeWhitespace((uint64_t *)&__str, size--);
        while (v27);
        memset(&v35, 170, sizeof(v35));
        std::string::basic_string(&v35, &__str, v26, size - v26 + 1, (std::allocator<char> *)v28);
        SVG::consumePaint(a1, (uint64_t)&v35);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        goto LABEL_27;
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 56) = 0;
LABEL_27:
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v32) < 0)
      operator delete(v31[0]);
    goto LABEL_31;
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 56) = 0;
LABEL_31:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_33:
  if (DWORD2(v38) != -1)
    ((void (*)(std::string *, char *))*(&off_1E7137CF0 + DWORD2(v38)))(&v35, (char *)v37 + 8);
}

void SVG::consumePaint(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[3];
  _BYTE cf[28];
  int v35;
  char v36;
  __int16 v37;
  char v38;
  unsigned int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a2))
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 56) = 1;
    return;
  }
  if (SVG::consumeStringAlone<5ul>((uint64_t)"none", a2))
  {
    *(_DWORD *)&cf[8] = 0;
    v39 = 0;
LABEL_8:
    *(_BYTE *)(a1 + 16) = 0;
    v5 = a1 + 16;
    *(_DWORD *)(v5 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)&cf[8]);
    *(_DWORD *)(v5 + 40) = 2;
    goto LABEL_9;
  }
  if (SVG::consumeStringAlone<13ul>(a2))
  {
    v4 = 1;
    *(_DWORD *)&cf[8] = 0;
LABEL_7:
    v39 = v4;
    goto LABEL_8;
  }
  v6 = SVG::consumeAlone<SVG::PreserveAspectRatio>(a2, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumeColorWithICCColor);
  if (!v7)
  {
    v9 = 0;
    do
    {
      v10 = v9;
      v9 = SVG::consumeWsp((uint64_t *)a2, v9);
    }
    while (v11);
    memset(cf, 170, 24);
    SVG::consumeFuncIRI(a2, v10, (uint64_t)cf);
    if (!cf[16])
      goto LABEL_47;
    v12 = *(_QWORD *)&cf[8];
    v13 = *(_QWORD *)&cf[8];
    do
    {
      v14 = v13;
      v13 = SVG::consumeWsp((uint64_t *)a2, v13);
    }
    while (v15);
    v16 = SVG::consumeString<5ul>((uint64_t)"none", a2, v14);
    if (v17)
    {
      v18 = v16;
      v19 = 0xAAAAAAAA00000000;
      v20 = *(const void **)cf;
      if (*(_QWORD *)cf)
      {
        CFRetain(*(CFTypeRef *)cf);
        CFRelease(v20);
      }
      v21 = 0;
      v22 = 0;
      v23 = 1;
      v24 = -86;
    }
    else
    {
      v25 = SVG::consumeString<13ul>(a2, v14);
      if (v26)
      {
        v18 = v25;
        v19 = 0xAAAAAAAA00000000;
        v20 = *(const void **)cf;
        if (*(_QWORD *)cf)
        {
          CFRetain(*(CFTypeRef *)cf);
          CFRelease(v20);
        }
        v21 = 0;
        v22 = 1;
        v24 = -86;
        v23 = 1;
      }
      else
      {
        memset(v33, 170, sizeof(v33));
        SVG::consumeColorWithICCColor((std::string *)a2, v14, (uint64_t)v33);
        if (LOBYTE(v33[2]))
        {
          v20 = *(const void **)cf;
          v27 = v33[0];
          v18 = v33[1];
          if (*(_QWORD *)cf)
          {
            CFRetain(*(CFTypeRef *)cf);
            CFRelease(v20);
          }
          v19 = v27 & 0xFFFFFFFF00000000;
          v21 = v27;
          v23 = 1;
          v22 = 2;
          v24 = -86;
        }
        else
        {
          v19 = 0xAAAAAAAA00000000;
          v21 = 2863311530;
          v20 = *(const void **)cf;
          if (*(_QWORD *)cf)
          {
            CFRetain(*(CFTypeRef *)cf);
            CFRelease(v20);
          }
          v24 = 0;
          v23 = 0;
          v22 = -1431655766;
          v18 = v12;
        }
      }
    }
    do
    {
      v28 = v18;
      v18 = SVG::consumeWsp((uint64_t *)a2, v18);
    }
    while (v29);
    v30 = *(char *)(a2 + 23) >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    if (v28 == v30)
    {
      if (v20)
        CFRetain(v20);
      v31 = v19 | v21;
      v32 = (unint64_t)v20;
    }
    else
    {
      v32 = 0xAAAAAAAAAAAAAA00;
      v22 = -1431655766;
      v31 = 0xAAAAAAAAAAAAAAAALL;
      v24 = -86;
      v23 = -86;
    }
    if (v20)
      CFRelease(v20);
    if (v28 != v30)
    {
LABEL_47:
      *(_DWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      return;
    }
    *(_QWORD *)&cf[8] = v32;
    cf[16] = v24;
    *(_WORD *)&cf[17] = -21846;
    cf[19] = -86;
    *(_QWORD *)&cf[20] = v31;
    v35 = v22;
    v36 = v23;
    v37 = -21846;
    v38 = -86;
    v4 = 3;
    goto LABEL_7;
  }
  *(_QWORD *)&cf[8] = v6;
  v39 = 2;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = a1 + 16;
  *(_DWORD *)(v8 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(v8, (uint64_t)&cf[8]);
  *(_DWORD *)(v8 + 40) = 2;
LABEL_9:
  if (v39 != -1)
    ((void (*)(_QWORD *, _BYTE *))*(&off_1E7137D20 + v39))(v33, &cf[8]);
}

uint64_t SVG::consumeOpacity(uint64_t a1)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;

  if (SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a1))
    return 0;
  v3 = 0;
  do
  {
    v4 = v3;
    v3 = SVG::consumeWsp((uint64_t *)a1, v3);
  }
  while (v5);
  v12 = NAN;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeNumber(a1, v4, (uint64_t)&v12);
  if (!(_BYTE)v14)
    return 0;
  v6 = v13;
  do
  {
    v7 = v6;
    v6 = SVG::consumeWsp((uint64_t *)a1, v6);
  }
  while (v8);
  v9 = *(unsigned __int8 *)(a1 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a1 + 8);
  if (v7 != v9)
    return 0;
  v10 = 1.0;
  if (v12 <= 1.0)
    v10 = v12;
  v11 = 0.0;
  if (v12 >= 0.0)
    v11 = v10;
  return *(_QWORD *)&v11;
}

unint64_t SVG::consumeStopColor(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  int v5;
  char v6;

  result = SVG::consumeStringAlone<8ul>((uint64_t)"inherit", a2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 4) = 0;
    v5 = 1;
LABEL_7:
    *(_DWORD *)(a1 + 16) = v5;
    return result;
  }
  result = SVG::consumeStringAlone<13ul>(a2);
  if ((_DWORD)result)
  {
    *(_QWORD *)(a1 + 4) = 0;
    *(_QWORD *)(a1 + 12) = 0x200000000;
    return result;
  }
  result = SVG::consumeAlone<SVG::PreserveAspectRatio>(a2, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumeColorWithICCColor);
  if (v6)
  {
    *(_QWORD *)(a1 + 4) = result;
    *(_BYTE *)(a1 + 12) = 1;
    v5 = 2;
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

CFTypeRef SVG::createColorObject@<X0>(CFArrayRef theArray@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>, CGFloat a4@<D0>)
{
  unsigned __int16 v4;
  CFTypeRef result;
  uint64_t v8;
  uint64_t v9;

  v4 = a2;
  if (HIDWORD(a2))
  {
    if (HIDWORD(a2) == 1)
    {
      result = (CFTypeRef)CFArrayGetCount(theArray);
      if ((uint64_t)result <= v4)
      {
        *a3 = 0;
      }
      else
      {
        result = CFArrayGetValueAtIndex(theArray, v4);
        *a3 = result;
        if (result)
          return CFRetain(result);
      }
    }
    else
    {
      v8 = std::__throw_bad_variant_access[abi:nn180100]();
      return (CFTypeRef)std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>(v8, v9);
    }
  }
  else
  {
    result = CGColorCreateSRGB((double)a2 / 255.0, (double)BYTE1(a2) / 255.0, (double)BYTE2(a2) / 255.0, a4);
    *a3 = result;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137CC0 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137CD8 + v4))(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SB_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8))
  {
    if (*(_QWORD *)a2)
      CFRelease(*(CFTypeRef *)a2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CC0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[4] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CC0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[4] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__assign_alt[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__assign_alt[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16) == 2)
    std::__optional_storage_base<SVG::CF<__CFURL const*>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<SVG::CF<__CFURL const*>,false>>(a2, a3);
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>(a1, a3);
}

void std::__optional_storage_base<SVG::CF<__CFURL const*>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<SVG::CF<__CFURL const*>,false>>(uint64_t a1, uint64_t *a2)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v4 = *(const void **)a1;
      if (*(_QWORD *)a1)
        CFRelease(v4);
      v5 = *a2;
      *a2 = 0;
      *(_QWORD *)a1 = v5;
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v6);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_1E7137CC0 + v4))(&v7, a1);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (*((_BYTE *)a2 + 8))
  {
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
  *(_DWORD *)(a1 + 16) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 48);
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137CF0 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137D08 + v4))(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D20 + v3))(&v5, a2 + 8);
  *(_DWORD *)(a2 + 40) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 48);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CF0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[12] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 48);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CF0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[12] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__assign_alt[abi:nn180100]<2ul,SVG::Presentation::Paint,SVG::Presentation::Paint>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__assign_alt[abi:nn180100]<2ul,SVG::Presentation::Paint,SVG::Presentation::Paint>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48) == 2)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(a2 + 8, a3 + 8);
  else
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::Paint>(a1, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 32);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137D20 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137D48 + v4))(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 2;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__assign_alt[abi:nn180100]<3ul,SVG::Presentation::IRIWithFallback,SVG::Presentation::IRIWithFallback>(*a1, a2, a3).n128_u64[0];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 4;
  return result;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__assign_alt[abi:nn180100]<3ul,SVG::Presentation::IRIWithFallback,SVG::Presentation::IRIWithFallback>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  char v10;

  v5 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, uint64_t))*(&off_1E7137D20 + v5))(&v10, a1);
LABEL_7:
    *(_DWORD *)(a1 + 32) = -1;
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v9;
    result = *(__n128 *)(a3 + 1);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
    *(__n128 *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 32) = 3;
    return result;
  }
  if (*(_QWORD *)a2)
    CFRelease(*(CFTypeRef *)a2);
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  result = *(__n128 *)(a3 + 1);
  *(_BYTE *)(a2 + 24) = *((_BYTE *)a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::Paint>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_1E7137CF0 + v4))(&v6, a1);
  *(_DWORD *)(a1 + 48) = -1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(a1 + 8, a2 + 8);
  *(_DWORD *)(a1 + 48) = 2;
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D20 + v4))(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137D70 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 32);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137D98 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137DB0 + v4))(&v5, result, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SB_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D98 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D98 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEEOSX_EEEDcSP_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__assign_alt[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__assign_alt[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  if (*(_DWORD *)(a1 + 32) == 2)
    std::__optional_storage_base<std::vector<SVG::Length>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<SVG::Length>,false>>(a2, a3);
  else
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>(a1, (uint64_t)a3);
}

__n128 std::__optional_storage_base<std::vector<SVG::Length>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::vector<SVG::Length>,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void *v4;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a1, a2).n128_u64[0];
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

__n128 std::vector<SVG::Length>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_1E7137D98 + v4))(&v6, a1);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 32) = 2;
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137CC0 + v4))(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137DC8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  const void *v4;

  *a2 = 0;
  a2[8] = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    v4 = *(const void **)a3;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    if (v4)
      CFRetain(v4);
    a2[8] = 1;
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137CF0 + v4))(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137DE0 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 40) = -1;
  return std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1> const&>(a2 + 8, a3 + 8);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D20 + v4))(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137DF8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  __n128 result;

  v5 = *(const void **)a3;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  if (v5)
    CFRetain(v5);
  result = *(__n128 *)(a3 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D98 + v4))(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137E20 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
    *((_BYTE *)std::vector<SVG::Length>::vector((_QWORD *)a2, a3) + 24) = 1;
}

_QWORD *std::vector<SVG::Length>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<SVG::Length>::__vallocate[abi:nn180100](a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<SVG::Length>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Length>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Length>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 48);
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137CF0 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 48) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137E38 + v4))(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 48);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CF0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[12] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 48);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CF0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[12] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKST_EEEDcSL_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))*(&off_1E7137CF0 + v5))(&v13, v4);
LABEL_7:
    *(_BYTE *)(v4 + 8) = 0;
    v10 = v4 + 8;
    *(_DWORD *)(v10 + 40) = -1;
    *(_DWORD *)(v10 + 32) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1> const&>(v10, a3 + 8);
    *(_DWORD *)(v10 + 40) = 2;
    return result;
  }
  v7 = a2 + 8;
  v8 = *(unsigned int *)(a2 + 40);
  v9 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return result;
  }
  else if ((_DWORD)v9 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D20 + v8))(&v12, v7);
    *(_DWORD *)(a2 + 40) = -1;
    return result;
  }
  v11 = v7;
  return ((uint64_t (*)(uint64_t *))*(&off_1E7137E50 + v9))(&v11);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  const void *v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      SVG::CF<__CFURL const*>::operator=((const void **)a2, (const void **)a3);
      result = *(__n128 *)(a3 + 8);
      *(_BYTE *)(a2 + 24) = *(_BYTE *)(a3 + 24);
      *(__n128 *)(a2 + 8) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))*(&off_1E7137D20 + v5))(&v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  v8 = *(const void **)a3;
  *(_QWORD *)v4 = *(_QWORD *)a3;
  if (v8)
    CFRetain(v8);
  result = *(__n128 *)(a3 + 8);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a3 + 24);
  *(__n128 *)(v4 + 8) = result;
  *(_DWORD *)(v4 + 32) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation4NoneENS9_12CurrentColorENS9_5ColorENS9_15IRIWithFallbackENS9_11FromContextEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJSA_SB_SC_SD_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D20 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 4;
  return result;
}

const void **SVG::CF<__CFURL const*>::operator=(const void **a1, const void **a2)
{
  const void *v4;
  const void *v5;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  v5 = *a2;
  *a1 = *a2;
  if (v5)
    CFRetain(v5);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 32);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137D98 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137E78 + v4))(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D98 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137D98 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS_6vectorINS8_6LengthENS_9allocatorISE_EEEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, char **a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  void *__p[3];
  char v22;

  v3 = *a1;
  if (*(_DWORD *)(*a1 + 32) == 2)
  {
    if (*((unsigned __int8 *)a2 + 24) == *(unsigned __int8 *)(a3 + 24))
    {
      if (a2 != (char **)a3 && *((_BYTE *)a2 + 24))
      {
        v5 = *(char **)a3;
        v6 = *(char **)(a3 + 8);
        v7 = (int64_t)&v6[-*(_QWORD *)a3];
        v8 = v7 >> 4;
        v9 = (uint64_t)a2[2];
        v10 = *a2;
        if (v7 >> 4 <= (unint64_t)((v9 - (uint64_t)*a2) >> 4))
        {
          v13 = (void **)(a2 + 1);
          v16 = a2[1];
          v17 = (v16 - v10) >> 4;
          if (v17 < v8)
          {
            v18 = &v5[16 * v17];
            if (v16 != v10)
            {
              memmove(v10, v5, v16 - v10);
              v10 = (char *)*v13;
            }
            v7 = v6 - v18;
            if (v6 == v18)
              goto LABEL_33;
            v19 = v10;
            v20 = v18;
            goto LABEL_32;
          }
        }
        else
        {
          if (v10)
          {
            a2[1] = v10;
            operator delete(v10);
            v9 = 0;
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
          }
          if (v7 < 0)
            abort();
          v11 = v9 >> 3;
          if (v9 >> 3 <= v8)
            v11 = v7 >> 4;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
            v12 = 0xFFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          std::vector<SVG::Length>::__vallocate[abi:nn180100](a2, v12);
          v14 = a2[1];
          v13 = (void **)(a2 + 1);
          v10 = v14;
        }
        if (v6 == v5)
        {
LABEL_33:
          *v13 = &v10[v7];
          return;
        }
        v19 = v10;
        v20 = v5;
LABEL_32:
        memmove(v19, v20, v7);
        goto LABEL_33;
      }
    }
    else if (*((_BYTE *)a2 + 24))
    {
      v15 = *a2;
      if (*a2)
      {
        a2[1] = v15;
        operator delete(v15);
      }
      *((_BYTE *)a2 + 24) = 0;
    }
    else
    {
      std::vector<SVG::Length>::vector(a2, a3);
      *((_BYTE *)a2 + 24) = 1;
    }
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    v22 = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      std::vector<SVG::Length>::vector(__p, a3);
      v22 = 1;
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__emplace[abi:nn180100]<2ul,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>(v3, (uint64_t)__p);
    if (v22 && __p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1E7137CC0 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))*(&off_1E7137E90 + v4))(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CC0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[4] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))*(&off_1E7137CC0 + v5))(&v6, v4);
  }
  *v4 = *a3;
  v4[4] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_14ValueOrKeywordINS8_2CFIPK7__CFURLEEEEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSN_1EJSA_SB_SI_EEERKSZ_EEEDcSR_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  const void *v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      if (*(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a3 + 8))
      {
        if (*(_BYTE *)(a2 + 8))
          SVG::CF<__CFURL const*>::operator=((const void **)a2, (const void **)a3);
      }
      else if (*(_BYTE *)(a2 + 8))
      {
        if (*(_QWORD *)a2)
          CFRelease(*(CFTypeRef *)a2);
        *(_BYTE *)(a2 + 8) = 0;
      }
      else
      {
        v8 = *(const void **)a3;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        if (v8)
          CFRetain(v8);
        *(_BYTE *)(a2 + 8) = 1;
      }
      return;
    }
    ((void (*)(char *, uint64_t))*(&off_1E7137CC0 + v5))(&v9, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    v7 = *(const void **)a3;
    *(_QWORD *)v4 = *(_QWORD *)a3;
    if (v7)
      CFRetain(v7);
    *(_BYTE *)(v4 + 8) = 1;
  }
  *(_DWORD *)(v4 + 16) = 2;
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
  int v0;
  char *v1;

  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return std::string::basic_string[abi:nn180100]<0>(v0, v1);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

BOOL SVG::consumeStringAlone<8ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a2, v4);
  }
  while (v6);
  v7 = SVG::consumeString<8ul>(a1, a2, v5);
  if (!v8)
    return 0;
  do
  {
    v9 = v7;
    v7 = SVG::consumeWsp((uint64_t *)a2, v7);
  }
  while (v10);
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  return v9 == v11;
}

BOOL SVG::consumeStringAlone<5ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a2, v4);
  }
  while (v6);
  v7 = SVG::consumeString<5ul>(a1, a2, v5);
  if (!v8)
    return 0;
  do
  {
    v9 = v7;
    v7 = SVG::consumeWsp((uint64_t *)a2, v7);
  }
  while (v10);
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  return v9 == v11;
}

unint64_t SVG::consumeString<8ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 7;
  if (v3 >= a3 + 7)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 7)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t SVG::consumeString<2ul>(char *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v5 = a3 + 1;
  if (v3 >= a3 + 1
    && (v4 >= 0 ? (v9 = a2) : (v9 = (uint64_t *)*a2),
        (v10 = *((char *)v9 + a3), __tolower(*a1) == v10)
     || (*((char *)a2 + 23) >= 0 ? (v11 = a2) : (v11 = (uint64_t *)*a2), v12 = *((char *)v11 + a3), __toupper(*a1) == v12)))
  {
    v13 = v5 & 0xFFFFFFFFFFFFFF00;
    v14 = v5;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  return v13 | v14;
}

void SVG::consumeFuncIRI(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  CFURLRef v18;
  CFURLRef v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  unint64_t v24;

  v5 = SVG::consumeString<4ul>((uint64_t)"url", a1, a2);
  if (!v6)
    goto LABEL_24;
  do
  {
    v7 = v5;
    v5 = SVG::consumeWsp((uint64_t *)a1, v5);
  }
  while (v8);
  v9 = SVG::consumeString<2ul>("(", (uint64_t *)a1, v7);
  if (!v10)
    goto LABEL_24;
  do
  {
    v11 = v9;
    v9 = SVG::consumeWsp((uint64_t *)a1, v9);
  }
  while (v12);
  v13 = *(unsigned __int8 *)(a1 + 23);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a1 + 8);
  if (v13 <= v11)
  {
    v16 = v11;
  }
  else
  {
    v15 = v14 >= 0 ? a1 : *(_QWORD *)a1;
    v16 = v11;
    while (*(_BYTE *)(v15 + v16) != 41)
    {
      if (v13 == ++v16)
      {
        v16 = v13;
        break;
      }
    }
  }
  v17 = v14 >= 0 ? a1 : *(_QWORD *)a1;
  v18 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)(v17 + v11), v16 - v11, 0x8000100u, 0);
  if (v18)
  {
    v19 = v18;
    CFRetain(v18);
    CFRelease(v19);
    do
    {
      v20 = v16;
      v16 = SVG::consumeWsp((uint64_t *)a1, v16);
    }
    while (v21);
    v22 = SVG::consumeString<2ul>(")", (uint64_t *)a1, v20);
    if (v23)
    {
      v24 = v22;
      CFRetain(v19);
      *(_QWORD *)a3 = v19;
      *(_QWORD *)(a3 + 8) = v24;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
    }
    CFRelease(v19);
  }
  else
  {
LABEL_24:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

unint64_t SVG::consumeString<4ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 3;
  if (v3 >= a3 + 3)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 3)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t SVG::consumeHexColor@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  unint64_t v10[3];
  unint64_t v11[3];
  unint64_t v12[3];
  unint64_t v13[3];
  unint64_t v14[3];

  result = SVG::consumeString<2ul>("#", a1, a2);
  if (v6
    && (memset(v14, 170, sizeof(v14)), result = SVG::consumeHexDigit((uint64_t)v14, a1, result), LOBYTE(v14[2]))
    && (memset(v13, 170, sizeof(v13)), result = SVG::consumeHexDigit((uint64_t)v13, a1, v14[1]), LOBYTE(v13[2]))
    && (memset(v12, 170, sizeof(v12)), result = SVG::consumeHexDigit((uint64_t)v12, a1, v13[1]), LOBYTE(v12[2])))
  {
    memset(v11, 170, sizeof(v11));
    v7 = v12[1];
    result = SVG::consumeHexDigit((uint64_t)v11, a1, v12[1]);
    if (LOBYTE(v11[2])
      && (memset(v10, 170, sizeof(v10)), result = SVG::consumeHexDigit((uint64_t)v10, a1, v11[1]), LOBYTE(v10[2]))
      && (memset(v9, 170, sizeof(v9)), result = SVG::consumeHexDigit((uint64_t)v9, a1, v10[1]), LOBYTE(v9[2])))
    {
      v8 = v9[1];
      *(_QWORD *)a3 = (LOBYTE(v13[0]) | (16 * LOBYTE(v14[0]))) | (unint64_t)(unsigned __int16)((LOBYTE(v11[0]) | (16 * LOBYTE(v12[0]))) << 8) | ((unint64_t)(LOBYTE(v9[0]) | (16 * LOBYTE(v10[0]))) << 16) | 0xAA000000;
      *(_QWORD *)(a3 + 8) = v8;
    }
    else
    {
      *(_QWORD *)a3 = (LOBYTE(v14[0]) | (16 * LOBYTE(v14[0]))) | (unint64_t)(unsigned __int16)((LOBYTE(v13[0]) | (16 * LOBYTE(v13[0]))) << 8) | ((unint64_t)(LOBYTE(v12[0]) | (16 * LOBYTE(v12[0]))) << 16) | 0xAA000000;
      *(_QWORD *)(a3 + 8) = v7;
    }
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

_QWORD *SVG::consumeRGBColor@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SVG::consumeFunction<SVG::Presentation::Color,4ul>(a3, a1, a2, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t *, _QWORD *))SVG::consumeRGBColorValue);
}

_QWORD *SVG::consumePercentRGBColor@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SVG::consumeFunction<SVG::Presentation::Color,4ul>(a3, a1, a2, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t *, _QWORD *))SVG::consumePercentRGBColorValue);
}

uint64_t SVG::consumeHexDigit(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  int v4;
  uint64_t *v5;
  int v6;
  char v7;
  char v8;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (v3 <= a3)
    goto LABEL_15;
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = *((unsigned __int8 *)v5 + a3);
  if ((v6 - 48) > 9)
  {
    if ((v6 - 65) <= 5)
    {
      v7 = v6 - 55;
LABEL_13:
      *(_BYTE *)result = v7;
      *(_QWORD *)(result + 8) = a3 + 1;
      goto LABEL_14;
    }
    if ((v6 - 97) <= 5)
    {
      v7 = v6 - 87;
      goto LABEL_13;
    }
LABEL_15:
    v8 = 0;
    *(_BYTE *)result = 0;
    goto LABEL_16;
  }
  *(_BYTE *)result = v6 - 48;
  *(_QWORD *)(result + 8) = a3 + 1;
LABEL_14:
  v8 = 1;
LABEL_16:
  *(_BYTE *)(result + 16) = v8;
  return result;
}

_QWORD *SVG::consumeFunction<SVG::Presentation::Color,4ul>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *(*a4)(_QWORD *__return_ptr, uint64_t *, _QWORD *))
{
  _QWORD *result;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD v19[3];

  result = (_QWORD *)SVG::consumeString<4ul>((uint64_t)"rgb", (uint64_t)a2, a3);
  if (!v8)
    goto LABEL_10;
  do
  {
    v9 = (uint64_t)result;
    result = (_QWORD *)SVG::consumeWsp(a2, (unint64_t)result);
  }
  while (v10);
  result = (_QWORD *)SVG::consumeString<2ul>("(", a2, v9);
  if (!v11)
  {
LABEL_10:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
  do
  {
    v12 = result;
    result = (_QWORD *)SVG::consumeWsp(a2, (unint64_t)result);
  }
  while (v13);
  memset(v19, 170, sizeof(v19));
  result = a4(v19, a2, v12);
  v14 = v19[2];
  if (!LOBYTE(v19[2]))
    goto LABEL_12;
  v15 = v19[1];
  do
  {
    v16 = v15;
    v15 = SVG::consumeWsp(a2, v15);
  }
  while (v17);
  result = (_QWORD *)SVG::consumeString<2ul>(")", a2, v16);
  if (!v18)
  {
    v14 = 0;
LABEL_12:
    *(_BYTE *)a1 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a1 = v19[0];
  *(_QWORD *)(a1 + 8) = result;
  v14 = 1;
LABEL_13:
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

void SVG::consumeRGBColorValue(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];

  memset(v16, 170, sizeof(v16));
  SVG::consumeInteger((uint64_t)a1, a2, (uint64_t)v16);
  if (LOBYTE(v16[2])
    && (v5 = SVG::consumeCommaSpace(a1, v16[1]), v6)
    && (memset(v15, 170, sizeof(v15)), SVG::consumeInteger((uint64_t)a1, v5, (uint64_t)v15), LOBYTE(v15[2]))
    && (v7 = SVG::consumeCommaSpace(a1, v15[1]), v8))
  {
    memset(v14, 170, sizeof(v14));
    SVG::consumeInteger((uint64_t)a1, v7, (uint64_t)v14);
    v9 = v14[2];
    if (LOBYTE(v14[2]))
    {
      v10 = v16[0];
      v11 = 255;
      if (v16[0] >= 255)
        v10 = 255;
      v12 = v15[0];
      if (v15[0] >= 255)
        v12 = 255;
      v13 = v14[1];
      if (v14[0] < 255)
        v11 = v14[0];
      *(_QWORD *)a3 = v10 & ~(v10 >> 63) | ((v12 & ~(v12 >> 63)) << 8) | ((v11 & ~(v11 >> 63)) << 16) | 0xAA000000;
      *(_QWORD *)(a3 + 8) = v13;
      v9 = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 16) = v9;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

unint64_t SVG::consumeCommaSpace(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;

  do
  {
    v4 = a2;
    a2 = SVG::consumeWsp(a1, a2);
  }
  while (v5);
  v6 = SVG::consumeString<2ul>(",", a1, v4);
  if (!v7)
    return 0;
  do
  {
    v8 = v6;
    v6 = SVG::consumeWsp(a1, v6);
  }
  while (v9);
  return v8;
}

void SVG::consumePercentRGBColorValue(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  unint64_t v30;

  v28 = NAN;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v30 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumePathNumber((uint64_t)a1, a2, (uint64_t)&v28);
  if ((_BYTE)v30)
  {
    v5 = SVG::consumeString<2ul>("%", a1, v29);
    if (v6)
    {
      v7 = SVG::consumeCommaSpace(a1, v5);
      if (v8)
      {
        v25 = NAN;
        v26 = 0xAAAAAAAAAAAAAAAALL;
        v27 = 0xAAAAAAAAAAAAAAAALL;
        SVG::consumePathNumber((uint64_t)a1, v7, (uint64_t)&v25);
        if ((_BYTE)v27)
        {
          v9 = SVG::consumeString<2ul>("%", a1, v26);
          if (v10)
          {
            v11 = SVG::consumeCommaSpace(a1, v9);
            if (v12)
            {
              v22 = NAN;
              v23 = 0xAAAAAAAAAAAAAAAALL;
              v24 = 0xAAAAAAAAAAAAAAAALL;
              SVG::consumePathNumber((uint64_t)a1, v11, (uint64_t)&v22);
              v13 = v24;
              if ((_BYTE)v24)
              {
                v14 = SVG::consumeString<2ul>("%", a1, v23);
                if (v15)
                {
                  v16 = 255.0;
                  v17 = v28 * 255.0 / 100.0;
                  if (v28 > 100.0)
                    v17 = 255.0;
                  v18 = 0.0;
                  if (v28 < 0.0)
                    v17 = 0.0;
                  v19 = (int)v17;
                  v20 = v25 * 255.0 / 100.0;
                  if (v25 > 100.0)
                    v20 = 255.0;
                  if (v25 >= 0.0)
                    v21 = v20;
                  else
                    v21 = 0.0;
                  if (v22 <= 100.0)
                    v16 = v22 * 255.0 / 100.0;
                  if (v22 >= 0.0)
                    v18 = v16;
                  *(_QWORD *)a3 = v19 | ((unint64_t)(int)v21 << 8) | ((unint64_t)(int)v18 << 16) | 0xAA000000;
                  *(_QWORD *)(a3 + 8) = v14;
                  v13 = 1;
                  goto LABEL_27;
                }
                v13 = 0;
              }
              *(_BYTE *)a3 = 0;
LABEL_27:
              *(_BYTE *)(a3 + 16) = v13;
              return;
            }
          }
        }
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
}

unint64_t SVG::consumeString<10ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 9;
  if (v3 >= a3 + 9)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 9)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

BOOL SVG::consumeStringAlone<14ul>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __darwin_ct_rune_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;

  v2 = 0;
  do
  {
    v3 = v2;
    v2 = SVG::consumeWsp((uint64_t *)a1, v2);
  }
  while (v4);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v6 = v3 + 13;
  if (v5 >= v3 + 13)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
      v10 = *(char *)(v9 + v3 + v8);
      v11 = aOptimizespeed[v8];
      if (__tolower(v11) != v10)
      {
        v12 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
        v13 = *(char *)(v12 + v3 + v8);
        if (__toupper(v11) != v13)
          break;
      }
      if (++v8 == 13)
      {
        do
        {
          v14 = v6;
          v6 = SVG::consumeWsp((uint64_t *)a1, v6);
        }
        while (v15);
        v16 = *(unsigned __int8 *)(a1 + 23);
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(a1 + 8);
        return v14 == v16;
      }
    }
  }
  return 0;
}

BOOL SVG::consumeStringAlone<7ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a2, v4);
  }
  while (v6);
  v7 = SVG::consumeString<7ul>(a1, a2, v5);
  if (!v8)
    return 0;
  do
  {
    v9 = v7;
    v7 = SVG::consumeWsp((uint64_t *)a2, v7);
  }
  while (v10);
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  return v9 == v11;
}

BOOL SVG::consumeStringAlone<6ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a2, v4);
  }
  while (v6);
  v7 = SVG::consumeString<6ul>(a1, a2, v5);
  if (!v8)
    return 0;
  do
  {
    v9 = v7;
    v7 = SVG::consumeWsp((uint64_t *)a2, v7);
  }
  while (v10);
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  return v9 == v11;
}

unint64_t SVG::consumeString<7ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 6;
  if (v3 >= a3 + 6)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v12 = *(char *)(v11 + a3 + v10);
      if (__tolower(*(char *)(a1 + v10)) != v12)
      {
        v13 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v14 = *(char *)(v13 + a3 + v10);
        if (__toupper(*(char *)(a1 + v10)) != v14)
          break;
      }
      if (++v10 == 6)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

BOOL SVG::consumeStringAlone<13ul>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v2 = 0;
  do
  {
    v3 = v2;
    v2 = SVG::consumeWsp((uint64_t *)a1, v2);
  }
  while (v4);
  v5 = SVG::consumeString<13ul>(a1, v3);
  if (!v6)
    return 0;
  do
  {
    v7 = v5;
    v5 = SVG::consumeWsp((uint64_t *)a1, v5);
  }
  while (v8);
  v9 = *(unsigned __int8 *)(a1 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a1 + 8);
  return v7 == v9;
}

size_t SVG::consumeColorWithICCColor@<X0>(std::string *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  std::string::size_type v18;
  char v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  _BOOL4 v34;
  void *v35;
  int v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  std::string::size_type v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  _QWORD v52[3];
  void *v53[2];
  uint64_t v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61;
  _BYTE v62[15];
  char v63;
  __int128 __p;
  uint64_t v65;
  std::string v66;
  _BYTE v67[24];
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  _QWORD v72[5];

  v72[2] = *MEMORY[0x1E0C80C00];
  memset(v52, 170, sizeof(v52));
  SVG::consumeHexColor((uint64_t *)a1, a2, (uint64_t)v52);
  if (LOBYTE(v52[2])
    || (memset(v52, 170, sizeof(v52)),
        SVG::consumeFunction<SVG::Presentation::Color,4ul>((uint64_t)v52, (uint64_t *)a1, a2, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t *, _QWORD *))SVG::consumeRGBColorValue), LOBYTE(v52[2]))|| (memset(v52, 170, sizeof(v52)), SVG::consumeFunction<SVG::Presentation::Color,4ul>((uint64_t)v52, (uint64_t *)a1, a2, (_QWORD *(*)(_QWORD *__return_ptr, uint64_t *, _QWORD *))SVG::consumePercentRGBColorValue), LOBYTE(v52[2]))|| (memset(v52, 170, sizeof(v52)), result = SVG::consumeColorKeyword((uint64_t *)a1, a2, (uint64_t)v52), LOBYTE(v52[2])))
  {
    v7 = v52[1];
    v8 = v52[1];
    do
    {
      v9 = v8;
      v8 = SVG::consumeWsp((uint64_t *)a1, v8);
    }
    while (v10);
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v50[16] = v11;
    v51 = v11;
    v49 = v11;
    *(_OWORD *)v50 = v11;
    v12 = SVG::consumeString<10ul>((uint64_t)"icc-color", (uint64_t)a1, v9);
    if (!v13)
      goto LABEL_25;
    do
    {
      v14 = v12;
      v12 = SVG::consumeWsp((uint64_t *)a1, v12);
    }
    while (v15);
    v16 = SVG::consumeString<2ul>("(", (uint64_t *)a1, v14);
    if (v17)
    {
      v47 = v7;
      v48 = a3;
      do
      {
        v18 = v16;
        v16 = SVG::consumeWsp((uint64_t *)a1, v16);
      }
      while (v19);
      *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v59 = v20;
      v60 = v20;
      v57 = v20;
      v58 = v20;
      memset(v72, 170, 15);
      v21 = v18;
      while (1)
      {
        v22 = SVG::consumeWsp((uint64_t *)a1, v21);
        v24 = v23;
        v25 = SVG::consumeString<2ul>(",", (uint64_t *)a1, v21);
        v27 = v26;
        v28 = SVG::consumeString<2ul>("(", (uint64_t *)a1, v21);
        v30 = v29;
        v31 = SVG::consumeString<2ul>(")", (uint64_t *)a1, v21);
        if (v24 || v27 || v30 || v32)
          break;
        if (v22 <= v25)
          v33 = v25;
        else
          v33 = v22;
        if (v33 <= v28)
          v33 = v28;
        if (v33 <= v31)
          v21 = v31;
        else
          v21 = v33;
      }
      if (v21 == v18)
      {
        LOBYTE(v57) = 0;
        BYTE8(v60) = 0;
      }
      else
      {
        std::string::basic_string((std::string *)&v69, a1, v18, v21 - v18, (std::allocator<char> *)&v66);
        if (SBYTE7(v70) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
          v34 = SBYTE7(v70) < 0;
        }
        else
        {
          v34 = 0;
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v69;
          v66.__r_.__value_.__r.__words[2] = v70;
        }
        v72[0] = v66.__r_.__value_.__l.__size_;
        v35 = (void *)v66.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v72 + 7) = *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7);
        v36 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
        *(_QWORD *)v67 = v21;
        memset(&v66, 0, sizeof(v66));
        if (v34)
          operator delete((void *)v69);
        v71 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v37 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v69 = v37;
        v70 = v37;
        SVG::consumeOneOrMoreGeneric<double>((uint64_t)a1, (void (*)(__int128 *__return_ptr))SVG::consumeNumber, (uint64_t (*)(uint64_t, _QWORD))SVG::consumeCommaWsp, (uint64_t)&v69);
        if ((_BYTE)v71)
        {
          v61 = v35;
          *(_QWORD *)v62 = v72[0];
          *(_QWORD *)&v62[7] = *(_QWORD *)((char *)v72 + 7);
          v63 = v36;
          __p = v69;
          v65 = v70;
          v69 = 0uLL;
          *(_QWORD *)&v70 = 0;
          SVG::ValueWithOffset<SVG::ICCColor>::ValueWithOffset(&v66, (__int128 *)&v61, *((std::string::size_type *)&v70 + 1));
          v57 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          memset(&v66, 0, sizeof(v66));
          v38 = *(void **)v67;
          memset(v67, 0, sizeof(v67));
          *(_QWORD *)&v58 = *((_QWORD *)&v66.__r_.__value_.__l + 2);
          *((_QWORD *)&v58 + 1) = v38;
          v39 = *(_OWORD *)&v67[8];
          v59 = *(_OWORD *)&v67[8];
          v40 = v68;
          *(_QWORD *)&v60 = v68;
          BYTE8(v60) = 1;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v63 < 0)
            operator delete(v61);
          if ((_BYTE)v71 && (_QWORD)v69)
          {
            *((_QWORD *)&v69 + 1) = v69;
            operator delete((void *)v69);
          }
          do
          {
            v41 = v40;
            v40 = SVG::consumeWsp((uint64_t *)a1, v40);
          }
          while (v42);
          v43 = SVG::consumeString<2ul>(")", (uint64_t *)a1, v41);
          if (v44)
          {
            *(_OWORD *)v53 = v57;
            v45 = v58;
            v57 = 0uLL;
            v58 = 0uLL;
            v54 = v45;
            v55 = v38;
            v56 = v39;
            v59 = 0uLL;
            SVG::ValueWithOffset<SVG::ICCColor>::ValueWithOffset(&v66, (__int128 *)v53, v43);
            v46 = *(_QWORD *)&v67[16];
            v7 = v68;
            *(_QWORD *)v50 = *((_QWORD *)&v66.__r_.__value_.__l + 2);
            v49 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
            memset(&v66, 0, sizeof(v66));
            *(_OWORD *)&v50[8] = *(_OWORD *)v67;
            memset(v67, 0, sizeof(v67));
            *(_QWORD *)&v50[24] = v46;
            *(_QWORD *)&v51 = v68;
            BYTE8(v51) = 1;
            if (v55)
            {
              *(_QWORD *)&v56 = v55;
              operator delete(v55);
            }
            a3 = v48;
            if (SHIBYTE(v54) < 0)
              operator delete(v53[0]);
            std::__optional_destruct_base<SVG::ValueWithOffset<SVG::ICCColor>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v57);
            goto LABEL_29;
          }
        }
        else
        {
          LOBYTE(v57) = 0;
          BYTE8(v60) = 0;
          if (v36 < 0)
            operator delete(v35);
        }
      }
      LOBYTE(v49) = 0;
      BYTE8(v51) = 0;
      std::__optional_destruct_base<SVG::ValueWithOffset<SVG::ICCColor>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v57);
      v7 = v47;
      a3 = v48;
    }
    else
    {
LABEL_25:
      LOBYTE(v49) = 0;
      BYTE8(v51) = 0;
    }
LABEL_29:
    *(_QWORD *)a3 = v52[0];
    *(_QWORD *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 16) = 1;
    return std::__optional_destruct_base<SVG::ValueWithOffset<SVG::ICCColor>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v49);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

unint64_t SVG::consumeString<13ul>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __darwin_ct_rune_t v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  v3 = a2 + 12;
  if (v2 >= a2 + 12)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
      v10 = *(char *)(v9 + a2 + v8);
      v11 = aCurrentcolor[v8];
      if (__tolower(v11) != v10)
      {
        v12 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
        v13 = *(char *)(v12 + a2 + v8);
        if (__toupper(v11) != v13)
          break;
      }
      if (++v8 == 12)
      {
        v5 = v3 & 0xFFFFFFFFFFFFFF00;
        v4 = v3;
        return v5 | v4;
      }
    }
  }
  v4 = 0;
  v5 = 0;
  return v5 | v4;
}

std::string *SVG::ValueWithOffset<SVG::ICCColor>::ValueWithOffset(std::string *this, __int128 *a2, std::string::size_type a3)
{
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  std::vector<double>::vector(this[1].__r_.__value_.__r.__words, (uint64_t)a2 + 24);
  this[2].__r_.__value_.__r.__words[0] = a3;
  return this;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<double>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<double>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

void SVG::consumeOneOrMoreGeneric<double>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr)@<X2>, uint64_t (*a3)(uint64_t, _QWORD)@<X3>, uint64_t a4@<X8>)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  void *__dst[2];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  void *__p;
  char *v35;
  char *v36;

  *(_QWORD *)&v32 = -1;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  a2(&v32);
  if ((_BYTE)v33)
  {
    v8 = (char *)operator new(8uLL);
    __p = v8;
    *(_QWORD *)v8 = v32;
    v9 = v8 + 8;
    v36 = v8 + 8;
    while (1)
    {
      v35 = v9;
      v10 = *((_QWORD *)&v32 + 1);
      v11 = a3(a1, *((_QWORD *)&v32 + 1));
      if (v12)
        v10 = v11;
      ((void (*)(void **__return_ptr, uint64_t, uint64_t))a2)(__dst, a1, v10);
      LOBYTE(v33) = v30;
      v32 = *(_OWORD *)__dst;
      if (!(_BYTE)v30)
        break;
      v13 = v35;
      if (v35 >= v36)
      {
        v14 = (char *)__p;
        v15 = (v35 - (_BYTE *)__p) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v17 = v36 - (_BYTE *)__p;
        if ((v36 - (_BYTE *)__p) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v36, v18);
          v14 = (char *)__p;
          v13 = v35;
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = v32;
        v9 = v20 + 8;
        while (v13 != v14)
        {
          v21 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v20 - 1) = v21;
          v20 -= 8;
        }
        __p = v20;
        v35 = v9;
        v36 = &v19[8 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v35 = v32;
        v9 = v13 + 8;
      }
    }
    v23 = (char *)__p;
    v22 = v35;
    __p = 0;
    v35 = 0;
    v36 = 0;
    __dst[1] = 0;
    v30 = 0;
    __dst[0] = 0;
    v24 = v22 - v23;
    if (v22 == v23)
    {
      v28 = 0;
      v26 = 0;
      v27 = 0;
    }
    else
    {
      std::vector<double>::__vallocate[abi:nn180100](__dst, v24 >> 3);
      v25 = (char *)__dst[1];
      memmove(__dst[1], v23, v24);
      v26 = &v25[v24];
      v27 = __dst[0];
      v28 = v30;
    }
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 8) = v26;
    v30 = 0;
    v31 = v10;
    __dst[0] = 0;
    __dst[1] = 0;
    *(_QWORD *)(a4 + 16) = v28;
    *(_QWORD *)(a4 + 24) = v10;
    *(_BYTE *)(a4 + 32) = 1;
    if (v23)
      operator delete(v23);
    if (__p)
    {
      v35 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
  }
}

uint64_t std::__optional_destruct_base<SVG::ValueWithOffset<SVG::ICCColor>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG12Presentation12NotSpecifiedENS9_7InheritENS9_5PaintEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 40) = -1;
  return std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext>,(std::__variant_detail::_Trait)1>>(a2 + 8, a3 + 8);
}

uint64_t SVG::ShapeElement::ShapeElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  __int128 v10;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  void *v16[2];
  char v17;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E71373F8;
  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 640) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 656) = v7;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(v6 + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, "transform");
  std::string::basic_string[abi:nn180100]<0>(v16, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)__p, (uint64_t)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SBYTE7(v13) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      return a1;
  }
  else if (!v8)
  {
    return a1;
  }
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v13 = v9;
  v14 = v9;
  *(_OWORD *)__p = v9;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  SVG::parseTransform((uint64_t)(v8 + 64), (uint64_t)__p);
  if ((_BYTE)v15)
  {
    v10 = v13;
    *(_OWORD *)(a1 + 640) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 656) = v10;
    *(_OWORD *)(a1 + 672) = v14;
  }
  return a1;
}

uint64_t SVG::ShapeElement::appendChild()
{
  return 0;
}

uint64_t SVG::Element::isStructural(SVG::Element *this)
{
  return 0;
}

uint64_t *OTSVGGlyphRecordingCreate(std::mutex **a1, unsigned int a2)
{
  std::mutex *v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;
  __int128 v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  std::mutex *v16;
  std::mutex *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t ***v25;
  uint64_t **j;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v59;
  char *v60;
  std::mutex *v61;
  void *__p[2];
  char v63;
  _OWORD v64[4];
  void *v65[2];
  __int128 v66;
  __int128 v67;
  _OWORD v68[9];
  unint64_t v69;

  v4 = *a1;
  std::mutex::lock(*a1);
  v5 = a2;
  v6 = *(_QWORD *)&(*a1)[5].__m_.__opaque[16];
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)&(*a1)[5].__m_.__opaque[8] + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t **)*i)
      {
        v11 = (unint64_t)i[1];
        if (v11 == a2)
        {
          if (*((unsigned __int16 *)i + 8) == a2)
          {
            if (i[3])
            {
              v15 = (uint64_t *)operator new();
              v46 = i[4];
              *v15 = (uint64_t)i[3];
              v15[1] = (uint64_t)v46;
              if (v46)
              {
                v47 = (unint64_t *)(v46 + 1);
                do
                  v48 = __ldxr(v47);
                while (__stxr(v48 + 1, v47));
              }
            }
            else
            {
              v15 = 0;
            }
            std::mutex::unlock(v4);
            return v15;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  std::mutex::unlock(v4);
  v69 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[7] = v12;
  v68[8] = v12;
  v68[5] = v12;
  v68[6] = v12;
  v68[3] = v12;
  v68[4] = v12;
  v68[1] = v12;
  v68[2] = v12;
  v68[0] = v12;
  v66 = v12;
  v67 = v12;
  v64[3] = v12;
  *(_OWORD *)v65 = v12;
  v64[1] = v12;
  v64[2] = v12;
  v64[0] = v12;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v64);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)"glyph", 5);
  std::ostream::operator<<();
  v13 = &(*a1)[1].__m_.__opaque[24];
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v64 + 8, __p);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(v13, (uint64_t)__p);
  v15 = (uint64_t *)v14;
  if ((v63 & 0x80000000) == 0)
  {
    if (!v14)
      goto LABEL_114;
LABEL_21:
    v15 = (uint64_t *)SVG::GlyphRecordingCreateWithElement((uint64_t)*a1, v15[5]);
    v16 = *a1;
    std::mutex::lock(*a1);
    v17 = *a1;
    if (v15)
    {
      v19 = *v15;
      v18 = (std::__shared_weak_count *)v15[1];
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v22 = *(_QWORD *)&v17[5].__m_.__opaque[16];
    v61 = v16;
    if (v22)
    {
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v24 = a2;
        if (v22 <= a2)
          v24 = a2 % v22;
      }
      else
      {
        v24 = ((_DWORD)v22 - 1) & a2;
      }
      v25 = *(uint64_t ****)(*(_QWORD *)&v17[5].__m_.__opaque[8] + 8 * v24);
      if (v25)
      {
        for (j = *v25; j; j = (uint64_t **)*j)
        {
          v27 = (unint64_t)j[1];
          if (v27 == a2)
          {
            if (*((unsigned __int16 *)j + 8) == a2)
              goto LABEL_108;
          }
          else
          {
            if (v23.u32[0] > 1uLL)
            {
              if (v27 >= v22)
                v27 %= v22;
            }
            else
            {
              v27 &= v22 - 1;
            }
            if (v27 != v24)
              break;
          }
        }
      }
    }
    else
    {
      v24 = 0xAAAAAAAAAAAAAAAALL;
    }
    v60 = &v17[5].__m_.__opaque[24];
    v28 = operator new(0x28uLL);
    *v28 = 0;
    v28[1] = a2;
    *((_WORD *)v28 + 8) = a2;
    v28[3] = v19;
    v28[4] = v18;
    if (v18)
    {
      v29 = (unint64_t *)&v18->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = (float)(unint64_t)(*(_QWORD *)&v17[5].__m_.__opaque[32] + 1);
    v32 = *(float *)&v17[5].__m_.__opaque[40];
    if (v22 && (float)(v32 * (float)v22) >= v31)
    {
LABEL_98:
      v52 = *(_QWORD *)&v17[5].__m_.__opaque[8];
      v53 = *(_QWORD **)(v52 + 8 * v24);
      if (v53)
      {
        *v28 = *v53;
      }
      else
      {
        v54 = *(_QWORD **)v60;
        *v28 = *(_QWORD *)v60;
        *(_QWORD *)v60 = v28;
        *(_QWORD *)(v52 + 8 * v24) = v60;
        if (!v54)
          goto LABEL_107;
        v55 = v54[1];
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v55 >= v22)
            v55 %= v22;
        }
        else
        {
          v55 &= v22 - 1;
        }
        v53 = (_QWORD *)(*(_QWORD *)&v17[5].__m_.__opaque[8] + 8 * v55);
      }
      *v53 = v28;
LABEL_107:
      ++*(_QWORD *)&v17[5].__m_.__opaque[32];
      v16 = v61;
LABEL_108:
      if (v18)
      {
        v56 = (unint64_t *)&v18->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      std::mutex::unlock(v16);
      goto LABEL_114;
    }
    v33 = 1;
    if (v22 >= 3)
      v33 = (v22 & (v22 - 1)) != 0;
    v34 = v33 | (2 * v22);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = (int8x8_t)v35;
    else
      prime = (int8x8_t)v34;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v22 = *(_QWORD *)&v17[5].__m_.__opaque[16];
    if (*(_QWORD *)&prime > v22)
      goto LABEL_59;
    if (*(_QWORD *)&prime < v22)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)&v17[5].__m_.__opaque[32] / *(float *)&v17[5].__m_.__opaque[40]);
      if (v22 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (*(_QWORD *)&prime <= v43)
        prime = (int8x8_t)v43;
      if (*(_QWORD *)&prime >= v22)
      {
        v22 = *(_QWORD *)&v17[5].__m_.__opaque[16];
      }
      else
      {
        if (prime)
        {
LABEL_59:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v37 = operator new(8 * *(_QWORD *)&prime);
          v38 = *(void **)&v17[5].__m_.__opaque[8];
          *(_QWORD *)&v17[5].__m_.__opaque[8] = v37;
          if (v38)
            operator delete(v38);
          v39 = 0;
          *(int8x8_t *)&v17[5].__m_.__opaque[16] = prime;
          do
            *(_QWORD *)(*(_QWORD *)&v17[5].__m_.__opaque[8] + 8 * v39++) = 0;
          while (*(_QWORD *)&prime != v39);
          v40 = *(_QWORD **)v60;
          if (*(_QWORD *)v60)
          {
            v41 = v40[1];
            v42 = (uint8x8_t)vcnt_s8(prime);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              if (v41 >= *(_QWORD *)&prime)
                v41 %= *(_QWORD *)&prime;
            }
            else
            {
              v41 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v17[5].__m_.__opaque[8] + 8 * v41) = v60;
            v49 = (_QWORD *)*v40;
            if (*v40)
            {
              do
              {
                v50 = v49[1];
                if (v42.u32[0] > 1uLL)
                {
                  if (v50 >= *(_QWORD *)&prime)
                    v50 %= *(_QWORD *)&prime;
                }
                else
                {
                  v50 &= *(_QWORD *)&prime - 1;
                }
                if (v50 != v41)
                {
                  v51 = *(_QWORD *)&v17[5].__m_.__opaque[8];
                  if (!*(_QWORD *)(v51 + 8 * v50))
                  {
                    *(_QWORD *)(v51 + 8 * v50) = v40;
                    goto LABEL_89;
                  }
                  *v40 = *v49;
                  *v49 = **(_QWORD **)(*(_QWORD *)&v17[5].__m_.__opaque[8] + 8 * v50);
                  **(_QWORD **)(*(_QWORD *)&v17[5].__m_.__opaque[8] + 8 * v50) = v49;
                  v49 = v40;
                }
                v50 = v41;
LABEL_89:
                v40 = v49;
                v49 = (_QWORD *)*v49;
                v41 = v50;
              }
              while (v49);
            }
          }
          v22 = (unint64_t)prime;
          goto LABEL_93;
        }
        v59 = *(void **)&v17[5].__m_.__opaque[8];
        *(_QWORD *)&v17[5].__m_.__opaque[8] = 0;
        if (v59)
          operator delete(v59);
        v22 = 0;
        *(_QWORD *)&v17[5].__m_.__opaque[16] = 0;
      }
    }
LABEL_93:
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v22 <= v5)
        v24 = v5 % v22;
      else
        v24 = v5;
    }
    else
    {
      v24 = ((_DWORD)v22 - 1) & v5;
    }
    goto LABEL_98;
  }
  operator delete(__p[0]);
  if (v15)
    goto LABEL_21;
LABEL_114:
  *(_QWORD *)&v64[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v64 + *(_QWORD *)(*(_QWORD *)&v64[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v64[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v66) < 0)
    operator delete(v65[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BCCCA19C](v68);
  return v15;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t SVG::GlyphRecordingCreateWithElement(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unsigned int v17;
  double v18;
  __int128 v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  CGAffineTransform v25;
  _OWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  CGAffineTransform v29;
  _OWORD v30[5];
  unint64_t v31;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v34;
  CGAffineTransform v35;
  unint64_t v36;
  _BYTE v37[424];
  _BYTE v38[24];
  _QWORD *v39;
  CGAffineTransform v40[12];
  _DWORD __dst[144];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, &unk_1B9B90F38, sizeof(__dst));
  SVG::Presentation::defaultPresentation((uint64_t)__dst);
  memcpy(v37, &unk_1B9B90D38, sizeof(v37));
  SVG::Recorder::getInitialState(__dst, (uint64_t)v40);
  SVG::Recorder::Recorder((uint64_t)v37, v40, *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 72), 72.0);
  if (LODWORD(v40[2].c) != -1)
    ((void (*)(_OWORD *, CGFloat *))*(&off_1E7137EC0 + LODWORD(v40[2].c)))(v30, &v40[0].b);
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)&v35.c = v4;
  *(_OWORD *)&v35.tx = v4;
  *(_OWORD *)&v35.a = v4;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v5 = *(_QWORD *)(a1 + 64);
  SVG::computeViewBoxTransform(*(CGAffineTransform **)(v5 + 704), (uint64_t)&v35, *(CGFloat *)(v5 + 672), *(CGFloat *)(v5 + 680), *(CGFloat *)(v5 + 688), *(CGFloat *)(v5 + 696), 0.0, 0.0, *(double *)(v5 + 656), *(double *)(v5 + 664));
  if ((_BYTE)v36)
  {
    *(_QWORD *)&v6 = -1;
    *((_QWORD *)&v6 + 1) = -1;
    *(_OWORD *)&v34.c = v6;
    *(_OWORD *)&v34.tx = v6;
    t1 = v35;
    *(_OWORD *)&v34.a = v6;
    CGAffineTransformMakeScale(&t2, 1.0, -1.0);
    CGAffineTransformConcat(&v34, &t1, &t2);
    memset(&v30[2], 255, 32);
    v30[4] = xmmword_1B9B90F20;
    v30[0] = xmmword_1B9B90EE0;
    v30[1] = unk_1B9B90EF0;
    v31 = 0xAAAAAAAAAAAAAAAALL;
    v29 = v34;
    SVG::AffineTransformApplier::AffineTransformApplier((uint64_t)v30, (uint64_t)v37, &v29);
    memcpy(v40, &unk_1B9B90F38, sizeof(v40));
    SVG::Presentation::inherit((SVG::Presentation *)(*(_QWORD *)(a1 + 64) + 64), (const SVG::Presentation *)__dst, (const SVG::Presentation *)__dst, v40);
    if (LODWORD(v40[2].ty) != 2)
    {
      v24 = std::__throw_bad_variant_access[abi:nn180100]();
      return OTSVGGlyphRecordingCreateFromDocument(v24);
    }
    if (HIDWORD(v40[2].tx) != 2)
    {
      *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v26[0] = v7;
      v26[1] = v7;
      v27 = -1;
      v28 = 0xAAAAAAAAAAAAAAAALL;
      v8 = *(double **)(a1 + 64);
      v9 = v8[84];
      v10 = v8[85];
      v11 = v8[86];
      v12 = v8[87];
      v13 = operator new(0x28uLL);
      *v13 = &off_1E7137AF0;
      v13[1] = v37;
      v13[2] = a1;
      v13[3] = __dst;
      v13[4] = a2;
      v39 = v13;
      SVG::ApplyPresentation::ApplyPresentation((uint64_t)v26, v37, (uint64_t)v40, v8, (_QWORD *)(a1 + 136), (_QWORD *)(a1 + 256), (_QWORD *)(a1 + 296), (uint64_t)v38, v9, v10, v11, v12);
      (*(void (**)(_QWORD *))(*v13 + 40))(v13);
      SVG::ApplyPresentation::~ApplyPresentation((SVG::ApplyPresentation *)v26);
    }
    if (LODWORD(v40[9].c) != -1)
      ((void (*)(_OWORD *, CGFloat *))*(&off_1E7137F48 + LODWORD(v40[9].c)))(v26, &v40[8].tx);
    LODWORD(v40[9].c) = -1;
    if (LODWORD(v40[8].c) != -1)
      ((void (*)(_OWORD *, CGFloat *))*(&off_1E7137F60 + LODWORD(v40[8].c)))(v26, &v40[7].c);
    LODWORD(v40[8].c) = -1;
    if (LODWORD(v40[5].d) != -1)
      ((void (*)(_OWORD *, CGFloat *))*(&off_1E7137F78 + LODWORD(v40[5].d)))(v26, &v40[5].b);
    LODWORD(v40[5].d) = -1;
    if (LODWORD(v40[4].b) != -1)
      ((void (*)(_OWORD *, CGFloat *))*(&off_1E7137F60 + LODWORD(v40[4].b)))(v26, &v40[3].b);
    LODWORD(v40[4].b) = -1;
    if (LODWORD(v40[1].tx) != -1)
      ((void (*)(_OWORD *, CGFloat *))*(&off_1E7137F78 + LODWORD(v40[1].tx)))(v26, &v40[1].c);
    SVG::AffineTransformApplier::~AffineTransformApplier((SVG::AffineTransformApplier *)v30);
  }
  v14 = operator new();
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)v14 = 0;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137C60;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  SVG::Recorder::takeRecording((SVG::Recorder *)v37, v40);
  if (*(_QWORD *)v14)
  {
    std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__clear[abi:nn180100]((_QWORD *)v14);
    operator delete(*(void **)v14);
  }
  *(_OWORD *)v14 = *(_OWORD *)&v40[0].a;
  *(CGFloat *)(v14 + 16) = v40[0].c;
  memset(v40, 0, 24);
  *(_QWORD *)&v30[0] = v40;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)v30);
  v17 = *(_DWORD *)(a1 + 72);
  v18 = *(double *)(a1 + 80);
  *(_QWORD *)&v19 = -1;
  *((_QWORD *)&v19 + 1) = -1;
  *(_OWORD *)&v40[0].c = v19;
  *(_OWORD *)&v40[0].tx = v19;
  *(_OWORD *)&v40[0].a = v19;
  CGAffineTransformMakeScale(v40, v18 / (double)v17, v18 / (double)v17);
  v25 = v40[0];
  *(CGRect *)(v14 + 24) = CGRectApplyAffineTransform(*(CGRect *)&v37[352], &v25);
  *(_DWORD *)(v14 + 56) = v17;
  *(double *)(v14 + 64) = v18;
  v20 = (_QWORD *)operator new();
  *v20 = v14;
  v20[1] = v15;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::deque<SVG::BoundingRectState::State>::~deque[abi:nn180100](&v37[256]);
  *(_QWORD *)&v40[0].a = &v37[176];
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)v40);
  if (*(_DWORD *)&v37[160] != -1)
    ((void (*)(CGAffineTransform *, _BYTE *))*(&off_1E7137EC0 + *(unsigned int *)&v37[160]))(v40, &v37[56]);
  *(_DWORD *)&v37[160] = -1;
  std::deque<SVG::Recorder::State>::~deque[abi:nn180100](v37);
  if (__dst[112] != -1)
    ((void (*)(CGAffineTransform *, _DWORD *))*(&off_1E7137F48 + __dst[112]))(v40, &__dst[104]);
  __dst[112] = -1;
  if (__dst[100] != -1)
    ((void (*)(CGAffineTransform *, _DWORD *))*(&off_1E7137F60 + __dst[100]))(v40, &__dst[88]);
  __dst[100] = -1;
  if (__dst[66] != -1)
    ((void (*)(CGAffineTransform *, _DWORD *))*(&off_1E7137F78 + __dst[66]))(v40, &__dst[62]);
  __dst[66] = -1;
  if (__dst[50] != -1)
    ((void (*)(CGAffineTransform *, _DWORD *))*(&off_1E7137F60 + __dst[50]))(v40, &__dst[38]);
  __dst[50] = -1;
  if (__dst[20] != -1)
    ((void (*)(CGAffineTransform *, _DWORD *))*(&off_1E7137F78 + __dst[20]))(v40, &__dst[16]);
  return (uint64_t)v20;
}

uint64_t OTSVGGlyphRecordingCreateFromDocument(uint64_t *a1)
{
  return SVG::GlyphRecordingCreateWithElement(*a1, *(_QWORD *)(*a1 + 64));
}

uint64_t OTSVGGlyphRecordingCreateFromID(uint64_t *a1, CFStringRef theString)
{
  CFIndex v4;
  char *v5;
  char *v6;
  size_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  void *__dst[3];
  CFIndex maxBufLen;
  CFRange v16;
  CFRange v17;

  maxBufLen = 0;
  v16.length = CFStringGetLength(theString);
  v16.location = 0;
  CFStringGetBytes(theString, v16, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  v4 = maxBufLen;
  if (maxBufLen)
  {
    if (maxBufLen < 0)
      goto LABEL_21;
    v5 = (char *)operator new(maxBufLen);
    v6 = &v5[v4];
    bzero(v5, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v17.length = CFStringGetLength(theString);
  v17.location = 0;
  CFStringGetBytes(theString, v17, 0x8000100u, 0, 0, (UInt8 *)v5, maxBufLen, 0);
  v7 = v6 - v5;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8)
LABEL_21:
    abort();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_12;
  }
  HIBYTE(__dst[2]) = (_BYTE)v6 - (_BYTE)v5;
  v8 = __dst;
  if (v6 != v5)
LABEL_12:
    memcpy(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>((_QWORD *)(*a1 + 96), (uint64_t)__dst);
  if (v11)
    v12 = SVG::GlyphRecordingCreateWithElement(*a1, *((_QWORD *)v11 + 5));
  else
    v12 = 0;
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  if (v5)
    operator delete(v5);
  return v12;
}

uint64_t OTSVGGlyphRecordingRelease(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](result);
    JUMPOUT(0x1BCCCA1B4);
  }
  return result;
}

void OTSVGGlyphRecordingPlayback(uint64_t **a1, uint64_t a2)
{
  SVG::playback(a2, *a1);
}

void OTSVGGlyphRecordingPlaybackRecordingsAtPositions(uint64_t ***a1, uint64_t a2, uint64_t a3, CGContextRef c)
{
  uint64_t v4;
  uint64_t ***v6;
  CGFloat *v7;
  uint64_t *v8;
  unint64_t v9;
  CGFloat v10;
  CGAffineTransform v11;
  CGAffineTransform transform;

  if (a1)
  {
    if (a2)
    {
      v4 = a3;
      if (a3)
      {
        v6 = a1;
        v7 = (CGFloat *)(a2 + 8);
        do
        {
          if (*v6)
          {
            CGContextSaveGState(c);
            v8 = **v6;
            LODWORD(v9) = *((_DWORD *)v8 + 14);
            v10 = *((double *)v8 + 8) / (double)v9;
            CGAffineTransformMakeTranslation(&v11, *(v7 - 1), *v7);
            CGAffineTransformScale(&transform, &v11, v10, v10);
            CGContextConcatCTM(c, &transform);
            SVG::playback((uint64_t)c, **v6);
            CGContextRestoreGState(c);
          }
          v7 += 2;
          ++v6;
          --v4;
        }
        while (v4);
      }
    }
  }
}

double OTSVGGlyphRecordingGetBoundingRect(_QWORD *a1)
{
  uint64_t v1;

  if (a1)
    v1 = *a1 + 24;
  else
    v1 = MEMORY[0x1E0C9D648];
  return *(double *)v1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](a2);
}

uint64_t std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t SVG::AffineTransformApplier::AffineTransformApplier(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  SVG::StateSaverRestorer *v6;
  __int128 v7;
  __int128 v8;
  BOOL IsIdentity;
  __int128 v10;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  CGAffineTransform v17;
  CGAffineTransform v18;
  char v19;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = (SVG::StateSaverRestorer *)(a1 + 8);
  *(_BYTE *)(a1 + 16) = 0;
  v7 = a3[1];
  *(_OWORD *)&v18.a = *a3;
  *(_OWORD *)&v18.c = v7;
  *(_OWORD *)&v18.tx = a3[2];
  SVG::invert(&v18, a1 + 24);
  v8 = a3[1];
  *(_OWORD *)&v17.a = *a3;
  *(_OWORD *)&v17.c = v8;
  *(_OWORD *)&v17.tx = a3[2];
  IsIdentity = CGAffineTransformIsIdentity(&v17);
  *(_BYTE *)(a1 + 80) = IsIdentity;
  if (!IsIdentity)
  {
    if (!*(_BYTE *)(a1 + 72) && !*(_BYTE *)(a1 + 16))
      SVG::StateSaverRestorer::save(v6);
    v10 = a3[1];
    v13 = *a3;
    v14 = v10;
    v15 = a3[2];
    v12 = &unk_1E7137A18;
    v16 = 2;
    SVG::Recorder::append(a2, (uint64_t)&v12);
    if (v16 != -1)
      ((void (*)(char *, void **))*(&off_1E7137ED8 + v16))(&v19, &v12);
  }
  return a1;
}

uint64_t SVG::StateSaverRestorer::save(SVG::StateSaverRestorer *this)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[15];
  unsigned int v5;
  char v6;

  v2 = *(_QWORD *)this;
  v4[0] = &unk_1E7137AA8;
  v5 = 0;
  result = SVG::Recorder::append(v2, (uint64_t)v4);
  if (v5 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))*(&off_1E7137ED8 + v5))(&v6, v4);
  *((_BYTE *)this + 8) = 1;
  return result;
}

void SVG::SaveState::~SaveState(SVG::SaveState *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::SaveState::execute(int a1, CGContextRef c)
{
  CGContextSaveGState(c);
}

double SVG::SaveState::boundingRect(SVG::SaveState *this, SVG::BoundingRectState *a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 4) - 1;
  std::deque<SVG::BoundingRectState::State>::push_back(a2, *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * (v2 / 0x2E)) + 88 * (v2 % 0x2E));
  return *MEMORY[0x1E0C9D648];
}

double SVG::SaveState::timeCost()
{
  return 0.531666877;
}

double SVG::Command::memoryCost()
{
  return 0.0;
}

uint64_t SVG::SaveState::dump(SVG::SaveState *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"SaveState", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

__n128 std::deque<SVG::BoundingRectState::State>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 46 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<SVG::BoundingRectState::State>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2E)) + 88 * (v7 % 0x2E);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  result = *(__n128 *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  *(__n128 *)(v8 + 32) = result;
  ++a1[5];
  return result;
}

void std::deque<SVG::BoundingRectState::State>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2E;
  v4 = v2 - 46;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD0uLL);
      std::__split_buffer<SVG::BoundingRectState::State *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD0uLL);
    std::__split_buffer<SVG::BoundingRectState::State *>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD0uLL);
  std::__split_buffer<SVG::BoundingRectState::State *>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<SVG::BoundingRectState::State *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__split_buffer<SVG::BoundingRectState::State *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<SVG::BoundingRectState::State *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void SVG::ConcatCTM::~ConcatCTM(SVG::ConcatCTM *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::ConcatCTM::execute(uint64_t a1, CGContextRef c)
{
  __int128 v2;
  CGAffineTransform v3;

  v2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v3.a = *(_OWORD *)(a1 + 8);
  *(_OWORD *)&v3.c = v2;
  *(_OWORD *)&v3.tx = *(_OWORD *)(a1 + 40);
  CGContextConcatCTM(c, &v3);
}

double SVG::ConcatCTM::boundingRect(SVG::ConcatCTM *this, SVG::BoundingRectState *a2)
{
  __int128 v2;
  CGAffineTransform v4;

  v2 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v4.a = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)&v4.c = v2;
  *(_OWORD *)&v4.tx = *(_OWORD *)((char *)this + 40);
  SVG::BoundingRectState::concatCTM(a2, &v4);
  return *MEMORY[0x1E0C9D648];
}

double SVG::ConcatCTM::timeCost()
{
  return 2.83167397;
}

uint64_t SVG::ConcatCTM::dump(SVG::ConcatCTM *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  std::locale v10;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"ConcatCTM ", 10);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v1, (uint64_t)" ", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet(&v10, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  return std::ostream::flush();
}

__n128 SVG::BoundingRectState::concatCTM(SVG::BoundingRectState *this, CGAffineTransform *a2)
{
  __int128 v2;
  __int128 v3;
  unint64_t v4;
  __n128 *v5;
  __n128 v6;
  __n128 v7;
  __n128 result;
  __n128 v9;
  CGAffineTransform v10;
  CGAffineTransform t1;
  CGAffineTransform v12;

  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)&v12.c = v2;
  *(_OWORD *)&v12.tx = v2;
  *(_OWORD *)&v12.a = v2;
  v3 = *(_OWORD *)&a2->c;
  *(_OWORD *)&t1.a = *(_OWORD *)&a2->a;
  *(_OWORD *)&t1.c = v3;
  *(_OWORD *)&t1.tx = *(_OWORD *)&a2->tx;
  v4 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v5 = (__n128 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v4 / 0x2E)) + 88 * (v4 % 0x2E));
  v6 = *v5;
  v7 = v5[2];
  *(__n128 *)&v10.c = v5[1];
  *(__n128 *)&v10.tx = v7;
  *(__n128 *)&v10.a = v6;
  CGAffineTransformConcat(&v12, &t1, &v10);
  result = *(__n128 *)&v12.a;
  v9 = *(__n128 *)&v12.tx;
  v5[1] = *(__n128 *)&v12.c;
  v5[2] = v9;
  *v5 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v2;

  *a2 = &unk_1E7137A60;
  v2 = (const void *)a2[1];
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v2;

  *a2 = &unk_1E7137958;
  v2 = (const void *)a2[1];
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v2;

  *a2 = &unk_1E7137620;
  v2 = (const void *)a2[1];
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v2;

  *a2 = &unk_1E7137668;
  v2 = (const void *)a2[1];
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E71371E8;
  return std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)(a2 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E7137010;
  return std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)(a2 + 1));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  *(_QWORD *)a2 = off_1E7137910;
  v3 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_1E7137EC0 + v3))(&v5, a2 + 8);
  *(_DWORD *)(a2 + 112) = -1;
  return result;
}

void SVG::DrawImage::~DrawImage(SVG::DrawImage *this)
{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137A60;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137A60;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::DrawImage::execute(uint64_t a1, CGContext *a2)
{
  __int128 v4;
  uint64_t v5;
  CGFloat v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat MaxY;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform transform;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGRect v15;

  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)&v14.c = v4;
  *(_OWORD *)&v14.tx = v4;
  *(_OWORD *)&v14.a = v4;
  v6 = *(double *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(CGFloat *)&v4 = v6;
  MaxY = CGRectGetMaxY(*(CGRect *)&v4);
  CGAffineTransformMakeTranslation(&v13, v6, MaxY);
  CGAffineTransformScale(&v14, &v13, 1.0, -1.0);
  transform = v14;
  CGContextConcatCTM(a2, &transform);
  v15.size.width = *(CGFloat *)(a1 + 32);
  v15.size.height = *(CGFloat *)(a1 + 40);
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  CGContextDrawImage(a2, v15, *(CGImageRef *)(a1 + 8));
  v10 = v14;
  CGAffineTransformInvert(&v11, &v10);
  CGContextConcatCTM(a2, &v11);
}

double SVG::DrawImage::boundingRect(SVG::DrawImage *this, SVG::BoundingRectState *a2)
{
  return SVG::BoundingRectState::deviceRect(a2, *(CGRect *)((char *)this + 16));
}

CGFloat SVG::DrawImage::timeCost(SVG::DrawImage *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  CGFloat v4;

  v4 = CGRectGetWidth(*a2) * 0.0106;
  return v4 * CGRectGetHeight(*a2);
}

uint64_t SVG::DrawImage::dump(SVG::DrawImage *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"DrawImage", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

double SVG::BoundingRectState::deviceRect(SVG::BoundingRectState *this, CGRect a2)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  CGRect *v6;
  double result;
  CGAffineTransform v8;
  CGRect v9;

  v2 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v2 / 0x2E)) + 88 * (v2 % 0x2E);
  v5 = *(_OWORD *)(v3 + 16);
  v4 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)&v8.a = *(_OWORD *)v3;
  *(_OWORD *)&v8.c = v5;
  *(_OWORD *)&v8.tx = v4;
  v9 = CGRectApplyAffineTransform(a2, &v8);
  v6 = (CGRect *)(v3 + 48);
  if (!*(_BYTE *)(v3 + 80))
    v6 = (CGRect *)MEMORY[0x1E0C9D5E0];
  *(_QWORD *)&result = (unint64_t)CGRectIntersection(v9, *v6);
  return result;
}

void SVG::FillPath::~FillPath(SVG::FillPath *this)
{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137958;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137958;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::FillPath::execute(uint64_t a1, CGContextRef c)
{
  CGContextAddPath(c, *(CGPathRef *)(a1 + 8));
  if (*(_BYTE *)(a1 + 16))
    CGContextEOFillPath(c);
  else
    CGContextFillPath(c);
}

double SVG::FillPath::boundingRect(SVG::FillPath *this, SVG::BoundingRectState *a2)
{
  CGRect BoundingBox;

  BoundingBox = CGPathGetBoundingBox((CGPathRef)*((_QWORD *)this + 1));
  return SVG::BoundingRectState::deviceRect(a2, BoundingBox);
}

CGFloat SVG::FillPath::timeCost(CGPathRef *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  double v4;
  CGFloat v5;
  unint64_t info;

  info = 0;
  CGPathApply(this[1], &info, (CGPathApplierFunction)SVG::FillPath::countContours);
  v4 = (double)info;
  v5 = CGRectGetWidth(*a2) * 0.000411595;
  return v5 * CGRectGetHeight(*a2) + v4 * 0.125484 + 12.6893;
}

void SVG::FillPath::dump(SVG::FillPath *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  const void *v4;
  const __CFString *v5;
  _QWORD *v6;
  size_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale v10;
  std::locale __b[129];

  __b[128] = *(std::locale *)MEMORY[0x1E0C80C00];
  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"FillPath", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(__b, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(__b);
  std::ostream::put();
  std::ostream::flush();
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = CFCopyDescription(v4);
    memset(__b, 170, 0x400uLL);
    CFStringGetCString(v5, (char *)__b, 1024, 0x8000100u);
    v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"    ", 4);
    v7 = strlen((const char *)__b);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)__b, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet(&v10, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v10);
    std::ostream::put();
    std::ostream::flush();
    if (v5)
      CFRelease(v5);
  }
}

_QWORD *SVG::FillPath::countContours(_QWORD *this, void *a2, const CGPathElement *a3)
{
  ++*this;
  return this;
}

void SVG::DrawLinearGradient::~DrawLinearGradient(SVG::DrawLinearGradient *this)
{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137620;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137620;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::DrawLinearGradient::execute(uint64_t a1, CGContextRef c)
{
  CGContextDrawLinearGradient(c, *(CGGradientRef *)(a1 + 8), *(CGPoint *)(a1 + 16), *(CGPoint *)(a1 + 32), *(_DWORD *)(a1 + 48));
}

double SVG::DrawLinearGradient::boundingRect(SVG::DrawLinearGradient *this, SVG::BoundingRectState *a2)
{
  return SVG::BoundingRectState::clipRect(a2);
}

CGFloat SVG::DrawLinearGradient::timeCost(SVG::DrawLinearGradient *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  CGFloat v4;

  v4 = CGRectGetWidth(*a2) * 0.0046;
  return v4 * CGRectGetHeight(*a2) + 34.306;
}

uint64_t SVG::DrawLinearGradient::dump(SVG::DrawLinearGradient *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"DrawLinearGradient", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

double SVG::BoundingRectState::clipRect(SVG::BoundingRectState *this)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v1 / 0x2E)) + 88 * (v1 % 0x2E);
  if (*(_BYTE *)(v2 + 80))
    return *(double *)(v2 + 48);
  else
    return 0.0;
}

void SVG::DrawRadialGradient::~DrawRadialGradient(SVG::DrawRadialGradient *this)
{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137668;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &unk_1E7137668;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::DrawRadialGradient::execute(uint64_t a1, CGContextRef c)
{
  CGContextDrawRadialGradient(c, *(CGGradientRef *)(a1 + 8), *(CGPoint *)(a1 + 16), *(CGFloat *)(a1 + 32), *(CGPoint *)(a1 + 40), *(CGFloat *)(a1 + 56), *(_DWORD *)(a1 + 64));
}

double SVG::DrawRadialGradient::boundingRect(SVG::DrawRadialGradient *this, SVG::BoundingRectState *a2)
{
  return SVG::BoundingRectState::clipRect(a2);
}

CGFloat SVG::DrawRadialGradient::timeCost(SVG::DrawRadialGradient *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  CGFloat v4;

  v4 = CGRectGetWidth(*a2) * 0.0076;
  return v4 * CGRectGetHeight(*a2) + 166.67;
}

uint64_t SVG::DrawRadialGradient::dump(SVG::DrawRadialGradient *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"DrawRadialGradient", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void SVG::ClipToMask::~ClipToMask(SVG::ClipToMask *this)
{
  *(_QWORD *)this = &unk_1E7137010;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E7137010;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::ClipToMask::execute(uint64_t a1, SVG *this)
{
  __int128 v4;
  CGImageRef mask;
  CGAffineTransform transform;
  CGContext *v7;

  v7 = (CGContext *)0xAAAAAAAAAAAAAAAALL;
  SVG::createParallelBitmapContext(this, *(CGRect *)(a1 + 72), &v7);
  if (v7)
  {
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)&transform.a = *(_OWORD *)(a1 + 24);
    *(_OWORD *)&transform.c = v4;
    *(_OWORD *)&transform.tx = *(_OWORD *)(a1 + 56);
    CGContextConcatCTM(v7, &transform);
    SVG::playback((uint64_t)v7, *(uint64_t **)(a1 + 8));
    CGContextFlush(v7);
    mask = (CGImageRef)0xAAAAAAAAAAAAAAAALL;
    SVG::convertToMask(v7, &mask);
    if (mask)
    {
      CGContextClipToMask(this, *(CGRect *)(a1 + 72), mask);
    }
    else
    {
      CGContextAddRect(this, *MEMORY[0x1E0C9D648]);
      CGContextClip(this);
    }
    if (mask)
      CFRelease(mask);
  }
  else
  {
    CGContextAddRect(this, *MEMORY[0x1E0C9D648]);
    CGContextClip(this);
  }
  if (v7)
    CFRelease(v7);
}

double SVG::ClipToMask::boundingRect(SVG::ClipToMask *this, SVG::BoundingRectState *a2)
{
  CGRect v4;

  v4.origin.x = SVG::BoundingRectState::deviceRect(a2, *(CGRect *)((char *)this + 72));
  SVG::BoundingRectState::clip(a2, v4);
  return *MEMORY[0x1E0C9D648];
}

CGFloat SVG::ClipToMask::timeCost(SVG::ClipToMask *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  const CGRect *v6;
  CGRect v8;

  v8.origin.x = SVG::BoundingRectState::clipRectInPixels(a3);
  v8.origin.y = v3;
  v8.size.width = v4;
  v8.size.height = v5;
  return SVG::ClipToMask::staticTimeCost(&v8, v6);
}

uint64_t SVG::ClipToMask::dump(SVG::ClipToMask *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"ClipToMask", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void SVG::BoundingRectState::clip(SVG::BoundingRectState *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  unint64_t v7;
  unint64_t v8;
  CGRect *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  CGRect v14;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  v7 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v7 / 0x2E)) + 88 * (v7 % 0x2E);
  if (*(_BYTE *)(v8 + 80))
    v9 = (CGRect *)(v8 + 48);
  else
    v9 = (CGRect *)MEMORY[0x1E0C9D5E0];
  v14 = CGRectIntersection(*v9, *(CGRect *)&x);
  v10 = *((_QWORD *)this + 5) + *((_QWORD *)this + 4) - 1;
  v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v10 / 0x2E)) + 88 * (v10 % 0x2E);
  *(CGFloat *)(v11 + 48) = v14.origin.x;
  v12 = v11 + 48;
  v13 = *(unsigned __int8 *)(v12 + 32);
  *(CGFloat *)(v12 + 8) = v14.origin.y;
  *(CGFloat *)(v12 + 16) = v14.size.width;
  *(CGFloat *)(v12 + 24) = v14.size.height;
  if (!v13)
    *(_BYTE *)(v12 + 32) = 1;
}

double SVG::BoundingRectState::clipRectInPixels(SVG::BoundingRectState *this)
{
  __int128 v2;
  double result;
  CGAffineTransform v4;
  CGRect v5;

  v5.origin.x = SVG::BoundingRectState::clipRect(this);
  v2 = *((_OWORD *)this + 4);
  *(_OWORD *)&v4.a = *((_OWORD *)this + 3);
  *(_OWORD *)&v4.c = v2;
  *(_OWORD *)&v4.tx = *((_OWORD *)this + 5);
  *(_QWORD *)&result = (unint64_t)CGRectApplyAffineTransform(v5, &v4);
  return result;
}

CGFloat SVG::ClipToMask::staticTimeCost(CGRect *this, const CGRect *a2)
{
  CGFloat v3;

  v3 = CGRectGetWidth(*this) * 0.0125;
  return v3 * CGRectGetHeight(*this) + 367.22;
}

void std::__function::__func<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0,std::allocator<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::~__func()
{
  JUMPOUT(0x1BCCCA1B4);
}

__n128 std::__function::__func<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0,std::allocator<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7137AF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0,std::allocator<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7137AF0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0,std::allocator<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  const SVG::Presentation *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *__p;
  char *v22;
  char *v23;
  _BYTE v24[64];
  uint64_t v25;
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  _OWORD v34[4];
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  memset(v24, 170, 48);
  *(_OWORD *)&v24[48] = unk_1B9B91248;
  v1 = a1[1];
  v2 = a1[2];
  v3 = *(_QWORD *)(v2 + 64);
  memset(&v24[24], 0, 32);
  memset(v26, 0, sizeof(v26));
  v4 = *(_OWORD *)(v3 + 688);
  v31 = *(_OWORD *)(v3 + 672);
  *(_DWORD *)&v24[56] = 1065353216;
  *(_QWORD *)v24 = &off_1E7137878;
  *(_QWORD *)&v24[8] = v2 + 136;
  v6 = (const SVG::Presentation *)a1[3];
  v5 = a1[4];
  *(_QWORD *)&v24[16] = v6;
  v25 = v1;
  v27 = v2 + 176;
  v28 = v2 + 216;
  v29 = v2 + 256;
  v30 = v2 + 296;
  v32 = v4;
  if (v5 == v3)
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    v7 = *(uint64_t **)(v3 + 32);
    v8 = *(uint64_t **)(v3 + 40);
    if (v7 != v8)
    {
      v10 = 0;
      do
      {
        v11 = *v7;
        if (v10 >= v23)
        {
          v12 = (v10 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v13 = (v23 - (_BYTE *)__p) >> 2;
          if (v13 <= v12 + 1)
            v13 = v12 + 1;
          if ((unint64_t)(v23 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v23, v14);
          else
            v15 = 0;
          v16 = &v15[8 * v12];
          *(_QWORD *)v16 = v11;
          v10 = v16 + 8;
          v18 = (char *)__p;
          v17 = v22;
          if (v22 != __p)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            v17 = (char *)__p;
          }
          __p = v16;
          v22 = v10;
          v23 = &v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v10 = v11;
          v10 += 8;
        }
        v22 = v10;
        ++v7;
      }
      while (v7 != v8);
      v6 = (const SVG::Presentation *)a1[3];
      v3 = *(_QWORD *)(a1[2] + 64);
    }
    SVG::Presentation::inherit((SVG::Presentation *)(v3 + 64), v6, v6, v34);
    SVG::RecordBase::operator()((float *)v24, (unint64_t **)&__p, (const SVG::Presentation *)v34);
    if (v44 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7137F48 + v44))(&v33, &v43);
    v44 = -1;
    if (v42 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7137F60 + v42))(&v33, &v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7137F78 + v40))(&v33, &v39);
    v40 = -1;
    if (v38 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7137F60 + v38))(&v33, &v37);
    v38 = -1;
    if (v36 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7137F78 + v36))(&v33, &v35);
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    SVG::RecordBase::operator()((float *)v24, v5, v6);
  }
  *(_QWORD *)v24 = &off_1E7137878;
  std::deque<SVG::ApplyPresentationState>::~deque[abi:nn180100](v26);
  *(_QWORD *)v24 = &off_1E71370C0;
  return std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)&v24[24]);
}

uint64_t std::__function::__func<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0,std::allocator<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0,std::allocator<SVG::GlyphRecordingCreateWithElement(SVG::Document const&,SVG::Element const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::target_type()
{
}

uint64_t std::deque<SVG::ApplyPresentationState>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<SVG::ApplyPresentationState *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<SVG::ApplyPresentationState *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void SVG::AffineTransformApplier::~AffineTransformApplier(SVG::AffineTransformApplier *this)
{
  uint64_t v2;
  __int128 v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  char v9;

  if (!*((_BYTE *)this + 80))
  {
    if (*((_BYTE *)this + 72))
    {
      v2 = *(_QWORD *)this;
      v3 = *(_OWORD *)((char *)this + 40);
      v5 = *(_OWORD *)((char *)this + 24);
      v6 = v3;
      v7 = *(_OWORD *)((char *)this + 56);
      v4 = &unk_1E7137A18;
      v8 = 2;
      SVG::Recorder::append(v2, (uint64_t)&v4);
      if (v8 != -1)
        ((void (*)(char *, void **))*(&off_1E7137ED8 + v8))(&v9, &v4);
    }
  }
  SVG::StateSaverRestorer::~StateSaverRestorer((SVG::AffineTransformApplier *)((char *)this + 8));
}

void SVG::StateSaverRestorer::~StateSaverRestorer(SVG::StateSaverRestorer *this)
{
  uint64_t v1;
  _QWORD v2[15];
  unsigned int v3;
  char v4;

  if (*((_BYTE *)this + 8))
  {
    v1 = *(_QWORD *)this;
    v2[0] = &unk_1E71373B0;
    v3 = 1;
    SVG::Recorder::append(v1, (uint64_t)v2);
    if (v3 != -1)
      ((void (*)(char *, _QWORD *))*(&off_1E7137ED8 + v3))(&v4, v2);
  }
}

void SVG::RestoreState::~RestoreState(SVG::RestoreState *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::RestoreState::execute(int a1, CGContextRef c)
{
  CGContextRestoreGState(c);
}

double SVG::RestoreState::boundingRect(SVG::RestoreState *this, SVG::BoundingRectState *a2)
{
  --*((_QWORD *)a2 + 5);
  std::deque<SVG::BoundingRectState::State>::__maybe_remove_back_spare[abi:nn180100](a2, 1);
  return *MEMORY[0x1E0C9D648];
}

double SVG::RestoreState::timeCost(SVG::RestoreState *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  return 0.531666877;
}

uint64_t SVG::RestoreState::dump(SVG::RestoreState *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"RestoreState", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

uint64_t std::deque<SVG::BoundingRectState::State>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 46 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2E)
    a2 = 1;
  if (v5 < 0x5C)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__shared_ptr_pointer<SVG::GlyphRecording *,std::shared_ptr<SVG::GlyphRecording>::__shared_ptr_default_delete<SVG::GlyphRecording,SVG::GlyphRecording>,std::allocator<SVG::GlyphRecording>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t std::__shared_ptr_pointer<SVG::GlyphRecording *,std::shared_ptr<SVG::GlyphRecording>::__shared_ptr_default_delete<SVG::GlyphRecording,SVG::GlyphRecording>,std::allocator<SVG::GlyphRecording>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void ***)(result + 24);
    std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100](&v2);
    return MEMORY[0x1BCCCA1B4](v1, 0x1020C402710001DLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SVG::GlyphRecording *,std::shared_ptr<SVG::GlyphRecording>::__shared_ptr_default_delete<SVG::GlyphRecording,SVG::GlyphRecording>,std::allocator<SVG::GlyphRecording>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = v3 - 128;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))*(&off_1E7137ED8 + v5))(&v6, v3 - 128);
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 128;
    }
    while (v4 != v2);
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

uint64_t std::deque<SVG::BoundingRectState::State>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 23;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 46;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<SVG::ApplyPresentationState *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<SVG::Recorder::State>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  char v17;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 5];
    v7 = *v6;
    v8 = (char *)*v6 + 128 * (v5 & 0x1F);
    v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 2) & 0x3FFFFFFFFFFFFFF8)) + 128 * ((a1[5] + v5) & 0x1F);
    if (v8 != (char *)v9)
    {
      do
      {
        v10 = *((unsigned int *)v8 + 28);
        if ((_DWORD)v10 != -1)
        {
          ((void (*)(char *, char *))*(&off_1E7137EC0 + v10))(&v17, v8 + 8);
          v7 = *v6;
        }
        *((_DWORD *)v8 + 28) = -1;
        v8 += 128;
        if (v8 - v7 == 4096)
        {
          v11 = (char *)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != (char *)v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 16;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 32;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<SVG::ApplyPresentationState *>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1BCCCA0D0](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1BCCCA0DC](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      memset(__p, 170, sizeof(__p));
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:nn180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:nn180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:nn180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = *((_QWORD *)v13 + 1);
      if (v15 == v8)
      {
        if ((std::equal_to<std::string>::operator()[abi:nn180100](v14, v13 + 16, v2) & 1) != 0)
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v7)
            v15 %= *(_QWORD *)&v7;
        }
        else
        {
          v15 &= *(_QWORD *)&v7 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

{
  unsigned __int8 *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v17, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(unsigned __int8 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = (uint64_t)(a1 + 4);
    do
    {
      v15 = *((_QWORD *)v13 + 1);
      if (v8 == v15)
      {
        if ((std::equal_to<std::string>::operator()[abi:nn180100](v14, v13 + 16, v2) & 1) != 0)
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v7)
            v15 %= *(_QWORD *)&v7;
        }
        else
        {
          v15 &= *(_QWORD *)&v7 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  return v13;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:nn180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void SVG::unzipData(SVG *this@<X0>, _QWORD *a2@<X8>)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v7;
  uint64_t v10;
  int64_t v11;
  size_t v12;
  uint8_t *v13;
  __int128 v14;
  char *v15;
  CFIndex v16;
  void *v17;
  compression_status v18;
  compression_stream v19;

  BytePtr = CFDataGetBytePtr(this);
  Length = CFDataGetLength(this);
  if (Length < 10 || *BytePtr != 31 || BytePtr[1] != 139 || BytePtr[2] != 8)
    goto LABEL_25;
  if ((BytePtr[3] & 4) != 0)
  {
    if ((unint64_t)Length > 0xB)
    {
      v7 = *((unsigned __int16 *)BytePtr + 5) + 12;
      if ((BytePtr[3] & 8) == 0)
        goto LABEL_14;
      goto LABEL_10;
    }
LABEL_25:
    *a2 = 0;
    return;
  }
  v7 = 10;
  if ((BytePtr[3] & 8) == 0)
    goto LABEL_14;
LABEL_10:
  if (Length > (unint64_t)v7)
  {
    while (BytePtr[v7++])
    {
      if (Length == v7)
      {
LABEL_18:
        v7 = Length;
        goto LABEL_19;
      }
    }
  }
LABEL_14:
  if ((BytePtr[3] & 0x10) != 0 && Length > v7)
  {
    while (BytePtr[v7++])
    {
      if (Length == v7)
        goto LABEL_18;
    }
  }
LABEL_19:
  if ((BytePtr[3] & 2) != 0)
    v10 = v7 + 2;
  else
    v10 = v7;
  v11 = Length - v10;
  if (Length <= v10)
    goto LABEL_25;
  v12 = (unint64_t)((double)v11 * 1.5);
  v13 = (uint8_t *)malloc_type_malloc(v12, 0xFDA97EBFuLL);
  v19.state = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v19.dst_ptr = v14;
  *(_OWORD *)&v19.src_ptr = v14;
  if (compression_stream_init(&v19, COMPRESSION_STREAM_DECODE, COMPRESSION_ZLIB))
  {
    v15 = 0;
  }
  else
  {
    v16 = 0;
    v19.dst_ptr = v13;
    v19.dst_size = (unint64_t)((double)v11 * 1.5);
    v19.src_ptr = &BytePtr[v10];
    v19.src_size = v11;
    v17 = v13;
    while (1)
    {
      v18 = compression_stream_process(&v19, 1);
      v16 += v19.dst_ptr - v13;
      if (v18)
        break;
      v12 = (unint64_t)((double)v12 * 1.5 + 1.0);
      v15 = (char *)reallocf(v17, v12);
      if (!v15)
        goto LABEL_33;
      v17 = v15;
      v13 = (uint8_t *)&v15[v16];
      v19.dst_ptr = (uint8_t *)&v15[v16];
      v19.dst_size = v12 - v16;
    }
    if (v18 == COMPRESSION_STATUS_END)
    {
      if (compression_stream_destroy(&v19) == COMPRESSION_STATUS_OK)
      {
        v15 = (char *)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v17, v16, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
LABEL_33:
        v13 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      compression_stream_destroy(&v19);
    }
    v15 = 0;
    v13 = (uint8_t *)v17;
  }
LABEL_36:
  *a2 = v15;
  free(v13);
}

double SVG::Length::computeValue(SVG::Length *this, double a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double **v8;

  v7 = a2;
  v6 = &v7;
  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:nn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Length::computeValue(double)::$_0,SVG::Length::computeValue(double)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Length::Value,SVG::Length::Percentage> const&>(v4, v5);
  }
  else
  {
    v8 = &v6;
    ((void (*)(double ***, SVG::Length *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100INS1_9__variant15__value_visitorIN3SVG7VisitorIZNKS6_6Length12computeValueEdE3__0JZNKS8_12computeValueEdE3__1EEEEEJRKNS0_6__implIJNS8_5ValueENS8_10PercentageEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v8, this);
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Length::computeValue(double)::$_0,SVG::Length::computeValue(double)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Length::Value,SVG::Length::Percentage> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Length::computeValue(double)::$_0,SVG::Length::computeValue(double)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Length::Value,SVG::Length::Percentage> const&>(double ***a1, double *a2)
{
  return *a2 * ***a1 / 100.0;
}

uint64_t SVG::PatternElement::PatternElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  __int128 v7;
  int v8;
  __int128 v9;
  unsigned __int8 *v10;
  unint64_t v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  __int128 v26;
  int v27;
  __int128 v28;
  unsigned __int8 *v29;
  const __CFAllocator *v30;
  const UInt8 *v31;
  CFIndex v32;
  const __CFString *v33;
  const __CFString *v34;
  CFURLRef v35;
  const void *v36;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  void *__p[2];
  char v43;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E71374B8;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 796) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 804) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  std::string::basic_string[abi:nn180100]<0>(v38, "viewBox");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v6)
  {
    *(_QWORD *)&v7 = -1;
    *((_QWORD *)&v7 + 1) = -1;
    *(_OWORD *)v38 = v7;
    v39 = v7;
    *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
    SVG::ViewBox::parseViewBox((uint64_t)(v6 + 64), (uint64_t)v38);
    if ((_BYTE)v40)
    {
      v8 = *(unsigned __int8 *)(a1 + 672);
      v9 = v39;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v38;
      *(_OWORD *)(a1 + 656) = v9;
      if (!v8)
        *(_BYTE *)(a1 + 672) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "preserveAspectRatio");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v10 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v10)
  {
    v11 = SVG::PreserveAspectRatio::parsePreserveAspectRatio((uint64_t)(v10 + 64));
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 688))
        *(_BYTE *)(a1 + 688) = 1;
      *(_QWORD *)(a1 + 680) = v11;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "x");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v13 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v13)
  {
    v38[0] = (void *)-1;
    v38[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v13 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v38);
    if ((_BYTE)v39)
    {
      v14 = *(unsigned __int8 *)(a1 + 712);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)v38;
      if (!v14)
        *(_BYTE *)(a1 + 712) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "y");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v15 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v15)
  {
    v38[0] = (void *)-1;
    v38[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v15 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v38);
    if ((_BYTE)v39)
    {
      v16 = *(unsigned __int8 *)(a1 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)v38;
      if (!v16)
        *(_BYTE *)(a1 + 736) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v17 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v17)
  {
    v38[0] = (void *)-1;
    v38[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v17 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v38);
    if ((_BYTE)v39)
    {
      v18 = *(unsigned __int8 *)(a1 + 760);
      *(_OWORD *)(a1 + 744) = *(_OWORD *)v38;
      if (!v18)
        *(_BYTE *)(a1 + 760) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "height");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v19 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v19)
  {
    v38[0] = (void *)-1;
    v38[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v19 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v38);
    if ((_BYTE)v39)
    {
      v20 = *(unsigned __int8 *)(a1 + 784);
      *(_OWORD *)(a1 + 768) = *(_OWORD *)v38;
      if (!v20)
        *(_BYTE *)(a1 + 784) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "patternUnits");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v21 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v21)
  {
    v22 = SVG::parseUnits((uint64_t)(v21 + 64));
    if ((v22 & 0xFF00000000) != 0)
    {
      *(_DWORD *)(a1 + 792) = v22;
      *(_BYTE *)(a1 + 796) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "patternContentUnits");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v23 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v23)
  {
    v24 = SVG::parseUnits((uint64_t)(v23 + 64));
    if ((v24 & 0xFF00000000) != 0)
    {
      *(_DWORD *)(a1 + 800) = v24;
      *(_BYTE *)(a1 + 804) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "patternTransform");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v25 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v25)
  {
    *(_QWORD *)&v26 = -1;
    *((_QWORD *)&v26 + 1) = -1;
    v39 = v26;
    v40 = v26;
    *(_OWORD *)v38 = v26;
    v41 = 0xAAAAAAAAAAAAAAAALL;
    SVG::parseTransform((uint64_t)(v25 + 64), (uint64_t)v38);
    if ((_BYTE)v41)
    {
      v27 = *(unsigned __int8 *)(a1 + 856);
      v28 = v39;
      *(_OWORD *)(a1 + 808) = *(_OWORD *)v38;
      *(_OWORD *)(a1 + 824) = v28;
      *(_OWORD *)(a1 + 840) = v40;
      if (!v27)
        *(_BYTE *)(a1 + 856) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "href");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/1999/xlink");
  v29 = SVG::Element::findInAttributeMap(a3, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v29)
  {
    v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((char)v29[87] < 0)
    {
      v31 = (const UInt8 *)*((_QWORD *)v29 + 8);
      v32 = *((_QWORD *)v29 + 9);
    }
    else
    {
      v31 = v29 + 64;
      v32 = v29[87];
    }
    v33 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v31, v32, 0x8000100u, 1u);
    if (v33)
    {
      v34 = v33;
      v35 = CFURLCreateWithString(v30, v33, 0);
      v36 = *(const void **)(a1 + 864);
      if (v36)
        CFRelease(v36);
      *(_QWORD *)(a1 + 864) = v35;
      CFRelease(v34);
    }
  }
  return a1;
}

uint64_t SVG::PatternElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  if (((*(uint64_t (**)(const void *))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
    return SVG::Element::appendChild(a1, a2);
  v5 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::PatternElement::computePlaybackRect(unint64_t a1, _QWORD *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  _BYTE v10[56];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGRect v21;

  SVG::PatternElement::specifiedState(a1, a2, (uint64_t)v10);
  v16 = v15;
  v17 = v11;
  v18 = v12;
  v19 = v13;
  v20 = v14;
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  SVG::LengthRect::computeRect((SVG::LengthRect *)&v16, v21);
}

__n128 SVG::PatternElement::specifiedState@<Q0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  char *v10;
  char *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  _BYTE v19[32];
  __n128 v20;
  _BYTE v21[32];
  __n128 v22;
  __n128 v23;
  _BYTE v24[64];
  void *v25[3];

  *(_OWORD *)(a3 + 160) = xmmword_1B9B915D0;
  *(_OWORD *)(a3 + 176) = unk_1B9B915E0;
  *(_OWORD *)(a3 + 192) = xmmword_1B9B915F0;
  *(_OWORD *)(a3 + 208) = unk_1B9B91600;
  *(_OWORD *)(a3 + 96) = xmmword_1B9B91590;
  *(_OWORD *)(a3 + 112) = unk_1B9B915A0;
  *(_OWORD *)(a3 + 128) = xmmword_1B9B915B0;
  *(_OWORD *)(a3 + 144) = unk_1B9B915C0;
  *(_OWORD *)(a3 + 32) = xmmword_1B9B91550;
  *(_OWORD *)(a3 + 48) = unk_1B9B91560;
  *(_OWORD *)(a3 + 64) = xmmword_1B9B91570;
  *(_OWORD *)(a3 + 80) = unk_1B9B91580;
  *(_OWORD *)a3 = __const__ZNK3SVG14PatternElement17contentsTransformE6CGRectS1_RKNSt3__113unordered_mapIPK7__CFURLNS2_17reference_wrapperIKNS_7ElementEEENS2_4hashIS6_EENS2_8equal_toIS6_EENS2_9allocatorINS2_4pairIKS6_SA_EEEEEE_specifiedState;
  *(_OWORD *)(a3 + 16) = unk_1B9B91540;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  v4 = a3 + 40;
  *(_BYTE *)(a3 + 56) = 0;
  v5 = a3 + 56;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  v6 = a3 + 104;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  v7 = a3 + 152;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 156) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  v8 = a3 + 168;
  *(_BYTE *)(a3 + 164) = 0;
  *(_BYTE *)(a3 + 216) = 0;
  memset(v25, 170, sizeof(v25));
  SVG::hrefChain<SVG::PatternElement>(a1, a2, v25);
  v10 = (char *)v25[0];
  v11 = (char *)v25[1];
  if (v25[1] == v25[0])
    goto LABEL_31;
  do
  {
    v13 = (__n128 *)*((_QWORD *)v11 - 1);
    v11 -= 8;
    v12 = v13;
    *(__n128 *)v24 = v13[50];
    *(__n128 *)&v24[16] = v13[51];
    *(__n128 *)&v24[32] = v13[52];
    *(__n128 *)&v24[48] = v13[53];
    *(__n128 *)v21 = v13[46];
    *(__n128 *)&v21[16] = v13[47];
    v22 = v13[48];
    v23 = v13[49];
    v18 = v13[42];
    *(__n128 *)v19 = v13[43];
    *(__n128 *)&v19[16] = v13[44];
    v20 = v13[45];
    v16 = v13[40];
    v17 = v13[41];
    if (!v13[42].n128_u8[0] && *(_BYTE *)(a3 + 32))
    {
      v16 = *(__n128 *)a3;
      v17 = *(__n128 *)(a3 + 16);
      v18.n128_u8[0] = *(_BYTE *)(a3 + 32);
    }
    if (!v12[43].n128_u8[0] && *(_BYTE *)(a3 + 48))
    {
      v18.n128_u64[1] = *(_QWORD *)v4;
      v19[0] = *(_BYTE *)(v4 + 8);
    }
    if (!v12[44].n128_u8[8] && *(_BYTE *)(a3 + 72))
    {
      *(_OWORD *)&v19[8] = *(_OWORD *)v5;
      v19[24] = *(_BYTE *)(v5 + 16);
    }
    if (!v12[46].n128_u8[0] && *(_BYTE *)(a3 + 96))
    {
      v20 = *(__n128 *)(a3 + 80);
      v21[0] = *(_BYTE *)(a3 + 96);
    }
    if (!v12[47].n128_u8[8] && *(_BYTE *)(a3 + 120))
    {
      *(_OWORD *)&v21[8] = *(_OWORD *)v6;
      v21[24] = *(_BYTE *)(v6 + 16);
    }
    if (!v12[49].n128_u8[0] && *(_BYTE *)(a3 + 144))
    {
      v22 = *(__n128 *)(a3 + 128);
      v23.n128_u8[0] = *(_BYTE *)(a3 + 144);
    }
    if (!v12[49].n128_u8[12] && *(_BYTE *)(a3 + 156))
    {
      v23.n128_u32[2] = *(_DWORD *)v7;
      v23.n128_u8[12] = *(_BYTE *)(v7 + 4);
    }
    if (!v12[50].n128_u8[4] && *(_BYTE *)(a3 + 164))
    {
      *(_DWORD *)v24 = *(_DWORD *)(a3 + 160);
      v24[4] = *(_BYTE *)(a3 + 164);
    }
    if (!v12[53].n128_u8[8] && *(_BYTE *)(a3 + 216))
    {
      *(_OWORD *)&v24[8] = *(_OWORD *)v8;
      *(_OWORD *)&v24[24] = *(_OWORD *)(v8 + 16);
      *(_OWORD *)&v24[40] = *(_OWORD *)(v8 + 32);
      v24[56] = *(_BYTE *)(v8 + 48);
    }
    *(_OWORD *)(a3 + 160) = *(_OWORD *)v24;
    *(_OWORD *)(a3 + 176) = *(_OWORD *)&v24[16];
    *(_OWORD *)(a3 + 192) = *(_OWORD *)&v24[32];
    *(_OWORD *)(a3 + 208) = *(_OWORD *)&v24[48];
    *(_OWORD *)(a3 + 96) = *(_OWORD *)v21;
    *(_OWORD *)(a3 + 112) = *(_OWORD *)&v21[16];
    *(__n128 *)(a3 + 128) = v22;
    *(__n128 *)(a3 + 144) = v23;
    *(__n128 *)(a3 + 32) = v18;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v19;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)&v19[16];
    *(__n128 *)(a3 + 80) = v20;
    result = v16;
    *(__n128 *)a3 = v16;
    *(__n128 *)(a3 + 16) = v17;
  }
  while (v11 != v10);
  if (!*(_BYTE *)(a3 + 48))
  {
LABEL_31:
    *(_BYTE *)(a3 + 48) = 1;
    *(_QWORD *)(a3 + 40) = 5;
  }
  if (!*(_BYTE *)(a3 + 72))
  {
    *(_QWORD *)(a3 + 56) = 0;
    *(_DWORD *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 72) = 1;
  }
  if (!*(_BYTE *)(a3 + 96))
  {
    *(_QWORD *)(a3 + 80) = 0;
    *(_DWORD *)(a3 + 88) = 0;
    *(_BYTE *)(a3 + 96) = 1;
  }
  if (!*(_BYTE *)(a3 + 120))
  {
    *(_QWORD *)(a3 + 104) = 0;
    *(_DWORD *)(a3 + 112) = 0;
    *(_BYTE *)(a3 + 120) = 1;
  }
  if (!*(_BYTE *)(a3 + 144))
  {
    *(_QWORD *)(a3 + 128) = 0;
    *(_DWORD *)(a3 + 136) = 0;
    *(_BYTE *)(a3 + 144) = 1;
  }
  if (!*(_BYTE *)(a3 + 156))
  {
    *(_DWORD *)(a3 + 152) = 1;
    *(_BYTE *)(a3 + 156) = 1;
  }
  if (!*(_BYTE *)(a3 + 164))
  {
    *(_DWORD *)(a3 + 160) = 0;
    *(_BYTE *)(a3 + 164) = 1;
  }
  if (*(_BYTE *)(a3 + 216))
  {
    if (!v10)
      return result;
  }
  else
  {
    v14 = (__n128 *)MEMORY[0x1E0C9BAA8];
    v15 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)v8 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(v8 + 16) = v15;
    result = v14[2];
    *(__n128 *)(v8 + 32) = result;
    *(_BYTE *)(a3 + 216) = 1;
    if (!v10)
      return result;
  }
  v25[1] = v10;
  operator delete(v10);
  return result;
}

void SVG::PatternElement::computeRecordingRect(unint64_t a1, _QWORD *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  _BYTE v10[56];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGRect v21;

  SVG::PatternElement::specifiedState(a1, a2, (uint64_t)v10);
  v16 = v15;
  v17 = v11;
  v18 = v12;
  v19 = v13;
  v20 = v14;
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  SVG::LengthRect::computePatternRecordingRect((SVG::LengthRect *)&v16, v21);
}

CGAffineTransform *SVG::PatternElement::contentsTransform@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>, double a11@<D7>)
{
  CGAffineTransform *result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v31 = xmmword_1B9B915D0;
  v32 = unk_1B9B915E0;
  v33 = xmmword_1B9B915F0;
  v34 = unk_1B9B91600;
  v27 = xmmword_1B9B91590;
  v28 = unk_1B9B915A0;
  v29 = xmmword_1B9B915B0;
  v30 = unk_1B9B915C0;
  v23 = xmmword_1B9B91550;
  v24 = unk_1B9B91560;
  v25 = xmmword_1B9B91570;
  v26 = unk_1B9B91580;
  v21 = __const__ZNK3SVG14PatternElement17contentsTransformE6CGRectS1_RKNSt3__113unordered_mapIPK7__CFURLNS2_17reference_wrapperIKNS_7ElementEEENS2_4hashIS6_EENS2_8equal_toIS6_EENS2_9allocatorINS2_4pairIKS6_SA_EEEEEE_specifiedState;
  v22 = unk_1B9B91540;
  SVG::PatternElement::specifiedState(a1, a2, (uint64_t)&v21);
  if ((_BYTE)v23)
    return SVG::computeViewBoxTransform(*((CGAffineTransform **)&v23 + 1), a3, *(CGFloat *)&v21, *((CGFloat *)&v21 + 1), *(CGFloat *)&v22, *((CGFloat *)&v22 + 1), a8, a9, a10, a11);
  result = SVG::unitTransform((CGAffineTransform *)v31, a3, a4, a5, a6, a7);
  *(_BYTE *)(a3 + 48) = 1;
  return result;
}

uint64_t SVG::hrefChain<SVG::PatternElement>@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, void **a3@<X8>)
{
  char *v6;
  _QWORD *v7;
  const void *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v23;
  unint64_t i;
  _OWORD v25[2];
  unint64_t v26;

  v6 = (char *)operator new(8uLL);
  a3[2] = v6 + 8;
  *(_QWORD *)v6 = a1;
  *a3 = v6;
  a3[1] = v6 + 8;
  memset(v25, 0, sizeof(v25));
  v26 = 0xAAAAAAAA3F800000;
  i = a1;
  std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__emplace_unique_key_args<SVG::PatternElement const*,SVG::PatternElement const*>((uint64_t)v25, &i, &i);
  for (i = *(_QWORD *)(*(_QWORD *)v6 + 864); i; i = *(_QWORD *)(*(v12 - 1) + 864))
  {
    v7 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a2, &i);
    if (!v7)
      break;
    v8 = (const void *)v7[3];
    v23 = (void *)0xAAAAAAAAAAAAAAAALL;
    if (!v23
      || std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::find<SVG::PatternElement const*>(v25, &v23))
    {
      break;
    }
    std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__emplace_unique_key_args<SVG::PatternElement const*,SVG::PatternElement const*>((uint64_t)v25, &v23, &v23);
    v9 = v23;
    v11 = a3[1];
    v10 = (unint64_t)a3[2];
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((char *)v11 - (_BYTE *)*a3) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v14 = v10 - (_QWORD)*a3;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a3 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[8 * v13];
      *(_QWORD *)v18 = v9;
      v12 = v18 + 8;
      v20 = (char *)*a3;
      v19 = (char *)a3[1];
      if (v19 != *a3)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v18 - 1) = v21;
          v18 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*a3;
      }
      *a3 = v18;
      a3[1] = v12;
      a3[2] = &v17[8 * v16];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v11 = v23;
      v12 = v11 + 1;
    }
    a3[1] = v12;
    i = 0xAAAAAAAAAAAAAAAALL;
  }
  return std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)v25);
}

void SVG::PatternElement::~PatternElement(SVG::PatternElement *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71374B8;
  v2 = (const void *)*((_QWORD *)this + 108);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&off_1E7137F90 + v3))(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FA8 + v4))(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FC0 + v5))(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FA8 + v6))(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FC0 + v7))(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71374B8;
  v2 = (const void *)*((_QWORD *)this + 108);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&off_1E7137F90 + v3))(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FA8 + v4))(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FC0 + v5))(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FA8 + v6))(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))*(&off_1E7137FC0 + v7))(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

_QWORD *std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__emplace_unique_key_args<SVG::PatternElement const*,SVG::PatternElement const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v10 = v7 % v8;
    }
    else
    {
      v10 = v7 & (v8 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v7;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v10) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<SVG::PatternElement const*,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,std::allocator<SVG::PatternElement const*>>::find<SVG::PatternElement const*>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t SVG::Recorder::updateCost(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  SVG::Recorder *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  if (*(_BYTE *)(result + 392))
  {
    v3 = result;
    if (*(_BYTE *)(result + 408))
    {
      v13 = a3;
      v14 = result;
      v6 = *(unsigned int *)(a2 + 120);
      if ((_DWORD)v6 != -1)
      {
        v15 = &v13;
        ((void (*)(uint64_t **, uint64_t))*(&off_1E7137FD8 + v6))(&v15, a2);
        if (!*(_BYTE *)(v3 + 392))
          goto LABEL_13;
        v8 = v7 + *(double *)(v3 + 384);
        *(double *)(v3 + 384) = v8;
        if (v8 > 200000.0)
          *(_BYTE *)(v3 + 392) = 0;
        v13 = a3;
        v14 = v3;
        v9 = *(unsigned int *)(a2 + 120);
        if ((_DWORD)v9 != -1)
        {
          v15 = &v13;
          result = ((uint64_t (*)(uint64_t **, uint64_t))*(&off_1E7138048 + v9))(&v15, a2);
          if (*(_BYTE *)(v3 + 408))
          {
            v11 = v10 + *(double *)(v3 + 400);
            *(double *)(v3 + 400) = v11;
            if (v11 > 134217728.0)
              *(_BYTE *)(v3 + 408) = 0;
            return result;
          }
LABEL_13:
          v12 = (SVG::Recorder *)std::__throw_bad_optional_access[abi:nn180100]();
          return SVG::Recorder::recordGetCTM(v12);
        }
      }
      std::__throw_bad_variant_access[abi:nn180100]();
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t SVG::Recorder::recordGetCTM(SVG::Recorder *this)
{
  uint64_t result;
  _QWORD v3[15];
  int v4;
  char v5;

  v3[0] = &off_1E7137830;
  v4 = 13;
  SVG::Recorder::updateCost((uint64_t)this, (uint64_t)v3, MEMORY[0x1E0C9D648]);
  if (v4 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v5, v3);
  v3[0] = &off_1E7137830;
  v4 = 13;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>((uint64_t *)this + 22, (uint64_t)v3);
  if (v4 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v5, v3);
  result = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = result + 1;
  return result;
}

unint64_t SVG::Recorder::setInitialState(SVG::Recorder *this)
{
  unint64_t result;
  _BYTE v3[104];
  int v4;
  void (**v5)(SVG::SetFill *__hidden);
  _BYTE v6[104];
  int v7;
  int v8;
  char v9;

  std::deque<SVG::Recorder::State>::push_back(this, (_BYTE *)this + 48);
  v3[0] = 0;
  v4 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v3, (uint64_t)this + 56);
  v5 = off_1E7137910;
  v6[0] = 0;
  v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v3);
  v8 = 9;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>((uint64_t *)this + 22, (uint64_t)&v5);
  if (v8 != -1)
    result = ((uint64_t (*)(char *, void (***)(SVG::SetFill *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v8])(&v9, &v5);
  v8 = -1;
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v9, v3);
  return result;
}

uint64_t SVG::Recorder::Recorder(uint64_t a1, _BYTE *a2, uint64_t a3, unsigned int a4, double a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = *a2;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>(a1 + 56, (uint64_t)(a2 + 8));
  *(_BYTE *)(a1 + 168) = a2[120];
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a3;
  CGAffineTransformMakeScale((CGAffineTransform *)(a1 + 208), a5 / (double)a4, a5 / (double)a4);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  v10 = *(_OWORD *)(a1 + 208);
  v11 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = v10;
  v12 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 320) = v11;
  *(_OWORD *)(a1 + 336) = v12;
  v17 = __const_BoundingRectState_initialState;
  v18 = unk_1B9B918C8;
  v19 = xmmword_1B9B918D8;
  v20 = unk_1B9B918E8;
  v21 = xmmword_1B9B918F8;
  v22 = 0xAAAAAAAAAAAAAAAALL;
  v13 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v14 = *MEMORY[0x1E0C9BAA8];
  v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v19 = v13;
  v17 = v14;
  LOBYTE(v20) = 0;
  LOBYTE(v22) = 0;
  std::deque<SVG::BoundingRectState::State>::emplace_back<SVG::BoundingRectState::State>((_QWORD *)(a1 + 256), (uint64_t)&v17);
  v15 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 352) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(a1 + 368) = v15;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 416) = 0;
  SVG::Recorder::setInitialState((SVG::Recorder *)a1);
  return a1;
}

uint64_t SVG::Recorder::append(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  __int128 v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  uint64_t result;
  uint64_t v17;
  SVG::Recorder *v18;
  CGAffineTransform v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGAffineTransform *v27;
  CGRect v28;
  CGRect v29;

  v27 = (CGAffineTransform *)a1;
  v2 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v2 == -1)
    goto LABEL_7;
  *(_QWORD *)&v19.a = &v27;
  v5 = ((double (*)(CGAffineTransform *))*(&off_1E71380B8 + v2))(&v19);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v29.origin.x = v5;
  v29.origin.y = v6;
  v29.size.width = v8;
  v29.size.height = v10;
  *(CGRect *)(a1 + 352) = CGRectUnion(*(CGRect *)(a1 + 352), v29);
  v12 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)&v19.a = *(_OWORD *)(a1 + 208);
  *(_OWORD *)&v19.c = v12;
  *(_OWORD *)&v19.tx = *(_OWORD *)(a1 + 240);
  v13 = v5;
  *(CGFloat *)&v12 = v7;
  v14 = v9;
  v15 = v11;
  v28 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v12 - 8), &v19);
  v19.a = v28.origin.x;
  v19.b = v28.origin.y;
  v19.c = v28.size.width;
  v19.d = v28.size.height;
  result = SVG::Recorder::updateCost(a1, a2, (uint64_t)&v19);
  if (*(_BYTE *)(a1 + 392) && *(_BYTE *)(a1 + 408))
  {
    *(_QWORD *)&v19.a = a1;
    *(_QWORD *)&v19.b = a1;
    *(_QWORD *)&v19.c = a1;
    *(_QWORD *)&v19.d = a1;
    *(_QWORD *)&v19.tx = a1;
    *(_QWORD *)&v19.ty = a1;
    v20 = a1;
    v21 = a1;
    v22 = a1;
    v23 = a1;
    v24 = a1;
    v25 = a1;
    v26 = a1;
    v17 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v17 != -1)
    {
      v27 = &v19;
      return ((uint64_t (*)(CGAffineTransform **, uint64_t))*(&off_1E7138128 + v17))(&v27, a2);
    }
LABEL_7:
    v18 = (SVG::Recorder *)std::__throw_bad_variant_access[abi:nn180100]();
    return SVG::Recorder::takeRecording(v18);
  }
  return result;
}

void SVG::Recorder::takeRecording(SVG::Recorder *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **__dst[53];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void ***v11;

  SVG::Recorder::setInitialState(this);
  v4 = *((_QWORD *)this + 22);
  v5 = *((_QWORD *)this + 23);
  v8 = v4;
  v9 = v5;
  v6 = *((_QWORD *)this + 24);
  v10 = v6;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  if (*((_BYTE *)this + 392) && *((_BYTE *)this + 408))
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    v9 = 0;
    v10 = 0;
    v8 = 0;
  }
  else
  {
    memcpy(__dst, &__const__ZN3SVG8Recorder13takeRecordingEv_r, sizeof(__dst));
    SVG::Recorder::Recorder((uint64_t)__dst, (_BYTE *)this + 48, *((_QWORD *)this + 25), 1u, 1.0);
    SVG::Recorder::takeRecording((SVG::Recorder *)__dst);
    std::deque<SVG::BoundingRectState::State>::~deque[abi:nn180100](&__dst[32]);
    v11 = &__dst[22];
    std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v11);
    if (LODWORD(__dst[20]) != -1)
      ((void (*)(void ****, void ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[LODWORD(__dst[20])])(&v11, &__dst[7]);
    LODWORD(__dst[20]) = -1;
    std::deque<SVG::Recorder::State>::~deque[abi:nn180100](__dst);
  }
  __dst[0] = (void **)&v8;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100](__dst);
}

_DWORD *SVG::Recorder::getInitialState@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  uint64_t v3;

  *(_OWORD *)(a2 + 64) = xmmword_1B9B91818;
  *(_OWORD *)(a2 + 80) = unk_1B9B91828;
  *(_OWORD *)(a2 + 96) = xmmword_1B9B91838;
  *(_OWORD *)(a2 + 112) = unk_1B9B91848;
  *(_OWORD *)a2 = __const__ZN3SVG8Recorder15getInitialStateERKNS_12PresentationE_state;
  *(_OWORD *)(a2 + 16) = unk_1B9B917E8;
  *(_OWORD *)(a2 + 32) = xmmword_1B9B917F8;
  *(_OWORD *)(a2 + 48) = unk_1B9B91808;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  if (result[23] == 2 && (*(_BYTE *)a2 = result[22] == 1, result[57] == 2))
  {
    *(_BYTE *)(a2 + 120) = result[56] == 1;
  }
  else
  {
    v2 = (_QWORD **)std::__throw_bad_variant_access[abi:nn180100]();
    return (_DWORD *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(v2, v3);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  _QWORD **v0;
  uint64_t v1;

  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(v0, v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::updateCost(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&,CGRect const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, **a1, (*a1)[1] + 256);
}

void SVG::GetCTM::~GetCTM(SVG::GetCTM *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::GetCTM::execute(int a1, CGContextRef c, _QWORD *a3)
{
  unint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  CGAffineTransform v23;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v26;

  CGContextGetCTM(&t1, c);
  CGContextGetBaseCTM();
  CGAffineTransformInvert(&t2, &v23);
  CGAffineTransformConcat(&v26, &t1, &t2);
  v4 = a3[3];
  v5 = (_OWORD *)a3[2];
  if ((unint64_t)v5 >= v4)
  {
    v9 = a3[1];
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v9) >> 4);
    v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v9) >> 4);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGAffineTransform>>((uint64_t)(a3 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[48 * v10];
    v16 = &v14[48 * v13];
    v17 = *(_OWORD *)&v26.a;
    v18 = *(_OWORD *)&v26.tx;
    *((_OWORD *)v15 + 1) = *(_OWORD *)&v26.c;
    *((_OWORD *)v15 + 2) = v18;
    *(_OWORD *)v15 = v17;
    v8 = v15 + 48;
    v20 = (char *)a3[1];
    v19 = (char *)a3[2];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_OWORD *)v19 - 3);
        v22 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v15 - 1) = v22;
        *((_OWORD *)v15 - 3) = v21;
        v15 -= 48;
        v19 -= 48;
      }
      while (v19 != v20);
      v19 = (char *)a3[1];
    }
    a3[1] = v15;
    a3[2] = v8;
    a3[3] = v16;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *(_OWORD *)&v26.a;
    v7 = *(_OWORD *)&v26.tx;
    v5[1] = *(_OWORD *)&v26.c;
    v5[2] = v7;
    *v5 = v6;
    v8 = v5 + 3;
  }
  a3[2] = v8;
}

double SVG::GetCTM::boundingRect(SVG::GetCTM *this, SVG::BoundingRectState *a2)
{
  return *MEMORY[0x1E0C9D648];
}

double SVG::GetCTM::timeCost(SVG::GetCTM *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  return 0.0144500001;
}

uint64_t SVG::GetCTM::dump(SVG::GetCTM *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"GetCTM", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CGAffineTransform>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

unint64_t std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v16[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 7;
    if ((unint64_t)(v9 + 1) >> 57)
      abort();
    v10 = v5 - *a1;
    v11 = v10 >> 6;
    if (v10 >> 6 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80)
      v12 = 0x1FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v16[4] = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>>((uint64_t)v4, v12);
    else
      v13 = 0;
    v14 = &v13[128 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[128 * v12];
    *v14 = 0;
    *((_DWORD *)v14 + 30) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, a2);
    v16[2] = v14 + 128;
    std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    std::__split_buffer<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::~__split_buffer(v16);
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 120) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>,(std::__variant_detail::_Trait)1>>(v7, a2);
    v8 = v7 + 128;
  }
  a1[1] = v8;
  return v8 - 128;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 120);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 120) = -1;
  v5 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8nn180100IZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E7137AA8;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E71373B0;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = &unk_1E7137A18;
  result = *(__n128 *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v4;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a2 = &unk_1E7137A60;
  *(_QWORD *)(a2 + 8) = v3;
  result = *(__n128 *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a2 = &unk_1E7137958;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a3 + 16);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a2 = &unk_1E7137620;
  *(_QWORD *)(a2 + 8) = v3;
  result = *(__n128 *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a2 = &unk_1E7137668;
  *(_QWORD *)(a2 + 8) = v3;
  result = *(__n128 *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  v6 = *(_OWORD *)(a3 + 48);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E71371E8;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &unk_1E7137010;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(_OWORD *)(a3 + 56);
  v4 = *(_OWORD *)(a3 + 72);
  v5 = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 88) = v5;
  *(_OWORD *)(a2 + 72) = v4;
  *(_OWORD *)(a2 + 56) = v3;
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a2 = off_1E7137910;
  *(_DWORD *)(a2 + 112) = -1;
  *(_BYTE *)(a2 + 8) = 0;
  return std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>(a2 + 8, a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E7137778;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E71376B0;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a2 = &unk_1E71379D0;
  result = *(double *)(a3 + 8);
  *(double *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG9SaveStateENS8_12RestoreStateENS8_9ConcatCTMENS8_9DrawImageENS8_8FillPathENS8_18DrawLinearGradientENS8_18DrawRadialGradientENS8_11ClipToPathsENS8_10ClipToMaskENS8_7SetFillENS8_22BeginTransparencyLayerENS8_20EndTransparencyLayerENS8_8SetAlphaENS8_6GetCTMEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7137830;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 104);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 104) = -1;
  v5 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8nn180100IZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 104) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *(_OWORD *)(a3 + 64);
  v3 = *(_OWORD *)(a3 + 80);
  v5 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a3 + 16);
  v7 = *(_OWORD *)(a3 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v7;
  return result;
}

void SVG::BeginTransparencyLayer::~BeginTransparencyLayer(SVG::BeginTransparencyLayer *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::BeginTransparencyLayer::execute(int a1, CGContextRef c)
{
  CGContextBeginTransparencyLayer(c, 0);
}

double SVG::BeginTransparencyLayer::boundingRect(SVG::BeginTransparencyLayer *this, SVG::BoundingRectState *a2)
{
  return *MEMORY[0x1E0C9D648];
}

CGFloat SVG::BeginTransparencyLayer::timeCost(SVG::BeginTransparencyLayer *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v7;
  CGRect v9;
  CGRect v10;

  v9.origin.x = SVG::BoundingRectState::clipRectInPixels(a3);
  x = v9.origin.x;
  y = v9.origin.y;
  width = v9.size.width;
  height = v9.size.height;
  v7 = CGRectGetWidth(v9) * 0.0025;
  v10.origin.x = x;
  v10.origin.y = y;
  v10.size.width = width;
  v10.size.height = height;
  return v7 * CGRectGetHeight(v10);
}

CGFloat SVG::BeginTransparencyLayer::memoryCost(SVG::BeginTransparencyLayer *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v7;
  CGRect v9;
  CGRect v10;

  v9.origin.x = SVG::BoundingRectState::clipRectInPixels(a3);
  x = v9.origin.x;
  y = v9.origin.y;
  width = v9.size.width;
  height = v9.size.height;
  v7 = CGRectGetWidth(v9) * 4.0;
  v10.origin.x = x;
  v10.origin.y = y;
  v10.size.width = width;
  v10.size.height = height;
  return v7 * CGRectGetHeight(v10);
}

uint64_t SVG::BeginTransparencyLayer::dump(SVG::BeginTransparencyLayer *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"BeginTransparencyLayer", 22);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void SVG::EndTransparencyLayer::~EndTransparencyLayer(SVG::EndTransparencyLayer *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::EndTransparencyLayer::execute(int a1, CGContextRef c)
{
  CGContextEndTransparencyLayer(c);
}

double SVG::EndTransparencyLayer::boundingRect(SVG::EndTransparencyLayer *this, SVG::BoundingRectState *a2)
{
  return *MEMORY[0x1E0C9D648];
}

double SVG::EndTransparencyLayer::timeCost(SVG::EndTransparencyLayer *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  return 0.0;
}

uint64_t SVG::EndTransparencyLayer::dump(SVG::EndTransparencyLayer *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"EndTransparencyLayer", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

void SVG::SetAlpha::~SetAlpha(SVG::SetAlpha *this)
{
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::SetAlpha::execute(uint64_t a1, CGContextRef c)
{
  CGContextSetAlpha(c, *(CGFloat *)(a1 + 8));
}

double SVG::SetAlpha::boundingRect(SVG::SetAlpha *this, SVG::BoundingRectState *a2)
{
  return *MEMORY[0x1E0C9D648];
}

double SVG::SetAlpha::timeCost(SVG::SetAlpha *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  return 1.41666738;
}

uint64_t SVG::SetAlpha::dump(SVG::SetAlpha *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"SetAlpha ", 9);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

uint64_t *std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = v6 - 128;
    do
    {
      v4 -= 128;
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 120) = -1;
      result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>,(std::__variant_detail::_Trait)1>>(v7, v4);
      v7 -= 128;
    }
    while (v4 != v5);
    v6 = v7 + 128;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a2 << 7);
}

void **std::__split_buffer<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::clear[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  if (v2 != v1)
  {
    v3 = result;
    do
    {
      v4 = v2 - 128;
      *(_QWORD *)(v3 + 16) = v2 - 128;
      v5 = *(unsigned int *)(v2 - 8);
      if ((_DWORD)v5 != -1)
      {
        result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v6);
        v4 = *(_QWORD *)(v3 + 16);
      }
      *(_DWORD *)(v2 - 8) = -1;
      v2 = v4;
    }
    while (v4 != v1);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 104);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 104) = -1;
  v5 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8nn180100IZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 104) = v5;
  }
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v6;
  result = *(__n128 *)(a3 + 48);
  v8 = *(_OWORD *)(a3 + 64);
  v9 = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t std::deque<SVG::BoundingRectState::State>::emplace_back<SVG::BoundingRectState::State>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 46 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<SVG::BoundingRectState::State>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2E)) + 88 * (v7 % 0x2E);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  v13 = a1[4];
  v14 = a1[5] + 1;
  a1[5] = v14;
  v15 = v13 + v14;
  v16 = a1[1];
  v17 = (_QWORD *)(v16 + 8 * (v15 / 0x2E));
  v18 = *v17 + 88 * (v15 % 0x2E);
  if (a1[2] == v16)
    v18 = 0;
  if (v18 == *v17)
    v18 = *(v17 - 1) + 4048;
  return v18 - 88;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, **a1 + 256);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD v4[15];
  int v5;
  char v6;

  v1 = **a1;
  v4[0] = &unk_1E7137AA8;
  v5 = 0;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v1 + 22, (uint64_t)v4);
  if (v5 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v6, v4);
  v2 = v1[5] + v1[4] - 1;
  return std::deque<SVG::Recorder::State>::push_back(v1, (_BYTE *)(*(_QWORD *)(v1[1] + ((v2 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v2 & 0x1F) << 7)));
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[15];
  int v12;
  char v13;

  v1 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v11[0] = &unk_1E71373B0;
  v12 = 1;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v1 + 22, (uint64_t)v11);
  if (v12 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v12])(&v13, v11);
  v2 = v1[5] - 1;
  v3 = v2 + v1[4];
  v4 = v1[1];
  v5 = *(_QWORD *)(v4 + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v3 & 0x1F) << 7);
  v8 = *(_DWORD *)(v5 + 112);
  v7 = (_DWORD *)(v5 + 112);
  v6 = v8;
  if (v8 != -1)
  {
    ((void (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(v11, *(_QWORD *)(v4 + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v3 & 0x1F) << 7) + 8);
    v2 = v1[5] - 1;
    v4 = v1[1];
    v3 = v1[4] + v2;
  }
  v9 = v1[2];
  *v7 = -1;
  v1[5] = v2;
  if (v9 == v4)
    v10 = 0;
  else
    v10 = 4 * (v9 - v4) - 1;
  if (v10 - v3 >= 0x40)
  {
    operator delete(*(void **)(v9 - 8));
    v1[2] -= 8;
  }
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  __int128 v3;
  unint64_t result;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  char v10;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 176);
  v5 = &unk_1E7137A18;
  v3 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 8);
  v7 = v3;
  v8 = *(_OWORD *)(a2 + 40);
  v9 = 2;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v2, (uint64_t)&v5);
  if (v9 != -1)
    return ((uint64_t (*)(char *, void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v9])(&v10, &v5);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  const void *v4;
  __int128 v5;
  unint64_t result;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  int v10;
  char v11;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 176);
  v4 = *(const void **)(a2 + 8);
  v7[0] = &unk_1E7137A60;
  v7[1] = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = v5;
  v10 = 3;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v3, (uint64_t)v7);
  if (v10 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v10])(&v11, v7);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  const void *v4;
  unint64_t result;
  _QWORD v6[2];
  char v7;
  int v8;
  char v9;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 176);
  v4 = *(const void **)(a2 + 8);
  v6[0] = &unk_1E7137958;
  v6[1] = v4;
  if (v4)
    CFRetain(v4);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = 4;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v3, (uint64_t)v6);
  if (v8 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v8])(&v9, v6);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  const void *v4;
  __int128 v5;
  unint64_t result;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;
  char v12;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 176);
  v4 = *(const void **)(a2 + 8);
  v7[0] = &unk_1E7137620;
  v7[1] = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = v5;
  v10 = *(_DWORD *)(a2 + 48);
  v11 = 5;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v3, (uint64_t)v7);
  if (v11 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v11])(&v12, v7);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  const void *v4;
  __int128 v5;
  unint64_t result;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  char v13;

  v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 176);
  v4 = *(const void **)(a2 + 8);
  v7[0] = &unk_1E7137668;
  v7[1] = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = v5;
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_DWORD *)(a2 + 64);
  v12 = 6;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v3, (uint64_t)v7);
  if (v12 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v12])(&v13, v7);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD v8[15];
  int v9;
  char v10;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 176);
  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v8[0] = &off_1E71371E8;
  v8[1] = v4;
  v8[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v9 = 7;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v2, (uint64_t)v8);
  if (v9 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v9])(&v10, v8);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t result;
  _QWORD v10[3];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 176);
  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v10[0] = &unk_1E7137010;
  v10[1] = v4;
  v10[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 40);
  v13 = v7;
  v8 = *(_OWORD *)(a2 + 88);
  v14 = *(_OWORD *)(a2 + 72);
  v15 = v8;
  v11 = *(_OWORD *)(a2 + 24);
  v16 = 8;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v2, (uint64_t)v10);
  if (v16 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v16])(&v17, v10);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (**v17)(SVG::SetFill *__hidden);
  char v18[96];
  unsigned int v19;
  int v20;
  int v21;
  char v22;
  char *v23;

  v2 = *(_QWORD **)(*(_QWORD *)a1 + 72);
  v3 = v2[5] + v2[4] - 1;
  v4 = *(_QWORD *)(v2[1] + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v3 & 0x1F) << 7);
  v5 = a2 + 8;
  LOBYTE(v17) = 0;
  v19 = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v17, a2 + 8);
  v7 = *(unsigned int *)(v4 + 112);
  v8 = v19;
  v9 = v19 != -1 && v19 == v7;
  if ((_DWORD)v7 == -1)
    v10 = v19 == -1;
  else
    v10 = v9;
  if ((_DWORD)v7 == -1 || !v9)
  {
    v12 = !v10;
  }
  else
  {
    v23 = &v22;
    result = ((uint64_t (*)(char **, unint64_t, void (***)(SVG::SetFill *__hidden)))*(&off_1E7138198 + v7))(&v23, v4 + 8, &v17);
    v12 = result;
    v8 = v19;
  }
  if (v8 != -1)
    result = ((uint64_t (*)(char **, void (***)(SVG::SetFill *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v8])(&v23, &v17);
  if (v12)
  {
    v17 = off_1E7137910;
    v18[0] = 0;
    v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v18, v5);
    v21 = 9;
    std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v2 + 22, (uint64_t)&v17);
    if (v21 != -1)
      ((void (*)(char **, void (***)(SVG::SetFill *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v21])(&v23, &v17);
    LOBYTE(v17) = 0;
    v19 = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v17, v5);
    v13 = v2[5] + v2[4] - 1;
    v14 = *(_QWORD *)(v2[1] + ((v13 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v13 & 0x1F) << 7);
    v15 = v14 + 8;
    v16 = *(unsigned int *)(v14 + 112);
    if ((_DWORD)v16 == -1)
    {
      if (v19 == -1)
        return result;
    }
    else if (v19 == -1)
    {
      result = ((uint64_t (*)(char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(&v23, v15);
      *(_DWORD *)(v15 + 104) = -1;
      goto LABEL_23;
    }
    v23 = (char *)(v14 + 8);
    result = ((uint64_t (*)(char **, unint64_t, void (***)(SVG::SetFill *__hidden)))*(&off_1E71381B0 + v19))(&v23, v15, &v17);
LABEL_23:
    if (v19 != -1)
      return ((uint64_t (*)(char **, void (***)(SVG::SetFill *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v19])(&v23, &v17);
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1)
{
  uint64_t *v1;
  unint64_t result;
  _QWORD v3[15];
  int v4;
  char v5;

  v1 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 80) + 176);
  v3[0] = &unk_1E7137778;
  v4 = 10;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v1, (uint64_t)v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v5, v3);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1)
{
  uint64_t *v1;
  unint64_t result;
  _QWORD v3[15];
  int v4;
  char v5;

  v1 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 176);
  v3[0] = &unk_1E71376B0;
  v4 = 11;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v1, (uint64_t)v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v5, v3);
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_1,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_2,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_3,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_4,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_5,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_6,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_7,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_8,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_9,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_10,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_11,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_12,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_13,SVG::Recorder::append(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t result;
  _QWORD v4[15];
  int v5;
  char v6;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 96) + 176);
  v4[0] = &unk_1E71379D0;
  v4[1] = *(_QWORD *)(a2 + 8);
  v5 = 12;
  result = std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::emplace_back<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>(v2, (uint64_t)v4);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,std::__variant_detail::_Trait::SetFill::CurrentColor,SVG::CF<CGColor *>::PatternData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,std::__variant_detail::_Trait::SetFill::CurrentColor,SVG::CF<CGColor *>::PatternData> const>(uint64_t a1, const void **a2, const void **a3)
{
  const void *v3;
  const void *v4;
  BOOL v5;
  int v6;

  v3 = *a2;
  v4 = *a3;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = (v3 != 0) ^ (v4 == 0);
  else
    v6 = CFEqual(v3, v4) != 0;
  return v6 ^ 1u;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,std::__variant_detail::_Trait::SetFill::CurrentColor,SVG::CF<CGColor *>::PatternData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,std::__variant_detail::_Trait::SetFill::CurrentColor,SVG::CF<CGColor *>::PatternData> const>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,std::__variant_detail::_Trait::SetFill::CurrentColor,SVG::CF<CGColor *>::PatternData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,std::__variant_detail::_Trait::SetFill::CurrentColor,SVG::CF<CGColor *>::PatternData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  CGAffineTransform v8;
  CGAffineTransform t1;

  if (*(_QWORD *)a2 != *(_QWORD *)a3
    || !CGRectEqualToRect(*(CGRect *)(a2 + 16), *(CGRect *)(a3 + 16))
    || *(_QWORD *)(a2 + 48) != *(_QWORD *)(a3 + 48))
  {
    return 1;
  }
  v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)&t1.a = *(_OWORD *)(a2 + 56);
  *(_OWORD *)&t1.c = v5;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)&v8.a = *(_OWORD *)(a3 + 56);
  *(_OWORD *)&v8.c = v6;
  *(_OWORD *)&v8.tx = *(_OWORD *)(a3 + 88);
  return !CGAffineTransformEqualToTransform(&t1, &v8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, CFTypeRef *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  const void *v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 104);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 104) = 0;
    return;
  }
  if (*a2)
    CFRelease(*a2);
  v7 = *a3;
  *a3 = 0;
  *a2 = v7;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 104);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[26] = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG2CFIP7CGColorEENS8_7SetFill12CurrentColorENSD_11PatternDataEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SE_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 104);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      std::shared_ptr<SVG::Recording>::operator=[abi:nn180100](a2, (__int128 *)a3);
      v7 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a2 + 32) = v7;
      v9 = *(_OWORD *)(a3 + 64);
      result = *(__n128 *)(a3 + 80);
      v10 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
      *(_OWORD *)(a2 + 64) = v9;
      *(__n128 *)(a2 + 80) = result;
      *(_OWORD *)(a2 + 48) = v10;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN3SVG2CFIP7CGColorEENS6_7SetFill12CurrentColorENSB_11PatternDataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v14, v4);
  }
  *(_DWORD *)(v4 + 104) = -1;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v11 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 32) = v11;
  result = *(__n128 *)(a3 + 48);
  v12 = *(_OWORD *)(a3 + 64);
  v13 = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a3 + 96);
  *(_OWORD *)(v4 + 64) = v12;
  *(_OWORD *)(v4 + 80) = v13;
  *(__n128 *)(v4 + 48) = result;
  *(_DWORD *)(v4 + 104) = 2;
  return result;
}

uint64_t std::shared_ptr<SVG::Recording>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::deque<SVG::Recorder::State>::push_back(_QWORD *a1, _BYTE *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t result;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 4 * (v5 - v4) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x20)
    {
      a1[4] = v8 - 32;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1)
            v40 = 1;
          else
            v40 = (uint64_t)&v5[-*a1] >> 2;
          v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v40);
          v43 = &v41[8 * (v40 >> 2)];
          v44 = (uint64_t *)a1[1];
          v5 = v43;
          v45 = a1[2] - (_QWORD)v44;
          if (v45)
          {
            v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
            v46 = 8 * (v45 >> 3);
            v47 = &v41[8 * (v40 >> 2)];
            do
            {
              v48 = *v44++;
              *(_QWORD *)v47 = v48;
              v47 += 8;
              v46 -= 8;
            }
            while (v46);
          }
          v49 = (char *)*a1;
          *a1 = v41;
          a1[1] = v43;
          a1[2] = v5;
          a1[3] = &v41[8 * v42];
          if (v49)
          {
            operator delete(v49);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v11;
LABEL_35:
      a1[2] += 8;
LABEL_36:
      v4 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_37;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v5)
      {
        if (v4 == v25)
        {
          if (v5 == v4)
            v52 = 1;
          else
            v52 = (v24 - v4) >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v52);
          v4 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v4;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v4[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v4;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v4;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v28;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v15 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v15)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v5 = v27;
      }
      goto LABEL_35;
    }
    v29 = v26 >> 2;
    if (v24 == v25)
      v30 = 1;
    else
      v30 = v29;
    v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v23];
    v35 = &v31[8 * v32];
    v36 = operator new(0x1000uLL);
    if (v23 == v33)
    {
      v37 = 8 * v23;
      if (v6 < 1)
      {
        v74 = v36;
        v75 = v37 >> 2;
        if (v5 == v4)
          v76 = 1;
        else
          v76 = v75;
        v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v76);
        v34 = &v77[8 * (v76 >> 2)];
        v35 = &v77[8 * v78];
        if (v31)
          operator delete(v31);
        v31 = v77;
        v36 = v74;
      }
      else
      {
        v38 = v37 >> 3;
        if (v38 >= -1)
          v39 = v38 + 1;
        else
          v39 = v38 + 2;
        v34 -= 8 * (v39 >> 1);
      }
    }
    *(_QWORD *)v34 = v36;
    v79 = v34 + 8;
    v80 = a1[2];
    if (v80 == a1[1])
    {
      v95 = v34;
      v81 = v34 + 8;
LABEL_82:
      v96 = (char *)*a1;
      *a1 = v31;
      a1[1] = v95;
      a1[2] = v81;
      a1[3] = v35;
      if (v96)
        operator delete(v96);
      goto LABEL_36;
    }
    while (1)
    {
      if (v34 == v31)
      {
        if (v79 < v35)
        {
          v83 = (v35 - v79) >> 3;
          if (v83 >= -1)
            v84 = v83 + 1;
          else
            v84 = v83 + 2;
          v81 = &v79[8 * (v84 >> 1)];
          v82 = &v34[8 * (v84 >> 1)];
          if (v79 == v34)
            v34 = v79;
          else
            memmove(&v34[8 * (v84 >> 1)], v34, v79 - v34);
          goto LABEL_78;
        }
        if (v35 == v34)
          v85 = 1;
        else
          v85 = (v35 - v34) >> 2;
        v86 = 2 * v85;
        v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v85);
        v31 = v87;
        v82 = &v87[(v86 + 6) & 0xFFFFFFFFFFFFFFF8];
        v81 = v82;
        v89 = v79 - v34;
        if (v79 != v34)
        {
          v81 = &v82[v89 & 0xFFFFFFFFFFFFFFF8];
          v90 = 8 * (v89 >> 3);
          v91 = v82;
          v92 = v34;
          do
          {
            v93 = *(_QWORD *)v92;
            v92 += 8;
            *(_QWORD *)v91 = v93;
            v91 += 8;
            v90 -= 8;
          }
          while (v90);
        }
        v35 = &v87[8 * v88];
        operator delete(v34);
      }
      else
      {
        v81 = v79;
        v82 = v34;
      }
      v34 = v31;
LABEL_78:
      v31 = v34;
      v94 = *(_QWORD *)(v80 - 8);
      v80 -= 8;
      *((_QWORD *)v82 - 1) = v94;
      v95 = v82 - 8;
      v79 = v81;
      v34 = v95;
      if (v80 == a1[1])
        goto LABEL_82;
    }
  }
LABEL_37:
  v50 = *(_QWORD *)&v4[(v9 >> 2) & 0x3FFFFFFFFFFFFFF8] + ((v9 & 0x1F) << 7);
  *(_BYTE *)v50 = *a2;
  *(_BYTE *)(v50 + 8) = 0;
  *(_DWORD *)(v50 + 112) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>(v50 + 8, (uint64_t)(a2 + 8));
  *(_BYTE *)(v50 + 120) = a2[120];
  ++a1[5];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

void SVG::createParallelBitmapContext(SVG *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGContext **a3@<X8>)
{
  double height;
  double width;
  double y;
  double x;
  __int128 v9;
  CGFloat MaxX;
  CGFloat v11;
  CGFloat MaxY;
  CGFloat v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  size_t v24;
  size_t v25;
  CGColorSpace *v26;
  CGContext *v27;
  CGContext *v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGAffineTransform v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  if (a2.size.width == 0.0 || (height = a2.size.height, a2.size.height == 0.0))
  {
    *a3 = 0;
  }
  else
  {
    width = a2.size.width;
    y = a2.origin.y;
    x = a2.origin.x;
    *(_QWORD *)&v9 = -1;
    *((_QWORD *)&v9 + 1) = -1;
    *(_OWORD *)&v32.c = v9;
    *(_OWORD *)&v32.tx = v9;
    *(_OWORD *)&v32.a = v9;
    CGContextGetCTM(&v32, this);
    v30 = v32.ty + y * v32.d + v32.b * x;
    v31 = v32.tx + y * v32.c + v32.a * x;
    v33.origin.x = x;
    v33.origin.y = y;
    v33.size.width = width;
    v33.size.height = height;
    MaxX = CGRectGetMaxX(v33);
    v29 = v32.tx + y * v32.c + v32.a * MaxX;
    v11 = v32.ty + y * v32.d + v32.b * MaxX;
    v34.origin.x = x;
    v34.origin.y = y;
    v34.size.width = width;
    v34.size.height = height;
    MaxY = CGRectGetMaxY(v34);
    v13 = v32.tx + MaxY * v32.c + v32.a * x;
    v14 = v32.ty + MaxY * v32.d + v32.b * x;
    v35.origin.x = x;
    v35.origin.y = y;
    v35.size.width = width;
    v35.size.height = height;
    v15 = CGRectGetMaxX(v35);
    v36.origin.x = x;
    v36.origin.y = y;
    v36.size.width = width;
    v36.size.height = height;
    v16 = CGRectGetMaxY(v36);
    v17 = v32.tx + v16 * v32.c + v32.a * v15;
    v18 = v32.ty + v16 * v32.d + v32.b * v15;
    v19 = sqrt((v11 - v30) * (v11 - v30) + (v29 - v31) * (v29 - v31));
    v20 = sqrt((v18 - v14) * (v18 - v14) + (v17 - v13) * (v17 - v13));
    v21 = sqrt((v14 - v30) * (v14 - v30) + (v13 - v31) * (v13 - v31));
    v22 = sqrt((v18 - v11) * (v18 - v11) + (v17 - v29) * (v17 - v29));
    if (v19 >= v20)
      v23 = v19;
    else
      v23 = v20;
    v24 = vcvtpd_u64_f64(v23);
    if (v21 >= v22)
      v22 = v21;
    v25 = vcvtpd_u64_f64(v22);
    v26 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (4 * v24 * v25 <= 0x200000)
    {
      v28 = CGBitmapContextCreate(0, v24, v25, 8uLL, 4 * v24, v26, 2u);
      v27 = v28;
      if (v28)
      {
        CGContextScaleCTM(v28, (double)v24 / width, (double)v25 / height);
        CGContextTranslateCTM(v27, -x, -y);
      }
    }
    else
    {
      v27 = 0;
    }
    *a3 = v27;
    if (v26)
      CFRelease(v26);
  }
}

void SVG::parseTransform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  __int128 v5;
  unint64_t i;
  char v7;
  __int128 v8;
  int v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t v13;
  char v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  int64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  _BYTE *v41;
  __int128 *v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  CGAffineTransform v55;
  CGAffineTransform t1;
  void *v57[2];
  __int128 v58;
  void *__dst[2];
  __int128 v60;
  _OWORD v61[2];
  __int128 v62;
  __int128 v63;
  _BYTE v64[32];
  char *v65;
  char *v66;
  char *v67;

  v4 = 0;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v57 = v5;
  v58 = v5;
  do
  {
    i = v4;
    v4 = SVG::consumeWsp((uint64_t *)a1, v4);
  }
  while (v7);
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  v63 = v8;
  *(_OWORD *)v64 = v8;
  v62 = v8;
  *(_QWORD *)&v64[16] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v64[24] = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeTransform((uint64_t *)a1, i, (uint64_t)&v62);
  v9 = v64[24];
  if (v64[24])
  {
    v10 = (char *)operator new(0x30uLL);
    v11 = v10 + 48;
    v12 = v63;
    *(_OWORD *)v10 = v62;
    *((_OWORD *)v10 + 1) = v12;
    *((_OWORD *)v10 + 2) = *(_OWORD *)v64;
    v65 = v10;
    v67 = v10 + 48;
    while (1)
    {
      v66 = v11;
      for (i = *(_QWORD *)&v64[16]; ; i = v13)
      {
        v13 = SVG::consumeCommaWsp((uint64_t *)a1, i);
        if (!v14)
          break;
      }
      SVG::consumeTransform((uint64_t *)a1, i, (uint64_t)__dst);
      *(_OWORD *)&v64[9] = *(_OWORD *)((char *)v61 + 9);
      v62 = *(_OWORD *)__dst;
      v63 = v60;
      *(_OWORD *)v64 = v61[0];
      if (!BYTE8(v61[1]))
        break;
      v15 = v66;
      if (v66 >= v67)
      {
        v18 = v65;
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v66 - v65) >> 4);
        v20 = v19 + 1;
        if (v19 + 1 > 0x555555555555555)
          abort();
        if (0x5555555555555556 * ((v67 - v65) >> 4) > v20)
          v20 = 0x5555555555555556 * ((v67 - v65) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v67 - v65) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v21 = 0x555555555555555;
        else
          v21 = v20;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGAffineTransform>>((uint64_t)&v67, v21);
          v18 = v65;
          v15 = v66;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[48 * v19];
        v24 = v62;
        v25 = *(_OWORD *)v64;
        *((_OWORD *)v23 + 1) = v63;
        *((_OWORD *)v23 + 2) = v25;
        *(_OWORD *)v23 = v24;
        if (v15 == v18)
        {
          v29 = &v22[48 * v19];
        }
        else
        {
          v26 = &v22[48 * v19];
          do
          {
            v27 = *((_OWORD *)v15 - 3);
            v28 = *((_OWORD *)v15 - 1);
            v29 = v26 - 48;
            *((_OWORD *)v26 - 2) = *((_OWORD *)v15 - 2);
            *((_OWORD *)v26 - 1) = v28;
            *((_OWORD *)v26 - 3) = v27;
            v15 -= 48;
            v26 -= 48;
          }
          while (v15 != v18);
        }
        v11 = v23 + 48;
        v65 = v29;
        v66 = v23 + 48;
        v67 = &v22[48 * v21];
        if (v18)
          operator delete(v18);
      }
      else
      {
        v16 = v62;
        v17 = *(_OWORD *)v64;
        *((_OWORD *)v66 + 1) = v63;
        *((_OWORD *)v15 + 2) = v17;
        *(_OWORD *)v15 = v16;
        v11 = v15 + 48;
      }
    }
    v31 = v65;
    v30 = v66;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    __dst[1] = 0;
    *(_QWORD *)&v60 = 0;
    __dst[0] = 0;
    v32 = v30 - v31;
    if (v30 == v31)
    {
      v34 = 0;
    }
    else
    {
      std::vector<CGAffineTransform>::__vallocate[abi:nn180100](__dst, 0xAAAAAAAAAAAAAAABLL * (v32 >> 4));
      v33 = __dst[1];
      memmove(__dst[1], v31, v32);
      v34 = (unint64_t)v33 + v32;
      v32 = (int64_t)__dst[0];
    }
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = i;
    __dst[0] = 0;
    __dst[1] = 0;
    if (v31)
      operator delete(v31);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
  }
  else
  {
    v34 = 0xAAAAAAAAAAAAAAAALL;
    v32 = 0xAAAAAAAAAAAAAA00;
  }
  do
  {
    v35 = i;
    i = SVG::consumeWsp((uint64_t *)a1, i);
  }
  while (v36);
  v37 = *(unsigned __int8 *)(a1 + 23);
  if ((v37 & 0x80u) != 0)
    v37 = *(_QWORD *)(a1 + 8);
  if (v35 == v37)
  {
    v57[0] = 0;
    v57[1] = 0;
    *(_QWORD *)&v58 = 0;
    if (!v9)
    {
      v42 = 0;
      v41 = 0;
      BYTE8(v58) = 1;
      goto LABEL_50;
    }
    v38 = v34 - v32;
    if (v34 != v32)
    {
      std::vector<CGAffineTransform>::__vallocate[abi:nn180100](v57, 0xAAAAAAAAAAAAAAABLL * (v38 >> 4));
      v39 = (char *)v57[1];
      memmove(v57[1], (const void *)v32, v34 - v32);
      v57[1] = &v39[v38];
    }
    v40 = 1;
    BYTE8(v58) = 1;
  }
  else
  {
    v40 = 0;
    LOBYTE(v57[0]) = 0;
    BYTE8(v58) = 0;
    if (!v9)
    {
LABEL_48:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 48) = 0;
      return;
    }
  }
  if (v32)
  {
    operator delete((void *)v32);
    v40 = BYTE8(v58);
  }
  if (!v40)
    goto LABEL_48;
  v42 = (__int128 *)v57[0];
  v41 = v57[1];
LABEL_50:
  v43 = *MEMORY[0x1E0C9BAA8];
  v44 = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
  v45 = *(double *)(MEMORY[0x1E0C9BAA8] + 16);
  v46 = *(double *)(MEMORY[0x1E0C9BAA8] + 24);
  v48 = *(double *)(MEMORY[0x1E0C9BAA8] + 32);
  v47 = *(double *)(MEMORY[0x1E0C9BAA8] + 40);
  v49 = v41 - (_BYTE *)v42;
  if (v49)
  {
    v50 = v49 / 48;
    if (v50 <= 1)
      v51 = 1;
    else
      v51 = v50;
    v52 = v42;
    do
    {
      v53 = *v52;
      v54 = v52[2];
      *(_OWORD *)&t1.c = v52[1];
      *(_OWORD *)&t1.tx = v54;
      *(_OWORD *)&t1.a = v53;
      v55.a = v43;
      v55.b = v44;
      v55.c = v45;
      v55.d = v46;
      v55.tx = v48;
      v55.ty = v47;
      CGAffineTransformConcat((CGAffineTransform *)&v62, &t1, &v55);
      v44 = *((double *)&v62 + 1);
      v43 = *(double *)&v62;
      v46 = *((double *)&v63 + 1);
      v45 = *(double *)&v63;
      v52 += 3;
      v48 = *(double *)v64;
      v47 = *(double *)&v64[8];
      --v51;
    }
    while (v51);
  }
  *(CGFloat *)a2 = v43;
  *(CGFloat *)(a2 + 8) = v44;
  *(CGFloat *)(a2 + 16) = v45;
  *(CGFloat *)(a2 + 24) = v46;
  *(CGFloat *)(a2 + 32) = v48;
  *(CGFloat *)(a2 + 40) = v47;
  *(_BYTE *)(a2 + 48) = 1;
  if (v42)
  {
    v57[1] = v42;
    operator delete(v42);
  }
}

CGAffineTransform *SVG::invert@<X0>(CGAffineTransform *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  char v5;
  CGAffineTransform v6;

  if (fabs(this->a * this->d - this->b * this->c) <= 2.22044605e-16)
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v4 = *(_OWORD *)&this->c;
    *(_OWORD *)&v6.a = *(_OWORD *)&this->a;
    *(_OWORD *)&v6.c = v4;
    *(_OWORD *)&v6.tx = *(_OWORD *)&this->tx;
    this = CGAffineTransformInvert((CGAffineTransform *)a2, &v6);
    v5 = 1;
  }
  *(_BYTE *)(a2 + 48) = v5;
  return this;
}

void SVG::consumeTransform(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  CGFloat b;
  char v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  CGFloat a;
  CGFloat v22;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t v27;
  char v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  CGFloat v39;
  CGFloat v40;
  unint64_t v41;
  char v42;
  double v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  double v58;
  CGFloat v59;
  unint64_t v60;
  char v61;
  double v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  __int128 v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  double v76;
  CGFloat v77;
  unint64_t v78;
  char v79;
  double v80;
  unint64_t v81;
  double v82;
  char v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  CGFloat v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  long double v105;
  __int128 v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  CGFloat v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  long double v121;
  CGAffineTransform v122;
  uint64_t v123;
  double v124;
  unint64_t v125;
  CGAffineTransform v126;
  CGAffineTransform v127;
  CGAffineTransform v128;

  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  *(_OWORD *)(a3 + 32) = v6;
  v7 = (_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 48) = 0xAAAAAAAAAAAAAAAALL;
  v8 = (_QWORD *)(a3 + 48);
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 56) = 0xAAAAAAAAAAAAAAAALL;
  v9 = SVG::consumeString<7ul>((uint64_t)"matrix", (uint64_t)a1, a2);
  if (v10)
  {
    do
    {
      v11 = v9;
      v9 = SVG::consumeWsp(a1, v9);
    }
    while (v12);
    *(double *)&v13 = COERCE_DOUBLE(SVG::consumeString<2ul>("(", a1, v11));
    if (v14)
    {
      do
      {
        b = *(double *)&v13;
        *(double *)&v13 = COERCE_DOUBLE(SVG::consumeWsp(a1, v13));
      }
      while (v16);
      v17 = 0;
      *(_QWORD *)&v18 = -1;
      *((_QWORD *)&v18 + 1) = -1;
      *(_OWORD *)&v128.c = v18;
      *(_OWORD *)&v128.tx = v18;
      *(_OWORD *)&v128.a = v18;
      while (1)
      {
        if (v17)
        {
          *(double *)&v19 = COERCE_DOUBLE(SVG::consumeCommaWsp(a1, *(unint64_t *)&b));
          if (v20)
            b = *(double *)&v19;
        }
        v127.a = NAN;
        v127.b = -3.72066208e-103;
        v127.c = -3.72066208e-103;
        SVG::consumePathNumber((uint64_t)a1, *(unint64_t *)&b, (uint64_t)&v127);
        if (!LOBYTE(v127.c))
          break;
        *(CGFloat *)((char *)&v128.a + v17) = v127.a;
        b = v127.b;
        v17 += 8;
        if (v17 == 48)
        {
          a = v128.a;
          v22 = v128.b;
          c = v128.c;
          d = v128.d;
          tx = v128.tx;
          ty = v128.ty;
          do
          {
            v27 = *(_QWORD *)&b;
            b = COERCE_DOUBLE(SVG::consumeWsp(a1, *(unint64_t *)&b));
          }
          while (v28);
          v29 = SVG::consumeString<2ul>(")", a1, v27);
          *(CGFloat *)a3 = a;
          *(CGFloat *)(a3 + 8) = v22;
          *(CGFloat *)(a3 + 16) = c;
          *(CGFloat *)(a3 + 24) = d;
          *(CGFloat *)(a3 + 32) = tx;
          *(CGFloat *)(a3 + 40) = ty;
          *(_QWORD *)(a3 + 48) = v29;
          goto LABEL_72;
        }
      }
    }
  }
  *(_QWORD *)&v30 = -1;
  *((_QWORD *)&v30 + 1) = -1;
  *(_OWORD *)(a3 + 16) = v30;
  *(_OWORD *)(a3 + 32) = v30;
  *(_OWORD *)a3 = v30;
  *v8 = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  v31 = SVG::consumeString<10ul>((uint64_t)"translate", (uint64_t)a1, a2);
  if (v32)
  {
    do
    {
      v33 = v31;
      v31 = SVG::consumeWsp(a1, v31);
    }
    while (v34);
    v35 = SVG::consumeString<2ul>("(", a1, v33);
    if (v36)
    {
      do
      {
        v37 = v35;
        v35 = SVG::consumeWsp(a1, v35);
      }
      while (v38);
      v128.a = NAN;
      v128.b = -3.72066208e-103;
      v128.c = -3.72066208e-103;
      SVG::consumePathNumber((uint64_t)a1, v37, (uint64_t)&v128);
      if (LOBYTE(v128.c))
      {
        v39 = v128.a;
        v40 = v128.b;
        v41 = SVG::consumeCommaWsp(a1, *(unint64_t *)&v128.b);
        if (v42)
        {
          v127.a = NAN;
          v127.b = -3.72066208e-103;
          v127.c = -3.72066208e-103;
          SVG::consumePathNumber((uint64_t)a1, v41, (uint64_t)&v127);
          if (LOBYTE(v127.c))
          {
            v40 = v127.b;
            v43 = v127.a;
          }
          else
          {
            v43 = 0.0;
          }
        }
        else
        {
          v43 = 0.0;
        }
        do
        {
          v44 = *(_QWORD *)&v40;
          v40 = COERCE_DOUBLE(SVG::consumeWsp(a1, *(unint64_t *)&v40));
        }
        while (v45);
        v46 = SVG::consumeString<2ul>(")", a1, v44);
        if (v47)
        {
          v48 = v46;
          CGAffineTransformMakeTranslation((CGAffineTransform *)a3, v39, v43);
LABEL_71:
          *(_QWORD *)(a3 + 48) = v48;
LABEL_72:
          *(_BYTE *)(a3 + 56) = 1;
          return;
        }
      }
    }
  }
  *(_QWORD *)&v49 = -1;
  *((_QWORD *)&v49 + 1) = -1;
  *(_OWORD *)(a3 + 16) = v49;
  *(_OWORD *)(a3 + 32) = v49;
  *(_OWORD *)a3 = v49;
  *v8 = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  v50 = SVG::consumeString<6ul>((uint64_t)"scale", (uint64_t)a1, a2);
  if (v51)
  {
    do
    {
      v52 = v50;
      v50 = SVG::consumeWsp(a1, v50);
    }
    while (v53);
    v54 = SVG::consumeString<2ul>("(", a1, v52);
    if (v55)
    {
      do
      {
        v56 = v54;
        v54 = SVG::consumeWsp(a1, v54);
      }
      while (v57);
      v128.a = NAN;
      v128.b = -3.72066208e-103;
      v128.c = -3.72066208e-103;
      SVG::consumePathNumber((uint64_t)a1, v56, (uint64_t)&v128);
      if (LOBYTE(v128.c))
      {
        v58 = v128.a;
        v59 = v128.b;
        v60 = SVG::consumeCommaWsp(a1, *(unint64_t *)&v128.b);
        if (v61)
        {
          v127.a = NAN;
          v127.b = -3.72066208e-103;
          v127.c = -3.72066208e-103;
          SVG::consumePathNumber((uint64_t)a1, v60, (uint64_t)&v127);
          if (LOBYTE(v127.c))
          {
            v59 = v127.b;
            v62 = v127.a;
          }
          else
          {
            v62 = v58;
          }
        }
        else
        {
          v62 = v58;
        }
        do
        {
          v63 = *(_QWORD *)&v59;
          v59 = COERCE_DOUBLE(SVG::consumeWsp(a1, *(unint64_t *)&v59));
        }
        while (v64);
        v65 = SVG::consumeString<2ul>(")", a1, v63);
        if (v66)
        {
          v48 = v65;
          CGAffineTransformMakeScale((CGAffineTransform *)a3, v58, v62);
          goto LABEL_71;
        }
      }
    }
  }
  *(_QWORD *)&v67 = -1;
  *((_QWORD *)&v67 + 1) = -1;
  *(_OWORD *)(a3 + 16) = v67;
  *(_OWORD *)(a3 + 32) = v67;
  *(_OWORD *)a3 = v67;
  *v8 = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  v68 = SVG::consumeString<7ul>((uint64_t)"rotate", (uint64_t)a1, a2);
  if (v69)
  {
    do
    {
      v70 = v68;
      v68 = SVG::consumeWsp(a1, v68);
    }
    while (v71);
    v72 = SVG::consumeString<2ul>("(", a1, v70);
    if (v73)
    {
      do
      {
        v74 = v72;
        v72 = SVG::consumeWsp(a1, v72);
      }
      while (v75);
      *(double *)&v123 = NAN;
      v124 = -3.72066208e-103;
      v125 = 0xAAAAAAAAAAAAAAAALL;
      SVG::consumePathNumber((uint64_t)a1, v74, (uint64_t)&v123);
      if ((_BYTE)v125)
      {
        v76 = *(double *)&v123;
        v77 = v124;
        v78 = SVG::consumeCommaWsp(a1, *(unint64_t *)&v124);
        if (v79)
        {
          v128.a = NAN;
          v128.b = -3.72066208e-103;
          v128.c = -3.72066208e-103;
          SVG::consumePathNumber((uint64_t)a1, v78, (uint64_t)&v128);
          v80 = 0.0;
          if (LOBYTE(v128.c))
          {
            v81 = SVG::consumeCommaWsp(a1, *(unint64_t *)&v128.b);
            v82 = 0.0;
            if (v83)
            {
              v127.a = NAN;
              v127.b = -3.72066208e-103;
              v127.c = -3.72066208e-103;
              SVG::consumePathNumber((uint64_t)a1, v81, (uint64_t)&v127);
              v80 = LOBYTE(v127.c) ? v128.a : 0.0;
              v82 = LOBYTE(v127.c) ? v127.a : 0.0;
              if (LOBYTE(v127.c))
                v77 = v127.b;
            }
            do
            {
LABEL_59:
              v84 = *(_QWORD *)&v77;
              v77 = COERCE_DOUBLE(SVG::consumeWsp(a1, *(unint64_t *)&v77));
            }
            while (v85);
            v86 = SVG::consumeString<2ul>(")", a1, v84);
            if (v87)
            {
              v48 = v86;
              *(_QWORD *)&v88 = -1;
              *((_QWORD *)&v88 + 1) = -1;
              *(_OWORD *)&v122.a = v88;
              *(_OWORD *)&v122.c = v88;
              *(_OWORD *)&v122.tx = v88;
              CGAffineTransformMakeTranslation(&v122, v80, v82);
              v127 = v122;
              CGAffineTransformRotate(&v128, &v127, v76 / 180.0 * 3.14159265);
              v122 = v128;
              v126 = v128;
              CGAffineTransformTranslate(&v128, &v126, -v80, -v82);
              v90 = *(_OWORD *)&v128.c;
              v89 = *(_OWORD *)&v128.tx;
              v122 = v128;
              *(_OWORD *)a3 = *(_OWORD *)&v128.a;
              *(_OWORD *)(a3 + 16) = v90;
              *(_OWORD *)(a3 + 32) = v89;
              goto LABEL_71;
            }
            goto LABEL_62;
          }
        }
        else
        {
          v80 = 0.0;
        }
        v82 = 0.0;
        goto LABEL_59;
      }
    }
  }
LABEL_62:
  *(_QWORD *)&v91 = -1;
  *((_QWORD *)&v91 + 1) = -1;
  *(_OWORD *)(a3 + 16) = v91;
  *(_OWORD *)(a3 + 32) = v91;
  *(_OWORD *)a3 = v91;
  *v8 = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  v92 = SVG::consumeString<6ul>((uint64_t)"skewX", (uint64_t)a1, a2);
  if (v93)
  {
    do
    {
      v94 = v92;
      v92 = SVG::consumeWsp(a1, v92);
    }
    while (v95);
    v96 = SVG::consumeString<2ul>("(", a1, v94);
    if (v97)
    {
      do
      {
        v98 = v96;
        v96 = SVG::consumeWsp(a1, v96);
      }
      while (v99);
      v128.a = NAN;
      v128.b = -3.72066208e-103;
      v128.c = -3.72066208e-103;
      SVG::consumePathNumber((uint64_t)a1, v98, (uint64_t)&v128);
      if (LOBYTE(v128.c))
      {
        v100 = v128.b;
        do
        {
          v101 = *(_QWORD *)&v100;
          v100 = COERCE_DOUBLE(SVG::consumeWsp(a1, *(unint64_t *)&v100));
        }
        while (v102);
        v103 = SVG::consumeString<2ul>(")", a1, v101);
        if (v104)
        {
          v48 = v103;
          v105 = tan(v128.a / 180.0 * 3.14159265);
          *v7 = 0;
          v7[1] = 0;
          *(_OWORD *)a3 = xmmword_1B9B91920;
          *(long double *)(a3 + 16) = v105;
          *(_QWORD *)(a3 + 24) = 0x3FF0000000000000;
          goto LABEL_71;
        }
      }
    }
  }
  *(_QWORD *)&v106 = -1;
  *((_QWORD *)&v106 + 1) = -1;
  *(_OWORD *)(a3 + 16) = v106;
  *(_OWORD *)(a3 + 32) = v106;
  *(_OWORD *)a3 = v106;
  *v8 = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = 0xAAAAAAAAAAAAAAAALL;
  v107 = SVG::consumeString<6ul>((uint64_t)"skewY", (uint64_t)a1, a2);
  if (v108)
  {
    do
    {
      v109 = v107;
      v107 = SVG::consumeWsp(a1, v107);
    }
    while (v110);
    v111 = SVG::consumeString<2ul>("(", a1, v109);
    if (v112)
    {
      do
      {
        v113 = v111;
        v111 = SVG::consumeWsp(a1, v111);
      }
      while (v114);
      v128.a = NAN;
      v128.b = -3.72066208e-103;
      v128.c = -3.72066208e-103;
      SVG::consumePathNumber((uint64_t)a1, v113, (uint64_t)&v128);
      if (LOBYTE(v128.c))
      {
        v115 = v128.b;
        do
        {
          v116 = *(_QWORD *)&v115;
          v115 = COERCE_DOUBLE(SVG::consumeWsp(a1, *(unint64_t *)&v115));
        }
        while (v117);
        v118 = SVG::consumeString<2ul>(")", a1, v116);
        if (v119)
        {
          v120 = v118;
          v121 = tan(v128.a / 180.0 * 3.14159265);
          *v7 = 0;
          v7[1] = 0;
          *(_QWORD *)a3 = 0x3FF0000000000000;
          *(long double *)(a3 + 8) = v121;
          *(_OWORD *)(a3 + 16) = xmmword_1B9B91930;
          *(_QWORD *)(a3 + 48) = v120;
          goto LABEL_72;
        }
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 56) = 0;
}

char *std::vector<CGAffineTransform>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CGAffineTransform>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t SVG::GElement::GElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  __int128 v10;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  void *v16[2];
  char v17;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E71379A0;
  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 640) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 656) = v7;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(v6 + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, "transform");
  std::string::basic_string[abi:nn180100]<0>(v16, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)__p, (uint64_t)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SBYTE7(v13) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      return a1;
  }
  else if (!v8)
  {
    return a1;
  }
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v13 = v9;
  v14 = v9;
  *(_OWORD *)__p = v9;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  SVG::parseTransform((uint64_t)(v8 + 64), (uint64_t)__p);
  if ((_BYTE)v15)
  {
    v10 = v13;
    *(_OWORD *)(a1 + 640) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 656) = v10;
    *(_OWORD *)(a1 + 672) = v14;
  }
  return a1;
}

uint64_t SVG::GElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  if (((*(uint64_t (**)(const void *))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
    return SVG::Element::appendChild(a1, a2);
  v5 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::GElement::~GElement(SVG::GElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))*(&off_1E71381C8 + v2))(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&off_1E71381E0 + v3))(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E71381F8 + v4))(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E71381E0 + v5))(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))*(&off_1E71381F8 + v6))(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))*(&off_1E71381C8 + v2))(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&off_1E71381E0 + v3))(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E71381F8 + v4))(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E71381E0 + v5))(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))*(&off_1E71381F8 + v6))(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::GElement::isStructural(SVG::GElement *this)
{
  return 1;
}

void SVG::GradientElement::parseAttributes(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  int v19;
  char v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  const __CFAllocator *v31;
  const UInt8 *v32;
  CFIndex v33;
  const __CFString *v34;
  const __CFString *v35;
  CFURLRef v36;
  const void *v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  void *__p[2];
  char v43;

  std::string::basic_string[abi:nn180100]<0>(v38, "gradientUnits");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v4 = SVG::Element::findInAttributeMap(a2, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v4)
  {
    v5 = SVG::parseUnits((uint64_t)(v4 + 64));
    if ((v5 & 0xFF00000000) != 0)
    {
      v6 = v5;
      v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
      *(_DWORD *)v7 = v6;
      *(_BYTE *)(v7 + 4) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "gradientTransform");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a2, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v8)
  {
    *(_QWORD *)&v9 = -1;
    *((_QWORD *)&v9 + 1) = -1;
    v39 = v9;
    v40 = v9;
    *(_OWORD *)v38 = v9;
    v41 = 0xAAAAAAAAAAAAAAAALL;
    SVG::parseTransform((uint64_t)(v8 + 64), (uint64_t)v38);
    if ((_BYTE)v41)
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
      v11 = *(unsigned __int8 *)(v10 + 56);
      v12 = v39;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)v38;
      *(_OWORD *)(v10 + 24) = v12;
      *(_OWORD *)(v10 + 40) = v40;
      if (!v11)
        *(_BYTE *)(v10 + 56) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v38, "spreadMethod");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v13 = SVG::Element::findInAttributeMap(a2, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v13)
  {
    v14 = 0;
    do
    {
      v15 = v14;
      v14 = SVG::consumeWsp((uint64_t *)v13 + 8, v14);
    }
    while (v16);
    v17 = SVG::consumeString<4ul>((uint64_t)"pad", (uint64_t)(v13 + 64), v15);
    if (v18)
    {
      v19 = 0;
    }
    else
    {
      v17 = SVG::consumeString<8ul>((uint64_t)"reflect", (uint64_t)(v13 + 64), v15);
      if (v20)
      {
        v19 = 1;
      }
      else
      {
        v17 = SVG::consumeString<7ul>((uint64_t)"repeat", (uint64_t)(v13 + 64), v15);
        if (!v21)
        {
          v27 = 0;
          v28 = 0;
LABEL_36:
          if (HIDWORD(v28))
          {
            v29 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
            *(_DWORD *)(v29 + 64) = v27;
            *(_BYTE *)(v29 + 68) = 1;
          }
          goto LABEL_38;
        }
        v19 = 2;
      }
    }
    do
    {
      v22 = v17;
      v17 = SVG::consumeWsp((uint64_t *)v13 + 8, v17);
    }
    while (v23);
    v24 = v13[87];
    if ((v24 & 0x80u) != 0)
      v24 = *((_QWORD *)v13 + 9);
    v25 = v22 == v24;
    v26 = v22 == v24;
    if (v25)
      v27 = v19;
    else
      v27 = 0;
    v28 = v26 << 32;
    goto LABEL_36;
  }
LABEL_38:
  std::string::basic_string[abi:nn180100]<0>(v38, "href");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/1999/xlink");
  v30 = SVG::Element::findInAttributeMap(a2, (uint64_t)v38, (uint64_t)__p);
  if (v43 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  if (v30)
  {
    v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((char)v30[87] < 0)
    {
      v32 = (const UInt8 *)*((_QWORD *)v30 + 8);
      v33 = *((_QWORD *)v30 + 9);
    }
    else
    {
      v32 = v30 + 64;
      v33 = v30[87];
    }
    v34 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v32, v33, 0x8000100u, 1u);
    if (v34)
    {
      v35 = v34;
      v36 = CFURLCreateWithString(v31, v34, 0);
      v37 = (const void *)a1[80];
      if (v37)
        CFRelease(v37);
      a1[80] = v36;
      CFRelease(v35);
    }
  }
}

uint64_t SVG::GradientElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::GradientElement::getGradient(unint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, const __CFArray *a4@<X3>, CGGradientRef *a5@<X8>)
{
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *i;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *j;
  unint64_t v35;
  _QWORD *v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  const void **v58;
  const void **v59;
  const void **v60;
  const void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  const void **v67;
  char *v68;
  uint64_t v69;
  const void **v70;
  double v71;
  char *v72;
  uint64_t v73;
  const void *v74;
  double v75;
  double v76;
  double *v77;
  double *v78;
  CGFloat *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  double *v85;
  uint64_t v86;
  CFStringRef *v87;
  CGColorSpace *v88;
  __CFArray *cf;
  _QWORD *v92;
  CGFloat *locations;
  double *v94;
  double *v95;
  char *v96;
  const void **v97;
  const void **v98;
  char v99;
  _QWORD v100[8];
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  _OWORD v111[4];
  _BYTE v112[16];
  unsigned int v113;
  uint64_t v114;
  char v115;
  int v116;
  _BYTE v117[48];
  unsigned int v118;
  _BYTE v119[16];
  unsigned int v120;
  uint64_t v121;
  char v122;
  int v123;
  CGFloat v124;
  int v125;
  _BYTE v126[48];
  unsigned int v127;
  _BYTE v128[32];
  unsigned int v129;
  _OWORD v130[3];
  void *v131;
  _BYTE v132[16];
  unsigned int v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  int v137;
  _BYTE v138[48];
  unsigned int v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[16];
  unsigned int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  void *v148;
  _BYTE v149[48];
  unsigned int v150;
  _BYTE v151[32];
  unsigned int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  void *__dst[71];
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  cf = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  __dst[0] = (void *)a1;
  v92 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a3, __dst);
  v8 = (char *)operator new(8uLL);
  *(_QWORD *)v8 = a1;
  v9 = v8 + 8;
  memset(__dst, 0, 32);
  __dst[4] = (void *)0xAAAAAAAA3F800000;
  v10 = 0x9DDFEA08EB382D69 * (((((a1 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a1));
  v11 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v10 >> 47) ^ v10);
  v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  v13 = operator new(0x18uLL);
  v13[1] = v12;
  v13[2] = a1;
  std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>((uint64_t)__dst, 1uLL);
  v14 = (unint64_t)__dst[1];
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)__dst[1]);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    if ((void *)v12 >= __dst[1])
      v12 %= (unint64_t)__dst[1];
  }
  else
  {
    v12 &= (unint64_t)__dst[1] - 1;
  }
  v16 = __dst[0];
  v17 = (_QWORD *)*((_QWORD *)__dst[0] + v12);
  if (v17)
  {
    *v13 = *v17;
  }
  else
  {
    *v13 = __dst[2];
    __dst[2] = v13;
    v16[v12] = &__dst[2];
    if (!*v13)
      goto LABEL_14;
    v18 = *(_QWORD *)(*v13 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v18 >= v14)
        v18 %= v14;
    }
    else
    {
      v18 &= v14 - 1;
    }
    v17 = (char *)__dst[0] + 8 * v18;
  }
  *v17 = v13;
LABEL_14:
  ++__dst[3];
  *(_QWORD *)&v130[0] = *(_QWORD *)(*(_QWORD *)v8 + 640);
  if (*(_QWORD *)&v130[0])
  {
    v19 = v8 + 8;
    while (1)
    {
      v20 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a2, v130);
      if (!v20)
        break;
      if (!v21)
        goto LABEL_93;
      v22 = v21;
      v23 = (unint64_t)__dst[1];
      v24 = 0x9DDFEA08EB382D69 * (((8 * v21) + 8) ^ HIDWORD(v21));
      v25 = 0x9DDFEA08EB382D69 * (HIDWORD(v21) ^ (v24 >> 47) ^ v24);
      v26 = 0x9DDFEA08EB382D69 * (v25 ^ (v25 >> 47));
      if (__dst[1])
      {
        v27 = (uint8x8_t)vcnt_s8((int8x8_t)__dst[1]);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          v28 = 0x9DDFEA08EB382D69 * (v25 ^ (v25 >> 47));
          if ((void *)v26 >= __dst[1])
            v28 = v26 % (unint64_t)__dst[1];
        }
        else
        {
          v28 = ((unint64_t)__dst[1] - 1) & v26;
        }
        v30 = (_QWORD *)*((_QWORD *)__dst[0] + v28);
        if (v30)
        {
          for (i = (_QWORD *)*v30; i; i = (_QWORD *)*i)
          {
            v32 = i[1];
            if (v32 == v26)
            {
              if (i[2] == v21)
                goto LABEL_93;
            }
            else
            {
              if (v27.u32[0] > 1uLL)
              {
                if ((void *)v32 >= __dst[1])
                  v32 %= (unint64_t)__dst[1];
              }
              else
              {
                v32 &= (unint64_t)__dst[1] - 1;
              }
              if (v32 != v28)
                break;
            }
          }
        }
        if (v27.u32[0] > 1uLL)
        {
          v29 = 0x9DDFEA08EB382D69 * (v25 ^ (v25 >> 47));
          if ((void *)v26 >= __dst[1])
            v29 = v26 % (unint64_t)__dst[1];
        }
        else
        {
          v29 = ((unint64_t)__dst[1] - 1) & v26;
        }
        v33 = (_QWORD *)*((_QWORD *)__dst[0] + v29);
        if (v33)
        {
          for (j = (_QWORD *)*v33; j; j = (_QWORD *)*j)
          {
            v35 = j[1];
            if (v35 == v26)
            {
              if (j[2] == v21)
                goto LABEL_72;
            }
            else
            {
              if (v27.u32[0] > 1uLL)
              {
                if ((void *)v35 >= __dst[1])
                  v35 %= (unint64_t)__dst[1];
              }
              else
              {
                v35 &= (unint64_t)__dst[1] - 1;
              }
              if (v35 != v29)
                break;
            }
          }
        }
      }
      else
      {
        v29 = 0xAAAAAAAAAAAAAAAALL;
      }
      v36 = operator new(0x18uLL);
      *v36 = 0;
      v36[1] = v26;
      v36[2] = v22;
      v37 = (float)((unint64_t)__dst[3] + 1);
      if (!v23 || (float)(*(float *)&__dst[4] * (float)v23) < v37)
      {
        v38 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3)
          v38 = 1;
        v39 = v38 | (2 * v23);
        v40 = vcvtps_u32_f32(v37 / *(float *)&__dst[4]);
        if (v39 <= v40)
          v41 = v40;
        else
          v41 = v39;
        std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>((uint64_t)__dst, v41);
        v23 = (unint64_t)__dst[1];
        if (((unint64_t)__dst[1] & ((unint64_t)__dst[1] - 1)) != 0)
        {
          if ((void *)v26 >= __dst[1])
            v29 = v26 % (unint64_t)__dst[1];
          else
            v29 = v26;
        }
        else
        {
          v29 = ((unint64_t)__dst[1] - 1) & v26;
        }
      }
      v42 = __dst[0];
      v43 = (_QWORD *)*((_QWORD *)__dst[0] + v29);
      if (v43)
      {
        *v36 = *v43;
      }
      else
      {
        *v36 = __dst[2];
        __dst[2] = v36;
        v42[v29] = &__dst[2];
        if (!*v36)
          goto LABEL_71;
        v44 = *(_QWORD *)(*v36 + 8);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v44 >= v23)
            v44 %= v23;
        }
        else
        {
          v44 &= v23 - 1;
        }
        v43 = (char *)__dst[0] + 8 * v44;
      }
      *v43 = v36;
LABEL_71:
      ++__dst[3];
LABEL_72:
      if (v9 >= v19)
      {
        v46 = (v9 - v8) >> 3;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_239;
        if ((v19 - v8) >> 2 > v47)
          v47 = (v19 - v8) >> 2;
        if ((unint64_t)(v19 - v8) >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          if (v48 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v49 = (char *)operator new(8 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[8 * v46];
        v19 = &v49[8 * v48];
        *(_QWORD *)v50 = v22;
        v45 = v50 + 8;
        if (v9 == v8)
          goto LABEL_87;
        do
        {
          v51 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v50 - 1) = v51;
          v50 -= 8;
        }
        while (v9 != v8);
        if (v8)
LABEL_87:
          operator delete(v8);
        v8 = v50;
      }
      else
      {
        *(_QWORD *)v9 = v22;
        v45 = v9 + 8;
      }
      *(_QWORD *)&v130[0] = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v130[0] = *(_QWORD *)(*((_QWORD *)v45 - 1) + 640);
      v9 = v45;
      if (!*(_QWORD *)&v130[0])
        goto LABEL_92;
    }
  }
  v45 = v9;
LABEL_92:
  v9 = v45;
LABEL_93:
  v52 = __dst[2];
  if (__dst[2])
  {
    do
    {
      v53 = (_QWORD *)*v52;
      operator delete(v52);
      v52 = v53;
    }
    while (v53);
  }
  v54 = __dst[0];
  __dst[0] = 0;
  if (v54)
    operator delete(v54);
  memcpy(__dst, &unk_1B9B91950, sizeof(__dst));
  LODWORD(__dst[1]) = 0;
  LODWORD(__dst[6]) = 0;
  LODWORD(__dst[8]) = 0;
  LODWORD(__dst[10]) = 0;
  __dst[11] = 0;
  HIDWORD(__dst[12]) = 0;
  LODWORD(__dst[25]) = 0;
  LODWORD(__dst[26]) = 0;
  LODWORD(__dst[27]) = 0;
  LODWORD(__dst[31]) = 0;
  LODWORD(__dst[33]) = 0;
  LODWORD(__dst[34]) = 0;
  LODWORD(__dst[35]) = 0;
  HIDWORD(__dst[38]) = 0;
  LODWORD(__dst[40]) = 0;
  LODWORD(__dst[41]) = 0;
  LODWORD(__dst[42]) = 0;
  LODWORD(__dst[44]) = 0;
  LODWORD(__dst[50]) = 0;
  LODWORD(__dst[52]) = 0;
  LODWORD(__dst[56]) = 0;
  LODWORD(__dst[58]) = 0;
  LODWORD(__dst[60]) = 0;
  LODWORD(__dst[64]) = 0;
  LODWORD(__dst[65]) = 0;
  LODWORD(__dst[66]) = 0;
  LODWORD(__dst[68]) = 0;
  LODWORD(__dst[70]) = 0;
  v162 = 0;
  memset(&__dst[14], 0, 28);
  LODWORD(__dst[19]) = 0;
  __dst[29] = 0;
  __dst[28] = 0;
  __dst[36] = 0;
  __dst[37] = 0;
  memset(&__dst[61], 0, 20);
  if (v9 != v8)
  {
    v55 = v9;
    do
    {
      v56 = *((_QWORD *)v55 - 1);
      v55 -= 8;
      SVG::Presentation::specifiedInherit((SVG::Presentation *)(v56 + 64), (const SVG::Presentation *)__dst, v130);
      *(_OWORD *)__dst = v130[0];
      *(_OWORD *)&__dst[2] = v130[1];
      *(_OWORD *)&__dst[4] = v130[2];
      __dst[6] = v131;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&__dst[8], (uint64_t)v132);
      *(_OWORD *)&__dst[11] = v134;
      *(_OWORD *)&__dst[13] = v135;
      *(_OWORD *)&__dst[15] = v136;
      LODWORD(__dst[17]) = v137;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>((uint64_t)&__dst[19], (uint64_t)v138);
      *(_OWORD *)&__dst[26] = v140;
      *(_OWORD *)&__dst[28] = v141;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&__dst[31], (uint64_t)v142);
      *(_OWORD *)&__dst[38] = v146;
      *(_OWORD *)&__dst[40] = v147;
      __dst[42] = v148;
      *(_OWORD *)&__dst[34] = v144;
      *(_OWORD *)&__dst[36] = v145;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>((uint64_t)&__dst[44], (uint64_t)v149);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&__dst[52], (uint64_t)v151);
      *(_OWORD *)&__dst[65] = v157;
      *(_OWORD *)&__dst[67] = v158;
      *(_OWORD *)&__dst[69] = v159;
      v162 = v160;
      *(_OWORD *)&__dst[57] = v153;
      *(_OWORD *)&__dst[59] = v154;
      *(_OWORD *)&__dst[61] = v155;
      *(_OWORD *)&__dst[63] = v156;
      if (v152 != -1)
        ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138240 + v152))(v111, v151);
      v152 = -1;
      if (v150 != -1)
        ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138228 + v150))(v111, v149);
      v150 = -1;
      if (v143 != -1)
        ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138210 + v143))(v111, v142);
      v143 = -1;
      if (v139 != -1)
        ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138228 + v139))(v111, v138);
      v139 = -1;
      if (v133 != -1)
        ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138210 + v133))(v111, v132);
    }
    while (v55 != v8);
  }
  SVG::Presentation::defaultPresentation((uint64_t)v111);
  SVG::Presentation::inherit((SVG::Presentation *)__dst, (const SVG::Presentation *)(v92 + 3), (const SVG::Presentation *)v111, v130);
  if (v129 != -1)
    ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138240 + v129))(v100, v128);
  v129 = -1;
  if (v127 != -1)
    ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138228 + v127))(v100, v126);
  v127 = -1;
  if (v120 != -1)
    ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138210 + v120))(v100, v119);
  v120 = -1;
  if (v118 != -1)
    ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138228 + v118))(v100, v117);
  v118 = -1;
  if (v113 != -1)
    ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138210 + v113))(v100, v112);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  if (v9 == v8)
  {
LABEL_124:
    v60 = 0;
LABEL_125:
    *a5 = 0;
    if (!v60)
      goto LABEL_127;
    goto LABEL_126;
  }
  v57 = v8;
  while (1)
  {
    v58 = *(const void ***)(*(_QWORD *)v57 + 32);
    v59 = *(const void ***)(*(_QWORD *)v57 + 40);
    if (v58 != v59)
      break;
    v57 += 8;
    if (v57 == v9)
      goto LABEL_124;
  }
  v60 = 0;
  do
  {
    v61 = *v58;
    if (v60 >= v98)
    {
      v62 = ((char *)v60 - v96) >> 3;
      if ((unint64_t)(v62 + 1) >> 61)
        goto LABEL_239;
      v63 = ((char *)v98 - v96) >> 2;
      if (v63 <= v62 + 1)
        v63 = v62 + 1;
      if ((unint64_t)((char *)v98 - v96) >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v63;
      if (v64)
        v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v98, v64);
      else
        v65 = 0;
      v66 = &v65[8 * v62];
      *(_QWORD *)v66 = v61;
      v60 = (const void **)(v66 + 8);
      v68 = v96;
      v67 = v97;
      if (v97 != (const void **)v96)
      {
        do
        {
          v69 = (uint64_t)*--v67;
          *((_QWORD *)v66 - 1) = v69;
          v66 -= 8;
        }
        while (v67 != (const void **)v68);
        v67 = (const void **)v96;
      }
      v96 = v66;
      v97 = v60;
      v98 = (const void **)&v65[8 * v64];
      if (v67)
        operator delete(v67);
    }
    else
    {
      *v60++ = v61;
    }
    v97 = v60;
    ++v58;
  }
  while (v58 != v59);
  v70 = (const void **)v96;
  if (v96 == (char *)v60)
    goto LABEL_125;
  locations = 0;
  v94 = 0;
  v95 = 0;
  v71 = 0.0;
  do
  {
    SVG::Presentation::defaultPresentation((uint64_t)v100);
    SVG::Presentation::inherit((SVG::Presentation *)(v72 + 64), (const SVG::Presentation *)v130, (const SVG::Presentation *)v100, v111);
    if (v110 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7138240 + v110))(&v99, &v109);
    v110 = -1;
    if (v108 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7138228 + v108))(&v99, &v107);
    v108 = -1;
    if (v106 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7138210 + v106))(&v99, &v105);
    v106 = -1;
    if (v104 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7138228 + v104))(&v99, &v103);
    v104 = -1;
    if (v102 != -1)
      ((void (*)(char *, uint64_t *))*(&off_1E7138210 + v102))(&v99, &v101);
    if (v123 != 2)
      goto LABEL_238;
    if (v122)
    {
      if (v125 != 2)
        goto LABEL_238;
      v73 = v121;
LABEL_190:
      SVG::createColorObject(a4, v73, v100, v124);
      v74 = (const void *)v100[0];
      goto LABEL_191;
    }
    if (v116 != 2)
      goto LABEL_238;
    if (v115)
    {
      if (v125 != 2)
        goto LABEL_238;
      v73 = v114;
      goto LABEL_190;
    }
    v74 = 0;
LABEL_191:
    v75 = SVG::Length::computeValue((SVG::Length *)(v72 + 640), 1.0);
    if (v75 < v71)
      v75 = v71;
    if (v75 <= 1.0)
      v76 = v75;
    else
      v76 = 1.0;
    if (v75 >= 0.0)
      v71 = v76;
    else
      v71 = 0.0;
    if (v74)
    {
      CFArrayAppendValue(cf, v74);
      v77 = v94;
      if (v94 >= v95)
      {
        v79 = locations;
        v80 = v94 - locations;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_239;
        v82 = (char *)v95 - (char *)locations;
        if (((char *)v95 - (char *)locations) >> 2 > v81)
          v81 = v82 >> 2;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83)
        {
          v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v95, v83);
          v79 = locations;
          v77 = v94;
        }
        else
        {
          v84 = 0;
        }
        v85 = (double *)&v84[8 * v80];
        *v85 = v71;
        v78 = v85 + 1;
        while (v77 != v79)
        {
          v86 = *((_QWORD *)v77-- - 1);
          *((_QWORD *)v85-- - 1) = v86;
        }
        locations = v85;
        v95 = (double *)&v84[8 * v83];
        if (v79)
          operator delete(v79);
      }
      else
      {
        *v94 = v71;
        v78 = v94 + 1;
      }
      v94 = v78;
      CFRelease(v74);
    }
    if (v129 != -1)
      ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138240 + v129))(v100, v128);
    v129 = -1;
    if (v127 != -1)
      ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138228 + v127))(v100, v126);
    v127 = -1;
    if (v120 != -1)
      ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138210 + v120))(v100, v119);
    v120 = -1;
    if (v118 != -1)
      ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138228 + v118))(v100, v117);
    v118 = -1;
    if (v113 != -1)
      ((void (*)(_QWORD *, _BYTE *))*(&off_1E7138210 + v113))(v100, v112);
    ++v70;
  }
  while (v70 != v60);
  if ((_DWORD)v136 != 2)
  {
LABEL_238:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_239:
    abort();
  }
  v87 = (CFStringRef *)MEMORY[0x1E0C9DA00];
  if (HIDWORD(v135) != 2)
    v87 = (CFStringRef *)MEMORY[0x1E0C9DA10];
  v88 = CGColorSpaceCreateWithName(*v87);
  *a5 = CGGradientCreateWithColors(v88, cf, locations);
  if (v88)
    CFRelease(v88);
  if (locations)
    operator delete(locations);
  v60 = (const void **)v96;
  if (v96)
  {
LABEL_126:
    v97 = v60;
    operator delete(v60);
  }
LABEL_127:
  if (v152 != -1)
    ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138240 + v152))(v111, v151);
  v152 = -1;
  if (v150 != -1)
    ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138228 + v150))(v111, v149);
  v150 = -1;
  if (v143 != -1)
    ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138210 + v143))(v111, v142);
  v143 = -1;
  if (v139 != -1)
    ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138228 + v139))(v111, v138);
  v139 = -1;
  if (v133 != -1)
    ((void (*)(_OWORD *, _BYTE *))*(&off_1E7138210 + v133))(v111, v132);
  if (LODWORD(__dst[56]) != -1)
    ((void (*)(_OWORD *, void **))*(&off_1E7138240 + LODWORD(__dst[56])))(v130, &__dst[52]);
  LODWORD(__dst[56]) = -1;
  if (LODWORD(__dst[50]) != -1)
    ((void (*)(_OWORD *, void **))*(&off_1E7138228 + LODWORD(__dst[50])))(v130, &__dst[44]);
  LODWORD(__dst[50]) = -1;
  if (LODWORD(__dst[33]) != -1)
    ((void (*)(_OWORD *, void **))*(&off_1E7138210 + LODWORD(__dst[33])))(v130, &__dst[31]);
  LODWORD(__dst[33]) = -1;
  if (LODWORD(__dst[25]) != -1)
    ((void (*)(_OWORD *, void **))*(&off_1E7138228 + LODWORD(__dst[25])))(v130, &__dst[19]);
  LODWORD(__dst[25]) = -1;
  if (LODWORD(__dst[10]) != -1)
    ((void (*)(_OWORD *, void **))*(&off_1E7138210 + LODWORD(__dst[10])))(v130, &__dst[8]);
  if (v8)
    operator delete(v8);
  if (cf)
    CFRelease(cf);
}

uint64_t SVG::GradientElement::State::specifiedInherit@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(result + 16);
  v4 = *(_OWORD *)(result + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
  *(_OWORD *)(a3 + 48) = v4;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(result + 64);
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_OWORD *)(a3 + 16) = v3;
  if (!*(_BYTE *)(result + 4) && *(_BYTE *)(a2 + 4))
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    *(_BYTE *)(a3 + 4) = *(_BYTE *)(a2 + 4);
  }
  if (!*(_BYTE *)(result + 56) && *(_BYTE *)(a2 + 56))
  {
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a3 + 56) = *(_BYTE *)(a2 + 56);
  }
  if (!*(_BYTE *)(result + 68))
  {
    if (*(_BYTE *)(a2 + 68))
    {
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a2 + 64);
      *(_BYTE *)(a3 + 68) = *(_BYTE *)(a2 + 68);
    }
  }
  return result;
}

void std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t SVG::MaskElement::MaskElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  void *v18[2];
  unint64_t v19;

  v5 = (_OWORD *)(a1 + 648);
  v6 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v6 + 64, a3);
  *(_QWORD *)a1 = off_1E71372A0;
  *(_DWORD *)(a1 + 640) = 1;
  *v5 = xmmword_1B9B91BB0;
  v5[1] = xmmword_1B9B91BB0;
  v5[2] = xmmword_1B9B91BC0;
  v5[3] = xmmword_1B9B91BC0;
  *(_DWORD *)(a1 + 712) = 0;
  std::string::basic_string[abi:nn180100]<0>(v18, "x");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v7 = SVG::Element::findInAttributeMap(a3, (uint64_t)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if (!v7)
      goto LABEL_9;
  }
  else if (!v7)
  {
    goto LABEL_9;
  }
  v18[0] = (void *)-1;
  v18[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v7 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v18);
  if ((_BYTE)v19)
    *v5 = *(_OWORD *)v18;
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v18, "y");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if (!v8)
      goto LABEL_17;
  }
  else if (!v8)
  {
    goto LABEL_17;
  }
  v18[0] = (void *)-1;
  v18[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v18);
  if ((_BYTE)v19)
    v5[1] = *(_OWORD *)v18;
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v18, "width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v9 = SVG::Element::findInAttributeMap(a3, (uint64_t)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if (!v9)
      goto LABEL_25;
  }
  else if (!v9)
  {
    goto LABEL_25;
  }
  v18[0] = (void *)-1;
  v18[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v9 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v18);
  if ((_BYTE)v19)
    v5[2] = *(_OWORD *)v18;
LABEL_25:
  std::string::basic_string[abi:nn180100]<0>(v18, "height");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v10 = SVG::Element::findInAttributeMap(a3, (uint64_t)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if (!v10)
      goto LABEL_33;
  }
  else if (!v10)
  {
    goto LABEL_33;
  }
  v18[0] = (void *)-1;
  v18[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v10 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v18);
  if ((_BYTE)v19)
    v5[3] = *(_OWORD *)v18;
LABEL_33:
  std::string::basic_string[abi:nn180100]<0>(v18, "maskUnits");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v11 = SVG::Element::findInAttributeMap(a3, (uint64_t)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if (!v11)
      goto LABEL_41;
  }
  else if (!v11)
  {
    goto LABEL_41;
  }
  v12 = SVG::parseUnits((uint64_t)(v11 + 64));
  if ((v12 & 0xFF00000000) != 0)
    *(_DWORD *)(a1 + 640) = v12;
LABEL_41:
  std::string::basic_string[abi:nn180100]<0>(v18, "maskContentUnits");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v13 = SVG::Element::findInAttributeMap(a3, (uint64_t)v18, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if (!v13)
      return a1;
  }
  else if (!v13)
  {
    return a1;
  }
  v14 = SVG::parseUnits((uint64_t)(v13 + 64));
  if ((v14 & 0xFF00000000) != 0)
    *(_DWORD *)(a1 + 712) = v14;
  return a1;
}

uint64_t SVG::MaskElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  if (((*(uint64_t (**)(const void *))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
    return SVG::Element::appendChild(a1, a2);
  v5 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::MaskElement::~MaskElement(SVG::MaskElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))*(&off_1E7138258 + v2))(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&off_1E7138270 + v3))(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E7138288 + v4))(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E7138270 + v5))(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))*(&off_1E7138288 + v6))(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))*(&off_1E7138258 + v2))(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))*(&off_1E7138270 + v3))(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E7138288 + v4))(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E7138270 + v5))(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))*(&off_1E7138288 + v6))(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

void SVG::analyzeDependencies(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  void **v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD **v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *i;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  _OWORD v53[2];
  int v54;
  int v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *__p[2];
  void *v64[2];
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;

  v66 = 0;
  v67 = 0;
  v68 = 0;
  SVG::findDependentElements((unint64_t *)&v66, a4);
  v9 = 0uLL;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v64 = 0u;
  v65 = 0xAAAAAAAA3F800000;
  v10 = v66;
  v11 = v67;
  v12 = (unint64_t)v66;
  if (v66 != v67)
  {
    v52 = (unint64_t)v66;
    while (1)
    {
      v62 = 0xAAAAAAAAAAAAAAAALL;
      v13 = *((unsigned int *)v10 + 2);
      if ((_DWORD)v13 == -1)
      {
LABEL_110:
        std::__throw_bad_variant_access[abi:nn180100]();
LABEL_111:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      *(_QWORD *)&v56 = v53;
      v14 = ((uint64_t (*)(__int128 *, uint64_t *))*(&off_1E71382B0 + v13))(&v56, v10);
      v15 = v14;
      v16 = (unint64_t)__p[1];
      if (__p[1])
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v18 = v14;
          if ((void *)v14 >= __p[1])
            v18 = v14 % (unint64_t)__p[1];
        }
        else
        {
          v18 = ((unint64_t)__p[1] - 1) & v14;
        }
        v19 = (void **)*((_QWORD *)__p[0] + v18);
        if (v19)
        {
          v20 = *v19;
          if (*v19)
          {
            v21 = *((_DWORD *)v10 + 2);
            do
            {
              v22 = v20[1];
              if (v22 == v14)
              {
                v23 = *((unsigned int *)v20 + 6);
                if ((_DWORD)v23 == 1)
                {
                  if (v21 == 1)
                    goto LABEL_28;
                }
                else
                {
                  if (*((_DWORD *)v20 + 6))
                    v24 = 0;
                  else
                    v24 = v21 == 0;
                  if (v24)
                  {
LABEL_28:
                    if (v20[2] == *v10)
                      goto LABEL_86;
                  }
                }
              }
              else
              {
                if (v17.u32[0] > 1uLL)
                {
                  if ((void *)v22 >= __p[1])
                    v22 %= (unint64_t)__p[1];
                }
                else
                {
                  v22 &= (unint64_t)__p[1] - 1;
                }
                if (v22 != v18)
                  break;
              }
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
        }
      }
      else
      {
        v18 = 0xAAAAAAAAAAAAAAAALL;
      }
      v20 = operator new(0x38uLL);
      *v20 = 0;
      v20[1] = v15;
      *((_OWORD *)v20 + 1) = *(_OWORD *)v10;
      v20[5] = 0;
      v20[6] = 0;
      v20[4] = 0;
      v25 = (float)((unint64_t)v64[1] + 1);
      if (!v16 || (float)(*(float *)&v65 * (float)v16) < v25)
        break;
LABEL_76:
      v41 = __p[0];
      v42 = (_QWORD *)*((_QWORD *)__p[0] + v18);
      if (v42)
      {
        *v20 = *v42;
      }
      else
      {
        *v20 = v64[0];
        v64[0] = v20;
        v41[v18] = v64;
        if (!*v20)
          goto LABEL_85;
        v43 = *(_QWORD *)(*v20 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v43 >= v16)
            v43 %= v16;
        }
        else
        {
          v43 &= v16 - 1;
        }
        v42 = (char *)__p[0] + 8 * v43;
      }
      *v42 = v20;
LABEL_85:
      ++v64[1];
      v23 = *((unsigned int *)v10 + 2);
LABEL_86:
      v62 = (unint64_t)v20;
      *(_QWORD *)&v56 = a2;
      *((_QWORD *)&v56 + 1) = &v62;
      *(_QWORD *)&v57 = a1;
      *((_QWORD *)&v57 + 1) = a3;
      v58 = a2;
      v59 = &v62;
      v60 = a1;
      v61 = a3;
      if (v23 == 0xFFFFFFFFLL)
        goto LABEL_110;
      *(_QWORD *)&v53[0] = &v56;
      ((void (*)(_OWORD *, uint64_t *))*(&off_1E71382A0 + v23))(v53, v10);
      v10 += 2;
      if (v10 == v11)
      {
        v12 = (unint64_t)v11;
        v10 = (uint64_t *)v52;
        v9 = 0uLL;
        goto LABEL_98;
      }
    }
    v26 = (v16 & (v16 - 1)) != 0;
    if (v16 < 3)
      v26 = 1;
    v27 = v26 | (2 * v16);
    v28 = vcvtps_u32_f32(v25 / *(float *)&v65);
    if (v27 <= v28)
      prime = (int8x8_t)v28;
    else
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v16 = (unint64_t)__p[1];
    }
    if (*(_QWORD *)&prime > v16)
      goto LABEL_42;
    if (*(_QWORD *)&prime < v16)
    {
      v36 = vcvtps_u32_f32((float)(unint64_t)v64[1] / *(float *)&v65);
      if (v16 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (*(_QWORD *)&prime <= v36)
        prime = (int8x8_t)v36;
      if (*(_QWORD *)&prime >= v16)
      {
        v16 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_42:
          if (*(_QWORD *)&prime >> 61)
            goto LABEL_111;
          v30 = operator new(8 * *(_QWORD *)&prime);
          v31 = __p[0];
          __p[0] = v30;
          if (v31)
            operator delete(v31);
          v32 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v32++) = 0;
          while (*(_QWORD *)&prime != v32);
          v33 = (_QWORD **)v64[0];
          if (v64[0])
          {
            v34 = *((_QWORD *)v64[0] + 1);
            v35 = (uint8x8_t)vcnt_s8(prime);
            v35.i16[0] = vaddlv_u8(v35);
            if (v35.u32[0] > 1uLL)
            {
              if (v34 >= *(_QWORD *)&prime)
                v34 %= *(_QWORD *)&prime;
            }
            else
            {
              v34 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v34) = v64;
            for (i = *v33; i; v34 = v40)
            {
              v40 = i[1];
              if (v35.u32[0] > 1uLL)
              {
                if (v40 >= *(_QWORD *)&prime)
                  v40 %= *(_QWORD *)&prime;
              }
              else
              {
                v40 &= *(_QWORD *)&prime - 1;
              }
              if (v40 != v34)
              {
                if (!*((_QWORD *)__p[0] + v40))
                {
                  *((_QWORD *)__p[0] + v40) = v33;
                  goto LABEL_67;
                }
                *v33 = (_QWORD *)*i;
                *i = **((_QWORD **)__p[0] + v40);
                **((_QWORD **)__p[0] + v40) = i;
                i = v33;
              }
              v40 = v34;
LABEL_67:
              v33 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v16 = (unint64_t)prime;
          goto LABEL_71;
        }
        v44 = __p[0];
        __p[0] = 0;
        if (v44)
          operator delete(v44);
        v16 = 0;
        __p[1] = 0;
      }
    }
LABEL_71:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v18 = v15 % v16;
      else
        v18 = v15;
    }
    else
    {
      v18 = (v16 - 1) & v15;
    }
    goto LABEL_76;
  }
LABEL_98:
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v56 = v9;
  v57 = v9;
  v58 = 0xAAAAAAAA3F800000;
  v53[0] = v9;
  v53[1] = v9;
  v54 = 1065353216;
  v55 = -1431655766;
  if (v10 != (uint64_t *)v12)
  {
    v45 = v10;
    do
    {
      v46 = *v45;
      v47 = v45[1];
      v45 += 2;
      SVG::enqueue((void **)a5, (float *)&v56, (float *)v53, __p, v46, v47);
    }
    while (v45 != (uint64_t *)v12);
  }
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)v53);
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)&v56);
  v48 = v64[0];
  if (v64[0])
  {
    do
    {
      v49 = (_QWORD *)*v48;
      v50 = (void *)v48[4];
      if (v50)
      {
        v48[5] = v50;
        operator delete(v50);
      }
      operator delete(v48);
      v48 = v49;
    }
    while (v49);
  }
  v51 = __p[0];
  __p[0] = 0;
  if (v51)
    operator delete(v51);
  if (v10)
    operator delete(v10);
}

void SVG::findDependentElements(unint64_t *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  _DWORD *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  if (v4)
  {
    v5 = v4;
    v6 = (_DWORD *)a1[1];
    v7 = a1[2];
    if ((unint64_t)v6 < v7)
    {
      *(_QWORD *)v6 = v5;
      v6[2] = 0;
LABEL_7:
      v11 = v6 + 4;
LABEL_32:
      a1[1] = (unint64_t)v11;
      goto LABEL_33;
    }
    v12 = (uint64_t)((uint64_t)v6 - *a1) >> 4;
    if (!((unint64_t)(v12 + 1) >> 60))
    {
      v13 = v7 - *a1;
      v14 = v13 >> 3;
      if (v13 >> 3 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
      v16 = 0xFFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v14;
      if (v16)
      {
        v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v16);
        v6 = (_DWORD *)a1[1];
      }
      else
      {
        v17 = 0;
      }
      v23 = v16 + 16 * v12;
      v24 = v16 + 16 * v17;
      *(_QWORD *)v23 = v5;
      *(_DWORD *)(v23 + 8) = 0;
      v11 = (_DWORD *)(v23 + 16);
      v25 = (_DWORD *)*a1;
      if (v6 == (_DWORD *)*a1)
        goto LABEL_30;
      do
      {
        *(_OWORD *)(v23 - 16) = *((_OWORD *)v6 - 1);
        v23 -= 16;
        v6 -= 4;
      }
      while (v6 != v25);
LABEL_29:
      v6 = (_DWORD *)*a1;
LABEL_30:
      *a1 = v23;
      a1[1] = (unint64_t)v11;
      a1[2] = v24;
      if (v6)
        operator delete(v6);
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  if (v8)
  {
    v9 = v8;
    v6 = (_DWORD *)a1[1];
    v10 = a1[2];
    if ((unint64_t)v6 < v10)
    {
      *(_QWORD *)v6 = v9;
      v6[2] = 1;
      goto LABEL_7;
    }
    v18 = (uint64_t)((uint64_t)v6 - *a1) >> 4;
    if (!((unint64_t)(v18 + 1) >> 60))
    {
      v19 = v10 - *a1;
      v20 = v19 >> 3;
      if (v19 >> 3 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      v15 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0;
      v21 = 0xFFFFFFFFFFFFFFFLL;
      if (!v15)
        v21 = v20;
      if (v21)
      {
        v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v21);
        v6 = (_DWORD *)a1[1];
      }
      else
      {
        v22 = 0;
      }
      v23 = v21 + 16 * v18;
      v24 = v21 + 16 * v22;
      *(_QWORD *)v23 = v9;
      *(_DWORD *)(v23 + 8) = 1;
      v11 = (_DWORD *)(v23 + 16);
      v26 = (_DWORD *)*a1;
      if (v6 == (_DWORD *)*a1)
        goto LABEL_30;
      do
      {
        *(_OWORD *)(v23 - 16) = *((_OWORD *)v6 - 1);
        v23 -= 16;
        v6 -= 4;
      }
      while (v6 != v26);
      goto LABEL_29;
    }
LABEL_37:
    abort();
  }
LABEL_33:
  v28 = (uint64_t *)a2[4];
  v27 = (uint64_t *)a2[5];
  while (v28 != v27)
  {
    v29 = *v28++;
    SVG::findDependentElements(a1, v29);
  }
}

uint64_t SVG::enqueue(void **a1, float *a2, float *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x8_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  _OWORD *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;

  *(_QWORD *)&v45 = a5;
  *((_QWORD *)&v45 + 1) = a6;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v46 = a5;
  *((_QWORD *)&v46 + 1) = a6;
  v43 = v46;
  v10 = std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::find<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(a3, (uint64_t)&v46);
  LOBYTE(v44) = v10 != 0;
  if (v10)
    return 1;
  std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::__emplace_unique_key_args<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>&>(a3, (uint64_t)&v46, &v46);
  if (std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::find<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(a2, (uint64_t)&v45))
  {
    goto LABEL_51;
  }
  if (DWORD2(v45) == -1)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_56;
  }
  *(_QWORD *)&v46 = &v47;
  v12 = ((uint64_t (*)(__int128 *, __int128 *))*(&off_1E71382B0 + DWORD2(v45)))(&v46, &v45);
  v13 = (int8x8_t)a4[1];
  v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = v12;
    if (v12 >= *(_QWORD *)&v13)
      v15 = v12 % *(_QWORD *)&v13;
  }
  else
  {
    v15 = (*(_QWORD *)&v13 - 1) & v12;
  }
  v16 = *(uint64_t **)(*a4 + 8 * v15);
  do
  {
    do
    {
      while (1)
      {
        do
          v16 = (uint64_t *)*v16;
        while (v12 != v16[1]);
        v17 = *((_DWORD *)v16 + 6);
        if (v17 != 1)
          break;
        if (DWORD2(v45) == 1)
          goto LABEL_19;
      }
      if (v17)
        v18 = 0;
      else
        v18 = DWORD2(v45) == 0;
    }
    while (!v18);
LABEL_19:
    ;
  }
  while (v16[2] != (_QWORD)v45);
  v19 = a1[1];
  v20 = (_QWORD *)v16[4];
  v21 = (_QWORD *)v16[5];
  if (v20 == v21)
    goto LABEL_25;
  v22 = ((char *)v19 - (_BYTE *)*a1) >> 4;
  do
  {
    if (SVG::enqueue(a1, a2, a3, a4, *v20, v20[1]))
    {
      v31 = (char *)*a1;
      v30 = a1[1];
      v32 = v30 - (_BYTE *)*a1;
      if (v22 < v32 >> 4)
      {
        v33 = 16 * v22;
        v34 = v22;
        do
        {
          std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::__erase_unique<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(a2, (uint64_t)&v31[v33]);
          ++v34;
          v31 = (char *)*a1;
          v30 = a1[1];
          v32 = v30 - (_BYTE *)*a1;
          v33 += 16;
        }
        while (v34 < v32 >> 4);
      }
      if (v32 >> 4 > v22)
      {
        v35 = v30 - v31 - 16;
        do
        {
          v30 -= 16;
          v36 = v22 >= v35 >> 4;
          v35 -= 16;
        }
        while (!v36);
        a1[1] = v30;
      }
      v11 = 1;
      goto LABEL_52;
    }
    v20 += 2;
  }
  while (v20 != v21);
  v19 = a1[1];
LABEL_25:
  v23 = (unint64_t)a1[2];
  if ((unint64_t)v19 < v23)
  {
    *v19 = v45;
    v24 = v19 + 1;
    goto LABEL_50;
  }
  v25 = ((char *)v19 - (_BYTE *)*a1) >> 4;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 60)
LABEL_56:
    abort();
  v27 = v23 - (_QWORD)*a1;
  if (v27 >> 3 > v26)
    v26 = v27 >> 3;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
    v28 = 0xFFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (v28)
    v28 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v28);
  else
    v29 = 0;
  v37 = (_OWORD *)(v28 + 16 * v25);
  v38 = v28 + 16 * v29;
  *v37 = v45;
  v24 = v37 + 1;
  v40 = (char *)*a1;
  v39 = (char *)a1[1];
  if (v39 != *a1)
  {
    do
    {
      *--v37 = *((_OWORD *)v39 - 1);
      v39 -= 16;
    }
    while (v39 != v40);
    v39 = (char *)*a1;
  }
  *a1 = v37;
  a1[1] = v24;
  a1[2] = (void *)v38;
  if (v39)
    operator delete(v39);
LABEL_50:
  a1[1] = v24;
  std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::__emplace_unique_key_args<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>&>(a2, (uint64_t)&v45, &v45);
LABEL_51:
  v11 = 0;
LABEL_52:
  if (!(_BYTE)v44)
    std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::__erase_unique<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(a3, (uint64_t)&v43);
  return v11;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::analyzeDependencies(std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,SVG::Presentation const&,SVG::Element const&)::$_0,SVG::analyzeDependencies(std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,SVG::Presentation const&,SVG::Element const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> &>(_QWORD ***a1, unint64_t *a2)
{
  _QWORD **v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void (**v8)(SVG::Discoverer *__hidden);
  __int128 v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12;
  char v13;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v8 = *(void (***)(SVG::Discoverer *__hidden))(*a2 + 56);
  v5 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v4, &v8);
  v6 = *v2[1] + 32;
  v9 = *((_OWORD *)v2 + 1);
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v8 = &off_1E7137058;
  v12 = v6;
  v13 = 1;
  SVG::RecordBase::operator()((float *)&v8, v3, (const SVG::Presentation *)(v5 + 3));
  v8 = &off_1E71370C0;
  return std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)v10);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::analyzeDependencies(std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,SVG::Presentation const&,SVG::Element const&)::$_0,SVG::analyzeDependencies(std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,SVG::Presentation const&,SVG::Element const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> &>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void (**v8)(SVG::Discoverer *__hidden);
  __int128 v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12;
  char v13;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD **)(*a1 + 32);
  v8 = *(void (***)(SVG::Discoverer *__hidden))(*a2 + 56);
  v5 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v4, &v8);
  v6 = **(_QWORD **)(v2 + 40) + 32;
  v9 = *(_OWORD *)(v2 + 48);
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v8 = &off_1E7137058;
  v12 = v6;
  v13 = 1;
  SVG::RecordBase::operator()((float *)&v8, v3, (const SVG::Presentation *)(v5 + 3));
  v8 = &off_1E71370C0;
  return std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)v10);
}

void SVG::Discoverer::~Discoverer(SVG::Discoverer *this)
{
  *(_QWORD *)this = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::Discoverer::processPatternElement(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;

  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    v3 = *(unint64_t **)(a1 + 64);
    v4 = (_DWORD *)v3[1];
    v5 = v3[2];
    if ((unint64_t)v4 >= v5)
    {
      v7 = (uint64_t)((uint64_t)v4 - *v3) >> 4;
      if ((unint64_t)(v7 + 1) >> 60)
        abort();
      v8 = v5 - *v3;
      v9 = v8 >> 3;
      if (v8 >> 3 <= (unint64_t)(v7 + 1))
        v9 = v7 + 1;
      v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
      v11 = 0xFFFFFFFFFFFFFFFLL;
      if (!v10)
        v11 = v9;
      if (v11)
      {
        v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v11);
        v4 = (_DWORD *)v3[1];
      }
      else
      {
        v12 = 0;
      }
      v13 = v11 + 16 * v7;
      v14 = v11 + 16 * v12;
      *(_QWORD *)v13 = a2;
      *(_DWORD *)(v13 + 8) = 0;
      v6 = (_DWORD *)(v13 + 16);
      v15 = (_DWORD *)*v3;
      if (v4 != (_DWORD *)*v3)
      {
        do
        {
          *(_OWORD *)(v13 - 16) = *((_OWORD *)v4 - 1);
          v13 -= 16;
          v4 -= 4;
        }
        while (v4 != v15);
        v4 = (_DWORD *)*v3;
      }
      *v3 = v13;
      v3[1] = (unint64_t)v6;
      v3[2] = v14;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v4 = a2;
      v4[2] = 0;
      v6 = v4 + 4;
    }
    v3[1] = (unint64_t)v6;
  }
}

void SVG::Discoverer::processMaskElement(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;

  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    v3 = *(unint64_t **)(a1 + 64);
    v4 = (_DWORD *)v3[1];
    v5 = v3[2];
    if ((unint64_t)v4 >= v5)
    {
      v7 = (uint64_t)((uint64_t)v4 - *v3) >> 4;
      if ((unint64_t)(v7 + 1) >> 60)
        abort();
      v8 = v5 - *v3;
      v9 = v8 >> 3;
      if (v8 >> 3 <= (unint64_t)(v7 + 1))
        v9 = v7 + 1;
      v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
      v11 = 0xFFFFFFFFFFFFFFFLL;
      if (!v10)
        v11 = v9;
      if (v11)
      {
        v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v11);
        v4 = (_DWORD *)v3[1];
      }
      else
      {
        v12 = 0;
      }
      v13 = v11 + 16 * v7;
      v14 = v11 + 16 * v12;
      *(_QWORD *)v13 = a2;
      *(_DWORD *)(v13 + 8) = 1;
      v6 = (_DWORD *)(v13 + 16);
      v15 = (_DWORD *)*v3;
      if (v4 != (_DWORD *)*v3)
      {
        do
        {
          *(_OWORD *)(v13 - 16) = *((_OWORD *)v4 - 1);
          v13 -= 16;
          v4 -= 4;
        }
        while (v4 != v15);
        v4 = (_DWORD *)*v3;
      }
      *v3 = v13;
      v3[1] = (unint64_t)v6;
      v3[2] = v14;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v4 = a2;
      v4[2] = 1;
      v6 = v4 + 4;
    }
    v3[1] = (unint64_t)v6;
  }
}

unint64_t std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::find<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  char *v18;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2 == -1)
  {
    v15 = std::__throw_bad_variant_access[abi:nn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::DependentElementHash::operator()(std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&)::{lambda(SVG::PatternElement const&)#1},SVG::DependentElementHash::operator()(std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&)::{lambda(SVG::MaskElement const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&>(v15, v16);
  }
  else
  {
    v18 = &v17;
    v5 = ((uint64_t (*)(char **))*(&off_1E71382B0 + v2))(&v18);
    v6 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v6)
      return 0;
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = v5;
      if (v5 >= *(_QWORD *)&v6)
        v8 = v5 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & v5;
    }
    v9 = *(uint64_t **)(*a1 + 8 * v8);
    if (v9)
    {
      v9 = (uint64_t *)*v9;
      if (v9)
      {
        v10 = *(_DWORD *)(a2 + 8);
        do
        {
          v11 = v9[1];
          if (v11 == v5)
          {
            v12 = *((_DWORD *)v9 + 6);
            if (v12 == 1)
            {
              if (v10 == 1)
                goto LABEL_25;
            }
            else
            {
              if (v12)
                v13 = 0;
              else
                v13 = v10 == 0;
              if (v13)
              {
LABEL_25:
                if (v9[2] == *(_QWORD *)a2)
                  return (unint64_t)v9;
              }
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= *(_QWORD *)&v6)
                v11 %= *(_QWORD *)&v6;
            }
            else
            {
              v11 &= *(_QWORD *)&v6 - 1;
            }
            if (v11 != v8)
              return 0;
          }
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
    return (unint64_t)v9;
  }
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::DependentElementHash::operator()(std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&)::{lambda(SVG::PatternElement const&)#1},SVG::DependentElementHash::operator()(std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&)::{lambda(SVG::MaskElement const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = 0x9DDFEA08EB382D69 * (((((*a2 >> 3) & 0x3FFFFFFLL) << 6) | 8) ^ HIDWORD(*a2));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69
                                                                      * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47));
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::DependentElementHash::operator()(std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&)::{lambda(SVG::PatternElement const&)#1},SVG::DependentElementHash::operator()(std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&)::{lambda(SVG::MaskElement const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = 0x9DDFEA08EB382D69 * (((((*a2 >> 3) & 0x3FFFFFFLL) << 6) | 8) ^ HIDWORD(*a2));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69
                                                                      * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47));
}

void std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::__erase_unique<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = (uint64_t *)std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::find<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *v3;
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v4)
        v6 %= *(_QWORD *)&v4;
    }
    else
    {
      v6 &= *(_QWORD *)&v4 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v4)
        v10 %= *(_QWORD *)&v4;
    }
    else
    {
      v10 &= *(_QWORD *)&v4 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (v5)
      {
        v11 = *(_QWORD *)(v5 + 8);
        if (v7.u32[0] > 1uLL)
        {
          v12 = *(_QWORD *)(v5 + 8);
          if (v11 >= *(_QWORD *)&v4)
            v12 = v11 % *(_QWORD *)&v4;
        }
        else
        {
          v12 = v11 & (*(_QWORD *)&v4 - 1);
        }
        if (v12 == v6)
          goto LABEL_24;
      }
      *(_QWORD *)(*a1 + 8 * v6) = 0;
      v5 = *v3;
    }
    if (!v5)
    {
LABEL_30:
      *v9 = v5;
      *v3 = 0;
      --a1[3];
      operator delete(v3);
      return;
    }
    v11 = *(_QWORD *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v4)
        v11 %= *(_QWORD *)&v4;
    }
    else
    {
      v11 &= *(_QWORD *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v9;
      v5 = *v3;
    }
    goto LABEL_30;
  }
}

void std::__hash_table<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,SVG::DependentElementHash,SVG::DependentElementPredicate,std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>::__emplace_unique_key_args<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>,std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>&>(float *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  char v40;
  char *v41;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_95;
  }
  v41 = &v40;
  v7 = ((uint64_t (*)(char **))*(&off_1E71382B0 + v3))(&v41);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v7;
      if (v7 >= v9)
        v11 = v7 % v9;
    }
    else
    {
      v11 = (v9 - 1) & v7;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        v14 = *(_DWORD *)(a2 + 8);
        do
        {
          v15 = v13[1];
          if (v15 == v7)
          {
            v16 = *((_DWORD *)v13 + 6);
            if (v16 == 1)
            {
              if (v14 == 1)
                goto LABEL_26;
            }
            else
            {
              if (v16)
                v17 = 0;
              else
                v17 = v14 == 0;
              if (v17)
              {
LABEL_26:
                if (v13[2] == *(_QWORD *)a2)
                  return;
              }
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v15 >= v9)
                v15 %= v9;
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v11)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v11 = 0xAAAAAAAAAAAAAAAALL;
  }
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v8;
  *((_OWORD *)v18 + 1) = *a3;
  v19 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v20 = a1[8];
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
    {
LABEL_40:
      if (!(*(_QWORD *)&prime >> 61))
      {
        v25 = operator new(8 * *(_QWORD *)&prime);
        v26 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v25;
        if (v26)
          operator delete(v26);
        v27 = 0;
        *((int8x8_t *)a1 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
        while (*(_QWORD *)&prime != v27);
        v28 = (_QWORD *)*((_QWORD *)a1 + 2);
        if (v28)
        {
          v29 = v28[1];
          v30 = (uint8x8_t)vcnt_s8(prime);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            if (v29 >= *(_QWORD *)&prime)
              v29 %= *(_QWORD *)&prime;
          }
          else
          {
            v29 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = a1 + 4;
          v34 = (_QWORD *)*v28;
          if (*v28)
          {
            do
            {
              v35 = v34[1];
              if (v30.u32[0] > 1uLL)
              {
                if (v35 >= *(_QWORD *)&prime)
                  v35 %= *(_QWORD *)&prime;
              }
              else
              {
                v35 &= *(_QWORD *)&prime - 1;
              }
              if (v35 != v29)
              {
                if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                {
                  *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                  goto LABEL_65;
                }
                *v28 = *v34;
                *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                v34 = v28;
              }
              v35 = v29;
LABEL_65:
              v28 = v34;
              v34 = (_QWORD *)*v34;
              v29 = v35;
            }
            while (v34);
          }
        }
        v9 = (unint64_t)prime;
        goto LABEL_69;
      }
LABEL_95:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
          goto LABEL_40;
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_69:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v11 = v8 % v9;
      else
        v11 = v8;
    }
    else
    {
      v11 = (v9 - 1) & v8;
    }
  }
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
  if (v37)
  {
    *v18 = *v37;
LABEL_82:
    *v37 = v18;
    goto LABEL_83;
  }
  *v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v18;
  v36[v11] = a1 + 4;
  if (*v18)
  {
    v38 = *(_QWORD *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_82;
  }
LABEL_83:
  ++*((_QWORD *)a1 + 3);
}

_QWORD *OTSVGTableCreateFromData(const __CFData *a1, int a2, double a3)
{
  _QWORD *v3;
  CFIndex Length;
  unint64_t v8;
  unsigned int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFRange v15;
  CFIndex v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  const UInt8 *BytePtr;
  uint64_t v21;
  const UInt8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v32;
  const UInt8 *v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  const void *v37;
  unint64_t v38;
  CFIndex location;
  UInt8 buffer[8];
  char *v41;
  CFRange v42;
  CFRange v43;

  v3 = 0;
  if (a1 && a2)
  {
    Length = CFDataGetLength(a1);
    if (Length < 10)
      return 0;
    v8 = Length;
    *(_WORD *)buffer = -21846;
    v42.location = 0;
    v42.length = 2;
    CFDataGetBytes(a1, v42, buffer);
    v9 = __rev16(*(unsigned __int16 *)buffer);
    *(_DWORD *)buffer = -1431655766;
    v43.location = 2;
    v43.length = 4;
    CFDataGetBytes(a1, v43, buffer);
    v3 = 0;
    if (v9)
      return v3;
    v11 = (unint64_t)buffer[0] << 24;
    v12 = buffer[1];
    v13 = buffer[2];
    v14 = buffer[3];
    v15.location = v11 | ((unint64_t)buffer[1] << 16) | ((unint64_t)buffer[2] << 8) | buffer[3];
    v16 = v15.location + 2;
    if (v15.location + 2 > v8)
      return 0;
    *(_WORD *)buffer = -21846;
    location = v15.location;
    v15.length = 2;
    CFDataGetBytes(a1, v15, buffer);
    v17 = buffer[0];
    v18 = buffer[1];
    if (v16 + 12 * (unint64_t)(buffer[1] | (buffer[0] << 8)) > v8)
    {
      return 0;
    }
    else
    {
      v19 = buffer[1] | ((unint64_t)buffer[0] << 8);
      BytePtr = CFDataGetBytePtr(a1);
      if (v19)
      {
        v21 = 12 * v18 + 3072 * v17 - 12;
        v22 = &BytePtr[0x10000 * v12 + 16 + 256 * v13 + v11 + v14];
        while (v21)
        {
          v23 = *((unsigned __int16 *)v22 - 1);
          v24 = *(unsigned __int16 *)v22;
          v25 = *((unsigned __int16 *)v22 - 7);
          v26 = *((unsigned __int16 *)v22 - 6);
          v27 = __rev16(v24);
          v28 = bswap32(v25);
          v29 = __rev16(v23);
          v30 = bswap32(v26);
          if (v24 == v26 && v23 == v25)
            v32 = 0;
          else
            v32 = -127;
          if (v29 > HIWORD(v30))
            v32 = 1;
          if (v27 < HIWORD(v28))
            v32 = -1;
          v21 -= 12;
          v22 += 12;
          if (v32 != 129)
          {
            v3 = 0;
            if ((v32 & 0x80) != 0)
              return v3;
          }
        }
      }
      v33 = &BytePtr[v16];
      v34 = v19;
      v35 = (char *)operator new(0xB0uLL);
      *((_QWORD *)v35 + 1) = 0;
      v36 = (unint64_t *)(v35 + 8);
      *((_QWORD *)v35 + 2) = 0;
      *(_QWORD *)v35 = &off_1E7137BB8;
      *((_QWORD *)v35 + 3) = 850045863;
      *((_OWORD *)v35 + 9) = 0u;
      *((_OWORD *)v35 + 10) = 0u;
      *((_OWORD *)v35 + 7) = 0u;
      *((_OWORD *)v35 + 8) = 0u;
      *(_OWORD *)(v35 + 152) = 0u;
      *(_OWORD *)(v35 + 136) = 0u;
      *((_OWORD *)v35 + 2) = 0u;
      *((_OWORD *)v35 + 3) = 0u;
      *((_OWORD *)v35 + 4) = 0u;
      *((_OWORD *)v35 + 5) = 0u;
      *((_OWORD *)v35 + 6) = 0u;
      *((_DWORD *)v35 + 42) = 1065353216;
      *(_QWORD *)buffer = v35 + 24;
      v41 = v35;
      *((_QWORD *)v35 + 11) = v33;
      *((_QWORD *)v35 + 12) = v34;
      CFRetain(a1);
      v37 = (const void *)*((_QWORD *)v35 + 13);
      if (v37)
        CFRelease(v37);
      *((_QWORD *)v35 + 13) = a1;
      *((_QWORD *)v35 + 14) = location;
      *((_DWORD *)v35 + 30) = a2;
      *((double *)v35 + 16) = a3;
      v3 = (_QWORD *)operator new();
      *v3 = v35 + 24;
      v3[1] = v35;
      do
        v38 = __ldxr(v36);
      while (__stxr(v38 + 1, v36));
      std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)buffer);
    }
  }
  return v3;
}

void OTSVGTableEnumerateGlyphs(std::mutex **a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  unsigned __int16 *sig;
  unsigned __int16 *v7;

  if (a1 && a2)
  {
    v4 = *a1;
    std::mutex::lock(*a1);
    v5 = *(_QWORD *)(*a1)[1].__m_.__opaque;
    if (v5)
    {
      sig = (unsigned __int16 *)(*a1)[1].__m_.__sig;
      v7 = &sig[6 * v5];
      do
      {
        if (bswap32(*sig) >> 16 <= bswap32(sig[1]) >> 16)
          (*(void (**)(uint64_t))(a2 + 16))(a2);
        sig += 6;
      }
      while (sig != v7);
    }
    std::mutex::unlock(v4);
  }
}

uint64_t OTSVGTableGetDocumentIndexForGlyph(std::mutex **a1, unsigned int a2)
{
  std::mutex *v4;
  std::mutex *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *sig;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned __int16 *v14;

  if (!a1)
    return -1;
  v4 = *a1;
  std::mutex::lock(*a1);
  v5 = *a1;
  v6 = *(_QWORD *)(*a1)[1].__m_.__opaque;
  v7 = -1;
  if (v6)
  {
    sig = (unsigned __int16 *)v5[1].__m_.__sig;
    v9 = &sig[6 * v6];
    v10 = sig;
    do
    {
      v11 = v6 >> 1;
      v12 = &v10[6 * (v6 >> 1)];
      v13 = bswap32(v12[1]) >> 16;
      v14 = v12 + 6;
      v6 += ~(v6 >> 1);
      if (v13 < a2)
        v10 = v14;
      else
        v6 = v11;
    }
    while (v6);
    if (v10 == v9 || a2 < bswap32(*v10) >> 16 || a2 > bswap32(v10[1]) >> 16)
      v7 = -1;
    else
      v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)sig) >> 2);
  }
  std::mutex::unlock(v4);
  return v7;
}

void std::__shared_ptr_emplace<SVG::Table>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SVG::Table>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

void std::__shared_ptr_emplace<SVG::Table>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  const void *v5;

  v2 = *(_QWORD **)(a1 + 152);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(const void **)(a1 + 104);
  if (v5)
    CFRelease(v5);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void SVG::playback(uint64_t a1, uint64_t *a2)
{
  const void *FillColorAsColor;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD ***v7;
  uint64_t v8;
  CFTypeRef cf;
  void *__p;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD *v15;

  v13 = a1;
  FillColorAsColor = (const void *)CGContextGetFillColorAsColor();
  cf = FillColorAsColor;
  if (FillColorAsColor)
    CFRetain(FillColorAsColor);
  __p = 0;
  v11 = 0;
  v12 = 0;
  v4 = *a2;
  v5 = a2[1];
  if (v4 != v5)
  {
    do
    {
      v14[0] = &v13;
      v14[1] = &cf;
      v6 = *(unsigned int *)(v4 + 120);
      if ((_DWORD)v6 == -1)
      {
        v7 = (_QWORD ***)std::__throw_bad_variant_access[abi:nn180100]();
        std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(v7, v8);
        return;
      }
      v15 = v14;
      ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100INS1_9__variant15__value_visitorIZZN3SVG8playbackEP9CGContextRKNS6_9RecordingEENK3__0clERKNS_7variantIJNS6_9SaveStateENS6_12RestoreStateENS6_9ConcatCTMENS6_9DrawImageENS6_8FillPathENS6_18DrawLinearGradientENS6_18DrawRadialGradientENS6_11ClipToPathsENS6_10ClipToMaskENS6_7SetFillENS6_22BeginTransparencyLayerENS6_20EndTransparencyLayerENS6_8SetAlphaENS6_6GetCTMEEEEEUlRKNS6_7CommandEE_EEJRKNS0_6__implIJSE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_EEEEEEDcOT_DpOT0____fmatrix[v6])(&v15, v4);
      v4 += 128;
    }
    while (v4 != v5);
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  if (cf)
    CFRelease(cf);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::playback(CGContext *,SVG::Recording const&)::$_0::operator() const(std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&)::{lambda(SVG::Command const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 16))(a2, ***a1, (*a1)[1]);
}

uint64_t SVG::SetFill::execute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  SVG::SetFill *v5;
  _QWORD v6[5];
  uint64_t v7;
  _QWORD *v8;

  v7 = a2;
  v6[0] = &v7;
  v6[1] = &v7;
  v6[2] = a3;
  v6[3] = a3;
  v6[4] = &v7;
  v3 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v3 == -1)
  {
    v5 = (SVG::SetFill *)std::__throw_bad_variant_access[abi:nn180100]();
    return SVG::SetFill::dump(v5);
  }
  else
  {
    v8 = v6;
    return ((uint64_t (*)(_QWORD **, uint64_t))*(&off_1E71382C0 + v3))(&v8, a1 + 8);
  }
}

void SVG::SetFill::dump(SVG::SetFill *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  uint64_t v4;
  SVG::SetFill *v5;
  char v6;
  std::locale v7;

  v2 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"SetFill", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v7, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v7);
  std::ostream::put();
  std::ostream::flush();
  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4 == -1)
  {
    v5 = (SVG::SetFill *)std::__throw_bad_variant_access[abi:nn180100]();
    SVG::SetFill::~SetFill(v5);
  }
  else
  {
    v7.__locale_ = (std::locale::__imp *)&v6;
    ((void (*)(std::locale *, char *))off_1E71382F0[v4])(&v7, (char *)this + 8);
  }
}

void SVG::SetFill::~SetFill(SVG::SetFill *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E7137910;
  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138308[v2])(&v3, (char *)this + 8);
  *((_DWORD *)this + 28) = -1;
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E7137910;
  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138308[v2])(&v3, (char *)this + 8);
  *((_DWORD *)this + 28) = -1;
  MEMORY[0x1BCCCA1B4](this, 0x10A3C40C258EA78);
}

double SVG::SetFill::boundingRect(SVG::SetFill *this, SVG::BoundingRectState *a2)
{
  return *MEMORY[0x1E0C9D648];
}

double SVG::SetFill::timeCost(SVG::SetFill *this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  return 0.893334119;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_0,SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_1,SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData> const&>(CGContextRef ***a1, CGColorRef *a2)
{
  CGContextSetFillColorWithColor(***a1, *a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_0,SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_1,SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData> const&>(uint64_t a1)
{
  CGContextSetFillColorWithColor(**(CGContextRef **)(*(_QWORD *)a1 + 8), **(CGColorRef **)(*(_QWORD *)a1 + 16));
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_0,SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_1,SVG::SetFill::execute(CGContext *,SVG::PlaybackState &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  CGFloat v6;
  unint64_t *v7;
  unint64_t v8;
  CGFloat b;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  CGPattern *v19;
  CGContext *v20;
  CGColorSpace *Pattern;
  CGFloat components;
  CGAffineTransform matrix;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v26;
  CGPatternCallbacks callbacks;
  CGRect v28;

  v3 = *a1;
  v4 = (_OWORD *)operator new();
  v5 = v4;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v6 = *(double *)(a2 + 8);
  v26.a = *(CGFloat *)a2;
  v26.b = v6;
  if (v6 != 0.0)
  {
    v7 = (unint64_t *)(*(_QWORD *)&v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  std::shared_ptr<SVG::Recording>::operator=[abi:nn180100]((uint64_t)v4, (__int128 *)&v26);
  b = v26.b;
  if (*(_QWORD *)&v26.b)
  {
    v10 = (unint64_t *)(*(_QWORD *)&v26.b + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(CGFloat))(**(_QWORD **)&b + 16))(COERCE_CGFLOAT(*(_QWORD *)&b));
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&b);
    }
  }
  v12 = *(_OWORD *)(a2 + 32);
  v5[1] = *(_OWORD *)(a2 + 16);
  v5[2] = v12;
  callbacks.releaseInfo = (CGPatternReleaseInfoCallback)SVG::releaseInfo;
  *(_QWORD *)&v13 = -1;
  *((_QWORD *)&v13 + 1) = -1;
  *(_OWORD *)&v26.tx = v13;
  *(_OWORD *)&callbacks.version = xmmword_1E71382D8;
  *(_OWORD *)&v26.a = v13;
  *(_OWORD *)&v26.c = v13;
  v14 = *(_OWORD *)(a2 + 56);
  v15 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 88);
  *(_OWORD *)&t1.a = v14;
  *(_OWORD *)&t1.c = v15;
  v16 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 48 * *(_QWORD *)(a2 + 48));
  v17 = v16[2];
  v18 = *v16;
  *(_OWORD *)&t2.c = v16[1];
  *(_OWORD *)&t2.tx = v17;
  *(_OWORD *)&t2.a = v18;
  CGAffineTransformConcat(&v26, &t1, &t2);
  v28 = *(CGRect *)(a2 + 16);
  matrix = v26;
  v19 = CGPatternCreate(v5, v28, &matrix, v28.size.width, v28.size.height, kCGPatternTilingNoDistortion, 1, &callbacks);
  v20 = **(CGContext ***)(v3 + 32);
  Pattern = CGColorSpaceCreatePattern(0);
  CGContextSetFillColorSpace(v20, Pattern);
  if (Pattern)
    CFRelease(Pattern);
  components = 1.0;
  CGContextSetFillPattern(**(CGContextRef **)(v3 + 32), v19, &components);
  if (v19)
    CFRelease(v19);
}

void SVG::drawPattern(SVG *this, CGContextRef c, CGContext *a3)
{
  CGContextClipToRect(c, *(CGRect *)((char *)this + 16));
  SVG::playback((uint64_t)c, *(uint64_t **)this);
}

uint64_t SVG::releaseInfo(uint64_t this, void *a2)
{
  if (this)
  {
    std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](this);
    JUMPOUT(0x1BCCCA1B4);
  }
  return this;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::SetFill::dump(void)::$_0,SVG::SetFill::dump(void)::$_1,SVG::SetFill::dump(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData> const&>(uint64_t a1, CFTypeRef *a2)
{
  const __CFString *v2;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  std::locale v7;
  char __b[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v2 = CFCopyDescription(*a2);
    memset(__b, 170, sizeof(__b));
    CFStringGetCString(v2, __b, 1024, 0x8000100u);
    v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"    ", 4);
    v4 = strlen(__b);
    v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)__b, v4);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v7, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v7);
    std::ostream::put();
    std::ostream::flush();
    if (v2)
      CFRelease(v2);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::SetFill::dump(void)::$_0,SVG::SetFill::dump(void)::$_1,SVG::SetFill::dump(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData> const&>()
{
  _QWORD *v0;
  const std::locale::facet *v1;
  std::locale v3;

  v0 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"    CurrentColor", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v0 + *(_QWORD *)(*v0 - 24)));
  v1 = std::locale::use_facet(&v3, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v3);
  std::ostream::put();
  return std::ostream::flush();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::SetFill::dump(void)::$_0,SVG::SetFill::dump(void)::$_1,SVG::SetFill::dump(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData> const&>()
{
  _QWORD *v0;
  const std::locale::facet *v1;
  std::locale v3;

  v0 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"    Pattern", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v0 + *(_QWORD *)(*v0 - 24)));
  v1 = std::locale::use_facet(&v3, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v3);
  std::ostream::put();
  return std::ostream::flush();
}

uint64_t SVG::RecordBase::shouldContinue(SVG::RecordBase *this)
{
  return 1;
}

void SVG::RecordBase::operator()(float *a1, unint64_t a2, const SVG::Presentation *a3)
{
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  SVG::Presentation *v38;
  SVG::Presentation *v39;
  float *v40;
  int8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  float *v48;
  float *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  char v54;
  _OWORD __dst[36];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(float *))(*(_QWORD *)a1 + 80))(a1))
    return;
  v6 = (void **)(a1 + 6);
  if (std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::find<SVG::Element const*>((_QWORD *)a1 + 3, a2))
  {
    return;
  }
  v7 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *((_QWORD *)a1 + 4);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v12 = v9 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v9;
    }
    v13 = (_QWORD *)*((_QWORD *)*v6 + v12);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2)
            goto LABEL_76;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a2;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 6) + 1);
  v18 = a1[14];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *((_QWORD *)a1 + 4);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v10)
    {
      v29 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 6) / a1[14]);
      if (v10 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 4);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *v6;
          *v6 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *((int8x8_t *)a1 + 4) = prime;
          do
            *((_QWORD *)*v6 + v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*((_QWORD *)a1 + 5);
          if (v26)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v6 + v27) = a1 + 10;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*((_QWORD *)*v6 + v33))
                  {
                    *((_QWORD *)*v6 + v33) = v26;
                    goto LABEL_57;
                  }
                  *v26 = *v32;
                  *v32 = **((_QWORD **)*v6 + v33);
                  **((_QWORD **)*v6 + v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_57:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_61;
        }
        v53 = *v6;
        *v6 = 0;
        if (v53)
          operator delete(v53);
        v10 = 0;
        *((_QWORD *)a1 + 4) = 0;
      }
    }
LABEL_61:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v12 = v9 % v10;
      else
        v12 = v9;
    }
    else
    {
      v12 = (v10 - 1) & v9;
    }
  }
  v34 = *v6;
  v35 = (_QWORD *)*((_QWORD *)*v6 + v12);
  if (v35)
  {
    *v16 = *v35;
LABEL_74:
    *v35 = v16;
    goto LABEL_75;
  }
  v36 = *((_QWORD *)a1 + 5);
  *v16 = v36;
  *((_QWORD *)a1 + 5) = v16;
  v34[v12] = a1 + 10;
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v35 = (char *)*v6 + 8 * v37;
    goto LABEL_74;
  }
LABEL_75:
  ++*((_QWORD *)a1 + 6);
LABEL_76:
  if (v38)
  {
    v39 = v38;
    memcpy(__dst, &unk_1B9B91C58, sizeof(__dst));
    SVG::Presentation::inherit(v39, a3, *((const SVG::Presentation **)a1 + 2), __dst);
    (*(void (**)(float *, unint64_t, _OWORD *))(*(_QWORD *)a1 + 16))(a1, a2, __dst);
    if (LODWORD(__dst[28]) != -1)
      ((void (*)(char *, _OWORD *))off_1E7138320[LODWORD(__dst[28])])(&v54, &__dst[26]);
    LODWORD(__dst[28]) = -1;
    if (LODWORD(__dst[25]) != -1)
      ((void (*)(char *, _OWORD *))off_1E7138338[LODWORD(__dst[25])])(&v54, &__dst[22]);
    LODWORD(__dst[25]) = -1;
    if (DWORD2(__dst[16]) != -1)
      ((void (*)(char *, char *))off_1E7138350[DWORD2(__dst[16])])(&v54, (char *)&__dst[15] + 8);
    DWORD2(__dst[16]) = -1;
    if (DWORD2(__dst[12]) != -1)
      ((void (*)(char *, char *))off_1E7138338[DWORD2(__dst[12])])(&v54, (char *)&__dst[9] + 8);
    DWORD2(__dst[12]) = -1;
    if (LODWORD(__dst[5]) != -1)
      ((void (*)(char *, _OWORD *))off_1E7138350[LODWORD(__dst[5])])(&v54, &__dst[4]);
  }
  else
  {
    v45 = *(uint64_t **)(a2 + 32);
    v46 = *(uint64_t **)(a2 + 40);
    while (v45 != v46)
    {
      v47 = *v45++;
      SVG::RecordBase::operator()(a1, v47, a3);
    }
  }
  v40 = (float *)std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::find<SVG::Element const*>((_QWORD *)a1 + 3, a2);
  if (v40)
  {
    v41 = *(int8x8_t *)(a1 + 8);
    v42 = *(_QWORD *)v40;
    v43 = *((_QWORD *)v40 + 1);
    v44 = (uint8x8_t)vcnt_s8(v41);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      if (v43 >= *(_QWORD *)&v41)
        v43 %= *(_QWORD *)&v41;
    }
    else
    {
      v43 &= *(_QWORD *)&v41 - 1;
    }
    v48 = (float *)*((_QWORD *)*v6 + v43);
    do
    {
      v49 = v48;
      v48 = *(float **)v48;
    }
    while (v48 != v40);
    if (v49 == a1 + 10)
      goto LABEL_108;
    v50 = *((_QWORD *)v49 + 1);
    if (v44.u32[0] > 1uLL)
    {
      if (v50 >= *(_QWORD *)&v41)
        v50 %= *(_QWORD *)&v41;
    }
    else
    {
      v50 &= *(_QWORD *)&v41 - 1;
    }
    if (v50 != v43)
    {
LABEL_108:
      if (v42)
      {
        v51 = *(_QWORD *)(v42 + 8);
        if (v44.u32[0] > 1uLL)
        {
          v52 = *(_QWORD *)(v42 + 8);
          if (v51 >= *(_QWORD *)&v41)
            v52 = v51 % *(_QWORD *)&v41;
        }
        else
        {
          v52 = v51 & (*(_QWORD *)&v41 - 1);
        }
        if (v52 == v43)
          goto LABEL_112;
      }
      *((_QWORD *)*v6 + v43) = 0;
      v42 = *(_QWORD *)v40;
    }
    if (!v42)
    {
LABEL_118:
      *(_QWORD *)v49 = v42;
      *(_QWORD *)v40 = 0;
      --*((_QWORD *)a1 + 6);
      operator delete(v40);
      return;
    }
    v51 = *(_QWORD *)(v42 + 8);
LABEL_112:
    if (v44.u32[0] > 1uLL)
    {
      if (v51 >= *(_QWORD *)&v41)
        v51 %= *(_QWORD *)&v41;
    }
    else
    {
      v51 &= *(_QWORD *)&v41 - 1;
    }
    if (v51 != v43)
    {
      *((_QWORD *)*v6 + v51) = v49;
      v42 = *(_QWORD *)v40;
    }
    goto LABEL_118;
  }
}

void SVG::RecordBase::operator()(float *a1, unint64_t **a2, const SVG::Presentation *a3)
{
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  if ((*(unsigned int (**)(float *))(*(_QWORD *)a1 + 80))(a1))
  {
    v7 = *a2;
    v6 = a2[1];
    while (v7 != v6)
    {
      v8 = *v7++;
      SVG::RecordBase::operator()(a1, v8, a3);
    }
  }
}

void SVG::RecordBase::processSpecificElement(SVG::RecordBase *this, unint64_t **lpsrc, const SVG::Presentation *a3)
{
  void *v6;
  void *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  if (v6)
  {
    (*(void (**)(SVG::RecordBase *, void *, const SVG::Presentation *))(*(_QWORD *)this + 24))(this, v6, a3);
    goto LABEL_5;
  }
  if (v7)
  {
    (*(void (**)(SVG::RecordBase *, void *, const SVG::Presentation *))(*(_QWORD *)this + 32))(this, v7, a3);
LABEL_5:
    if ((*(unsigned int (**)(SVG::RecordBase *))(*(_QWORD *)this + 80))(this))
    {
      v9 = lpsrc[4];
      v8 = lpsrc[5];
      while (v9 != v8)
      {
        v10 = *v9++;
        SVG::RecordBase::operator()((float *)this, v10, a3);
      }
    }
    return;
  }
  if (v11)
  {
    v12 = v11;
    v13 = (_QWORD *)*((_QWORD *)this + 1);
    v20 = v12[94];
    v14 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v13, &v20);
    if (v14)
    {
      v15 = v14;
      (*(void (**)(SVG::RecordBase *, _QWORD *, const SVG::Presentation *))(*(_QWORD *)this + 40))(this, v12, a3);
      SVG::RecordBase::operator()((float *)this, v15[3], a3);
    }
  }
  else
  {
    if (v16)
    {
      (*(void (**)(SVG::RecordBase *, void *, const SVG::Presentation *))(*(_QWORD *)this + 48))(this, v16, a3);
    }
    else
    {
      if (v17)
      {
        (*(void (**)(SVG::RecordBase *, void *, const SVG::Presentation *))(*(_QWORD *)this + 56))(this, v17, a3);
      }
      else
      {
        if (v18)
        {
          (*(void (**)(SVG::RecordBase *, void *, const SVG::Presentation *))(*(_QWORD *)this + 64))(this, v18, a3);
        }
        else
        {
          if (v19)
            (*(void (**)(SVG::RecordBase *, void *, const SVG::Presentation *))(*(_QWORD *)this + 72))(this, v19, a3);
        }
      }
    }
  }
}

BOOL SVG::Record::shouldContinue(SVG::Record *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return *(_BYTE *)(v1 + 392) && *(_BYTE *)(v1 + 408) != 0;
}

void SVG::Record::processPresentation(SVG::Record *this, const SVG::Element *a2, const SVG::Presentation *a3)
{
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD *v15;
  _OWORD v16[2];
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _BYTE v20[24];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19[0] = *((_QWORD *)this + 8);
  v19[1] = 0xAAAAAAAAAAAAAA00;
  SVG::StateSaverRestorer::save((SVG::StateSaverRestorer *)v19);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v6;
  v16[1] = v6;
  v17 = -1;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v7 = (_QWORD *)*((_QWORD *)this + 8);
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v9 = (_QWORD *)*((_QWORD *)this + 17);
  v10 = (_QWORD *)*((_QWORD *)this + 18);
  v11 = *((double *)this + 19);
  v12 = *((double *)this + 20);
  v13 = *((double *)this + 21);
  v14 = *((double *)this + 22);
  v15 = operator new(0x20uLL);
  *v15 = &off_1E71368E0;
  v15[1] = this;
  v15[2] = a2;
  v15[3] = a3;
  v21 = v15;
  SVG::ApplyPresentation::ApplyPresentation((uint64_t)v16, v7, (uint64_t)a3, a2, v8, v9, v10, (uint64_t)v20, v11, v12, v13, v14);
  (*(void (**)(_QWORD *))(*v15 + 40))(v15);
  SVG::ApplyPresentation::~ApplyPresentation((SVG::ApplyPresentation *)v16);
  SVG::StateSaverRestorer::~StateSaverRestorer((SVG::StateSaverRestorer *)v19);
}

uint64_t SVG::Record::processGElement(SVG::Record *this, const SVG::GElement *a2, const SVG::Presentation *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t result;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  char v11;

  v3 = *((_QWORD *)this + 8);
  v4 = *((_OWORD *)a2 + 41);
  v7 = *((_OWORD *)a2 + 40);
  v8 = v4;
  v9 = *((_OWORD *)a2 + 42);
  v6 = &unk_1E7137A18;
  v10 = 2;
  result = SVG::Recorder::append(v3, (uint64_t)&v6);
  if (v10 != -1)
    return ((uint64_t (*)(char *, void **))off_1E7138368[v10])(&v11, &v6);
  return result;
}

uint64_t SVG::Record::processUseElement(SVG::Record *this, const SVG::UseElement *a2, const SVG::Presentation *a3)
{
  CGFloat v5;
  CGFloat v6;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  _BYTE v16[112];
  int v17;
  CGAffineTransform v18;
  char v19;

  v14 = *((_OWORD *)a2 + 41);
  v15 = *((_OWORD *)a2 + 40);
  v5 = *((double *)a2 + 84);
  v6 = *((double *)a2 + 85);
  *(_OWORD *)v16 = *((_OWORD *)a2 + 43);
  v7 = SVG::Length::computeValue((SVG::Length *)v16, *((double *)this + 21));
  *(_OWORD *)v16 = *((_OWORD *)a2 + 44);
  v8 = SVG::Length::computeValue((SVG::Length *)v16, *((double *)this + 22));
  *(_OWORD *)&v18.a = v15;
  *(_OWORD *)&v18.c = v14;
  v18.tx = v5;
  v18.ty = v6;
  CGAffineTransformTranslate((CGAffineTransform *)v16, &v18, v7, v8);
  v9 = *(_OWORD *)v16;
  v10 = *(_OWORD *)&v16[16];
  v11 = *(_OWORD *)&v16[32];
  v12 = *((_QWORD *)this + 8);
  *(_QWORD *)v16 = &unk_1E7137A18;
  *(_OWORD *)&v16[8] = v9;
  *(_OWORD *)&v16[24] = v10;
  *(_OWORD *)&v16[40] = v11;
  v17 = 2;
  result = SVG::Recorder::append(v12, (uint64_t)v16);
  if (v17 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E7138368[v17])(&v19, v16);
  return result;
}

void SVG::Record::processImageElement(SVG::Record *this, CGImageRef *a2, const SVG::Presentation *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGImage *v11;
  double Width;
  double Height;
  SVG::Record *v14;
  const SVG::ShapeElement *v15;
  const SVG::Presentation *v16;
  _QWORD v17[15];
  int v18;
  _OWORD v19[3];
  _OWORD v20[5];
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  char v26;

  if (*((_DWORD *)a3 + 143) == 2)
  {
    if (!*((_DWORD *)a3 + 142))
    {
      if (a2[96])
      {
        *(_QWORD *)&v5 = -1;
        *((_QWORD *)&v5 + 1) = -1;
        v23 = v5;
        v24 = v5;
        v22 = v5;
        v25 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v5 = *((_QWORD *)this + 19);
        v6 = *((_QWORD *)this + 20);
        v7 = *((_QWORD *)this + 21);
        v8 = *((_QWORD *)this + 22);
        SVG::ImageElement::totalTransform((SVG::ImageElement *)a2, *(CGRect *)&v5, (uint64_t)&v22);
        if ((_BYTE)v25)
        {
          v21 = 0xAAAAAAAAAAAAAAAALL;
          memset(&v20[2], 255, 32);
          v20[4] = xmmword_1B9B91FE8;
          v20[0] = xmmword_1B9B91FA8;
          v20[1] = unk_1B9B91FB8;
          v9 = *((_QWORD *)this + 8);
          v19[1] = v23;
          v19[2] = v24;
          v19[0] = v22;
          SVG::AffineTransformApplier::AffineTransformApplier((uint64_t)v20, v9, v19);
          v10 = *((_QWORD *)this + 8);
          v11 = a2[96];
          Width = (double)CGImageGetWidth(v11);
          Height = (double)CGImageGetHeight(a2[96]);
          if (v11)
            CFRetain(v11);
          v17[0] = &unk_1E7137A60;
          v17[1] = v11;
          v17[2] = 0;
          v17[3] = 0;
          *(double *)&v17[4] = Width;
          *(double *)&v17[5] = Height;
          v18 = 3;
          SVG::Recorder::append(v10, (uint64_t)v17);
          if (v18 != -1)
            ((void (*)(char *, _QWORD *))off_1E7138368[v18])(&v26, v17);
          SVG::AffineTransformApplier::~AffineTransformApplier((SVG::AffineTransformApplier *)v20);
        }
      }
    }
  }
  else
  {
    v14 = (SVG::Record *)std::__throw_bad_variant_access[abi:nn180100]();
    SVG::Record::processShapeElement(v14, v15, v16);
  }
}

void SVG::Record::processShapeElement(SVG::Record *this, const SVG::ShapeElement *a2, const SVG::Presentation *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  CGPathRef v14;
  __int128 v15;
  double v16;
  double v17;
  __int128 v18;
  int v19;
  SVG::Length *v20;
  SVG::Length *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  void *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  double *v36;
  uint64_t v37;
  BOOL v38;
  CGPathRef CopyByDashingPath;
  CGLineCap v40;
  int v41;
  CGLineJoin v42;
  CGFloat v43;
  double v44;
  CGPathRef CopyByStrokingPath;
  CGPathRef v46;
  unint64_t v47;
  const void *v48;
  int64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE v52[24];
  double v53;
  _OWORD v54[4];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  CGFloat *p_phase;
  CFTypeRef v59;
  CGFloat phase;
  __int128 cf;
  __int128 v62;
  void *__p[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[3];
  CFTypeRef v75;
  CGFloat **p_p_phase;

  if (*((_DWORD *)a3 + 143) != 2)
    goto LABEL_79;
  if (*((_DWORD *)a3 + 142))
    return;
  v75 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(CFTypeRef *__return_ptr, const SVG::ShapeElement *, double, double, double, double))(*(_QWORD *)a2 + 32))(&v75, a2, *((double *)this + 19), *((double *)this + 20), *((double *)this + 21), *((double *)this + 22));
  if (!v75)
    return;
  v9 = (*(double (**)(const SVG::ShapeElement *, double, double, double, double))(*(_QWORD *)a2 + 40))(a2, *((double *)this + 19), *((double *)this + 20), *((double *)this + 21), *((double *)this + 22));
  v10 = v6;
  v11 = v7;
  v12 = v8;
  v73 = unk_1B9B91F48;
  memset(v74, 170, 40);
  memset(v70, 170, sizeof(v70));
  v71 = unk_1B9B91F28;
  v72 = xmmword_1B9B91F38;
  v65 = xmmword_1B9B91EB8;
  v66 = unk_1B9B91EC8;
  v67 = xmmword_1B9B91ED8;
  v68 = unk_1B9B91EE8;
  v69 = xmmword_1B9B91EF8;
  *(_OWORD *)__p = xmmword_1B9B91E98;
  v64 = unk_1B9B91EA8;
  if (*((_DWORD *)a3 + 50) != 2)
    goto LABEL_79;
  if (*((_DWORD *)a3 + 54) != 2)
    goto LABEL_79;
  memset(v54, 170, sizeof(v54));
  v55 = unk_1B9B91F48;
  v56 = xmmword_1B9B91EF8;
  v57 = xmmword_1B9B91F38;
  if (*((_DWORD *)a3 + 57) != 2)
    goto LABEL_79;
  v13 = *((_QWORD *)this + 14) + *((_QWORD *)this + 13) - 1;
  *(_OWORD *)&v51[8] = *((_OWORD *)this + 10);
  *(_QWORD *)v51 = *((_QWORD *)this + 19);
  SVG::ApplyPresentationFill::ApplyPresentationFill((uint64_t)__p, *((_QWORD **)this + 8), *((_QWORD *)this + 1), *((_QWORD *)this + 15), *((_QWORD *)this + 16), (uint64_t)a3 + 152, *((_DWORD *)a3 + 56) == 1, (uint64_t)v75, *((double *)a3 + 26), v9, v6, v7, v8, *(__int128 *)v51, *((_QWORD *)this + 21), *((_QWORD *)this + 22), *(_QWORD *)(*((_QWORD *)this + 10) + ((v13 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v13);
  phase = *((CGFloat *)this + 8);
  *(_QWORD *)&cf = v75;
  if (v75)
    CFRetain(v75);
  if (LODWORD(v74[2]) == -1)
    goto LABEL_79;
  p_phase = &phase;
  ((void (*)(CGFloat **, __int128 *))off_1E71383D8[LODWORD(v74[2])])(&p_phase, &v71);
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);
  SVG::ApplyPresentationFill::~ApplyPresentationFill((SVG::ApplyPresentationFill *)__p);
  v14 = (CGPathRef)v75;
  if (v75)
    CFRetain(v75);
  phase = NAN;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  cf = v15;
  v62 = v15;
  if (*((_DWORD *)a3 + 120) != 2 || *((_DWORD *)a3 + 112) != 2)
    goto LABEL_79;
  v16 = *((double *)this + 21);
  v17 = SVG::Length::computeValue((const SVG::Presentation *)((char *)a3 + 464), sqrt(*((double *)this + 22) * *((double *)this + 22) + v16 * v16) / 1.41421356);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v18;
  v64 = v18;
  LOBYTE(__p[0]) = 0;
  BYTE8(v64) = 0;
  v19 = *((unsigned __int8 *)a3 + 440);
  if (!*((_BYTE *)a3 + 440))
    goto LABEL_41;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v64 = 0;
  BYTE8(v64) = 1;
  v20 = (SVG::Length *)*((_QWORD *)a3 + 52);
  v21 = (SVG::Length *)*((_QWORD *)a3 + 53);
  if (v20 == v21)
  {
LABEL_40:
    v19 = 0;
LABEL_41:
    phase = v17;
    LOBYTE(cf) = 0;
    goto LABEL_43;
  }
  v53 = v12;
  v22 = v11;
  v23 = v10;
  v24 = v9;
  v25 = 0.0;
  do
  {
    v26 = SVG::Length::computeValue(v20, v16);
    if (v26 < 0.0)
    {
      v19 = 0;
      phase = v17;
      LOBYTE(cf) = 0;
      v9 = v24;
      v10 = v23;
      v11 = v22;
      v12 = v53;
      goto LABEL_43;
    }
    v27 = v26;
    v28 = (char *)__p[1];
    if (__p[1] >= (void *)v64)
    {
      v30 = (char *)__p[0];
      v31 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_80;
      v33 = v64 - (unint64_t)__p[0];
      if ((uint64_t)(v64 - (unint64_t)__p[0]) >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v64, v34);
        v30 = (char *)__p[0];
        v28 = (char *)__p[1];
      }
      else
      {
        v35 = 0;
      }
      v36 = (double *)&v35[8 * v31];
      *v36 = v27;
      v29 = v36 + 1;
      while (v28 != v30)
      {
        v37 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v36-- - 1) = v37;
      }
      __p[0] = v36;
      __p[1] = v29;
      *(_QWORD *)&v64 = &v35[8 * v34];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(double *)__p[1] = v26;
      v29 = v28 + 8;
    }
    v25 = v25 + v27;
    __p[1] = v29;
    v20 = (SVG::Length *)((char *)v20 + 16);
  }
  while (v20 != v21);
  v38 = v25 == 0.0;
  v9 = v24;
  v10 = v23;
  v11 = v22;
  v12 = v53;
  if (v38)
    goto LABEL_40;
  phase = v17;
  LOBYTE(cf) = 0;
  BYTE8(v62) = 0;
  if (!BYTE8(v64))
    goto LABEL_50;
  cf = 0uLL;
  *(_QWORD *)&v62 = 0;
  v48 = __p[0];
  v49 = (_BYTE *)v29 - (char *)__p[0];
  if (v29 != __p[0])
  {
    std::vector<double>::__vallocate[abi:nn180100](&cf, v49 >> 3);
    v50 = *((_QWORD *)&cf + 1);
    memmove(*((void **)&cf + 1), v48, v49);
    *((_QWORD *)&cf + 1) = v50 + v49;
  }
  v19 = 1;
LABEL_43:
  BYTE8(v62) = v19;
  if (BYTE8(v64) && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v19 = BYTE8(v62);
  }
  if (v19)
  {
    CopyByDashingPath = CGPathCreateCopyByDashingPath((CGPathRef)v75, 0, phase, (const CGFloat *)cf, (uint64_t)(*((_QWORD *)&cf + 1) - cf) >> 3);
    if (v14)
      CFRelease(v14);
    v14 = CopyByDashingPath;
  }
LABEL_50:
  if (v14)
  {
    if (*((_DWORD *)a3 + 123) != 2)
      goto LABEL_79;
    v40 = *((_DWORD *)a3 + 122) >= 2u ? kCGLineCapSquare : *((_DWORD *)a3 + 122);
    if (*((_DWORD *)a3 + 125) != 2)
      goto LABEL_79;
    v41 = *((_DWORD *)a3 + 124);
    v42 = v41 == 2 ? kCGLineJoinBevel : v41 == 1;
    if (*((_DWORD *)a3 + 128) != 2 || *((_DWORD *)a3 + 140) != 2)
      goto LABEL_79;
    v43 = *((double *)a3 + 63);
    v44 = SVG::Length::computeValue((const SVG::Presentation *)((char *)a3 + 544), sqrt(*((double *)this + 22) * *((double *)this + 22) + *((double *)this + 21) * *((double *)this + 21))/ 1.41421356);
    CopyByStrokingPath = CGPathCreateCopyByStrokingPath(v14, 0, v44, v40, v42, v43);
    if (CopyByStrokingPath)
    {
      *(_QWORD *)&v74[2] = 0xAAAAAAAAAAAAAAAALL;
      v73 = v55;
      v74[0] = v54[3];
      v74[1] = v54[2];
      v70[0] = v54[1];
      v70[1] = v54[0];
      v71 = unk_1B9B91F28;
      v72 = v57;
      v65 = xmmword_1B9B91EB8;
      v66 = unk_1B9B91EC8;
      v67 = xmmword_1B9B91ED8;
      v68 = unk_1B9B91EE8;
      v69 = v56;
      *(_OWORD *)__p = xmmword_1B9B91E98;
      v64 = unk_1B9B91EA8;
      if (*((_DWORD *)a3 + 100) == 2 && *((_DWORD *)a3 + 132) == 2)
      {
        v46 = CopyByStrokingPath;
        v47 = *((_QWORD *)this + 14) + *((_QWORD *)this + 13) - 1;
        *(_OWORD *)&v52[8] = *((_OWORD *)this + 10);
        *(_QWORD *)v52 = *((_QWORD *)this + 19);
        SVG::ApplyPresentationFill::ApplyPresentationFill((uint64_t)__p, *((_QWORD **)this + 8), *((_QWORD *)this + 1), *((_QWORD *)this + 15), *((_QWORD *)this + 16), (uint64_t)a3 + 352, 0, (uint64_t)CopyByStrokingPath, *((double *)a3 + 65), v9, v10, v11, v12, *(__int128 *)v52, *((_QWORD *)this + 21), *((_QWORD *)this + 22), *(_QWORD *)(*((_QWORD *)this + 10) + ((v47 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v47);
        p_phase = (CGFloat *)*((_QWORD *)this + 8);
        v59 = v46;
        CFRetain(v46);
        if (LODWORD(v74[2]) != -1)
        {
          p_p_phase = &p_phase;
          ((void (*)(CGFloat ***, __int128 *))off_1E71383D8[LODWORD(v74[2])])(&p_p_phase, &v71);
          if (v59)
            CFRelease(v59);
          SVG::ApplyPresentationFill::~ApplyPresentationFill((SVG::ApplyPresentationFill *)__p);
          CFRelease(v46);
          goto LABEL_68;
        }
      }
LABEL_79:
      std::__throw_bad_variant_access[abi:nn180100]();
LABEL_80:
      abort();
    }
  }
LABEL_68:
  if (BYTE8(v62) && (_QWORD)cf)
  {
    *((_QWORD *)&cf + 1) = cf;
    operator delete((void *)cf);
  }
  if (v14)
    CFRelease(v14);
  if (v75)
    CFRelease(v75);
}

void SVG::RecordBase::~RecordBase(SVG::RecordBase *this)
{
  *(_QWORD *)this = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::Record::~Record(SVG::Record *this)
{
  *(_QWORD *)this = &off_1E7137878;
  std::deque<SVG::ApplyPresentationState>::~deque[abi:nn180100]((_QWORD *)this + 9);
  *(_QWORD *)this = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E7137878;
  std::deque<SVG::ApplyPresentationState>::~deque[abi:nn180100]((_QWORD *)this + 9);
  *(_QWORD *)this = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::DrawShapeOfType> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::ApplyPresentationFill::None,std::__variant_detail::_Trait::FillPath,std::__variant_detail::_Trait::Gradient> const&>(_QWORD ***a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t result;
  _QWORD v6[2];
  char v7;
  int v8;
  char v9;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[5] + v1[4] - 1;
  v4 = *(_BYTE *)(*(_QWORD *)(v1[1] + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v3 & 0x1F) << 7) + 120);
  if (v2)
    CFRetain((*a1)[1]);
  v6[0] = &unk_1E7137958;
  v6[1] = v2;
  v7 = v4;
  v8 = 4;
  result = SVG::Recorder::append((uint64_t)v1, (uint64_t)v6);
  if (v8 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E7138368[v8])(&v9, v6);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::DrawShapeOfType> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::ApplyPresentationFill::None,std::__variant_detail::_Trait::FillPath,std::__variant_detail::_Trait::Gradient> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  SVG::ClipToPaths::LeafClipNode *v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD *v30;

  v3 = *a1;
  v29[1] = 0xAAAAAAAAAAAAAA00;
  v29[0] = *(_QWORD *)v3;
  SVG::StateSaverRestorer::save((SVG::StateSaverRestorer *)v29);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD **)v3;
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v3 + 8));
    v6 = *(_QWORD **)v3;
  }
  v7 = v6[5] + v6[4] - 1;
  v8 = *(_BYTE *)(*(_QWORD *)(v6[1] + ((v7 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v7 & 0x1F) << 7) + 120);
  v9 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v19 = *MEMORY[0x1E0C9BAA8];
  v20 = v9;
  v21 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v10 = operator new();
  *(_QWORD *)(v10 + 16) = 0;
  v11 = v20;
  *(_OWORD *)(v10 + 24) = v19;
  *(_OWORD *)(v10 + 40) = v11;
  *(_OWORD *)(v10 + 56) = v21;
  *(_QWORD *)v10 = &unk_1E71371A8;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 72) = v5;
  *(_BYTE *)(v10 + 80) = v8;
  v12 = (_QWORD *)operator new();
  *v12 = &off_1E7137C28;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v10;
  *(_QWORD *)&v22 = &off_1E71371E8;
  *((_QWORD *)&v22 + 1) = v10;
  *(_QWORD *)&v23 = v12;
  v28 = 7;
  SVG::Recorder::append(v4, (uint64_t)&v22);
  if (v28 != -1)
    ((void (*)(_QWORD *, __int128 *))off_1E7138368[v28])(v18, &v22);
  v24 = xmmword_1B9B91FC8;
  v25 = unk_1B9B91FD8;
  v26 = xmmword_1B9B91FE8;
  v22 = xmmword_1B9B91FA8;
  v23 = unk_1B9B91FB8;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  v13 = *(_QWORD *)v3;
  v14 = a2[2];
  v15 = *a2;
  v20 = a2[1];
  v21 = v14;
  v19 = v15;
  SVG::AffineTransformApplier::AffineTransformApplier((uint64_t)&v22, v13, &v19);
  v18[0] = v3;
  v18[1] = v3;
  v16 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v16 == -1)
  {
    v17 = (SVG::ClipToPaths::LeafClipNode *)std::__throw_bad_variant_access[abi:nn180100]();
    SVG::ClipToPaths::LeafClipNode::~LeafClipNode(v17);
  }
  else
  {
    v30 = v18;
    ((void (*)(_QWORD **, __int128 *))off_1E71383F0[v16])(&v30, a2 + 3);
    SVG::AffineTransformApplier::~AffineTransformApplier((SVG::AffineTransformApplier *)&v22);
    SVG::StateSaverRestorer::~StateSaverRestorer((SVG::StateSaverRestorer *)v29);
  }
}

void SVG::ClipToPaths::LeafClipNode::~LeafClipNode(SVG::ClipToPaths::LeafClipNode *this)
{
  const void *v2;

  *(_QWORD *)this = &unk_1E71371A8;
  v2 = (const void *)*((_QWORD *)this + 9);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)this = &unk_1E7137188;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  const void *v2;

  *(_QWORD *)this = &unk_1E71371A8;
  v2 = (const void *)*((_QWORD *)this + 9);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)this = &unk_1E7137188;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::ClipToPaths::BaseClipNode::~BaseClipNode(SVG::ClipToPaths::BaseClipNode *this)
{
  *(_QWORD *)this = &unk_1E7137188;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E7137188;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  JUMPOUT(0x1BCCCA1B4);
}

void std::__shared_ptr_pointer<SVG::ClipToPaths::LeafClipNode  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t std::__shared_ptr_pointer<SVG::ClipToPaths::LeafClipNode  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<SVG::ClipToPaths::LeafClipNode  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::DrawShapeOfType::operator()(SVG::ApplyPresentationFill::Gradient const&)::{lambda(std::vector<SVG::DrawLinearGradient> const&)#1},SVG::DrawShapeOfType::operator()(SVG::ApplyPresentationFill::Gradient const&)::{lambda(std::vector<SVG::DrawRadialGradient> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>> const&>(uint64_t ***result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  const void *v6;
  __int128 v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  char v14;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = **result;
    do
    {
      v5 = *v4;
      v9[0] = &unk_1E7137620;
      v6 = *(const void **)(v2 + 8);
      v9[1] = v6;
      if (v6)
        CFRetain(v6);
      v7 = *(_OWORD *)(v2 + 16);
      v8 = *(_OWORD *)(v2 + 32);
      v12 = *(_DWORD *)(v2 + 48);
      v10 = v7;
      v11 = v8;
      v13 = 5;
      result = (uint64_t ***)SVG::Recorder::append(v5, (uint64_t)v9);
      if (v13 != -1)
        result = (uint64_t ***)((uint64_t (*)(char *, _QWORD *))off_1E7138368[v13])(&v14, v9);
      v2 += 56;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::DrawShapeOfType::operator()(SVG::ApplyPresentationFill::Gradient const&)::{lambda(std::vector<SVG::DrawLinearGradient> const&)#1},SVG::DrawShapeOfType::operator()(SVG::ApplyPresentationFill::Gradient const&)::{lambda(std::vector<SVG::DrawRadialGradient> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  const void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  char v16;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(uint64_t **)(*(_QWORD *)result + 8);
    do
    {
      v5 = *v4;
      v10[0] = &unk_1E7137668;
      v6 = *(const void **)(v2 + 8);
      v10[1] = v6;
      if (v6)
        CFRetain(v6);
      v7 = *(_OWORD *)(v2 + 16);
      v8 = *(_OWORD *)(v2 + 32);
      v9 = *(_OWORD *)(v2 + 48);
      v14 = *(_DWORD *)(v2 + 64);
      v12 = v8;
      v13 = v9;
      v11 = v7;
      v15 = 6;
      result = SVG::Recorder::append(v5, (uint64_t)v10);
      if (v15 != -1)
        result = ((uint64_t (*)(char *, _QWORD *))off_1E7138368[v15])(&v16, v10);
      v2 += 72;
    }
    while (v2 != v3);
  }
  return result;
}

_QWORD *std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::find<SVG::Element const*>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0,std::allocator<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::~__func()
{
  JUMPOUT(0x1BCCCA1B4);
}

__n128 std::__function::__func<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0,std::allocator<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E71368E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0,std::allocator<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E71368E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0,std::allocator<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::operator()(uint64_t a1, _OWORD *a2)
{
  _OWORD *v2;
  SVG::RecordBase *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  void *v115;

  v2 = a2;
  v4 = *(SVG::RecordBase **)(a1 + 8);
  v5 = (char *)*((_QWORD *)v4 + 11);
  v6 = (char *)*((_QWORD *)v4 + 10);
  v7 = v5 - v6;
  if (v5 == v6)
    v8 = 0;
  else
    v8 = 32 * (v5 - v6) - 1;
  v9 = *((_QWORD *)v4 + 13);
  v10 = *((_QWORD *)v4 + 14) + v9;
  if (v8 != v10)
    goto LABEL_37;
  if (v9 < 0x100)
  {
    v25 = v7 >> 3;
    v26 = (char *)*((_QWORD *)v4 + 12);
    v27 = (char *)*((_QWORD *)v4 + 9);
    if (v7 >> 3 < (unint64_t)((v26 - v27) >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v26 == v5)
      {
        if (v6 == v27)
        {
          if (v5 == v6)
            v58 = 1;
          else
            v58 = (v26 - v6) >> 2;
          v59 = 2 * v58;
          v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v58);
          v6 = &v60[(v59 + 6) & 0xFFFFFFFFFFFFFFF8];
          v62 = (uint64_t *)*((_QWORD *)v4 + 10);
          v63 = v6;
          v64 = *((_QWORD *)v4 + 11) - (_QWORD)v62;
          if (v64)
          {
            v63 = &v6[v64 & 0xFFFFFFFFFFFFFFF8];
            v65 = 8 * (v64 >> 3);
            v66 = &v60[(v59 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v67 = *v62++;
              *(_QWORD *)v66 = v67;
              v66 += 8;
              v65 -= 8;
            }
            while (v65);
          }
          v68 = (void *)*((_QWORD *)v4 + 9);
          *((_QWORD *)v4 + 9) = v60;
          *((_QWORD *)v4 + 10) = v6;
          *((_QWORD *)v4 + 11) = v63;
          *((_QWORD *)v4 + 12) = &v60[8 * v61];
          if (v68)
          {
            operator delete(v68);
            v6 = (char *)*((_QWORD *)v4 + 10);
          }
        }
        *((_QWORD *)v6 - 1) = v29;
        v69 = (char *)*((_QWORD *)v4 + 10);
        v70 = (char *)*((_QWORD *)v4 + 11);
        *((_QWORD *)v4 + 10) = v69 - 8;
        v71 = *((_QWORD *)v69 - 1);
        *((_QWORD *)v4 + 10) = v69;
        if (v70 == *((char **)v4 + 12))
        {
          v72 = *((_QWORD *)v4 + 9);
          v73 = (uint64_t)&v69[-v72];
          if ((unint64_t)v69 <= v72)
          {
            v104 = (uint64_t)&v70[-v72];
            v40 = v104 == 0;
            v105 = v104 >> 2;
            if (v40)
              v106 = 1;
            else
              v106 = v105;
            v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v106);
            v109 = &v107[8 * (v106 >> 2)];
            v110 = (uint64_t *)*((_QWORD *)v4 + 10);
            v70 = v109;
            v111 = *((_QWORD *)v4 + 11) - (_QWORD)v110;
            if (v111)
            {
              v70 = &v109[v111 & 0xFFFFFFFFFFFFFFF8];
              v112 = 8 * (v111 >> 3);
              v113 = &v107[8 * (v106 >> 2)];
              do
              {
                v114 = *v110++;
                *(_QWORD *)v113 = v114;
                v113 += 8;
                v112 -= 8;
              }
              while (v112);
            }
            v115 = (void *)*((_QWORD *)v4 + 9);
            *((_QWORD *)v4 + 9) = v107;
            *((_QWORD *)v4 + 10) = v109;
            *((_QWORD *)v4 + 11) = v70;
            *((_QWORD *)v4 + 12) = &v107[8 * v108];
            if (v115)
            {
              operator delete(v115);
              v70 = (char *)*((_QWORD *)v4 + 11);
            }
          }
          else
          {
            v74 = v73 >> 3;
            v17 = v73 >> 3 < -1;
            v75 = (v73 >> 3) + 2;
            if (v17)
              v76 = v75;
            else
              v76 = v74 + 1;
            v77 = -(v76 >> 1);
            v78 = v76 >> 1;
            v79 = &v69[-8 * v78];
            v80 = v70 - v69;
            if (v70 != v69)
            {
              memmove(&v69[-8 * v78], v69, v70 - v69);
              v69 = (char *)*((_QWORD *)v4 + 10);
            }
            v70 = &v79[v80];
            *((_QWORD *)v4 + 10) = &v69[8 * v77];
            *((_QWORD *)v4 + 11) = &v79[v80];
          }
        }
        *(_QWORD *)v70 = v71;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
      goto LABEL_35;
    }
    if (v26 == v27)
      v30 = 1;
    else
      v30 = (v26 - v27) >> 2;
    v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v25];
    v35 = &v31[8 * v32];
    v36 = operator new(0x1000uLL);
    if (v25 == v33)
    {
      v37 = 8 * v25;
      if (v7 < 1)
      {
        v81 = v36;
        v82 = v37 >> 2;
        if (v5 == v6)
          v83 = 1;
        else
          v83 = v82;
        v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v83);
        v34 = &v84[8 * (v83 >> 2)];
        v35 = &v84[8 * v85];
        if (v31)
          operator delete(v31);
        v31 = v84;
        v36 = v81;
      }
      else
      {
        v38 = v37 >> 3;
        if (v38 >= -1)
          v39 = v38 + 1;
        else
          v39 = v38 + 2;
        v34 -= 8 * (v39 >> 1);
      }
    }
    *(_QWORD *)v34 = v36;
    v86 = v34 + 8;
    v87 = *((_QWORD *)v4 + 11);
    if (v87 == *((_QWORD *)v4 + 10))
    {
      v102 = v34;
      v88 = v34 + 8;
LABEL_87:
      v103 = (void *)*((_QWORD *)v4 + 9);
      *((_QWORD *)v4 + 9) = v31;
      *((_QWORD *)v4 + 10) = v102;
      *((_QWORD *)v4 + 11) = v88;
      *((_QWORD *)v4 + 12) = v35;
      v2 = a2;
      if (v103)
        operator delete(v103);
      goto LABEL_36;
    }
    while (1)
    {
      if (v34 == v31)
      {
        if (v86 < v35)
        {
          v90 = (v35 - v86) >> 3;
          if (v90 >= -1)
            v91 = v90 + 1;
          else
            v91 = v90 + 2;
          v88 = &v86[8 * (v91 >> 1)];
          v89 = &v34[8 * (v91 >> 1)];
          if (v86 == v34)
            v34 = v86;
          else
            memmove(&v34[8 * (v91 >> 1)], v34, v86 - v34);
          goto LABEL_83;
        }
        if (v35 == v34)
          v92 = 1;
        else
          v92 = (v35 - v34) >> 2;
        v93 = 2 * v92;
        v94 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v92);
        v31 = v94;
        v89 = &v94[(v93 + 6) & 0xFFFFFFFFFFFFFFF8];
        v88 = v89;
        v96 = v86 - v34;
        if (v86 != v34)
        {
          v88 = &v89[v96 & 0xFFFFFFFFFFFFFFF8];
          v97 = 8 * (v96 >> 3);
          v98 = &v94[(v93 + 6) & 0xFFFFFFFFFFFFFFF8];
          v99 = v34;
          do
          {
            v100 = *(_QWORD *)v99;
            v99 += 8;
            *(_QWORD *)v98 = v100;
            v98 += 8;
            v97 -= 8;
          }
          while (v97);
        }
        v35 = &v94[8 * v95];
        operator delete(v34);
      }
      else
      {
        v88 = v86;
        v89 = v34;
      }
      v34 = v31;
LABEL_83:
      v31 = v34;
      v101 = *(_QWORD *)(v87 - 8);
      v87 -= 8;
      *((_QWORD *)v89 - 1) = v101;
      v102 = v89 - 8;
      v86 = v88;
      v34 = v102;
      if (v87 == *((_QWORD *)v4 + 10))
        goto LABEL_87;
    }
  }
  *((_QWORD *)v4 + 13) = v9 - 256;
  v13 = *(_QWORD *)v6;
  v11 = v6 + 8;
  v12 = v13;
  *((_QWORD *)v4 + 10) = v11;
  if (v5 == *((char **)v4 + 12))
  {
    v14 = *((_QWORD *)v4 + 9);
    v15 = (uint64_t)&v11[-v14];
    if ((unint64_t)v11 <= v14)
    {
      v41 = (uint64_t)&v5[-v14];
      v40 = v41 == 0;
      v42 = v41 >> 2;
      if (v40)
        v43 = 1;
      else
        v43 = v42;
      v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v43);
      v46 = &v44[8 * (v43 >> 2)];
      v47 = (uint64_t *)*((_QWORD *)v4 + 10);
      v5 = v46;
      v48 = *((_QWORD *)v4 + 11) - (_QWORD)v47;
      if (v48)
      {
        v5 = &v46[v48 & 0xFFFFFFFFFFFFFFF8];
        v49 = 8 * (v48 >> 3);
        v50 = &v44[8 * (v43 >> 2)];
        do
        {
          v51 = *v47++;
          *(_QWORD *)v50 = v51;
          v50 += 8;
          v49 -= 8;
        }
        while (v49);
      }
      v52 = (void *)*((_QWORD *)v4 + 9);
      *((_QWORD *)v4 + 9) = v44;
      *((_QWORD *)v4 + 10) = v46;
      *((_QWORD *)v4 + 11) = v5;
      *((_QWORD *)v4 + 12) = &v44[8 * v45];
      if (v52)
      {
        operator delete(v52);
        v5 = (char *)*((_QWORD *)v4 + 11);
      }
    }
    else
    {
      v16 = v15 >> 3;
      v17 = v15 >> 3 < -1;
      v18 = (v15 >> 3) + 2;
      if (v17)
        v19 = v18;
      else
        v19 = v16 + 1;
      v20 = -(v19 >> 1);
      v21 = v19 >> 1;
      v22 = &v11[-8 * v21];
      v23 = v5 - v11;
      if (v5 != v11)
      {
        memmove(&v11[-8 * v21], v11, v5 - v11);
        v5 = (char *)*((_QWORD *)v4 + 10);
      }
      v24 = &v5[8 * v20];
      v5 = &v22[v23];
      *((_QWORD *)v4 + 10) = v24;
      *((_QWORD *)v4 + 11) = &v22[v23];
    }
  }
  *(_QWORD *)v5 = v12;
LABEL_35:
  *((_QWORD *)v4 + 11) += 8;
LABEL_36:
  v6 = (char *)*((_QWORD *)v4 + 10);
  v10 = *((_QWORD *)v4 + 14) + *((_QWORD *)v4 + 13);
LABEL_37:
  *(_OWORD *)(*(_QWORD *)&v6[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *v2;
  ++*((_QWORD *)v4 + 14);
  SVG::RecordBase::processSpecificElement(v4, *(unint64_t ***)(a1 + 16), *(const SVG::Presentation **)(a1 + 24));
  v54 = *((_QWORD *)v4 + 10);
  v53 = *((_QWORD *)v4 + 11);
  if (v53 == v54)
    v55 = 0;
  else
    v55 = 32 * (v53 - v54) - 1;
  v56 = *((_QWORD *)v4 + 13);
  v57 = *((_QWORD *)v4 + 14) - 1;
  *((_QWORD *)v4 + 14) = v57;
  if ((unint64_t)(v55 - (v57 + v56)) >= 0x200)
  {
    operator delete(*(void **)(v53 - 8));
    *((_QWORD *)v4 + 11) -= 8;
  }
}

uint64_t std::__function::__func<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0,std::allocator<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0,std::allocator<SVG::Record::processPresentation(SVG::Element const&,SVG::Presentation const&)::$_0>,void ()(SVG::ApplyPresentationState const&)>::target_type()
{
}

double SVG::PathElement::PathElement(uint64_t a1, uint64_t x1_0, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  CFTypeRef *v8;
  uint64_t *v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef v30;
  unsigned __int8 *v31;
  double result;
  uint64_t v33;
  char v34;
  SVG::PathElement *v35;
  void *__p[2];
  __int128 v37;
  _BYTE *v38;
  __int128 *v39;
  __int128 *v40;
  _BYTE *v41;
  _BYTE **v42;
  CFTypeRef *p_cf;
  _BYTE *v44;
  __int128 *v45;
  __int128 *v46;
  _BYTE *v47;
  _BYTE **v48;
  CFTypeRef *v49;
  __int128 *v50;
  __int128 *v51;
  _BYTE *v52;
  _BYTE **v53;
  CFTypeRef *v54;
  __int128 *v55;
  __int128 *v56;
  _BYTE *v57;
  _BYTE **v58;
  CFTypeRef *v59;
  __int128 *v60;
  _BYTE *v61;
  _BYTE **v62;
  __int128 *v63;
  CFTypeRef *v64;
  __int128 *v65;
  _BYTE *v66;
  __int128 *v67;
  _BYTE **v68;
  CFTypeRef *v69;
  __int128 *v70;
  _BYTE *v71;
  _BYTE **v72;
  __int128 *v73;
  CFTypeRef *v74;
  __int128 *v75;
  _BYTE *v76;
  __int128 *v77;
  _BYTE **v78;
  CFTypeRef *v79;
  __int128 *v80;
  __int128 *v81;
  _BYTE *v82;
  _BYTE **v83;
  CFTypeRef *v84;
  _BYTE *v85;
  CFTypeRef cf;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  _BYTE v92[24];
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unsigned __int8 v96;
  _BYTE v97[24];
  void **v98;
  CGRect v99;

  v5 = SVG::ShapeElement::ShapeElement(a1, x1_0, a3);
  *(_QWORD *)v5 = off_1E71372D0;
  *(_OWORD *)(v5 + 688) = 0u;
  std::string::basic_string[abi:nn180100]<0>(__p, "d");
  std::string::basic_string[abi:nn180100]<0>(&v93, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)__p, (uint64_t)&v93);
  if (SHIBYTE(v94) < 0)
    operator delete((void *)v93);
  if (SBYTE7(v37) < 0)
  {
    operator delete(__p[0]);
    if (!v6)
    {
LABEL_40:
      std::string::basic_string[abi:nn180100]<0>(__p, "pathLength");
      std::string::basic_string[abi:nn180100]<0>(&v93, "http://www.w3.org/2000/svg");
      v31 = SVG::Element::findInAttributeMap(a3, (uint64_t)__p, (uint64_t)&v93);
      if (SHIBYTE(v94) < 0)
        operator delete((void *)v93);
      if (SBYTE7(v37) < 0)
        operator delete(__p[0]);
      if (v31)
      {
        v33 = SVG::consumeNumberAlone((uint64_t)(v31 + 64));
        if (v34)
          *(_QWORD *)(a1 + 696) = v33;
      }
      return result;
    }
  }
  else if (!v6)
  {
    goto LABEL_40;
  }
  v7 = 0;
  v8 = (CFTypeRef *)(a1 + 688);
  v9 = (uint64_t *)(v6 + 64);
  v90 = 0uLL;
  v91 = 0;
  do
  {
    v10 = v7;
    v7 = SVG::consumeWsp(v9, v7);
  }
  while (v11);
  v89 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v87 = v12;
  v88 = v12;
  v38 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v12;
  v37 = v12;
  SVG::consumeMovetoDrawtoCommandGroup((uint64_t)__p, v9, v10);
  if ((_BYTE)v38)
  {
    memset(v97, 0, sizeof(v97));
    v10 = *((_QWORD *)&v37 + 1);
    v13 = (char *)__p[0];
    v14 = (char *)__p[1];
    while (v13 != v14)
    {
      std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::emplace_back<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>((uint64_t *)v97, (uint64_t)v13);
      v13 += 48;
    }
    while (1)
    {
      v17 = v10;
      do
      {
        v18 = v17;
        v17 = SVG::consumeWsp(v9, v17);
      }
      while (v19);
      SVG::consumeMovetoDrawtoCommandGroup((uint64_t)&v93, v9, v18);
      if (v38 == v96)
      {
        if (!(_BYTE)v38)
          break;
        std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__vdeallocate(__p);
        *(_OWORD *)__p = v93;
        v20 = v94;
        v94 = 0;
        v93 = 0uLL;
        *(_QWORD *)&v37 = v20;
        *((_QWORD *)&v37 + 1) = v95;
      }
      else if ((_BYTE)v38)
      {
        v98 = __p;
        std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v98);
        LOBYTE(v38) = 0;
      }
      else
      {
        *(_OWORD *)__p = v93;
        v21 = v94;
        v94 = 0;
        v93 = 0uLL;
        *(_QWORD *)&v37 = v21;
        *((_QWORD *)&v37 + 1) = v95;
        LOBYTE(v38) = 1;
      }
      if (v96)
      {
        v98 = (void **)&v93;
        std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v98);
      }
      if (!(_BYTE)v38)
        break;
      v10 = *((_QWORD *)&v37 + 1);
      v15 = (char *)__p[0];
      v16 = (char *)__p[1];
      while (v15 != v16)
      {
        std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::emplace_back<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>((uint64_t *)v97, (uint64_t)v15);
        v15 += 48;
      }
    }
    v23 = *(_QWORD *)&v97[8];
    v22 = *(_QWORD *)v97;
    *(_QWORD *)v92 = *(_QWORD *)v97;
    *(_OWORD *)&v92[8] = *(_OWORD *)&v97[8];
    memset(v97, 0, sizeof(v97));
    v94 = 0;
    v93 = 0uLL;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__init_with_size[abi:nn180100]<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*,std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*>(&v93, v22, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 4));
    v24 = v93;
    v87 = v93;
    v25 = v94;
    v94 = 0;
    v95 = v10;
    v93 = 0uLL;
    *(_QWORD *)&v88 = v25;
    *((_QWORD *)&v88 + 1) = v10;
    LOBYTE(v89) = 1;
    v98 = (void **)&v93;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v98);
    v98 = (void **)v92;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v98);
    *(_QWORD *)&v93 = v97;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
    if ((_BYTE)v38)
    {
      *(_QWORD *)&v93 = __p;
      std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
    }
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__vdeallocate((void **)&v90);
    v90 = v24;
    v91 = v25;
    *(_QWORD *)&v88 = 0;
    v87 = 0uLL;
    __p[0] = &v87;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  }
  do
    v10 = SVG::consumeWsp(v9, v10);
  while (v26);
  cf = CGPathCreateMutable();
  *(_OWORD *)v97 = *MEMORY[0x1E0C9D538];
  *(_OWORD *)v92 = *(_OWORD *)v97;
  *(_QWORD *)&v93 = -256;
  *((_QWORD *)&v93 + 1) = -1;
  v94 = 0xAAAAAAAAAAAAAA00;
  *(_QWORD *)&v87 = -256;
  *((_QWORD *)&v87 + 1) = -1;
  *(_QWORD *)&v88 = 0xAAAAAAAAAAAAAA00;
  v85 = v97;
  __p[0] = &v93;
  __p[1] = &v87;
  *(_QWORD *)&v37 = &cf;
  *((_QWORD *)&v37 + 1) = v97;
  v38 = v92;
  v39 = &v93;
  v40 = &v87;
  v41 = v97;
  v42 = &v85;
  p_cf = &cf;
  v44 = v92;
  v45 = &v93;
  v46 = &v87;
  v47 = v97;
  v48 = &v85;
  v49 = &cf;
  v50 = &v93;
  v51 = &v87;
  v52 = v97;
  v53 = &v85;
  v54 = &cf;
  v55 = &v93;
  v56 = &v87;
  v57 = v97;
  v58 = &v85;
  v59 = &cf;
  v60 = &v87;
  v61 = v97;
  v62 = &v85;
  v63 = &v93;
  v64 = &cf;
  v65 = &v87;
  v66 = v97;
  v67 = &v93;
  v68 = &v85;
  v69 = &cf;
  v70 = &v93;
  v71 = v97;
  v72 = &v85;
  v73 = &v87;
  v74 = &cf;
  v75 = &v93;
  v76 = v97;
  v77 = &v87;
  v78 = &v85;
  v79 = &cf;
  v80 = &v93;
  v81 = &v87;
  v82 = v97;
  v83 = &v85;
  v84 = &cf;
  v28 = *((_QWORD *)&v90 + 1);
  v27 = v90;
  if ((_QWORD)v90 == *((_QWORD *)&v90 + 1))
  {
LABEL_34:
    v30 = cf;
    if (cf)
    {
      CFRetain(cf);
      if (cf)
        CFRelease(cf);
    }
    __p[0] = &v90;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
    if (*v8)
      CFRelease(*v8);
    *v8 = v30;
    goto LABEL_40;
  }
  while (1)
  {
    v29 = *(unsigned int *)(v27 + 40);
    if ((_DWORD)v29 == -1)
      break;
    v98 = __p;
    ((void (*)(void ***, uint64_t))off_1E7138590[v29])(&v98, v27);
    v27 += 48;
    if (v27 == v28)
      goto LABEL_34;
  }
  v35 = (SVG::PathElement *)std::__throw_bad_variant_access[abi:nn180100]();
  return SVG::PathElement::boundingBox(v35, v99);
}

double SVG::PathElement::boundingBox(SVG::PathElement *this, CGRect a2)
{
  const CGPath *v2;
  unint64_t PathBoundingBox;

  v2 = (const CGPath *)*((_QWORD *)this + 86);
  if (v2)
  {
    CFRetain(*((CFTypeRef *)this + 86));
    PathBoundingBox = (unint64_t)CGPathGetPathBoundingBox(v2);
    CFRelease(v2);
  }
  else
  {
    PathBoundingBox = (unint64_t)CGPathGetPathBoundingBox(0);
  }
  return *(double *)&PathBoundingBox;
}

CFTypeRef SVG::PathElement::path@<X0>(SVG::PathElement *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, _QWORD *a3@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 86);
  *a3 = result;
  if (result)
    return CFRetain(result);
  return result;
}

void SVG::PathElement::~PathElement(SVG::PathElement *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71372D0;
  v2 = (const void *)*((_QWORD *)this + 86);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E71385E0[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71385F8[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138610[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71385F8[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138610[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71372D0;
  v2 = (const void *)*((_QWORD *)this + 86);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E71385E0[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71385F8[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138610[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71385F8[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138610[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

void SVG::consumeMovetoDrawtoCommandGroup(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  _BYTE v32[32];
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  void **v41;
  void **v42;
  __int128 v43;
  unint64_t v44;
  int v45;
  unsigned __int8 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48 = v5;
  v49 = v5;
  v47 = v5;
  SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(&v47, (uint64_t)a2, a3, 0x4Du, 0x6Du, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeMovetoArgumentSequence);
  if (!BYTE8(v49))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    return;
  }
  v7 = *((_QWORD *)&v48 + 1);
  v6 = v48;
  v8 = v49;
  v26 = v47;
  *(_QWORD *)&v49 = (char *)&v35 + 8;
  v9 = operator new(0x30uLL);
  *(_OWORD *)v9 = v26;
  v10 = (char *)(v9 + 6);
  v9[2] = v6;
  v9[3] = v7;
  *((_BYTE *)v9 + 32) = v8;
  *((_DWORD *)v9 + 10) = 1;
  v34 = (uint64_t)v9;
  *((_QWORD *)&v35 + 1) = v9 + 6;
  v47 = 0u;
  v48 = 0u;
  std::__split_buffer<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::~__split_buffer((uint64_t)&v47);
  *(_QWORD *)&v35 = v10;
  do
  {
    v11 = v7;
    v7 = SVG::consumeWsp(a2, v7);
  }
  while (v12);
  v33 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v32 = v13;
  *(_OWORD *)&v32[16] = v13;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v48 = v13;
  v49 = v13;
  v47 = v13;
  SVG::consumeDrawtoCommand((uint64_t)&v47, (uint64_t)a2, v11);
  if (!(_BYTE)v50)
  {
    v23 = v34;
    v28 = v34;
    v24 = v35;
    v29 = v35;
    v34 = 0;
    v35 = 0uLL;
    *(_QWORD *)&v48 = 0;
    v47 = 0uLL;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__init_with_size[abi:nn180100]<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*,std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*>(&v47, v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 4));
    *(_OWORD *)a1 = v47;
    v25 = v48;
    v47 = 0uLL;
    *(_QWORD *)&v48 = 0;
    *((_QWORD *)&v48 + 1) = v11;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 1;
    v42 = (void **)&v47;
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v42);
    v42 = (void **)&v28;
    v22 = &v42;
    goto LABEL_33;
  }
  v39 = 0;
  v40 = 0uLL;
  v38 = -86;
  if (DWORD2(v49) == -1)
LABEL_34:
    std::__throw_bad_variant_access[abi:nn180100]();
  while (1)
  {
    v42 = (void **)&v38;
    v14 = ((uint64_t (*)(void ***, __int128 *))off_1E71384A0[DWORD2(v49)])(&v42, &v47);
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::emplace_back<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>(&v39, (uint64_t)&v47);
    SVG::consumeDrawtoCommand((uint64_t)&v42, (uint64_t)a2, v14);
    if (v50 == v46)
    {
      if (!(_BYTE)v50)
        break;
      if (DWORD2(v49) == -1)
      {
        if (v45 == -1)
          goto LABEL_18;
      }
      else if (v45 == -1)
      {
        ((void (*)(void ***, __int128 *))off_1E7138400[DWORD2(v49)])(&v41, &v47);
        DWORD2(v49) = -1;
LABEL_18:
        v15 = v50;
        goto LABEL_19;
      }
      v41 = (void **)&v47;
      ((void (*)(void ***, __int128 *, void ***))off_1E71384F0[v45])(&v41, &v47, &v42);
      goto LABEL_18;
    }
    if ((_BYTE)v50)
    {
      if (DWORD2(v49) != -1)
        ((void (*)(void ***, __int128 *))off_1E7138400[DWORD2(v49)])(&v41, &v47);
      v15 = 0;
      DWORD2(v49) = -1;
      LOBYTE(v50) = 0;
    }
    else
    {
      LOBYTE(v47) = 0;
      DWORD2(v49) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>((uint64_t)&v47, (uint64_t)&v42);
      v15 = 1;
      LOBYTE(v50) = 1;
    }
LABEL_19:
    if (v46 && v45 != -1)
      ((void (*)(void ***, void ***))off_1E7138400[v45])(&v41, &v42);
    if (!v15)
      break;
    if (DWORD2(v49) == -1)
      goto LABEL_34;
  }
  v16 = v39;
  v36 = v39;
  v17 = v40;
  v37 = v40;
  v39 = 0;
  v40 = 0uLL;
  v43 = 0uLL;
  v42 = 0;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__init_with_size[abi:nn180100]<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*,std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*>(&v42, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 4));
  v18 = v42;
  *(_QWORD *)v32 = v42;
  v27 = (void **)v43;
  *(_OWORD *)&v32[8] = v43;
  v42 = 0;
  v43 = 0uLL;
  v44 = v14;
  *(_QWORD *)&v32[24] = v14;
  LOBYTE(v33) = 1;
  v41 = (void **)&v42;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v41);
  v41 = (void **)&v36;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v41);
  v42 = (void **)&v39;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v42);
  if ((_BYTE)v50 && DWORD2(v49) != -1)
    ((void (*)(void ***, __int128 *))off_1E7138400[DWORD2(v49)])(&v42, &v47);
  while (v18 != v27)
  {
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::emplace_back<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>(&v34, (uint64_t)v18);
    v18 += 6;
  }
  v19 = v34;
  v30 = v34;
  v20 = v35;
  v31 = v35;
  v34 = 0;
  v35 = 0uLL;
  *(_QWORD *)&v48 = 0;
  v47 = 0uLL;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__init_with_size[abi:nn180100]<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*,std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*>(&v47, v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 4));
  *(_OWORD *)a1 = v47;
  v21 = v48;
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = v14;
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = 1;
  v42 = (void **)&v47;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v42);
  v42 = (void **)&v30;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](&v42);
  *(_QWORD *)&v47 = v32;
  v22 = (void ***)&v47;
LABEL_33:
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](v22);
  *(_QWORD *)&v47 = &v34;
  std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v47);
}

uint64_t std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::emplace_back<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v9 + 1 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 48 * v9;
    v15 = v12 + 48 * v13;
    v24 = v15;
    *(_BYTE *)v14 = 0;
    *(_DWORD *)(v14 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(v14, a2);
    v8 = v14 + 48;
    v23.i64[1] = v14 + 48;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v20 = vdupq_n_s64(v16);
    }
    else
    {
      v18 = 0;
      do
      {
        *(_BYTE *)(v14 + v18 - 48) = 0;
        v19 = v14 + v18 - 48;
        *(_DWORD *)(v19 + 40) = -1;
        v18 -= 48;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(v19, v16 + v18);
      }
      while (v16 + v18 != v17);
      v20 = *(int64x2_t *)a1;
      v14 += v18;
      v8 = v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    result = std::__split_buffer<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_DWORD *)(v6 + 40) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(v6, a2);
    v8 = v6 + 48;
  }
  a1[1] = v8;
  return result;
}

_BYTE *SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(_BYTE *result, uint64_t a2, unint64_t a3, unsigned __int8 a4, unsigned __int8 a5, _QWORD *(*a6)(__int128 *__return_ptr, uint64_t, unint64_t))
{
  _BYTE *v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v15;
  unint64_t v16;
  char v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;

  v6 = result;
  v7 = *(unsigned __int8 *)(a2 + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (v7 > a3
    && (v8 >= 0 ? (v10 = a2) : (v10 = *(_QWORD *)a2),
        (v11 = *(char *)(v10 + a3), v12 = a5, v11 != a4) ? (v13 = v11 == a5) : (v13 = 1),
        v13))
  {
    v15 = a3 + 1;
    do
    {
      v16 = v15;
      v15 = SVG::consumeWsp((uint64_t *)a2, v15);
    }
    while (v17);
    v23 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21 = v18;
    v22 = v18;
    result = a6(&v21, a2, v16);
    v19 = v23;
    if ((_BYTE)v23)
    {
      v20 = v22;
      *(_OWORD *)v6 = v21;
      *((_OWORD *)v6 + 1) = v20;
      v6[32] = v11 != v12;
      v19 = 1;
    }
    else
    {
      *v6 = 0;
    }
    v6[40] = v19;
  }
  else
  {
    *result = 0;
    result[40] = 0;
  }
  return result;
}

void SVG::consumeMovetoArgumentSequence(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SVG::consumeOneOrMoreGeneric<CGPoint>(a3, a1, a2);
}

void SVG::consumeOneOrMoreGeneric<CGPoint>(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD __dst[2];
  _BYTE v28[32];
  void *__p;
  char *v30;
  char *v31;

  *(_QWORD *)v28 = -1;
  *(_QWORD *)&v28[8] = -1;
  *(_QWORD *)&v28[16] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v28[24] = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeCoordinatePair(a2, a3, (uint64_t)v28);
  if (v28[24])
  {
    v5 = (char *)operator new(0x10uLL);
    v6 = v5 + 16;
    *(_OWORD *)v5 = *(_OWORD *)v28;
    __p = v5;
    v31 = v5 + 16;
    while (1)
    {
      v30 = v6;
      v7 = *(_QWORD *)&v28[16];
      v8 = SVG::consumeCommaWsp(a2, *(unint64_t *)&v28[16]);
      if (v9)
        v7 = v8;
      SVG::consumeCoordinatePair(a2, v7, (uint64_t)__dst);
      *(_OWORD *)&v28[9] = *(_OWORD *)((char *)__dst + 9);
      *(_OWORD *)v28 = __dst[0];
      if (!BYTE8(__dst[1]))
        break;
      v10 = v30;
      if (v30 >= v31)
      {
        v11 = (v30 - (_BYTE *)__p) >> 4;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60)
          abort();
        v13 = v31 - (_BYTE *)__p;
        if ((v31 - (_BYTE *)__p) >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Length>>((uint64_t)&v31, v14);
        else
          v15 = 0;
        v16 = &v15[16 * v11];
        *(_OWORD *)v16 = *(_OWORD *)v28;
        v18 = (char *)__p;
        v17 = v30;
        v19 = v16;
        if (v30 != __p)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = (char *)__p;
        }
        v6 = v16 + 16;
        __p = v19;
        v30 = v16 + 16;
        v31 = &v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_OWORD *)v30 = *(_OWORD *)v28;
        v6 = v10 + 16;
      }
    }
    v21 = (char *)__p;
    v20 = v30;
    __p = 0;
    v30 = 0;
    v31 = 0;
    memset(__dst, 0, 24);
    v22 = v20 - v21;
    if (v20 == v21)
    {
      v26 = 0;
      v24 = 0;
      v25 = 0;
    }
    else
    {
      std::vector<SVG::Length>::__vallocate[abi:nn180100](__dst, v22 >> 4);
      v23 = *((_QWORD *)&__dst[0] + 1);
      memmove(*((void **)&__dst[0] + 1), v21, v22);
      v24 = v23 + v22;
      v25 = *(_QWORD *)&__dst[0];
      v26 = *(_QWORD *)&__dst[1];
    }
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v24;
    *((_QWORD *)&__dst[1] + 1) = v7;
    memset(__dst, 0, 24);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = 1;
    if (v21)
      operator delete(v21);
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138400[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E7138450[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v4 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t std::__split_buffer<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 48;
      *(_QWORD *)(a1 + 16) = v3 - 48;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(char *))off_1E7138400[v5])(&v7);
        v4 = *(_QWORD *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SVG::consumeDrawtoCommand(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  int v14;
  __int128 v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  __int128 v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  void *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  __int128 v31;
  BOOL v32;
  _BYTE *v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  char v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  void *__dst[2];
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6 > a3)
  {
    v8 = v7 >= 0 ? a2 : *(_QWORD *)a2;
    if ((*(char *)(v8 + a3) | 0x20) == 0x7A)
    {
      __dst[0] = (void *)(a3 + 1);
      DWORD2(v51) = 0;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 40) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)__dst);
      *(_BYTE *)(a1 + 48) = 1;
      if (DWORD2(v51) != -1)
        ((void (*)(__int128 *, void **))off_1E7138400[DWORD2(v51)])(&v45, __dst);
      return;
    }
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = v9;
  v51 = v9;
  *(_OWORD *)__dst = v9;
  SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(__dst, a2, a3, 0x4Cu, 0x6Cu, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLinetoArgumentSequence);
  if (BYTE8(v51))
  {
    v11 = __dst[0];
    v10 = __dst[1];
    *(_QWORD *)&v45 = *((_QWORD *)&v50 + 1);
    BYTE8(v45) = v51;
    __dst[0] = 0;
    __dst[1] = 0;
    *(_QWORD *)&v50 = 0;
    v12 = v10 - v11;
    if (v10 != v11)
    {
      std::vector<SVG::Length>::__vallocate[abi:nn180100](__dst, v12 >> 4);
      v13 = (char *)__dst[1];
      memmove(__dst[1], v11, v12);
      __dst[1] = &v13[v12];
    }
    *((_QWORD *)&v50 + 1) = v45;
    LOBYTE(v51) = BYTE8(v45);
    v14 = 2;
LABEL_22:
    DWORD2(v51) = v14;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)__dst);
    *(_BYTE *)(a1 + 48) = 1;
    if (DWORD2(v51) != -1)
      ((void (*)(char *, void **))off_1E7138400[DWORD2(v51)])(&v44, __dst);
LABEL_24:
    if (!v11)
      return;
    v23 = v11;
    goto LABEL_26;
  }
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = v15;
  v51 = v15;
  *(_OWORD *)__dst = v15;
  SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(__dst, a2, a3, 0x48u, 0x68u, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeHorizontalLinetoArgumentSequence);
  if (BYTE8(v51))
  {
    v11 = __dst[0];
    v16 = __dst[1];
    *(_QWORD *)&v45 = *((_QWORD *)&v50 + 1);
    BYTE8(v45) = v51;
    __dst[0] = 0;
    __dst[1] = 0;
    *(_QWORD *)&v50 = 0;
    v17 = v16 - v11;
    if (v16 != v11)
    {
      std::vector<double>::__vallocate[abi:nn180100](__dst, v17 >> 3);
      v18 = (char *)__dst[1];
      memmove(__dst[1], v11, v17);
      __dst[1] = &v18[v17];
    }
    *((_QWORD *)&v50 + 1) = v45;
    LOBYTE(v51) = BYTE8(v45);
    v14 = 3;
    goto LABEL_22;
  }
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = v19;
  v51 = v19;
  *(_OWORD *)__dst = v19;
  SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(__dst, a2, a3, 0x56u, 0x76u, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeVerticalLinetoArgumentSequence);
  if (BYTE8(v51))
  {
    v11 = __dst[0];
    v20 = __dst[1];
    *(_QWORD *)&v45 = *((_QWORD *)&v50 + 1);
    BYTE8(v45) = v51;
    __dst[0] = 0;
    __dst[1] = 0;
    *(_QWORD *)&v50 = 0;
    v21 = v20 - v11;
    if (v20 != v11)
    {
      std::vector<double>::__vallocate[abi:nn180100](__dst, v21 >> 3);
      v22 = (char *)__dst[1];
      memmove(__dst[1], v11, v21);
      __dst[1] = &v22[v21];
    }
    *((_QWORD *)&v50 + 1) = v45;
    LOBYTE(v51) = BYTE8(v45);
    v14 = 4;
    goto LABEL_22;
  }
  v24 = *(unsigned __int8 *)(a2 + 23);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  if (v24 > a3)
  {
    v26 = v25 >= 0 ? a2 : *(_QWORD *)a2;
    v27 = *(unsigned __int8 *)(v26 + a3);
    if ((v27 | 0x20) == 0x63)
    {
      v28 = a3 + 1;
      do
      {
        v29 = v28;
        v28 = SVG::consumeWsp((uint64_t *)a2, v28);
      }
      while (v30);
      *(_QWORD *)&v51 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__dst = v31;
      v50 = v31;
      SVG::consumeOneOrMoreGeneric<std::array<CGPoint,3ul>>((uint64_t)__dst, (uint64_t *)a2, v29);
      if ((_BYTE)v51)
      {
        v32 = v27 != 99;
        v11 = __dst[0];
        v33 = __dst[1];
        v34 = *((_QWORD *)&v50 + 1);
        __dst[0] = 0;
        __dst[1] = 0;
        *(_QWORD *)&v50 = 0;
        v35 = v33 - v11;
        if (v33 != v11)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v35 >> 4) >= 0x555555555555556)
            abort();
          v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(0xAAAAAAAAAAAAAAABLL * (v35 >> 4));
          __dst[0] = v36;
          *(_QWORD *)&v50 = &v36[48 * v37];
          memmove(v36, v11, v35);
          __dst[1] = &v36[16 * (v35 >> 4)];
        }
        *((_QWORD *)&v50 + 1) = v34;
        LOBYTE(v51) = v32;
        DWORD2(v51) = 5;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 40) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)__dst);
        *(_BYTE *)(a1 + 48) = 1;
        if (DWORD2(v51) != -1)
          ((void (*)(__int128 *, void **))off_1E7138400[DWORD2(v51)])(&v45, __dst);
        goto LABEL_24;
      }
    }
  }
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = v38;
  v51 = v38;
  *(_OWORD *)__dst = v38;
  SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(__dst, a2, a3, 0x53u, 0x73u, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeSmoothCurvetoArgumentSequence);
  if (BYTE8(v51))
  {
    LOBYTE(v47) = v51;
    v43 = __dst[0];
    v45 = *(_OWORD *)__dst;
    v46 = v50;
    LOBYTE(v48) = 1;
    std::vector<std::array<CGPoint,2ul>>::vector(__dst, (uint64_t)&v45);
    *((_QWORD *)&v50 + 1) = *((_QWORD *)&v46 + 1);
    LOBYTE(v51) = v47;
    DWORD2(v51) = 6;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)__dst);
    *(_BYTE *)(a1 + 48) = 1;
    if (DWORD2(v51) != -1)
      ((void (*)(char *, void **))off_1E7138400[DWORD2(v51)])(&v44, __dst);
    v23 = v43;
    if (!v43)
      return;
LABEL_26:
    operator delete(v23);
    return;
  }
  *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50 = v39;
  v51 = v39;
  *(_OWORD *)__dst = v39;
  SVG::consumeQuadraticBezierCurveto((uint64_t)__dst, a2, a3);
  if (BYTE8(v51))
  {
    std::vector<std::array<CGPoint,2ul>>::vector(&v45, (uint64_t)__dst);
    *((_QWORD *)&v46 + 1) = *((_QWORD *)&v50 + 1);
    LOBYTE(v47) = v51;
    v40 = 7;
  }
  else
  {
    *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v50 = v41;
    v51 = v41;
    *(_OWORD *)__dst = v41;
    SVG::consumeSmoothQuadraticBezierCurveto((uint64_t)__dst, a2, a3);
    if (BYTE8(v51))
    {
      std::vector<SVG::Length>::vector(&v45, (uint64_t)__dst);
      *((_QWORD *)&v46 + 1) = *((_QWORD *)&v50 + 1);
      LOBYTE(v47) = v51;
      v40 = 8;
    }
    else
    {
      *(_QWORD *)&v42 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v50 = v42;
      v51 = v42;
      *(_OWORD *)__dst = v42;
      SVG::consumeEllipticalArc((uint64_t)__dst, a2, a3);
      if (!BYTE8(v51))
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 48) = 0;
        return;
      }
      std::vector<SVG::EllipticalArcArgument>::vector(&v45, (uint64_t)__dst);
      *((_QWORD *)&v46 + 1) = *((_QWORD *)&v50 + 1);
      LOBYTE(v47) = v51;
      v40 = 9;
    }
  }
  LODWORD(v48) = v40;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)&v45);
  *(_BYTE *)(a1 + 48) = 1;
  if ((_DWORD)v48 != -1)
    ((void (*)(char *, __int128 *))off_1E7138400[v48])(&v44, &v45);
  v23 = __dst[0];
  if (__dst[0])
    goto LABEL_26;
}

_BYTE *SVG::consumeQuadraticBezierCurveto(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 v4;
  _BYTE *result;
  char v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v4;
  v11 = v4;
  v9 = v4;
  result = SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(&v9, a2, a3, 0x51u, 0x71u, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeQuadraticBezierCurvetoArgumentSequence);
  v6 = BYTE8(v11);
  if (BYTE8(v11))
  {
    v8 = *((_QWORD *)&v10 + 1);
    v7 = v10;
    *(_BYTE *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = __PAIR128__(v8, v7);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 40) = v6;
  return result;
}

_BYTE *SVG::consumeSmoothQuadraticBezierCurveto(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 v4;
  _BYTE *result;
  char v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v4;
  v11 = v4;
  v9 = v4;
  result = SVG::consumeSingleDrawtoCommand<std::vector<CGPoint>>(&v9, a2, a3, 0x54u, 0x74u, (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeSmoothQuadraticBezierCurvetoArgumentSequence);
  v6 = BYTE8(v11);
  if (BYTE8(v11))
  {
    v8 = *((_QWORD *)&v10 + 1);
    v7 = v10;
    *(_BYTE *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = __PAIR128__(v8, v7);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 40) = v6;
  return result;
}

void SVG::consumeEllipticalArc(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  int64_t i;
  unint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _OWORD v38[2];
  _BYTE v39[25];
  __int128 v40;
  __int128 v41;
  _BYTE v42[32];

  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 > a3)
  {
    v7 = v5 >= 0 ? a2 : *(_QWORD *)a2;
    v8 = *(unsigned __int8 *)(v7 + a3);
    if ((v8 | 0x20) == 0x61)
    {
      v9 = a3 + 1;
      do
      {
        v10 = v9;
        v9 = SVG::consumeWsp((uint64_t *)a2, v9);
      }
      while (v11);
      v40 = xmmword_1B9B92208;
      v41 = unk_1B9B92218;
      *(_OWORD *)v42 = xmmword_1B9B92228;
      *(_OWORD *)&v42[16] = unk_1B9B92238;
      SVG::consumeEllipticalArcArgument(a2, v10, (uint64_t)&v40);
      if (v42[24])
      {
        v12 = (__int128 *)operator new(0x30uLL);
        v13 = (char *)(v12 + 3);
        v14 = v41;
        *v12 = v40;
        v12[1] = v14;
        v12[2] = *(_OWORD *)v42;
        v15 = (char *)(v12 + 3);
LABEL_12:
        v16 = (char *)v12;
        for (i = v15 - (char *)v12; ; i += 48)
        {
          v18 = *(_QWORD *)&v42[16];
          v19 = SVG::consumeCommaWsp((uint64_t *)a2, *(unint64_t *)&v42[16]);
          if (v20)
            v18 = v19;
          SVG::consumeEllipticalArcArgument(a2, v18, (uint64_t)v38);
          *(_OWORD *)&v42[9] = *(_OWORD *)&v39[9];
          v40 = v38[0];
          v41 = v38[1];
          *(_OWORD *)v42 = *(_OWORD *)v39;
          if (!v39[24])
            break;
          if (v15 >= v13)
          {
            v23 = 0xAAAAAAAAAAAAAAABLL * (i >> 4);
            v24 = v23 + 1;
            if (v23 + 1 > 0x555555555555555)
              goto LABEL_43;
            if (0x5555555555555556 * ((v13 - v16) >> 4) > v24)
              v24 = 0x5555555555555556 * ((v13 - v16) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((v13 - v16) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v25 = 0x555555555555555;
            else
              v25 = v24;
            if (v25)
              v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(v25);
            else
              v26 = 0;
            v27 = (__int128 *)(v25 + 48 * v23);
            v28 = v41;
            *v27 = v40;
            v27[1] = v28;
            v27[2] = *(_OWORD *)v42;
            if (v15 == v16)
            {
              v12 = (__int128 *)(v25 + 48 * v23);
            }
            else
            {
              v29 = 0;
              do
              {
                v30 = &v27[v29 / 0x10];
                v31 = *(_OWORD *)&v15[v29 - 48];
                v32 = *(_OWORD *)&v15[v29 - 16];
                *(v30 - 2) = *(_OWORD *)&v15[v29 - 32];
                *(v30 - 1) = v32;
                *(v30 - 3) = v31;
                v29 -= 48;
              }
              while (&v15[v29] != v16);
              v12 = &v27[v29 / 0x10];
            }
            v13 = (char *)(v25 + 48 * v26);
            v15 = (char *)(v27 + 3);
            if (v16)
              operator delete(v16);
            goto LABEL_12;
          }
          v21 = v40;
          v22 = *(_OWORD *)v42;
          *((_OWORD *)v15 + 1) = v41;
          *((_OWORD *)v15 + 2) = v22;
          *(_OWORD *)v15 = v21;
          v15 += 48;
        }
        if (v15 == v16)
        {
          v36 = 0;
          v37 = 0;
          v34 = 0;
          if (!v16)
            goto LABEL_39;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (i >> 4) > 0x555555555555555)
LABEL_43:
            abort();
          v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(0xAAAAAAAAAAAAAAABLL * (i >> 4));
          v36 = &v34[48 * v35];
          memmove(v34, v16, i);
          v37 = &v34[16 * (i >> 4)];
          if (!v16)
            goto LABEL_39;
        }
        operator delete(v16);
LABEL_39:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v37;
        *(_QWORD *)(a1 + 16) = v36;
        *(_QWORD *)(a1 + 24) = v18;
        *(_BYTE *)(a1 + 32) = v8 != 97;
        v33 = 1;
        goto LABEL_40;
      }
    }
  }
  v33 = 0;
  *(_BYTE *)a1 = 0;
LABEL_40:
  *(_BYTE *)(a1 + 40) = v33;
}

void SVG::consumeLinetoArgumentSequence(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SVG::consumeOneOrMoreGeneric<CGPoint>(a3, a1, a2);
}

void SVG::consumeHorizontalLinetoArgumentSequence(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  SVG::consumeOneOrMoreGeneric<double>(a1, (void (*)(__int128 *__return_ptr))SVG::consumeCoordinate, (uint64_t (*)(uint64_t, _QWORD))SVG::consumeCommaWsp, a2);
}

void SVG::consumeVerticalLinetoArgumentSequence(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  SVG::consumeOneOrMoreGeneric<double>(a1, (void (*)(__int128 *__return_ptr))SVG::consumeCoordinate, (uint64_t (*)(uint64_t, _QWORD))SVG::consumeCommaWsp, a2);
}

void SVG::consumeCurvetoArgument(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v6 = 0;
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  v15 = v7;
  v16 = v7;
  v14 = v7;
  while (1)
  {
    if (v6)
    {
      v8 = SVG::consumeCommaWsp(a1, a2);
      if (v9)
        a2 = v8;
    }
    *(_QWORD *)&v11 = -1;
    *((_QWORD *)&v11 + 1) = -1;
    v12 = 0xAAAAAAAAAAAAAAAALL;
    v13 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeCoordinatePair(a1, a2, (uint64_t)&v11);
    if (!(_BYTE)v13)
      break;
    *(__int128 *)((char *)&v14 + v6) = v11;
    a2 = v12;
    v6 += 16;
    if (v6 == 48)
    {
      v10 = v15;
      *(_OWORD *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v10;
      *(_OWORD *)(a3 + 32) = v16;
      *(_QWORD *)(a3 + 48) = a2;
      *(_BYTE *)(a3 + 56) = 1;
      return;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 56) = 0;
}

void SVG::consumeOneOrMoreGeneric<std::array<CGPoint,3ul>>(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  __int128 v5;
  char *v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  int64_t i;
  unint64_t v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _OWORD v31[2];
  _BYTE v32[25];
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];

  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v34 = v5;
  *(_OWORD *)v35 = v5;
  v33 = v5;
  *(_QWORD *)&v35[16] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v35[24] = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeCurvetoArgument(a2, a3, (uint64_t)&v33);
  if (v35[24])
  {
    v6 = (char *)operator new(0x30uLL);
    v7 = v6 + 48;
    v8 = v34;
    *(_OWORD *)v6 = v33;
    *((_OWORD *)v6 + 1) = v8;
    *((_OWORD *)v6 + 2) = *(_OWORD *)v35;
    v9 = v6 + 48;
LABEL_3:
    v10 = v6;
    for (i = v9 - v6; ; i += 48)
    {
      v12 = *(_QWORD *)&v35[16];
      v13 = SVG::consumeCommaWsp(a2, *(unint64_t *)&v35[16]);
      if (v14)
        v12 = v13;
      SVG::consumeCurvetoArgument(a2, v12, (uint64_t)v31);
      *(_OWORD *)&v35[9] = *(_OWORD *)&v32[9];
      v33 = v31[0];
      v34 = v31[1];
      *(_OWORD *)v35 = *(_OWORD *)v32;
      if (!v32[24])
        break;
      if (v9 >= v7)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * (i >> 4);
        v18 = v17 + 1;
        if (v17 + 1 > 0x555555555555555)
          goto LABEL_33;
        if (0x5555555555555556 * ((v7 - v10) >> 4) > v18)
          v18 = 0x5555555555555556 * ((v7 - v10) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v19 = 0x555555555555555;
        else
          v19 = v18;
        if (v19)
          v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(v19);
        else
          v20 = 0;
        v21 = (_OWORD *)(v19 + 48 * v17);
        v22 = v34;
        *v21 = v33;
        v21[1] = v22;
        v21[2] = *(_OWORD *)v35;
        if (v9 == v10)
        {
          v6 = (char *)(v19 + 48 * v17);
        }
        else
        {
          v23 = 0;
          do
          {
            v24 = &v21[v23 / 0x10];
            v25 = *(_OWORD *)&v9[v23 - 48];
            v26 = *(_OWORD *)&v9[v23 - 16];
            *(v24 - 2) = *(_OWORD *)&v9[v23 - 32];
            *(v24 - 1) = v26;
            *(v24 - 3) = v25;
            v23 -= 48;
          }
          while (&v9[v23] != v10);
          v6 = (char *)&v21[v23 / 0x10];
        }
        v7 = (char *)(v19 + 48 * v20);
        v9 = (char *)(v21 + 3);
        if (v10)
          operator delete(v10);
        goto LABEL_3;
      }
      v15 = v33;
      v16 = *(_OWORD *)v35;
      *((_OWORD *)v9 + 1) = v34;
      *((_OWORD *)v9 + 2) = v16;
      *(_OWORD *)v9 = v15;
      v9 += 48;
    }
    if (v9 == v10)
    {
      v29 = 0;
      v30 = 0;
      v27 = 0;
    }
    else
    {
      if (0xAAAAAAAAAAAAAAABLL * (i >> 4) > 0x555555555555555)
LABEL_33:
        abort();
      v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(0xAAAAAAAAAAAAAAABLL * (i >> 4));
      v29 = &v27[48 * v28];
      memmove(v27, v10, i);
      v30 = &v27[16 * (i >> 4)];
    }
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 1;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
}

void SVG::consumeSmoothCurvetoArgumentSequence(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SVG::consumeOneOrMoreGeneric<std::array<CGPoint,2ul>>(a3, a1, a2, (void (*)(__int128 *__return_ptr, uint64_t *, uint64_t))SVG::consumeSmoothCurvetoArgument);
}

void SVG::consumeSmoothCurvetoArgument(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v6 = 0;
  v7 = 0;
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  v17 = v8;
  v18 = v8;
  v9 = 1;
  while (1)
  {
    v10 = v9;
    if ((v6 & 1) != 0)
    {
      v11 = SVG::consumeCommaWsp(a1, a2);
      if (v12)
        a2 = v11;
    }
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    v15 = 0xAAAAAAAAAAAAAAAALL;
    v16 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeCoordinatePair(a1, a2, (uint64_t)&v14);
    if (!(_BYTE)v16)
      break;
    v9 = 0;
    *(&v17 + v7) = v14;
    a2 = v15;
    v6 = 1;
    v7 = 1;
    if ((v10 & 1) == 0)
    {
      v13 = v18;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = a2;
      *(_BYTE *)(a3 + 40) = 1;
      return;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 40) = 0;
}

void SVG::consumeOneOrMoreGeneric<std::array<CGPoint,2ul>>(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(__int128 *__return_ptr, uint64_t *, uint64_t))
{
  __int128 v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  int64_t i;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  _BYTE v32[25];
  __int128 v33;
  _BYTE v34[32];

  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  v33 = v7;
  *(_OWORD *)v34 = v7;
  *(_QWORD *)&v34[16] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v34[24] = 0xAAAAAAAAAAAAAAAALL;
  a4(&v33, a2, a3);
  if (v34[24])
  {
    v8 = (char *)operator new(0x20uLL);
    v9 = v8 + 32;
    v10 = *(_OWORD *)v34;
    *(_OWORD *)v8 = v33;
    *((_OWORD *)v8 + 1) = v10;
    v11 = v8 + 32;
LABEL_3:
    v12 = v8;
    for (i = v11 - v8; ; i += 32)
    {
      v14 = *(_QWORD *)&v34[16];
      v15 = SVG::consumeCommaWsp(a2, *(unint64_t *)&v34[16]);
      if (v16)
        v14 = v15;
      a4(&v31, a2, v14);
      *(_OWORD *)&v34[9] = *(_OWORD *)&v32[9];
      v33 = v31;
      *(_OWORD *)v34 = *(_OWORD *)v32;
      if (!v32[24])
        break;
      if (v11 >= v9)
      {
        v18 = i >> 5;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59)
          goto LABEL_33;
        if ((v9 - v12) >> 4 > v19)
          v19 = (v9 - v12) >> 4;
        if ((unint64_t)(v9 - v12) >= 0x7FFFFFFFFFFFFFE0)
          v20 = 0x7FFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<CGPoint,2ul>>>(v20);
        else
          v21 = 0;
        v22 = *(_OWORD *)v34;
        v23 = (_OWORD *)(v20 + 32 * v18);
        *v23 = v33;
        v23[1] = v22;
        if (v11 == v12)
        {
          v8 = (char *)(v20 + 32 * v18);
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = &v23[v24];
            v26 = *(_OWORD *)&v11[v24 * 16 - 16];
            *(v25 - 2) = *(_OWORD *)&v11[v24 * 16 - 32];
            *(v25 - 1) = v26;
            v24 -= 2;
          }
          while (&v11[v24 * 16] != v12);
          v8 = (char *)&v23[v24];
        }
        v9 = (char *)(v20 + 32 * v21);
        v11 = (char *)(v23 + 2);
        if (v12)
          operator delete(v12);
        goto LABEL_3;
      }
      v17 = *(_OWORD *)v34;
      *(_OWORD *)v11 = v33;
      *((_OWORD *)v11 + 1) = v17;
      v11 += 32;
    }
    if (v11 == v12)
    {
      v29 = 0;
      v30 = 0;
      v27 = 0;
    }
    else
    {
      if (i < 0)
LABEL_33:
        abort();
      v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<CGPoint,2ul>>>((unint64_t)i >> 5);
      v29 = &v27[32 * v28];
      memmove(v27, v12, i);
      v30 = &v27[i];
    }
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(a1 + 24) = v14;
    *(_BYTE *)(a1 + 32) = 1;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<CGPoint,2ul>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a1);
}

_QWORD *std::vector<std::array<CGPoint,2ul>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<std::array<CGPoint,2ul>>::__vallocate[abi:nn180100](a1, v5 >> 5);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<std::array<CGPoint,2ul>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<CGPoint,2ul>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void SVG::consumeQuadraticBezierCurvetoArgumentSequence(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SVG::consumeOneOrMoreGeneric<std::array<CGPoint,2ul>>(a3, a1, a2, (void (*)(__int128 *__return_ptr, uint64_t *, uint64_t))SVG::consumeQuadraticBezierCurvetoArgument);
}

void SVG::consumeQuadraticBezierCurvetoArgument(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v6 = 0;
  v7 = 0;
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  v17 = v8;
  v18 = v8;
  v9 = 1;
  while (1)
  {
    v10 = v9;
    if ((v6 & 1) != 0)
    {
      v11 = SVG::consumeCommaWsp(a1, a2);
      if (v12)
        a2 = v11;
    }
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    v15 = 0xAAAAAAAAAAAAAAAALL;
    v16 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeCoordinatePair(a1, a2, (uint64_t)&v14);
    if (!(_BYTE)v16)
      break;
    v9 = 0;
    *(&v17 + v7) = v14;
    a2 = v15;
    v6 = 1;
    v7 = 1;
    if ((v10 & 1) == 0)
    {
      v13 = v18;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = a2;
      *(_BYTE *)(a3 + 40) = 1;
      return;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 40) = 0;
}

void SVG::consumeSmoothQuadraticBezierCurvetoArgumentSequence(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SVG::consumeOneOrMoreGeneric<CGPoint>(a3, a1, a2);
}

void SVG::consumeEllipticalArcArgument(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BYTE v50[22];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v47 = -1;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeNonnegativeNumber((uint64_t)&v47, (uint64_t *)a1, a2);
  if (!(_BYTE)v49)
    goto LABEL_33;
  v5 = v48;
  v6 = SVG::consumeCommaWsp((uint64_t *)a1, v48);
  v8 = v7 ? v6 : v5;
  v44 = -1;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v46 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeNonnegativeNumber((uint64_t)&v44, (uint64_t *)a1, v8);
  if (!(_BYTE)v46)
    goto LABEL_33;
  v9 = v45;
  v10 = SVG::consumeCommaWsp((uint64_t *)a1, v45);
  v12 = v11 ? v10 : v9;
  v41 = NAN;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumePathNumber(a1, v12, (uint64_t)&v41);
  if (!(_BYTE)v43)
    goto LABEL_33;
  v13 = SVG::consumeCommaWsp((uint64_t *)a1, v42);
  if (!v14)
    goto LABEL_33;
  v15 = v13;
  v16 = *(unsigned __int8 *)(a1 + 23);
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a1 + 8);
  if (v16 <= v13)
    goto LABEL_33;
  if (v17 >= 0)
    v18 = a1;
  else
    v18 = *(_QWORD *)a1;
  v19 = *(char *)(v18 + v13);
  if (v19 == 48)
  {
    v20 = 0;
  }
  else
  {
    if (v19 != 49)
      goto LABEL_33;
    v20 = 1;
  }
  v21 = SVG::consumeCommaWsp((uint64_t *)a1, v13 + 1);
  if (v22)
    v23 = v21;
  else
    v23 = v15 + 1;
  v24 = *(unsigned __int8 *)(a1 + 23);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a1 + 8);
  if (v24 <= v23)
    goto LABEL_33;
  if (v25 >= 0)
    v26 = a1;
  else
    v26 = *(_QWORD *)a1;
  v27 = *(char *)(v26 + v23);
  if (v27 == 48)
  {
    v28 = 0;
    goto LABEL_36;
  }
  if (v27 != 49)
  {
LABEL_33:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    return;
  }
  v28 = 1;
LABEL_36:
  v29 = SVG::consumeCommaWsp((uint64_t *)a1, v23 + 1);
  if (v30)
    v31 = v29;
  else
    v31 = v23 + 1;
  *(_QWORD *)&v38 = -1;
  *((_QWORD *)&v38 + 1) = -1;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeCoordinatePair((uint64_t *)a1, v31, (uint64_t)&v38);
  v32 = v40;
  if ((_BYTE)v40)
  {
    v33 = v39;
    v34 = v47;
    v35 = v44;
    v36 = v41 / 180.0;
    *(_OWORD *)&v50[6] = v38;
    *(_OWORD *)(a3 + 26) = *(_OWORD *)v50;
    v37 = *(_QWORD *)&v50[14];
    *(_QWORD *)a3 = v34;
    *(_QWORD *)(a3 + 8) = v35;
    *(double *)(a3 + 16) = v36 * 3.14159265;
    *(_BYTE *)(a3 + 24) = v20;
    *(_BYTE *)(a3 + 25) = v28;
    *(_QWORD *)(a3 + 40) = v37;
    *(_QWORD *)(a3 + 48) = v33;
    v32 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 56) = v32;
}

_QWORD *std::vector<SVG::EllipticalArcArgument>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 4) >= 0x555555555555556)
      abort();
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(0xAAAAAAAAAAAAAAABLL * (v5 >> 4));
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[48 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[16 * (v5 >> 4)];
  }
  return a1;
}

void SVG::consumeNonnegativeNumber(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  double v6;
  unint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = -1;
  v10 = 0xAAAAAAAAAAAAAAAALL;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeFloatingPointConstant(a2, a3, (uint64_t)&v9);
  if ((_BYTE)v11)
  {
    v6 = *(double *)&v9;
    v7 = v10;
  }
  else
  {
    memset(v8, 170, sizeof(v8));
    SVG::consumeIntegerConstant(a2, a3, (uint64_t)v8);
    if (!LOBYTE(v8[2]))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      return;
    }
    v6 = (double)v8[0];
    v7 = v8[1];
  }
  *(double *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_0,SVG::consumeDrawtoCommands(std::string const&,unsigned long)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138400[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 40) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 40) = -1;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    v10 = a3[1].n128_u64[1];
    *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
    *(_QWORD *)(v4 + 24) = v10;
    *(_DWORD *)(v4 + 40) = 5;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 6;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 7;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      result.n128_u64[0] = std::vector<SVG::Length>::__move_assign(a2, a3).n128_u64[0];
      v8 = a3[1].n128_u64[1];
      *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
      *(_QWORD *)(a2 + 24) = v8;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = *a3;
  *(__n128 *)v4 = *a3;
  *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 40) = 8;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 9)
  {
    ((void (*)(char *, uint64_t))off_1E7138400[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 40) = -1;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    v10 = a3[1].n128_u64[1];
    *(_BYTE *)(v4 + 32) = a3[2].n128_u8[0];
    *(_QWORD *)(v4 + 24) = v10;
    *(_DWORD *)(v4 + 40) = 9;
    return result;
  }
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v7;
    operator delete(v7);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  v9 = a3[1].n128_u64[1];
  *(_BYTE *)(a2 + 32) = a3[2].n128_u8[0];
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

_QWORD *std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__init_with_size[abi:nn180100]<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*,std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      abort();
    v6 = result;
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[6 * v8];
    if (a2 != a3)
    {
      v9 = result;
      do
      {
        *(_BYTE *)v9 = 0;
        *((_DWORD *)v9 + 10) = -1;
        v10 = *(unsigned int *)(a2 + 40);
        if ((_DWORD)v10 != -1)
        {
          result = (_QWORD *)((uint64_t (*)(char *, _QWORD *, uint64_t))off_1E7138540[v10])(&v11, v9, a2);
          *((_DWORD *)v9 + 10) = v10;
        }
        a2 += 48;
        v9 += 6;
        v7 += 6;
      }
      while (a2 != a3);
    }
    v6[1] = v7;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<SVG::Length>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<SVG::Length>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<double>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<double>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(const void **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = v5 - *(_QWORD *)a3;
  if (v5 != *(_QWORD *)a3)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 4) >= 0x555555555555556)
      abort();
    v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>>(0xAAAAAAAAAAAAAAABLL * (v7 >> 4));
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = &v8[48 * v9];
    memmove(v8, v6, v7);
    *(_QWORD *)(a2 + 8) = &v8[16 * (v7 >> 4)];
  }
  v10 = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v10;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<std::array<CGPoint,2ul>>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<std::array<CGPoint,2ul>>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<SVG::Length>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJmN3SVG6MovetoENS8_6LinetoENS8_16HorizontalLinetoENS8_14VerticalLinetoENS8_7CurvetoENS8_13SmoothCurvetoENS8_22QuadraticBezierCurvetoENS8_28SmoothQuadraticBezierCurvetoENS8_13EllipticalArcEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJmS9_SA_SB_SC_SD_SE_SF_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  result = std::vector<SVG::EllipticalArcArgument>::vector(a2, a3);
  v5 = *(_QWORD *)(a3 + 24);
  *((_BYTE *)result + 32) = *(_BYTE *)(a3 + 32);
  result[3] = v5;
  return result;
}

void std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__clear[abi:nn180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = v3 - 48;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1E7138400[v5])(&v6, v3 - 48);
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 48;
    }
    while (v4 != v2);
  }
  v1[1] = v2;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 result;

  v1 = *a1;
  v2 = **a1;
  if (*(_BYTE *)(v2 + 16))
    *(_BYTE *)(v2 + 16) = 0;
  v3 = v1[1];
  if (*(_BYTE *)(v3 + 16))
    *(_BYTE *)(v3 + 16) = 0;
  CGPathCloseSubpath(*(CGMutablePathRef *)v1[2]);
  v4 = (__n128 *)v1[4];
  result = *v4;
  *(__n128 *)v1[3] = *v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float64x2_t v8;
  CGPath *v9;
  float64_t v10;
  float64x2_t v11;
  float64_t *v12;
  float64x2_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(_QWORD *)(v3 + 48);
  if (*(_BYTE *)(v5 + 16))
    *(_BYTE *)(v5 + 16) = 0;
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    do
    {
      v8 = *(float64x2_t *)(v6 + 16 * v7);
      if (!*((_BYTE *)a2 + 32))
        v8 = vaddq_f64(v8, *(float64x2_t *)**(_QWORD **)(v3 + 64));
      v9 = **(CGPath ***)(v3 + 72);
      v10 = v8.f64[1];
      v13 = v8;
      if (v7)
      {
        CGPathAddLineToPoint(v9, 0, v8.f64[0], v8.f64[1]);
        v11 = v13;
      }
      else
      {
        CGPathMoveToPoint(v9, 0, v8.f64[0], v8.f64[1]);
        v11 = v13;
        v12 = *(float64_t **)(v3 + 80);
        *v12 = v13.f64[0];
        v12[1] = v10;
      }
      *(float64x2_t *)*(_QWORD *)(v3 + 56) = v11;
      ++v7;
      v6 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 4);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  double *v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 88);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(_QWORD *)(v3 + 96);
  if (*(_BYTE *)(v5 + 16))
    *(_BYTE *)(v5 + 16) = 0;
  v6 = *(double **)a2;
  v7 = *(double **)(a2 + 8);
  while (v6 != v7)
  {
    v8 = *v6;
    v9 = v6[1];
    if (!*(_BYTE *)(a2 + 32))
    {
      v10 = **(double ***)(v3 + 112);
      v8 = v8 + *v10;
      v9 = v9 + v10[1];
    }
    CGPathAddLineToPoint(**(CGMutablePathRef **)(v3 + 120), 0, v8, v9);
    v11 = *(double **)(v3 + 104);
    *v11 = v8;
    v11[1] = v9;
    v6 += 2;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  double *v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 128);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(_QWORD *)(v3 + 136);
  if (*(_BYTE *)(v5 + 16))
    *(_BYTE *)(v5 + 16) = 0;
  v6 = *(double **)a2;
  v7 = *(double **)(a2 + 8);
  if (*(double **)a2 != v7)
  {
    do
    {
      v8 = *v6;
      if (*(_BYTE *)(a2 + 32))
      {
        v9 = *(double *)(*(_QWORD *)(v3 + 144) + 8);
      }
      else
      {
        v10 = **(double ***)(v3 + 152);
        v8 = v8 + *v10;
        v9 = v10[1] + 0.0;
      }
      CGPathAddLineToPoint(**(CGMutablePathRef **)(v3 + 160), 0, v8, v9);
      v11 = *(double **)(v3 + 144);
      *v11 = v8;
      v11[1] = v9;
      ++v6;
    }
    while (v6 != v7);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  double *v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 168);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(_QWORD *)(v3 + 176);
  if (*(_BYTE *)(v5 + 16))
    *(_BYTE *)(v5 + 16) = 0;
  v6 = *(double **)a2;
  v7 = *(double **)(a2 + 8);
  if (*(double **)a2 != v7)
  {
    do
    {
      v8 = *v6;
      if (*(_BYTE *)(a2 + 32))
      {
        v9 = **(double **)(v3 + 184);
      }
      else
      {
        v10 = **(double ***)(v3 + 192);
        v9 = *v10 + 0.0;
        v8 = v8 + v10[1];
      }
      CGPathAddLineToPoint(**(CGMutablePathRef **)(v3 + 200), 0, v9, v8);
      v11 = *(double **)(v3 + 184);
      *v11 = v9;
      v11[1] = v8;
      ++v6;
    }
    while (v6 != v7);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  double *v18;
  double *v19;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 208);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(double **)(a2 + 8);
  if (*(double **)a2 != v5)
  {
    v6 = (double *)(*(_QWORD *)a2 + 24);
    do
    {
      v8 = *(v6 - 3);
      v9 = *(v6 - 2);
      v7 = v6 - 3;
      if (*(_BYTE *)(a2 + 32))
      {
        v10 = *(v6 - 1);
        v11 = *v6;
      }
      else
      {
        v12 = **(double ***)(v3 + 224);
        v13 = v12[1];
        v8 = v8 + *v12;
        v9 = v9 + v13;
        v10 = *v12 + *(v6 - 1);
        v11 = v13 + *v6;
      }
      v14 = *(_QWORD *)(v3 + 232);
      v15 = *(unsigned __int8 *)(v14 + 16);
      *(double *)v14 = v10;
      *(double *)(v14 + 8) = v11;
      if (!v15)
        *(_BYTE *)(v14 + 16) = 1;
      v16 = v6[1];
      v17 = v6[2];
      if (!*(_BYTE *)(a2 + 32))
      {
        v18 = **(double ***)(v3 + 224);
        v16 = v16 + *v18;
        v17 = v17 + v18[1];
      }
      CGPathAddCurveToPoint(**(CGMutablePathRef **)(v3 + 240), 0, v8, v9, v10, v11, v16, v17);
      v19 = *(double **)(v3 + 216);
      *v19 = v16;
      v19[1] = v17;
      v6 += 6;
    }
    while (v7 + 6 != v5);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  float64x2_t *v8;
  int v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double *v14;
  double *v15;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 248);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(float64x2_t **)a2;
  v6 = *(float64x2_t **)(a2 + 8);
  if (*(float64x2_t **)a2 != v6)
  {
    do
    {
      v8 = *(float64x2_t **)(v3 + 256);
      v7 = *(_QWORD *)(v3 + 264);
      v9 = *(unsigned __int8 *)(v7 + 16);
      if (*(_BYTE *)(v7 + 16))
        v10 = vaddq_f64(*v8, vsubq_f64(*v8, *(float64x2_t *)v7));
      else
        v10 = *v8;
      v11 = *v5;
      if (!*(_BYTE *)(a2 + 32))
        v11 = vaddq_f64(v11, *(float64x2_t *)**(_QWORD **)(v3 + 272));
      *(float64x2_t *)v7 = v11;
      if (!v9)
        *(_BYTE *)(v7 + 16) = 1;
      v12 = v5[1].f64[0];
      v13 = v5[1].f64[1];
      if (!*(_BYTE *)(a2 + 32))
      {
        v14 = **(double ***)(v3 + 272);
        v12 = v12 + *v14;
        v13 = v13 + v14[1];
      }
      CGPathAddCurveToPoint(**(CGMutablePathRef **)(v3 + 280), 0, v10.f64[0], v10.f64[1], v11.f64[0], v11.f64[1], v12, v13);
      v15 = *(double **)(v3 + 256);
      *v15 = v12;
      v15[1] = v13;
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 288);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(float64x2_t **)a2;
  v6 = *(float64x2_t **)(a2 + 8);
  if (*(float64x2_t **)a2 != v6)
  {
    do
    {
      v7 = *v5;
      if (!*(_BYTE *)(a2 + 32))
        v7 = vaddq_f64(v7, *(float64x2_t *)**(_QWORD **)(v3 + 304));
      v8 = *(_QWORD *)(v3 + 312);
      v9 = *(unsigned __int8 *)(v8 + 16);
      *(float64x2_t *)v8 = v7;
      if (!v9)
        *(_BYTE *)(v8 + 16) = 1;
      v10 = v5[1].f64[0];
      v11 = v5[1].f64[1];
      if (!*(_BYTE *)(a2 + 32))
      {
        v12 = **(double ***)(v3 + 304);
        v10 = v10 + *v12;
        v11 = v11 + v12[1];
      }
      CGPathAddQuadCurveToPoint(**(CGMutablePathRef **)(v3 + 320), 0, v7.f64[0], v7.f64[1], v10, v11);
      v13 = *(double **)(v3 + 296);
      *v13 = v10;
      v13[1] = v11;
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  double v10;
  double v11;
  double *v12;
  double *v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 328);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(double **)a2;
  v6 = *(double **)(a2 + 8);
  if (*(double **)a2 != v6)
  {
    do
    {
      v8 = *(float64x2_t **)(v3 + 336);
      v7 = *(_QWORD *)(v3 + 344);
      if (*(_BYTE *)(v7 + 16))
      {
        v9 = vaddq_f64(*v8, vsubq_f64(*v8, *(float64x2_t *)v7));
      }
      else
      {
        v9 = *v8;
        *(_BYTE *)(v7 + 16) = 1;
      }
      *(float64x2_t *)v7 = v9;
      v10 = *v5;
      v11 = v5[1];
      if (!*(_BYTE *)(a2 + 32))
      {
        v12 = **(double ***)(v3 + 352);
        v10 = v10 + *v12;
        v11 = v11 + v12[1];
      }
      CGPathAddQuadCurveToPoint(**(CGMutablePathRef **)(v3 + 360), 0, v9.f64[0], v9.f64[1], v10, v11);
      v13 = *(double **)(v3 + 336);
      *v13 = v10;
      v13[1] = v11;
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::parsePath(std::string const&)::$_0,SVG::parsePath(std::string const&)::$_1,SVG::parsePath(std::string const&)::$_2,SVG::parsePath(std::string const&)::$_3,SVG::parsePath(std::string const&)::$_4,SVG::parsePath(std::string const&)::$_5,SVG::parsePath(std::string const&)::$_6,SVG::parsePath(std::string const&)::$_7,SVG::parsePath(std::string const&)::$_8,SVG::parsePath(std::string const&)::$_9> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64_t v16;
  __double2 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v45;
  __int128 v46;
  double v47;
  __int128 v48;
  double v49;
  double v50;
  double v51;
  double v52;
  CGFloat startAngle;
  double v54;
  double angle;
  float64x2_t v56;
  float64x2_t v57;
  CGAffineTransform v58;
  CGAffineTransform m;
  CGAffineTransform v60;
  CGAffineTransform v61;
  CGAffineTransform v62;
  CGAffineTransform v63;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 368);
  if (*(_BYTE *)(v4 + 16))
    *(_BYTE *)(v4 + 16) = 0;
  v5 = *(_QWORD *)(v3 + 376);
  if (*(_BYTE *)(v5 + 16))
    *(_BYTE *)(v5 + 16) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *(float64x2_t *)*(_QWORD *)(v3 + 384);
    v9 = 0.5;
    do
    {
      v10 = *(float64x2_t *)(v6 + 32);
      if (!*((_BYTE *)a2 + 32))
        v10 = vaddq_f64(v10, *(float64x2_t *)**(_QWORD **)(v3 + 392));
      v11 = *(double *)v6;
      v57 = v10;
      if (*(double *)v6 == 0.0 || (v12 = *(double *)(v6 + 8), v12 == 0.0))
      {
        CGPathAddLineToPoint(**(CGMutablePathRef **)(v3 + 400), 0, v10.f64[0], v10.f64[1]);
      }
      else
      {
        v13 = fabs(v11);
        v14 = fabs(v12);
        v56 = v8;
        v15 = v9 * vsubq_f64(v8, v10).f64[0];
        v54 = v8.f64[1];
        v16 = (v8.f64[1] - v10.f64[1]) * v9;
        angle = fmod(*(long double *)(v6 + 16), 6.28318531);
        v17 = __sincos_stret(angle);
        v51 = v16 * v17.__sinval;
        v18 = v16 * v17.__sinval + v15 * v17.__cosval;
        v49 = v15;
        v50 = v16 * v17.__cosval;
        v19 = v16 * v17.__cosval - v15 * v17.__sinval;
        v20 = v18 * v18 / (v11 * v11) + v19 * v19 / (v12 * v12);
        v21 = sqrt(v20);
        if (v20 <= 1.0)
          v22 = 1.0;
        else
          v22 = v21;
        v23 = v14 * v22;
        v24 = v13 * v22;
        v25 = sqrt(fmax((v23 * (v24 * v24) * v23 - v19 * (v24 * v24) * v19 - v18 * (v23 * v23) * v18)/ (v18 * (v18 * (v23 * v23)) + v19 * (v24 * v24) * v19), 0.0));
        v26 = *(unsigned __int8 *)(v6 + 25);
        if (*(unsigned __int8 *)(v6 + 24) == v26)
          v25 = -v25;
        v27 = v19 * (v24 * v25) / v23;
        v28 = v18 * -(v23 * v25) / v24;
        v29 = (v18 - v27) / v24;
        v30 = (v19 - v28) / v23;
        v31 = sqrt(v30 * v30 + v29 * v29);
        v32 = (v29 + v30 * 0.0) / v31;
        v33 = 1.0;
        if (v32 <= 1.0)
          v33 = (v29 + v30 * 0.0) / v31;
        if (v32 >= -1.0)
          v34 = v33;
        else
          v34 = -1.0;
        v35 = acos(v34);
        if (v30 - v29 * 0.0 < 0.0)
          v35 = -v35;
        startAngle = v35;
        v36 = -(v51 + v49 * v17.__cosval);
        v52 = v27;
        v37 = (v36 - v27) / v24;
        v38 = (-(v50 + v49 * -v17.__sinval) - v28) / v23;
        v39 = (v30 * v38 + v29 * v37) / (v31 * sqrt(v38 * v38 + v37 * v37));
        v40 = 1.0;
        if (v39 <= 1.0)
          v40 = v39;
        if (v39 >= -1.0)
          v41 = v40;
        else
          v41 = -1.0;
        v42 = acos(v41);
        if (v29 * v38 - v30 * v37 < 0.0)
          v42 = -v42;
        if (v26 || v42 <= 0.0)
        {
          if (v42 >= 0.0 || v26 == 0)
            v43 = v42;
          else
            v43 = v42 + 6.28318531;
        }
        else
        {
          v43 = v42 + -6.28318531;
        }
        v9 = 0.5;
        v45 = 0.5 * vaddq_f64(v56, v57).f64[0] + v52 * v17.__cosval - v17.__sinval * v28;
        *(_QWORD *)&v46 = -1;
        *((_QWORD *)&v46 + 1) = -1;
        *(_OWORD *)&v63.c = v46;
        *(_OWORD *)&v63.tx = v46;
        v47 = (v54 + v57.f64[1]) * 0.5 + v17.__cosval * v28 + v52 * v17.__sinval;
        *(_OWORD *)&v63.a = v46;
        CGAffineTransformMakeRotation(&v62, angle);
        CGAffineTransformScale(&v63, &v62, v24, v23);
        v60 = v63;
        CGAffineTransformInvert(&v61, &v60);
        *(_QWORD *)&v48 = -1;
        *((_QWORD *)&v48 + 1) = -1;
        *(_OWORD *)&m.c = v48;
        *(_OWORD *)&m.tx = v48;
        v58 = v63;
        *(_OWORD *)&m.a = v48;
        CGAffineTransformTranslate(&m, &v58, v61.tx + v47 * v61.c + v61.a * v45, v61.ty + v47 * v61.d + v61.b * v45);
        CGPathAddArc(**(CGMutablePathRef **)(v3 + 400), &m, 0.0, 0.0, 1.0, startAngle, startAngle + v43, v43 < 0.0);
      }
      *(float64x2_t *)*(_QWORD *)(v3 + 384) = v57;
      v6 += 48;
      v8 = v57;
    }
    while (v6 != v7);
  }
}

void std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::variant<unsigned long,SVG::Moveto,SVG::Lineto,SVG::HorizontalLineto,SVG::VerticalLineto,SVG::Curveto,SVG::SmoothCurveto,SVG::QuadraticBezierCurveto,SVG::SmoothQuadraticBezierCurveto,SVG::EllipticalArc>>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

uint64_t SVG::PolyLineElement::PolyLineElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  __int128 v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v24[2];
  __int128 v25;
  void *__p;
  char *v27;
  char *v28;

  v5 = (_QWORD *)SVG::ShapeElement::ShapeElement(a1, a2, a3);
  *v5 = off_1E71375E0;
  v5[86] = 0;
  v5[88] = 0;
  v5[87] = 0;
  std::string::basic_string[abi:nn180100]<0>(v24, "points");
  std::string::basic_string[abi:nn180100]<0>(&__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)&__p);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v6)
      return a1;
  }
  else if (!v6)
  {
    return a1;
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v24 = v7;
  v25 = v7;
  SVG::consumeAlone<std::vector<double>>((uint64_t)(v6 + 64), (void (*)(void **__return_ptr, uint64_t, unint64_t))SVG::consumeCoordinates, (uint64_t)v24);
  if (BYTE8(v25))
  {
    v8 = 0;
    v9 = 0;
    __p = 0;
    v27 = 0;
    v28 = 0;
    v10 = (char *)v24[0];
    if ((void *)((char *)v24[1] - (char *)v24[0]) >= (void *)0x10)
    {
      v9 = 0;
      v11 = 0;
      do
      {
        v12 = &v10[16 * v11];
        v14 = *(_QWORD *)v12;
        v13 = *((_QWORD *)v12 + 1);
        if (v9 >= v28)
        {
          v15 = (char *)__p;
          v16 = (v9 - (_BYTE *)__p) >> 4;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            abort();
          v18 = v28 - (_BYTE *)__p;
          if ((v28 - (_BYTE *)__p) >> 3 > v17)
            v17 = v18 >> 3;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Length>>((uint64_t)&v28, v19);
            v15 = (char *)__p;
            v9 = v27;
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_QWORD *)v21 = v14;
          *((_QWORD *)v21 + 1) = v13;
          v22 = v21;
          if (v9 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v9 - 1);
              v22 -= 16;
              v9 -= 16;
            }
            while (v9 != v15);
            v15 = (char *)__p;
          }
          v9 = v21 + 16;
          __p = v22;
          v27 = v21 + 16;
          v28 = &v20[16 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v9 = v14;
          *((_QWORD *)v9 + 1) = v13;
          v9 += 16;
        }
        v27 = v9;
        ++v11;
        v10 = (char *)v24[0];
      }
      while (v11 < (unint64_t)(((char *)v24[1] - (char *)v24[0]) >> 3) >> 1);
      v8 = (char *)__p;
    }
    if ((void **)(a1 + 688) != &__p)
    {
      std::vector<CGPoint>::__assign_with_size[abi:nn180100]<CGPoint*,CGPoint*>((char *)(a1 + 688), v8, (uint64_t)v9, (v9 - v8) >> 4);
      v8 = (char *)__p;
    }
    if (v8)
    {
      v27 = v8;
      operator delete(v8);
    }
    if (BYTE8(v25) && v24[0])
    {
      v24[1] = v24[0];
      operator delete(v24[0]);
    }
  }
  return a1;
}

void SVG::PolyLineElement::path(const CGPoint **this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGPath **a3@<X8>)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  CGPathAddLines(Mutable, 0, this[86], this[87] - this[86]);
  *a3 = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    CFRelease(Mutable);
  }
}

float64_t SVG::PolyLineElement::boundingBox(SVG::PolyLineElement *this, CGRect a2)
{
  float64x2_t *v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v2 = (float64x2_t *)*((_QWORD *)this + 87);
  v3 = (float64x2_t *)*((_QWORD *)this + 86);
  if (v2 == v3)
  {
    v5.f64[0] = *(float64_t *)MEMORY[0x1E0C9D648];
  }
  else
  {
    v4 = *v3;
    v5 = *v3;
    do
    {
      v6 = *v3++;
      v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v5, v6), (int8x16_t)v6, (int8x16_t)v5);
      v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v6, v4), (int8x16_t)v6, (int8x16_t)v4);
    }
    while (v3 != v2);
  }
  return v5.f64[0];
}

void SVG::PolyLineElement::~PolyLineElement(SVG::PolyLineElement *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71375E0;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138628[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138640[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138658[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138640[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138658[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71375E0;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138628[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138640[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138658[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138640[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138658[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

char *std::vector<CGPoint>::__assign_with_size[abi:nn180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<SVG::Length>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

unint64_t SVG::consumeWsp(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  if (v2 <= a2
    || (v3 >= 0 ? (v4 = a1) : (v4 = (uint64_t *)*a1),
        (v5 = *((char *)v4 + a2), v6 = v5 > 0x20, v7 = (1 << v5) & 0x100002600, !v6) ? (v8 = v7 == 0) : (v8 = 1),
        v8))
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = (a2 + 1) & 0xFFFFFFFFFFFFFF00;
    v10 = (a2 + 1);
  }
  return v9 | v10;
}

void SVG::consumeFloatingPointConstant(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  __int128 v10;
  double v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  __int128 v18;
  unsigned __int8 *v19;
  double v20;
  uint64_t v21;
  char v22;
  char v23;
  double v24;
  char v25;
  _BYTE *v26;
  double v27;
  char v28;
  char v29;
  __int128 v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39[3];
  _BYTE __p[32];
  unint64_t v41;
  _BYTE v42[32];
  unint64_t v43;

  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v42 = v6;
  *(_OWORD *)&v42[16] = v6;
  SVG::consumeDigitSequence(a1, a2, (uint64_t)v42);
  if (!(_BYTE)v43)
  {
    v16 = SVG::consumeString<2ul>(".", a1, a2);
    if (v17)
    {
      v41 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v18;
      *(_OWORD *)&__p[16] = v18;
      SVG::consumeDigitSequence(a1, v16, (uint64_t)__p);
      if ((_BYTE)v41)
      {
        v19 = (unsigned __int8 *)operator new(1uLL);
        *v19 = 0;
        *(double *)&v21 = COERCE_DOUBLE(SVG::digitsToFloat(v19, v19 + 1, (uint64_t *)__p, v20));
        v23 = v22;
        operator delete(v19);
        if (v23)
        {
          v24 = *(double *)&v21;
          v9 = *(_QWORD *)&__p[24];
          if (*(_QWORD *)__p)
            operator delete(*(void **)__p);
          goto LABEL_25;
        }
        if (*(_QWORD *)__p)
          operator delete(*(void **)__p);
      }
    }
LABEL_18:
    v43 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v42 = v30;
    *(_OWORD *)&v42[16] = v30;
    SVG::consumeDigitSequence(a1, a2, (uint64_t)v42);
    if ((_BYTE)v43)
    {
      v31 = *(void **)v42;
      v32 = *(_QWORD *)&v42[8] - *(_QWORD *)v42;
      if (*(_QWORD *)&v42[8] != *(_QWORD *)v42)
      {
        v33 = 0;
        v34 = 0;
        if (v32 <= 1)
          v32 = 1;
        while (1)
        {
          v35 = *(unsigned __int8 *)(*(_QWORD *)v42 + v33) + 10 * v34;
          if (v35 < v34)
            goto LABEL_33;
          ++v33;
          v34 = v35;
          if (v32 == v33)
          {
            v36 = (double)v35;
            goto LABEL_29;
          }
        }
      }
      v36 = 0.0;
LABEL_29:
      memset(__p, 170, 24);
      SVG::consumeExponent((uint64_t)__p, (uint64_t)a1, *(unint64_t *)&v42[24]);
      if (__p[16])
      {
        v37 = __exp10((double)*(uint64_t *)__p);
        v38 = *(_QWORD *)&__p[8];
        *(double *)a3 = v36 * v37;
        *(_QWORD *)(a3 + 8) = v38;
        *(_BYTE *)(a3 + 16) = 1;
        if (v31)
          operator delete(v31);
        return;
      }
      if (v31)
LABEL_33:
        operator delete(v31);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v7 = SVG::consumeString<2ul>(".", a1, *(uint64_t *)&v42[24]);
  if (!v8)
  {
    v25 = 1;
    v9 = 0xAAAAAAAAAAAAAAAALL;
    v24 = NAN;
    v12 = *(void **)v42;
    if (!*(_QWORD *)v42)
      goto LABEL_17;
LABEL_16:
    operator delete(v12);
    goto LABEL_17;
  }
  v9 = v7;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v10;
  *(_OWORD *)&__p[16] = v10;
  SVG::consumeDigitSequence(a1, v7, (uint64_t)__p);
  if ((_BYTE)v41)
  {
    v12 = *(void **)v42;
    v13 = SVG::digitsToFloat(*(unsigned __int8 **)v42, *(unsigned __int8 **)&v42[8], (uint64_t *)__p, v11);
    if (v14)
    {
      v15 = v13;
      v9 = *(_QWORD *)&__p[24];
      if (*(_QWORD *)__p)
        operator delete(*(void **)__p);
LABEL_15:
      v25 = 0;
      v24 = *(double *)&v15;
      if (!v12)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (*(_QWORD *)__p)
      operator delete(*(void **)__p);
  }
  else
  {
    v26 = operator new(1uLL);
    *v26 = 0;
    v39[1] = (uint64_t)(v26 + 1);
    v39[2] = (uint64_t)(v26 + 1);
    v39[0] = (uint64_t)v26;
    v12 = *(void **)v42;
    *(double *)&v15 = COERCE_DOUBLE(SVG::digitsToFloat(*(unsigned __int8 **)v42, *(unsigned __int8 **)&v42[8], v39, v27));
    v29 = v28;
    operator delete(v26);
    if (v29)
      goto LABEL_15;
  }
  v25 = 1;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v24 = NAN;
  if (v12)
    goto LABEL_16;
LABEL_17:
  if ((v25 & 1) != 0)
    goto LABEL_18;
LABEL_25:
  memset(v42, 170, 24);
  SVG::consumeExponent((uint64_t)v42, (uint64_t)a1, v9);
  if (v42[16])
  {
    v24 = v24 * __exp10((double)*(uint64_t *)v42);
    v9 = *(_QWORD *)&v42[8];
  }
  *(double *)a3 = v24;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = 1;
}

void SVG::consumeExponent(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  char v9;
  __int128 v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *__p[2];
  __int128 v16;
  unint64_t v17;

  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 <= a3)
    goto LABEL_19;
  v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v6 = a2;
  if ((*(char *)(v6 + a3) | 0x20) != 0x65)
    goto LABEL_19;
  v7 = a3 + 1;
  if (v4 <= a3 + 1)
  {
    v9 = 1;
  }
  else
  {
    v8 = *(char *)(v6 + v7);
    v9 = 1;
    if (v8 != 43)
    {
      if (v8 != 45)
        goto LABEL_13;
      v9 = 0;
    }
    v7 = a3 + 2;
  }
LABEL_13:
  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v10;
  v16 = v10;
  SVG::consumeDigitSequence((uint64_t *)a2, v7, (uint64_t)__p);
  if (!(_BYTE)v17)
  {
LABEL_19:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v11 = SVG::digitsToInt(v9, (unsigned __int8 **)__p);
  if (!v12)
  {
    if (__p[0])
      operator delete(__p[0]);
    goto LABEL_19;
  }
  v13 = *((_QWORD *)&v16 + 1);
  v14 = __p[0];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = 1;
  if (v14)
    operator delete(v14);
}

void SVG::consumeDigitSequence(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t *v8;
  unsigned int v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = a1[1];
  if (v5 <= a2)
    goto LABEL_44;
  v8 = (uint64_t *)*a1;
  if (v4 >= 0)
    v8 = a1;
  v9 = *((unsigned __int8 *)v8 + a2) - 48;
  if (v9 >= 0xA)
  {
LABEL_44:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  else
  {
    v10 = operator new(1uLL);
    v11 = (unint64_t)v10;
    *v10 = v9;
    v12 = v10 + 1;
    v13 = a2 + 1;
    if (v5 <= a2 + 1)
      goto LABEL_40;
    v14 = (uint64_t *)*a1;
    if (v4 >= 0)
      v14 = a1;
    v15 = *((unsigned __int8 *)v14 + v13) - 48;
    if (v15 <= 9)
    {
      v16 = v10 + 1;
      while (v12 < v16)
      {
        *v12++ = v15;
LABEL_32:
        ++v13;
        v26 = *((unsigned __int8 *)a1 + 23);
        v27 = (char)v26;
        if ((v26 & 0x80u) != 0)
          v26 = a1[1];
        if (v26 > v13)
        {
          v28 = v27 >= 0 ? (uint64_t)a1 : *a1;
          v15 = *(unsigned __int8 *)(v28 + v13) - 48;
          if (v15 < 0xA)
            continue;
        }
        goto LABEL_39;
      }
      v17 = &v12[-v11];
      v18 = (uint64_t)&v12[-v11 + 1];
      if (v18 < 0)
        goto LABEL_47;
      if (2 * (uint64_t)&v16[-v11] > (unint64_t)v18)
        v18 = 2 * (_QWORD)&v16[-v11];
      if ((unint64_t)&v16[-v11] >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (unint64_t)operator new(v19);
      else
        v20 = 0;
      v21 = &v17[v20];
      v16 = (_BYTE *)(v20 + v19);
      v22 = &v17[v20];
      *v22 = v15;
      v23 = v22 + 1;
      if (v12 == (_BYTE *)v11)
      {
        v20 = (unint64_t)v21;
        v11 = (unint64_t)v12;
      }
      else
      {
        v24 = &v12[~v11];
        do
        {
          v25 = *--v12;
          (v24--)[v20] = v25;
        }
        while (v12 != (_BYTE *)v11);
        if (!v11)
          goto LABEL_31;
      }
      operator delete((void *)v11);
LABEL_31:
      v11 = v20;
      v12 = v23;
      goto LABEL_32;
    }
LABEL_39:
    if (v12 == (_BYTE *)v11)
    {
      v29 = 0;
      v30 = 0;
    }
    else
    {
LABEL_40:
      if ((uint64_t)&v12[-v11] < 0)
LABEL_47:
        abort();
      v29 = (char *)operator new((size_t)&v12[-v11]);
      v30 = &v12[(_QWORD)v29 - v11];
      memmove(v29, (const void *)v11, (size_t)&v12[-v11]);
    }
    *(_QWORD *)a3 = v29;
    *(_QWORD *)(a3 + 8) = v30;
    *(_QWORD *)(a3 + 16) = v30;
    *(_QWORD *)(a3 + 24) = v13;
    *(_BYTE *)(a3 + 32) = 1;
    if (v11)
      operator delete((void *)v11);
  }
}

void SVG::consumeIntegerConstant(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;

  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v4;
  v13 = v4;
  SVG::consumeDigitSequence(a1, a2, (uint64_t)&v12);
  if (!(_BYTE)v14)
  {
LABEL_11:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v5 = v12;
  v6 = *((_QWORD *)&v12 + 1) - v12;
  if (*((_QWORD *)&v12 + 1) != (_QWORD)v12)
  {
    v7 = 0;
    v8 = 0;
    if (v6 <= 1)
      v6 = 1;
    while (1)
    {
      v9 = v8;
      v8 = *(unsigned __int8 *)(v12 + v7) + 10 * v8;
      if (v8 < v9)
        break;
      if (v6 == ++v7)
      {
        v10 = *((_QWORD *)&v13 + 1);
        *(_QWORD *)a3 = v8;
        *(_QWORD *)(a3 + 8) = v10;
        *(_BYTE *)(a3 + 16) = 1;
        goto LABEL_9;
      }
    }
    operator delete((void *)v12);
    goto LABEL_11;
  }
  v11 = *((_QWORD *)&v13 + 1);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  if (*((_QWORD *)&v5 + 1))
LABEL_9:
    operator delete((void *)v5);
}

unint64_t SVG::consumeCommaWsp(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;

  v4 = SVG::consumeWsp(a1, a2);
  if (v5)
  {
    do
    {
      v6 = v4;
      v4 = SVG::consumeWsp(a1, v4);
    }
    while (v7);
    v8 = SVG::consumeString<2ul>(",", a1, v6);
    if (!v9)
      v8 = v6;
    do
    {
      v10 = v8;
      v8 = SVG::consumeWsp(a1, v8);
    }
    while (v11);
  }
  else
  {
    v12 = SVG::consumeString<2ul>(",", a1, a2);
    if (!v13)
    {
      v15 = 0;
      LOBYTE(v10) = 0;
      return v10 | v15;
    }
    do
    {
      v10 = v12;
      v12 = SVG::consumeWsp(a1, v12);
    }
    while (v14);
  }
  v15 = v10 & 0xFFFFFFFFFFFFFF00;
  return v10 | v15;
}

void SVG::consumePathNumber(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  int v10;
  double v11;
  unint64_t v12;
  _QWORD v13[3];
  double v14;
  unint64_t v15;
  unint64_t v16;

  v3 = a2;
  v6 = *(unsigned __int8 *)(a1 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v8 = 1.0;
  if (v6 > a2)
  {
    if (v7 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    v10 = *(char *)(v9 + a2);
    if (v10 == 45)
    {
      v3 = a2 + 1;
      v8 = -1.0;
    }
    else if (v10 == 43)
    {
      v3 = a2 + 1;
    }
  }
  v14 = NAN;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeFloatingPointConstant((uint64_t *)a1, v3, (uint64_t)&v14);
  if ((_BYTE)v16)
  {
    v11 = v8 * v14;
    v12 = v15;
LABEL_15:
    *(double *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  memset(v13, 170, sizeof(v13));
  SVG::consumeIntegerConstant((uint64_t *)a1, v3, (uint64_t)v13);
  if (LOBYTE(v13[2]))
  {
    v11 = v8 * (double)v13[0];
    v12 = v13[1];
    goto LABEL_15;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
}

void SVG::consumeCoordinatePair(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v14 = -1;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumePathNumber((uint64_t)a1, a2, (uint64_t)&v14);
  if ((_BYTE)v16
    && ((v5 = v15, v6 = SVG::consumeCommaWsp(a1, v15), v7) ? (v8 = v6) : (v8 = v5),
        v11 = -1,
        v12 = 0xAAAAAAAAAAAAAAAALL,
        v13 = 0xAAAAAAAAAAAAAAAALL,
        SVG::consumePathNumber((uint64_t)a1, v8, (uint64_t)&v11),
        (_BYTE)v13))
  {
    v9 = v11;
    v10 = v12;
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

void SVG::consumeAlone<std::vector<double>>(uint64_t a1@<X0>, void (*a2)(void **__return_ptr, uint64_t, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  const void *v14;
  char v15;
  int64_t v16;
  char *v17;
  int v18;
  void *__p[2];
  __int128 v20;
  unint64_t v21;

  v6 = 0;
  do
  {
    v7 = v6;
    v6 = SVG::consumeWsp((uint64_t *)a1, v6);
  }
  while (v8);
  v21 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v9;
  v20 = v9;
  a2(__p, a1, v7);
  if (!(_BYTE)v21)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  v10 = *((_QWORD *)&v20 + 1);
  do
  {
    v11 = v10;
    v10 = SVG::consumeWsp((uint64_t *)a1, v10);
  }
  while (v12);
  v13 = *(unsigned __int8 *)(a1 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a1 + 8);
  if (v11 == v13)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v14 = __p[0];
    v15 = 1;
    v16 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] != __p[0])
    {
      std::vector<double>::__vallocate[abi:nn180100]((_QWORD *)a3, v16 >> 3);
      v17 = *(char **)(a3 + 8);
      memmove(v17, v14, v16);
      *(_QWORD *)(a3 + 8) = &v17[v16];
      v18 = v21;
      *(_BYTE *)(a3 + 24) = 1;
      if (!v18)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v15 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v15;
LABEL_15:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void SVG::consumeCoordinates(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  SVG::consumeOneOrMoreGeneric<double>(a1, (void (*)(__int128 *__return_ptr))SVG::consumeCoordinate, (uint64_t (*)(uint64_t, _QWORD))SVG::consumeCommaWsp, a2);
}

void SVG::consumeInteger(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *__p[2];
  __int128 v15;
  unint64_t v16;

  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4 <= a2)
  {
    v8 = 1;
  }
  else
  {
    if (v5 >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    v7 = *(char *)(v6 + a2);
    v8 = 1;
    if (v7 != 43)
    {
      if (v7 != 45)
        goto LABEL_12;
      v8 = 0;
    }
    ++a2;
  }
LABEL_12:
  v16 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v9;
  v15 = v9;
  SVG::consumeDigitSequence((uint64_t *)a1, a2, (uint64_t)__p);
  if (!(_BYTE)v16)
  {
LABEL_18:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return;
  }
  v10 = SVG::digitsToInt(v8, (unsigned __int8 **)__p);
  if (!v11)
  {
    if (__p[0])
      operator delete(__p[0]);
    goto LABEL_18;
  }
  v12 = *((_QWORD *)&v15 + 1);
  v13 = __p[0];
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = 1;
  if (v13)
    operator delete(v13);
}

unint64_t SVG::digitsToInt(char a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v10;
  uint64_t v11;

  v3 = *a2;
  v2 = a2[1];
  v4 = v2 - *a2;
  if (v2 == *a2)
  {
    v5 = 0;
    if ((a1 & 1) == 0)
    {
LABEL_12:
      v5 = -(uint64_t)v5;
      v8 = v5 & 0xFFFFFFFFFFFFFF00;
      return v5 | v8;
    }
LABEL_10:
    v8 = v5 & 0x7FFFFFFFFFFFFF00;
  }
  else
  {
    v5 = 0;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      v6 = v5;
      v7 = *v3++;
      v5 = v7 + 10 * v5;
      if (v5 < v6)
        goto LABEL_8;
      --v4;
    }
    while (v4);
    if ((a1 & 1) != 0)
    {
      if ((v5 & 0x8000000000000000) == 0)
        goto LABEL_10;
LABEL_8:
      v8 = 0;
      LOBYTE(v5) = 0;
      return v5 | v8;
    }
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_12;
    v10 = v5 == 0x8000000000000000;
    LOBYTE(v5) = 0;
    v11 = v10;
    v8 = v11 << 63;
  }
  return v5 | v8;
}

void SVG::consumeNumber(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  size_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  char v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  _QWORD v37[3];
  _BYTE __p[32];
  unint64_t v39;

  v5 = *(char *)(a1 + 23);
  v6 = *(_QWORD *)(a1 + 8);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  v7 = 1.0;
  if (v6 <= a2)
  {
    v10 = a2;
  }
  else
  {
    v8 = *(_QWORD *)a1;
    if (v5 >= 0)
      v8 = a1;
    v9 = *(char *)(v8 + a2);
    if (v9 == 45)
    {
      v10 = a2 + 1;
      v7 = -1.0;
    }
    else if (v9 == 43)
    {
      v10 = a2 + 1;
    }
    else
    {
      v10 = a2;
    }
  }
  if (v6 <= v10)
  {
    v11 = 0;
    v17 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = v5 >> 31;
    while (1)
    {
      v15 = (v14 & 1) != 0 ? *(_QWORD *)a1 : a1;
      v16 = *(unsigned __int8 *)(v15 + v10) - 48;
      if (v16 > 9)
        break;
      if (v12 >= v13)
      {
        v18 = (uint64_t)&v12[-v11 + 1];
        if (v18 < 0)
          abort();
        if (2 * (uint64_t)&v13[-v11] > (unint64_t)v18)
          v18 = 2 * (_QWORD)&v13[-v11];
        if ((unint64_t)&v13[-v11] >= 0x3FFFFFFFFFFFFFFFLL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (unsigned __int8 *)operator new(v19);
        else
          v20 = 0;
        v21 = &v12[(_QWORD)v20 - v11];
        *v21 = v16;
        v17 = v21 + 1;
        if (v12 != (unsigned __int8 *)v11)
        {
          v22 = &v12[~v11];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v20] = v23;
          }
          while (v12 != (unsigned __int8 *)v11);
          v21 = v20;
        }
        v13 = &v20[v19];
        if (v11)
          operator delete((void *)v11);
        v11 = (unint64_t)v21;
      }
      else
      {
        *v12 = v16;
        v17 = v12 + 1;
      }
      ++v10;
      LOBYTE(v14) = *(char *)(a1 + 23) < 0;
      v24 = *(unsigned __int8 *)(a1 + 23);
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(a1 + 8);
      v12 = v17;
      if (v24 <= v10)
        goto LABEL_42;
    }
    v17 = v12;
  }
LABEL_42:
  v25 = SVG::consumeString<2ul>(".", (uint64_t *)a1, v10);
  if (v26)
  {
    v39 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v27;
    *(_OWORD *)&__p[16] = v27;
    SVG::consumeDigitSequence((uint64_t *)a1, v25, (uint64_t)__p);
    if ((_BYTE)v39)
    {
      *(double *)&v29 = COERCE_DOUBLE(SVG::digitsToFloat((unsigned __int8 *)v11, v17, (uint64_t *)__p, v28));
      if (v30)
      {
        v31 = *(double *)&v29;
        memset(v37, 170, sizeof(v37));
        v32 = *(_QWORD *)&__p[24];
        SVG::consumeExponent((uint64_t)v37, a1, *(unint64_t *)&__p[24]);
        v33 = v7 * v31;
        if (LOBYTE(v37[2]))
        {
          v33 = v33 * __exp10((double)v37[0]);
          v32 = v37[1];
        }
        *(double *)a3 = v33;
        *(_QWORD *)(a3 + 8) = v32;
        *(_BYTE *)(a3 + 16) = 1;
        if (*(_QWORD *)__p)
        {
          operator delete(*(void **)__p);
          if (!v11)
            return;
LABEL_57:
          operator delete((void *)v11);
          return;
        }
        goto LABEL_56;
      }
      if (*(_QWORD *)__p)
        operator delete(*(void **)__p);
    }
  }
  memset(__p, 170, 24);
  SVG::consumeInteger(a1, a2, (uint64_t)__p);
  if (!__p[16])
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v11)
      goto LABEL_57;
    return;
  }
  memset(v37, 170, sizeof(v37));
  v34 = *(_QWORD *)&__p[8];
  SVG::consumeExponent((uint64_t)v37, a1, *(unint64_t *)&__p[8]);
  v35 = (double)*(uint64_t *)__p;
  if (LOBYTE(v37[2]))
  {
    v35 = __exp10((double)v37[0]) * v35;
    v34 = v37[1];
  }
  *(double *)a3 = v35;
  *(_QWORD *)(a3 + 8) = v34;
  *(_BYTE *)(a3 + 16) = 1;
LABEL_56:
  if (v11)
    goto LABEL_57;
}

uint64_t SVG::digitsToFloat(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, double a4)
{
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t result;

  v5 = 0.0;
  v6 = 0.0;
  v7 = a2 - a1;
  if (a2 == a1)
  {
LABEL_7:
    v11 = *a3;
    if (a3[1] != *a3)
    {
      v12 = 0;
      v5 = 0.0;
      do
      {
        LOBYTE(a4) = *(_BYTE *)(v11 + v12);
        v13 = (double)*(unint64_t *)&a4;
        a4 = __exp10(-1.0 - (double)v12);
        v5 = v5 + v13 * a4;
        ++v12;
        v11 = *a3;
      }
      while (v12 < a3[1] - *a3);
    }
    *(double *)&result = v6 + v5;
  }
  else
  {
    v8 = 0;
    if (v7 <= 1)
      v7 = 1;
    while (1)
    {
      v9 = *a1++;
      v10 = v9 + 10 * v8;
      if (v10 < v8)
        break;
      v8 = v10;
      if (!--v7)
      {
        v6 = (double)v10;
        goto LABEL_7;
      }
    }
    *(double *)&result = 0.0;
  }
  return result;
}

uint64_t SVG::consumeNumberAlone(uint64_t a1)
{
  return SVG::consumeAlone<double>(a1, (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t))SVG::consumeNumber);
}

uint64_t SVG::consumeAlone<double>(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, unint64_t))
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a1, v4);
  }
  while (v6);
  v12 = -1;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  a2(&v12, a1, v5);
  if (!(_BYTE)v14)
    return 0;
  v7 = v13;
  do
  {
    v8 = v7;
    v7 = SVG::consumeWsp((uint64_t *)a1, v7);
  }
  while (v9);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  if (v8 == v10)
    return v12;
  else
    return 0;
}

void SVG::consumeLength(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;

  v12 = NAN;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeNumber((uint64_t)a1, a2, (uint64_t)&v12);
  if ((_BYTE)v14)
  {
    v5 = v13;
    v6 = SVG::consumeString<2ul>("%", a1, v13);
    if (v7)
    {
      *(double *)a3 = v12;
      *(_QWORD *)(a3 + 8) = 1;
      *(_QWORD *)(a3 + 16) = v6;
      *(_BYTE *)(a3 + 24) = 1;
    }
    else
    {
      v9 = NAN;
      v10 = 0xAAAAAAAAAAAAAAAALL;
      v11 = 0xAAAAAAAAAAAAAAAALL;
      SVG::consumeUnitSuffix((uint64_t)a1, v5, (uint64_t)&v9);
      if ((_BYTE)v11)
      {
        v8 = v10;
        *(double *)a3 = v12 * v9;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = v8;
      }
      else
      {
        *(double *)a3 = v12;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = v5;
      }
      *(_BYTE *)(a3 + 24) = 1;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
}

unint64_t SVG::consumeUnitSuffix@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  result = SVG::consumeString<3ul>((uint64_t)"px", a1, a2);
  if (v7)
  {
    v8 = 0x3FF0000000000000;
  }
  else
  {
    result = SVG::consumeString<3ul>((uint64_t)"in", a1, a2);
    if (v9)
    {
      v8 = 0x4058000000000000;
    }
    else
    {
      result = SVG::consumeString<3ul>((uint64_t)"cm", a1, a2);
      if (v10)
      {
        v8 = 0x4042E5CB972E5CB9;
      }
      else
      {
        result = SVG::consumeString<3ul>((uint64_t)"mm", a1, a2);
        if (v11)
        {
          v8 = 0x400E3C78F1E3C78ELL;
        }
        else
        {
          result = SVG::consumeString<3ul>((uint64_t)"pt", a1, a2);
          if (v12)
          {
            v8 = 0x3FF5555555555555;
          }
          else
          {
            result = SVG::consumeString<3ul>((uint64_t)"pc", a1, a2);
            if (!v13)
            {
              v14 = 0;
              *(_BYTE *)a3 = 0;
              goto LABEL_14;
            }
            v8 = 0x4030000000000000;
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = result;
  v14 = 1;
LABEL_14:
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

void SVG::consumeCSSLength(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;

  v10 = NAN;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeNumber(a1, a2, (uint64_t)&v10);
  if ((_BYTE)v12)
  {
    v7 = NAN;
    v8 = 0xAAAAAAAAAAAAAAAALL;
    v9 = 0xAAAAAAAAAAAAAAAALL;
    v5 = v11;
    SVG::consumeUnitSuffix(a1, v11, (uint64_t)&v7);
    if ((_BYTE)v9)
    {
      v6 = v8;
      *(double *)a3 = v10 * v7;
      *(_QWORD *)(a3 + 8) = v6;
    }
    else
    {
      *(double *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v5;
    }
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
}

_QWORD *SVG::consumeAlone<SVG::Length>@<X0>(uint64_t a1@<X0>, _QWORD *(*a2)(__int128 *__return_ptr, uint64_t, unint64_t)@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  _QWORD *result;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;

  v6 = 0;
  do
  {
    v7 = v6;
    v6 = SVG::consumeWsp((uint64_t *)a1, v6);
  }
  while (v8);
  *(_QWORD *)&v13 = -1;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  result = a2(&v13, a1, v7);
  if (!(_BYTE)v15)
    goto LABEL_10;
  result = (_QWORD *)v14;
  do
  {
    v10 = result;
    result = (_QWORD *)SVG::consumeWsp((uint64_t *)a1, (unint64_t)result);
  }
  while (v11);
  v12 = (_QWORD *)*(unsigned __int8 *)(a1 + 23);
  if ((char)v12 < 0)
    v12 = *(_QWORD **)(a1 + 8);
  if (v10 == v12)
  {
    *(_OWORD *)a3 = v13;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
LABEL_10:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

unint64_t SVG::consumeString<3ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  char i;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = a3 + 2;
  if (v3 >= a3 + 2)
  {
    v10 = 0;
    for (i = 1; ; i = 0)
    {
      v12 = i;
      v13 = v10 + a3;
      v14 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      v15 = *(char *)(v14 + v13);
      if (__tolower(*(char *)(a1 + v10)) != v15)
      {
        v16 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
        v17 = *(char *)(v16 + v13);
        if (__toupper(*(char *)(a1 + v10)) != v17)
          break;
      }
      v10 = 1;
      if ((v12 & 1) == 0)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFF00;
        v5 = v4;
        return v6 | v5;
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | v5;
}

unint64_t SVG::QualifiedNameHash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  char v13;
  char v14;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v4 = v3;
  }
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v13, (uint64_t *)a2, v4);
  v8 = *(uint64_t **)(v2 + 24);
  v7 = v2 + 24;
  v6 = v8;
  v9 = *(char *)(v7 + 23);
  if (v9 >= 0)
    v10 = (uint64_t *)v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = *(_QWORD *)(v7 + 8);
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v14, v10, v11) ^ v5;
}

uint64_t SVG::QualifiedNamePredicate::operator()(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  uint64_t result;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = a2[47];
  if ((v12 & 0x80u) == 0)
    v13 = a2[47];
  else
    v13 = *((_QWORD *)a2 + 4);
  v14 = a3[47];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a3 + 4);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a2 + 24);
  v19 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v18 = a3 + 24;
  v17 = v19;
  if (v15 >= 0)
    v20 = v18;
  else
    v20 = v17;
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v20, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v21 = v12 - 1;
  do
  {
    v23 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

uint64_t SVG::Element::Element(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::string *v5;
  unsigned __int8 *v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  *(_QWORD *)a1 = &off_1E71378E0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = a2;
  std::string::basic_string[abi:nn180100]<0>(v10, "id");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v10, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (!v6)
      return a1;
    goto LABEL_5;
  }
  if (v6)
LABEL_5:
    std::string::operator=(v5, (const std::string *)(v6 + 64));
  return a1;
}

unsigned __int8 *SVG::Element::findInAttributeMap(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  unsigned __int8 *v6;
  void *v8[2];
  _BYTE __p[32];

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v5;
  *(_OWORD *)&__p[16] = v5;
  *(_OWORD *)v8 = v5;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a3;
    *(_QWORD *)__p = *(_QWORD *)(a3 + 16);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__p[8] = *(_OWORD *)a2;
    *(_QWORD *)&__p[24] = *(_QWORD *)(a2 + 16);
  }
  v6 = std::__hash_table<std::__hash_value_type<SVG::QualifiedName,std::string>,std::__unordered_map_hasher<SVG::QualifiedName,std::__hash_value_type<SVG::QualifiedName,std::string>,SVG::QualifiedNameHash,SVG::QualifiedNamePredicate,true>,std::__unordered_map_equal<SVG::QualifiedName,std::__hash_value_type<SVG::QualifiedName,std::string>,SVG::QualifiedNamePredicate,SVG::QualifiedNameHash,true>,std::allocator<std::__hash_value_type<SVG::QualifiedName,std::string>>>::find<SVG::QualifiedName>(a1, (unsigned __int8 *)v8);
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if ((__p[7] & 0x80000000) != 0)
    operator delete(v8[0]);
  return v6;
}

void SVG::Element::~Element(void **this)
{
  void **v2;

  *this = &off_1E71378E0;
  v2 = this + 4;
  std::vector<std::unique_ptr<SVG::Element>>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  SVG::Element::~Element(this);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t SVG::Element::appendChild(int64x2_t *a1, uint64_t *a2)
{
  uint64_t i64;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;

  v6 = a1[3].u64[0];
  i64 = (uint64_t)a1[3].i64;
  v5 = v6;
  v7 = *(_QWORD **)(i64 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = a1[2].i64[0];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v28 = i64;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(i64, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    v27 = v17;
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)v16 = v18;
    v9 = v16 + 8;
    v26.i64[1] = (uint64_t)(v16 + 8);
    v20 = (_QWORD *)a1[2].i64[0];
    v19 = (_QWORD *)a1[2].i64[1];
    if (v19 == v20)
    {
      v22 = vdupq_n_s64((unint64_t)v19);
    }
    else
    {
      do
      {
        v21 = *--v19;
        *v19 = 0;
        *((_QWORD *)v16 - 1) = v21;
        v16 -= 8;
      }
      while (v19 != v20);
      v22 = a1[2];
      v9 = (_QWORD *)v26.i64[1];
      v17 = v27;
    }
    a1[2].i64[0] = (uint64_t)v16;
    a1[2].i64[1] = (uint64_t)v9;
    v26 = v22;
    v23 = a1[3].i64[0];
    a1[3].i64[0] = (uint64_t)v17;
    v27 = (char *)v23;
    v25 = v22.i64[0];
    std::__split_buffer<std::unique_ptr<SVG::Element>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v7 = v8;
    v9 = v7 + 1;
  }
  a1[2].i64[1] = (uint64_t)v9;
  return 1;
}

void std::vector<std::unique_ptr<SVG::Element>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<SVG::Element>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<SVG::QualifiedName,std::string>,std::__unordered_map_hasher<SVG::QualifiedName,std::__hash_value_type<SVG::QualifiedName,std::string>,SVG::QualifiedNameHash,SVG::QualifiedNamePredicate,true>,std::__unordered_map_equal<SVG::QualifiedName,std::__hash_value_type<SVG::QualifiedName,std::string>,SVG::QualifiedNamePredicate,SVG::QualifiedNameHash,true>,std::allocator<std::__hash_value_type<SVG::QualifiedName,std::string>>>::find<SVG::QualifiedName>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = SVG::QualifiedNameHash::operator()((uint64_t)a1, (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      v4 = SVG::QualifiedNamePredicate::operator()(v4, i + 16, a2);
      if ((v4 & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

_OWORD *SVG::CircleElement::CircleElement(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void *__p[2];
  char v11;
  void *v12[2];
  unint64_t v13;

  v5 = SVG::ShapeElement::ShapeElement((uint64_t)a1, a2, a3);
  *(_QWORD *)v5 = off_1E7137438;
  *(_QWORD *)(v5 + 688) = 0;
  *(_DWORD *)(v5 + 696) = 0;
  *(_QWORD *)(v5 + 704) = 0;
  *(_DWORD *)(v5 + 712) = 0;
  *(_QWORD *)(v5 + 720) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  std::string::basic_string[abi:nn180100]<0>(v12, "cx");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
  {
    operator delete(v12[0]);
    if (!v6)
      goto LABEL_9;
  }
  else if (!v6)
  {
    goto LABEL_9;
  }
  v12[0] = (void *)-1;
  v12[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v12);
  if ((_BYTE)v13)
    a1[43] = *(_OWORD *)v12;
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v12, "cy");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v7 = SVG::Element::findInAttributeMap(a3, (uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
  {
    operator delete(v12[0]);
    if (!v7)
      goto LABEL_17;
  }
  else if (!v7)
  {
    goto LABEL_17;
  }
  v12[0] = (void *)-1;
  v12[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v7 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v12);
  if ((_BYTE)v13)
    a1[44] = *(_OWORD *)v12;
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v12, "r");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
  {
    operator delete(v12[0]);
    if (!v8)
      return a1;
  }
  else if (!v8)
  {
    return a1;
  }
  v12[0] = (void *)-1;
  v12[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v12);
  if ((_BYTE)v13)
    a1[45] = *(_OWORD *)v12;
  return a1;
}

void SVG::CircleElement::path(SVG::CircleElement *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGPath **a3@<X8>)
{
  double height;
  double width;
  double v7;
  double v8;
  double v9;
  double v10;
  CGPath *Mutable;
  CGRect v12;

  height = a2.size.height;
  width = a2.size.width;
  v7 = SVG::Length::computeValue((SVG::CircleElement *)((char *)this + 688), a2.size.width);
  v8 = SVG::Length::computeValue((SVG::CircleElement *)((char *)this + 704), height);
  v9 = SVG::Length::computeValue((SVG::CircleElement *)((char *)this + 720), sqrt(height * height + width * width) / 1.41421356);
  if (v9 <= 0.0)
  {
    *a3 = 0;
  }
  else
  {
    v10 = v9;
    Mutable = CGPathCreateMutable();
    v12.origin.x = v7 - v10;
    v12.origin.y = v8 - v10;
    v12.size.width = v10 + v10;
    v12.size.height = v10 + v10;
    CGPathAddEllipseInRect(Mutable, 0, v12);
    *a3 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      CFRelease(Mutable);
    }
  }
}

double SVG::CircleElement::boundingBox(SVG::CircleElement *this, CGRect a2)
{
  double height;
  double width;
  double v5;

  height = a2.size.height;
  width = a2.size.width;
  v5 = SVG::Length::computeValue((SVG::CircleElement *)((char *)this + 688), a2.size.width);
  SVG::Length::computeValue((SVG::CircleElement *)((char *)this + 704), height);
  return v5
       - SVG::Length::computeValue((SVG::CircleElement *)((char *)this + 720), sqrt(height * height + width * width) / 1.41421356);
}

void SVG::CircleElement::~CircleElement(SVG::CircleElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138670[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138688[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71386A0[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138688[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71386A0[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138670[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138688[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71386A0[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138688[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71386A0[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

void SVG::LengthRect::computeRect(SVG::LengthRect *this, CGRect a2)
{
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  __int128 v7;
  __int128 v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  __int128 v14;
  __int128 v15;
  CGAffineTransform v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGRect v20;
  CGRect v21;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  v18 = v7;
  v19 = v7;
  v17 = v7;
  SVG::unitTransform((CGAffineTransform *)*(unsigned int *)this, (uint64_t)&v17, x, a2.origin.y, a2.size.width, a2.size.height);
  if (*(_DWORD *)this == 1)
  {
    width = 1.0;
    x = 0.0;
    y = 0.0;
    height = 1.0;
  }
  v14 = v18;
  v15 = v17;
  v8 = v19;
  v20.origin.x = x;
  v20.origin.y = y;
  v20.size.width = width;
  v20.size.height = height;
  SVG::LengthRect::computeOrigin(this, v20);
  v10 = v9;
  v12 = v11;
  v13 = SVG::Length::computeValue((SVG::LengthRect *)((char *)this + 40), width);
  v21.size.height = SVG::Length::computeValue((SVG::LengthRect *)((char *)this + 56), height);
  *(_OWORD *)&v16.a = v15;
  *(_OWORD *)&v16.c = v14;
  *(_OWORD *)&v16.tx = v8;
  v21.origin.x = v10;
  v21.origin.y = v12;
  v21.size.width = v13;
  CGRectApplyAffineTransform(v21, &v16);
}

void SVG::LengthRect::computePatternRecordingRect(SVG::LengthRect *this, CGRect a2)
{
  double height;
  double width;
  __int128 v5;
  SVG::Length *v6;
  SVG::Length *v7;
  int v8;
  BOOL v9;
  double v10;
  __int128 v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  __int128 v15;
  __int128 v16;
  CGAffineTransform v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGRect v21;

  height = a2.size.height;
  width = a2.size.width;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v19 = v5;
  v20 = v5;
  v18 = v5;
  v6 = (SVG::LengthRect *)((char *)this + 40);
  SVG::unitTransform((CGAffineTransform *)*(unsigned int *)this, (uint64_t)&v18, a2.origin.x, a2.origin.y, width, a2.size.height);
  v8 = *(_DWORD *)this;
  v7 = (SVG::LengthRect *)((char *)this + 56);
  v9 = v8 == 1;
  if (v8 == 1)
    v10 = 1.0;
  else
    v10 = width;
  if (v9)
    height = 1.0;
  v15 = v19;
  v16 = v18;
  v11 = v20;
  v12 = *MEMORY[0x1E0C9D538];
  v13 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v14 = SVG::Length::computeValue(v6, v10);
  v21.size.height = SVG::Length::computeValue(v7, height);
  *(_OWORD *)&v17.a = v16;
  *(_OWORD *)&v17.c = v15;
  *(_OWORD *)&v17.tx = v11;
  v21.origin.x = v12;
  v21.origin.y = v13;
  v21.size.width = v14;
  CGRectApplyAffineTransform(v21, &v17);
}

uint64_t SVG::calculateLinearQuanta(SVG *this, CGPoint a2, CGSize a3, CGRect a4)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  CGFloat v19;
  double MaxX;
  double v21;
  double v22;
  double v23;
  double v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v8 = a3.width;
  v23 = a3.height;
  v24 = a2.y;
  v19 = a4.origin.x - a2.x;
  v21 = a2.x;
  v9 = a3.height * (a4.origin.y - a2.y);
  v10 = a3.height * a3.height + v8 * v8;
  v22 = (v9 + (a4.origin.x - a2.x) * a3.width) / v10;
  v11 = (v9 + (CGRectGetMaxX(a4) - a2.x) * a3.width) / v10;
  v25.origin.x = x;
  v25.origin.y = y;
  v25.size.width = width;
  v25.size.height = height;
  v12 = (v23 * (CGRectGetMaxY(v25) - v24) + v19 * v8) / v10;
  v26.origin.x = x;
  v26.origin.y = y;
  v26.size.width = width;
  v26.size.height = height;
  MaxX = CGRectGetMaxX(v26);
  v27.origin.x = x;
  v27.origin.y = y;
  v27.size.width = width;
  v27.size.height = height;
  v15 = (v23 * (CGRectGetMaxY(v27) - v24) + (MaxX - v21) * v8) / v10;
  v16 = v22;
  if (v11 >= v22)
    v17 = v22;
  else
    v17 = v11;
  if (v12 < v17)
    v17 = v12;
  if (v15 < v17)
    v17 = v15;
  if (v22 < v11)
    v16 = v11;
  if (v16 < v12)
    v16 = v12;
  if (v16 >= v15)
    v15 = v16;
  LODWORD(v13) = vcvtmd_s64_f64(v17);
  LODWORD(v14) = vcvtpd_s64_f64(v15);
  return v13 | (v14 << 32);
}

uint64_t SVG::calculateRadialQuanta(SVG *this, CGPoint a2, double a3, CGRect a4)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat MaxX;
  double v13;
  CGFloat MaxY;
  double v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  CGFloat v23;
  double v24;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v9 = a2.x;
  v23 = a2.x - a4.origin.x;
  v10 = (a2.y - a4.origin.y) * (a2.y - a4.origin.y);
  v11 = sqrt(v10 + v23 * v23) / a3;
  MaxX = CGRectGetMaxX(a4);
  v13 = sqrt(v10 + (v9 - MaxX) * (v9 - MaxX)) / a3;
  v26.origin.x = x;
  v26.origin.y = y;
  v26.size.width = width;
  v26.size.height = height;
  MaxY = CGRectGetMaxY(v26);
  v15 = sqrt((a2.y - MaxY) * (a2.y - MaxY) + v23 * v23) / a3;
  v27.origin.x = x;
  v27.origin.y = y;
  v27.size.width = width;
  v27.size.height = height;
  v24 = CGRectGetMaxX(v27);
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  v18 = CGRectGetMaxY(v28);
  v19 = sqrt((a2.y - v18) * (a2.y - v18) + (a2.x - v24) * (a2.x - v24)) / a3;
  if (v13 >= v11)
    v20 = v11;
  else
    v20 = v13;
  if (v15 < v20)
    v20 = v15;
  if (v19 < v20)
    v20 = v19;
  if (v11 >= v13)
    v21 = v11;
  else
    v21 = v13;
  if (v21 < v15)
    v21 = v15;
  if (v21 >= v19)
    v19 = v21;
  LODWORD(v16) = vcvtmd_s64_f64(v20);
  LODWORD(v17) = vcvtpd_s64_f64(v19);
  return v16 | (v17 << 32);
}

_OWORD *SVG::EllipseElement::EllipseElement(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  unint64_t v14;

  v5 = SVG::ShapeElement::ShapeElement((uint64_t)a1, a2, a3);
  *(_QWORD *)v5 = off_1E7137478;
  *(_QWORD *)(v5 + 688) = 0;
  *(_DWORD *)(v5 + 696) = 0;
  *(_QWORD *)(v5 + 704) = 0;
  *(_DWORD *)(v5 + 712) = 0;
  *(_QWORD *)(v5 + 720) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  *(_QWORD *)(v5 + 736) = 0;
  *(_DWORD *)(v5 + 744) = 0;
  std::string::basic_string[abi:nn180100]<0>(v13, "cx");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v6)
      goto LABEL_9;
  }
  else if (!v6)
  {
    goto LABEL_9;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[43] = *(_OWORD *)v13;
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v13, "cy");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v7 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v7)
      goto LABEL_17;
  }
  else if (!v7)
  {
    goto LABEL_17;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v7 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[44] = *(_OWORD *)v13;
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v13, "rx");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v8)
      goto LABEL_25;
  }
  else if (!v8)
  {
    goto LABEL_25;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[45] = *(_OWORD *)v13;
LABEL_25:
  std::string::basic_string[abi:nn180100]<0>(v13, "ry");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v9 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v9)
      return a1;
  }
  else if (!v9)
  {
    return a1;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v9 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[46] = *(_OWORD *)v13;
  return a1;
}

void SVG::EllipseElement::path(SVG::EllipseElement *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGPath **a3@<X8>)
{
  double height;
  double width;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGPath *Mutable;
  CGRect v13;

  height = a2.size.height;
  width = a2.size.width;
  v7 = SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 688), a2.size.width);
  v8 = SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 704), height);
  v9 = SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 720), width);
  v10 = SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 736), height);
  if (v9 <= 0.0 || (v11 = v10, v10 <= 0.0))
  {
    *a3 = 0;
  }
  else
  {
    Mutable = CGPathCreateMutable();
    v13.origin.x = v7 - v9;
    v13.origin.y = v8 - v11;
    v13.size.width = v9 + v9;
    v13.size.height = v11 + v11;
    CGPathAddEllipseInRect(Mutable, 0, v13);
    *a3 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      CFRelease(Mutable);
    }
  }
}

double SVG::EllipseElement::boundingBox(SVG::EllipseElement *this, CGRect a2)
{
  double height;
  double width;
  double v5;
  double v6;

  height = a2.size.height;
  width = a2.size.width;
  v5 = SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 688), a2.size.width);
  SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 704), height);
  v6 = SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 720), width);
  SVG::Length::computeValue((SVG::EllipseElement *)((char *)this + 736), height);
  return v5 - v6;
}

void SVG::EllipseElement::~EllipseElement(SVG::EllipseElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E71386B8[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E71386D0[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71386E8[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E71386D0[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71386E8[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E71386B8[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E71386D0[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71386E8[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E71386D0[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71386E8[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::LinearGradientElement::LinearGradientElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  void *__p[2];
  char v16;
  void *v17[2];
  unint64_t v18;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)a1 = off_1E71376F8;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  SVG::GradientElement::parseAttributes((_QWORD *)a1, a3);
  std::string::basic_string[abi:nn180100]<0>(v17, "x1");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (v6)
  {
    v17[0] = (void *)-1;
    v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
    if ((_BYTE)v18)
    {
      v7 = *(unsigned __int8 *)(a1 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)v17;
      if (!v7)
        *(_BYTE *)(a1 + 736) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v17, "y1");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (v8)
  {
    v17[0] = (void *)-1;
    v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
    if ((_BYTE)v18)
    {
      v9 = *(unsigned __int8 *)(a1 + 760);
      *(_OWORD *)(a1 + 744) = *(_OWORD *)v17;
      if (!v9)
        *(_BYTE *)(a1 + 760) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v17, "x2");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v10 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (v10)
  {
    v17[0] = (void *)-1;
    v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v10 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
    if ((_BYTE)v18)
    {
      v11 = *(unsigned __int8 *)(a1 + 784);
      *(_OWORD *)(a1 + 768) = *(_OWORD *)v17;
      if (!v11)
        *(_BYTE *)(a1 + 784) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v17, "y2");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v12 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  if (v12)
  {
    v17[0] = (void *)-1;
    v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v12 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
    if ((_BYTE)v18)
    {
      v13 = *(unsigned __int8 *)(a1 + 808);
      *(_OWORD *)(a1 + 792) = *(_OWORD *)v17;
      if (!v13)
        *(_BYTE *)(a1 + 808) = 1;
    }
  }
  return a1;
}

void SVG::LinearGradientElement::specifiedLinearState(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *j;
  unint64_t v33;
  _QWORD *v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  char *v53;
  _BYTE *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[64];
  _BYTE v72[32];
  __int128 v73;
  _BYTE v74[32];
  __int128 v75;
  uint64_t v76;
  _BYTE v77[64];
  unint64_t v78;

  *(_QWORD *)(a3 + 160) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a3 + 96) = xmmword_1B9B92348;
  *(_OWORD *)(a3 + 112) = unk_1B9B92358;
  *(_OWORD *)(a3 + 128) = xmmword_1B9B92368;
  *(_OWORD *)(a3 + 144) = unk_1B9B92378;
  *(_OWORD *)(a3 + 32) = xmmword_1B9B92308;
  *(_OWORD *)(a3 + 48) = unk_1B9B92318;
  *(_OWORD *)(a3 + 64) = xmmword_1B9B92328;
  *(_OWORD *)(a3 + 80) = unk_1B9B92338;
  *(_OWORD *)a3 = xmmword_1B9B922E8;
  *(_OWORD *)(a3 + 16) = unk_1B9B922F8;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v68 = (_OWORD *)(a3 + 8);
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 68) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  v70 = a3 + 72;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  v69 = a3 + 120;
  *(_BYTE *)(a3 + 136) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  v6 = (char *)operator new(8uLL);
  *(_QWORD *)v6 = a1;
  v7 = v6 + 8;
  memset(v71, 0, 32);
  *(_QWORD *)&v71[32] = 0xAAAAAAAA3F800000;
  v8 = 0x9DDFEA08EB382D69 * (((((a1 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a1));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = operator new(0x18uLL);
  v11[1] = v10;
  v11[2] = a1;
  std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>((uint64_t)v71, 1uLL);
  v12 = *(_QWORD *)&v71[8];
  v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v71[8]);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v71[8])
      v10 %= *(_QWORD *)&v71[8];
  }
  else
  {
    v10 &= *(_QWORD *)&v71[8] - 1;
  }
  v14 = *(_QWORD *)v71;
  v15 = *(_QWORD **)(*(_QWORD *)v71 + 8 * v10);
  if (v15)
  {
    *v11 = *v15;
  }
  else
  {
    *v11 = *(_QWORD *)&v71[16];
    *(_QWORD *)&v71[16] = v11;
    *(_QWORD *)(v14 + 8 * v10) = &v71[16];
    if (!*v11)
      goto LABEL_14;
    v16 = *(_QWORD *)(*v11 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v16 >= v12)
        v16 %= v12;
    }
    else
    {
      v16 &= v12 - 1;
    }
    v15 = (_QWORD *)(*(_QWORD *)v71 + 8 * v16);
  }
  *v15 = v11;
LABEL_14:
  ++*(_QWORD *)&v71[24];
  *(_QWORD *)v77 = *(_QWORD *)(*(_QWORD *)v6 + 640);
  if (*(_QWORD *)v77)
  {
    v17 = v6 + 8;
    while (1)
    {
      v18 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a2, v77);
      if (!v18)
      {
        v43 = v17;
        goto LABEL_95;
      }
      if (!v19)
        goto LABEL_96;
      v20 = v19;
      v21 = *(_QWORD *)&v71[8];
      v22 = 0x9DDFEA08EB382D69 * (((8 * v19) + 8) ^ HIDWORD(v19));
      v23 = 0x9DDFEA08EB382D69 * (HIDWORD(v19) ^ (v22 >> 47) ^ v22);
      v24 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
      if (*(_QWORD *)&v71[8])
      {
        v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v71[8]);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v26 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
          if (v24 >= *(_QWORD *)&v71[8])
            v26 = v24 % *(_QWORD *)&v71[8];
        }
        else
        {
          v26 = (*(_QWORD *)&v71[8] - 1) & v24;
        }
        v28 = *(_QWORD **)(*(_QWORD *)v71 + 8 * v26);
        if (v28)
        {
          for (i = (_QWORD *)*v28; i; i = (_QWORD *)*i)
          {
            v30 = i[1];
            if (v30 == v24)
            {
              if (i[2] == v19)
                goto LABEL_96;
            }
            else
            {
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&v71[8])
                  v30 %= *(_QWORD *)&v71[8];
              }
              else
              {
                v30 &= *(_QWORD *)&v71[8] - 1;
              }
              if (v30 != v26)
                break;
            }
          }
        }
        if (v25.u32[0] > 1uLL)
        {
          v27 = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
          if (v24 >= *(_QWORD *)&v71[8])
            v27 = v24 % *(_QWORD *)&v71[8];
        }
        else
        {
          v27 = (*(_QWORD *)&v71[8] - 1) & v24;
        }
        v31 = *(_QWORD **)(*(_QWORD *)v71 + 8 * v27);
        if (v31)
        {
          for (j = (_QWORD *)*v31; j; j = (_QWORD *)*j)
          {
            v33 = j[1];
            if (v33 == v24)
            {
              if (j[2] == v19)
                goto LABEL_72;
            }
            else
            {
              if (v25.u32[0] > 1uLL)
              {
                if (v33 >= *(_QWORD *)&v71[8])
                  v33 %= *(_QWORD *)&v71[8];
              }
              else
              {
                v33 &= *(_QWORD *)&v71[8] - 1;
              }
              if (v33 != v27)
                break;
            }
          }
        }
      }
      else
      {
        v27 = 0xAAAAAAAAAAAAAAAALL;
      }
      v34 = operator new(0x18uLL);
      *v34 = 0;
      v34[1] = v24;
      v34[2] = v20;
      v35 = (float)(unint64_t)(*(_QWORD *)&v71[24] + 1);
      if (!v21 || (float)(*(float *)&v71[32] * (float)v21) < v35)
      {
        v36 = (v21 & (v21 - 1)) != 0;
        if (v21 < 3)
          v36 = 1;
        v37 = v36 | (2 * v21);
        v38 = vcvtps_u32_f32(v35 / *(float *)&v71[32]);
        if (v37 <= v38)
          v39 = v38;
        else
          v39 = v37;
        std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>((uint64_t)v71, v39);
        v21 = *(_QWORD *)&v71[8];
        if ((*(_QWORD *)&v71[8] & (*(_QWORD *)&v71[8] - 1)) != 0)
        {
          if (v24 >= *(_QWORD *)&v71[8])
            v27 = v24 % *(_QWORD *)&v71[8];
          else
            v27 = v24;
        }
        else
        {
          v27 = (*(_QWORD *)&v71[8] - 1) & v24;
        }
      }
      v40 = *(_QWORD *)v71;
      v41 = *(_QWORD **)(*(_QWORD *)v71 + 8 * v27);
      if (v41)
        break;
      *v34 = *(_QWORD *)&v71[16];
      *(_QWORD *)&v71[16] = v34;
      *(_QWORD *)(v40 + 8 * v27) = &v71[16];
      if (*v34)
      {
        v42 = *(_QWORD *)(*v34 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v42 >= v21)
            v42 %= v21;
        }
        else
        {
          v42 &= v21 - 1;
        }
        v41 = (_QWORD *)(*(_QWORD *)v71 + 8 * v42);
        goto LABEL_70;
      }
LABEL_71:
      ++*(_QWORD *)&v71[24];
LABEL_72:
      if (v17 >= v7)
      {
        v44 = (v17 - v6) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          abort();
        if ((v7 - v6) >> 2 > v45)
          v45 = (v7 - v6) >> 2;
        if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          if (v46 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v47 = (char *)operator new(8 * v46);
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[8 * v44];
        v7 = &v47[8 * v46];
        *(_QWORD *)v48 = v20;
        v43 = v48 + 8;
        if (v17 == v6)
        {
          v6 = v17;
        }
        else
        {
          do
          {
            v49 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v48 - 1) = v49;
            v48 -= 8;
          }
          while (v17 != v6);
          if (!v6)
            goto LABEL_90;
        }
        operator delete(v6);
LABEL_90:
        v6 = v48;
        goto LABEL_91;
      }
      *(_QWORD *)v17 = v20;
      v43 = v17 + 8;
LABEL_91:
      *(_QWORD *)v77 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)v77 = *(_QWORD *)(*((_QWORD *)v43 - 1) + 640);
      v17 = v43;
      if (!*(_QWORD *)v77)
        goto LABEL_95;
    }
    *v34 = *v41;
LABEL_70:
    *v41 = v34;
    goto LABEL_71;
  }
  v43 = v6 + 8;
LABEL_95:
  v17 = v43;
LABEL_96:
  v50 = *(_QWORD **)&v71[16];
  if (*(_QWORD *)&v71[16])
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = *(void **)v71;
  *(_QWORD *)v71 = 0;
  if (v52)
    operator delete(v52);
  if (v17 != v6)
  {
    do
    {
      v53 = v6;
      v55 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      v54 = (_BYTE *)v55;
      v76 = *(_QWORD *)(v55 + 808);
      v56 = *(_OWORD *)(v55 + 792);
      *(_OWORD *)&v74[16] = *(_OWORD *)(v55 + 776);
      v75 = v56;
      v57 = *(_OWORD *)(v55 + 728);
      *(_OWORD *)v72 = *(_OWORD *)(v55 + 712);
      *(_OWORD *)&v72[16] = v57;
      v58 = *(_OWORD *)(v55 + 760);
      v73 = *(_OWORD *)(v55 + 744);
      *(_OWORD *)v74 = v58;
      v59 = *(_OWORD *)(v55 + 664);
      *(_OWORD *)v71 = *(_OWORD *)(v55 + 648);
      *(_OWORD *)&v71[16] = v59;
      v60 = *(_OWORD *)(v55 + 696);
      *(_OWORD *)&v71[32] = *(_OWORD *)(v55 + 680);
      *(_OWORD *)&v71[48] = v60;
      *(_OWORD *)v77 = xmmword_1B9B922A0;
      memset(&v77[16], 255, 32);
      *(_OWORD *)&v77[48] = unk_1B9B922D0;
      v78 = 0xAAAAAAAAAAAAAAAALL;
      SVG::GradientElement::State::specifiedInherit(v55 + 648, a3, (uint64_t)v77);
      *(_DWORD *)v71 = *(_DWORD *)v77;
      v71[4] = v77[4];
      *(_OWORD *)&v71[8] = *(_OWORD *)&v77[8];
      *(_OWORD *)&v71[24] = *(_OWORD *)&v77[24];
      *(_OWORD *)&v71[40] = *(_OWORD *)&v77[40];
      v71[56] = v77[56];
      *(_DWORD *)v72 = v78;
      v72[4] = BYTE4(v78);
      if (!*(_BYTE *)(v55 + 736) && *(_BYTE *)(a3 + 88))
      {
        *(_OWORD *)&v72[8] = *(_OWORD *)v70;
        v72[24] = *(_BYTE *)(v70 + 16);
      }
      if (!v54[760] && *(_BYTE *)(a3 + 112))
      {
        v73 = *(_OWORD *)(a3 + 96);
        v74[0] = *(_BYTE *)(a3 + 112);
      }
      if (!v54[784] && *(_BYTE *)(a3 + 136))
      {
        *(_OWORD *)&v74[8] = *(_OWORD *)v69;
        v74[24] = *(_BYTE *)(v69 + 16);
      }
      if (!v54[808] && *(_BYTE *)(a3 + 160))
      {
        v75 = *(_OWORD *)(a3 + 144);
        LOBYTE(v76) = *(_BYTE *)(a3 + 160);
      }
      v61 = v75;
      *(_OWORD *)(a3 + 128) = *(_OWORD *)&v74[16];
      *(_OWORD *)(a3 + 144) = v61;
      *(_QWORD *)(a3 + 160) = v76;
      v62 = *(_OWORD *)&v72[16];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v72;
      *(_OWORD *)(a3 + 80) = v62;
      v63 = *(_OWORD *)v74;
      *(_OWORD *)(a3 + 96) = v73;
      *(_OWORD *)(a3 + 112) = v63;
      v64 = *(_OWORD *)&v71[16];
      *(_OWORD *)a3 = *(_OWORD *)v71;
      *(_OWORD *)(a3 + 16) = v64;
      v65 = *(_OWORD *)&v71[48];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v71[32];
      *(_OWORD *)(a3 + 48) = v65;
      v6 = v53;
    }
    while (v17 != v53);
  }
  if (!*(_BYTE *)(a3 + 4))
  {
    *(_DWORD *)a3 = 1;
    *(_BYTE *)(a3 + 4) = 1;
  }
  if (!*(_BYTE *)(a3 + 56))
  {
    v66 = MEMORY[0x1E0C9BAA8];
    v67 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *v68 = *MEMORY[0x1E0C9BAA8];
    v68[1] = v67;
    v68[2] = *(_OWORD *)(v66 + 32);
    *(_BYTE *)(a3 + 56) = 1;
  }
  if (!*(_BYTE *)(a3 + 68))
  {
    *(_DWORD *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 68) = 1;
  }
  if (!*(_BYTE *)(a3 + 88))
  {
    *(_QWORD *)(a3 + 72) = 0;
    *(_DWORD *)(a3 + 80) = 1;
    *(_BYTE *)(a3 + 88) = 1;
  }
  if (!*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a3 + 96) = 0;
    *(_DWORD *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
  }
  if (!*(_BYTE *)(a3 + 136))
  {
    *(_QWORD *)(a3 + 120) = 0x4059000000000000;
    *(_DWORD *)(a3 + 128) = 1;
    *(_BYTE *)(a3 + 136) = 1;
  }
  if (!*(_BYTE *)(a3 + 160))
  {
    *(_QWORD *)(a3 + 144) = 0;
    *(_DWORD *)(a3 + 152) = 1;
    *(_BYTE *)(a3 + 160) = 1;
  }
  if (v6)
    operator delete(v6);
}

void SVG::LinearGradientElement::~LinearGradientElement(SVG::LinearGradientElement *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = &unk_1E71375A0;
  v2 = (const void *)*((_QWORD *)this + 80);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138700[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138718[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138730[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138718[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138730[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = &unk_1E71375A0;
  v2 = (const void *)*((_QWORD *)this + 80);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138700[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138718[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138730[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138718[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138730[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::LinearGradientElement::getState(SVG::LinearGradientElement *this)
{
  return (uint64_t)this + 648;
}

__n128 SVG::LinearGradientElement::specifiedState@<Q0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __n128 result;
  _OWORD v6[4];
  uint64_t v7;

  SVG::LinearGradientElement::specifiedLinearState(a1, a2, (uint64_t)v6);
  v4 = v6[3];
  *(_OWORD *)(a3 + 32) = v6[2];
  *(_OWORD *)(a3 + 48) = v4;
  *(_QWORD *)(a3 + 64) = v7;
  result = (__n128)v6[1];
  *(_OWORD *)a3 = v6[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t SVG::ClipPathElement::ClipPathElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  __int128 v10;
  unsigned __int8 *v11;
  uint64_t v12;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  void *__p[2];
  char v19;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E7137570;
  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 640) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 656) = v7;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(v6 + 32);
  *(_DWORD *)(a1 + 688) = 0;
  std::string::basic_string[abi:nn180100]<0>(v14, "transform");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v14, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v15) < 0)
  {
    operator delete(v14[0]);
    if (!v8)
      goto LABEL_9;
  }
  else if (!v8)
  {
    goto LABEL_9;
  }
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v15 = v9;
  v16 = v9;
  *(_OWORD *)v14 = v9;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  SVG::parseTransform((uint64_t)(v8 + 64), (uint64_t)v14);
  if ((_BYTE)v17)
  {
    v10 = v15;
    *(_OWORD *)(a1 + 640) = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 656) = v10;
    *(_OWORD *)(a1 + 672) = v16;
  }
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v14, "clipPathUnits");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v11 = SVG::Element::findInAttributeMap(a3, (uint64_t)v14, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v15) < 0)
  {
    operator delete(v14[0]);
    if (!v11)
      return a1;
  }
  else if (!v11)
  {
    return a1;
  }
  v12 = SVG::parseUnits((uint64_t)(v11 + 64));
  if ((v12 & 0xFF00000000) != 0)
    *(_DWORD *)(a1 + 688) = v12;
  return a1;
}

uint64_t SVG::ClipPathElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  const void *v2;

  v2 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::clipPaths(CGFloat a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, CGFloat a7@<D1>, CGFloat a8@<D2>, CGFloat a9@<D3>, double a10@<D4>, double a11@<D5>, double a12@<D6>, double a13@<D7>)
{
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *i;
  unint64_t v28;
  CGFloat *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  CGFloat **v48;
  uint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  __int128 v53;
  void ***v54;
  uint64_t *v55;
  int8x8_t v56;
  uint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  const void **v66;
  const void **v67;
  const void *v68;
  void *v69;
  SVG::ClipToPaths::BaseClipNode *v70;
  CGFloat a;
  uint64_t v72;
  CGFloat b;
  unint64_t *v74;
  unint64_t v75;
  CGFloat *v76;
  CGFloat *v77;
  CGFloat *v78;
  _DWORD *v79;
  _DWORD *v80;
  _QWORD *v81;
  void *v82;
  CGFloat v83;
  uint64_t v84;
  CGFloat v85;
  unint64_t *v86;
  unint64_t v87;
  CGFloat *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  CGFloat *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  CGFloat *v100;
  __int128 v101;
  int64x2_t v102;
  CGFloat v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  CGFloat *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  CGFloat *v117;
  __int128 v118;
  int64x2_t v119;
  CGFloat v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  CGFloat v125;
  CGFloat v126;
  double v127;
  double v128;
  CGFloat tx;
  CGFloat ty;
  int64x2_t *v131;
  uint64_t *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  _QWORD *v144;
  char *v145;
  __int128 v146;
  int64x2_t v147;
  CGFloat v148;
  SVG **v149;
  int v150;
  SVG *v151;
  CGPathRef v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  _QWORD *v167;
  _QWORD *v168;
  char *v169;
  __int128 v170;
  int64x2_t v171;
  _QWORD *v172;
  CGFloat v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  int64x2_t v178;
  __int128 v179;
  int64x2_t v180;
  _QWORD *v181;
  _OWORD v182[2];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  char **v189;
  CGAffineTransform t2;
  CGAffineTransform t1;
  int64x2_t v192;
  char *v193;
  _QWORD v194[3];
  _QWORD v195[5];
  _QWORD v196[2];
  double v197;
  double v198;
  CGFloat v199;
  CGFloat v200;
  CGFloat v201;
  CGFloat v202;
  CGAffineTransform v203;
  CGAffineTransform v204;
  __int128 v205;
  __int128 v206;
  _OWORD v207[2];
  int64x2_t v208;
  char *v209;

  v199 = a6;
  v200 = a7;
  v201 = a8;
  v202 = a9;
  *(double *)v196 = a10;
  *(double *)&v196[1] = a11;
  v197 = a12;
  v198 = a13;
  if (std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::find<SVG::Element const*>(a4, *(unint64_t *)&a1))
  {
    v18 = MEMORY[0x1E0C9BAA8];
    v19 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)(a5 + 24) = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a5 + 40) = v19;
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v18 + 32);
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = &unk_1E71371C8;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 80) = 0;
    *(_QWORD *)(a5 + 88) = 0;
    *(_QWORD *)(a5 + 72) = 0;
    memset(&v204, 0, 24);
    *(_QWORD *)&v203.a = &v204;
    std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v203);
    return;
  }
  v20 = 0x9DDFEA08EB382D69 * (((((*(_QWORD *)&a1 >> 3) & 0x3FFFFFFLL) << 6) | 8) ^ HIDWORD(*(_QWORD *)&a1));
  v21 = 0x9DDFEA08EB382D69 * (HIDWORD(*(_QWORD *)&a1) ^ (v20 >> 47) ^ v20);
  v22 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
  v23 = *((_QWORD *)a4 + 1);
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = 0x9DDFEA08EB382D69 * (v21 ^ (v21 >> 47));
      if (v22 >= v23)
        v25 = v22 % v23;
    }
    else
    {
      v25 = (v23 - 1) & v22;
    }
    v26 = *(_QWORD **)(*(_QWORD *)a4 + 8 * v25);
    if (v26)
    {
      for (i = (_QWORD *)*v26; i; i = (_QWORD *)*i)
      {
        v28 = i[1];
        if (v28 == v22)
        {
          if (i[2] == *(_QWORD *)&a1)
            goto LABEL_76;
        }
        else
        {
          if (v24.u32[0] > 1uLL)
          {
            if (v28 >= v23)
              v28 %= v23;
          }
          else
          {
            v28 &= v23 - 1;
          }
          if (v28 != v25)
            break;
        }
      }
    }
  }
  else
  {
    v25 = 0xAAAAAAAAAAAAAAAALL;
  }
  v29 = (CGFloat *)operator new(0x18uLL);
  *v29 = 0.0;
  *((_QWORD *)v29 + 1) = v22;
  v29[2] = a1;
  v30 = (float)(unint64_t)(*((_QWORD *)a4 + 3) + 1);
  v31 = a4[8];
  if (!v23 || (float)(v31 * (float)v23) < v30)
  {
    v32 = 1;
    if (v23 >= 3)
      v32 = (v23 & (v23 - 1)) != 0;
    v33 = v32 | (2 * v23);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = (int8x8_t)v34;
    else
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v23 = *((_QWORD *)a4 + 1);
    }
    if (*(_QWORD *)&prime > v23)
      goto LABEL_32;
    if (*(_QWORD *)&prime < v23)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)a4 + 3) / a4[8]);
      if (v23 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (*(_QWORD *)&prime <= v42)
        prime = (int8x8_t)v42;
      if (*(_QWORD *)&prime >= v23)
      {
        v23 = *((_QWORD *)a4 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * *(_QWORD *)&prime);
          v37 = *(_QWORD **)a4;
          *(_QWORD *)a4 = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *((int8x8_t *)a4 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v38++) = 0;
          while (*(_QWORD *)&prime != v38);
          v39 = (_QWORD *)*((_QWORD *)a4 + 2);
          if (v39)
          {
            v40 = v39[1];
            v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(_QWORD *)&prime)
                v40 %= *(_QWORD *)&prime;
            }
            else
            {
              v40 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v40) = a4 + 4;
            v45 = (_QWORD *)*v39;
            if (*v39)
            {
              do
              {
                v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(_QWORD *)&prime)
                    v46 %= *(_QWORD *)&prime;
                }
                else
                {
                  v46 &= *(_QWORD *)&prime - 1;
                }
                if (v46 != v40)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a4 + 8 * v46))
                  {
                    *(_QWORD *)(*(_QWORD *)a4 + 8 * v46) = v39;
                    goto LABEL_57;
                  }
                  *v39 = *v45;
                  *v45 = **(_QWORD **)(*(_QWORD *)a4 + 8 * v46);
                  **(_QWORD **)(*(_QWORD *)a4 + 8 * v46) = v45;
                  v45 = v39;
                }
                v46 = v40;
LABEL_57:
                v39 = v45;
                v45 = (_QWORD *)*v45;
                v40 = v46;
              }
              while (v45);
            }
          }
          v23 = (unint64_t)prime;
          goto LABEL_61;
        }
        v172 = *(_QWORD **)a4;
        *(_QWORD *)a4 = 0;
        if (v172)
          operator delete(v172);
        v23 = 0;
        *((_QWORD *)a4 + 1) = 0;
      }
    }
LABEL_61:
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
        v25 = v22 % v23;
      else
        v25 = v22;
    }
    else
    {
      v25 = (v23 - 1) & v22;
    }
  }
  v47 = *(_QWORD **)a4;
  v48 = *(CGFloat ***)(*(_QWORD *)a4 + 8 * v25);
  if (v48)
  {
    *(_QWORD *)v29 = *v48;
  }
  else
  {
    v49 = *((_QWORD *)a4 + 2);
    *(_QWORD *)v29 = v49;
    *((_QWORD *)a4 + 2) = v29;
    v47[v25] = a4 + 4;
    if (!v49)
      goto LABEL_75;
    v50 = *(_QWORD *)(v49 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v50 >= v23)
        v50 %= v23;
    }
    else
    {
      v50 &= v23 - 1;
    }
    v48 = (CGFloat **)(*(_QWORD *)a4 + 8 * v50);
  }
  *v48 = v29;
LABEL_75:
  ++*((_QWORD *)a4 + 3);
LABEL_76:
  v204.a = a1;
  v51 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a3, &v204);
  if (v51[149] != 2)
    goto LABEL_230;
  if (v51[148])
  {
LABEL_80:
    v52 = MEMORY[0x1E0C9BAA8];
    v53 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)(a5 + 24) = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a5 + 40) = v53;
    *(_OWORD *)(a5 + 56) = *(_OWORD *)(v52 + 32);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = &unk_1E71371C8;
    *(_QWORD *)(a5 + 80) = 0;
    *(_QWORD *)(a5 + 88) = 0;
    *(_QWORD *)(a5 + 72) = 0;
    memset(&v204, 0, 24);
    *(_QWORD *)&v203.a = &v204;
    v54 = (void ***)&v203;
    goto LABEL_81;
  }
  if (v51[40] != 2)
    goto LABEL_230;
  if (v51[39] == 2)
    goto LABEL_80;
  v195[0] = a2;
  v195[1] = a3;
  v195[2] = &v199;
  v195[3] = v196;
  v195[4] = a4;
  v184 = unk_1B9B92478;
  v185 = *(_OWORD *)&byte_1B9B92448[32];
  v204 = *(CGAffineTransform *)byte_1B9B92448;
  v205 = unk_1B9B92478;
  v183 = xmmword_1B9B92488;
  v206 = xmmword_1B9B92488;
  memset(v207, 170, 24);
  memset(v182, 170, sizeof(v182));
  if (v51[26] != 2)
  {
LABEL_230:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_231;
  }
  SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_1::operator()((uint64_t)&v204, (uint64_t)v195, (uint64_t)(v51 + 22));
  v181 = a2;
  if (LOBYTE(v207[1]))
  {
    v65 = operator new(0x78uLL);
    v65[1] = 0;
    v65[2] = 0;
    *v65 = &unk_1E7137B80;
    v187 = v65;
    v186 = v65 + 3;
    std::construct_at[abi:nn180100]<SVG::ClipToPaths::ParentClipNode,SVG::ClipToPaths::ParentClipNode&,SVG::ClipToPaths::ParentClipNode*>((uint64_t)(v65 + 3), (uint64_t)&v204);
  }
  else
  {
    v186 = 0;
    v187 = 0;
  }
  std::__optional_destruct_base<SVG::ClipToPaths::ParentClipNode,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v204);
  v194[0] = a3;
  v194[1] = v196;
  v194[2] = v195;
  v189 = &v193;
  v192 = 0uLL;
  v193 = 0;
  v66 = *(const void ***)(*(_QWORD *)&a1 + 32);
  v67 = *(const void ***)(*(_QWORD *)&a1 + 40);
  if (v66 != v67)
  {
    v188 = a3;
    do
    {
      v68 = *v66;
      if (v69)
      {
        v203.a = -3.72066208e-103;
        v203.b = -3.72066208e-103;
        SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_2::operator()(&v203, (uint64_t)v194, (uint64_t)v69);
        a = v203.a;
        if (*(_QWORD *)&v203.a)
        {
          v72 = v192.i64[1];
          if (v192.i64[1] >= (unint64_t)v193)
          {
            v89 = (v192.i64[1] - v192.i64[0]) >> 4;
            v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 60)
              goto LABEL_231;
            v91 = (uint64_t)&v193[-v192.i64[0]];
            if ((uint64_t)&v193[-v192.i64[0]] >> 3 > v90)
              v90 = v91 >> 3;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
              v92 = 0xFFFFFFFFFFFFFFFLL;
            else
              v92 = v90;
            *(_QWORD *)&v204.tx = v189;
            v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v92);
            v95 = (CGFloat *)&v93[16 * v89];
            *v95 = a;
            b = v203.b;
            v95[1] = v203.b;
            if (b != 0.0)
            {
              v96 = (unint64_t *)(*(_QWORD *)&b + 8);
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
            v98 = (_QWORD *)v192.i64[1];
            v99 = (_QWORD *)v192.i64[0];
            if (v192.i64[1] == v192.i64[0])
            {
              v102 = vdupq_n_s64(v192.u64[1]);
              v100 = v95;
            }
            else
            {
              v100 = v95;
              do
              {
                v101 = *((_OWORD *)v98 - 1);
                v98 -= 2;
                *((_OWORD *)v100 - 1) = v101;
                v100 -= 2;
                *v98 = 0;
                v98[1] = 0;
              }
              while (v98 != v99);
              v102 = v192;
            }
            v76 = v95 + 2;
            v192.i64[0] = (uint64_t)v100;
            v192.i64[1] = (uint64_t)(v95 + 2);
            *(int64x2_t *)&v204.b = v102;
            v103 = *(double *)&v193;
            v193 = &v93[16 * v94];
            v204.d = v103;
            *(_QWORD *)&v204.a = v102.i64[0];
            std::__split_buffer<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::~__split_buffer((uint64_t)&v204);
          }
          else
          {
            *(CGFloat *)v192.i64[1] = v203.a;
            b = v203.b;
            *(CGFloat *)(v72 + 8) = v203.b;
            if (b != 0.0)
            {
              v74 = (unint64_t *)(*(_QWORD *)&b + 8);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v76 = (CGFloat *)(v72 + 16);
          }
          v192.i64[1] = (uint64_t)v76;
        }
        else
        {
          b = v203.b;
        }
        if (b != 0.0)
        {
          v104 = (unint64_t *)(*(_QWORD *)&b + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&b + 16))(COERCE_CGFLOAT(*(_QWORD *)&b));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&b);
          }
        }
      }
      else
      {
        if (v77)
        {
          v78 = v77;
          *(_QWORD *)&v204.a = v77;
          v79 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v188, &v204);
          if (v79[149] != 2)
            goto LABEL_230;
          v80 = v79;
          if (!v79[148])
          {
            if (v79[40] != 2)
              goto LABEL_230;
            if (v79[39] != 2)
            {
              v208 = 0uLL;
              v209 = 0;
              v204.a = v78[94];
              v81 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v181, &v204);
              if (v81)
              {
                if (v82)
                {
                  v203.a = -3.72066208e-103;
                  v203.b = -3.72066208e-103;
                  SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_2::operator()(&v203, (uint64_t)v194, (uint64_t)v82);
                  v83 = v203.a;
                  if (*(_QWORD *)&v203.a)
                  {
                    v84 = v208.i64[1];
                    if (v208.i64[1] >= (unint64_t)v209)
                    {
                      v106 = (v208.i64[1] - v208.i64[0]) >> 4;
                      v107 = v106 + 1;
                      if ((unint64_t)(v106 + 1) >> 60)
                        goto LABEL_231;
                      v108 = (uint64_t)&v209[-v208.i64[0]];
                      if ((uint64_t)&v209[-v208.i64[0]] >> 3 > v107)
                        v107 = v108 >> 3;
                      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
                        v109 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v109 = v107;
                      *(_QWORD *)&v204.tx = &v209;
                      v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v109);
                      v112 = (CGFloat *)&v110[16 * v106];
                      *v112 = v83;
                      v85 = v203.b;
                      v112[1] = v203.b;
                      if (v85 != 0.0)
                      {
                        v113 = (unint64_t *)(*(_QWORD *)&v85 + 8);
                        do
                          v114 = __ldxr(v113);
                        while (__stxr(v114 + 1, v113));
                      }
                      v115 = (_QWORD *)v208.i64[1];
                      v116 = (_QWORD *)v208.i64[0];
                      if (v208.i64[1] == v208.i64[0])
                      {
                        v119 = vdupq_n_s64(v208.u64[1]);
                        v117 = v112;
                      }
                      else
                      {
                        v117 = v112;
                        do
                        {
                          v118 = *((_OWORD *)v115 - 1);
                          v115 -= 2;
                          *((_OWORD *)v117 - 1) = v118;
                          v117 -= 2;
                          *v115 = 0;
                          v115[1] = 0;
                        }
                        while (v115 != v116);
                        v119 = v208;
                      }
                      v88 = v112 + 2;
                      v208.i64[0] = (uint64_t)v117;
                      v208.i64[1] = (uint64_t)(v112 + 2);
                      *(int64x2_t *)&v204.b = v119;
                      v120 = *(double *)&v209;
                      v209 = &v110[16 * v111];
                      v204.d = v120;
                      *(_QWORD *)&v204.a = v119.i64[0];
                      std::__split_buffer<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::~__split_buffer((uint64_t)&v204);
                    }
                    else
                    {
                      *(CGFloat *)v208.i64[1] = v203.a;
                      v85 = v203.b;
                      *(CGFloat *)(v84 + 8) = v203.b;
                      if (v85 != 0.0)
                      {
                        v86 = (unint64_t *)(*(_QWORD *)&v85 + 8);
                        do
                          v87 = __ldxr(v86);
                        while (__stxr(v87 + 1, v86));
                      }
                      v88 = (CGFloat *)(v84 + 16);
                    }
                    v208.i64[1] = (uint64_t)v88;
                  }
                  else
                  {
                    v85 = v203.b;
                  }
                  if (v85 != 0.0)
                  {
                    v121 = (unint64_t *)(*(_QWORD *)&v85 + 8);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 - 1, v121));
                    if (!v122)
                    {
                      (*(void (**)(CGFloat))(**(_QWORD **)&v85 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v85));
                      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v85);
                    }
                  }
                }
              }
              *(_QWORD *)&v207[1] = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v204.tx = v185;
              v205 = v184;
              v206 = v183;
              v207[0] = v182[1];
              *(_OWORD *)&v204.a = v182[0];
              *(_OWORD *)&v204.c = *(_OWORD *)&byte_1B9B92448[16];
              if (v80[26] != 2)
                goto LABEL_230;
              SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_1::operator()((uint64_t)&v204, (uint64_t)v195, (uint64_t)(v80 + 22));
              if (LOBYTE(v207[1]))
              {
                v123 = operator new(0x78uLL);
                v123[2] = 0;
                *v123 = &unk_1E7137B80;
                v123[1] = 0;
                v124 = v123 + 3;
                std::construct_at[abi:nn180100]<SVG::ClipToPaths::ParentClipNode,SVG::ClipToPaths::ParentClipNode&,SVG::ClipToPaths::ParentClipNode*>((uint64_t)(v123 + 3), (uint64_t)&v204);
              }
              else
              {
                v123 = 0;
                v124 = 0;
              }
              std::__optional_destruct_base<SVG::ClipToPaths::ParentClipNode,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v204);
              v177 = *((_OWORD *)v78 + 41);
              v179 = *((_OWORD *)v78 + 40);
              v125 = v78[84];
              v126 = v78[85];
              *(_OWORD *)&v204.a = *((_OWORD *)v78 + 43);
              v127 = SVG::Length::computeValue((SVG::Length *)&v204, v197);
              *(_OWORD *)&v204.a = *((_OWORD *)v78 + 44);
              v128 = SVG::Length::computeValue((SVG::Length *)&v204, v198);
              *(_OWORD *)&v203.a = v179;
              *(_OWORD *)&v203.c = v177;
              v203.tx = v125;
              v203.ty = v126;
              CGAffineTransformTranslate(&v204, &v203, v127, v128);
              v178 = *(int64x2_t *)&v204.c;
              v180 = *(int64x2_t *)&v204.a;
              tx = v204.tx;
              ty = v204.ty;
              v131 = (int64x2_t *)operator new(0x78uLL);
              v132 = (uint64_t *)v131;
              v131->i64[1] = 0;
              v131[1].i64[0] = 0;
              v131->i64[0] = (uint64_t)&unk_1E7137B80;
              v131[1].i64[1] = (uint64_t)&unk_1E71371C8;
              v133 = &v131[1].i8[8];
              v131[2].i64[0] = (uint64_t)v124;
              v131[2].i64[1] = (uint64_t)v123;
              v131[3] = v180;
              v131[4] = v178;
              *(CGFloat *)v131[5].i64 = tx;
              *(CGFloat *)&v131[5].i64[1] = ty;
              v131[6] = v208;
              v131[7].i64[0] = (uint64_t)v209;
              v208 = 0uLL;
              v209 = 0;
              v134 = v192.i64[1];
              if (v192.i64[1] >= (unint64_t)v193)
              {
                v136 = (v192.i64[1] - v192.i64[0]) >> 4;
                v137 = v136 + 1;
                if ((unint64_t)(v136 + 1) >> 60)
                  goto LABEL_231;
                v138 = (uint64_t)&v193[-v192.i64[0]];
                if ((uint64_t)&v193[-v192.i64[0]] >> 3 > v137)
                  v137 = v138 >> 3;
                if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
                  v139 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v139 = v137;
                *(_QWORD *)&v204.tx = v189;
                v140 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v139);
                v142 = &v140[16 * v136];
                *(_QWORD *)v142 = v133;
                *((_QWORD *)v142 + 1) = v132;
                v143 = (_QWORD *)v192.i64[1];
                v144 = (_QWORD *)v192.i64[0];
                if (v192.i64[1] == v192.i64[0])
                {
                  v147 = vdupq_n_s64(v192.u64[1]);
                  v145 = &v140[16 * v136];
                }
                else
                {
                  v145 = &v140[16 * v136];
                  do
                  {
                    v146 = *((_OWORD *)v143 - 1);
                    v143 -= 2;
                    *((_OWORD *)v145 - 1) = v146;
                    v145 -= 16;
                    *v143 = 0;
                    v143[1] = 0;
                  }
                  while (v143 != v144);
                  v147 = v192;
                }
                v135 = v142 + 16;
                v192.i64[0] = (uint64_t)v145;
                v192.i64[1] = (uint64_t)(v142 + 16);
                *(int64x2_t *)&v204.b = v147;
                v148 = *(double *)&v193;
                v193 = &v140[16 * v141];
                v204.d = v148;
                *(_QWORD *)&v204.a = v147.i64[0];
                std::__split_buffer<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::~__split_buffer((uint64_t)&v204);
              }
              else
              {
                *(_QWORD *)v192.i64[1] = v133;
                *(_QWORD *)(v134 + 8) = v131;
                v135 = (_QWORD *)(v134 + 16);
              }
              v192.i64[1] = (uint64_t)v135;
              *(_QWORD *)&v204.a = &v208;
              std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v204);
            }
          }
        }
      }
      ++v66;
    }
    while (v66 != v67);
    v149 = (SVG **)v192.i64[0];
    if (v192.i64[0] != v192.i64[1])
    {
      v150 = 0;
      do
      {
        v151 = *v149;
        v149 += 2;
        v150 += SVG::countChildren(v151, v70);
      }
      while (v149 != (SVG **)v192.i64[1]);
      if (v150)
        goto LABEL_229;
    }
  }
  v152 = CGPathCreateWithRect(*MEMORY[0x1E0C9D648], 0);
  v153 = operator new(0x70uLL);
  v154 = v153;
  v153[2] = 0;
  *v153 = &unk_1E7137B48;
  v153[1] = 0;
  v153[3] = &unk_1E71371A8;
  v155 = (char *)(v153 + 3);
  v153[4] = 0;
  v153[5] = 0;
  v156 = MEMORY[0x1E0C9BAA8];
  v157 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *((_OWORD *)v153 + 3) = *MEMORY[0x1E0C9BAA8];
  *((_OWORD *)v153 + 4) = v157;
  *((_OWORD *)v153 + 5) = *(_OWORD *)(v156 + 32);
  v153[12] = v152;
  *((_BYTE *)v153 + 104) = 1;
  v158 = v192.i64[1];
  if (v192.i64[1] >= (unint64_t)v193)
  {
    v160 = (v192.i64[1] - v192.i64[0]) >> 4;
    v161 = v160 + 1;
    if (!((unint64_t)(v160 + 1) >> 60))
    {
      v162 = (uint64_t)&v193[-v192.i64[0]];
      if ((uint64_t)&v193[-v192.i64[0]] >> 3 > v161)
        v161 = v162 >> 3;
      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0)
        v163 = 0xFFFFFFFFFFFFFFFLL;
      else
        v163 = v161;
      *(_QWORD *)&v204.tx = v189;
      v164 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v163);
      v166 = &v164[16 * v160];
      *(_QWORD *)v166 = v155;
      *((_QWORD *)v166 + 1) = v154;
      v167 = (_QWORD *)v192.i64[1];
      v168 = (_QWORD *)v192.i64[0];
      if (v192.i64[1] == v192.i64[0])
      {
        v171 = vdupq_n_s64(v192.u64[1]);
        v169 = &v164[16 * v160];
      }
      else
      {
        v169 = &v164[16 * v160];
        do
        {
          v170 = *((_OWORD *)v167 - 1);
          v167 -= 2;
          *((_OWORD *)v169 - 1) = v170;
          v169 -= 16;
          *v167 = 0;
          v167[1] = 0;
        }
        while (v167 != v168);
        v171 = v192;
      }
      v159 = v166 + 16;
      v192.i64[0] = (uint64_t)v169;
      v192.i64[1] = (uint64_t)(v166 + 16);
      *(int64x2_t *)&v204.b = v171;
      v173 = *(double *)&v193;
      v193 = &v164[16 * v165];
      v204.d = v173;
      *(_QWORD *)&v204.a = v171.i64[0];
      std::__split_buffer<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::~__split_buffer((uint64_t)&v204);
      goto LABEL_228;
    }
LABEL_231:
    abort();
  }
  *(_QWORD *)v192.i64[1] = v155;
  *(_QWORD *)(v158 + 8) = v153;
  v159 = (_QWORD *)(v158 + 16);
LABEL_228:
  v192.i64[1] = (uint64_t)v159;
LABEL_229:
  *(_QWORD *)&v174 = -1;
  *((_QWORD *)&v174 + 1) = -1;
  *(_OWORD *)&v204.c = v174;
  *(_OWORD *)&v204.tx = v174;
  *(_OWORD *)&v204.a = v174;
  SVG::unitTransform((CGAffineTransform *)*(unsigned int *)(*(_QWORD *)&a1 + 688), (uint64_t)&t1, v199, v200, v201, v202);
  v175 = *(_OWORD *)(*(_QWORD *)&a1 + 656);
  *(_OWORD *)&t2.a = *(_OWORD *)(*(_QWORD *)&a1 + 640);
  *(_OWORD *)&t2.c = v175;
  *(_OWORD *)&t2.tx = *(_OWORD *)(*(_QWORD *)&a1 + 672);
  CGAffineTransformConcat(&v204, &t1, &t2);
  v176 = *(_OWORD *)&v204.c;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)&v204.a;
  *(_QWORD *)(a5 + 16) = v187;
  *(_OWORD *)(a5 + 40) = v176;
  *(_OWORD *)(a5 + 56) = *(_OWORD *)&v204.tx;
  *(_QWORD *)a5 = &unk_1E71371C8;
  *(_QWORD *)(a5 + 8) = v186;
  *(int64x2_t *)(a5 + 72) = v192;
  *(_QWORD *)(a5 + 88) = v193;
  v192 = 0uLL;
  v193 = 0;
  *(_QWORD *)&v204.a = &v192;
  v54 = (void ***)&v204;
LABEL_81:
  std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100](v54);
  v55 = std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::find<SVG::Element const*>(a4, *(unint64_t *)&a1);
  if (!v55)
    return;
  v56 = *(int8x8_t *)(a4 + 2);
  v57 = *v55;
  v58 = v55[1];
  v59 = (uint8x8_t)vcnt_s8(v56);
  v59.i16[0] = vaddlv_u8(v59);
  if (v59.u32[0] > 1uLL)
  {
    if (v58 >= *(_QWORD *)&v56)
      v58 %= *(_QWORD *)&v56;
  }
  else
  {
    v58 &= *(_QWORD *)&v56 - 1;
  }
  v60 = *(uint64_t **)(*(_QWORD *)a4 + 8 * v58);
  do
  {
    v61 = v60;
    v60 = (uint64_t *)*v60;
  }
  while (v60 != v55);
  if (v61 == (uint64_t *)(a4 + 4))
    goto LABEL_102;
  v62 = v61[1];
  if (v59.u32[0] > 1uLL)
  {
    if (v62 >= *(_QWORD *)&v56)
      v62 %= *(_QWORD *)&v56;
  }
  else
  {
    v62 &= *(_QWORD *)&v56 - 1;
  }
  if (v62 != v58)
  {
LABEL_102:
    if (v57)
    {
      v63 = *(_QWORD *)(v57 + 8);
      if (v59.u32[0] > 1uLL)
      {
        v64 = *(_QWORD *)(v57 + 8);
        if (v63 >= *(_QWORD *)&v56)
          v64 = v63 % *(_QWORD *)&v56;
      }
      else
      {
        v64 = v63 & (*(_QWORD *)&v56 - 1);
      }
      if (v64 == v58)
        goto LABEL_106;
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v58) = 0;
    v57 = *v55;
  }
  if (v57)
  {
    v63 = *(_QWORD *)(v57 + 8);
LABEL_106:
    if (v59.u32[0] > 1uLL)
    {
      if (v63 >= *(_QWORD *)&v56)
        v63 %= *(_QWORD *)&v56;
    }
    else
    {
      v63 &= *(_QWORD *)&v56 - 1;
    }
    if (v63 != v58)
    {
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v63) = v61;
      v57 = *v55;
    }
  }
  *v61 = v57;
  *v55 = 0;
  --*((_QWORD *)a4 + 3);
  operator delete(v55);
}

void SVG::ClipPathElement::~ClipPathElement(SVG::ClipPathElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138748[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138760[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138778[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138760[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138778[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138748[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138760[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138778[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138760[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138778[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

void SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  double *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void **v22;

  if (*(_BYTE *)(a3 + 8)
    && (v5 = *(_QWORD **)a2,
        v15[0] = *(_QWORD *)a3,
  {
    v8 = *(double **)(a2 + 16);
    SVG::clipPaths(v15, v7, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 32), *v8, v8[1], v8[2], v8[3], **(double **)(a2 + 24), *(double *)(*(_QWORD *)(a2 + 24) + 8), *(double *)(*(_QWORD *)(a2 + 24) + 16), *(double *)(*(_QWORD *)(a2 + 24) + 24));
    v9 = v16;
    *(_QWORD *)(a1 + 8) = v15[1];
    *(_QWORD *)(a1 + 16) = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    *(_OWORD *)(a1 + 24) = v17;
    *(_OWORD *)(a1 + 40) = v18;
    *(_OWORD *)(a1 + 56) = v19;
    *(_QWORD *)a1 = &unk_1E71371C8;
    *(_OWORD *)(a1 + 72) = v20;
    *(_QWORD *)(a1 + 88) = v21;
    *((_QWORD *)&v20 + 1) = 0;
    v21 = 0;
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)&v20 = 0;
    v15[0] = &unk_1E71371C8;
    v22 = (void **)&v20;
    std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100](&v22);
    v15[0] = &unk_1E7137188;
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
}

BOOL SVG::countChildren(SVG *this, SVG::ClipToPaths::BaseClipNode *a2)
{
  void *v3;
  SVG::ClipToPaths::BaseClipNode *v4;
  SVG **v5;
  SVG **v6;
  uint64_t v7;
  SVG *v8;

  if (!v3)
  v5 = (SVG **)*((_QWORD *)v3 + 9);
  v6 = (SVG **)*((_QWORD *)v3 + 10);
  if (v5 == v6)
    return 0;
  LODWORD(v7) = 0;
  do
  {
    v8 = *v5;
    v5 += 2;
    v7 = SVG::countChildren(v8, v4) + v7;
  }
  while (v5 != v6);
  return v7;
}

void SVG::ClipToPaths::ParentClipNode::~ParentClipNode(SVG::ClipToPaths::ParentClipNode *this)
{
  void **v2;

  *(_QWORD *)this = &unk_1E71371C8;
  v2 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100](&v2);
  *(_QWORD *)this = &unk_1E7137188;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  void **v2;

  *(_QWORD *)this = &unk_1E71371C8;
  v2 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100](&v2);
  *(_QWORD *)this = &unk_1E7137188;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  MEMORY[0x1BCCCA1B4](this, 0x10A1C4090873174);
}

void std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<SVG::ClipToPaths::ParentClipNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7137B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SVG::ClipToPaths::ParentClipNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7137B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t std::__shared_ptr_emplace<SVG::ClipToPaths::ParentClipNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:nn180100]<SVG::ClipToPaths::ParentClipNode,SVG::ClipToPaths::ParentClipNode&,SVG::ClipToPaths::ParentClipNode*>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = &unk_1E7137188;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)a1 = &unk_1E71371C8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(char **)(a2 + 72);
  v10 = *(char **)(a2 + 80);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    if (v11 < 0)
      abort();
    v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>>>>(v11 >> 4);
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v12;
    *(_QWORD *)(a1 + 88) = &v12[2 * v13];
    do
    {
      v14 = *((_QWORD *)v9 + 1);
      *v12 = *(_QWORD *)v9;
      v12[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v9 += 16;
      v12 += 2;
    }
    while (v9 != v10);
    *(_QWORD *)(a1 + 80) = v12;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<SVG::ClipToPaths::ParentClipNode,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 96))
  {
    *(_QWORD *)a1 = &unk_1E71371C8;
    v3 = (void **)(a1 + 72);
    std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100](&v3);
    *(_QWORD *)a1 = &unk_1E7137188;
    std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](a1 + 8);
  }
  return a1;
}

_DWORD *SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_2::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _DWORD *result;
  _DWORD *v8;
  CGPathRef v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[13];
  CGPathRef v20;

  v6 = *(_QWORD **)a2;
  v19[0] = a3;
  result = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v6, v19);
  if (result[149] != 2)
    goto LABEL_16;
  v8 = result;
  if (result[148])
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    return result;
  }
  if (result[40] != 2)
    goto LABEL_16;
  if (result[39] == 2)
    goto LABEL_5;
  v20 = (CGPathRef)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(CGPathRef *__return_ptr, uint64_t, double, double, double, double))(*(_QWORD *)a3 + 32))(&v20, a3, **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(double *)(*(_QWORD *)(a2 + 8) + 16), *(double *)(*(_QWORD *)(a2 + 8) + 24));
  if (!v20)
  {
    v9 = CGPathCreateWithRect(*MEMORY[0x1E0C9D648], 0);
    if (v20)
      CFRelease(v20);
    v20 = v9;
  }
  if (v8[29] == 2
    && (v10 = v8[28] == 1,
        memset(&v19[4], 255, 32),
        *(_OWORD *)&v19[8] = xmmword_1B9B92488,
        memset(&v19[10], 170, 24),
        *(_OWORD *)v19 = xmmword_1B9B92448,
        *(_OWORD *)&v19[2] = unk_1B9B92458,
        v8[26] == 2))
  {
    SVG::clipPaths(SVG::ClipPathElement const&,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,CGRect,CGRect,std::unordered_set<SVG::ClipPathElement const*> &)::$_1::operator()((uint64_t)v19, *(_QWORD *)(a2 + 16), (uint64_t)(v8 + 22));
    if (LOBYTE(v19[12]))
    {
      v11 = operator new(0x78uLL);
      v11[2] = 0;
      *v11 = &unk_1E7137B80;
      v11[1] = 0;
      v12 = v11 + 3;
      std::construct_at[abi:nn180100]<SVG::ClipToPaths::ParentClipNode,SVG::ClipToPaths::ParentClipNode&,SVG::ClipToPaths::ParentClipNode*>((uint64_t)(v11 + 3), (uint64_t)v19);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    std::__optional_destruct_base<SVG::ClipToPaths::ParentClipNode,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v19);
    v17 = *(_OWORD *)(a3 + 656);
    v18 = *(_OWORD *)(a3 + 640);
    v13 = *(_QWORD *)(a3 + 672);
    v14 = *(_QWORD *)(a3 + 680);
    v15 = (char *)operator new(0x70uLL);
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = &unk_1E7137B48;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 4) = v12;
    *((_QWORD *)v15 + 5) = v11;
    *((_OWORD *)v15 + 3) = v18;
    *((_OWORD *)v15 + 4) = v17;
    *((_QWORD *)v15 + 10) = v13;
    *((_QWORD *)v15 + 11) = v14;
    *((_QWORD *)v15 + 12) = v20;
    v15[104] = v10;
    a1[1] = v15;
    *((_QWORD *)v15 + 3) = &unk_1E71371A8;
    result = v15 + 24;
    *a1 = result;
  }
  else
  {
LABEL_16:
    v16 = std::__throw_bad_variant_access[abi:nn180100]();
    return (_DWORD *)std::__shared_ptr_emplace<SVG::ClipToPaths::LeafClipNode>::~__shared_ptr_emplace(v16);
  }
  return result;
}

void std::__shared_ptr_emplace<SVG::ClipToPaths::LeafClipNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7137B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SVG::ClipToPaths::LeafClipNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7137B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t std::__shared_ptr_emplace<SVG::ClipToPaths::LeafClipNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__split_buffer<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SVG::ApplyPresentationFill::ApplyPresentationFill(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  int v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  SVG::ApplyPresentationFill *v33;
  _QWORD v34[10];
  int v35;
  _QWORD *v36;
  _QWORD v37[2];
  char v38;
  char v39;
  void *v40;
  double v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  float v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];
  void **v61;

  *(double *)v60 = a10;
  *(double *)&v60[1] = a11;
  *(double *)&v60[2] = a12;
  *(double *)&v60[3] = a13;
  v57 = a14;
  v58 = a15;
  v59 = a16;
  v56 = a8;
  *(_QWORD *)a1 = a2;
  v25 = a2[5] + a2[4] - 1;
  v26 = *(_QWORD *)(a2[1] + ((v25 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v25 & 0x1F) << 7) + 8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>(a1 + 8, v26);
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  v27 = a2[5] + a2[4] - 1;
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(*(_QWORD *)(a2[1] + ((v27 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v27 & 0x1F) << 7) + 120);
  *(_QWORD *)(a1 + 136) = a17;
  *(_DWORD *)(a1 + 224) = 0;
  v28 = *(double *)a17;
  if (!*(_BYTE *)(a17 + 8))
    v28 = 1.0;
  v55 = v28;
  v29 = *(_DWORD *)(a6 + 40);
  if ((v29 - 1) > 1)
  {
    if (a9 < 1.0)
    {
      *(_BYTE *)(a1 + 128) = 1;
      v40 = &unk_1E71379D0;
      v41 = a9;
      v54 = 12;
      SVG::Recorder::append((uint64_t)a2, (uint64_t)&v40);
      if (v54 != -1)
        ((void (*)(_QWORD *, void **))off_1E71387A8[v54])(v34, &v40);
      v40 = &unk_1E7137778;
      v54 = 10;
      SVG::Recorder::append((uint64_t)a2, (uint64_t)&v40);
      if (v54 != -1)
        ((void (*)(_QWORD *, void **))off_1E71387A8[v54])(v34, &v40);
      v29 = *(_DWORD *)(a6 + 40);
    }
  }
  else
  {
    v30 = v28 * a9;
    v55 = v30;
  }
  v39 = -86;
  v38 = -86;
  v37[0] = a2;
  v37[1] = &v55;
  v36 = a2;
  v42 = a3;
  v43 = v60;
  v44 = a4;
  v45 = &v56;
  v46 = &v57;
  v47 = a5;
  v48 = a2;
  v49 = &v39;
  v50 = &v38;
  v51 = v37;
  v40 = a2;
  v41 = COERCE_DOUBLE(&v55);
  v52 = &v36;
  v53 = a2;
  if (v29 != -1)
  {
    v61 = &v40;
    ((void (*)(_QWORD *__return_ptr, void ***, uint64_t))off_1E7138818[v29])(v34, &v61, a6 + 8);
    v31 = *(unsigned int *)(a1 + 224);
    if ((_DWORD)v31 == -1)
    {
      if (v35 == -1)
      {
LABEL_19:
        v32 = a2[5] + a2[4] - 1;
        *(_BYTE *)(*(_QWORD *)(a2[1] + ((v32 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v32 & 0x1F) << 7) + 120) = a7;
        return;
      }
    }
    else if (v35 == -1)
    {
      ((void (*)(void ***, uint64_t))off_1E7138880[v31])(&v61, a1 + 144);
      *(_DWORD *)(a1 + 224) = -1;
      goto LABEL_17;
    }
    v61 = (void **)(a1 + 144);
    ((void (*)(void ***, uint64_t, _QWORD *))off_1E7138898[v35])(&v61, a1 + 144, v34);
LABEL_17:
    if (v35 != -1)
      ((void (*)(void ***, _QWORD *))off_1E7138880[v35])(&v61, v34);
    goto LABEL_19;
  }
  v33 = (SVG::ApplyPresentationFill *)std::__throw_bad_variant_access[abi:nn180100]();
  SVG::ApplyPresentationFill::~ApplyPresentationFill(v33);
}

void SVG::ApplyPresentationFill::~ApplyPresentationFill(SVG::ApplyPresentationFill *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  void (**v10)(SVG::SetFill *__hidden);
  _BYTE v11[104];
  int v12;
  void (**v13)(SVG::SetFill *__hidden);
  uint64_t v14[13];
  int v15;
  int v16;
  char v17;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(*(_QWORD *)this + 40) + *(_QWORD *)(*(_QWORD *)this + 32) - 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8))
           + ((v3 & 0x1F) << 7)
           + 120) = *((_BYTE *)this + 129);
  v4 = (char *)this + 8;
  v10 = off_1E7137910;
  v11[0] = 0;
  v12 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v11, (uint64_t)this + 8);
  v13 = off_1E7137910;
  LOBYTE(v14[0]) = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v11);
  v16 = 9;
  SVG::Recorder::append(v2, (uint64_t)&v13);
  if (v16 != -1)
    ((void (*)(char *, void (***)(SVG::SetFill *__hidden)))off_1E71387A8[v16])(&v17, &v13);
  v16 = -1;
  v10 = off_1E7137910;
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))off_1E7138790[v12])(&v17, v11);
  if (*((_BYTE *)this + 128))
  {
    v5 = *(_QWORD *)this;
    v13 = (void (**)(SVG::SetFill *__hidden))&unk_1E71376B0;
    v16 = 11;
    SVG::Recorder::append(v5, (uint64_t)&v13);
    if (v16 != -1)
      ((void (*)(void (***)(SVG::SetFill *__hidden), void (***)(SVG::SetFill *__hidden)))off_1E71387A8[v16])(&v10, &v13);
    v6 = *(_QWORD *)this;
    v13 = (void (**)(SVG::SetFill *__hidden))&unk_1E71379D0;
    v14[0] = 0x3FF0000000000000;
    v16 = 12;
    SVG::Recorder::append(v6, (uint64_t)&v13);
    if (v16 != -1)
      ((void (*)(void (***)(SVG::SetFill *__hidden), void (***)(SVG::SetFill *__hidden)))off_1E71387A8[v16])(&v10, &v13);
  }
  v7 = *((unsigned int *)this + 56);
  if ((_DWORD)v7 != -1)
    ((void (*)(void (***)(SVG::SetFill *__hidden), char *))off_1E7138880[v7])(&v13, (char *)this + 144);
  *((_DWORD *)this + 56) = -1;
  v8 = (const void *)*((_QWORD *)this + 15);
  if (v8)
    CFRelease(v8);
  v9 = *((unsigned int *)this + 28);
  if ((_DWORD)v9 != -1)
    ((void (*)(void (***)(SVG::SetFill *__hidden), char *))off_1E7138790[v9])(&v13, v4);
  *((_DWORD *)this + 28) = -1;
}

void SVG::ApplyPresentation::ApplyPresentation(uint64_t a1, _QWORD *a2, uint64_t a3, void *lpsrc, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  SVG::StateSaverRestorer *v12;
  int v15;
  _OWORD *v26;
  __int128 v27;
  double *v28;
  double *v29;
  double v30;
  double v31;
  CGPathRef v32;
  _QWORD *v33;
  _OWORD *v34;
  __int128 v35;
  _QWORD *v36;
  double v37;
  CGFloat v38;
  void *v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  int8x8_t v56;
  unsigned int *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  void *v66;
  double v67;
  double v68;
  CGFloat v69;
  double v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  BOOL *v83;
  BOOL *v84;
  BOOL v85;
  int v86;
  unsigned int v87;
  int v88;
  BOOL v89;
  _BOOL4 v90;
  BOOL v91;
  double v92;
  uint64_t v93;
  SVG::ApplyPresentation *v94;
  _OWORD v95[3];
  __int128 v96;
  _BYTE v97[80];
  _BYTE v98[40];
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char v106[17];
  CGRect v107;
  CGRect v108;

  *(_QWORD *)(a1 + 8) = a2;
  v12 = (SVG::StateSaverRestorer *)(a1 + 8);
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  if (*(_DWORD *)(a3 + 136) != 2)
    goto LABEL_90;
  v15 = *(_DWORD *)(a3 + 132);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 27) = v15 == 2;
  if (v15 == 2)
    return;
  if (v26)
  {
    v27 = v26[41];
    *(_OWORD *)&v98[8] = v26[40];
    *(_OWORD *)&v98[24] = v27;
    v99 = v26[42];
    *(_QWORD *)v98 = &unk_1E7137A18;
    v105 = 2;
    SVG::Recorder::append((uint64_t)a2, (uint64_t)v98);
    if (v105 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E71387A8[v105])(&v96, v98);
  }
  if (*(_DWORD *)(a3 + 48) != 2)
    goto LABEL_90;
  if (*(_BYTE *)(a3 + 40))
  {
    if (v28)
    {
      v29 = v28;
      if (!*(_BYTE *)(a1 + 16))
      {
        SVG::StateSaverRestorer::save(v12);
        if (*(_DWORD *)(a3 + 48) != 2)
          goto LABEL_90;
      }
      v30 = *(double *)(a3 + 32);
      v107.origin.x = v29[84] + v30;
      v31 = *(double *)(a3 + 8);
      v107.origin.y = v29[85] + v31;
      v107.size.width = v29[86] - v30 - *(double *)(a3 + 16);
      v107.size.height = v29[87] - v31 - *(double *)(a3 + 24);
      v32 = CGPathCreateWithRect(v107, 0);
      v33 = operator new(0x70uLL);
      v33[2] = 0;
      *v33 = &unk_1E7137B48;
      v33[1] = 0;
      v34 = (_OWORD *)MEMORY[0x1E0C9BAA8];
      v33[4] = 0;
      v33[5] = 0;
      v35 = v34[1];
      *((_OWORD *)v33 + 3) = *v34;
      *((_OWORD *)v33 + 4) = v35;
      *((_OWORD *)v33 + 5) = v34[2];
      v33[12] = v32;
      *((_BYTE *)v33 + 104) = 1;
      v33[3] = &unk_1E71371A8;
      *(_QWORD *)&v98[8] = v33 + 3;
      *(_QWORD *)&v98[16] = v33;
      *(_QWORD *)v98 = &off_1E71371E8;
      v105 = 7;
      SVG::Recorder::append((uint64_t)a2, (uint64_t)v98);
      if (v105 != -1)
        ((void (*)(__int128 *, _BYTE *))off_1E71387A8[v105])(&v96, v98);
    }
  }
  if (*(_DWORD *)(a3 + 80) != 2)
    goto LABEL_90;
  if (*(_BYTE *)(a3 + 72))
  {
    *(_QWORD *)v98 = *(_QWORD *)(a3 + 64);
    v36 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a5, v98);
    if (v36)
    {
      if (v37 != 0.0)
      {
        v38 = v37;
        if (v39)
        {
          (*(void (**)(void *, double, double, double, double))(*(_QWORD *)v39 + 40))(v39, a9, a10, a11, a12);
        }
        else
        {
          v42 = 1.0;
          v40 = 0.0;
          v41 = 0.0;
          v43 = 1.0;
        }
        memset(&v97[16], 255, 32);
        *(_OWORD *)&v97[48] = xmmword_1B9B92548;
        *(_OWORD *)&v97[64] = unk_1B9B92558;
        v96 = xmmword_1B9B92508;
        *(_OWORD *)v97 = unk_1B9B92518;
        memset(v98, 0, 32);
        *(_QWORD *)&v98[32] = 0xAAAAAAAA3F800000;
        SVG::clipPaths(v38, a5, a7, (float *)v98, (uint64_t)&v96, v40, v41, v42, v43, a9, a10, a11, a12);
        std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)v98);
        v44 = operator new(0x78uLL);
        v44[2] = 0;
        *v44 = &unk_1E7137B80;
        v44[1] = 0;
        v44[3] = &unk_1E7137188;
        v45 = *(_QWORD *)v97;
        v44[4] = *((_QWORD *)&v96 + 1);
        v44[5] = v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = *(_OWORD *)&v97[24];
        *((_OWORD *)v44 + 3) = *(_OWORD *)&v97[8];
        *((_OWORD *)v44 + 4) = v48;
        v49 = *(_OWORD *)&v97[40];
        v44[3] = &unk_1E71371C8;
        v50 = *(_OWORD *)&v97[56];
        *((_OWORD *)v44 + 5) = v49;
        *((_OWORD *)v44 + 6) = v50;
        v44[14] = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        *(_QWORD *)v98 = &off_1E71371E8;
        *(_QWORD *)&v98[8] = v44 + 3;
        *(_QWORD *)&v98[16] = v44;
        v105 = 7;
        SVG::Recorder::append((uint64_t)a2, (uint64_t)v98);
        if (v105 != -1)
          ((void (*)(char *, _BYTE *))off_1E71387A8[v105])(v106, v98);
        *(_QWORD *)&v96 = &unk_1E71371C8;
        *(_QWORD *)v98 = &v97[56];
        std::vector<std::shared_ptr<SVG::ClipToPaths::BaseClipNode>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
        *(_QWORD *)&v96 = &unk_1E7137188;
        v51 = *(std::__shared_weak_count **)v97;
        if (*(_QWORD *)v97)
        {
          v52 = (unint64_t *)(*(_QWORD *)v97 + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a3 + 264) != 2)
    goto LABEL_90;
  if (*(_BYTE *)(a3 + 256))
  {
    *(_QWORD *)v98 = *(_QWORD *)(a3 + 248);
    v54 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a5, v98);
    if (v54)
    {
      if (v55)
      {
        v56 = (int8x8_t)a6[1];
        if (v56)
        {
          v57 = (unsigned int *)v55;
          v58 = 0x9DDFEA08EB382D69 * (((8 * v55) + 8) ^ HIDWORD(v55));
          v59 = 0x9DDFEA08EB382D69 * (HIDWORD(v55) ^ (v58 >> 47) ^ v58);
          v60 = 0x9DDFEA08EB382D69 * (v59 ^ (v59 >> 47));
          v61 = (uint8x8_t)vcnt_s8(v56);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            v62 = v60;
            if (v60 >= *(_QWORD *)&v56)
              v62 = v60 % *(_QWORD *)&v56;
          }
          else
          {
            v62 = (*(_QWORD *)&v56 - 1) & v60;
          }
          v63 = *(_QWORD **)(*a6 + 8 * v62);
          if (v63)
          {
            v64 = (_QWORD *)*v63;
            if (*v63)
            {
              do
              {
                v65 = v64[1];
                if (v60 == v65)
                {
                  if (v64[2] == v55)
                  {
                    if (v66)
                    {
                      v67 = (*(double (**)(void *, double, double, double, double))(*(_QWORD *)v66 + 40))(v66, a9, a10, a11, a12);
                      v69 = v68;
                      v71 = v70;
                      v73 = v72;
                    }
                    else
                    {
                      v71 = 1.0;
                      v67 = 0.0;
                      v69 = 0.0;
                      v73 = 1.0;
                    }
                    if (!*(_BYTE *)(a1 + 16))
                      SVG::StateSaverRestorer::save(v12);
                    SVG::unitTransform((CGAffineTransform *)v57[178], (uint64_t)v95, v67, v69, v71, v73);
                    v108.origin.x = v67;
                    v108.origin.y = v69;
                    v108.size.width = v71;
                    v108.size.height = v73;
                    SVG::LengthRect::computeRect((SVG::LengthRect *)(v57 + 160), v108);
                    v79 = v64[3];
                    v78 = v64[4];
                    if (v78)
                    {
                      v80 = (unint64_t *)(v78 + 8);
                      do
                        v81 = __ldxr(v80);
                      while (__stxr(v81 + 1, v80));
                    }
                    *(_OWORD *)&v98[24] = v95[0];
                    v99 = v95[1];
                    v100 = v95[2];
                    *(_QWORD *)v98 = &unk_1E7137010;
                    *(_QWORD *)&v98[8] = v79;
                    *(_QWORD *)&v98[16] = v78;
                    v101 = v74;
                    v102 = v75;
                    v103 = v76;
                    v104 = v77;
                    v105 = 8;
                    SVG::Recorder::append((uint64_t)a2, (uint64_t)v98);
                    if (v105 != -1)
                      ((void (*)(__int128 *, _BYTE *))off_1E71387A8[v105])(&v96, v98);
                    break;
                  }
                }
                else
                {
                  if (v61.u32[0] > 1uLL)
                  {
                    if (v65 >= *(_QWORD *)&v56)
                      v65 %= *(_QWORD *)&v56;
                  }
                  else
                  {
                    v65 &= *(_QWORD *)&v56 - 1;
                  }
                  if (v65 != v62)
                    break;
                }
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
          }
        }
      }
    }
  }
  v82 = a2[5] + a2[4] - 1;
  v83 = (BOOL *)(*(_QWORD *)(a2[1] + ((v82 >> 2) & 0x3FFFFFFFFFFFFFF8)) + ((v82 & 0x1F) << 7));
  *(_BYTE *)(a1 + 25) = *v83;
  if (*(_DWORD *)(a3 + 92) != 2)
    goto LABEL_90;
  *v83 = *(_DWORD *)(a3 + 88) == 1;
  v85 = v83[120];
  v84 = v83 + 120;
  *(_BYTE *)(a1 + 26) = v85;
  if (*(_DWORD *)(a3 + 228) != 2)
    goto LABEL_90;
  *v84 = *(_DWORD *)(a3 + 224) == 1;
  if (*((_QWORD *)lpsrc + 4) == *((_QWORD *)lpsrc + 5)
  {
    if (*(_DWORD *)(a3 + 200) != 2 || *(_DWORD *)(a3 + 400) != 2)
      goto LABEL_90;
    v86 = *(_DWORD *)(a3 + 192);
    v87 = v86 - 1;
    v88 = *(_DWORD *)(a3 + 392);
    v89 = v86 || (v88 - 1) >= 2;
    v90 = !v89;
    v91 = v88 || v87 >= 2;
    if (!v91 || v90)
    {
      if (*(_DWORD *)(a3 + 280) == 2)
      {
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 272);
        *(_BYTE *)(a1 + 40) = 1;
        goto LABEL_85;
      }
LABEL_90:
      std::__throw_bad_variant_access[abi:nn180100]();
      goto LABEL_91;
    }
  }
  if (*(_DWORD *)(a3 + 280) != 2)
    goto LABEL_90;
  v92 = *(double *)(a3 + 272);
  if (v92 < 1.0)
  {
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)v98 = &unk_1E71379D0;
    *(double *)&v98[8] = v92;
    v105 = 12;
    SVG::Recorder::append((uint64_t)a2, (uint64_t)v98);
    if (v105 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E71387A8[v105])(&v96, v98);
    *(_QWORD *)v98 = &unk_1E7137778;
    v105 = 10;
    SVG::Recorder::append((uint64_t)a2, (uint64_t)v98);
    if (v105 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E71387A8[v105])(&v96, v98);
  }
LABEL_85:
  *(_OWORD *)v98 = *(_OWORD *)(a1 + 32);
  v93 = *(_QWORD *)(a8 + 24);
  if (!v93)
  {
LABEL_91:
    v94 = (SVG::ApplyPresentation *)std::__throw_bad_function_call[abi:nn180100]();
    SVG::ApplyPresentation::~ApplyPresentation(v94);
    return;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v93 + 48))(v93, v98);
}

void SVG::ApplyPresentation::~ApplyPresentation(SVG::ApplyPresentation *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  _QWORD v6[15];
  int v7;
  char v8;

  if (!*((_BYTE *)this + 27))
  {
    if (*((_BYTE *)this + 24))
    {
      v2 = *(_QWORD *)this;
      v6[0] = &unk_1E71376B0;
      v7 = 11;
      SVG::Recorder::append(v2, (uint64_t)v6);
      if (v7 != -1)
        ((void (*)(char *, _QWORD *))off_1E71387A8[v7])(&v8, v6);
      v3 = *(_QWORD *)this;
      v6[0] = &unk_1E71379D0;
      v6[1] = 0x3FF0000000000000;
      v7 = 12;
      SVG::Recorder::append(v3, (uint64_t)v6);
      if (v7 != -1)
        ((void (*)(char *, _QWORD *))off_1E71387A8[v7])(&v8, v6);
    }
    v4 = *(_QWORD *)(*(_QWORD *)this + 40) + *(_QWORD *)(*(_QWORD *)this + 32) - 1;
    v5 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + ((v4 >> 2) & 0x3FFFFFFFFFFFFFF8))
                 + ((v4 & 0x1F) << 7));
    v5[120] = *((_BYTE *)this + 26);
    *v5 = *((_BYTE *)this + 25);
  }
  SVG::StateSaverRestorer::~StateSaverRestorer((SVG::ApplyPresentation *)((char *)this + 8));
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_4,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext> const&>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[20] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_4,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext> const&>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[20] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_4,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext> const&>(float ***a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2::operator()(a3, *a1, *a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_4,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext> const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int8x8_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  double **v31;
  double *i;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  const CGPath *v38;
  double v39;
  double v40;
  double *v41;
  _QWORD *v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  __int128 v47;
  __int128 v48;
  double v49;
  double v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  void *v55;
  unint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  __int128 v61;
  SVG *v62;
  int v63;
  double v64;
  double v65;
  unint64_t v66;
  unint64_t v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  double v71;
  double v72;
  int v73;
  double v74;
  double v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  CGFloat v80;
  uint64_t v81;
  CGFloat v82;
  CGFloat v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  CGFloat v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  int64x2_t v97;
  CGFloat v98;
  SVG::Recorder *v99;
  double *v100;
  _QWORD *v101;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  std::__shared_weak_count *v106;
  CGFloat v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  __int128 v120;
  __int128 v121;
  CGFloat height;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  uint64_t CTM;
  __int128 v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  unint64_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  __int128 v137;
  SVG *v138;
  double *v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  CGFloat v143;
  CGFloat b;
  CGFloat v145;
  double v146;
  double v147;
  double v148;
  int v149;
  double v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  CGFloat v155;
  uint64_t v156;
  CGFloat v157;
  CGFloat v158;
  unint64_t v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  CGFloat v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  CGFloat a;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  int64x2_t v184;
  CGFloat c;
  __int128 v186;
  double *v187;
  __int128 v188;
  CGFloat v189;
  double v190;
  CGFloat v191;
  CGFloat v192;
  double v193;
  CGFloat v194;
  CGAffineTransform v195;
  CGFloat v196;
  uint64_t v197;
  CGAffineTransform v198;
  int v199;
  CGAffineTransform v200;
  CGAffineTransform v201;
  CGAffineTransform v202;
  CGAffineTransform v203;
  CGAffineTransform v204;
  CGAffineTransform v205;
  CGAffineTransform v206;
  CGAffineTransform t1;
  unint64_t v208;
  CGAffineTransform v209;
  unint64_t v210;
  CGAffineTransform v211;
  char v212;
  _BYTE t2[56];
  int v214;
  __int128 v215;
  __int128 v216;
  int v217;
  __int128 v218;
  __int128 v219;
  CGFloat v220;
  CGAffineTransform v221;
  CGPoint v222;
  CGPoint v223;
  CGSize v224;
  CGRect BoundingBox;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;

  v5 = *a1;
  v6 = *(_QWORD **)(*a1 + 16);
  *(_QWORD *)t2 = *(_QWORD *)a2;
  v7 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v6, t2);
  if (!v7)
    goto LABEL_40;
  v8 = (const void *)v7[3];
  if (!v9)
  {
    if (v19)
    {
      v20 = *(_QWORD **)(v5 + 56);
      v21 = (int8x8_t)v20[1];
      if (v21)
      {
        v22 = v19;
        v23 = 0x9DDFEA08EB382D69 * (((8 * v19) + 8) ^ HIDWORD(v19));
        v24 = 0x9DDFEA08EB382D69 * (HIDWORD(v19) ^ (v23 >> 47) ^ v23);
        v25 = 0x9DDFEA08EB382D69 * (v24 ^ (v24 >> 47));
        v26 = (uint8x8_t)vcnt_s8(v21);
        v26.i16[0] = vaddlv_u8(v26);
        if (v26.u32[0] > 1uLL)
        {
          v27 = v25;
          if (v25 >= *(_QWORD *)&v21)
            v27 = v25 % *(_QWORD *)&v21;
        }
        else
        {
          v27 = (*(_QWORD *)&v21 - 1) & v25;
        }
        v31 = *(double ***)(*v20 + 8 * v27);
        if (v31)
        {
          for (i = *v31; i; i = *(double **)i)
          {
            v33 = *((_QWORD *)i + 1);
            if (v25 == v33)
            {
              if (*((_QWORD *)i + 2) == v19)
              {
                v99 = *(SVG::Recorder **)(v5 + 64);
                v101 = *(_QWORD **)(v5 + 16);
                v100 = *(double **)(v5 + 24);
                v102 = *v100;
                v103 = v100[1];
                v104 = v100[2];
                v105 = v100[3];
                memset(&v211, 255, sizeof(v211));
                v107 = i[3];
                v106 = (std::__shared_weak_count *)*((_QWORD *)i + 4);
                if (v106)
                {
                  p_shared_owners = (unint64_t *)&v106->__shared_owners_;
                  do
                    v109 = __ldxr(p_shared_owners);
                  while (__stxr(v109 + 1, p_shared_owners));
                }
                SVG::PatternElement::computeRecordingRect(v19, v101, v102, v103, v104, v105);
                v111 = v110;
                v113 = v112;
                v115 = v114;
                v117 = v116;
                SVG::PatternElement::computePlaybackRect(v22, v101, v102, v103, v104, v105);
                v190 = v118;
                v193 = v119;
                *(_QWORD *)&v120 = -1;
                *((_QWORD *)&v120 + 1) = -1;
                *(_OWORD *)&v209.c = v120;
                *(_OWORD *)&v209.tx = v120;
                *(_OWORD *)&v209.a = v120;
                v210 = 0xAAAAAAAAAAAAAAAALL;
                SVG::PatternElement::contentsTransform(v22, v101, (uint64_t)&v209, v102, v103, v104, v105, v111, v113, v115, v117);
                if ((_BYTE)v210)
                {
                  *(_QWORD *)&v121 = -1;
                  *((_QWORD *)&v121 + 1) = -1;
                  *(_OWORD *)&t1.c = v121;
                  *(_OWORD *)&t1.tx = v121;
                  v208 = 0xAAAAAAAAAAAAAAAALL;
                  v206 = v209;
                  *(_OWORD *)&t1.a = v121;
                  SVG::invert(&v206, (uint64_t)&t1);
                  if ((_BYTE)v208)
                  {
                    v205 = t1;
                    v227.origin.x = v111;
                    v227.origin.y = v113;
                    v227.size.width = v115;
                    v227.size.height = v117;
                    v228 = CGRectApplyAffineTransform(v227, &v205);
                    if (v228.size.width > 0.0)
                    {
                      height = v228.size.height;
                      if (v228.size.height > 0.0)
                      {
                        x = v228.origin.x;
                        y = v228.origin.y;
                        width = v228.size.width;
                        CTM = SVG::Recorder::recordGetCTM(v99);
                        *(_QWORD *)&v127 = -1;
                        *((_QWORD *)&v127 + 1) = -1;
                        *(_OWORD *)&v204.c = v127;
                        *(_OWORD *)&v204.tx = v127;
                        *(_OWORD *)&v204.a = v127;
                        CGAffineTransformMakeTranslation(&v204, v190 - v111, v193 - v113);
                        SVG::PatternElement::specifiedState(v22, v101, (uint64_t)t2);
                        v200 = v221;
                        v203 = v209;
                        v201 = v204;
                        CGAffineTransformConcat(&v202, &v201, &v200);
                        CGAffineTransformConcat(&v211, &v203, &v202);
                        *(_QWORD *)&v195.a = off_1E7137910;
                        v195.b = v107;
                        *(_QWORD *)&v195.c = v106;
                        v195.d = x;
                        v195.tx = y;
                        v195.ty = width;
                        v196 = height;
                        v197 = CTM;
                        v198 = v211;
                        v199 = 2;
                        *(_QWORD *)t2 = off_1E7137910;
                        t2[8] = 0;
                        v217 = -1;
                        std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>((uint64_t)&t2[8], (uint64_t)&v195.b);
                        LODWORD(v218) = 9;
                        SVG::Recorder::append((uint64_t)v99, (uint64_t)t2);
                        if ((_DWORD)v218 != -1)
                          ((void (*)(char *, _BYTE *))off_1E71387A8[v218])(&v212, t2);
                        LODWORD(v218) = -1;
                        *(_QWORD *)&v195.a = off_1E7137910;
                        if (v199 != -1)
                          ((void (*)(char *, CGFloat *))off_1E7138790[v199])(&v212, &v195.b);
                        *(_DWORD *)a3 = 0;
                        *(_DWORD *)(a3 + 80) = 1;
                        return;
                      }
                    }
                  }
                }
                if (v106)
                {
                  v128 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
                break;
              }
            }
            else
            {
              if (v26.u32[0] > 1uLL)
              {
                if (v33 >= *(_QWORD *)&v21)
                  v33 %= *(_QWORD *)&v21;
              }
              else
              {
                v33 &= *(_QWORD *)&v21 - 1;
              }
              if (v33 != v27)
                break;
            }
          }
        }
      }
    }
LABEL_40:
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_DWORD *)a3 = 0;
      *(_DWORD *)(a3 + 80) = 0;
      return;
    }
    v34 = **(_QWORD **)(v5 + 96);
    *(_OWORD *)t2 = *(_OWORD *)*(_QWORD *)(v5 + 88);
    *(_QWORD *)&t2[16] = v34;
    v35 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v35 != -1)
    {
      *(_QWORD *)&v195.a = t2;
      ((void (*)(CGAffineTransform *, uint64_t))off_1E7138860[v35])(&v195, a2 + 12);
      return;
    }
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_192:
    abort();
  }
  v10 = (unint64_t)v9;
  (*(void (**)(_BYTE *__return_ptr, void *, _QWORD))(*(_QWORD *)v9 + 40))(t2, v9, *(_QWORD *)(v5 + 16));
  if (*(_DWORD *)t2 == 1)
  {
    v11 = *(_QWORD *)(v5 + 24);
    if (*(double *)(v11 + 16) <= 0.0 || *(double *)(v11 + 24) <= 0.0)
      goto LABEL_40;
  }
  v12 = *(_QWORD **)(v5 + 32);
  v13 = (int8x8_t)v12[1];
  if (!*(_QWORD *)&v13)
    goto LABEL_40;
  v14 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
  v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v14 >> 47) ^ v14);
  v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
  v17 = (uint8x8_t)vcnt_s8(v13);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = v16;
    if (v16 >= *(_QWORD *)&v13)
      v18 = v16 % *(_QWORD *)&v13;
  }
  else
  {
    v18 = (*(_QWORD *)&v13 - 1) & v16;
  }
  v28 = *(_QWORD **)(*v12 + 8 * v18);
  if (!v28)
    goto LABEL_40;
  v29 = (_QWORD *)*v28;
  if (!v29)
    goto LABEL_40;
  while (1)
  {
    v30 = v29[1];
    if (v16 == v30)
      break;
    if (v17.u32[0] > 1uLL)
    {
      if (v30 >= *(_QWORD *)&v13)
        v30 %= *(_QWORD *)&v13;
    }
    else
    {
      v30 &= *(_QWORD *)&v13 - 1;
    }
    if (v30 != v18)
      goto LABEL_40;
LABEL_25:
    v29 = (_QWORD *)*v29;
    if (!v29)
      goto LABEL_40;
  }
  if (v29[2] != v10)
    goto LABEL_25;
  v36 = (const void *)v29[3];
  v37 = *(_QWORD *)(v5 + 48);
  v38 = **(const CGPath ***)(v5 + 40);
  v39 = *(double *)(v37 + 16);
  v40 = *(double *)(v37 + 24);
  v42 = *(_QWORD **)(v5 + 16);
  v41 = *(double **)(v5 + 24);
  v43 = *v41;
  v44 = v41[1];
  v45 = v41[2];
  v46 = v41[3];
  memset(&v195, 255, sizeof(v195));
  v196 = 0.0;
  v197 = 0;
  v198.a = 0.0;
  v198.b = -3.72066066e-103;
  *(_QWORD *)&v47 = -1;
  *((_QWORD *)&v47 + 1) = -1;
  *(_OWORD *)&v209.c = v47;
  *(_OWORD *)&v209.tx = v47;
  *(_OWORD *)&v209.a = v47;
  (*(void (**)(_BYTE *__return_ptr, unint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(t2, v10, v42);
  SVG::unitTransform((CGAffineTransform *)*(unsigned int *)t2, (uint64_t)&v209, v43, v44, v45, v46);
  (*(void (**)(_BYTE *__return_ptr, unint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(t2, v10, v42);
  t1 = *(CGAffineTransform *)&t2[8];
  *(CGAffineTransform *)t2 = v209;
  CGAffineTransformConcat(&v195, &t1, (CGAffineTransform *)t2);
  *(_QWORD *)&v48 = -1;
  *((_QWORD *)&v48 + 1) = -1;
  *(_OWORD *)&v209.c = v48;
  *(_OWORD *)&v209.tx = v48;
  *(_OWORD *)&v209.a = v48;
  v210 = 0xAAAAAAAAAAAAAAAALL;
  t1 = v195;
  SVG::invert(&t1, (uint64_t)&v209);
  if (!(_BYTE)v210)
    goto LABEL_116;
  (*(void (**)(_BYTE *__return_ptr, unint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(t2, v10, v42);
  if (*(_DWORD *)t2)
    v49 = 1.0;
  else
    v49 = v39;
  if (*(_DWORD *)t2)
    v50 = 1.0;
  else
    v50 = v40;
  BoundingBox = CGPathGetBoundingBox(v38);
  v211 = v209;
  v226 = CGRectApplyAffineTransform(BoundingBox, &v211);
  v51 = v226.origin.x;
  v52 = v226.origin.y;
  v53 = v226.size.width;
  v54 = v226.size.height;
  if (!v55)
  {
    if (v130)
    {
      v131 = (unint64_t)v130;
      v191 = v54;
      v194 = v51;
      SVG::RadialGradientElement::specifiedRadialState((unint64_t)v130, v42, (uint64_t)t2);
      *(_OWORD *)&v206.a = v215;
      v132 = SVG::Length::computeValue((SVG::Length *)&v206, v49);
      SVG::RadialGradientElement::specifiedRadialState(v131, v42, (uint64_t)t2);
      *(_OWORD *)t2 = v216;
      v133 = SVG::Length::computeValue((SVG::Length *)t2, v50);
      SVG::RadialGradientElement::specifiedRadialState(v131, v42, (uint64_t)t2);
      v206.c = v220;
      *(_OWORD *)&v206.a = v219;
      v134 = v132;
      if (LOBYTE(v220))
        v134 = SVG::Length::computeValue((SVG::Length *)&v206, v49);
      SVG::RadialGradientElement::specifiedRadialState(v131, v42, (uint64_t)t2);
      v206.c = v221.c;
      *(_OWORD *)&v206.a = *(_OWORD *)&v221.a;
      v135 = v133;
      if (LOBYTE(v221.c))
        v135 = SVG::Length::computeValue((SVG::Length *)&v206, v50);
      SVG::RadialGradientElement::specifiedRadialState(v131, v42, (uint64_t)t2);
      *(_OWORD *)t2 = v218;
      v136 = SVG::Length::computeValue((SVG::Length *)t2, sqrt(v50 * v50 + v49 * v49) / 1.41421356);
      *(_QWORD *)&v137 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v137 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v206.a = v137;
      *(_OWORD *)&v206.c = v137;
      v138 = (SVG *)(*(_QWORD *(**)(_BYTE *__return_ptr, unint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(t2, v10, v42);
      if (v136 != 0.0)
      {
        v140 = v214;
        if (!v214)
        {
          if (v36)
          {
            CFRetain(v36);
            v187 = (double *)operator new(0x48uLL);
            *(_QWORD *)v187 = &unk_1E7137668;
            *((_QWORD *)v187 + 1) = v36;
            CFRetain(v36);
          }
          else
          {
            v187 = (double *)operator new(0x48uLL);
            *(_QWORD *)v187 = &unk_1E7137668;
            v187[1] = 0.0;
          }
          v187[2] = v134;
          v187[3] = v135;
          v187[4] = 0.0;
          v187[5] = v132;
          v187[6] = v133;
          v187[7] = v136;
          *((_DWORD *)v187 + 16) = 3;
          *(_QWORD *)&v206.a = v187;
          *(_QWORD *)&v206.b = v187 + 9;
          *(_QWORD *)&v206.c = v187 + 9;
          memset(t2, 0, 24);
          LOBYTE(v206.d) = 1;
          *(_QWORD *)&v205.a = t2;
          std::vector<SVG::DrawRadialGradient>::__destroy_vector::operator()[abi:nn180100]((void ***)&v205);
          if (v36)
            CFRelease(v36);
          goto LABEL_189;
        }
        v223.x = v132;
        v223.y = v133;
        v229.size.height = v191;
        v229.origin.x = v194;
        v229.origin.y = v52;
        v229.size.width = v53;
        v141 = SVG::calculateRadialQuanta(v138, v223, v136, v229);
        v142 = HIDWORD(v141);
        if (HIDWORD(v141) - (int)v141 <= 25)
        {
          v143 = 0.0;
          b = 0.0;
          v145 = 0.0;
          memset(&v205, 0, 24);
          if (SHIDWORD(v141) <= (int)v141)
            goto LABEL_178;
          v146 = v134;
          v147 = v135;
          b = 0.0;
          while (1)
          {
            if (v136 * (double)(int)v141 >= 0.0)
              v148 = v136 * (double)(int)v141;
            else
              v148 = 0.0;
            v149 = v141 + 1;
            if (v136 * (double)((int)v141 + 1) >= 0.0)
              v150 = v136 * (double)v149;
            else
              v150 = 0.0;
            if ((_DWORD)v141)
            {
              if (v140 == 2 || (v141 & 1) == 0)
              {
                if (v36)
                {
                  CFRetain(v36);
                  b = v205.b;
                }
                if (*(_QWORD *)&b >= *(_QWORD *)&v205.c)
                {
                  memset(t2, 170, 16);
                  v174 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&b - *(_QWORD *)&v205.a) >> 3);
                  v175 = v174 + 1;
                  if (v174 + 1 > 0x38E38E38E38E38ELL)
                    goto LABEL_192;
                  if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) > v175)
                    v175 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3);
                  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) >= 0x1C71C71C71C71C7)
                    v176 = 0x38E38E38E38E38ELL;
                  else
                    v176 = v175;
                  *(_QWORD *)&t2[32] = &v205.c;
                  v177 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawRadialGradient>>(v176);
                  *(_QWORD *)&v155 = &v177[72 * v174];
                  *(_QWORD *)&v157 = &v177[72 * v178];
                  *(CGFloat *)&t2[24] = v157;
                  **(_QWORD **)&v155 = &unk_1E7137668;
                  *(_QWORD *)(*(_QWORD *)&v155 + 8) = v36;
                  *(double *)(*(_QWORD *)&v155 + 16) = v132;
                  *(double *)(*(_QWORD *)&v155 + 24) = v133;
                  *(double *)(*(_QWORD *)&v155 + 32) = v148;
                  *(double *)(*(_QWORD *)&v155 + 40) = v132;
                  *(double *)(*(_QWORD *)&v155 + 48) = v133;
                  *(double *)(*(_QWORD *)&v155 + 56) = v150;
                  *(_DWORD *)(*(_QWORD *)&v155 + 64) = 0;
                  *(_QWORD *)&b = *(_QWORD *)&v155 + 72;
                  *(_QWORD *)&t2[16] = *(_QWORD *)&v155 + 72;
                  a = v205.a;
                  v159 = *(_QWORD *)&v205.b;
                  if (*(_QWORD *)&v205.b != *(_QWORD *)&v205.a)
                  {
                    do
                    {
                      *(_QWORD *)(*(_QWORD *)&v155 - 72) = &unk_1E7137668;
                      *(_QWORD *)&v155 -= 72;
                      v180 = *(_QWORD *)(v159 - 64);
                      *(_QWORD *)(v159 - 64) = 0;
                      *(_QWORD *)(*(_QWORD *)&v155 + 8) = v180;
                      v181 = *(_OWORD *)(v159 - 56);
                      v182 = *(_OWORD *)(v159 - 40);
                      v183 = *(_OWORD *)(v159 - 24);
                      *(_DWORD *)(*(_QWORD *)&v155 + 64) = *(_DWORD *)(v159 - 8);
                      *(_OWORD *)(*(_QWORD *)&v155 + 32) = v182;
                      *(_OWORD *)(*(_QWORD *)&v155 + 48) = v183;
                      *(_OWORD *)(*(_QWORD *)&v155 + 16) = v181;
                      v159 -= 72;
                    }
                    while (v159 != *(_QWORD *)&a);
                    goto LABEL_173;
                  }
                  goto LABEL_174;
                }
                **(_QWORD **)&b = &unk_1E7137668;
                *(_QWORD *)(*(_QWORD *)&b + 8) = v36;
                *(double *)(*(_QWORD *)&b + 16) = v132;
                *(double *)(*(_QWORD *)&b + 24) = v133;
                *(double *)(*(_QWORD *)&b + 32) = v148;
                *(double *)(*(_QWORD *)&b + 40) = v132;
                *(double *)(*(_QWORD *)&b + 48) = v133;
                *(double *)(*(_QWORD *)&b + 56) = v150;
              }
              else
              {
                if (v36)
                {
                  CFRetain(v36);
                  b = v205.b;
                }
                if (*(_QWORD *)&b >= *(_QWORD *)&v205.c)
                {
                  memset(t2, 170, 16);
                  v164 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&b - *(_QWORD *)&v205.a) >> 3);
                  v165 = v164 + 1;
                  if (v164 + 1 > 0x38E38E38E38E38ELL)
                    goto LABEL_192;
                  if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) > v165)
                    v165 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3);
                  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) >= 0x1C71C71C71C71C7)
                    v166 = 0x38E38E38E38E38ELL;
                  else
                    v166 = v165;
                  *(_QWORD *)&t2[32] = &v205.c;
                  v167 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawRadialGradient>>(v166);
                  *(_QWORD *)&v155 = &v167[72 * v164];
                  *(_QWORD *)&v157 = &v167[72 * v168];
                  *(CGFloat *)&t2[24] = v157;
                  **(_QWORD **)&v155 = &unk_1E7137668;
                  *(_QWORD *)(*(_QWORD *)&v155 + 8) = v36;
                  *(double *)(*(_QWORD *)&v155 + 16) = v132;
                  *(double *)(*(_QWORD *)&v155 + 24) = v133;
                  *(double *)(*(_QWORD *)&v155 + 32) = v150;
                  *(double *)(*(_QWORD *)&v155 + 40) = v132;
                  *(double *)(*(_QWORD *)&v155 + 48) = v133;
                  *(double *)(*(_QWORD *)&v155 + 56) = v148;
                  *(_DWORD *)(*(_QWORD *)&v155 + 64) = 0;
                  *(_QWORD *)&b = *(_QWORD *)&v155 + 72;
                  *(_QWORD *)&t2[16] = *(_QWORD *)&v155 + 72;
                  v169 = v205.a;
                  v159 = *(_QWORD *)&v205.b;
                  if (*(_QWORD *)&v205.b != *(_QWORD *)&v205.a)
                  {
                    do
                    {
                      *(_QWORD *)(*(_QWORD *)&v155 - 72) = &unk_1E7137668;
                      *(_QWORD *)&v155 -= 72;
                      v170 = *(_QWORD *)(v159 - 64);
                      *(_QWORD *)(v159 - 64) = 0;
                      *(_QWORD *)(*(_QWORD *)&v155 + 8) = v170;
                      v171 = *(_OWORD *)(v159 - 56);
                      v172 = *(_OWORD *)(v159 - 40);
                      v173 = *(_OWORD *)(v159 - 24);
                      *(_DWORD *)(*(_QWORD *)&v155 + 64) = *(_DWORD *)(v159 - 8);
                      *(_OWORD *)(*(_QWORD *)&v155 + 32) = v172;
                      *(_OWORD *)(*(_QWORD *)&v155 + 48) = v173;
                      *(_OWORD *)(*(_QWORD *)&v155 + 16) = v171;
                      v159 -= 72;
                    }
                    while (v159 != *(_QWORD *)&v169);
                    goto LABEL_173;
                  }
                  goto LABEL_174;
                }
                **(_QWORD **)&b = &unk_1E7137668;
                *(_QWORD *)(*(_QWORD *)&b + 8) = v36;
                *(double *)(*(_QWORD *)&b + 16) = v132;
                *(double *)(*(_QWORD *)&b + 24) = v133;
                *(double *)(*(_QWORD *)&b + 32) = v150;
                *(double *)(*(_QWORD *)&b + 40) = v132;
                *(double *)(*(_QWORD *)&b + 48) = v133;
                *(double *)(*(_QWORD *)&b + 56) = v148;
              }
            }
            else
            {
              if (v36)
              {
                CFRetain(v36);
                b = v205.b;
              }
              if (*(_QWORD *)&b >= *(_QWORD *)&v205.c)
              {
                memset(t2, 170, 16);
                v151 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&b - *(_QWORD *)&v205.a) >> 3);
                v152 = v151 + 1;
                if (v151 + 1 > 0x38E38E38E38E38ELL)
                  goto LABEL_192;
                if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) > v152)
                  v152 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3);
                if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) >= 0x1C71C71C71C71C7)
                  v153 = 0x38E38E38E38E38ELL;
                else
                  v153 = v152;
                *(_QWORD *)&t2[32] = &v205.c;
                v154 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawRadialGradient>>(v153);
                *(_QWORD *)&v155 = &v154[72 * v151];
                *(_QWORD *)&v157 = &v154[72 * v156];
                *(CGFloat *)&t2[24] = v157;
                **(_QWORD **)&v155 = &unk_1E7137668;
                *(_QWORD *)(*(_QWORD *)&v155 + 8) = v36;
                *(double *)(*(_QWORD *)&v155 + 16) = v146;
                *(double *)(*(_QWORD *)&v155 + 24) = v147;
                *(_QWORD *)(*(_QWORD *)&v155 + 32) = 0;
                *(double *)(*(_QWORD *)&v155 + 40) = v132;
                *(double *)(*(_QWORD *)&v155 + 48) = v133;
                *(double *)(*(_QWORD *)&v155 + 56) = v136;
                *(_DWORD *)(*(_QWORD *)&v155 + 64) = 0;
                *(_QWORD *)&b = *(_QWORD *)&v155 + 72;
                *(_QWORD *)&t2[16] = *(_QWORD *)&v155 + 72;
                v158 = v205.a;
                v159 = *(_QWORD *)&v205.b;
                if (*(_QWORD *)&v205.b != *(_QWORD *)&v205.a)
                {
                  do
                  {
                    *(_QWORD *)(*(_QWORD *)&v155 - 72) = &unk_1E7137668;
                    *(_QWORD *)&v155 -= 72;
                    v160 = *(_QWORD *)(v159 - 64);
                    *(_QWORD *)(v159 - 64) = 0;
                    *(_QWORD *)(*(_QWORD *)&v155 + 8) = v160;
                    v161 = *(_OWORD *)(v159 - 56);
                    v162 = *(_OWORD *)(v159 - 40);
                    v163 = *(_OWORD *)(v159 - 24);
                    *(_DWORD *)(*(_QWORD *)&v155 + 64) = *(_DWORD *)(v159 - 8);
                    *(_OWORD *)(*(_QWORD *)&v155 + 32) = v162;
                    *(_OWORD *)(*(_QWORD *)&v155 + 48) = v163;
                    *(_OWORD *)(*(_QWORD *)&v155 + 16) = v161;
                    v159 -= 72;
                  }
                  while (v159 != *(_QWORD *)&v158);
LABEL_173:
                  v184 = *(int64x2_t *)&v205.a;
                  b = *(double *)&t2[16];
                  v157 = *(double *)&t2[24];
LABEL_175:
                  v205.a = v155;
                  v205.b = b;
                  *(int64x2_t *)&t2[8] = v184;
                  c = v205.c;
                  v205.c = v157;
                  *(CGFloat *)&t2[24] = c;
                  *(_QWORD *)t2 = v184.i64[0];
                  std::__split_buffer<SVG::DrawRadialGradient>::~__split_buffer((uint64_t)t2);
                  goto LABEL_176;
                }
LABEL_174:
                v184 = vdupq_n_s64(v159);
                goto LABEL_175;
              }
              **(_QWORD **)&b = &unk_1E7137668;
              *(_QWORD *)(*(_QWORD *)&b + 8) = v36;
              *(double *)(*(_QWORD *)&b + 16) = v146;
              *(double *)(*(_QWORD *)&b + 24) = v147;
              *(_QWORD *)(*(_QWORD *)&b + 32) = 0;
              *(double *)(*(_QWORD *)&b + 40) = v132;
              *(double *)(*(_QWORD *)&b + 48) = v133;
              *(double *)(*(_QWORD *)&b + 56) = v136;
            }
            *(_DWORD *)(*(_QWORD *)&b + 64) = 0;
            *(_QWORD *)&b += 72;
LABEL_176:
            v205.b = b;
            LODWORD(v141) = v149;
            if (v149 == (_DWORD)v142)
            {
              v145 = v205.a;
              v143 = v205.c;
LABEL_178:
              v206.a = v145;
              v206.b = b;
              v206.c = v143;
              memset(&v205, 0, 24);
              LOBYTE(v206.d) = 1;
              *(_QWORD *)t2 = &v205;
              std::vector<SVG::DrawRadialGradient>::__destroy_vector::operator()[abi:nn180100]((void ***)t2);
LABEL_189:
              std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__assign_alt[abi:nn180100]<1ul,std::vector<SVG::DrawRadialGradient>,std::vector<SVG::DrawRadialGradient>>((uint64_t)&v196, (void **)&v196, (__n128 *)&v206);
              v188 = *(_OWORD *)&v195.c;
              *(_OWORD *)a3 = *(_OWORD *)&v195.a;
              *(_OWORD *)(a3 + 16) = v188;
              *(_OWORD *)(a3 + 32) = *(_OWORD *)&v195.tx;
              *(_BYTE *)(a3 + 48) = 0;
              *(_DWORD *)(a3 + 72) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>,(std::__variant_detail::_Trait)1>>(a3 + 48, (uint64_t)&v196);
              *(_DWORD *)(a3 + 80) = 2;
              if (LOBYTE(v206.d))
              {
                *(_QWORD *)t2 = &v206;
                std::vector<SVG::DrawRadialGradient>::__destroy_vector::operator()[abi:nn180100]((void ***)t2);
              }
              goto LABEL_117;
            }
          }
        }
      }
    }
LABEL_116:
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 80) = 0;
    goto LABEL_117;
  }
  v56 = (unint64_t)v55;
  v189 = v52;
  v192 = v51;
  SVG::LinearGradientElement::specifiedLinearState((unint64_t)v55, v42, (uint64_t)t2);
  *(_OWORD *)&v206.a = v215;
  v57 = SVG::Length::computeValue((SVG::Length *)&v206, v49);
  SVG::LinearGradientElement::specifiedLinearState(v56, v42, (uint64_t)t2);
  *(_OWORD *)t2 = v216;
  v58 = SVG::Length::computeValue((SVG::Length *)t2, v50);
  SVG::LinearGradientElement::specifiedLinearState(v56, v42, (uint64_t)t2);
  *(_OWORD *)&v206.a = v218;
  v59 = SVG::Length::computeValue((SVG::Length *)&v206, v49);
  SVG::LinearGradientElement::specifiedLinearState(v56, v42, (uint64_t)t2);
  *(_OWORD *)t2 = v219;
  v60 = SVG::Length::computeValue((SVG::Length *)t2, v50);
  *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v206.a = v61;
  *(_OWORD *)&v206.c = v61;
  v62 = (SVG *)(*(_QWORD *(**)(_BYTE *__return_ptr, unint64_t, _QWORD *))(*(_QWORD *)v10 + 40))(t2, v10, v42);
  v63 = v214;
  v64 = v59 - v57;
  v65 = v60 - v58;
  if (v59 - v57 == *MEMORY[0x1E0C9D820] && v65 == *(double *)(MEMORY[0x1E0C9D820] + 8))
    goto LABEL_116;
  if (!v214)
  {
    if (v36)
    {
      CFRetain(v36);
      v139 = (double *)operator new(0x38uLL);
      *(_QWORD *)v139 = &unk_1E7137620;
      *((_QWORD *)v139 + 1) = v36;
      CFRetain(v36);
    }
    else
    {
      v139 = (double *)operator new(0x38uLL);
      *(_QWORD *)v139 = &unk_1E7137620;
      v139[1] = 0.0;
    }
    v139[2] = v57;
    v139[3] = v58;
    v139[4] = v59;
    v139[5] = v60;
    *((_DWORD *)v139 + 12) = 3;
    *(_QWORD *)&v206.a = v139;
    *(_QWORD *)&v206.b = v139 + 7;
    *(_QWORD *)&v206.c = v139 + 7;
    memset(t2, 0, 24);
    LOBYTE(v206.d) = 1;
    *(_QWORD *)&v205.a = t2;
    std::vector<SVG::DrawLinearGradient>::__destroy_vector::operator()[abi:nn180100]((void ***)&v205);
    if (v36)
      CFRelease(v36);
    goto LABEL_182;
  }
  v222.x = v57;
  v222.y = v58;
  v224.width = v59 - v57;
  v224.height = v60 - v58;
  v230.origin.y = v189;
  v230.origin.x = v192;
  v230.size.width = v53;
  v230.size.height = v54;
  v66 = SVG::calculateLinearQuanta(v62, v222, v224, v230);
  v67 = HIDWORD(v66);
  if (HIDWORD(v66) - (int)v66 > 25)
    goto LABEL_116;
  v68 = 0.0;
  v69 = 0.0;
  v70 = 0.0;
  memset(&v205, 0, 24);
  if (SHIDWORD(v66) <= (int)v66)
    goto LABEL_92;
  v69 = 0.0;
  while (2)
  {
    v71 = v57 + v64 * (double)(int)v66;
    v72 = v58 + v65 * (double)(int)v66;
    v73 = v66 + 1;
    v74 = v57 + v64 * (double)((int)v66 + 1);
    v75 = v58 + v65 * (double)((int)v66 + 1);
    if (v63 != 2 && (v66 & 1) != 0)
    {
      if (v36)
      {
        CFRetain(v36);
        v69 = v205.b;
      }
      if (*(_QWORD *)&v69 < *(_QWORD *)&v205.c)
      {
        **(_QWORD **)&v69 = &unk_1E7137620;
        *(_QWORD *)(*(_QWORD *)&v69 + 8) = v36;
        *(double *)(*(_QWORD *)&v69 + 16) = v74;
        *(double *)(*(_QWORD *)&v69 + 24) = v75;
        *(double *)(*(_QWORD *)&v69 + 32) = v71;
        *(double *)(*(_QWORD *)&v69 + 40) = v72;
        goto LABEL_69;
      }
      memset(t2, 170, 16);
      v76 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v69 - *(_QWORD *)&v205.a) >> 3);
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) > 0x492492492492492)
        goto LABEL_192;
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) > v77)
        v77 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3)) >= 0x249249249249249)
        v78 = 0x492492492492492;
      else
        v78 = v77;
      *(_QWORD *)&t2[32] = &v205.c;
      v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(v78);
      *(_QWORD *)&v80 = &v79[56 * v76];
      *(_QWORD *)&v82 = &v79[56 * v81];
      *(CGFloat *)&t2[24] = v82;
      **(_QWORD **)&v80 = &unk_1E7137620;
      *(_QWORD *)(*(_QWORD *)&v80 + 8) = v36;
      *(double *)(*(_QWORD *)&v80 + 16) = v74;
      *(double *)(*(_QWORD *)&v80 + 24) = v75;
      *(double *)(*(_QWORD *)&v80 + 32) = v71;
      *(double *)(*(_QWORD *)&v80 + 40) = v72;
      *(_DWORD *)(*(_QWORD *)&v80 + 48) = 0;
      *(_QWORD *)&v69 = *(_QWORD *)&v80 + 56;
      *(_QWORD *)&t2[16] = *(_QWORD *)&v80 + 56;
      v83 = v205.a;
      v84 = *(_QWORD *)&v205.b;
      if (*(_QWORD *)&v205.b != *(_QWORD *)&v205.a)
      {
        do
        {
          *(_QWORD *)(*(_QWORD *)&v80 - 56) = &unk_1E7137620;
          *(_QWORD *)&v80 -= 56;
          v85 = *(_QWORD *)(v84 - 48);
          *(_QWORD *)(v84 - 48) = 0;
          *(_QWORD *)(*(_QWORD *)&v80 + 8) = v85;
          v86 = *(_OWORD *)(v84 - 40);
          v87 = *(_OWORD *)(v84 - 24);
          *(_DWORD *)(*(_QWORD *)&v80 + 48) = *(_DWORD *)(v84 - 8);
          *(_OWORD *)(*(_QWORD *)&v80 + 16) = v86;
          *(_OWORD *)(*(_QWORD *)&v80 + 32) = v87;
          v84 -= 56;
        }
        while (v84 != *(_QWORD *)&v83);
        goto LABEL_87;
      }
LABEL_88:
      v97 = vdupq_n_s64(v84);
      goto LABEL_89;
    }
    if (v36)
    {
      CFRetain(v36);
      v69 = v205.b;
    }
    if (*(_QWORD *)&v69 >= *(_QWORD *)&v205.c)
    {
      memset(t2, 170, 16);
      v88 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v69 - *(_QWORD *)&v205.a) >> 3);
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) > 0x492492492492492)
        goto LABEL_192;
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3) > v89)
        v89 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v205.c - *(_QWORD *)&v205.a) >> 3)) >= 0x249249249249249)
        v90 = 0x492492492492492;
      else
        v90 = v89;
      *(_QWORD *)&t2[32] = &v205.c;
      v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(v90);
      *(_QWORD *)&v80 = &v91[56 * v88];
      *(_QWORD *)&v82 = &v91[56 * v92];
      *(CGFloat *)&t2[24] = v82;
      **(_QWORD **)&v80 = &unk_1E7137620;
      *(_QWORD *)(*(_QWORD *)&v80 + 8) = v36;
      *(double *)(*(_QWORD *)&v80 + 16) = v71;
      *(double *)(*(_QWORD *)&v80 + 24) = v72;
      *(double *)(*(_QWORD *)&v80 + 32) = v74;
      *(double *)(*(_QWORD *)&v80 + 40) = v75;
      *(_DWORD *)(*(_QWORD *)&v80 + 48) = 0;
      *(_QWORD *)&v69 = *(_QWORD *)&v80 + 56;
      *(_QWORD *)&t2[16] = *(_QWORD *)&v80 + 56;
      v93 = v205.a;
      v84 = *(_QWORD *)&v205.b;
      if (*(_QWORD *)&v205.b == *(_QWORD *)&v205.a)
        goto LABEL_88;
      do
      {
        *(_QWORD *)(*(_QWORD *)&v80 - 56) = &unk_1E7137620;
        *(_QWORD *)&v80 -= 56;
        v94 = *(_QWORD *)(v84 - 48);
        *(_QWORD *)(v84 - 48) = 0;
        *(_QWORD *)(*(_QWORD *)&v80 + 8) = v94;
        v95 = *(_OWORD *)(v84 - 40);
        v96 = *(_OWORD *)(v84 - 24);
        *(_DWORD *)(*(_QWORD *)&v80 + 48) = *(_DWORD *)(v84 - 8);
        *(_OWORD *)(*(_QWORD *)&v80 + 16) = v95;
        *(_OWORD *)(*(_QWORD *)&v80 + 32) = v96;
        v84 -= 56;
      }
      while (v84 != *(_QWORD *)&v93);
LABEL_87:
      v97 = *(int64x2_t *)&v205.a;
      v69 = *(double *)&t2[16];
      v82 = *(double *)&t2[24];
LABEL_89:
      v205.a = v80;
      v205.b = v69;
      *(int64x2_t *)&t2[8] = v97;
      v98 = v205.c;
      v205.c = v82;
      *(CGFloat *)&t2[24] = v98;
      *(_QWORD *)t2 = v97.i64[0];
      std::__split_buffer<SVG::DrawLinearGradient>::~__split_buffer((uint64_t)t2);
    }
    else
    {
      **(_QWORD **)&v69 = &unk_1E7137620;
      *(_QWORD *)(*(_QWORD *)&v69 + 8) = v36;
      *(double *)(*(_QWORD *)&v69 + 16) = v71;
      *(double *)(*(_QWORD *)&v69 + 24) = v72;
      *(double *)(*(_QWORD *)&v69 + 32) = v74;
      *(double *)(*(_QWORD *)&v69 + 40) = v75;
LABEL_69:
      *(_DWORD *)(*(_QWORD *)&v69 + 48) = 0;
      *(_QWORD *)&v69 += 56;
    }
    v205.b = v69;
    LODWORD(v66) = v73;
    if (v73 != (_DWORD)v67)
      continue;
    break;
  }
  v70 = v205.a;
  v68 = v205.c;
LABEL_92:
  v206.a = v70;
  v206.b = v69;
  v206.c = v68;
  memset(&v205, 0, 24);
  LOBYTE(v206.d) = 1;
  *(_QWORD *)t2 = &v205;
  std::vector<SVG::DrawLinearGradient>::__destroy_vector::operator()[abi:nn180100]((void ***)t2);
LABEL_182:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__assign_alt[abi:nn180100]<0ul,std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawLinearGradient>>((uint64_t)&v196, (void **)&v196, (__n128 *)&v206);
  v186 = *(_OWORD *)&v195.c;
  *(_OWORD *)a3 = *(_OWORD *)&v195.a;
  *(_OWORD *)(a3 + 16) = v186;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v195.tx;
  *(_BYTE *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>,(std::__variant_detail::_Trait)1>>(a3 + 48, (uint64_t)&v196);
  *(_DWORD *)(a3 + 80) = 2;
  if (LOBYTE(v206.d))
  {
    *(_QWORD *)t2 = &v206;
    std::vector<SVG::DrawLinearGradient>::__destroy_vector::operator()[abi:nn180100]((void ***)t2);
  }
LABEL_117:
  if (LODWORD(v198.b) != -1)
    ((void (*)(_BYTE *, CGFloat *))off_1E7138840[LODWORD(v198.b)])(t2, &v196);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_4,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::IRIWithFallback,SVG::Presentation::FromContext> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _DWORD v5[26];
  int v6;
  void (**v7)(SVG::SetFill *__hidden);
  _BYTE v8[104];
  int v9;
  int v10;
  char v11;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v5[0] = 0;
  v6 = 1;
  v7 = off_1E7137910;
  v8[0] = 0;
  v9 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, (uint64_t)v5);
  v10 = 9;
  result = SVG::Recorder::append(v3, (uint64_t)&v7);
  if (v10 != -1)
    result = ((uint64_t (*)(char *, void (***)(SVG::SetFill *__hidden)))off_1E71387A8[v10])(&v11, &v7);
  v10 = -1;
  if (v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E7138790[v6])(&v11, v5);
  *a2 = 0;
  a2[20] = 1;
  return result;
}

void SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2::operator()(_DWORD *a1, float **a2, uint64_t a3)
{
  uint64_t v5;
  CFTypeRef v6;
  _QWORD v7[13];
  int v8;
  void (**v9)(SVG::SetFill *__hidden);
  _BYTE v10[104];
  int v11;
  int v12;
  CFTypeRef v13;
  char v14;

  v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  SVG::createColorObject(*((CFArrayRef *)*a2 + 25), a3, &v13, *a2[1]);
  v5 = (uint64_t)*a2;
  v6 = v13;
  if (v13)
    CFRetain(v13);
  v7[0] = v6;
  v8 = 0;
  v9 = off_1E7137910;
  v10[0] = 0;
  v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>((uint64_t)v10, (uint64_t)v7);
  v12 = 9;
  SVG::Recorder::append(v5, (uint64_t)&v9);
  if (v12 != -1)
    ((void (*)(char *, void (***)(SVG::SetFill *__hidden)))off_1E71387A8[v12])(&v14, &v9);
  v12 = -1;
  if (v8 != -1)
    ((void (*)(char *, _QWORD *))off_1E7138790[v8])(&v14, v7);
  *a1 = 0;
  a1[20] = 1;
  if (v6)
    CFRelease(v6);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(56 * a1);
}

void std::vector<SVG::DrawLinearGradient>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 56;
      v7 = v4 - 56;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 56;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<SVG::DrawLinearGradient>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__assign_alt[abi:nn180100]<0ul,std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawLinearGradient>>(uint64_t a1, void **a2, __n128 *a3)
{
  uint64_t v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  void (**v12)(char *);
  BOOL v13;
  __n128 result;
  char v15;

  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E7138840[v5])(&v15, a1);
LABEL_12:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a3;
    *(__n128 *)a1 = *a3;
    *(_QWORD *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return result;
  }
  v7 = (char *)*a2;
  if (*a2)
  {
    v8 = (char *)a2[1];
    v9 = *a2;
    if (v8 != v7)
    {
      v10 = v8 - 56;
      v11 = v8 - 56;
      do
      {
        v12 = *(void (***)(char *))v11;
        v11 -= 56;
        (*v12)(v10);
        v13 = v10 == v7;
        v10 = v11;
      }
      while (!v13);
      v9 = *a2;
    }
    a2[1] = v7;
    operator delete(v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  a2[2] = (void *)a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorIN3SVG18DrawLinearGradientENS_9allocatorISA_EEEENS8_INS9_18DrawRadialGradientENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void **a2)
{
  void **v2;

  v2 = a2;
  std::vector<SVG::DrawLinearGradient>::__destroy_vector::operator()[abi:nn180100](&v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorIN3SVG18DrawLinearGradientENS_9allocatorISA_EEEENS8_INS9_18DrawRadialGradientENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void **a2)
{
  void **v2;

  v2 = a2;
  std::vector<SVG::DrawRadialGradient>::__destroy_vector::operator()[abi:nn180100](&v2);
}

void std::vector<SVG::DrawRadialGradient>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138840[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E7138850[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorIN3SVG18DrawLinearGradientENS_9allocatorISA_EEEENS8_INS9_18DrawRadialGradientENSB_ISE_EEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorIN3SVG18DrawLinearGradientENS_9allocatorISA_EEEENS8_INS9_18DrawRadialGradientENSB_ISE_EEEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawRadialGradient>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(72 * a1);
}

uint64_t std::__split_buffer<SVG::DrawRadialGradient>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__assign_alt[abi:nn180100]<1ul,std::vector<SVG::DrawRadialGradient>,std::vector<SVG::DrawRadialGradient>>(uint64_t a1, void **a2, __n128 *a3)
{
  uint64_t v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  void (**v12)(char *);
  BOOL v13;
  __n128 result;
  char v15;

  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E7138840[v5])(&v15, a1);
LABEL_12:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a3;
    *(__n128 *)a1 = *a3;
    *(_QWORD *)(a1 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  v7 = (char *)*a2;
  if (*a2)
  {
    v8 = (char *)a2[1];
    v9 = *a2;
    if (v8 != v7)
    {
      v10 = v8 - 72;
      v11 = v8 - 72;
      do
      {
        v12 = *(void (***)(char *))v11;
        v11 -= 72;
        (*v12)(v10);
        v13 = v10 == v7;
        v10 = v11;
      }
      while (!v13);
      v9 = *a2;
    }
    a2[1] = v7;
    operator delete(v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  a2[2] = (void *)a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::FromContext> const&>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[20] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::FromContext> const&>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[20] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::FromContext> const&>(float ***a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2::operator()(a3, *a1, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::ApplyPresentationFill::ApplyPresentationFill(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_0,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_1,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_2,SVG::ApplyPresentationFill::(SVG::Recorder &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> const&,SVG::Presentation::Paint const&,double,BOOL,CGRect,CGRect,CGPath const*,SVG::ApplyPresentationState const&)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,SVG::Presentation::None,SVG::Presentation::CurrentColor,SVG::Presentation::Color,SVG::Presentation::FromContext> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _DWORD v5[26];
  int v6;
  void (**v7)(SVG::SetFill *__hidden);
  _BYTE v8[104];
  int v9;
  int v10;
  char v11;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v5[0] = 0;
  v6 = 1;
  v7 = off_1E7137910;
  v8[0] = 0;
  v9 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::CF<CGColor *>,SVG::SetFill::CurrentColor,SVG::SetFill::PatternData>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, (uint64_t)v5);
  v10 = 9;
  result = SVG::Recorder::append(v3, (uint64_t)&v7);
  if (v10 != -1)
    result = ((uint64_t (*)(char *, void (***)(SVG::SetFill *__hidden)))off_1E71387A8[v10])(&v11, &v7);
  v10 = -1;
  if (v6 != -1)
    result = ((uint64_t (*)(char *, _DWORD *))off_1E7138790[v6])(&v11, v5);
  *a2 = 0;
  a2[20] = 1;
  return result;
}

void SVG::SetContextFill::~SetContextFill(SVG::SetContextFill *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E7137910;
  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138790[v2])(&v3, (char *)this + 8);
  *((_DWORD *)this + 28) = -1;
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E7137910;
  v2 = *((unsigned int *)this + 28);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138790[v2])(&v3, (char *)this + 8);
  *((_DWORD *)this + 28) = -1;
  MEMORY[0x1BCCCA1B4](this, 0x10A3C40C258EA78);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG21ApplyPresentationFill4NoneENS9_8FillPathENS9_8GradientEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138840[v3])(&v5, a2 + 48);
  *(_DWORD *)(a2 + 72) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG21ApplyPresentationFill4NoneENS9_8FillPathENS9_8GradientEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E7138880[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[20] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG21ApplyPresentationFill4NoneENS9_8FillPathENS9_8GradientEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E7138880[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[20] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG21ApplyPresentationFill4NoneENS9_8FillPathENS9_8GradientEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 80);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E7138880[v5])(&v16, v4);
LABEL_7:
    *(_DWORD *)(v4 + 80) = -1;
    v12 = *a3;
    v13 = a3[2];
    *(_OWORD *)(v4 + 16) = a3[1];
    *(_OWORD *)(v4 + 32) = v13;
    *(_OWORD *)v4 = v12;
    *(_BYTE *)(v4 + 48) = 0;
    *(_DWORD *)(v4 + 72) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>,(std::__variant_detail::_Trait)1>>(v4 + 48, (uint64_t)(a3 + 3));
    *(_DWORD *)(v4 + 80) = 2;
    return result;
  }
  v7 = *a3;
  v8 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)a2 = v7;
  v9 = a2 + 48;
  v10 = *(unsigned int *)(a2 + 72);
  v11 = *((unsigned int *)a3 + 18);
  if ((_DWORD)v10 == -1)
  {
    if ((_DWORD)v11 == -1)
      return result;
  }
  else if ((_DWORD)v11 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138840[v10])(&v15, v9);
    *(_DWORD *)(a2 + 72) = -1;
    return result;
  }
  v14 = v9;
  return ((uint64_t (*)(uint64_t *))off_1E71388B0[v11])(&v14);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorIN3SVG18DrawLinearGradientENS_9allocatorISA_EEEENS8_INS9_18DrawRadialGradientENSB_ISE_EEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, void **a2, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__assign_alt[abi:nn180100]<0ul,std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawLinearGradient>>(*a1, a2, a3).n128_u64[0];
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorIN3SVG18DrawLinearGradientENS_9allocatorISA_EEEENS8_INS9_18DrawRadialGradientENSB_ISE_EEEEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJSD_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t *a1, void **a2, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<SVG::DrawLinearGradient>,std::vector<SVG::DrawRadialGradient>>>::__assign_alt[abi:nn180100]<1ul,std::vector<SVG::DrawRadialGradient>,std::vector<SVG::DrawRadialGradient>>(*a1, a2, a3).n128_u64[0];
  return result;
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return SVG::ImageElement::ImageElement();
}

uint64_t SVG::ImageElement::ImageElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  CFTypeRef *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  char v11;
  unsigned __int8 *v12;
  __int128 v13;
  __int128 v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  const __CFAllocator *v20;
  const UInt8 *v21;
  CFIndex v22;
  const __CFString *v23;
  const __CFString *v24;
  CFURLRef v25;
  const __CFURL *v26;
  const __CFString *v27;
  const __CFString *v28;
  CGImageRef ImageAtIndex;
  const __CFString *v30;
  CFRange v31;
  SVG *v32;
  CGDataProvider *v33;
  CGImageSource *v34;
  const void *v35;
  CFDataRef data[2];
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  void *__p[2];
  char v42;
  CFRange v43;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = &off_1E7137380;
  *(_QWORD *)(a1 + 640) = 5;
  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 648) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 664) = v7;
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 752) = 0;
  v8 = (CFTypeRef *)(a1 + 760);
  *(_OWORD *)(a1 + 760) = 0u;
  std::string::basic_string[abi:nn180100]<0>(data, "preserveAspectRatio");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v9 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v9)
  {
    v10 = SVG::PreserveAspectRatio::parsePreserveAspectRatio((uint64_t)(v9 + 64));
    if (v11)
      *(_QWORD *)(a1 + 640) = v10;
  }
  std::string::basic_string[abi:nn180100]<0>(data, "transform");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v12 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v12)
  {
    *(_QWORD *)&v13 = -1;
    *((_QWORD *)&v13 + 1) = -1;
    v38 = v13;
    v39 = v13;
    *(_OWORD *)data = v13;
    v40 = 0xAAAAAAAAAAAAAAAALL;
    SVG::parseTransform((uint64_t)(v12 + 64), (uint64_t)data);
    if ((_BYTE)v40)
    {
      v14 = v38;
      *(_OWORD *)(a1 + 648) = *(_OWORD *)data;
      *(_OWORD *)(a1 + 664) = v14;
      *(_OWORD *)(a1 + 680) = v39;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(data, "x");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v15 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v15)
  {
    data[0] = (CFDataRef)-1;
    data[1] = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v15 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)data);
    if ((_BYTE)v38)
      *(_OWORD *)(a1 + 696) = *(_OWORD *)data;
  }
  std::string::basic_string[abi:nn180100]<0>(data, "y");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v16 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v16)
  {
    data[0] = (CFDataRef)-1;
    data[1] = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v16 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)data);
    if ((_BYTE)v38)
      *(_OWORD *)(a1 + 712) = *(_OWORD *)data;
  }
  std::string::basic_string[abi:nn180100]<0>(data, "width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v17 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v17)
  {
    data[0] = (CFDataRef)-1;
    data[1] = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v17 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)data);
    if ((_BYTE)v38)
      *(_OWORD *)(a1 + 728) = *(_OWORD *)data;
  }
  std::string::basic_string[abi:nn180100]<0>(data, "height");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v18 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v18)
  {
    data[0] = (CFDataRef)-1;
    data[1] = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v18 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)data);
    if ((_BYTE)v38)
      *(_OWORD *)(a1 + 744) = *(_OWORD *)data;
  }
  std::string::basic_string[abi:nn180100]<0>(data, "href");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/1999/xlink");
  v19 = SVG::Element::findInAttributeMap(a3, (uint64_t)data, (uint64_t)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v38) < 0)
    operator delete(data[0]);
  if (v19)
  {
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((char)v19[87] < 0)
    {
      v21 = (const UInt8 *)*((_QWORD *)v19 + 8);
      v22 = *((_QWORD *)v19 + 9);
    }
    else
    {
      v21 = v19 + 64;
      v22 = v19[87];
    }
    v23 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v21, v22, 0x8000100u, 1u);
    if (v23)
    {
      v24 = v23;
      v25 = CFURLCreateWithString(v20, v23, 0);
      if (*v8)
        CFRelease(*v8);
      *v8 = v25;
      CFRelease(v24);
    }
  }
  v26 = (const __CFURL *)*v8;
  if (*v8)
  {
    v27 = CFURLCopyScheme((CFURLRef)*v8);
    if (v27)
    {
      v28 = v27;
      ImageAtIndex = 0;
      if (CFStringCompare(v27, CFSTR("data"), 0) == kCFCompareEqualTo)
      {
        v30 = CFURLCopyResourceSpecifier(v26);
        v31 = CFStringFind(v30, CFSTR(","), 0);
        if (v31.location == -1)
        {
          ImageAtIndex = 0;
          if (!v30)
            goto LABEL_69;
        }
        else
        {
          v43.length = CFStringGetLength(v30) - (v31.location + v31.length);
          v43.location = v31.location + v31.length;
          v32 = (SVG *)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v30, v43);
          data[0] = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
          SVG::decodeBase64(v32, data);
          v33 = CGDataProviderCreateWithCFData(data[0]);
          v34 = CGImageSourceCreateWithDataProvider(v33, 0);
          ImageAtIndex = CGImageSourceCreateImageAtIndex(v34, 0, 0);
          if (v34)
            CFRelease(v34);
          if (v33)
            CFRelease(v33);
          if (data[0])
            CFRelease(data[0]);
          if (v32)
            CFRelease(v32);
          if (!v30)
            goto LABEL_69;
        }
        CFRelease(v30);
      }
LABEL_69:
      CFRelease(v28);
      goto LABEL_71;
    }
  }
  ImageAtIndex = 0;
LABEL_71:
  v35 = *(const void **)(a1 + 768);
  if (v35)
    CFRelease(v35);
  *(_QWORD *)(a1 + 768) = ImageAtIndex;
  return a1;
}

CGAffineTransform *SVG::ImageElement::totalTransform@<X0>(SVG::ImageElement *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, uint64_t a3@<X8>)
{
  double height;
  double width;
  double v7;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  CGFloat v12;
  size_t v13;
  CGAffineTransform *result;
  char v15;
  __int128 v16;
  CGAffineTransform v17;
  CGAffineTransform t1;
  CGAffineTransform v19;
  unint64_t v20;

  height = a2.size.height;
  width = a2.size.width;
  v7 = SVG::Length::computeValue((SVG::ImageElement *)((char *)this + 696), a2.size.width);
  v8 = SVG::Length::computeValue((SVG::ImageElement *)((char *)this + 712), height);
  v9 = SVG::Length::computeValue((SVG::ImageElement *)((char *)this + 728), width);
  v10 = SVG::Length::computeValue((SVG::ImageElement *)((char *)this + 744), height);
  *(_QWORD *)&v11 = -1;
  *((_QWORD *)&v11 + 1) = -1;
  *(_OWORD *)&v19.c = v11;
  *(_OWORD *)&v19.tx = v11;
  *(_OWORD *)&v19.a = v11;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (double)CGImageGetWidth(*((CGImageRef *)this + 96));
  v13 = CGImageGetHeight(*((CGImageRef *)this + 96));
  result = SVG::computeViewBoxTransform(*((CGAffineTransform **)this + 80), (uint64_t)&v19, 0.0, 0.0, v12, (double)v13, v7, v8, v9, v10);
  v15 = v20;
  if ((_BYTE)v20)
  {
    t1 = v19;
    v16 = *(_OWORD *)((char *)this + 664);
    *(_OWORD *)&v17.a = *(_OWORD *)((char *)this + 648);
    *(_OWORD *)&v17.c = v16;
    *(_OWORD *)&v17.tx = *(_OWORD *)((char *)this + 680);
    result = CGAffineTransformConcat((CGAffineTransform *)a3, &t1, &v17);
    v15 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 48) = v15;
  return result;
}

uint64_t SVG::ImageElement::appendChild()
{
  return 0;
}

void SVG::ImageElement::~ImageElement(SVG::ImageElement *this)
{
  SVG::ImageElement::~ImageElement(this);
  JUMPOUT(0x1BCCCA1B4);
}

{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  *(_QWORD *)this = &off_1E7137380;
  v2 = (const void *)*((_QWORD *)this + 96);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 95);
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)this + 128);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71388C0[v4])(&v9, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v5 = *((unsigned int *)this + 116);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E71388D8[v5])(&v10, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v6 = *((unsigned int *)this + 82);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71388F0[v6])(&v11, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v7 = *((unsigned int *)this + 66);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E71388D8[v7])(&v12, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v8 = *((unsigned int *)this + 36);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E71388F0[v8])(&v13, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

char *SVG::convertString(SVG *this, id a2)
{
  char *result;

  result = (char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  if (result)
    return (char *)std::string::basic_string[abi:nn180100]<0>(this, result);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return result;
}

_QWORD *__copy_helper_atomic_property_(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v3 = *(const void **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 != *(_QWORD *)a2)
  {
    v5 = result;
    std::vector<std::reference_wrapper<SVG::Element>>::__vallocate[abi:nn180100](result, v4 >> 3);
    v6 = (char *)v5[1];
    result = memmove(v6, v3, v4);
    v5[1] = &v6[v4];
  }
  return result;
}

char *__assign_helper_atomic_property_(char *result, const void **a2)
{
  char *v2;
  char *v3;
  char *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  char *v15;
  void *v16;
  char *v17;

  if (result != (char *)a2)
  {
    v2 = result;
    v3 = (char *)*a2;
    v4 = (char *)a2[1];
    v5 = v4 - (_BYTE *)*a2;
    v6 = v5 >> 3;
    v7 = *((_QWORD *)result + 2);
    v8 = *(char **)result;
    if (v5 >> 3 <= (unint64_t)((v7 - *(_QWORD *)result) >> 3))
    {
      v11 = (void **)(result + 8);
      v13 = (_BYTE *)*((_QWORD *)result + 1);
      v14 = (v13 - v8) >> 3;
      if (v14 < v6)
      {
        v15 = &v3[8 * v14];
        if (v13 != v8)
        {
          result = (char *)memmove(*(void **)result, *a2, v13 - v8);
          v8 = (char *)*v11;
        }
        v5 = v4 - v15;
        if (v4 == v15)
          goto LABEL_20;
        v16 = v8;
        v17 = v15;
        goto LABEL_19;
      }
    }
    else
    {
      if (v8)
      {
        *((_QWORD *)result + 1) = v8;
        operator delete(v8);
        v7 = 0;
        *(_QWORD *)v2 = 0;
        *((_QWORD *)v2 + 1) = 0;
        *((_QWORD *)v2 + 2) = 0;
      }
      if (v5 < 0)
        abort();
      v9 = v7 >> 2;
      if (v7 >> 2 <= v6)
        v9 = v5 >> 3;
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      result = std::vector<std::reference_wrapper<SVG::Element>>::__vallocate[abi:nn180100](v2, v10);
      v12 = (char *)*((_QWORD *)v2 + 1);
      v11 = (void **)(v2 + 8);
      v8 = v12;
    }
    if (v4 == v3)
    {
LABEL_20:
      *v11 = &v8[v5];
      return result;
    }
    v16 = v8;
    v17 = v3;
LABEL_19:
    result = (char *)memmove(v16, v17, v5);
    goto LABEL_20;
  }
  return result;
}

void __copy_helper_atomic_property__35(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD v29[3];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = a1 + 32;
  std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v28 = (_QWORD *)(a1 + 16);
    do
    {
      v6 = *((char *)v5 + 39);
      if (v6 >= 0)
        v7 = v5 + 2;
      else
        v7 = (uint64_t *)v5[2];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v5 + 39);
      else
        v8 = v5[3];
      v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v29, v7, v8);
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          v14 = v9;
          if (v9 >= v11)
            v14 = v9 % v11;
        }
        else
        {
          v14 = (v11 - 1) & v9;
        }
        v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
        if (v15)
        {
          for (i = *v15; i; i = *(unsigned __int8 **)i)
          {
            v17 = *((_QWORD *)i + 1);
            if (v17 == v10)
            {
              if ((std::equal_to<std::string>::operator()[abi:nn180100](v4, i + 16, (unsigned __int8 *)v5 + 16) & 1) != 0)
                goto LABEL_48;
            }
            else
            {
              if (v13 > 1)
              {
                if (v17 >= v11)
                  v17 %= v11;
              }
              else
              {
                v17 &= v11 - 1;
              }
              if (v17 != v14)
                break;
            }
          }
        }
      }
      else
      {
        v14 = 0xAAAAAAAAAAAAAAAALL;
      }
      v29[2] = 0xAAAAAAAAAAAAAA01;
      v18 = (char *)operator new(0x58uLL);
      v29[1] = a1 + 16;
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = v10;
      std::pair<std::string const,std::stack<std::string>>::pair[abi:nn180100]((std::string *)(v18 + 16), (__int128 *)v5 + 1);
      v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v20 = *(float *)(a1 + 32);
      if (!v11 || (float)(v20 * (float)v11) < v19)
      {
        v21 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3)
          v21 = 1;
        v22 = v21 | (2 * v11);
        v23 = vcvtps_u32_f32(v19 / v20);
        if (v22 <= v23)
          v24 = v23;
        else
          v24 = v22;
        std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>(a1, v24);
        v11 = *(_QWORD *)(a1 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v14 = v10 % v11;
          else
            v14 = v10;
        }
        else
        {
          v14 = (v11 - 1) & v10;
        }
      }
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
      if (v26)
      {
        *(_QWORD *)v18 = *v26;
      }
      else
      {
        *(_QWORD *)v18 = *v28;
        *v28 = v18;
        *(_QWORD *)(v25 + 8 * v14) = v28;
        if (!*(_QWORD *)v18)
          goto LABEL_47;
        v27 = *(_QWORD *)(*(_QWORD *)v18 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v27 >= v11)
            v27 %= v11;
        }
        else
        {
          v27 &= v11 - 1;
        }
        v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
      }
      *v26 = v18;
LABEL_47:
      v29[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::stack<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::stack<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)v29);
LABEL_48:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
}

void __assign_helper_atomic_property__36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  std::string **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::string **v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string **v28;
  unint64_t v29;
  std::string **v30;
  std::string *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string **v40;
  unint64_t v41;
  std::string **v42;
  std::string *v43;
  uint64_t v44;
  std::string *v45;
  std::string **v46;
  std::string *v47;
  BOOL v48;
  char *v49;
  std::string *v50;
  int v51;
  uint64_t *v52;
  unint64_t v53;
  std::string **v54;
  std::string *v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  if (a1 != a2)
  {
    v58 = v2;
    v59 = v3;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v5 = *(uint64_t **)(a2 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      if (v8)
        v9 = v5 == 0;
      else
        v9 = 1;
      if (!v9)
      {
        while (1)
        {
          std::string::operator=((std::string *)(v8 + 16), (const std::string *)(v5 + 2));
          if ((uint64_t *)v8 != v5)
          {
            v11 = v5[9];
            v12 = v11 / 0xAA;
            v13 = v5[6];
            if (v5[7] == v13)
            {
              v14 = 0;
              v17 = 0;
              v16 = (_QWORD *)(v13 + 8 * ((v5[10] + v11) / 0xAA));
            }
            else
            {
              v14 = (std::string *)(*(_QWORD *)(v13 + 8 * (v11 / 0xAA)) + 24 * (v11 % 0xAA));
              v15 = v5[10] + v11;
              v16 = (_QWORD *)(v13 + 8 * (v15 / 0xAA));
              v17 = *v16 + 24 * (v15 % 0xAA);
            }
            v18 = (std::string **)(v13 + 8 * v12);
            if ((std::string *)v17 == v14)
            {
              v19 = 0;
              v21 = (uint64_t *)(v8 + 80);
LABEL_20:
              v26 = *(_QWORD *)(v8 + 72);
              v27 = *(_QWORD *)(v8 + 48);
              v28 = (std::string **)(v27 + 8 * (v26 / 0xAA));
              if (*(_QWORD *)(v8 + 56) == v27)
                v29 = 0;
              else
                v29 = (unint64_t)&(*v28)[v26 % 0xAA];
              v54 = v18;
              v55 = v14;
              std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:nn180100](&v54, v19);
              v30 = v54;
              v31 = v55;
              v54 = v28;
              v55 = (std::string *)v29;
              std::__for_each_segment[abi:nn180100]<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>>>(v18, v14, v30, v31, (uint64_t)&v54);
              v32 = *(_QWORD *)(v8 + 72);
              v33 = *(_QWORD *)(v8 + 80);
              v34 = *(_QWORD *)(v8 + 48);
              v35 = *(_QWORD *)(v8 + 56);
              v36 = (_QWORD *)(v34 + 8 * ((v32 + v33) / 0xAA));
              if (v35 == v34)
                v37 = 0;
              else
                v37 = *v36 + 24 * ((v32 + v33) % 0xAA);
              if (v55 != (std::string *)v37)
              {
                v38 = ((char *)v55 - (char *)*v54) >> 3;
                v39 = 170 * ((std::string **)v36 - v54)
                    - 0x5555555555555555 * ((uint64_t)(v37 - *v36) >> 3)
                    + 0x5555555555555555 * v38;
                if (v39 >= 1)
                {
                  v40 = (std::string **)(v34 + 8 * (v32 / 0xAA));
                  if (v35 == v34)
                    v41 = 0;
                  else
                    v41 = (unint64_t)&(*v40)[v32 % 0xAA];
                  if (v55 == (std::string *)v41)
                    v44 = 0;
                  else
                    v44 = 170 * (v54 - v40)
                        - 0x5555555555555555 * v38
                        + 0x5555555555555555 * ((uint64_t)(v41 - (_QWORD)*v40) >> 3);
                  v54 = v40;
                  v55 = (std::string *)v41;
                  std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:nn180100](&v54, v44);
                  v45 = v55;
                  if (v55 != (std::string *)v37)
                  {
                    v46 = v54;
                    do
                    {
                      if (SHIBYTE(v45->__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v45->__r_.__value_.__l.__data_);
                      if ((char *)++v45 - (char *)*v46 == 4080)
                      {
                        v47 = v46[1];
                        ++v46;
                        v45 = v47;
                      }
                    }
                    while (v45 != (std::string *)v37);
                    v33 = *v21;
                  }
                  *v21 = v33 - v39;
                  while (std::deque<std::string>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)(v8 + 40)))
                    ;
                }
              }
              goto LABEL_46;
            }
            v19 = 170 * ((std::string **)v16 - v18)
                - 0x5555555555555555 * ((uint64_t)(v17 - *v16) >> 3)
                + 0x5555555555555555 * (((char *)v14 - (char *)*v18) >> 3);
            v21 = (uint64_t *)(v8 + 80);
            v20 = *(_QWORD *)(v8 + 80);
            if (v20 >= v19)
              goto LABEL_20;
            v54 = (std::string **)(v13 + 8 * v12);
            v55 = v14;
            std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:nn180100](&v54, v20);
            v22 = *(_QWORD *)(v8 + 72);
            v23 = *(_QWORD *)(v8 + 48);
            v24 = (std::string **)(v23 + 8 * (v22 / 0xAA));
            if (*(_QWORD *)(v8 + 56) == v23)
              v25 = 0;
            else
              v25 = (unint64_t)&(*v24)[v22 % 0xAA];
            v42 = v54;
            v43 = v55;
            v54 = v24;
            v55 = (std::string *)v25;
            std::__for_each_segment[abi:nn180100]<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>>>(v18, v14, v42, v43, (uint64_t)&v54);
            std::deque<std::string>::__append_with_size[abi:nn180100]<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>>((_QWORD *)(v8 + 40), v42, (__int128 *)v43, v19 - *v21);
          }
LABEL_46:
          v10 = *(_QWORD **)v8;
          std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::__node_insert_multi(a1, v8);
          v5 = (uint64_t *)*v5;
          if (v10)
            v48 = v5 == 0;
          else
            v48 = 1;
          v8 = (uint64_t)v10;
          if (v48)
            goto LABEL_51;
        }
      }
      v10 = (_QWORD *)v8;
LABEL_51:
      std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::__deallocate_node(v10);
    }
    for (; v5; v5 = (uint64_t *)*v5)
    {
      v56 = 0xAAAAAAAAAAAAAA01;
      v49 = (char *)operator new(0x58uLL);
      v55 = (std::string *)(a1 + 16);
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
      v50 = std::pair<std::string const,std::stack<std::string>>::pair[abi:nn180100]((std::string *)(v49 + 16), (__int128 *)v5 + 1);
      v51 = v49[39];
      if (v51 >= 0)
        v52 = (uint64_t *)v50;
      else
        v52 = (uint64_t *)*((_QWORD *)v49 + 2);
      if (v51 >= 0)
        v53 = v49[39];
      else
        v53 = *((_QWORD *)v49 + 3);
      *((_QWORD *)v49 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v57, v52, v53);
      std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::__node_insert_multi(a1, (uint64_t)v49);
      v54 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::stack<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::stack<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v54);
    }
  }
}

uint64_t *OTSVGDocumentCreate(std::mutex **a1, unint64_t a2, const __CFArray *a3)
{
  std::mutex *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  std::mutex *v13;
  uint64_t sig;
  unsigned int Length;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t *v19;
  const __CFAllocator *v21;
  const UInt8 *BytePtr;
  SVG *v23;
  std::mutex *v24;
  std::mutex *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *i;
  unint64_t v38;
  std::mutex *v39;
  _QWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  float v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  int8x8_t prime;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  std::mutex *v68;

  v6 = *a1;
  std::mutex::lock(*a1);
  v7 = *(int8x8_t *)&(*a1)[1].__m_.__opaque[48];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (*(_QWORD *)&v7 <= a2)
        v9 = a2 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & a2;
    }
    v10 = *(_QWORD **)(*(_QWORD *)&(*a1)[1].__m_.__opaque[40] + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == a2)
          {
            if (v11[2] == a2)
            {
              if (v11[3])
              {
                v19 = (uint64_t *)operator new();
                v30 = v11[4];
                *v19 = v11[3];
                v19[1] = v30;
                if (v30)
                {
                  v31 = (unint64_t *)(v30 + 8);
                  do
                    v32 = __ldxr(v31);
                  while (__stxr(v32 + 1, v31));
                }
              }
              else
              {
                v19 = 0;
              }
              std::mutex::unlock(v6);
              return v19;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v7)
                v12 %= *(_QWORD *)&v7;
            }
            else
            {
              v12 &= *(_QWORD *)&v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  std::mutex::unlock(v6);
  if ((a2 & 0x8000000000000000) != 0)
    return 0;
  v13 = *a1;
  if (*(_QWORD *)(*a1)[1].__m_.__opaque <= (int64_t)a2)
    return 0;
  sig = v13[1].__m_.__sig;
  Length = CFDataGetLength(*(CFDataRef *)&v13[1].__m_.__opaque[8]);
  v16 = sig + 12 * a2;
  v18 = *(_DWORD *)(v16 + 8);
  v17 = (unsigned int *)(v16 + 8);
  if (*(_QWORD *)&(*a1)[1].__m_.__opaque[16] + bswap32(v18) + bswap32(*(v17 - 1)) > (uint64_t)Length)
    return 0;
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)&(*a1)[1].__m_.__opaque[8]);
  v23 = CFDataCreate(v21, &BytePtr[*(_QWORD *)&(*a1)[1].__m_.__opaque[16] + bswap32(*(v17 - 1))], bswap32(*v17));
  v19 = OTSVGDocumentCreateWithData(v23, *(unsigned int *)&(*a1)[1].__m_.__opaque[24], a3, *(double *)&(*a1)[1].__m_.__opaque[32]);
  v24 = *a1;
  std::mutex::lock(*a1);
  v25 = *a1;
  if (v19)
  {
    v26 = *v19;
    v27 = (std::__shared_weak_count *)v19[1];
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  v33 = *(_QWORD *)&v25[1].__m_.__opaque[48];
  v68 = v24;
  if (v33)
  {
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
    v34.i16[0] = vaddlv_u8(v34);
    if (v34.u32[0] > 1uLL)
    {
      v35 = a2;
      if (v33 <= a2)
        v35 = a2 % v33;
    }
    else
    {
      v35 = (v33 - 1) & a2;
    }
    v36 = *(_QWORD **)(*(_QWORD *)&v25[1].__m_.__opaque[40] + 8 * v35);
    if (v36)
    {
      for (i = (_QWORD *)*v36; i; i = (_QWORD *)*i)
      {
        v38 = i[1];
        if (v38 == a2)
        {
          if (i[2] == a2)
            goto LABEL_111;
        }
        else
        {
          if (v34.u32[0] > 1uLL)
          {
            if (v38 >= v33)
              v38 %= v33;
          }
          else
          {
            v38 &= v33 - 1;
          }
          if (v38 != v35)
            break;
        }
      }
    }
  }
  else
  {
    v35 = 0xAAAAAAAAAAAAAAAALL;
  }
  v39 = v25 + 2;
  v40 = operator new(0x28uLL);
  *v40 = 0;
  v40[1] = a2;
  v40[2] = a2;
  v40[3] = v26;
  v40[4] = v27;
  if (v27)
  {
    v41 = (unint64_t *)&v27->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = (float)(unint64_t)(*(_QWORD *)v25[2].__m_.__opaque + 1);
  v44 = *(float *)&v25[2].__m_.__opaque[8];
  if (!v33 || (float)(v44 * (float)v33) < v43)
  {
    v45 = 1;
    if (v33 >= 3)
      v45 = (v33 & (v33 - 1)) != 0;
    v46 = v45 | (2 * v33);
    v47 = vcvtps_u32_f32(v43 / v44);
    if (v46 <= v47)
      prime = (int8x8_t)v47;
    else
      prime = (int8x8_t)v46;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v33 = *(_QWORD *)&v25[1].__m_.__opaque[48];
    if (*(_QWORD *)&prime > v33)
      goto LABEL_65;
    if (*(_QWORD *)&prime < v33)
    {
      v55 = vcvtps_u32_f32((float)*(unint64_t *)v25[2].__m_.__opaque / *(float *)&v25[2].__m_.__opaque[8]);
      if (v33 < 3 || (v56 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v56.i16[0] = vaddlv_u8(v56), v56.u32[0] > 1uLL))
      {
        v55 = std::__next_prime(v55);
      }
      else
      {
        v57 = 1 << -(char)__clz(v55 - 1);
        if (v55 >= 2)
          v55 = v57;
      }
      if (*(_QWORD *)&prime <= v55)
        prime = (int8x8_t)v55;
      if (*(_QWORD *)&prime >= v33)
      {
        v33 = *(_QWORD *)&v25[1].__m_.__opaque[48];
      }
      else
      {
        if (prime)
        {
LABEL_65:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v49 = operator new(8 * *(_QWORD *)&prime);
          v50 = *(void **)&v25[1].__m_.__opaque[40];
          *(_QWORD *)&v25[1].__m_.__opaque[40] = v49;
          if (v50)
            operator delete(v50);
          v51 = 0;
          *(int8x8_t *)&v25[1].__m_.__opaque[48] = prime;
          do
            *(_QWORD *)(*(_QWORD *)&v25[1].__m_.__opaque[40] + 8 * v51++) = 0;
          while (*(_QWORD *)&prime != v51);
          v52 = (_QWORD *)v39->__m_.__sig;
          if (v39->__m_.__sig)
          {
            v53 = v52[1];
            v54 = (uint8x8_t)vcnt_s8(prime);
            v54.i16[0] = vaddlv_u8(v54);
            if (v54.u32[0] > 1uLL)
            {
              if (v53 >= *(_QWORD *)&prime)
                v53 %= *(_QWORD *)&prime;
            }
            else
            {
              v53 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v25[1].__m_.__opaque[40] + 8 * v53) = v39;
            v58 = (_QWORD *)*v52;
            if (*v52)
            {
              do
              {
                v59 = v58[1];
                if (v54.u32[0] > 1uLL)
                {
                  if (v59 >= *(_QWORD *)&prime)
                    v59 %= *(_QWORD *)&prime;
                }
                else
                {
                  v59 &= *(_QWORD *)&prime - 1;
                }
                if (v59 != v53)
                {
                  v60 = *(_QWORD *)&v25[1].__m_.__opaque[40];
                  if (!*(_QWORD *)(v60 + 8 * v59))
                  {
                    *(_QWORD *)(v60 + 8 * v59) = v52;
                    goto LABEL_92;
                  }
                  *v52 = *v58;
                  *v58 = **(_QWORD **)(*(_QWORD *)&v25[1].__m_.__opaque[40] + 8 * v59);
                  **(_QWORD **)(*(_QWORD *)&v25[1].__m_.__opaque[40] + 8 * v59) = v58;
                  v58 = v52;
                }
                v59 = v53;
LABEL_92:
                v52 = v58;
                v58 = (_QWORD *)*v58;
                v53 = v59;
              }
              while (v58);
            }
          }
          v33 = (unint64_t)prime;
          goto LABEL_96;
        }
        v67 = *(void **)&v25[1].__m_.__opaque[40];
        *(_QWORD *)&v25[1].__m_.__opaque[40] = 0;
        if (v67)
          operator delete(v67);
        v33 = 0;
        *(_QWORD *)&v25[1].__m_.__opaque[48] = 0;
      }
    }
LABEL_96:
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v33 <= a2)
        v35 = a2 % v33;
      else
        v35 = a2;
    }
    else
    {
      v35 = (v33 - 1) & a2;
    }
  }
  v61 = *(_QWORD *)&v25[1].__m_.__opaque[40];
  v62 = *(_QWORD **)(v61 + 8 * v35);
  if (v62)
  {
    *v40 = *v62;
    v24 = v68;
  }
  else
  {
    v63 = v39->__m_.__sig;
    *v40 = v39->__m_.__sig;
    v39->__m_.__sig = (uint64_t)v40;
    *(_QWORD *)(v61 + 8 * v35) = v39;
    v24 = v68;
    if (!v63)
      goto LABEL_110;
    v64 = *(_QWORD *)(v63 + 8);
    if ((v33 & (v33 - 1)) != 0)
    {
      if (v64 >= v33)
        v64 %= v33;
    }
    else
    {
      v64 &= v33 - 1;
    }
    v62 = (_QWORD *)(*(_QWORD *)&v25[1].__m_.__opaque[40] + 8 * v64);
  }
  *v62 = v40;
LABEL_110:
  ++*(_QWORD *)v25[2].__m_.__opaque;
LABEL_111:
  if (v27)
  {
    v65 = (unint64_t *)&v27->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::mutex::unlock(v24);
  if (v23)
    CFRelease(v23);
  return v19;
}

_QWORD *OTSVGDocumentCreateWithData(SVG *a1, uint64_t a2, const __CFArray *a3, double a4)
{
  int v6;
  _OTSVGParserDelegate *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef *v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t j;
  void *v37;
  void *v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t k;
  void *v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t m;
  void *v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t n;
  void *v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t ii;
  void *v72;
  void *v73;
  unint64_t v74;
  _QWORD *v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  int v87;
  const __CFArray *cf;
  _OTSVGParserDelegate *v89;
  void *__p[2];
  __int128 v91;
  int v92;
  int v93;
  void *v94[2];
  __int128 v95;
  int v96;
  int v97;
  void *v98[2];
  void *v99[2];
  int v100;
  int v101;
  void *v102[2];
  void *v103[2];
  unint64_t v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  void *v108[2];
  void *v109[2];
  unint64_t v110;
  CFTypeRef v111;
  _QWORD *v112;
  _QWORD v113[3];
  const __CFArray *v114;
  _QWORD *v115;
  _QWORD v116[8];
  _QWORD v117[2];
  void **v118;
  void **v119;
  void **v120;
  _QWORD *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  _BYTE v130[64];
  _BYTE v131[16];
  int v132;
  _BYTE v133[48];
  int v134;
  _BYTE v135[16];
  int v136;
  _BYTE v137[48];
  int v138;
  _BYTE v139[32];
  int v140;
  uint64_t v141;

  v6 = a2;
  v141 = *MEMORY[0x1E0C80C00];
  v112 = 0;
  v8 = -[_OTSVGParserDelegate initWithUnitsPerEm:]([_OTSVGParserDelegate alloc], "initWithUnitsPerEm:", a2);
  -[_OTSVGParserDelegate setRoot:](v8, "setRoot:", &v112);
  v111 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  SVG::unzipData(a1, &v111);
  if (v111)
    a1 = (SVG *)v111;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B28]), "initWithData:", a1);
  objc_msgSend(v9, "setShouldProcessNamespaces:", 1);
  objc_msgSend(v9, "setShouldReportNamespacePrefixes:", 1);
  objc_msgSend(v9, "setDelegate:", v8);
  objc_msgSend(v9, "parse");
  v10 = 0;
  if (!-[_OTSVGParserDelegate errorOccurred](v8, "errorOccurred"))
  {
    v11 = v112;
    if (v112)
    {
      v87 = v6;
      *(_OWORD *)v108 = 0u;
      *(_OWORD *)v109 = 0u;
      v110 = 0xAAAAAAAA3F800000;
      SVG::populateIdMapWithRealIds((uint64_t)v108, (uint64_t)v112);
      SVG::populateIdMapWithFakeIds((uint64_t)v108, (uint64_t)v11, 0);
      v105 = 0u;
      v106 = 0u;
      v107 = 0xAAAAAAAA3F800000;
      SVG::populateReferenceMap((uint64_t)&v105, v108, v112);
      *(_OWORD *)v102 = 0u;
      *(_OWORD *)v103 = 0u;
      v104 = 0xAAAAAAAA3F800000;
      SVG::Presentation::defaultPresentation((uint64_t)v130);
      SVG::Presentation::defaultPresentation((uint64_t)v116);
      SVG::populateDirectlyInheritedPresentationMap((uint64_t *)v102, (const SVG::Presentation *)v130, (const SVG::Presentation *)v116, (unint64_t)v112);
      if (v129 != -1)
        ((void (*)(void **, uint64_t *))off_1E7138938[v129])(v98, &v128);
      v129 = -1;
      if (v127 != -1)
        ((void (*)(void **, uint64_t *))off_1E7138920[v127])(v98, &v126);
      v127 = -1;
      if (v125 != -1)
        ((void (*)(void **, uint64_t *))off_1E7138908[v125])(v98, &v124);
      v125 = -1;
      if (v123 != -1)
        ((void (*)(void **, uint64_t *))off_1E7138920[v123])(v98, &v122);
      v123 = -1;
      if ((_DWORD)v118 != -1)
        ((void (*)(void **, _QWORD *))off_1E7138908[v118])(v98, v117);
      if (v140 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138938[v140])(v116, v139);
      v140 = -1;
      if (v138 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138920[v138])(v116, v137);
      v138 = -1;
      if (v136 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138908[v136])(v116, v135);
      v136 = -1;
      if (v134 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138920[v134])(v116, v133);
      v134 = -1;
      if (v132 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138908[v132])(v116, v131);
      *(_OWORD *)v98 = 0u;
      *(_OWORD *)v99 = 0u;
      v100 = 1065353216;
      v101 = -1431655766;
      SVG::populateGradientMap((uint64_t *)v98, &v105, v102, a3, v112);
      *(_OWORD *)v94 = 0u;
      v95 = 0u;
      v96 = 1065353216;
      v97 = -1431655766;
      *(_OWORD *)__p = 0u;
      v91 = 0u;
      v92 = 1065353216;
      v93 = -1431655766;
      SVG::Presentation::defaultPresentation((uint64_t)v130);
      v12 = v112;
      cf = a3;
      v114 = a3;
      memset(v113, 170, sizeof(v113));
      SVG::analyzeDependencies((uint64_t)&v105, (unint64_t)v102, (uint64_t)v130, v112, (uint64_t)v113);
      v14 = (unsigned int *)v113[0];
      v13 = (unsigned int *)v113[1];
      v89 = v8;
      if (v113[0] != v113[1])
      {
        do
        {
          v116[0] = &v114;
          v116[1] = &v105;
          v116[2] = v98;
          v116[3] = v94;
          v116[4] = __p;
          v116[5] = v102;
          v116[6] = v12;
          v116[7] = &v114;
          v117[0] = &v105;
          v117[1] = v98;
          v118 = v94;
          v119 = __p;
          v120 = v102;
          v121 = v12;
          v15 = v14[2];
          if ((_DWORD)v15 == -1)
            std::__throw_bad_variant_access[abi:nn180100]();
          v115 = v116;
          ((void (*)(_QWORD **, unsigned int *))off_1E7138950[v15])(&v115, v14);
          v14 += 4;
        }
        while (v14 != v13);
        v14 = (unsigned int *)v113[0];
      }
      if (v14)
      {
        v113[1] = v14;
        operator delete(v14);
      }
      if (v140 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138938[v140])(v116, v139);
      v140 = -1;
      if (v138 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138920[v138])(v116, v137);
      v138 = -1;
      if (v136 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138908[v136])(v116, v135);
      v136 = -1;
      if (v134 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138920[v134])(v116, v133);
      v134 = -1;
      if (v132 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E7138908[v132])(v116, v131);
      v16 = operator new();
      *(_QWORD *)v16 = 850045863;
      *(_OWORD *)(v16 + 88) = 0u;
      v17 = (CFTypeRef *)(v16 + 88);
      *(_OWORD *)(v16 + 8) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_QWORD *)(v16 + 56) = 0;
      *(_OWORD *)(v16 + 104) = 0u;
      *(_QWORD *)(v16 + 120) = 0;
      *(_DWORD *)(v16 + 128) = 1065353216;
      *(_OWORD *)(v16 + 136) = 0u;
      v18 = (void **)(v16 + 136);
      *(_OWORD *)(v16 + 152) = 0u;
      *(_OWORD *)(v16 + 176) = 0u;
      v19 = (void **)(v16 + 176);
      *(_DWORD *)(v16 + 168) = 1065353216;
      *(_OWORD *)(v16 + 192) = 0u;
      *(_DWORD *)(v16 + 208) = 1065353216;
      *(_OWORD *)(v16 + 216) = 0u;
      v20 = (void **)(v16 + 216);
      *(_OWORD *)(v16 + 232) = 0u;
      *(_DWORD *)(v16 + 248) = 1065353216;
      *(_OWORD *)(v16 + 256) = 0u;
      *(_OWORD *)(v16 + 272) = 0u;
      *(_DWORD *)(v16 + 288) = 1065353216;
      v21 = (void **)(v16 + 296);
      *(_OWORD *)(v16 + 296) = 0u;
      *(_OWORD *)(v16 + 312) = 0u;
      *(_DWORD *)(v16 + 328) = 1065353216;
      *(_OWORD *)(v16 + 336) = 0u;
      *(_OWORD *)(v16 + 352) = 0u;
      *(_DWORD *)(v16 + 368) = 1065353216;
      v22 = (std::__shared_weak_count *)operator new();
      v22->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137C98;
      v22->__shared_weak_owners_ = 0;
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
      v24 = v22;
      v25 = v112;
      v112 = 0;
      *(_QWORD *)(v16 + 64) = v25;
      *(_DWORD *)(v16 + 72) = v87;
      *(double *)(v16 + 80) = a4;
      if (cf)
      {
        CFRetain(cf);
        if (*v17)
          CFRelease(*v17);
      }
      *(_QWORD *)(v16 + 88) = cf;
      v26 = v24;
      v8 = v89;
      if (*(_QWORD *)(v16 + 120))
      {
        std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::__deallocate_node(*(void ***)(v16 + 112));
        *(_QWORD *)(v16 + 112) = 0;
        v27 = *(_QWORD *)(v16 + 104);
        if (v27)
        {
          for (i = 0; i != v27; ++i)
            *(_QWORD *)(*(_QWORD *)(v16 + 96) + 8 * i) = 0;
        }
        *(_QWORD *)(v16 + 120) = 0;
      }
      v29 = v108[0];
      v108[0] = 0;
      v30 = *(void **)(v16 + 96);
      *(_QWORD *)(v16 + 96) = v29;
      if (v30)
        operator delete(v30);
      v31 = (unint64_t)v108[1];
      v32 = v109[0];
      *(void **)(v16 + 112) = v109[0];
      *(_QWORD *)(v16 + 104) = v31;
      v108[1] = 0;
      v33 = v109[1];
      *(void **)(v16 + 120) = v109[1];
      *(_DWORD *)(v16 + 128) = v110;
      if (v33)
      {
        v34 = v32[1];
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v34 >= v31)
            v34 %= v31;
        }
        else
        {
          v34 &= v31 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(v16 + 96) + 8 * v34) = v16 + 112;
        v109[0] = 0;
        v109[1] = 0;
      }
      if (*(_QWORD *)(v16 + 200))
      {
        std::__hash_table<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::__unordered_map_hasher<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,true>,std::__unordered_map_equal<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::equal_to<SVG::GradientElement const*>,std::hash<SVG::GradientElement const*>,true>,std::allocator<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>>>::__deallocate_node(*(_QWORD **)(v16 + 192));
        *(_QWORD *)(v16 + 192) = 0;
        v35 = *(_QWORD *)(v16 + 184);
        if (v35)
        {
          for (j = 0; j != v35; ++j)
            *((_QWORD *)*v19 + j) = 0;
        }
        *(_QWORD *)(v16 + 200) = 0;
      }
      v37 = v98[0];
      v98[0] = 0;
      v38 = *v19;
      *v19 = v37;
      if (v38)
        operator delete(v38);
      v39 = (unint64_t)v98[1];
      v40 = v99[0];
      *(void **)(v16 + 192) = v99[0];
      *(_QWORD *)(v16 + 184) = v39;
      v98[1] = 0;
      v41 = v99[1];
      *(void **)(v16 + 200) = v99[1];
      *(_DWORD *)(v16 + 208) = v100;
      if (v41)
      {
        v42 = v40[1];
        if ((v39 & (v39 - 1)) != 0)
        {
          if (v42 >= v39)
            v42 %= v39;
        }
        else
        {
          v42 &= v39 - 1;
        }
        *((_QWORD *)*v19 + v42) = v16 + 192;
        v99[0] = 0;
        v99[1] = 0;
      }
      if (*(_QWORD *)(v16 + 240))
      {
        std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::__deallocate_node(*(_QWORD **)(v16 + 232));
        *(_QWORD *)(v16 + 232) = 0;
        v43 = *(_QWORD *)(v16 + 224);
        if (v43)
        {
          for (k = 0; k != v43; ++k)
            *((_QWORD *)*v20 + k) = 0;
        }
        *(_QWORD *)(v16 + 240) = 0;
      }
      v45 = v94[0];
      v94[0] = 0;
      v46 = *v20;
      *v20 = v45;
      if (v46)
        operator delete(v46);
      v47 = (unint64_t)v94[1];
      v48 = v95;
      *(_QWORD *)(v16 + 232) = v95;
      *(_QWORD *)(v16 + 224) = v47;
      v94[1] = 0;
      v49 = *((_QWORD *)&v95 + 1);
      *(_QWORD *)(v16 + 240) = *((_QWORD *)&v95 + 1);
      *(_DWORD *)(v16 + 248) = v96;
      if (v49)
      {
        v50 = *(_QWORD *)(v48 + 8);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v50 >= v47)
            v50 %= v47;
        }
        else
        {
          v50 &= v47 - 1;
        }
        *((_QWORD *)*v20 + v50) = v16 + 232;
        v95 = 0uLL;
      }
      v51 = (void **)(v16 + 256);
      if (*(_QWORD *)(v16 + 280))
      {
        std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::__deallocate_node(*(_QWORD **)(v16 + 272));
        *(_QWORD *)(v16 + 272) = 0;
        v52 = *(_QWORD *)(v16 + 264);
        if (v52)
        {
          for (m = 0; m != v52; ++m)
            *((_QWORD *)*v51 + m) = 0;
        }
        *(_QWORD *)(v16 + 280) = 0;
      }
      v54 = __p[0];
      __p[0] = 0;
      v55 = *v51;
      *v51 = v54;
      if (v55)
        operator delete(v55);
      v56 = (unint64_t)__p[1];
      v57 = v91;
      __p[1] = 0;
      v58 = *((_QWORD *)&v91 + 1);
      *(_QWORD *)(v16 + 272) = v91;
      *(_QWORD *)(v16 + 280) = v58;
      *(_DWORD *)(v16 + 288) = v92;
      *(_QWORD *)(v16 + 264) = v56;
      if (v58)
      {
        v59 = *(_QWORD *)(v57 + 8);
        if ((v56 & (v56 - 1)) != 0)
        {
          if (v59 >= v56)
            v59 %= v56;
        }
        else
        {
          v59 &= v56 - 1;
        }
        *((_QWORD *)*v51 + v59) = v16 + 272;
        v91 = 0uLL;
      }
      if (*(_QWORD *)(v16 + 160))
      {
        v60 = *(_QWORD **)(v16 + 152);
        if (v60)
        {
          do
          {
            v61 = (_QWORD *)*v60;
            operator delete(v60);
            v60 = v61;
          }
          while (v61);
        }
        *(_QWORD *)(v16 + 152) = 0;
        v62 = *(_QWORD *)(v16 + 144);
        if (v62)
        {
          for (n = 0; n != v62; ++n)
            *((_QWORD *)*v18 + n) = 0;
        }
        *(_QWORD *)(v16 + 160) = 0;
      }
      v64 = (void *)v105;
      *(_QWORD *)&v105 = 0;
      v65 = *v18;
      *v18 = v64;
      if (v65)
        operator delete(v65);
      v66 = *((_QWORD *)&v105 + 1);
      v67 = v106;
      *(_QWORD *)(v16 + 152) = v106;
      *(_QWORD *)(v16 + 144) = v66;
      *((_QWORD *)&v105 + 1) = 0;
      v68 = *((_QWORD *)&v106 + 1);
      *(_QWORD *)(v16 + 160) = *((_QWORD *)&v106 + 1);
      *(_DWORD *)(v16 + 168) = v107;
      if (v68)
      {
        v69 = *(_QWORD *)(v67 + 8);
        if ((v66 & (v66 - 1)) != 0)
        {
          if (v69 >= v66)
            v69 %= v66;
        }
        else
        {
          v69 &= v66 - 1;
        }
        *((_QWORD *)*v18 + v69) = v16 + 152;
        v106 = 0uLL;
      }
      if (*(_QWORD *)(v16 + 320))
      {
        std::__hash_table<std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::__unordered_map_hasher<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,true>,std::__unordered_map_equal<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::equal_to<SVG::Element const*>,std::hash<SVG::Element const*>,true>,std::allocator<std::__hash_value_type<SVG::Element const*,SVG::Presentation>>>::__deallocate_node(*(unsigned int **)(v16 + 312));
        *(_QWORD *)(v16 + 312) = 0;
        v70 = *(_QWORD *)(v16 + 304);
        if (v70)
        {
          for (ii = 0; ii != v70; ++ii)
            *((_QWORD *)*v21 + ii) = 0;
        }
        *(_QWORD *)(v16 + 320) = 0;
      }
      v72 = v102[0];
      v102[0] = 0;
      v73 = *v21;
      *v21 = v72;
      if (v73)
        operator delete(v73);
      v74 = (unint64_t)v102[1];
      v75 = v103[0];
      v102[1] = 0;
      v76 = v103[1];
      *(void **)(v16 + 312) = v103[0];
      *(_QWORD *)(v16 + 320) = v76;
      *(_DWORD *)(v16 + 328) = v104;
      *(_QWORD *)(v16 + 304) = v74;
      if (v76)
      {
        v77 = v75[1];
        if ((v74 & (v74 - 1)) != 0)
        {
          if (v77 >= v74)
            v77 %= v74;
        }
        else
        {
          v77 &= v74 - 1;
        }
        *((_QWORD *)*v21 + v77) = v16 + 312;
        v103[0] = 0;
        v103[1] = 0;
      }
      v10 = (_QWORD *)operator new();
      *v10 = v16;
      v10[1] = v26;
      do
        v78 = __ldxr(p_shared_owners);
      while (__stxr(v78 + 1, p_shared_owners));
      do
        v79 = __ldaxr(p_shared_owners);
      while (__stlxr(v79 - 1, p_shared_owners));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::__deallocate_node((_QWORD *)v91);
      v80 = __p[0];
      __p[0] = 0;
      if (v80)
        operator delete(v80);
      std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::__deallocate_node((_QWORD *)v95);
      v81 = v94[0];
      v94[0] = 0;
      if (v81)
        operator delete(v81);
      std::__hash_table<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::__unordered_map_hasher<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,true>,std::__unordered_map_equal<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::equal_to<SVG::GradientElement const*>,std::hash<SVG::GradientElement const*>,true>,std::allocator<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>>>::__deallocate_node((_QWORD *)v99[0]);
      v82 = v98[0];
      v98[0] = 0;
      if (v82)
        operator delete(v82);
      std::__hash_table<std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::__unordered_map_hasher<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,true>,std::__unordered_map_equal<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::equal_to<SVG::Element const*>,std::hash<SVG::Element const*>,true>,std::allocator<std::__hash_value_type<SVG::Element const*,SVG::Presentation>>>::__deallocate_node((unsigned int *)v103[0]);
      v83 = v102[0];
      v102[0] = 0;
      if (v83)
        operator delete(v83);
      std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)&v105);
      std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::__deallocate_node((void **)v109[0]);
      v84 = v108[0];
      v108[0] = 0;
      if (v84)
        operator delete(v84);
    }
    else
    {
      v10 = 0;
    }
  }

  if (v111)
    CFRelease(v111);

  v85 = v112;
  v112 = 0;
  if (v85)
    (*(void (**)(_QWORD *))(*v85 + 8))(v85);
  return v10;
}

void SVG::populateReferenceMap(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const __CFURL **v6;
  const __CFURL **v7;
  const __CFURL *v9;
  __int128 v10;
  unsigned __int8 *v11;
  const __CFURL *v13;
  __int128 v14;
  unsigned __int8 *v15;
  const __CFURL *v17;
  __int128 v18;
  unsigned __int8 *v19;
  const __CFURL *v21;
  __int128 v22;
  unsigned __int8 *v23;
  void *v24;
  const __CFURL *v25;
  __int128 v26;
  unsigned __int8 *v27;
  void *v28;
  const __CFURL *v29;
  __int128 v30;
  unsigned __int8 *v31;
  void *v32;
  const __CFURL *v33;
  __int128 v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *__p[2];
  __int128 v40;

  if (v6)
  {
    v7 = v6;
    if (*((_DWORD *)v6 + 20) == 2 && *((_BYTE *)v6 + 72) != 0)
    {
      v9 = v6[8];
      if (v9)
      {
        *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__p = v10;
        v40 = v10;
        SVG::extractValidFragment((SVG *)__p, v9);
        if (BYTE8(v40))
        {
          v11 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
          if (v11)
            std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v9, (uint64_t)v9, *((_QWORD *)v11 + 5));
          if (BYTE8(v40) && SBYTE7(v40) < 0)
            operator delete(__p[0]);
        }
      }
    }
    if (*((_DWORD *)v7 + 66) == 2 && *((_BYTE *)v7 + 256) != 0)
    {
      v13 = v7[31];
      if (v13)
      {
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__p = v14;
        v40 = v14;
        SVG::extractValidFragment((SVG *)__p, v13);
        if (BYTE8(v40))
        {
          v15 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
          if (v15)
            std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v13, (uint64_t)v13, *((_QWORD *)v15 + 5));
          if (BYTE8(v40) && SBYTE7(v40) < 0)
            operator delete(__p[0]);
        }
      }
    }
    if (*((_DWORD *)v7 + 50) == 2 && *((_DWORD *)v7 + 48) == 3)
    {
      v17 = v7[20];
      if (v17)
      {
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__p = v18;
        v40 = v18;
        SVG::extractValidFragment((SVG *)__p, v17);
        if (BYTE8(v40))
        {
          v19 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
          if (v19)
            std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v7[20], (uint64_t)v7[20], *((_QWORD *)v19 + 5));
          if (BYTE8(v40) && SBYTE7(v40) < 0)
            operator delete(__p[0]);
        }
      }
    }
    if (*((_DWORD *)v7 + 100) == 2 && *((_DWORD *)v7 + 98) == 3)
    {
      v21 = v7[45];
      if (v21)
      {
        *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)__p = v22;
        v40 = v22;
        SVG::extractValidFragment((SVG *)__p, v21);
        if (BYTE8(v40))
        {
          v23 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
          if (v23)
            std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v7[45], (uint64_t)v7[45], *((_QWORD *)v23 + 5));
          if (BYTE8(v40) && SBYTE7(v40) < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  if (v24)
  {
    v25 = (const __CFURL *)*((_QWORD *)v24 + 94);
    if (v25)
    {
      *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v26;
      v40 = v26;
      SVG::extractValidFragment((SVG *)__p, v25);
      if (BYTE8(v40))
      {
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
        if (v27)
          std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v25, (uint64_t)v25, *((_QWORD *)v27 + 5));
        if (BYTE8(v40) && SBYTE7(v40) < 0)
          operator delete(__p[0]);
      }
    }
  }
  if (v28)
  {
    v29 = (const __CFURL *)*((_QWORD *)v28 + 80);
    if (v29)
    {
      *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v30;
      v40 = v30;
      SVG::extractValidFragment((SVG *)__p, v29);
      if (BYTE8(v40))
      {
        v31 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
        if (v31)
          std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v29, (uint64_t)v29, *((_QWORD *)v31 + 5));
        if (BYTE8(v40) && SBYTE7(v40) < 0)
          operator delete(__p[0]);
      }
    }
  }
  if (v32)
  {
    v33 = (const __CFURL *)*((_QWORD *)v32 + 108);
    if (v33)
    {
      *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v34;
      v40 = v34;
      SVG::extractValidFragment((SVG *)__p, v33);
      if (BYTE8(v40))
      {
        v35 = std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>(a2, (uint64_t)__p);
        if (v35)
          std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(a1, (unint64_t)v33, (uint64_t)v33, *((_QWORD *)v35 + 5));
        if (BYTE8(v40) && SBYTE7(v40) < 0)
          operator delete(__p[0]);
      }
    }
  }
  v37 = (uint64_t *)a3[4];
  v36 = (uint64_t *)a3[5];
  while (v37 != v36)
  {
    v38 = *v37++;
    SVG::populateReferenceMap(a1, a2, v38);
  }
}

void SVG::populateDirectlyInheritedPresentationMap(uint64_t *a1, const SVG::Presentation *a2, const SVG::Presentation *a3, unint64_t a4)
{
  SVG::Presentation *v8;
  SVG::Presentation *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *i;
  unint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  char v56;
  _OWORD __dst[36];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!v8)
  {
    v17 = *(uint64_t **)(a4 + 32);
    v16 = *(uint64_t **)(a4 + 40);
    while (v17 != v16)
    {
      v18 = *v17++;
      SVG::populateDirectlyInheritedPresentationMap(a1, a2, a3, v18);
    }
    return;
  }
  v9 = v8;
  memcpy(__dst, &unk_1B9B926C0, sizeof(__dst));
  SVG::Presentation::inherit(v9, a2, a3, __dst);
  v10 = 0x9DDFEA08EB382D69 * (((((a4 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a4));
  v11 = 0x9DDFEA08EB382D69 * (HIDWORD(a4) ^ (v10 >> 47) ^ v10);
  v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  v13 = a1[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      if (v12 >= v13)
        v15 = v12 % v13;
    }
    else
    {
      v15 = (v13 - 1) & v12;
    }
    v19 = *(_QWORD **)(*a1 + 8 * v15);
    if (v19)
    {
      for (i = (_QWORD *)*v19; i; i = (_QWORD *)*i)
      {
        v21 = i[1];
        if (v21 == v12)
        {
          if (i[2] == a4)
            goto LABEL_79;
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v21 >= v13)
              v21 %= v13;
          }
          else
          {
            v21 &= v13 - 1;
          }
          if (v21 != v15)
            break;
        }
      }
    }
  }
  else
  {
    v15 = 0xAAAAAAAAAAAAAAAALL;
  }
  v55 = a1 + 2;
  v22 = (char *)operator new(0x258uLL);
  v23 = __dst[1];
  *(_OWORD *)(v22 + 24) = __dst[0];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v12;
  *((_QWORD *)v22 + 2) = a4;
  *(_OWORD *)(v22 + 40) = v23;
  *(_OWORD *)(v22 + 56) = __dst[2];
  *((_QWORD *)v22 + 9) = *(_QWORD *)&__dst[3];
  v22[88] = 0;
  *((_DWORD *)v22 + 26) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v22 + 88), (uint64_t)&__dst[4]);
  v24 = *(_OWORD *)((char *)&__dst[6] + 8);
  *((_OWORD *)v22 + 7) = *(_OWORD *)((char *)&__dst[5] + 8);
  *((_OWORD *)v22 + 8) = v24;
  *((_OWORD *)v22 + 9) = *(_OWORD *)((char *)&__dst[7] + 8);
  *((_DWORD *)v22 + 40) = DWORD2(__dst[8]);
  v22[176] = 0;
  *((_DWORD *)v22 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v22 + 176), (uint64_t)&__dst[9] + 8);
  v25 = __dst[14];
  *(_OWORD *)(v22 + 232) = __dst[13];
  *(_OWORD *)(v22 + 248) = v25;
  v22[272] = 0;
  *((_DWORD *)v22 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v22 + 272), (uint64_t)&__dst[15] + 8);
  v26 = __dst[20];
  *(_OWORD *)(v22 + 328) = __dst[19];
  *(_OWORD *)(v22 + 344) = v26;
  *((_QWORD *)v22 + 45) = *(_QWORD *)&__dst[21];
  v27 = __dst[18];
  *(_OWORD *)(v22 + 296) = __dst[17];
  *(_OWORD *)(v22 + 312) = v27;
  v22[376] = 0;
  *((_DWORD *)v22 + 106) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v22 + 376), (uint64_t)&__dst[22]);
  v22[440] = 0;
  *((_DWORD *)v22 + 118) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v22 + 440), (uint64_t)&__dst[26]);
  v28 = *(_OWORD *)((char *)&__dst[33] + 8);
  *((_OWORD *)v22 + 34) = *(_OWORD *)((char *)&__dst[32] + 8);
  *((_OWORD *)v22 + 35) = v28;
  *((_OWORD *)v22 + 36) = *(_OWORD *)((char *)&__dst[34] + 8);
  *((_QWORD *)v22 + 74) = *((_QWORD *)&__dst[35] + 1);
  v29 = *(_OWORD *)((char *)&__dst[29] + 8);
  *((_OWORD *)v22 + 30) = *(_OWORD *)((char *)&__dst[28] + 8);
  *((_OWORD *)v22 + 31) = v29;
  v30 = *(_OWORD *)((char *)&__dst[31] + 8);
  *((_OWORD *)v22 + 32) = *(_OWORD *)((char *)&__dst[30] + 8);
  *((_OWORD *)v22 + 33) = v30;
  v31 = (float)(unint64_t)(a1[3] + 1);
  v32 = *((float *)a1 + 8);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    v33 = v13 < 3 || (v13 & (v13 - 1)) != 0;
    v34 = v33 | (2 * v13);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = (int8x8_t)v35;
    else
      prime = (int8x8_t)v34;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = a1[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_35;
    if (*(_QWORD *)&prime < v13)
    {
      v43 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v13 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (*(_QWORD *)&prime <= v43)
        prime = (int8x8_t)v43;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v37 = operator new(8 * *(_QWORD *)&prime);
          v38 = (void *)*a1;
          *a1 = (uint64_t)v37;
          if (v38)
            operator delete(v38);
          v39 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v39++) = 0;
          while (*(_QWORD *)&prime != v39);
          v40 = (_QWORD *)*v55;
          if (*v55)
          {
            v41 = v40[1];
            v42 = (uint8x8_t)vcnt_s8(prime);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              if (v41 >= *(_QWORD *)&prime)
                v41 %= *(_QWORD *)&prime;
            }
            else
            {
              v41 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v41) = v55;
            v46 = (_QWORD *)*v40;
            if (*v40)
            {
              do
              {
                v47 = v46[1];
                if (v42.u32[0] > 1uLL)
                {
                  if (v47 >= *(_QWORD *)&prime)
                    v47 %= *(_QWORD *)&prime;
                }
                else
                {
                  v47 &= *(_QWORD *)&prime - 1;
                }
                if (v47 != v41)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v47))
                  {
                    *(_QWORD *)(*a1 + 8 * v47) = v40;
                    goto LABEL_60;
                  }
                  *v40 = *v46;
                  *v46 = **(_QWORD **)(*a1 + 8 * v47);
                  **(_QWORD **)(*a1 + 8 * v47) = v46;
                  v46 = v40;
                }
                v47 = v41;
LABEL_60:
                v40 = v46;
                v46 = (_QWORD *)*v46;
                v41 = v47;
              }
              while (v46);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_64;
        }
        v54 = (void *)*a1;
        *a1 = 0;
        if (v54)
          operator delete(v54);
        v13 = 0;
        a1[1] = 0;
      }
    }
LABEL_64:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v15 = v12 % v13;
      else
        v15 = v12;
    }
    else
    {
      v15 = (v13 - 1) & v12;
    }
  }
  v48 = *a1;
  v49 = *(_QWORD **)(*a1 + 8 * v15);
  if (v49)
  {
    *(_QWORD *)v22 = *v49;
  }
  else
  {
    *(_QWORD *)v22 = *v55;
    *v55 = v22;
    *(_QWORD *)(v48 + 8 * v15) = v55;
    if (!*(_QWORD *)v22)
      goto LABEL_78;
    v50 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v50 >= v13)
        v50 %= v13;
    }
    else
    {
      v50 &= v13 - 1;
    }
    v49 = (_QWORD *)(*a1 + 8 * v50);
  }
  *v49 = v22;
LABEL_78:
  ++a1[3];
LABEL_79:
  v52 = *(uint64_t **)(a4 + 32);
  v51 = *(uint64_t **)(a4 + 40);
  while (v52 != v51)
  {
    v53 = *v52++;
    SVG::populateDirectlyInheritedPresentationMap(a1, __dst, a3, v53);
  }
  if (LODWORD(__dst[28]) != -1)
    ((void (*)(char *, _OWORD *))off_1E7138938[LODWORD(__dst[28])])(&v56, &__dst[26]);
  LODWORD(__dst[28]) = -1;
  if (LODWORD(__dst[25]) != -1)
    ((void (*)(char *, _OWORD *))off_1E7138920[LODWORD(__dst[25])])(&v56, &__dst[22]);
  LODWORD(__dst[25]) = -1;
  if (DWORD2(__dst[16]) != -1)
    ((void (*)(char *, char *))off_1E7138908[DWORD2(__dst[16])])(&v56, (char *)&__dst[15] + 8);
  DWORD2(__dst[16]) = -1;
  if (DWORD2(__dst[12]) != -1)
    ((void (*)(char *, char *))off_1E7138920[DWORD2(__dst[12])])(&v56, (char *)&__dst[9] + 8);
  DWORD2(__dst[12]) = -1;
  if (LODWORD(__dst[5]) != -1)
    ((void (*)(char *, _OWORD *))off_1E7138908[LODWORD(__dst[5])])(&v56, &__dst[4]);
}

void SVG::populateGradientMap(uint64_t *a1, _QWORD *a2, _QWORD *a3, const __CFArray *a4, _QWORD *a5)
{
  void *v10;
  unint64_t v11;
  CFTypeRef v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *i;
  unint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t v28;
  size_t v29;
  _QWORD *v30;
  size_t prime;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  CFTypeRef cf;

  if (!v10)
    goto LABEL_78;
  v11 = (unint64_t)v10;
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  SVG::GradientElement::getGradient((unint64_t)v10, a2, a3, a4, (CGGradientRef *)&cf);
  v12 = cf;
  if (!cf)
    goto LABEL_78;
  v13 = 0x9DDFEA08EB382D69 * (((8 * v11) + 8) ^ HIDWORD(v11));
  v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v11) ^ (v13 >> 47) ^ v13);
  v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
  v16 = a1[1];
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
      if (v15 >= v16)
        v18 = v15 % v16;
    }
    else
    {
      v18 = (v16 - 1) & v15;
    }
    v19 = *(_QWORD **)(*a1 + 8 * v18);
    if (v19)
    {
      for (i = (_QWORD *)*v19; i; i = (_QWORD *)*i)
      {
        v21 = i[1];
        if (v21 == v15)
        {
          if (i[2] == v11)
            goto LABEL_76;
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v21 >= v16)
              v21 %= v16;
          }
          else
          {
            v21 &= v16 - 1;
          }
          if (v21 != v18)
            break;
        }
      }
    }
  }
  else
  {
    v18 = 0xAAAAAAAAAAAAAAAALL;
  }
  v54 = a1 + 2;
  v22 = operator new(0x20uLL);
  *v22 = 0;
  v22[1] = v15;
  cf = 0;
  v22[2] = v11;
  v22[3] = v12;
  v23 = (float)(unint64_t)(a1[3] + 1);
  v24 = *((float *)a1 + 8);
  if (!v16 || (float)(v24 * (float)v16) < v23)
  {
    v25 = 1;
    if (v16 >= 3)
      v25 = (v16 & (v16 - 1)) != 0;
    v26 = v25 | (2 * v16);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = (int8x8_t)v27;
    else
      v28 = (int8x8_t)v26;
    if (*(_QWORD *)&v28 == 1)
    {
      v28 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v28 & (*(_QWORD *)&v28 - 1)) != 0)
    {
      v29 = (size_t)v28;
      v30 = v22;
      prime = std::__next_prime(v29);
      v22 = v30;
      v28 = (int8x8_t)prime;
      v16 = a1[1];
    }
    if (*(_QWORD *)&v28 > v16)
      goto LABEL_32;
    if (*(_QWORD *)&v28 < v16)
    {
      v39 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v16 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v51 = v22;
        v39 = std::__next_prime(v39);
        v22 = v51;
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&v28 <= v39)
        v28 = (int8x8_t)v39;
      if (*(_QWORD *)&v28 >= v16)
      {
        v16 = a1[1];
      }
      else
      {
        if (v28)
        {
LABEL_32:
          if (*(_QWORD *)&v28 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v32 = v22;
          v33 = operator new(8 * *(_QWORD *)&v28);
          v34 = (void *)*a1;
          *a1 = (uint64_t)v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          a1[1] = (uint64_t)v28;
          v22 = v32;
          do
            *(_QWORD *)(*a1 + 8 * v35++) = 0;
          while (*(_QWORD *)&v28 != v35);
          v36 = (_QWORD *)*v54;
          if (*v54)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(v28);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&v28)
                v37 %= *(_QWORD *)&v28;
            }
            else
            {
              v37 &= *(_QWORD *)&v28 - 1;
            }
            *(_QWORD *)(*a1 + 8 * v37) = v54;
            v42 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&v28)
                    v43 %= *(_QWORD *)&v28;
                }
                else
                {
                  v43 &= *(_QWORD *)&v28 - 1;
                }
                if (v43 != v37)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v43))
                  {
                    *(_QWORD *)(*a1 + 8 * v43) = v36;
                    goto LABEL_57;
                  }
                  *v36 = *v42;
                  *v42 = **(_QWORD **)(*a1 + 8 * v43);
                  **(_QWORD **)(*a1 + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_57:
                v36 = v42;
                v42 = (_QWORD *)*v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v16 = (unint64_t)v28;
          goto LABEL_61;
        }
        v52 = (void *)*a1;
        *a1 = 0;
        if (v52)
        {
          v53 = v22;
          operator delete(v52);
          v22 = v53;
        }
        v16 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v18 = v15 % v16;
      else
        v18 = v15;
    }
    else
    {
      v18 = (v16 - 1) & v15;
    }
  }
  v44 = *a1;
  v45 = *(_QWORD **)(*a1 + 8 * v18);
  if (v45)
  {
    *v22 = *v45;
  }
  else
  {
    v46 = (_QWORD *)*v54;
    *v22 = *v54;
    *v54 = v22;
    *(_QWORD *)(v44 + 8 * v18) = v54;
    if (!v46)
      goto LABEL_75;
    v47 = v46[1];
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v47 >= v16)
        v47 %= v16;
    }
    else
    {
      v47 &= v16 - 1;
    }
    v45 = (_QWORD *)(*a1 + 8 * v47);
  }
  *v45 = v22;
LABEL_75:
  ++a1[3];
  v12 = cf;
LABEL_76:
  if (v12)
    CFRelease(v12);
LABEL_78:
  v49 = (uint64_t *)a5[4];
  v48 = (uint64_t *)a5[5];
  while (v49 != v48)
  {
    v50 = *v49++;
    SVG::populateGradientMap(a1, a2, a3, a4, v50);
  }
}

void OTSVGDocumentEnumerateIDs(uint64_t a1, void *a2)
{
  uint64_t *v3;
  const __CFAllocator *v4;
  int v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  void (**v9)(id, CFStringRef);

  v9 = a2;
  if (a1)
  {
    v3 = *(uint64_t **)(*(_QWORD *)a1 + 112);
    if (v3)
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v5 = *((char *)v3 + 39);
        if (v5 >= 0)
          v6 = (const UInt8 *)(v3 + 2);
        else
          v6 = (const UInt8 *)v3[2];
        if (v5 >= 0)
          v7 = *((unsigned __int8 *)v3 + 39);
        else
          v7 = v3[3];
        v8 = CFStringCreateWithBytes(v4, v6, v7, 0x8000100u, 0);
        v9[2](v9, v8);
        if (v8)
          CFRelease(v8);
        v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
  }

}

uint64_t OTSVGDocumentRelease(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100](result);
    JUMPOUT(0x1BCCCA1B4);
  }
  return result;
}

double OTSVGDocumentGetIntrinsicRect()
{
  return 0.0;
}

uint64_t std::deque<std::string>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<std::reference_wrapper<SVG::Element>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void SVG::populateIdMapWithRealIds(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  std::string *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;

  v4 = *(char *)(a2 + 31);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 31);
  else
    v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = (_OWORD *)(a2 + 8);
    if (v4 >= 0)
      v7 = (uint64_t *)(a2 + 8);
    else
      v7 = *(uint64_t **)(a2 + 8);
    v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v31, v7, v5);
    v9 = v8;
    v10 = *(_QWORD *)(a1 + 8);
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      v12 = v11.u32[0];
      if (v11.u32[0] > 1uLL)
      {
        v13 = v8;
        if (v8 >= v10)
          v13 = v8 % v10;
      }
      else
      {
        v13 = (v10 - 1) & v8;
      }
      v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
      if (v14)
      {
        for (i = *v14; i; i = *(unsigned __int8 **)i)
        {
          v16 = *((_QWORD *)i + 1);
          if (v16 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, i + 16, (unsigned __int8 *)(a2 + 8)) & 1) != 0)
              goto LABEL_50;
          }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v10)
                v16 %= v10;
            }
            else
            {
              v16 &= v10 - 1;
            }
            if (v16 != v13)
              break;
          }
        }
      }
    }
    else
    {
      v13 = 0xAAAAAAAAAAAAAAAALL;
    }
    v17 = operator new(0x30uLL);
    *v17 = 0;
    v17[1] = v9;
    v18 = (std::string *)(v17 + 2);
    if (*(char *)(a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *v6;
      v17[4] = *(_QWORD *)(a2 + 24);
    }
    v17[5] = a2;
    v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v20 = *(float *)(a1 + 32);
    if (!v10 || (float)(v20 * (float)v10) < v19)
    {
      v21 = 1;
      if (v10 >= 3)
        v21 = (v10 & (v10 - 1)) != 0;
      v22 = v21 | (2 * v10);
      v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23)
        v24 = v23;
      else
        v24 = v22;
      std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>(a1, v24);
      v10 = *(_QWORD *)(a1 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v9 >= v10)
          v13 = v9 % v10;
        else
          v13 = v9;
      }
      else
      {
        v13 = (v10 - 1) & v9;
      }
    }
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
    if (v26)
    {
      *v17 = *v26;
    }
    else
    {
      *v17 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(v25 + 8 * v13) = a1 + 16;
      if (!*v17)
      {
LABEL_49:
        ++*(_QWORD *)(a1 + 24);
        goto LABEL_50;
      }
      v27 = *(_QWORD *)(*v17 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10)
          v27 %= v10;
      }
      else
      {
        v27 &= v10 - 1;
      }
      v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    }
    *v26 = v17;
    goto LABEL_49;
  }
LABEL_50:
  v29 = *(uint64_t **)(a2 + 32);
  v28 = *(uint64_t **)(a2 + 40);
  while (v29 != v28)
  {
    v30 = *v29++;
    SVG::populateIdMapWithRealIds(a1, v30);
  }
}

uint64_t SVG::populateIdMapWithFakeIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *i;
  unint64_t v20;
  _QWORD *v21;
  std::string *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[4];
  void *__p[2];
  __int128 v41;
  __int128 v42;
  _OWORD v43[9];
  unint64_t v44;
  __int128 v45;
  uint64_t v46;

  v5 = *(unsigned __int8 *)(a2 + 31);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 16);
  if (v5)
    goto LABEL_61;
  v36 = a2;
  v45 = 0uLL;
  v46 = 0;
  v6 = *MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    v44 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v43[7] = v9;
    v43[8] = v9;
    v43[5] = v9;
    v43[6] = v9;
    v43[3] = v9;
    v43[4] = v9;
    v43[1] = v9;
    v43[2] = v9;
    v43[0] = v9;
    v41 = v9;
    v42 = v9;
    v39[3] = v9;
    *(_OWORD *)__p = v9;
    v39[1] = v9;
    v39[2] = v9;
    v39[0] = v9;
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v39);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"element", 7);
    std::ostream::operator<<();
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v39 + 8, &v37);
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
    v45 = v37;
    v46 = v38;
    *(_QWORD *)&v39[0] = v6;
    *(_QWORD *)((char *)v39 + *(_QWORD *)(v6 - 24)) = v7;
    *((_QWORD *)&v39[0] + 1) = v8;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BCCCA19C](v43);
    a3 = (a3 + 1);
  }
  while (std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::find<std::string>((_QWORD *)a1, (uint64_t)&v45));
  if (v46 >= 0)
    v10 = (uint64_t *)&v45;
  else
    v10 = (uint64_t *)v45;
  if (v46 >= 0)
    v11 = HIBYTE(v46);
  else
    v11 = *((_QWORD *)&v45 + 1);
  v12 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v39, v10, v11);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v17 = v12;
      if (v12 >= v14)
        v17 = v12 % v14;
    }
    else
    {
      v17 = (v14 - 1) & v12;
    }
    v18 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v17);
    if (v18)
    {
      for (i = *v18; i; i = *(unsigned __int8 **)i)
      {
        v20 = *((_QWORD *)i + 1);
        if (v20 == v13)
        {
          if ((std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, i + 16, (unsigned __int8 *)&v45) & 1) != 0)
            goto LABEL_58;
        }
        else
        {
          if (v16 > 1)
          {
            if (v20 >= v14)
              v20 %= v14;
          }
          else
          {
            v20 &= v14 - 1;
          }
          if (v20 != v17)
            break;
        }
      }
    }
  }
  else
  {
    v17 = 0xAAAAAAAAAAAAAAAALL;
  }
  v21 = operator new(0x30uLL);
  *v21 = 0;
  v21[1] = v13;
  v22 = (std::string *)(v21 + 2);
  if (SHIBYTE(v46) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v45, *((std::string::size_type *)&v45 + 1));
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v45;
    v21[4] = v46;
  }
  v21[5] = v36;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v14 || (float)(v24 * (float)v14) < v23)
  {
    v25 = 1;
    if (v14 >= 3)
      v25 = (v14 & (v14 - 1)) != 0;
    v26 = v25 | (2 * v14);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>(a1, v28);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v17 = v13 % v14;
      else
        v17 = v13;
    }
    else
    {
      v17 = (v14 - 1) & v13;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v17);
  if (v30)
  {
    *v21 = *v30;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(v29 + 8 * v17) = a1 + 16;
    if (!*v21)
      goto LABEL_57;
    v31 = *(_QWORD *)(*v21 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v31 >= v14)
        v31 %= v14;
    }
    else
    {
      v31 &= v14 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
  }
  *v30 = v21;
LABEL_57:
  ++*(_QWORD *)(a1 + 24);
LABEL_58:
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  a2 = v36;
LABEL_61:
  v32 = *(uint64_t **)(a2 + 32);
  v33 = *(uint64_t **)(a2 + 40);
  while (v32 != v33)
  {
    v34 = *v32++;
    a3 = SVG::populateIdMapWithFakeIds(a1, v34, a3);
  }
  return a3;
}

void SVG::extractValidFragment(SVG *this, CFURLRef anURL)
{
  CFStringRef v4;
  CFStringRef v5;
  CFStringRef v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  int v10;
  void *__p[3];

  if (!CFURLCanBeDecomposed(anURL))
    goto LABEL_17;
  v4 = CFURLCopyScheme(anURL);
  v5 = CFURLCopyNetLocation(anURL);
  v6 = CFURLCopyPath(anURL);
  if ((unint64_t)v4 | (unint64_t)v5)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    if (!v6)
    {
      if (!v5)
        goto LABEL_6;
      goto LABEL_5;
    }
LABEL_10:
    CFRelease(v6);
    if (!v5)
    {
LABEL_6:
      if (v4)
        CFRelease(v4);
      return;
    }
LABEL_5:
    CFRelease(v5);
    goto LABEL_6;
  }
  if (v6)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    goto LABEL_10;
  }
  v7 = (__CFString *)CFURLCopyFragment(anURL, &stru_1E7139808);
  if (!v7)
  {
LABEL_17:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    return;
  }
  v8 = v7;
  memset(__p, 170, sizeof(__p));
  SVG::convertString((SVG *)__p, v7);
  v9 = (void *)HIBYTE(__p[2]);
  v10 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) < 0)
    v9 = __p[1];
  if (v9)
  {
    *(_OWORD *)this = *(_OWORD *)__p;
    *((void **)this + 2) = __p[2];
    *((_BYTE *)this + 24) = 1;
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
  }
  CFRelease(v8);
}

void std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::__emplace_unique_key_args<__CFURL const*,__CFURL const* const&,std::reference_wrapper<SVG::Element> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v12 = v9 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v16[3] = a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v12 = v9 % v10;
      else
        v12 = v9;
    }
    else
    {
      v12 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v24)
  {
    *v16 = *v24;
LABEL_38:
    *v24 = v16;
    goto LABEL_39;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v23 + 8 * v12) = a1 + 16;
  if (*v16)
  {
    v25 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::populatePatternAndMaskMaps(std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> &,std::unordered_map<SVG::MaskElement const*,SVG::Document::MaskData> &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,__CFArray const*,SVG::Presentation const&,SVG::SVGElement const&)::$_0,SVG::populatePatternAndMaskMaps(std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> &,std::unordered_map<SVG::MaskElement const*,SVG::Document::MaskData> &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,__CFArray const*,SVG::Presentation const&,SVG::SVGElement const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&>(uint64_t ***a1, unint64_t *a2)
{
  uint64_t **v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *i;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t prime;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  void *v62;
  uint64_t **v63;
  unint64_t v64;
  _BYTE v65[64];
  _QWORD *v66;
  _OWORD v67[4];
  uint64_t *v68;
  uint64_t *v69;
  __int128 v70;
  __int128 v71;
  void *__p;
  char *v73;
  char *v74;
  void *v75[3];
  _QWORD v76[53];
  std::__shared_count *v77;
  std::__shared_count v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _BYTE v82[16];
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  int v87;
  _BYTE v88[48];
  int v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[16];
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[48];
  int v100;
  _BYTE v101[32];
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  _BYTE v111[568];
  uint64_t v112;
  _DWORD __dst[144];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  memcpy(__dst, &unk_1B9B926C0, sizeof(__dst));
  SVG::Presentation::defaultPresentation((uint64_t)__dst);
  memcpy(v76, &unk_1B9B92900, sizeof(v76));
  SVG::Recorder::getInitialState(__dst, (uint64_t)v111);
  SVG::Recorder::Recorder((uint64_t)v76, v111, **v2, 1u, 1.0);
  if (*(_DWORD *)&v111[112] != -1)
    ((void (*)(std::__shared_count *, _BYTE *))off_1E7138960[*(unsigned int *)&v111[112]])(&v78, &v111[8]);
  memset(v75, 170, sizeof(v75));
  SVG::hrefChain<SVG::PatternElement>(v3, v2[1], v75);
  __p = 0;
  v73 = 0;
  v74 = 0;
  v5 = (char *)v75[0];
  v4 = (char *)v75[1];
  v63 = v2;
  v64 = v3;
  if (v75[0] == v75[1])
  {
    v4 = (char *)v75[0];
  }
  else
  {
    v6 = (char *)v75[0];
    while (1)
    {
      v7 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      v8 = *(uint64_t **)(*(_QWORD *)v6 + 40);
      if (v7 != v8)
        break;
      v6 += 8;
      if (v6 == v75[1])
        goto LABEL_28;
    }
    v9 = 0;
    do
    {
      v10 = *v7;
      if (v9 >= v74)
      {
        v11 = (v9 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v12 = (v74 - (_BYTE *)__p) >> 2;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v74 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v74, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v11];
        *(_QWORD *)v15 = v10;
        v9 = v15 + 8;
        v17 = (char *)__p;
        v16 = v73;
        if (v73 != __p)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = (char *)__p;
        }
        __p = v15;
        v73 = v9;
        v74 = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v9 = v10;
        v9 += 8;
      }
      v73 = v9;
      ++v7;
    }
    while (v7 != v8);
    v5 = (char *)v75[0];
    v4 = (char *)v75[1];
  }
LABEL_28:
  memcpy(v111, &unk_1B9B926C0, sizeof(v111));
  *(_DWORD *)&v111[8] = 0;
  *(_DWORD *)&v111[48] = 0;
  *(_DWORD *)&v111[64] = 0;
  *(_DWORD *)&v111[80] = 0;
  *(_QWORD *)&v111[88] = 0;
  *(_DWORD *)&v111[100] = 0;
  *(_DWORD *)&v111[200] = 0;
  *(_DWORD *)&v111[208] = 0;
  *(_DWORD *)&v111[216] = 0;
  *(_DWORD *)&v111[248] = 0;
  *(_DWORD *)&v111[264] = 0;
  *(_DWORD *)&v111[272] = 0;
  *(_DWORD *)&v111[280] = 0;
  *(_DWORD *)&v111[308] = 0;
  *(_DWORD *)&v111[320] = 0;
  *(_DWORD *)&v111[328] = 0;
  *(_DWORD *)&v111[336] = 0;
  *(_DWORD *)&v111[352] = 0;
  *(_DWORD *)&v111[400] = 0;
  *(_DWORD *)&v111[416] = 0;
  *(_DWORD *)&v111[448] = 0;
  *(_DWORD *)&v111[464] = 0;
  *(_DWORD *)&v111[480] = 0;
  *(_DWORD *)&v111[512] = 0;
  *(_DWORD *)&v111[520] = 0;
  *(_DWORD *)&v111[528] = 0;
  *(_DWORD *)&v111[544] = 0;
  *(_DWORD *)&v111[560] = 0;
  v112 = 0;
  memset(&v111[112], 0, 28);
  *(_DWORD *)&v111[152] = 0;
  *(_QWORD *)&v111[232] = 0;
  *(_QWORD *)&v111[224] = 0;
  *(_QWORD *)&v111[288] = 0;
  *(_QWORD *)&v111[296] = 0;
  memset(&v111[488], 0, 20);
  if (v4 != v5)
  {
    do
    {
      v19 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      SVG::Presentation::specifiedInherit((SVG::Presentation *)(v19 + 64), (const SVG::Presentation *)v111, &v78);
      *(std::__shared_count *)v111 = v78;
      *(_OWORD *)&v111[16] = v79;
      *(_OWORD *)&v111[32] = v80;
      *(_QWORD *)&v111[48] = v81;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v111[64], (uint64_t)v82);
      *(_OWORD *)&v111[88] = v84;
      *(_OWORD *)&v111[104] = v85;
      *(_OWORD *)&v111[120] = v86;
      *(_DWORD *)&v111[136] = v87;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>((uint64_t)&v111[152], (uint64_t)v88);
      *(_OWORD *)&v111[208] = v90;
      *(_OWORD *)&v111[224] = v91;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<SVG::CF<__CFURL const*>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v111[248], (uint64_t)v92);
      *(_OWORD *)&v111[304] = v96;
      *(_OWORD *)&v111[320] = v97;
      *(_QWORD *)&v111[336] = v98;
      *(_OWORD *)&v111[272] = v94;
      *(_OWORD *)&v111[288] = v95;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::Paint>,(std::__variant_detail::_Trait)1>>((uint64_t)&v111[352], (uint64_t)v99);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<SVG::Presentation::NotSpecified,SVG::Presentation::Inherit,SVG::Presentation::ValueOrKeyword<std::vector<SVG::Length>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v111[416], (uint64_t)v101);
      *(_OWORD *)&v111[520] = v107;
      *(_OWORD *)&v111[536] = v108;
      *(_OWORD *)&v111[552] = v109;
      v112 = v110;
      *(_OWORD *)&v111[456] = v103;
      *(_OWORD *)&v111[472] = v104;
      *(_OWORD *)&v111[488] = v105;
      *(_OWORD *)&v111[504] = v106;
      if (v102 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E7138938[v102])(v65, v101);
      v102 = -1;
      if (v100 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E7138920[v100])(v65, v99);
      v100 = -1;
      if (v93 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E7138908[v93])(v65, v92);
      v93 = -1;
      if (v89 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E7138920[v89])(v65, v88);
      v89 = -1;
      if (v83 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E7138908[v83])(v65, v82);
    }
    while (v4 != v75[0]);
  }
  *(_OWORD *)&v65[48] = unk_1B9B92AD8;
  memset(v65, 170, 48);
  v20 = v63[1];
  v22 = v63[4];
  v21 = v63[5];
  v23 = v63[6];
  v24 = *((_OWORD *)v63 + 1);
  *(_QWORD *)&v65[16] = __dst;
  memset(&v65[24], 0, 32);
  *(_DWORD *)&v65[56] = 1065353216;
  *(_QWORD *)v65 = &off_1E7137878;
  *(_QWORD *)&v65[8] = v20;
  v66 = v76;
  memset(v67, 0, 48);
  v67[3] = v24;
  v68 = v22;
  v69 = v21;
  v25 = *((_OWORD *)v23 + 43);
  v70 = *((_OWORD *)v23 + 42);
  v71 = v25;
  v78.__vftable = *(std::__shared_count_vtbl **)(v64 + 56);
  v26 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v21, &v78);
  SVG::Presentation::inherit((SVG::Presentation *)v111, (const SVG::Presentation *)(v26 + 3), (const SVG::Presentation *)__dst, &v78);
  SVG::RecordBase::operator()((float *)v65, (unint64_t **)&__p, (const SVG::Presentation *)&v78);
  if (v102 != -1)
    ((void (*)(std::__shared_count **, _BYTE *))off_1E7138938[v102])(&v77, v101);
  v102 = -1;
  if (v100 != -1)
    ((void (*)(std::__shared_count **, _BYTE *))off_1E7138920[v100])(&v77, v99);
  v100 = -1;
  if (v93 != -1)
    ((void (*)(std::__shared_count **, _BYTE *))off_1E7138908[v93])(&v77, v92);
  v93 = -1;
  if (v89 != -1)
    ((void (*)(std::__shared_count **, _BYTE *))off_1E7138920[v89])(&v77, v88);
  v89 = -1;
  if (v83 != -1)
    ((void (*)(std::__shared_count **, _BYTE *))off_1E7138908[v83])(&v77, v82);
  SVG::Recorder::takeRecording((SVG::Recorder *)v76, &v78);
  v27 = (std::__shared_weak_count *)operator new(0x30uLL);
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137BF0;
  v27[1].std::__shared_count = v78;
  v27[1].__shared_weak_owners_ = v79;
  v78 = (std::__shared_count)0;
  *(_QWORD *)&v79 = 0;
  v77 = &v78;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
  v28 = v63[3];
  v29 = 0x9DDFEA08EB382D69 * (((8 * v64) + 8) ^ HIDWORD(v64));
  v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v64) ^ (v29 >> 47) ^ v29);
  v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
  v32 = v28[1];
  if (v32)
  {
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v34 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
      if (v31 >= v32)
        v34 = v31 % v32;
    }
    else
    {
      v34 = (v32 - 1) & v31;
    }
    v35 = *(_QWORD **)(*v28 + 8 * v34);
    if (v35)
    {
      for (i = (_QWORD *)*v35; i; i = (_QWORD *)*i)
      {
        v37 = i[1];
        if (v37 == v31)
        {
          if (i[2] == v64)
            goto LABEL_123;
        }
        else
        {
          if (v33.u32[0] > 1uLL)
          {
            if (v37 >= v32)
              v37 %= v32;
          }
          else
          {
            v37 &= v32 - 1;
          }
          if (v37 != v34)
            break;
        }
      }
    }
  }
  else
  {
    v34 = 0xAAAAAAAAAAAAAAAALL;
  }
  v38 = v28 + 2;
  v39 = operator new(0x28uLL);
  *v39 = 0;
  v39[1] = v31;
  v39[2] = v64;
  v39[3] = v27 + 1;
  v39[4] = v27;
  v40 = (float)(unint64_t)(v28[3] + 1);
  v41 = *((float *)v28 + 8);
  if (!v32 || (float)(v41 * (float)v32) < v40)
  {
    v42 = 1;
    if (v32 >= 3)
      v42 = (v32 & (v32 - 1)) != 0;
    v43 = v42 | (2 * v32);
    v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44)
      prime = (int8x8_t)v44;
    else
      prime = (int8x8_t)v43;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v32 = v28[1];
    if (*(_QWORD *)&prime > v32)
      goto LABEL_79;
    if (*(_QWORD *)&prime < v32)
    {
      v52 = vcvtps_u32_f32((float)(unint64_t)v28[3] / *((float *)v28 + 8));
      if (v32 < 3 || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
      {
        v52 = std::__next_prime(v52);
      }
      else
      {
        v54 = 1 << -(char)__clz(v52 - 1);
        if (v52 >= 2)
          v52 = v54;
      }
      if (*(_QWORD *)&prime <= v52)
        prime = (int8x8_t)v52;
      if (*(_QWORD *)&prime >= v32)
      {
        v32 = v28[1];
      }
      else
      {
        if (prime)
        {
LABEL_79:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v46 = operator new(8 * *(_QWORD *)&prime);
          v47 = (void *)*v28;
          *v28 = (uint64_t)v46;
          if (v47)
            operator delete(v47);
          v48 = 0;
          v28[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*v28 + 8 * v48++) = 0;
          while (*(_QWORD *)&prime != v48);
          v49 = (_QWORD *)*v38;
          if (*v38)
          {
            v50 = v49[1];
            v51 = (uint8x8_t)vcnt_s8(prime);
            v51.i16[0] = vaddlv_u8(v51);
            if (v51.u32[0] > 1uLL)
            {
              if (v50 >= *(_QWORD *)&prime)
                v50 %= *(_QWORD *)&prime;
            }
            else
            {
              v50 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v28 + 8 * v50) = v38;
            v55 = (_QWORD *)*v49;
            if (*v49)
            {
              do
              {
                v56 = v55[1];
                if (v51.u32[0] > 1uLL)
                {
                  if (v56 >= *(_QWORD *)&prime)
                    v56 %= *(_QWORD *)&prime;
                }
                else
                {
                  v56 &= *(_QWORD *)&prime - 1;
                }
                if (v56 != v50)
                {
                  if (!*(_QWORD *)(*v28 + 8 * v56))
                  {
                    *(_QWORD *)(*v28 + 8 * v56) = v49;
                    goto LABEL_104;
                  }
                  *v49 = *v55;
                  *v55 = **(_QWORD **)(*v28 + 8 * v56);
                  **(_QWORD **)(*v28 + 8 * v56) = v55;
                  v55 = v49;
                }
                v56 = v50;
LABEL_104:
                v49 = v55;
                v55 = (_QWORD *)*v55;
                v50 = v56;
              }
              while (v55);
            }
          }
          v32 = (unint64_t)prime;
          goto LABEL_108;
        }
        v62 = (void *)*v28;
        *v28 = 0;
        if (v62)
          operator delete(v62);
        v32 = 0;
        v28[1] = 0;
      }
    }
LABEL_108:
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v31 >= v32)
        v34 = v31 % v32;
      else
        v34 = v31;
    }
    else
    {
      v34 = (v32 - 1) & v31;
    }
  }
  v57 = *v28;
  v58 = *(_QWORD **)(*v28 + 8 * v34);
  if (v58)
  {
    *v39 = *v58;
LABEL_121:
    *v58 = v39;
    goto LABEL_122;
  }
  *v39 = *v38;
  *v38 = v39;
  *(_QWORD *)(v57 + 8 * v34) = v38;
  if (*v39)
  {
    v59 = *(_QWORD *)(*v39 + 8);
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v59 >= v32)
        v59 %= v32;
    }
    else
    {
      v59 &= v32 - 1;
    }
    v58 = (_QWORD *)(*v28 + 8 * v59);
    goto LABEL_121;
  }
LABEL_122:
  v27 = 0;
  ++v28[3];
LABEL_123:
  *(_QWORD *)v65 = &off_1E7137878;
  std::deque<SVG::ApplyPresentationState>::~deque[abi:nn180100](v67);
  *(_QWORD *)v65 = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)&v65[24]);
  if (*(_DWORD *)&v111[448] != -1)
    ((void (*)(std::__shared_count *, _BYTE *))off_1E7138938[*(unsigned int *)&v111[448]])(&v78, &v111[416]);
  *(_DWORD *)&v111[448] = -1;
  if (*(_DWORD *)&v111[400] != -1)
    ((void (*)(std::__shared_count *, _BYTE *))off_1E7138920[*(unsigned int *)&v111[400]])(&v78, &v111[352]);
  *(_DWORD *)&v111[400] = -1;
  if (*(_DWORD *)&v111[264] != -1)
    ((void (*)(std::__shared_count *, _BYTE *))off_1E7138908[*(unsigned int *)&v111[264]])(&v78, &v111[248]);
  *(_DWORD *)&v111[264] = -1;
  if (*(_DWORD *)&v111[200] != -1)
    ((void (*)(std::__shared_count *, _BYTE *))off_1E7138920[*(unsigned int *)&v111[200]])(&v78, &v111[152]);
  *(_DWORD *)&v111[200] = -1;
  if (*(_DWORD *)&v111[80] != -1)
    ((void (*)(std::__shared_count *, _BYTE *))off_1E7138908[*(unsigned int *)&v111[80]])(&v78, &v111[64]);
  if (__p)
  {
    v73 = (char *)__p;
    operator delete(__p);
  }
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  std::deque<SVG::BoundingRectState::State>::~deque[abi:nn180100](&v76[32]);
  *(_QWORD *)v111 = &v76[22];
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)v111);
  if (LODWORD(v76[20]) != -1)
    ((void (*)(_BYTE *, _QWORD *))off_1E7138960[LODWORD(v76[20])])(v111, &v76[7]);
  LODWORD(v76[20]) = -1;
  std::deque<SVG::Recorder::State>::~deque[abi:nn180100](v76);
  if (__dst[112] != -1)
    ((void (*)(_BYTE *, _DWORD *))off_1E7138938[__dst[112]])(v111, &__dst[104]);
  __dst[112] = -1;
  if (__dst[100] != -1)
    ((void (*)(_BYTE *, _DWORD *))off_1E7138920[__dst[100]])(v111, &__dst[88]);
  __dst[100] = -1;
  if (__dst[66] != -1)
    ((void (*)(_BYTE *, _DWORD *))off_1E7138908[__dst[66]])(v111, &__dst[62]);
  __dst[66] = -1;
  if (__dst[50] != -1)
    ((void (*)(_BYTE *, _DWORD *))off_1E7138920[__dst[50]])(v111, &__dst[38]);
  __dst[50] = -1;
  if (__dst[20] != -1)
    ((void (*)(_BYTE *, _DWORD *))off_1E7138908[__dst[20]])(v111, &__dst[16]);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::Visitor<SVG::populatePatternAndMaskMaps(std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> &,std::unordered_map<SVG::MaskElement const*,SVG::Document::MaskData> &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,__CFArray const*,SVG::Presentation const&,SVG::SVGElement const&)::$_0,SVG::populatePatternAndMaskMaps(std::unordered_map<SVG::PatternElement const*,SVG::Document::PatternData> &,std::unordered_map<SVG::MaskElement const*,SVG::Document::MaskData> &,std::unordered_map<__CFURL const*,std::reference_wrapper<SVG::Element const>> const&,std::unordered_map<SVG::GradientElement const*,SVG::CF<CGGradient *>> const&,std::unordered_map<SVG::Element const*,SVG::Presentation> const&,__CFArray const*,SVG::Presentation const&,SVG::SVGElement const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<SVG::PatternElement const>,std::reference_wrapper<SVG::MaskElement const>> const&>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *i;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t prime;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  void *v59;
  void *__p;
  char *v61;
  char *v62;
  _BYTE v63[64];
  _QWORD *v64;
  _OWORD v65[4];
  uint64_t v66;
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[53];
  std::__shared_count *v71;
  std::__shared_count v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  _DWORD __dst[144];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  memcpy(__dst, &unk_1B9B926C0, sizeof(__dst));
  SVG::Presentation::defaultPresentation((uint64_t)__dst);
  memcpy(v70, &unk_1B9B92900, sizeof(v70));
  SVG::Recorder::getInitialState(__dst, (uint64_t)&v72);
  SVG::Recorder::Recorder((uint64_t)v70, &v72, **(_QWORD **)(v2 + 56), 1u, 1.0);
  if (v76 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E7138960[v76])(v63, &v72.__shared_owners_);
  memset(v63, 170, 48);
  *(_OWORD *)&v63[48] = unk_1B9B92AD8;
  v4 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(v2 + 88);
  v5 = *(_QWORD **)(v2 + 96);
  v7 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)&v63[16] = __dst;
  memset(&v63[24], 0, 32);
  *(_DWORD *)&v63[56] = 1065353216;
  *(_QWORD *)v63 = &off_1E7137878;
  *(_QWORD *)&v63[8] = v4;
  v64 = v70;
  v8 = *(_OWORD *)(v2 + 72);
  memset(v65, 0, 48);
  v65[3] = v8;
  v66 = v6;
  v67 = v5;
  v9 = *(_OWORD *)(v7 + 688);
  v68 = *(_OWORD *)(v7 + 672);
  v69 = v9;
  __p = 0;
  v61 = 0;
  v62 = 0;
  v10 = *(uint64_t **)(v3 + 32);
  v11 = *(uint64_t **)(v3 + 40);
  if (v10 != v11)
  {
    v12 = 0;
    do
    {
      v13 = *v10;
      if (v12 >= v62)
      {
        v14 = (v12 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v15 = (v62 - (_BYTE *)__p) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v62 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v62, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v14];
        *(_QWORD *)v18 = v13;
        v12 = v18 + 8;
        v20 = (char *)__p;
        v19 = v61;
        if (v61 != __p)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = (char *)__p;
        }
        __p = v18;
        v61 = v12;
        v62 = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v12 = v13;
        v12 += 8;
      }
      v61 = v12;
      ++v10;
    }
    while (v10 != v11);
    v5 = *(_QWORD **)(v2 + 96);
  }
  v72.__vftable = *(std::__shared_count_vtbl **)(v3 + 56);
  v22 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(v5, &v72);
  SVG::Presentation::inherit((SVG::Presentation *)(v3 + 64), (const SVG::Presentation *)(v22 + 3), (const SVG::Presentation *)__dst, &v72);
  SVG::RecordBase::operator()((float *)v63, (unint64_t **)&__p, (const SVG::Presentation *)&v72);
  if (v84 != -1)
    ((void (*)(std::__shared_count **, uint64_t *))off_1E7138938[v84])(&v71, &v83);
  v84 = -1;
  if (v82 != -1)
    ((void (*)(std::__shared_count **, uint64_t *))off_1E7138920[v82])(&v71, &v81);
  v82 = -1;
  if (v80 != -1)
    ((void (*)(std::__shared_count **, uint64_t *))off_1E7138908[v80])(&v71, &v79);
  v80 = -1;
  if (v78 != -1)
    ((void (*)(std::__shared_count **, uint64_t *))off_1E7138920[v78])(&v71, &v77);
  v78 = -1;
  if (v75 != -1)
    ((void (*)(std::__shared_count **, uint64_t *))off_1E7138908[v75])(&v71, &v74);
  SVG::Recorder::takeRecording((SVG::Recorder *)v70, &v72);
  v23 = (std::__shared_weak_count *)operator new(0x30uLL);
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137BF0;
  v23[1].std::__shared_count = v72;
  v23[1].__shared_weak_owners_ = v73;
  v72 = (std::__shared_count)0;
  v73 = 0;
  v71 = &v72;
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v71);
  v24 = *(uint64_t **)(v2 + 88);
  v25 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
  v26 = 0x9DDFEA08EB382D69 * (HIDWORD(v3) ^ (v25 >> 47) ^ v25);
  v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
  v28 = v24[1];
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
      if (v27 >= v28)
        v30 = v27 % v28;
    }
    else
    {
      v30 = (v28 - 1) & v27;
    }
    v31 = *(_QWORD **)(*v24 + 8 * v30);
    if (v31)
    {
      for (i = (_QWORD *)*v31; i; i = (_QWORD *)*i)
      {
        v33 = i[1];
        if (v33 == v27)
        {
          if (i[2] == v3)
            goto LABEL_106;
        }
        else
        {
          if (v29.u32[0] > 1uLL)
          {
            if (v33 >= v28)
              v33 %= v28;
          }
          else
          {
            v33 &= v28 - 1;
          }
          if (v33 != v30)
            break;
        }
      }
    }
  }
  else
  {
    v30 = 0xAAAAAAAAAAAAAAAALL;
  }
  v34 = v24 + 2;
  v35 = operator new(0x28uLL);
  *v35 = 0;
  v35[1] = v27;
  v35[2] = v3;
  v35[3] = v23 + 1;
  v35[4] = v23;
  v36 = (float)(unint64_t)(v24[3] + 1);
  v37 = *((float *)v24 + 8);
  if (!v28 || (float)(v37 * (float)v28) < v36)
  {
    v38 = 1;
    if (v28 >= 3)
      v38 = (v28 & (v28 - 1)) != 0;
    v39 = v38 | (2 * v28);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      prime = (int8x8_t)v40;
    else
      prime = (int8x8_t)v39;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v28 = v24[1];
    }
    if (*(_QWORD *)&prime > v28)
      goto LABEL_62;
    if (*(_QWORD *)&prime < v28)
    {
      v48 = vcvtps_u32_f32((float)(unint64_t)v24[3] / *((float *)v24 + 8));
      if (v28 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (*(_QWORD *)&prime <= v48)
        prime = (int8x8_t)v48;
      if (*(_QWORD *)&prime >= v28)
      {
        v28 = v24[1];
      }
      else
      {
        if (prime)
        {
LABEL_62:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v42 = operator new(8 * *(_QWORD *)&prime);
          v43 = (void *)*v24;
          *v24 = (uint64_t)v42;
          if (v43)
            operator delete(v43);
          v44 = 0;
          v24[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*v24 + 8 * v44++) = 0;
          while (*(_QWORD *)&prime != v44);
          v45 = (_QWORD *)*v34;
          if (*v34)
          {
            v46 = v45[1];
            v47 = (uint8x8_t)vcnt_s8(prime);
            v47.i16[0] = vaddlv_u8(v47);
            if (v47.u32[0] > 1uLL)
            {
              if (v46 >= *(_QWORD *)&prime)
                v46 %= *(_QWORD *)&prime;
            }
            else
            {
              v46 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v24 + 8 * v46) = v34;
            v51 = (_QWORD *)*v45;
            if (*v45)
            {
              do
              {
                v52 = v51[1];
                if (v47.u32[0] > 1uLL)
                {
                  if (v52 >= *(_QWORD *)&prime)
                    v52 %= *(_QWORD *)&prime;
                }
                else
                {
                  v52 &= *(_QWORD *)&prime - 1;
                }
                if (v52 != v46)
                {
                  if (!*(_QWORD *)(*v24 + 8 * v52))
                  {
                    *(_QWORD *)(*v24 + 8 * v52) = v45;
                    goto LABEL_87;
                  }
                  *v45 = *v51;
                  *v51 = **(_QWORD **)(*v24 + 8 * v52);
                  **(_QWORD **)(*v24 + 8 * v52) = v51;
                  v51 = v45;
                }
                v52 = v46;
LABEL_87:
                v45 = v51;
                v51 = (_QWORD *)*v51;
                v46 = v52;
              }
              while (v51);
            }
          }
          v28 = (unint64_t)prime;
          goto LABEL_91;
        }
        v59 = (void *)*v24;
        *v24 = 0;
        if (v59)
          operator delete(v59);
        v28 = 0;
        v24[1] = 0;
      }
    }
LABEL_91:
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28)
        v30 = v27 % v28;
      else
        v30 = v27;
    }
    else
    {
      v30 = (v28 - 1) & v27;
    }
  }
  v53 = *v24;
  v54 = *(_QWORD **)(*v24 + 8 * v30);
  if (v54)
  {
    *v35 = *v54;
LABEL_104:
    *v54 = v35;
    goto LABEL_105;
  }
  v55 = (_QWORD *)*v34;
  *v35 = *v34;
  *v34 = v35;
  *(_QWORD *)(v53 + 8 * v30) = v34;
  if (v55)
  {
    v56 = v55[1];
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v56 >= v28)
        v56 %= v28;
    }
    else
    {
      v56 &= v28 - 1;
    }
    v54 = (_QWORD *)(*v24 + 8 * v56);
    goto LABEL_104;
  }
LABEL_105:
  v23 = 0;
  ++v24[3];
LABEL_106:
  if (__p)
  {
    v61 = (char *)__p;
    operator delete(__p);
  }
  *(_QWORD *)v63 = &off_1E7137878;
  std::deque<SVG::ApplyPresentationState>::~deque[abi:nn180100](v65);
  *(_QWORD *)v63 = &off_1E71370C0;
  std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table((uint64_t)&v63[24]);
  std::deque<SVG::BoundingRectState::State>::~deque[abi:nn180100](&v70[32]);
  v72.__vftable = (std::__shared_count_vtbl *)&v70[22];
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
  if (LODWORD(v70[20]) != -1)
    ((void (*)(std::__shared_count *, _QWORD *))off_1E7138960[LODWORD(v70[20])])(&v72, &v70[7]);
  LODWORD(v70[20]) = -1;
  std::deque<SVG::Recorder::State>::~deque[abi:nn180100](v70);
  if (__dst[112] != -1)
    ((void (*)(std::__shared_count *, _DWORD *))off_1E7138938[__dst[112]])(&v72, &__dst[104]);
  __dst[112] = -1;
  if (__dst[100] != -1)
    ((void (*)(std::__shared_count *, _DWORD *))off_1E7138920[__dst[100]])(&v72, &__dst[88]);
  __dst[100] = -1;
  if (__dst[66] != -1)
    ((void (*)(std::__shared_count *, _DWORD *))off_1E7138908[__dst[66]])(&v72, &__dst[62]);
  __dst[66] = -1;
  if (__dst[50] != -1)
    ((void (*)(std::__shared_count *, _DWORD *))off_1E7138920[__dst[50]])(&v72, &__dst[38]);
  __dst[50] = -1;
  if (__dst[20] != -1)
    ((void (*)(std::__shared_count *, _DWORD *))off_1E7138908[__dst[20]])(&v72, &__dst[16]);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void std::__shared_ptr_emplace<SVG::Recording>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SVG::Recording>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7137BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

void std::__shared_ptr_emplace<SVG::Recording>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::variant<SVG::SaveState,SVG::RestoreState,SVG::ConcatCTM,SVG::DrawImage,SVG::FillPath,SVG::DrawLinearGradient,SVG::DrawRadialGradient,SVG::ClipToPaths,SVG::ClipToMask,SVG::SetFill,SVG::BeginTransparencyLayer,SVG::EndTransparencyLayer,SVG::SetAlpha,SVG::GetCTM>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

std::string *std::pair<std::string const,std::stack<std::string>>::pair[abi:nn180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  v5 = *((_QWORD *)a2 + 7);
  v6 = *((_QWORD *)a2 + 4);
  v7 = (_QWORD *)(v6 + 8 * (v5 / 0xAA));
  if (*((_QWORD *)a2 + 5) == v6)
  {
    v8 = 0;
    v11 = 0;
    v10 = (_QWORD *)(v6 + 8 * ((*((_QWORD *)a2 + 8) + v5) / 0xAA));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)(v6 + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA));
    v9 = *((_QWORD *)a2 + 8) + v5;
    v10 = (_QWORD *)(v6 + 8 * (v9 / 0xAA));
    v11 = *v10 + 24 * (v9 % 0xAA);
  }
  if ((__int128 *)v11 == v8)
    v12 = 0;
  else
    v12 = 170 * (v10 - v7)
        - 0x5555555555555555 * ((uint64_t)(v11 - *v10) >> 3)
        + 0x5555555555555555 * (((uint64_t)v8 - *v7) >> 3);
  std::deque<std::string>::__append_with_size[abi:nn180100]<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>>(this[1].__r_.__value_.__r.__words, v7, v8, v12);
  return this;
}

void std::deque<std::string>::__append_with_size[abi:nn180100]<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>>(_QWORD *a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  __int128 v67;
  uint64_t i;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  std::string *v97;
  __int128 v98;
  __int128 *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  __int128 v104;
  __int128 v105;
  _QWORD *v106;

  v4 = a4;
  v9 = (char *)a1[1];
  v8 = (char *)a1[2];
  v10 = (v8 - v9) >> 3;
  if (v8 == v9)
    v11 = 0;
  else
    v11 = 170 * v10 - 1;
  v12 = a1[4];
  v13 = a1[5];
  v14 = v13 + v12;
  v15 = v11 - (v13 + v12);
  v16 = a4 >= v15;
  v17 = a4 - v15;
  if (v17 != 0 && v16)
  {
    if (v8 == v9)
      v18 = v17 + 1;
    else
      v18 = v17;
    if (v18 % 0xAA)
      v19 = v18 / 0xAA + 1;
    else
      v19 = v18 / 0xAA;
    if (v19 >= v12 / 0xAA)
      v20 = v12 / 0xAA;
    else
      v20 = v19;
    if (v19 <= v12 / 0xAA)
    {
      for (a1[4] = v12 - 170 * v20; v20; --v20)
      {
        v26 = (_QWORD *)a1[1];
        v29 = *v26;
        v27 = (char *)(v26 + 1);
        v28 = v29;
        a1[1] = v27;
        if (v8 == (char *)a1[3])
        {
          v30 = (uint64_t)&v27[-*a1];
          if ((unint64_t)v27 <= *a1)
          {
            if (v8 == (char *)*a1)
              v38 = 1;
            else
              v38 = (uint64_t)&v8[-*a1] >> 2;
            v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v38);
            v41 = &v39[8 * (v38 >> 2)];
            v42 = (uint64_t *)a1[1];
            v8 = v41;
            v43 = a1[2] - (_QWORD)v42;
            if (v43)
            {
              v8 = &v41[v43 & 0xFFFFFFFFFFFFFFF8];
              v44 = 8 * (v43 >> 3);
              v45 = &v39[8 * (v38 >> 2)];
              do
              {
                v46 = *v42++;
                *(_QWORD *)v45 = v46;
                v45 += 8;
                v44 -= 8;
              }
              while (v44);
            }
            v47 = (char *)*a1;
            *a1 = v39;
            a1[1] = v41;
            a1[2] = v8;
            a1[3] = &v39[8 * v40];
            if (v47)
            {
              operator delete(v47);
              v8 = (char *)a1[2];
            }
          }
          else
          {
            v31 = v30 >> 3;
            v32 = v30 >> 3 < -1;
            v33 = (v30 >> 3) + 2;
            if (v32)
              v34 = v33;
            else
              v34 = v31 + 1;
            v35 = &v27[-8 * (v34 >> 1)];
            v36 = v8 - v27;
            if (v8 != v27)
            {
              memmove(&v27[-8 * (v34 >> 1)], v27, v8 - v27);
              v8 = (char *)a1[1];
            }
            v37 = &v8[-8 * (v34 >> 1)];
            v8 = &v35[v36];
            a1[1] = v37;
            a1[2] = &v35[v36];
          }
        }
        *(_QWORD *)v8 = v28;
        v8 = (char *)(a1[2] + 8);
        a1[2] = v8;
      }
    }
    else
    {
      v21 = v19 - v20;
      v22 = a1[3] - *a1;
      if (v19 - v20 <= (v22 >> 3) - v10)
      {
        if (v21)
        {
          while (a1[3] != a1[2])
          {
            *(_QWORD *)&v104 = operator new(0xFF0uLL);
            std::__split_buffer<std::string *>::push_back(a1, &v104);
            --v19;
            if (!--v21)
            {
              v8 = (char *)a1[2];
              goto LABEL_78;
            }
          }
          for (i = 0; i != v21; ++i)
          {
            *(_QWORD *)&v104 = operator new(0xFF0uLL);
            std::__split_buffer<std::string *>::push_front((uint64_t)a1, &v104);
            v8 = (char *)a1[2];
            if (&v8[-a1[1]] == (char *)8)
              v69 = 169;
            else
              v69 = 170;
            v70 = v69 + a1[4];
            a1[4] = v70;
          }
          v20 = v19;
        }
        else
        {
LABEL_78:
          v70 = a1[4];
        }
        for (a1[4] = v70 - 170 * v20; v20; --v20)
        {
          v71 = (_QWORD *)a1[1];
          v74 = *v71;
          v72 = (char *)(v71 + 1);
          v73 = v74;
          a1[1] = v72;
          if (v8 == (char *)a1[3])
          {
            v75 = (uint64_t)&v72[-*a1];
            if ((unint64_t)v72 <= *a1)
            {
              if (v8 == (char *)*a1)
                v82 = 1;
              else
                v82 = (uint64_t)&v8[-*a1] >> 2;
              v83 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v82);
              v85 = &v83[8 * (v82 >> 2)];
              v86 = (uint64_t *)a1[1];
              v8 = v85;
              v87 = a1[2] - (_QWORD)v86;
              if (v87)
              {
                v8 = &v85[v87 & 0xFFFFFFFFFFFFFFF8];
                v88 = 8 * (v87 >> 3);
                v89 = &v83[8 * (v82 >> 2)];
                do
                {
                  v90 = *v86++;
                  *(_QWORD *)v89 = v90;
                  v89 += 8;
                  v88 -= 8;
                }
                while (v88);
              }
              v91 = (char *)*a1;
              *a1 = v83;
              a1[1] = v85;
              a1[2] = v8;
              a1[3] = &v83[8 * v84];
              if (v91)
              {
                operator delete(v91);
                v8 = (char *)a1[2];
              }
            }
            else
            {
              v76 = v75 >> 3;
              v32 = v75 >> 3 < -1;
              v77 = (v75 >> 3) + 2;
              if (v32)
                v78 = v77;
              else
                v78 = v76 + 1;
              v79 = &v72[-8 * (v78 >> 1)];
              v80 = v8 - v72;
              if (v8 != v72)
              {
                memmove(&v72[-8 * (v78 >> 1)], v72, v8 - v72);
                v8 = (char *)a1[1];
              }
              v81 = &v8[-8 * (v78 >> 1)];
              v8 = &v79[v80];
              a1[1] = v81;
              a1[2] = &v79[v80];
            }
          }
          *(_QWORD *)v8 = v73;
          v8 = (char *)(a1[2] + 8);
          a1[2] = v8;
        }
      }
      else
      {
        if (v22 >> 2 <= v21 + v10)
          v23 = v21 + v10;
        else
          v23 = v22 >> 2;
        v24 = v10 - v20;
        v106 = a1 + 3;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v23);
        else
          v25 = 0;
        v101 = -170 * v20;
        v102 = v4;
        *(_QWORD *)&v104 = v23;
        *((_QWORD *)&v104 + 1) = v23 + 8 * v24;
        *(_QWORD *)&v105 = *((_QWORD *)&v104 + 1);
        *((_QWORD *)&v105 + 1) = v23 + 8 * v25;
        do
        {
          v103 = operator new(0xFF0uLL);
          std::__split_buffer<std::string *>::push_back(&v104, &v103);
          --v21;
        }
        while (v21);
        v48 = (_QWORD *)a1[1];
        if (v20)
        {
          v49 = (char *)v105;
          do
          {
            if (v49 == *((char **)&v105 + 1))
            {
              v50 = (char *)*((_QWORD *)&v104 + 1);
              v51 = (void *)v104;
              if (*((_QWORD *)&v104 + 1) <= (unint64_t)v104)
              {
                if (v49 == (char *)v104)
                  v57 = 1;
                else
                  v57 = (uint64_t)&v49[-v104] >> 2;
                v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v57);
                v61 = v49 - v50;
                v60 = v49 == v50;
                v49 = &v58[8 * (v57 >> 2)];
                if (!v60)
                {
                  v49 = &v58[8 * (v57 >> 2) + (v61 & 0xFFFFFFFFFFFFFFF8)];
                  v62 = 8 * (v61 >> 3);
                  v63 = &v58[8 * (v57 >> 2)];
                  do
                  {
                    v64 = *(_QWORD *)v50;
                    v50 += 8;
                    *(_QWORD *)v63 = v64;
                    v63 += 8;
                    v62 -= 8;
                  }
                  while (v62);
                }
                *(_QWORD *)&v104 = v58;
                *((_QWORD *)&v104 + 1) = &v58[8 * (v57 >> 2)];
                *(_QWORD *)&v105 = v49;
                *((_QWORD *)&v105 + 1) = &v58[8 * v59];
                if (v51)
                  operator delete(v51);
              }
              else
              {
                v52 = (uint64_t)(*((_QWORD *)&v104 + 1) - v104) >> 3;
                if (v52 >= -1)
                  v53 = v52 + 1;
                else
                  v53 = v52 + 2;
                v54 = *((_QWORD *)&v104 + 1) - 8 * (v53 >> 1);
                v55 = &v49[-*((_QWORD *)&v104 + 1)];
                if (v49 != *((char **)&v104 + 1))
                {
                  memmove((void *)(*((_QWORD *)&v104 + 1) - 8 * (v53 >> 1)), *((const void **)&v104 + 1), (size_t)&v49[-*((_QWORD *)&v104 + 1)]);
                  v49 = v50;
                }
                v56 = &v49[-8 * (v53 >> 1)];
                v49 = &v55[v54];
                *((_QWORD *)&v104 + 1) = v56;
                *(_QWORD *)&v105 = &v55[v54];
              }
            }
            *(_QWORD *)v49 = *v48;
            v49 = (char *)(v105 + 8);
            *(_QWORD *)&v105 = v105 + 8;
            v48 = (_QWORD *)(a1[1] + 8);
            a1[1] = v48;
            --v20;
          }
          while (v20);
        }
        v65 = (_QWORD *)a1[2];
        if (v65 != v48)
        {
          do
            std::__split_buffer<std::string *>::push_front((uint64_t)&v104, --v65);
          while (v65 != (_QWORD *)a1[1]);
        }
        v66 = (char *)*a1;
        v67 = v105;
        *(_OWORD *)a1 = v104;
        *((_OWORD *)a1 + 1) = v67;
        v4 = v102;
        a1[4] += v101;
        if (v66)
        {
          operator delete(v66);
          v8 = (char *)a1[2];
        }
        else
        {
          v8 = (char *)v67;
        }
      }
    }
    v13 = a1[5];
    v9 = (char *)a1[1];
    v14 = a1[4] + v13;
  }
  v92 = &v9[8 * (v14 / 0xAA)];
  if (v8 == v9)
    v93 = 0;
  else
    v93 = *(_QWORD *)v92 + 24 * (v14 % 0xAA);
  *(_QWORD *)&v104 = &v9[8 * (v14 / 0xAA)];
  *((_QWORD *)&v104 + 1) = v93;
  std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:nn180100](&v104, v4);
  v94 = *((_QWORD *)&v104 + 1);
  if (v93 != *((_QWORD *)&v104 + 1))
  {
    v95 = (char *)v104;
    do
    {
      if (v92 == v95)
        v96 = v94;
      else
        v96 = *(_QWORD *)v92 + 4080;
      if (v93 == v96)
      {
        v96 = v93;
      }
      else
      {
        v97 = (std::string *)v93;
        do
        {
          if (*((char *)a3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
          }
          else
          {
            v98 = *a3;
            v97->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
            *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
          }
          a3 = (__int128 *)((char *)a3 + 24);
          if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4080)
          {
            v99 = (__int128 *)a2[1];
            ++a2;
            a3 = v99;
          }
          ++v97;
        }
        while (v97 != (std::string *)v96);
        v13 = a1[5];
      }
      v13 -= 0x5555555555555555 * ((uint64_t)(v96 - v93) >> 3);
      a1[5] = v13;
      if (v92 == v95)
        break;
      v100 = *((_QWORD *)v92 + 1);
      v92 += 8;
      v93 = v100;
    }
    while (v100 != v94);
  }
}

void std::__split_buffer<std::string *>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::string *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Recorder::State *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:nn180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 169 - v3;
      v6 = &v2[-(v5 / 0xAA)];
      *result = v6;
      v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::stack<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::stack<std::string>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::stack<std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::stack<std::string>>,0>(uint64_t a1)
{
  std::deque<std::string>::~deque[abi:nn180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  void *v33;
  uint8x8_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint8x8_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char v49;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v49, v7, v8);
  v10 = *(float *)(a1 + 32);
  v48 = v9;
  *((_QWORD *)v4 - 1) = v9;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v11 || (float)(v10 * (float)v11) < v12)
  {
    v13 = 1;
    if (v11 >= 3)
      v13 = (v11 & (v11 - 1)) != 0;
    v14 = v13 | (2 * v11);
    v15 = vcvtps_u32_f32(v12 / v10);
    if (v14 <= v15)
      prime = (int8x8_t)v15;
    else
      prime = (int8x8_t)v14;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    v47 = v2;
    if (*(_QWORD *)&prime > v11)
    {
LABEL_19:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = operator new(8 * *(_QWORD *)&prime);
      v18 = *(void **)a1;
      *(_QWORD *)a1 = v17;
      if (v18)
        operator delete(v18);
      v19 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19++) = 0;
      while (*(_QWORD *)&prime != v19);
      v20 = *(unsigned __int8 ***)(a1 + 16);
      if (v20)
      {
        v21 = (unint64_t)v20[1];
        v22 = (uint8x8_t)vcnt_s8(prime);
        v22.i16[0] = vaddlv_u8(v22);
        v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= *(_QWORD *)&prime)
            v21 %= *(_QWORD *)&prime;
        }
        else
        {
          v21 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a1 + 16;
        v27 = *v20;
        if (*v20)
        {
          v46 = v22.u32[0];
          do
          {
            v28 = *((_QWORD *)v27 + 1);
            if (v23 > 1)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            if (v28 == v21)
            {
              v20 = (unsigned __int8 **)v27;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
            {
              v29 = *(unsigned __int8 **)v27;
              if (*(_QWORD *)v27)
              {
                v30 = v27;
                while (1)
                {
                  v31 = std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, v27 + 16, v29 + 16);
                  v32 = *(unsigned __int8 **)v30;
                  if (!v31)
                    break;
                  v29 = *(unsigned __int8 **)v32;
                  v30 = *(unsigned __int8 **)v30;
                  if (!*(_QWORD *)v32)
                    goto LABEL_52;
                }
                v29 = *(unsigned __int8 **)v30;
                v32 = v30;
LABEL_52:
                v23 = v46;
              }
              else
              {
                v32 = v27;
              }
              *v20 = v29;
              *(_QWORD *)v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v20;
              v20 = (unsigned __int8 **)v27;
              v21 = v28;
            }
            v27 = *v20;
          }
          while (*v20);
        }
      }
      goto LABEL_64;
    }
    if (*(_QWORD *)&prime < v11)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime < v11)
      {
        if (prime)
          goto LABEL_19;
        v33 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_64:
    v11 = *(_QWORD *)(a1 + 8);
    v2 = v47;
  }
  v34 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v34.i16[0] = vaddlv_u8(v34);
  v35 = v34.u32[0];
  if (v34.u32[0] > 1uLL)
  {
    v36 = v48;
    if (v11 <= v48)
      v36 = v48 % v11;
  }
  else
  {
    v36 = (v11 - 1) & v48;
  }
  v37 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v36);
  if (v37)
  {
    v38 = *(unsigned __int8 **)v37;
    if (*(_QWORD *)v37)
    {
      v39 = 0;
      do
      {
        v40 = *((_QWORD *)v38 + 1);
        if (v35 > 1)
        {
          v41 = *((_QWORD *)v38 + 1);
          if (v40 >= v11)
            v41 = v40 % v11;
        }
        else
        {
          v41 = v40 & (v11 - 1);
        }
        if (v41 != v36)
          break;
        v42 = v40 == v48 ? std::equal_to<std::string>::operator()[abi:nn180100](a1 + 32, v38 + 16, v4) : 0;
        if ((v39 & (v42 ^ 1) & 1) != 0)
          break;
        v39 |= v42;
        v37 = *(unsigned __int8 **)v37;
        v38 = *(unsigned __int8 **)v37;
      }
      while (*(_QWORD *)v37);
      v11 = *(_QWORD *)(a1 + 8);
      v43 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
      v43.i16[0] = vaddlv_u8(v43);
      v35 = v43.u32[0];
    }
  }
  v44 = v2[1];
  if (v35 > 1)
  {
    if (v44 >= v11)
      v44 %= v11;
  }
  else
  {
    v44 &= v11 - 1;
  }
  if (!v37)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = a1 + 16;
    if (!*v2)
      goto LABEL_101;
    v45 = *(_QWORD *)(*v2 + 8);
    if (v35 > 1)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
LABEL_100:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v2;
    goto LABEL_101;
  }
  *v2 = *(_QWORD *)v37;
  *(_QWORD *)v37 = v2;
  if (*v2)
  {
    v45 = *(_QWORD *)(*v2 + 8);
    if (v35 > 1)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
    if (v45 != v44)
      goto LABEL_100;
  }
LABEL_101:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::stack<std::string>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

double std::__for_each_segment[abi:nn180100]<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<std::string,std::string const*,std::string const&,std::string const* const*,long,170l>,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>>>(std::string **a1, std::string *a2, std::string **a3, std::string *a4, uint64_t a5)
{
  std::string **size;
  std::string *v8;
  std::string **v10;
  std::string *i;
  std::string *v12;
  double result;
  std::string v14;

  size = *(std::string ***)a5;
  v8 = *(std::string **)(a5 + 8);
  if (a1 == a3)
  {
    memset(&v14, 170, sizeof(v14));
  }
  else
  {
    v10 = a1 + 1;
    for (i = *a1 + 170; ; i = v12 + 170)
    {
      memset(&v14, 170, sizeof(v14));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::string const*,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>,0>(&v14, a2, i, size, v8);
      v8 = (std::string *)v14.__r_.__value_.__r.__words[2];
      size = (std::string **)v14.__r_.__value_.__l.__size_;
      *(_QWORD *)a5 = v14.__r_.__value_.__l.__size_;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
    memset(&v14, 170, sizeof(v14));
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::string const*,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>,0>(&v14, a2, a4, size, v8);
  result = *(double *)&v14.__r_.__value_.__l.__size_;
  *(_OWORD *)a5 = *(_OWORD *)&v14.__r_.__value_.__r.__words[1];
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::string const*,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>,0>(std::string *result, std::string *__str, std::string *a3, std::string **a4, std::string *this)
{
  std::string **v6;
  const std::string *v7;
  _QWORD *words;
  std::string *v9;
  std::string *v10;
  int64_t v11;
  const std::string *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;

  v6 = a4;
  v7 = __str;
  words = result->__r_.__value_.__r.__words;
  if (__str == a3)
  {
    v9 = __str;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)this + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3)) < v11)
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3);
      if (v11)
      {
        v12 = v7 + v11;
        v13 = 24 * v11;
        do
        {
          result = std::string::operator=(this++, v7++);
          v13 -= 24;
        }
        while (v13);
        v7 = v12;
      }
      if (v7 == v9)
        break;
      v14 = v6[1];
      ++v6;
      v10 = v14;
      this = v14;
    }
    if (&(*v6)[170] == this)
    {
      v15 = v6[1];
      ++v6;
      this = v15;
    }
  }
  *words = v9;
  words[1] = v6;
  words[2] = this;
  return result;
}

BOOL std::deque<std::string>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 170 * ((v1 - v2) >> 3) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x154)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x153;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::stack<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::stack<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::stack<std::string>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::__unordered_map_hasher<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,true>,std::__unordered_map_equal<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::equal_to<SVG::Element const*>,std::hash<SVG::Element const*>,true>,std::allocator<std::__hash_value_type<SVG::Element const*,SVG::Presentation>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::__unordered_map_hasher<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,true>,std::__unordered_map_equal<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::equal_to<SVG::Element const*>,std::hash<SVG::Element const*>,true>,std::allocator<std::__hash_value_type<SVG::Element const*,SVG::Presentation>>>::__deallocate_node(*(unsigned int **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::__unordered_map_hasher<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,true>,std::__unordered_map_equal<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::equal_to<SVG::Element const*>,std::hash<SVG::Element const*>,true>,std::allocator<std::__hash_value_type<SVG::Element const*,SVG::Presentation>>>::__deallocate_node(unsigned int *__p)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = *(unsigned int **)v1;
      v3 = v1[118];
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, unsigned int *))off_1E7138938[v3])(&v8, v1 + 110);
      v1[118] = -1;
      v4 = v1[106];
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, unsigned int *))off_1E7138920[v4])(&v9, v1 + 94);
      v1[106] = -1;
      v5 = v1[72];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))off_1E7138908[v5])(&v10, v1 + 68);
      v1[72] = -1;
      v6 = v1[56];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E7138920[v6])(&v11, v1 + 44);
      v1[56] = -1;
      v7 = v1[26];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E7138908[v7])(&v12, v1 + 22);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::__unordered_map_hasher<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,true>,std::__unordered_map_equal<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::equal_to<SVG::GradientElement const*>,std::hash<SVG::GradientElement const*>,true>,std::allocator<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::__unordered_map_hasher<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,true>,std::__unordered_map_equal<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::equal_to<SVG::GradientElement const*>,std::hash<SVG::GradientElement const*>,true>,std::allocator<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::__unordered_map_hasher<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,true>,std::__unordered_map_equal<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::equal_to<SVG::GradientElement const*>,std::hash<SVG::GradientElement const*>,true>,std::allocator<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (const void *)v1[3];
      if (v3)
        CFRelease(v3);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__shared_ptr_pointer<SVG::Document *,std::shared_ptr<SVG::Document>::__shared_ptr_default_delete<SVG::Document,SVG::Document>,std::allocator<SVG::Document>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t std::__shared_ptr_pointer<SVG::Document *,std::shared_ptr<SVG::Document>::__shared_ptr_default_delete<SVG::Document,SVG::Document>,std::allocator<SVG::Document>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  const void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 352);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 3));
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 336);
    *(_QWORD *)(v1 + 336) = 0;
    if (v4)
      operator delete(v4);
    std::__hash_table<std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::__unordered_map_hasher<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,true>,std::__unordered_map_equal<SVG::Element const*,std::__hash_value_type<SVG::Element const*,SVG::Presentation>,std::equal_to<SVG::Element const*>,std::hash<SVG::Element const*>,true>,std::allocator<std::__hash_value_type<SVG::Element const*,SVG::Presentation>>>::~__hash_table(v1 + 296);
    std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::~__hash_table(v1 + 256);
    std::__hash_table<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::__unordered_map_hasher<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::hash<SVG::PatternElement const*>,std::equal_to<SVG::PatternElement const*>,true>,std::__unordered_map_equal<SVG::PatternElement const*,std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>,std::equal_to<SVG::PatternElement const*>,std::hash<SVG::PatternElement const*>,true>,std::allocator<std::__hash_value_type<SVG::PatternElement const*,SVG::Document::PatternData>>>::~__hash_table(v1 + 216);
    std::__hash_table<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::__unordered_map_hasher<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,true>,std::__unordered_map_equal<SVG::GradientElement const*,std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>,std::equal_to<SVG::GradientElement const*>,std::hash<SVG::GradientElement const*>,true>,std::allocator<std::__hash_value_type<SVG::GradientElement const*,SVG::CF<CGGradient *>>>>::~__hash_table(v1 + 176);
    std::__hash_table<SVG::Element const*,std::hash<SVG::Element const*>,std::equal_to<SVG::Element const*>,std::allocator<SVG::Element const*>>::~__hash_table(v1 + 136);
    std::__hash_table<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::reference_wrapper<SVG::Element>>>>::~__hash_table(v1 + 96);
    v5 = *(const void **)(v1 + 88);
    if (v5)
      CFRelease(v5);
    v6 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    std::mutex::~mutex((std::mutex *)v1);
    JUMPOUT(0x1BCCCA1B4);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SVG::Document *,std::shared_ptr<SVG::Document>::__shared_ptr_default_delete<SVG::Document,SVG::Document>,std::allocator<SVG::Document>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_OWORD *SVG::RectElement::RectElement(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _OWORD *v12;
  _OWORD *v13;
  void *__p[2];
  char v16;
  void *v17[2];
  unint64_t v18;

  v5 = SVG::ShapeElement::ShapeElement((uint64_t)a1, a2, a3);
  *(_QWORD *)v5 = off_1E7137310;
  *(_QWORD *)(v5 + 688) = 0;
  *(_DWORD *)(v5 + 696) = 0;
  *(_QWORD *)(v5 + 704) = 0;
  *(_DWORD *)(v5 + 712) = 0;
  *(_QWORD *)(v5 + 720) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  *(_QWORD *)(v5 + 736) = 0;
  *(_DWORD *)(v5 + 744) = 0;
  *(_QWORD *)(v5 + 752) = 0;
  *(_DWORD *)(v5 + 760) = 0;
  *(_QWORD *)(v5 + 768) = 0;
  *(_DWORD *)(v5 + 776) = 0;
  std::string::basic_string[abi:nn180100]<0>(v17, "x");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17[0]);
    if (!v6)
      goto LABEL_9;
  }
  else if (!v6)
  {
    goto LABEL_9;
  }
  v17[0] = (void *)-1;
  v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
  if ((_BYTE)v18)
    a1[43] = *(_OWORD *)v17;
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v17, "y");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v7 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17[0]);
    if (!v7)
      goto LABEL_17;
  }
  else if (!v7)
  {
    goto LABEL_17;
  }
  v17[0] = (void *)-1;
  v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v7 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
  if ((_BYTE)v18)
    a1[44] = *(_OWORD *)v17;
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v17, "width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17[0]);
    if (!v8)
      goto LABEL_25;
  }
  else if (!v8)
  {
    goto LABEL_25;
  }
  v17[0] = (void *)-1;
  v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
  if ((_BYTE)v18)
    a1[45] = *(_OWORD *)v17;
LABEL_25:
  std::string::basic_string[abi:nn180100]<0>(v17, "height");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v9 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17[0]);
    if (!v9)
      goto LABEL_33;
  }
  else if (!v9)
  {
    goto LABEL_33;
  }
  v17[0] = (void *)-1;
  v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v9 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
  if ((_BYTE)v18)
    a1[46] = *(_OWORD *)v17;
LABEL_33:
  std::string::basic_string[abi:nn180100]<0>(v17, "rx");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v10 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:nn180100]<0>(v17, "ry");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v11 = SVG::Element::findInAttributeMap(a3, (uint64_t)v17, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  v12 = a1 + 47;
  if (v10)
  {
    v17[0] = (void *)-1;
    v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v10 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
    if ((_BYTE)v18)
      *v12 = *(_OWORD *)v17;
  }
  v13 = a1 + 48;
  if (v11)
  {
    v17[0] = (void *)-1;
    v17[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v18 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v11 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v17);
    if ((_BYTE)v18)
      *v13 = *(_OWORD *)v17;
  }
  if (!v10)
  {
    *v12 = *v13;
    if (v11)
      return a1;
LABEL_51:
    *v13 = *v12;
    return a1;
  }
  if (!v11)
    goto LABEL_51;
  return a1;
}

double SVG::RectElement::boundingBox(SVG::RectElement *this, CGRect a2)
{
  double height;
  double width;
  double v5;

  height = a2.size.height;
  width = a2.size.width;
  v5 = SVG::Length::computeValue((SVG::RectElement *)((char *)this + 688), a2.size.width);
  SVG::Length::computeValue((SVG::RectElement *)((char *)this + 704), height);
  SVG::Length::computeValue((SVG::RectElement *)((char *)this + 720), width);
  SVG::Length::computeValue((SVG::RectElement *)((char *)this + 736), height);
  return v5;
}

void SVG::RectElement::path(SVG::RectElement *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGPathRef *a3@<X8>)
{
  double height;
  double width;
  double v7;
  double v8;
  CGFloat v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGPath *Mutable;
  CGFloat MaxX;
  __int128 v20;
  CGFloat v21;
  __int128 v22;
  CGFloat v23;
  CGFloat MaxY;
  __int128 v25;
  CGFloat v26;
  CGFloat v27;
  __int128 v28;
  CGFloat v29;
  double v30;
  __int128 v31;
  CGFloat v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGAffineTransform v39;
  CGAffineTransform v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGAffineTransform v45;
  CGAffineTransform m;
  CGAffineTransform v47;
  CGAffineTransform v48;
  CGAffineTransform v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  height = a2.size.height;
  width = a2.size.width;
  v7 = SVG::RectElement::boundingBox(this, a2);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = SVG::Length::computeValue((SVG::RectElement *)((char *)this + 752), width);
  v15 = SVG::Length::computeValue((SVG::RectElement *)((char *)this + 768), height);
  if (v11 * 0.5 >= v14)
    v16 = v14;
  else
    v16 = v11 * 0.5;
  if (v13 * 0.5 >= v15)
    v17 = v15;
  else
    v17 = v13 * 0.5;
  if (v11 <= 0.0 || v13 <= 0.0)
  {
    *a3 = 0;
  }
  else if (v16 == 0.0 || v17 == 0.0)
  {
    v58.origin.x = v7;
    v58.origin.y = v9;
    v58.size.width = v11;
    v58.size.height = v13;
    *a3 = CGPathCreateWithRect(v58, 0);
  }
  else
  {
    Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, v7 + v16, v9);
    v50.origin.x = v7;
    v50.origin.y = v9;
    v50.size.width = v11;
    v50.size.height = v13;
    MaxX = CGRectGetMaxX(v50);
    CGPathAddLineToPoint(Mutable, 0, MaxX - v16, v9);
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    *(_OWORD *)&v49.c = v20;
    *(_OWORD *)&v49.tx = v20;
    *(_OWORD *)&v49.a = v20;
    CGAffineTransformMakeScale(&v49, v16, v17);
    v51.origin.x = v7;
    v51.origin.y = v9;
    v51.size.width = v11;
    v51.size.height = v13;
    v21 = CGRectGetMaxX(v51) - v16;
    v47 = v49;
    CGAffineTransformInvert(&v48, &v47);
    *(_QWORD *)&v22 = -1;
    *((_QWORD *)&v22 + 1) = -1;
    *(_OWORD *)&m.c = v22;
    *(_OWORD *)&m.tx = v22;
    v45 = v49;
    *(_OWORD *)&m.a = v22;
    CGAffineTransformTranslate(&m, &v45, v48.tx + (v9 + v17) * v48.c + v48.a * v21, v48.ty + (v9 + v17) * v48.d + v48.b * v21);
    CGPathAddArc(Mutable, &m, 0.0, 0.0, 1.0, 4.71238898, 6.28318531, 0);
    v52.origin.x = v7;
    v52.origin.y = v9;
    v52.size.width = v11;
    v52.size.height = v13;
    v23 = CGRectGetMaxX(v52);
    v53.origin.x = v7;
    v53.origin.y = v9;
    v53.size.width = v11;
    v53.size.height = v13;
    MaxY = CGRectGetMaxY(v53);
    CGPathAddLineToPoint(Mutable, 0, v23, MaxY - v17);
    *(_QWORD *)&v25 = -1;
    *((_QWORD *)&v25 + 1) = -1;
    *(_OWORD *)&v49.c = v25;
    *(_OWORD *)&v49.tx = v25;
    *(_OWORD *)&v49.a = v25;
    CGAffineTransformMakeScale(&v49, v16, v17);
    v54.origin.x = v7;
    v54.origin.y = v9;
    v54.size.width = v11;
    v54.size.height = v13;
    v26 = CGRectGetMaxX(v54) - v16;
    v55.origin.x = v7;
    v55.origin.y = v9;
    v55.size.width = v11;
    v55.size.height = v13;
    v27 = CGRectGetMaxY(v55) - v17;
    v43 = v49;
    CGAffineTransformInvert(&v44, &v43);
    *(_QWORD *)&v28 = -1;
    *((_QWORD *)&v28 + 1) = -1;
    *(_OWORD *)&m.c = v28;
    *(_OWORD *)&m.tx = v28;
    *(_OWORD *)&m.a = v28;
    v42 = v49;
    CGAffineTransformTranslate(&m, &v42, v44.tx + v27 * v44.c + v44.a * v26, v44.ty + v27 * v44.d + v44.b * v26);
    CGPathAddArc(Mutable, &m, 0.0, 0.0, 1.0, 0.0, 1.57079633, 0);
    v56.origin.x = v7;
    v56.origin.y = v9;
    v56.size.width = v11;
    v56.size.height = v13;
    v29 = CGRectGetMaxY(v56);
    v30 = v7 + v16;
    CGPathAddLineToPoint(Mutable, 0, v7 + v16, v29);
    *(_QWORD *)&v31 = -1;
    *((_QWORD *)&v31 + 1) = -1;
    *(_OWORD *)&v49.c = v31;
    *(_OWORD *)&v49.tx = v31;
    *(_OWORD *)&v49.a = v31;
    CGAffineTransformMakeScale(&v49, v16, v17);
    v57.origin.x = v7;
    v57.origin.y = v9;
    v57.size.width = v11;
    v57.size.height = v13;
    v32 = CGRectGetMaxY(v57) - v17;
    v40 = v49;
    CGAffineTransformInvert(&v41, &v40);
    *(_QWORD *)&v33 = -1;
    *((_QWORD *)&v33 + 1) = -1;
    *(_OWORD *)&m.c = v33;
    *(_OWORD *)&m.tx = v33;
    *(_OWORD *)&m.a = v33;
    v39 = v49;
    CGAffineTransformTranslate(&m, &v39, v41.tx + v32 * v41.c + v41.a * v30, v41.ty + v32 * v41.d + v41.b * v30);
    CGPathAddArc(Mutable, &m, 0.0, 0.0, 1.0, 1.57079633, 3.14159265, 0);
    CGPathAddLineToPoint(Mutable, 0, v7, v9 + v17);
    *(_QWORD *)&v34 = -1;
    *((_QWORD *)&v34 + 1) = -1;
    *(_OWORD *)&v49.c = v34;
    *(_OWORD *)&v49.tx = v34;
    *(_OWORD *)&v49.a = v34;
    CGAffineTransformMakeScale(&v49, v16, v17);
    v37 = v49;
    CGAffineTransformInvert(&v38, &v37);
    *(_QWORD *)&v35 = -1;
    *((_QWORD *)&v35 + 1) = -1;
    *(_OWORD *)&m.c = v35;
    *(_OWORD *)&m.tx = v35;
    *(_OWORD *)&m.a = v35;
    v36 = v49;
    CGAffineTransformTranslate(&m, &v36, v38.tx + (v9 + v17) * v38.c + v38.a * v30, v38.ty + (v9 + v17) * v38.d + v38.b * v30);
    CGPathAddArc(Mutable, &m, 0.0, 0.0, 1.0, 3.14159265, 4.71238898, 0);
    CGPathCloseSubpath(Mutable);
    *a3 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      CFRelease(Mutable);
    }
  }
}

void SVG::RectElement::~RectElement(SVG::RectElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138978[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138990[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71389A8[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138990[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71389A8[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138978[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138990[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71389A8[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138990[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71389A8[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::PolygonElement::PolygonElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  __int128 v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v24[2];
  __int128 v25;
  void *__p;
  char *v27;
  char *v28;

  v5 = (_QWORD *)SVG::ShapeElement::ShapeElement(a1, a2, a3);
  *v5 = off_1E71374E8;
  v5[86] = 0;
  v5[88] = 0;
  v5[87] = 0;
  std::string::basic_string[abi:nn180100]<0>(v24, "points");
  std::string::basic_string[abi:nn180100]<0>(&__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)&__p);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v6)
      return a1;
  }
  else if (!v6)
  {
    return a1;
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v24 = v7;
  v25 = v7;
  SVG::consumeAlone<std::vector<double>>((uint64_t)(v6 + 64), (void (*)(void **__return_ptr, uint64_t, unint64_t))SVG::consumeCoordinates, (uint64_t)v24);
  if (BYTE8(v25))
  {
    v8 = 0;
    v9 = 0;
    __p = 0;
    v27 = 0;
    v28 = 0;
    v10 = (char *)v24[0];
    if ((void *)((char *)v24[1] - (char *)v24[0]) >= (void *)0x10)
    {
      v9 = 0;
      v11 = 0;
      do
      {
        v12 = &v10[16 * v11];
        v14 = *(_QWORD *)v12;
        v13 = *((_QWORD *)v12 + 1);
        if (v9 >= v28)
        {
          v15 = (char *)__p;
          v16 = (v9 - (_BYTE *)__p) >> 4;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            abort();
          v18 = v28 - (_BYTE *)__p;
          if ((v28 - (_BYTE *)__p) >> 3 > v17)
            v17 = v18 >> 3;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::Length>>((uint64_t)&v28, v19);
            v15 = (char *)__p;
            v9 = v27;
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_QWORD *)v21 = v14;
          *((_QWORD *)v21 + 1) = v13;
          v22 = v21;
          if (v9 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v9 - 1);
              v22 -= 16;
              v9 -= 16;
            }
            while (v9 != v15);
            v15 = (char *)__p;
          }
          v9 = v21 + 16;
          __p = v22;
          v27 = v21 + 16;
          v28 = &v20[16 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v9 = v14;
          *((_QWORD *)v9 + 1) = v13;
          v9 += 16;
        }
        v27 = v9;
        ++v11;
        v10 = (char *)v24[0];
      }
      while (v11 < (unint64_t)(((char *)v24[1] - (char *)v24[0]) >> 3) >> 1);
      v8 = (char *)__p;
    }
    if ((void **)(a1 + 688) != &__p)
    {
      std::vector<CGPoint>::__assign_with_size[abi:nn180100]<CGPoint*,CGPoint*>((char *)(a1 + 688), v8, (uint64_t)v9, (v9 - v8) >> 4);
      v8 = (char *)__p;
    }
    if (v8)
    {
      v27 = v8;
      operator delete(v8);
    }
    if (BYTE8(v25) && v24[0])
    {
      v24[1] = v24[0];
      operator delete(v24[0]);
    }
  }
  return a1;
}

void SVG::PolygonElement::path(const CGPoint **this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGPath **a3@<X8>)
{
  CGPath *Mutable;

  Mutable = CGPathCreateMutable();
  CGPathAddLines(Mutable, 0, this[86], this[87] - this[86]);
  if ((unint64_t)((char *)this[87] - (char *)this[86]) >= 0x11)
    CGPathCloseSubpath(Mutable);
  *a3 = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    CFRelease(Mutable);
  }
}

float64_t SVG::PolygonElement::boundingBox(SVG::PolygonElement *this, CGRect a2)
{
  float64x2_t *v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v2 = (float64x2_t *)*((_QWORD *)this + 87);
  v3 = (float64x2_t *)*((_QWORD *)this + 86);
  if (v2 == v3)
  {
    v5.f64[0] = *(float64_t *)MEMORY[0x1E0C9D648];
  }
  else
  {
    v4 = *v3;
    v5 = *v3;
    do
    {
      v6 = *v3++;
      v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v5, v6), (int8x16_t)v6, (int8x16_t)v5);
      v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v6, v4), (int8x16_t)v6, (int8x16_t)v4);
    }
    while (v3 != v2);
  }
  return v5.f64[0];
}

void SVG::PolygonElement::~PolygonElement(SVG::PolygonElement *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71374E8;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E71389C0[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71389D8[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E71389F0[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71389D8[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E71389F0[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E71374E8;
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E71389C0[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E71389D8[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E71389F0[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E71389D8[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E71389F0[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

unint64_t SVG::CSS::consumeWhitespace(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  if (v2 <= a2
    || (v3 >= 0 ? (v4 = a1) : (v4 = (uint64_t *)*a1),
        (v5 = *((char *)v4 + a2), v6 = v5 > 0x20, v7 = (1 << v5) & 0x100000600, !v6) ? (v8 = v7 == 0) : (v8 = 1),
        v8))
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = (a2 + 1) & 0xFFFFFFFFFFFFFF00;
    v10 = (a2 + 1);
  }
  return v9 | v10;
}

uint64_t SVG::CSS::consumeAName@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 v5;
  BOOL v6;
  unint64_t v7;
  int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  char v18;
  size_t v19;
  void *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned __int8 *i;
  int v27;
  unsigned int v29;
  int v30;
  void *__p[2];
  std::string::size_type v34;
  unint64_t v35[3];
  _OWORD v36[4];
  void *v37[2];
  __int128 v38;
  __int128 v39;
  _OWORD v40[9];
  unint64_t v41;
  _QWORD v42[3];
  _QWORD v43[4];

  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v5;
  v40[8] = v5;
  v40[5] = v5;
  v40[6] = v5;
  v40[3] = v5;
  v40[4] = v5;
  v40[1] = v5;
  v40[2] = v5;
  v39 = v5;
  v40[0] = v5;
  *(_OWORD *)v37 = v5;
  v38 = v5;
  v36[2] = v5;
  v36[3] = v5;
  v36[0] = v5;
  v36[1] = v5;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v36);
  memset(v35, 170, sizeof(v35));
  SVG::CSS::consumeCodePoint(a1, a2, (uint64_t)v35);
  if (!LOBYTE(v35[2]))
    goto LABEL_63;
  do
  {
    if ((v35[0] & 0xFFFFFFDF) - 65 < 0x1A
      || SLODWORD(v35[0]) > 127
      || LODWORD(v35[0]) == 95
      || (LODWORD(v35[0]) != 45 ? (v6 = (LODWORD(v35[0]) - 48) > 9) : (v6 = 0), !v6))
    {
      SVG::CSS::appendToStringStream(v36, v35[0]);
      a2 = v35[1];
      goto LABEL_10;
    }
    if (LODWORD(v35[0]) != 92)
      break;
    v7 = v35[1];
    memset(v43, 170, 24);
    SVG::CSS::consumeCodePoint(a1, v35[1], (uint64_t)v43);
    if (!LOBYTE(v43[2]) || LODWORD(v43[0]) == 10)
      break;
    memset(v42, 170, sizeof(v42));
    SVG::CSS::consumeHexDigit((uint64_t)v42, a1, v7);
    if (!LOBYTE(v42[2]))
    {
      SVG::CSS::consumeCodePoint(a1, v7, (uint64_t)v43);
      v29 = v43[0];
      a2 = v43[1];
      goto LABEL_62;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v42[1];
    do
    {
      memset(v43, 170, 24);
      SVG::CSS::consumeHexDigit((uint64_t)v43, a1, v12);
      if (!LOBYTE(v43[2]))
        break;
      if (v10 >= v9)
      {
        v14 = (uint64_t)&v10[-v11 + 1];
        if (v14 < 0)
          goto LABEL_70;
        if (2 * (uint64_t)&v9[-v11] > (unint64_t)v14)
          v14 = 2 * (_QWORD)&v9[-v11];
        if ((unint64_t)&v9[-v11] >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v13 = &v10[v16 - v11];
        *v13 = v43[0];
        if (v10 == (char *)v11)
        {
          v11 = (unint64_t)&v10[v16 - v11];
          if (v10)
            goto LABEL_33;
        }
        else
        {
          v17 = &v10[~v11];
          do
          {
            v18 = *--v10;
            (v17--)[v16] = v18;
          }
          while (v10 != (char *)v11);
          v10 = (char *)v11;
          v11 = v16;
          if (v10)
LABEL_33:
            operator delete(v10);
        }
        v9 = (char *)(v16 + v15);
        v12 = v43[1];
        goto LABEL_35;
      }
      *v10 = v43[0];
      v12 = v43[1];
      v13 = v10;
LABEL_35:
      v10 = v13 + 1;
      ++v8;
    }
    while (v8 != 5);
    v19 = (size_t)&v10[-v11];
    if (v10 == (char *)v11)
    {
      v21 = 0;
      v22 = 0;
      if (v11)
        goto LABEL_42;
    }
    else
    {
      if ((uint64_t)&v10[-v11] < 0)
LABEL_70:
        abort();
      v20 = operator new((size_t)&v10[-v11]);
      memmove(v20, (const void *)v11, (size_t)&v10[-v11]);
      v21 = (unsigned __int8 *)operator new((size_t)&v10[-v11]);
      memcpy(v21, v20, v19);
      v22 = &v21[v19];
      operator delete(v20);
      if (v11)
LABEL_42:
        operator delete((void *)v11);
    }
    v23 = SVG::CSS::consumeWhitespace(a1, v12);
    if (v24)
      a2 = v23;
    else
      a2 = v12;
    v25 = LOBYTE(v42[0]);
    for (i = v21; i != v22; v25 = v27 | (16 * v25))
      v27 = *i++;
    if (!v25)
    {
      v29 = 65533;
      if (!v21)
        goto LABEL_62;
LABEL_61:
      operator delete(v21);
      goto LABEL_62;
    }
    if (v25 >> 11 != 27 && v25 <= 1114111)
      v29 = v25;
    else
      v29 = 65533;
    if (v21)
      goto LABEL_61;
LABEL_62:
    SVG::CSS::appendToStringStream(v36, v29);
LABEL_10:
    memset(v35, 170, sizeof(v35));
    SVG::CSS::consumeCodePoint(a1, a2, (uint64_t)v35);
  }
  while (LOBYTE(v35[2]));
LABEL_63:
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v36 + 8, __p);
  if (SHIBYTE(v34) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v30 = SHIBYTE(v34);
    a3[1].__r_.__value_.__r.__words[0] = a2;
    if (v30 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a3->__r_.__value_.__r.__words[2] = v34;
    a3[1].__r_.__value_.__r.__words[0] = a2;
  }
  *(_QWORD *)&v36[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(*(_QWORD *)&v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v36[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BCCCA19C](v40);
}

uint64_t *SVG::CSS::consumeCodePoint@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;

  v3 = *((unsigned __int8 *)result + 23);
  if (*((char *)result + 23) < 0)
  {
    v6 = result[1];
    if (v6 > a2)
    {
      v4 = a2 + 1;
      v5 = *(unsigned __int8 *)(*result + a2);
      if (*(char *)(*result + a2) < 0)
      {
LABEL_7:
        if (v4 != v6)
        {
          if (v5 < 0xE0)
          {
            if (v5 < 0xC2)
              goto LABEL_39;
            v14 = v5 & 0x1F;
            v9 = (uint64_t *)*result;
          }
          else
          {
            if (v5 > 0xEF)
            {
              if (v5 > 0xF4)
                goto LABEL_39;
              v18 = v5 - 240;
              v9 = (uint64_t *)*result;
              v19 = (v3 & 0x80u) == 0 ? (uint64_t)result : *result;
              v20 = *(unsigned __int8 *)(v19 + v4);
              if (((byte_1B9B92C93[v20 >> 4] >> v18) & 1) == 0)
                goto LABEL_39;
              v4 = a2 + 2;
              if ((v3 & 0x80) != 0)
              {
                v21 = (uint64_t *)*result;
                if (v4 == result[1])
                  goto LABEL_39;
              }
              else
              {
                v21 = result;
                if (v4 == v3)
                {
                  v5 = -1;
                  v4 = *((unsigned __int8 *)result + 23);
                  goto LABEL_40;
                }
              }
              v12 = *((unsigned __int8 *)v21 + v4) ^ 0x80;
              if (v12 > 0x3F)
                goto LABEL_39;
              v7 = v20 & 0x3F | (v18 << 6);
            }
            else
            {
              v7 = v5 & 0xF;
              v8 = a00000000000000[v5 & 0xF];
              v9 = (uint64_t *)*result;
              if ((v3 & 0x80u) == 0)
                v10 = result;
              else
                v10 = (uint64_t *)*result;
              v11 = *((unsigned __int8 *)v10 + v4);
              if (((v8 >> (v11 >> 5)) & 1) == 0)
                goto LABEL_39;
              v12 = v11 & 0x3F;
            }
            ++v4;
            if ((v3 & 0x80u) == 0)
              v13 = *((unsigned __int8 *)result + 23);
            else
              v13 = result[1];
            if (v4 == v13)
              goto LABEL_39;
            v14 = v12 | (v7 << 6);
          }
          if ((v3 & 0x80u) == 0)
            v16 = result;
          else
            v16 = v9;
          v17 = *((unsigned __int8 *)v16 + v4) ^ 0x80;
          if (v17 <= 0x3F)
          {
            v5 = v17 | (v14 << 6);
            ++v4;
            goto LABEL_40;
          }
        }
LABEL_39:
        v5 = -1;
      }
LABEL_40:
      *(_DWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v4;
      v15 = 1;
      goto LABEL_41;
    }
  }
  else if (v3 > a2)
  {
    v4 = a2 + 1;
    v5 = *((unsigned __int8 *)result + a2);
    if (*((char *)result + a2) < 0)
    {
      v6 = *((unsigned __int8 *)result + 23);
      goto LABEL_7;
    }
    goto LABEL_40;
  }
  v15 = 0;
  *(_BYTE *)a3 = 0;
LABEL_41:
  *(_BYTE *)(a3 + 16) = v15;
  return result;
}

_QWORD *SVG::CSS::appendToStringStream(_QWORD *result, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v4;
  char v5;
  int v6;
  char v7;

  v2 = result;
  v6 = -1431655766;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (a2 >> 11 < 0x1B || (a2 & 0xFFFFE000) == 0xE000)
      {
        LOBYTE(v6) = (a2 >> 12) | 0xE0;
        BYTE1(v6) = (a2 >> 6) & 0x3F | 0x80;
        BYTE2(v6) = a2 & 0x3F | 0x80;
        v3 = 3;
      }
      else
      {
        if ((a2 - 0x10000) >> 20)
          return result;
        LOBYTE(v6) = (a2 >> 18) | 0xF0;
        BYTE1(v6) = (a2 >> 12) & 0x3F | 0x80;
        BYTE2(v6) = (a2 >> 6) & 0x3F | 0x80;
        HIBYTE(v6) = a2 & 0x3F | 0x80;
        v3 = 4;
      }
    }
    else
    {
      LOBYTE(v6) = (a2 >> 6) | 0xC0;
      BYTE1(v6) = a2 & 0x3F | 0x80;
      v3 = 2;
    }
  }
  else
  {
    LOBYTE(v6) = a2;
    v3 = 1;
  }
  v4 = &v6;
  do
  {
    v5 = *(_BYTE *)v4;
    v4 = (int *)((char *)v4 + 1);
    v7 = v5;
    result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)&v7, 1);
    --v3;
  }
  while (v3);
  return result;
}

uint64_t SVG::CSS::preprocess@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  uint64_t *v5;
  unint64_t i;
  unsigned int v7;
  unint64_t v8;
  _QWORD v10[3];
  unint64_t v11[3];
  _OWORD v12[4];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  unint64_t v17;

  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[7] = v4;
  v16[8] = v4;
  v16[5] = v4;
  v16[6] = v4;
  v16[3] = v4;
  v16[4] = v4;
  v16[1] = v4;
  v16[2] = v4;
  v15 = v4;
  v16[0] = v4;
  *(_OWORD *)__p = v4;
  v14 = v4;
  v12[2] = v4;
  v12[3] = v4;
  v12[0] = v4;
  v12[1] = v4;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v12);
  memset(v11, 170, sizeof(v11));
  v5 = a1;
  for (i = 0; ; i = v8)
  {
    SVG::CSS::consumeCodePoint(v5, i, (uint64_t)v11);
    if (!LOBYTE(v11[2]))
      break;
    v7 = v11[0];
    if (LODWORD(v11[0]))
    {
      if (LODWORD(v11[0]) == 13)
      {
        memset(v10, 170, sizeof(v10));
        v8 = v11[1];
        SVG::CSS::consumeCodePoint(a1, v11[1], (uint64_t)v10);
        if (LOBYTE(v10[2]) && LODWORD(v10[0]) == 10)
        {
          SVG::CSS::appendToStringStream(v12, 0xAu);
          v8 = v10[1];
          goto LABEL_13;
        }
        goto LABEL_11;
      }
      if (LODWORD(v11[0]) == 12)
      {
        v8 = v11[1];
LABEL_11:
        SVG::CSS::appendToStringStream(v12, 0xAu);
        goto LABEL_13;
      }
    }
    else
    {
      v7 = 65533;
    }
    SVG::CSS::appendToStringStream(v12, v7);
    v8 = v11[1];
LABEL_13:
    memset(v11, 170, sizeof(v11));
    v5 = a1;
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>((uint64_t)v12 + 8, a2);
  *(_QWORD *)&v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*(_QWORD *)&v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v12[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BCCCA19C](v16);
}

uint64_t *SVG::CSS::consumeHexDigit(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t *result;
  char v5;
  uint64_t v6;
  _QWORD v7[3];

  memset(v7, 170, sizeof(v7));
  result = SVG::CSS::consumeCodePoint(a2, a3, (uint64_t)v7);
  if (LOBYTE(v7[2]))
  {
    if ((LODWORD(v7[0]) - 58) >= 0xFFFFFFF6)
    {
      v5 = LOBYTE(v7[0]) - 48;
      goto LABEL_8;
    }
    if ((LODWORD(v7[0]) - 65) <= 5)
    {
      v5 = LOBYTE(v7[0]) - 55;
LABEL_8:
      v6 = v7[1];
      *(_BYTE *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = 1;
      return result;
    }
    if ((LODWORD(v7[0]) - 97) <= 5)
    {
      v5 = LOBYTE(v7[0]) - 87;
      goto LABEL_8;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t SVG::parseUnits(uint64_t a1)
{
  return SVG::consumeAlone<SVG::Units>(a1, (void (*)(_QWORD *__return_ptr, uint64_t, unint64_t))SVG::consumeUnits);
}

uint64_t SVG::consumeAlone<SVG::Units>(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t, unint64_t))
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v15[3];

  v4 = 0;
  do
  {
    v5 = v4;
    v4 = SVG::consumeWsp((uint64_t *)a1, v4);
  }
  while (v6);
  memset(v15, 170, sizeof(v15));
  a2(v15, a1, v5);
  v7 = LOBYTE(v15[2]);
  if (!LOBYTE(v15[2]))
    goto LABEL_11;
  v8 = v15[1];
  do
  {
    v9 = v8;
    v8 = SVG::consumeWsp((uint64_t *)a1, v8);
  }
  while (v10);
  v11 = *(unsigned __int8 *)(a1 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a1 + 8);
  if (v9 != v11)
  {
    v7 = 0;
LABEL_11:
    v12 = 0;
    v13 = 0;
    return v13 | v12 | v7;
  }
  v12 = v15[0] & 0xFFFFFF00;
  v7 = LOBYTE(v15[0]);
  v13 = 0x100000000;
  return v13 | v12 | v7;
}

uint64_t SVG::consumeUnits@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __darwin_ct_rune_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __darwin_ct_rune_t v21;
  uint64_t v22;
  int v23;

  v4 = result;
  v6 = *(unsigned __int8 *)(result + 23);
  v7 = v6;
  v8 = *(_QWORD *)(result + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(result + 23);
  else
    v9 = *(_QWORD *)(result + 8);
  v10 = a2 + 14;
  if (v9 >= a2 + 14)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(char *)(v4 + 23) >= 0 ? v4 : *(_QWORD *)v4;
      v13 = *(char *)(v12 + a2 + v11);
      v14 = aUserspaceonuse[v11];
      result = __tolower(v14);
      if ((_DWORD)result != v13)
      {
        v15 = *(char *)(v4 + 23) >= 0 ? v4 : *(_QWORD *)v4;
        v16 = *(char *)(v15 + a2 + v11);
        result = __toupper(v14);
        if ((_DWORD)result != v16)
          break;
      }
      if (++v11 == 14)
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = v10;
        v17 = 1;
        goto LABEL_32;
      }
    }
    v6 = *(unsigned __int8 *)(v4 + 23);
    v8 = *(_QWORD *)(v4 + 8);
    v7 = *(_BYTE *)(v4 + 23);
  }
  if (v7 < 0)
    v6 = v8;
  if (v6 >= a2 + 17)
  {
    v18 = 0;
    while (1)
    {
      v19 = *(char *)(v4 + 23) >= 0 ? v4 : *(_QWORD *)v4;
      v20 = *(char *)(v19 + a2 + v18);
      v21 = aObjectbounding[v18];
      result = __tolower(v21);
      if ((_DWORD)result != v20)
      {
        v22 = *(char *)(v4 + 23) >= 0 ? v4 : *(_QWORD *)v4;
        v23 = *(char *)(v22 + a2 + v18);
        result = __toupper(v21);
        if ((_DWORD)result != v23)
          break;
      }
      if (++v18 == 17)
      {
        v17 = 1;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = a2 + 17;
        goto LABEL_32;
      }
    }
  }
  v17 = 0;
  *(_BYTE *)a3 = 0;
LABEL_32:
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

CGAffineTransform *SVG::unitTransform@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v7;
  __int128 v8;
  CGAffineTransform v11;

  if ((_DWORD)result == 1)
  {
    CGAffineTransformMakeTranslation(&v11, a3, a4);
    return CGAffineTransformScale((CGAffineTransform *)a2, &v11, a5, a6);
  }
  else if (!(_DWORD)result)
  {
    v7 = MEMORY[0x1E0C9BAA8];
    v8 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a2 + 16) = v8;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v7 + 32);
  }
  return result;
}

uint64_t SVG::DefsElement::DefsElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  __int128 v10;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  void *v16[2];
  char v17;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E7137230;
  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 640) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 656) = v7;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(v6 + 32);
  std::string::basic_string[abi:nn180100]<0>(__p, "transform");
  std::string::basic_string[abi:nn180100]<0>(v16, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)__p, (uint64_t)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SBYTE7(v13) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      return a1;
  }
  else if (!v8)
  {
    return a1;
  }
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v13 = v9;
  v14 = v9;
  *(_OWORD *)__p = v9;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  SVG::parseTransform((uint64_t)(v8 + 64), (uint64_t)__p);
  if ((_BYTE)v15)
  {
    v10 = v13;
    *(_OWORD *)(a1 + 640) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 656) = v10;
    *(_OWORD *)(a1 + 672) = v14;
  }
  return a1;
}

uint64_t SVG::DefsElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  if (((*(uint64_t (**)(const void *))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
    return SVG::Element::appendChild(a1, a2);
  v5 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::DefsElement::~DefsElement(SVG::DefsElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138A08[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138A20[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138A38[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138A20[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138A38[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138A08[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138A20[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138A38[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138A20[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138A38[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::DefsElement::isStructural(SVG::DefsElement *this)
{
  return 1;
}

uint64_t SVG::SVGElement::SVGElement(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  double v8;
  __int128 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  unsigned __int8 *v18;
  unint64_t v19;
  char v20;
  void *v22[2];
  __int128 v23;
  unint64_t v24;
  void *__p[2];
  char v26;

  v7 = SVG::Element::Element(a1, a3, a4);
  SVG::Presentation::Presentation(v7 + 64, a4);
  *(_QWORD *)a1 = off_1E7137128;
  v8 = (double)a2;
  *(_OWORD *)(a1 + 640) = 0u;
  *(double *)(a1 + 656) = (double)a2;
  *(double *)(a1 + 664) = (double)a2;
  v9 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  *(_OWORD *)(a1 + 672) = *MEMORY[0x1E0C9D648];
  *(_OWORD *)(a1 + 688) = v9;
  *(_QWORD *)(a1 + 704) = 5;
  std::string::basic_string[abi:nn180100]<0>(v22, "x");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v10 = SVG::Element::findInAttributeMap(a4, (uint64_t)v22, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v10)
      goto LABEL_9;
  }
  else if (!v10)
  {
    goto LABEL_9;
  }
  v22[0] = (void *)-1;
  v22[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v10 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v22);
  if ((_BYTE)v23)
    *(double *)(a1 + 640) = SVG::Length::computeValue((SVG::Length *)v22, v8);
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v22, "y");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v11 = SVG::Element::findInAttributeMap(a4, (uint64_t)v22, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v11)
      goto LABEL_17;
  }
  else if (!v11)
  {
    goto LABEL_17;
  }
  v22[0] = (void *)-1;
  v22[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v11 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v22);
  if ((_BYTE)v23)
    *(double *)(a1 + 648) = SVG::Length::computeValue((SVG::Length *)v22, v8);
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v22, "width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v12 = SVG::Element::findInAttributeMap(a4, (uint64_t)v22, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v12)
      goto LABEL_25;
  }
  else if (!v12)
  {
    goto LABEL_25;
  }
  v22[0] = (void *)-1;
  v22[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v12 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v22);
  if ((_BYTE)v23)
    *(double *)(a1 + 656) = SVG::Length::computeValue((SVG::Length *)v22, v8);
LABEL_25:
  std::string::basic_string[abi:nn180100]<0>(v22, "height");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v13 = SVG::Element::findInAttributeMap(a4, (uint64_t)v22, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v13)
      goto LABEL_33;
  }
  else if (!v13)
  {
    goto LABEL_33;
  }
  v22[0] = (void *)-1;
  v22[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v13 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v22);
  if ((_BYTE)v23)
    *(double *)(a1 + 664) = SVG::Length::computeValue((SVG::Length *)v22, v8);
LABEL_33:
  std::string::basic_string[abi:nn180100]<0>(v22, "viewBox");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v14 = SVG::Element::findInAttributeMap(a4, (uint64_t)v22, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v23) < 0)
    operator delete(v22[0]);
  v15 = (_OWORD *)(a1 + 672);
  if (v14
    && (*(_QWORD *)&v16 = -1,
        *((_QWORD *)&v16 + 1) = -1,
        *(_OWORD *)v22 = v16,
        v23 = v16,
        v24 = 0xAAAAAAAAAAAAAAAALL,
        SVG::ViewBox::parseViewBox((uint64_t)(v14 + 64), (uint64_t)v22),
        (_BYTE)v24))
  {
    v17 = v23;
    *v15 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 688) = v17;
  }
  else
  {
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(a1 + 680) = 0;
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a1 + 656);
  }
  std::string::basic_string[abi:nn180100]<0>(v22, "preserveAspectRatio");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v18 = SVG::Element::findInAttributeMap(a4, (uint64_t)v22, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v18)
      return a1;
  }
  else if (!v18)
  {
    return a1;
  }
  v19 = SVG::PreserveAspectRatio::parsePreserveAspectRatio((uint64_t)(v18 + 64));
  if (v20)
    *(_QWORD *)(a1 + 704) = v19;
  return a1;
}

uint64_t SVG::SVGElement::appendChild(int64x2_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;

  v4 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  if (((*(uint64_t (**)(const void *))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
    return SVG::Element::appendChild(a1, a2);
  v5 = (const void *)*a2;
  if (*a2
  {
    return SVG::Element::appendChild(a1, a2);
  }
  else
  {
    return 0;
  }
}

void SVG::SVGElement::~SVGElement(SVG::SVGElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138A50[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138A68[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138A80[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138A68[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138A80[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138A50[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138A68[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138A80[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138A68[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138A80[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

void SVG::convertToMask(SVG *this@<X0>, CGImageRef *a2@<X8>)
{
  uint32_t BitmapInfo;
  CGColorSpace *ColorSpace;
  vImagePixelCount Width;
  vImagePixelCount Height;
  size_t v9;
  size_t BytesPerRow;
  void *Data;
  void *v12;
  void *v13;
  CGContext *v14;
  size_t bitsPerComponent;
  uint8_t color[4];
  vImage_Buffer src;
  vImage_Buffer srcBottom;
  vImage_Buffer dest;
  int16_t v20[8];
  __int128 v21;
  _OWORD matrix[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  BitmapInfo = CGBitmapContextGetBitmapInfo(this);
  ColorSpace = CGBitmapContextGetColorSpace(this);
  Width = CGBitmapContextGetWidth(this);
  Height = CGBitmapContextGetHeight(this);
  v9 = CGBitmapContextGetBitsPerComponent(this);
  CGBitmapContextGetBitsPerPixel(this);
  BytesPerRow = CGBitmapContextGetBytesPerRow(this);
  Data = CGBitmapContextGetData(this);
  bitsPerComponent = v9;
  if (BytesPerRow * Height)
  {
    if (((BytesPerRow * Height) & 0x8000000000000000) != 0)
      abort();
    v12 = operator new(BytesPerRow * Height);
    bzero(v12, BytesPerRow * Height);
    dest.data = v12;
    dest.height = Height;
    dest.width = Width;
    dest.rowBytes = BytesPerRow;
    v13 = operator new(BytesPerRow * Height);
    bzero(v13, BytesPerRow * Height);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    dest.data = 0;
    dest.height = Height;
    dest.width = Width;
    dest.rowBytes = BytesPerRow;
  }
  srcBottom.data = v13;
  srcBottom.height = Height;
  srcBottom.width = Width;
  srcBottom.rowBytes = BytesPerRow;
  src.data = Data;
  src.height = Height;
  src.width = Width;
  src.rowBytes = BytesPerRow;
  matrix[0] = xmmword_1B9B92CCC;
  matrix[1] = unk_1B9B92CDC;
  if (vImageMatrixMultiply_ARGB8888(&src, &dest, (const int16_t *)matrix, 255, 0, 0, 0)
    || (*(_DWORD *)color = 255, vImageBufferFill_ARGB8888(&srcBottom, color, 0))
    || vImageAlphaBlend_ARGB8888(&dest, &srcBottom, &dest, 0)
    || (*(_OWORD *)v20 = xmmword_1B9B92CEC,
        v21 = *(_OWORD *)algn_1B9B92CFC,
        vImageMatrixMultiply_ARGB8888(&dest, &dest, v20, 1, 0, 0, 0)))
  {
    *a2 = 0;
  }
  else
  {
    v14 = CGBitmapContextCreate(v12, Width, Height, bitsPerComponent, BytesPerRow, ColorSpace, BitmapInfo);
    *a2 = CGBitmapContextCreateImage(v14);
    if (v14)
      CFRelease(v14);
  }
  if (v13)
    operator delete(v13);
  if (v12)
    operator delete(v12);
}

uint64_t SVG::UseElement::UseElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  __int128 v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  const __CFAllocator *v16;
  const UInt8 *v17;
  CFIndex v18;
  const __CFString *v19;
  const __CFString *v20;
  CFURLRef v21;
  const void *v22;
  void *v24[2];
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  void *__p[2];
  char v29;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E7137158;
  v6 = MEMORY[0x1E0C9BAA8];
  v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 640) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 656) = v7;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  std::string::basic_string[abi:nn180100]<0>(v24, "transform");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v8)
      goto LABEL_9;
  }
  else if (!v8)
  {
    goto LABEL_9;
  }
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v25 = v9;
  v26 = v9;
  *(_OWORD *)v24 = v9;
  v27 = 0xAAAAAAAAAAAAAAAALL;
  SVG::parseTransform((uint64_t)(v8 + 64), (uint64_t)v24);
  if ((_BYTE)v27)
  {
    v10 = v25;
    *(_OWORD *)(a1 + 640) = *(_OWORD *)v24;
    *(_OWORD *)(a1 + 656) = v10;
    *(_OWORD *)(a1 + 672) = v26;
  }
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v24, "x");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v11 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v11)
      goto LABEL_17;
  }
  else if (!v11)
  {
    goto LABEL_17;
  }
  v24[0] = (void *)-1;
  v24[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v11 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v24);
  if ((_BYTE)v25)
    *(_OWORD *)(a1 + 688) = *(_OWORD *)v24;
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v24, "y");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v12 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v12)
      goto LABEL_25;
  }
  else if (!v12)
  {
    goto LABEL_25;
  }
  v24[0] = (void *)-1;
  v24[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v12 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v24);
  if ((_BYTE)v25)
    *(_OWORD *)(a1 + 704) = *(_OWORD *)v24;
LABEL_25:
  std::string::basic_string[abi:nn180100]<0>(v24, "width");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v13 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v13)
      goto LABEL_33;
  }
  else if (!v13)
  {
    goto LABEL_33;
  }
  v24[0] = (void *)-1;
  v24[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v13 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v24);
  if ((_BYTE)v25)
    *(_OWORD *)(a1 + 720) = *(_OWORD *)v24;
LABEL_33:
  std::string::basic_string[abi:nn180100]<0>(v24, "height");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v14 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v14)
      goto LABEL_41;
  }
  else if (!v14)
  {
    goto LABEL_41;
  }
  v24[0] = (void *)-1;
  v24[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v14 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v24);
  if ((_BYTE)v25)
    *(_OWORD *)(a1 + 736) = *(_OWORD *)v24;
LABEL_41:
  std::string::basic_string[abi:nn180100]<0>(v24, "href");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/1999/xlink");
  v15 = SVG::Element::findInAttributeMap(a3, (uint64_t)v24, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v25) < 0)
  {
    operator delete(v24[0]);
    if (!v15)
      return a1;
  }
  else if (!v15)
  {
    return a1;
  }
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((char)v15[87] < 0)
  {
    v17 = (const UInt8 *)*((_QWORD *)v15 + 8);
    v18 = *((_QWORD *)v15 + 9);
  }
  else
  {
    v17 = v15 + 64;
    v18 = v15[87];
  }
  v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, v18, 0x8000100u, 1u);
  if (v19)
  {
    v20 = v19;
    v21 = CFURLCreateWithString(v16, v19, 0);
    v22 = *(const void **)(a1 + 752);
    if (v22)
      CFRelease(v22);
    *(_QWORD *)(a1 + 752) = v21;
    CFRelease(v20);
  }
  return a1;
}

uint64_t SVG::UseElement::appendChild()
{
  return 0;
}

void SVG::UseElement::~UseElement(SVG::UseElement *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E7137158;
  v2 = (const void *)*((_QWORD *)this + 94);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138A98[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138AB0[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138AC8[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138AB0[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138AC8[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_1E7137158;
  v2 = (const void *)*((_QWORD *)this + 94);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138A98[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138AB0[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138AC8[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138AB0[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138AC8[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::UseElement::isStructural(SVG::UseElement *this)
{
  return 1;
}

_OWORD *SVG::LineElement::LineElement(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  unint64_t v14;

  v5 = SVG::ShapeElement::ShapeElement((uint64_t)a1, a2, a3);
  *(_QWORD *)v5 = off_1E7137260;
  *(_QWORD *)(v5 + 688) = 0;
  *(_DWORD *)(v5 + 696) = 0;
  *(_QWORD *)(v5 + 704) = 0;
  *(_DWORD *)(v5 + 712) = 0;
  *(_QWORD *)(v5 + 720) = 0;
  *(_DWORD *)(v5 + 728) = 0;
  *(_QWORD *)(v5 + 736) = 0;
  *(_DWORD *)(v5 + 744) = 0;
  std::string::basic_string[abi:nn180100]<0>(v13, "x1");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v6)
      goto LABEL_9;
  }
  else if (!v6)
  {
    goto LABEL_9;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[43] = *(_OWORD *)v13;
LABEL_9:
  std::string::basic_string[abi:nn180100]<0>(v13, "y1");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v7 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v7)
      goto LABEL_17;
  }
  else if (!v7)
  {
    goto LABEL_17;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v7 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[44] = *(_OWORD *)v13;
LABEL_17:
  std::string::basic_string[abi:nn180100]<0>(v13, "x2");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v8)
      goto LABEL_25;
  }
  else if (!v8)
  {
    goto LABEL_25;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[45] = *(_OWORD *)v13;
LABEL_25:
  std::string::basic_string[abi:nn180100]<0>(v13, "y2");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v9 = SVG::Element::findInAttributeMap(a3, (uint64_t)v13, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if (!v9)
      return a1;
  }
  else if (!v9)
  {
    return a1;
  }
  v13[0] = (void *)-1;
  v13[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v9 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v13);
  if ((_BYTE)v14)
    a1[46] = *(_OWORD *)v13;
  return a1;
}

void SVG::LineElement::path(SVG::LineElement *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CGPath **a3@<X8>)
{
  double height;
  double width;
  double v7;
  double v8;
  double v9;
  double v10;
  CGPath *Mutable;
  CGPoint points;
  double v13;
  double v14;
  uint64_t v15;

  height = a2.size.height;
  width = a2.size.width;
  v15 = *MEMORY[0x1E0C80C00];
  v7 = SVG::Length::computeValue((SVG::LineElement *)((char *)this + 688), a2.size.width);
  v8 = SVG::Length::computeValue((SVG::LineElement *)((char *)this + 704), height);
  v9 = SVG::Length::computeValue((SVG::LineElement *)((char *)this + 720), width);
  v10 = SVG::Length::computeValue((SVG::LineElement *)((char *)this + 736), height);
  Mutable = CGPathCreateMutable();
  points.x = v7;
  points.y = v8;
  v13 = v9;
  v14 = v10;
  CGPathAddLines(Mutable, 0, &points, 2uLL);
  *a3 = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    CFRelease(Mutable);
  }
}

double SVG::LineElement::boundingBox(SVG::LineElement *this, CGRect a2)
{
  double height;
  double width;
  double v5;
  double v6;

  height = a2.size.height;
  width = a2.size.width;
  v5 = SVG::Length::computeValue((SVG::LineElement *)((char *)this + 688), a2.size.width);
  SVG::Length::computeValue((SVG::LineElement *)((char *)this + 704), height);
  v6 = SVG::Length::computeValue((SVG::LineElement *)((char *)this + 720), width);
  SVG::Length::computeValue((SVG::LineElement *)((char *)this + 736), height);
  if (v6 >= v5)
    return v5;
  else
    return v6;
}

void SVG::LineElement::~LineElement(SVG::LineElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138AE0[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138AF8[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138B10[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138AF8[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138B10[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138AE0[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138AF8[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138B10[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138AF8[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138B10[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

void SVG::Image::transformIntoVariant(SVG::Image *this@<X0>, CGAffineTransform *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const void *v13;
  CGAffineTransform v14;
  CGRect v15;

  v5 = *(_OWORD *)&a2->c;
  *(_OWORD *)&v14.a = *(_OWORD *)&a2->a;
  *(_OWORD *)&v14.c = v5;
  *(_OWORD *)&v14.tx = *(_OWORD *)&a2->tx;
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)&v5 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 4);
  v15 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v5 - 8), &v14);
  x = v15.origin.x;
  y = v15.origin.y;
  width = v15.size.width;
  height = v15.size.height;
  v13 = (const void *)*((_QWORD *)this + 5);
  if (v13)
    CFRetain(v13);
  *(_QWORD *)a3 = &off_1E71377F8;
  *(CGFloat *)(a3 + 8) = x;
  *(CGFloat *)(a3 + 16) = y;
  *(CGFloat *)(a3 + 24) = width;
  *(CGFloat *)(a3 + 32) = height;
  *(_QWORD *)(a3 + 40) = v13;
  *(_DWORD *)(a3 + 48) = 0;
}

void SVG::Image::~Image(SVG::Image *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E71377F8;
  v1 = (const void *)*((_QWORD *)this + 5);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E71377F8;
  v1 = (const void *)*((_QWORD *)this + 5);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::Path::transformIntoVariant(SVG::Path *this@<X0>, CGAffineTransform *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  _OWORD v5[3];
  _BYTE v6[16];
  uint64_t v7;

  v4 = *(_OWORD *)&a2->c;
  v5[0] = *(_OWORD *)&a2->a;
  v5[1] = v4;
  v5[2] = *(_OWORD *)&a2->tx;
  SVG::Path::transform((SVG::Path *)v6, (CGAffineTransform *)*((unsigned __int8 *)this + 8), *((_QWORD *)this + 2), (uint64_t)v5);
  *(_QWORD *)a3 = &off_1E71377C0;
  *(_BYTE *)(a3 + 8) = v6[8];
  *(_QWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 48) = 1;
}

void SVG::Path::transform(SVG::Path *this, CGAffineTransform *a2, uint64_t a3, uint64_t a4)
{
  char v4;
  const void *v6;
  const void *v7;

  v4 = (char)a2;
  v6 = (const void *)MEMORY[0x1BCCC9FC8](a3, a4);
  *(_QWORD *)this = &off_1E71377C0;
  *((_BYTE *)this + 8) = v4;
  *((_QWORD *)this + 2) = v6;
  if (v6)
  {
    v7 = v6;
    CFRetain(v6);
    CFRelease(v7);
  }
}

void SVG::Path::~Path(SVG::Path *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E71377C0;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1E71377C0;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1BCCCA1B4);
}

void SVG::ClipToPaths::execute(uint64_t a1, CGContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  SVG *v5;
  const SVG::ClipToPaths::BaseClipNode **v6;
  CGContext *v7;
  CGContext **v8;
  uint64_t v9;
  uint64_t v10;
  CGContext *v11;
  CGContext ***v12;

  v11 = a2;
  SVG::simplify((SVG *)&v9, *(const SVG::ClipToPaths::BaseClipNode ***)(a1 + 8), a2);
  v2 = v9;
  v3 = v10;
  if (v9 == v10)
  {
LABEL_4:
    v12 = (CGContext ***)&v9;
    std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v12);
  }
  else
  {
    while (1)
    {
      v8 = &v11;
      v4 = *(unsigned int *)(v2 + 48);
      if ((_DWORD)v4 == -1)
        break;
      v12 = &v8;
      ((void (*)(CGContext ****, uint64_t))off_1E7138BB8[v4])(&v12, v2);
      v2 += 56;
      if (v2 == v3)
        goto LABEL_4;
    }
    v5 = (SVG *)std::__throw_bad_variant_access[abi:nn180100]();
    SVG::simplify(v5, v6, v7);
  }
}

void SVG::simplify(SVG *this, const SVG::ClipToPaths::BaseClipNode **lpsrc, CGContext *a3)
{
  const SVG::ClipToPaths::BaseClipNode *j;
  const SVG::ClipToPaths::BaseClipNode *v5;
  CGContextRef v6;
  CGContextRef v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const SVG::ClipToPaths::BaseClipNode *v15;
  uint64_t v16;
  char *v17;
  CGContext *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const SVG::ClipToPaths::BaseClipNode ***v40;
  const SVG::ClipToPaths::BaseClipNode **v41;
  uint64_t v42;
  CGContextRef v43;
  CGContextRef k;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  CGAffineTransform *v48;
  const void *v49;
  __int128 v50;
  uint64_t v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  CGContextRef v67;
  CGContextRef v68;
  uint64_t v69;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  uint64_t v74;
  uint64_t m;
  uint64_t v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  CGContextRef v94;
  CGContext *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  CGImageRef Image;
  CGImageRef v103;
  uint64_t v104;
  unint64_t v105;
  CGPathRef v106;
  CGPathRef v107;
  _DWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  CGContextRef v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  CGContextRef v121;
  __int128 v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  char *v129;
  SVG *v130;
  SVG *v131;
  const SVG::ClipToPaths::BaseClipNode **v132;
  const SVG::ClipToPaths::BaseClipNode **v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  CGContextRef v139;
  const SVG::ClipToPaths::BaseClipNode *__p;
  CGRect *__pa;
  _OWORD v142[3];
  void **v143;
  const SVG::ClipToPaths::BaseClipNode ***v144;
  CGContextRef c[3];
  __int128 v146;
  char *v147;
  CGContextRef *v148;
  _BYTE v149[24];
  char *v150;
  char **v151;
  int v152;
  uint64_t v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;

  j = (const SVG::ClipToPaths::BaseClipNode *)lpsrc;
  v153 = *MEMORY[0x1E0C80C00];
  v146 = 0uLL;
  v147 = 0;
  v5 = lpsrc[1];
  if (v5)
  {
    memset(c, 170, sizeof(c));
    SVG::simplify((SVG *)c, v5, a3);
    v7 = c[0];
    v6 = c[1];
    if (c[1] - c[0] >= 1)
    {
      v130 = this;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((c[1] - c[0]) >> 3);
      v9 = *((_QWORD *)&v146 + 1);
      v10 = v146;
      v11 = (*((_QWORD *)&v146 + 1) - (_QWORD)v146) / 56;
      v12 = v146 + 56 * v11;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v147[-*((_QWORD *)&v146 + 1)] >> 3) < v8)
      {
        *(_OWORD *)v149 = 0uLL;
        v13 = v11 + v8;
        if ((unint64_t)(v11 + v8) > 0x492492492492492)
          goto LABEL_184;
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v147[-v146] >> 3) > v13)
          v13 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v147[-v146] >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v147[-v146] >> 3)) >= 0x249249249249249)
          v14 = 0x492492492492492;
        else
          v14 = v13;
        v151 = &v147;
        v15 = j;
        if (v14)
        {
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(v14);
        }
        else
        {
          v17 = 0;
          v16 = 0;
        }
        v22 = &v17[56 * v11];
        v150 = &v17[56 * v16];
        v23 = (uint64_t)&v22[56 * v8];
        v24 = (uint64_t)v22;
        do
        {
          *(_BYTE *)v24 = 0;
          *(_DWORD *)(v24 + 48) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1> const&>(v24, (uint64_t)v7);
          v7 = (CGContextRef)((char *)v7 + 56);
          v24 += 56;
        }
        while (v24 != v23);
        *(_QWORD *)&v149[16] = v23;
        v25 = v146;
        if ((_QWORD)v146 != v12)
        {
          v26 = 56 * v11;
          do
          {
            v17[v26 - 56] = 0;
            v27 = (uint64_t)&v17[v26 - 56];
            *(_DWORD *)(v27 + 48) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v27, v10 + v26 - 56);
            v10 -= 56;
            v17 -= 56;
          }
          while (v10 + v26 != v25);
          v23 = *(_QWORD *)&v149[16];
          v22 = &v17[56 * v11];
        }
        v28 = *((_QWORD *)&v146 + 1);
        if (*((_QWORD *)&v146 + 1) == v12)
        {
          this = v130;
        }
        else
        {
          this = v130;
          do
          {
            *(_BYTE *)v23 = 0;
            *(_DWORD *)(v23 + 48) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v23, v12);
            v12 += 56;
            v23 += 56;
          }
          while (v12 != v28);
          v12 = *((_QWORD *)&v146 + 1);
        }
        v29 = v146;
        v30 = v147;
        *(_QWORD *)&v146 = v22;
        *((_QWORD *)&v146 + 1) = v23;
        v147 = v150;
        *(_QWORD *)&v149[16] = v12;
        v150 = v30;
        *(_QWORD *)v149 = v29;
        *(_QWORD *)&v149[8] = v29;
        std::__split_buffer<std::variant<SVG::Image,SVG::Path>>::~__split_buffer((uint64_t)v149);
        j = v15;
        goto LABEL_51;
      }
      __p = j;
      if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)&v146 + 1) - v12) >> 3) >= v8)
      {
        v18 = (CGContextRef)((char *)c[0] + 8 * ((c[1] - c[0]) >> 3));
        v19 = *((_QWORD *)&v146 + 1);
        this = v130;
      }
      else
      {
        v136 = *((_QWORD *)&v146 + 1) - v12;
        v18 = (CGContextRef)((char *)c[0] + 8 * ((*((_QWORD *)&v146 + 1) - v12) >> 3));
        if (v18 == c[1])
        {
          v19 = *((_QWORD *)&v146 + 1);
        }
        else
        {
          v19 = *((_QWORD *)&v146 + 1);
          v20 = (char *)c[0] + 8 * ((*((_QWORD *)&v146 + 1) - v12) >> 3);
          v21 = *((_QWORD *)&v146 + 1);
          do
          {
            *(_BYTE *)v21 = 0;
            *(_DWORD *)(v21 + 48) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1> const&>(v21, (uint64_t)v20);
            v20 += 56;
            v19 += 56;
            v21 += 56;
          }
          while (v20 != (char *)v6);
        }
        *((_QWORD *)&v146 + 1) = v19;
        j = __p;
        this = v130;
        if (v136 < 1)
          goto LABEL_51;
      }
      v31 = v12 + 56 * v8;
      v32 = v19 - 56 * v8;
      v33 = v19;
      if (v32 < v9)
      {
        v33 = v19;
        do
        {
          *(_BYTE *)v33 = 0;
          *(_DWORD *)(v33 + 48) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v33, v32);
          v32 += 56;
          v33 += 56;
        }
        while (v32 < v9);
      }
      *((_QWORD *)&v146 + 1) = v33;
      if (v19 != v31)
      {
        v34 = v19 - 56;
        for (i = 8 * ((v19 - v31) >> 3); i; i -= 56)
        {
          v36 = *(unsigned int *)(v34 + 48);
          v37 = *(unsigned int *)(v12 + i - 8);
          if ((_DWORD)v36 == -1)
          {
            if ((_DWORD)v37 != -1)
            {
LABEL_42:
              *(_QWORD *)v149 = v34;
              ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E7138B58[v37])(v149, v34, v12 + i - 56);
            }
          }
          else
          {
            if ((_DWORD)v37 != -1)
              goto LABEL_42;
            ((void (*)(_BYTE *, uint64_t))off_1E7138B28[v36])(v149, v34);
            *(_DWORD *)(v34 + 48) = -1;
          }
          v34 -= 56;
        }
      }
      for (j = __p; v7 != v18; v12 += 56)
      {
        v38 = *(unsigned int *)(v12 + 48);
        v39 = *((unsigned int *)v7 + 12);
        if ((_DWORD)v38 == -1)
        {
          if ((_DWORD)v39 != -1)
          {
LABEL_49:
            *(_QWORD *)v149 = v12;
            ((void (*)(_BYTE *, uint64_t, CGContextRef))off_1E7138B68[v39])(v149, v12, v7);
          }
        }
        else
        {
          if ((_DWORD)v39 != -1)
            goto LABEL_49;
          ((void (*)(_BYTE *, uint64_t))off_1E7138B28[v38])(v149, v12);
          *(_DWORD *)(v12 + 48) = -1;
        }
        v7 = (CGContextRef)((char *)v7 + 56);
      }
    }
LABEL_51:
    *(_QWORD *)v149 = c;
    std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)v149);
  }
  v144 = v40;
  if (!v40)
  {
    if (v46)
    {
      v47 = v46;
      v48 = (CGAffineTransform *)v46[80];
      v49 = (const void *)*((_QWORD *)v46 + 9);
      if (v49)
        CFRetain(*((CFTypeRef *)v46 + 9));
      v50 = *(_OWORD *)(v47 + 40);
      v142[0] = *(_OWORD *)(v47 + 24);
      v142[1] = v50;
      v142[2] = *(_OWORD *)(v47 + 56);
      SVG::Path::transform((SVG::Path *)c, v48, (uint64_t)v49, (uint64_t)v142);
      v51 = *((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1) >= (unint64_t)v147)
      {
        v89 = v146;
        v90 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 3);
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) > 0x492492492492492)
          goto LABEL_184;
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v147[-v146] >> 3) > v91)
          v91 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v147[-v146] >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v147[-v146] >> 3)) >= 0x249249249249249)
          v92 = 0x492492492492492;
        else
          v92 = v91;
        v151 = &v147;
        if (v92)
        {
          v92 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(v92);
          v51 = *((_QWORD *)&v146 + 1);
          v89 = v146;
        }
        else
        {
          v93 = 0;
        }
        v115 = v92 + 56 * v90;
        *(_QWORD *)v149 = v92;
        *(_QWORD *)&v149[8] = v115;
        v116 = v92 + 56 * v93;
        v150 = (char *)v116;
        *(_QWORD *)v115 = &off_1E71377C0;
        *(_BYTE *)(v115 + 8) = c[1];
        v117 = c[2];
        c[2] = 0;
        *(_QWORD *)(v115 + 16) = v117;
        *(_DWORD *)(v115 + 48) = 1;
        v118 = v115 + 56;
        *(_QWORD *)&v149[16] = v115 + 56;
        if (v51 == v89)
        {
          v121 = 0;
        }
        else
        {
          v119 = 0;
          do
          {
            *(_BYTE *)(v115 + v119 - 56) = 0;
            v120 = v115 + v119 - 56;
            *(_DWORD *)(v120 + 48) = -1;
            v119 -= 56;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v120, v51 + v119);
          }
          while (v51 + v119 != v89);
          v118 = *(_QWORD *)&v149[16];
          v116 = (unint64_t)v150;
          v115 += v119;
          v121 = c[2];
        }
        v122 = v146;
        *(_QWORD *)&v146 = v115;
        *((_QWORD *)&v146 + 1) = v118;
        *(_OWORD *)&v149[8] = v122;
        v123 = v147;
        v147 = (char *)v116;
        v150 = v123;
        *(_QWORD *)v149 = v122;
        std::__split_buffer<std::variant<SVG::Image,SVG::Path>>::~__split_buffer((uint64_t)v149);
        *((_QWORD *)&v146 + 1) = v118;
        if (v121)
          CFRelease(v121);
      }
      else
      {
        **((_QWORD **)&v146 + 1) = &off_1E71377C0;
        *(_BYTE *)(v51 + 8) = c[1];
        *(CGContextRef *)(v51 + 16) = c[2];
        *(_DWORD *)(v51 + 48) = 1;
        *((_QWORD *)&v146 + 1) = v51 + 56;
      }
      if (v49)
        CFRelease(v49);
    }
    goto LABEL_181;
  }
  v41 = v40[9];
  v132 = v40[10];
  v42 = ((char *)v132 - (char *)v41) >> 4;
  if (!v42)
    goto LABEL_181;
  if (v42 == 1)
  {
    SVG::simplify((SVG *)c, *v41, a3);
    v43 = c[0];
    for (k = c[1]; v43 != k; v43 = (CGContextRef)((char *)v43 + 56))
    {
      v143 = (void **)&v144;
      v45 = *((unsigned int *)v43 + 12);
      if ((_DWORD)v45 == -1)
        goto LABEL_183;
      v148 = (CGContextRef *)&v143;
      ((void (*)(_BYTE *__return_ptr, CGContextRef **, CGContextRef))off_1E7138B78[v45])(v149, &v148, v43);
      std::vector<std::variant<SVG::Image,SVG::Path>>::emplace_back<std::variant<SVG::Image,SVG::Path>>((uint64_t *)&v146, (uint64_t)v149);
      if (v152 != -1)
        ((void (*)(CGContextRef **, _BYTE *))off_1E7138B28[v152])(&v148, v149);
    }
    *(_QWORD *)v149 = c;
    std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)v149);
    goto LABEL_181;
  }
  v131 = this;
  v53 = *MEMORY[0x1E0C9D648];
  v52 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v55 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v54 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  if (v41 != v132)
  {
    v56 = 0;
    v57 = 0;
    v137 = 0;
    __pa = 0;
    v58 = 0;
    v59 = 0;
    while (1)
    {
      memset(c, 170, sizeof(c));
      SVG::simplify((SVG *)c, *v41, a3);
      memset(v149, 0, sizeof(v149));
      v134 = v41;
      v135 = (unint64_t)v59;
      if (v57 >= v137)
      {
        v60 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 3) + 1;
        if (v60 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_184;
        if (0x5555555555555556 * ((v137 - v56) >> 3) > v60)
          v60 = 0x5555555555555556 * ((v137 - v56) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v137 - v56) >> 3) >= 0x555555555555555)
          v60 = 0xAAAAAAAAAAAAAAALL;
        if (v60 > 0xAAAAAAAAAAAAAAALL)
LABEL_185:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v138 = 3 * v60;
        v61 = (char *)operator new(24 * v60);
        v62 = &v61[8 * ((v57 - v56) >> 3)];
        *((_QWORD *)v62 + 1) = 0;
        *((_QWORD *)v62 + 2) = 0;
        *(_QWORD *)v62 = 0;
        memset(v149, 0, sizeof(v149));
        if (v57 == v56)
        {
          v64 = &v61[8 * ((v57 - v56) >> 3)];
        }
        else
        {
          v63 = v57;
          v64 = &v61[8 * ((v57 - v56) >> 3)];
          do
          {
            *((_QWORD *)v64 - 3) = 0;
            *((_QWORD *)v64 - 2) = 0;
            v64 -= 24;
            *((_QWORD *)v64 + 2) = 0;
            v65 = *(_OWORD *)(v63 - 24);
            v63 -= 24;
            *(_OWORD *)v64 = v65;
            *((_QWORD *)v64 + 2) = *((_QWORD *)v63 + 2);
            *(_QWORD *)v63 = 0;
            *((_QWORD *)v63 + 1) = 0;
            *((_QWORD *)v63 + 2) = 0;
          }
          while (v63 != v56);
          if (v57 != v56)
          {
            v66 = v61;
            do
            {
              v57 -= 24;
              v148 = (CGContextRef *)v57;
              std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v148);
            }
            while (v57 != v56);
            v61 = v66;
          }
        }
        v137 = &v61[8 * v138];
        v57 = v62 + 24;
        if (v56)
          operator delete(v56);
        v56 = v64;
      }
      else
      {
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
        *((_QWORD *)v57 + 2) = 0;
        *(_OWORD *)v57 = *(_OWORD *)v149;
        *((_QWORD *)v57 + 2) = *(_QWORD *)&v149[16];
        memset(v149, 0, sizeof(v149));
        v57 += 24;
      }
      v148 = (CGContextRef *)v149;
      std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v148);
      v68 = c[0];
      v67 = c[1];
      if (c[0] != c[1])
        break;
LABEL_92:
      x = *MEMORY[0x1E0C9D5E0];
      y = *(double *)(MEMORY[0x1E0C9D5E0] + 8);
      width = *(double *)(MEMORY[0x1E0C9D5E0] + 16);
      height = *(double *)(MEMORY[0x1E0C9D5E0] + 24);
      v74 = *((_QWORD *)v57 - 3);
      for (m = *((_QWORD *)v57 - 2); v74 != m; v74 += 56)
      {
        v76 = *(unsigned int *)(v74 + 48);
        if ((_DWORD)v76 == -1)
          goto LABEL_183;
        *(_QWORD *)v149 = &v148;
        v159.origin.x = ((double (*)(_BYTE *, uint64_t))off_1E7138B98[v76])(v149, v74);
        v159.origin.y = v77;
        v159.size.width = v78;
        v159.size.height = v79;
        v154.origin.x = x;
        v154.origin.y = y;
        v154.size.width = width;
        v154.size.height = height;
        v155 = CGRectIntersection(v154, v159);
        x = v155.origin.x;
        y = v155.origin.y;
        width = v155.size.width;
        height = v155.size.height;
      }
      v156.origin.x = v53;
      v156.origin.y = v52;
      v156.size.width = v55;
      v156.size.height = v54;
      v160.origin.x = x;
      v160.origin.y = y;
      v160.size.width = width;
      v160.size.height = height;
      v157 = CGRectUnion(v156, v160);
      v53 = v157.origin.x;
      v52 = v157.origin.y;
      v55 = v157.size.width;
      v54 = v157.size.height;
      v59 = (char *)v135;
      if ((unint64_t)v58 >= v135)
      {
        v80 = (char *)__pa;
        v81 = (v58 - (char *)__pa) >> 5;
        v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 59)
          goto LABEL_184;
        if ((uint64_t)(v135 - (_QWORD)__pa) >> 4 > v82)
          v82 = (uint64_t)(v135 - (_QWORD)__pa) >> 4;
        if (v135 - (unint64_t)__pa >= 0x7FFFFFFFFFFFFFE0)
          v83 = 0x7FFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          if (v83 >> 59)
            goto LABEL_185;
          v84 = (char *)operator new(32 * v83);
          v80 = (char *)__pa;
        }
        else
        {
          v84 = 0;
        }
        v85 = &v84[32 * v81];
        *(CGFloat *)v85 = x;
        *((CGFloat *)v85 + 1) = y;
        *((CGFloat *)v85 + 2) = width;
        *((CGFloat *)v85 + 3) = height;
        if (v58 == v80)
        {
          v88 = &v84[32 * v81];
        }
        else
        {
          v86 = &v84[32 * v81];
          do
          {
            v87 = *((_OWORD *)v58 - 1);
            v88 = v86 - 32;
            *((_OWORD *)v86 - 2) = *((_OWORD *)v58 - 2);
            *((_OWORD *)v86 - 1) = v87;
            v58 -= 32;
            v86 -= 32;
          }
          while (v58 != v80);
        }
        v59 = &v84[32 * v83];
        v58 = v85 + 32;
        if (v80)
          operator delete(v80);
        __pa = (CGRect *)v88;
      }
      else
      {
        *(CGFloat *)v58 = x;
        *((CGFloat *)v58 + 1) = y;
        *((CGFloat *)v58 + 2) = width;
        *((CGFloat *)v58 + 3) = height;
        v58 += 32;
      }
      *(_QWORD *)v149 = c;
      std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)v149);
      v41 = v134 + 2;
      if (v134 + 2 == v132)
        goto LABEL_126;
    }
    while (1)
    {
      v143 = (void **)&v144;
      v69 = *((unsigned int *)v68 + 12);
      if ((_DWORD)v69 == -1)
        break;
      v148 = (CGContextRef *)&v143;
      ((void (*)(_BYTE *__return_ptr, CGContextRef **, CGContextRef))off_1E7138B88[v69])(v149, &v148, v68);
      std::vector<std::variant<SVG::Image,SVG::Path>>::emplace_back<std::variant<SVG::Image,SVG::Path>>((uint64_t *)v57 - 3, (uint64_t)v149);
      if (v152 != -1)
        ((void (*)(CGContextRef **, _BYTE *))off_1E7138B28[v152])(&v148, v149);
      v68 = (CGContextRef)((char *)v68 + 56);
      if (v68 == v67)
        goto LABEL_92;
    }
LABEL_183:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_184:
    abort();
  }
  v56 = 0;
  v57 = 0;
  __pa = 0;
LABEL_126:
  c[0] = (CGContextRef)0xAAAAAAAAAAAAAAAALL;
  v158.origin.x = v53;
  v158.origin.y = v52;
  v158.size.width = v55;
  v158.size.height = v54;
  SVG::createParallelBitmapContext(a3, v158, c);
  v94 = c[0];
  if (c[0])
  {
    v95 = c[0];
    if (v57 != v56)
    {
      v139 = c[0];
      v96 = 0;
      if ((unint64_t)((v57 - v56) / 24) <= 1)
        v97 = 1;
      else
        v97 = (v57 - v56) / 24;
      do
      {
        CGContextSaveGState(c[0]);
        v98 = &v56[24 * v96];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        while (v100 != v99)
        {
          v148 = c;
          v101 = *(unsigned int *)(v100 + 48);
          if ((_DWORD)v101 == -1)
            goto LABEL_183;
          *(_QWORD *)v149 = &v148;
          ((void (*)(_BYTE *, uint64_t))off_1E7138BA8[v101])(v149, v100);
          v100 += 56;
        }
        CGContextFillRect(c[0], __pa[v96]);
        CGContextRestoreGState(c[0]);
        ++v96;
      }
      while (v96 != v97);
      v95 = c[0];
      v94 = v139;
    }
    CGContextFlush(v95);
    Image = CGBitmapContextCreateImage(c[0]);
    v103 = Image;
    if (Image)
      CFRetain(Image);
    v104 = *((_QWORD *)&v146 + 1);
    if (*((_QWORD *)&v146 + 1) >= (unint64_t)v147)
    {
      v110 = v146;
      v111 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v146 + 1) - v146) >> 3);
      v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) > 0x492492492492492)
        goto LABEL_184;
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v147[-v146] >> 3) > v112)
        v112 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v147[-v146] >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v147[-v146] >> 3)) >= 0x249249249249249)
        v113 = 0x492492492492492;
      else
        v113 = v112;
      v151 = &v147;
      if (v113)
      {
        v113 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(v113);
        v104 = *((_QWORD *)&v146 + 1);
        v110 = v146;
      }
      else
      {
        v114 = 0;
      }
      v124 = v113 + 56 * v111;
      *(_QWORD *)v149 = v113;
      *(_QWORD *)&v149[8] = v124;
      v125 = v113 + 56 * v114;
      v150 = (char *)v125;
      *(_QWORD *)v124 = &off_1E71377F8;
      *(CGFloat *)(v124 + 8) = v53;
      *(CGFloat *)(v124 + 16) = v52;
      *(CGFloat *)(v124 + 24) = v55;
      *(CGFloat *)(v124 + 32) = v54;
      *(_QWORD *)(v124 + 40) = v103;
      *(_DWORD *)(v124 + 48) = 0;
      v105 = v124 + 56;
      *(_QWORD *)&v149[16] = v124 + 56;
      if (v104 != v110)
      {
        v126 = 0;
        do
        {
          *(_BYTE *)(v124 + v126 - 56) = 0;
          v127 = v124 + v126 - 56;
          *(_DWORD *)(v127 + 48) = -1;
          v126 -= 56;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v127, v104 + v126);
        }
        while (v104 + v126 != v110);
        v105 = *(_QWORD *)&v149[16];
        v125 = (unint64_t)v150;
        v124 += v126;
        this = v131;
      }
      v128 = v146;
      *(_QWORD *)&v146 = v124;
      *((_QWORD *)&v146 + 1) = v105;
      *(_OWORD *)&v149[8] = v128;
      v129 = v147;
      v147 = (char *)v125;
      v150 = v129;
      *(_QWORD *)v149 = v128;
      std::__split_buffer<std::variant<SVG::Image,SVG::Path>>::~__split_buffer((uint64_t)v149);
    }
    else
    {
      **((_QWORD **)&v146 + 1) = &off_1E71377F8;
      *(CGFloat *)(v104 + 8) = v53;
      *(CGFloat *)(v104 + 16) = v52;
      *(CGFloat *)(v104 + 24) = v55;
      *(CGFloat *)(v104 + 32) = v54;
      *(_QWORD *)(v104 + 40) = v103;
      v105 = v104 + 56;
      *(_DWORD *)(v104 + 48) = 0;
    }
    *((_QWORD *)&v146 + 1) = v105;
    if (v103)
      CFRelease(v103);
  }
  else
  {
    v106 = CGPathCreateWithRect(*MEMORY[0x1E0C9D648], 0);
    v107 = v106;
    if (v106)
    {
      CFRetain(v106);
      CFRelease(v107);
    }
    *(_QWORD *)v149 = &off_1E71377C0;
    v149[8] = 1;
    *(_QWORD *)&v149[16] = v107;
    v152 = 1;
    v108 = operator new(0x38uLL);
    *(_QWORD *)this = v108;
    v109 = (char *)(v108 + 14);
    *((_QWORD *)this + 2) = v108 + 14;
    *(_BYTE *)v108 = 0;
    v108[12] = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v108, (uint64_t)v149);
    *((_QWORD *)this + 1) = v109;
    if (v152 != -1)
      ((void (*)(CGContextRef **, _BYTE *))off_1E7138B28[v152])(&v148, v149);
  }
  if (c[0])
    CFRelease(c[0]);
  if (__pa)
    operator delete(__pa);
  if (v56)
  {
    while (v57 != v56)
    {
      v57 -= 24;
      *(_QWORD *)v149 = v57;
      std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)v149);
    }
    operator delete(v56);
  }
  if (v94)
  {
LABEL_181:
    *(_OWORD *)this = v146;
    *((_QWORD *)this + 2) = v147;
    v146 = 0uLL;
    v147 = 0;
  }
  *(_QWORD *)v149 = &v146;
  std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100]((void ***)v149);
}

double SVG::ClipToPaths::boundingRect(SVG **this, SVG::BoundingRectState *a2)
{
  CGRect v4;
  CGRect v5;

  v4.origin.x = SVG::boundingRect(this[1], a2);
  v5.origin.x = SVG::BoundingRectState::deviceRect(a2, v4);
  SVG::BoundingRectState::clip(a2, v5);
  return *MEMORY[0x1E0C9D648];
}

double SVG::boundingRect(SVG *this, const SVG::ClipToPaths::BaseClipNode *a2)
{
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  SVG *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  char *v12;
  const SVG::ClipToPaths::BaseClipNode *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  SVG **v18;
  SVG **v19;
  __int128 *v20;
  SVG *v21;
  __int128 v22;
  __int128 v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect BoundingBox;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  x = *MEMORY[0x1E0C9D5E0];
  y = *(double *)(MEMORY[0x1E0C9D5E0] + 8);
  width = *(double *)(MEMORY[0x1E0C9D5E0] + 16);
  height = *(double *)(MEMORY[0x1E0C9D5E0] + 24);
  v7 = (SVG *)*((_QWORD *)this + 1);
  if (v7)
  {
    SVG::boundingRect(v7, a2);
    v46.origin.x = v8;
    v46.origin.y = v9;
    v46.size.width = v10;
    v46.size.height = v11;
    v39.origin.x = x;
    v39.origin.y = y;
    v39.size.width = width;
    v39.size.height = height;
    v40 = CGRectIntersection(v39, v46);
    x = v40.origin.x;
    y = v40.origin.y;
    width = v40.size.width;
    height = v40.size.height;
  }
  if (v12)
  {
    v15 = *MEMORY[0x1E0C9D648];
    v14 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v17 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v16 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    v18 = (SVG **)*((_QWORD *)v12 + 9);
    v19 = (SVG **)*((_QWORD *)v12 + 10);
    if (v18 != v19)
    {
      v20 = (__int128 *)(v12 + 24);
      do
      {
        v21 = *v18;
        v18 += 2;
        SVG::boundingRect(v21, v13);
        v22 = *v20;
        v23 = v20[2];
        *(_OWORD *)&v38.c = v20[1];
        *(_OWORD *)&v38.tx = v23;
        *(_OWORD *)&v38.a = v22;
        v47 = CGRectApplyAffineTransform(v41, &v38);
        v42.origin.x = v15;
        v42.origin.y = v14;
        v42.size.width = v17;
        v42.size.height = v16;
        v43 = CGRectUnion(v42, v47);
        v15 = v43.origin.x;
        v14 = v43.origin.y;
        v17 = v43.size.width;
        v16 = v43.size.height;
      }
      while (v18 != v19);
    }
    v24 = x;
    v25 = y;
    v26 = width;
    v27 = height;
    v28 = v15;
    v29 = v14;
    v30 = v17;
    v31 = v16;
    goto LABEL_10;
  }
  if (v32)
  {
    v33 = v32;
    BoundingBox = CGPathGetBoundingBox((CGPathRef)v32[9]);
    v34 = *(_OWORD *)(v33 + 3);
    v35 = *(_OWORD *)(v33 + 7);
    *(_OWORD *)&v37.c = *(_OWORD *)(v33 + 5);
    *(_OWORD *)&v37.tx = v35;
    *(_OWORD *)&v37.a = v34;
    v45 = CGRectApplyAffineTransform(BoundingBox, &v37);
    v28 = v45.origin.x;
    v29 = v45.origin.y;
    v30 = v45.size.width;
    v31 = v45.size.height;
    v24 = x;
    v25 = y;
    v26 = width;
    v27 = height;
LABEL_10:
    *(_QWORD *)&x = (unint64_t)CGRectIntersection(*(CGRect *)&v24, *(CGRect *)&v28);
  }
  return x;
}

double SVG::ClipToPaths::timeCost(SVG **this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CGRect *v7;
  _QWORD v9[4];

  v9[0] = SVG::BoundingRectState::clipRectInPixels(a3);
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  return SVG::timeCost(this[1], (const SVG::ClipToPaths::BaseClipNode *)v9, v7);
}

double SVG::timeCost(SVG *this, const SVG::ClipToPaths::BaseClipNode *a2, const CGRect *a3)
{
  SVG *v5;
  double v6;
  double v7;
  SVG ***v8;
  const CGRect *v9;
  const CGRect *v10;
  SVG ***v11;
  SVG **v12;
  SVG **v13;
  SVG *v14;
  double v15;
  SVG **v16;
  CGFloat v17;
  double v18;

  v5 = (SVG *)*((_QWORD *)this + 1);
  if (v5)
  {
    SVG::timeCost(v5, a2, a3);
    v7 = v6 + 0.0;
  }
  else
  {
    v7 = 0.0;
  }
  if (v8)
  {
    v11 = v8;
    v12 = v8[9];
    v13 = v8[10];
    if (v12 == v13)
    {
      v16 = v8[9];
    }
    else
    {
      do
      {
        v14 = *v12;
        v12 += 2;
        SVG::timeCost(v14, a2, v10);
        v7 = v7 + v15;
      }
      while (v12 != v13);
      v12 = v11[9];
      v16 = v11[10];
    }
    if ((unint64_t)((char *)v16 - (char *)v12) > 0x10)
    {
      v18 = SVG::ClipToMask::staticTimeCost((CGRect *)a2, v9);
      return v7 + v18;
    }
  }
  {
    v17 = CGRectGetWidth(*(CGRect *)a2) * 0.0008;
    v18 = v17 * CGRectGetHeight(*(CGRect *)a2) + 100.93;
    return v7 + v18;
  }
  return v7;
}

void SVG::ClipToPaths::memoryCost(SVG **this, const CGRect *a2, const SVG::BoundingRectState *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const CGRect *v7;
  _QWORD v8[4];

  v8[0] = SVG::BoundingRectState::clipRectInPixels(a3);
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  SVG::memoryCost(this[1], (const SVG::ClipToPaths::BaseClipNode *)v8, v7);
}

void SVG::memoryCost(SVG *this, const SVG::ClipToPaths::BaseClipNode *a2, const CGRect *a3)
{
  SVG *v5;
  double v6;
  double v7;
  SVG ***v8;
  const CGRect *v9;
  SVG ***v10;
  SVG **v11;
  SVG **v12;
  SVG *v13;
  double v14;
  SVG **v15;

  v5 = (SVG *)*((_QWORD *)this + 1);
  if (v5)
  {
    SVG::memoryCost(v5, a2, a3);
    v7 = v6 + 0.0;
  }
  else
  {
    v7 = 0.0;
  }
  if (v8)
  {
    v10 = v8;
    v11 = v8[9];
    v12 = v8[10];
    if (v11 == v12)
    {
      v15 = v8[9];
    }
    else
    {
      do
      {
        v13 = *v11;
        v11 += 2;
        SVG::memoryCost(v13, a2, v9);
        v7 = v7 + v14;
      }
      while (v11 != v12);
      v11 = v10[9];
      v15 = v10[10];
    }
    if ((unint64_t)((char *)v15 - (char *)v11) > 0x10)
    {
      CGRectGetWidth(*(CGRect *)a2);
      CGRectGetHeight(*(CGRect *)a2);
    }
  }
}

void SVG::ClipToPaths::~ClipToPaths(SVG::ClipToPaths *this)
{
  *(_QWORD *)this = &off_1E71371E8;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E71371E8;
  std::shared_ptr<SVG::Recording>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  JUMPOUT(0x1BCCCA1B4);
}

uint64_t SVG::ClipToPaths::dump(SVG::ClipToPaths *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  std::locale v4;

  v1 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"ClipToPaths", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  return std::ostream::flush();
}

double SVG::Image::boundingBox(SVG::Image *this)
{
  return *((double *)this + 1);
}

void SVG::Image::clip(SVG::Image *this, CGContextRef c)
{
  CGContextClipToMask(c, *(CGRect *)((char *)this + 8), *((CGImageRef *)this + 5));
}

double SVG::Path::boundingBox(SVG::Path *this)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGPathGetBoundingBox((CGPathRef)*((_QWORD *)this + 2));
  return result;
}

void SVG::Path::clip(CGPathRef *this, CGContextRef c)
{
  CGContextAddPath(c, this[2]);
  if (*((_BYTE *)this + 8))
    CGContextEOClip(c);
  else
    CGContextClip(c);
}

uint64_t std::vector<std::variant<SVG::Image,SVG::Path>>::emplace_back<std::variant<SVG::Image,SVG::Path>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492)
      abort();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<SVG::DrawLinearGradient>>(v12);
    else
      v13 = 0;
    v14 = v12 + 56 * v9;
    v15 = v12 + 56 * v13;
    v24 = v15;
    *(_BYTE *)v14 = 0;
    *(_DWORD *)(v14 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v14, a2);
    v8 = v14 + 56;
    v23.i64[1] = v14 + 56;
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v20 = vdupq_n_s64(v16);
    }
    else
    {
      v18 = 0;
      do
      {
        *(_BYTE *)(v14 + v18 - 56) = 0;
        v19 = v14 + v18 - 56;
        *(_DWORD *)(v19 + 48) = -1;
        v18 -= 56;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v19, v16 + v18);
      }
      while (v16 + v18 != v17);
      v20 = *(int64x2_t *)a1;
      v14 += v18;
      v8 = v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    result = std::__split_buffer<std::variant<SVG::Image,SVG::Path>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_DWORD *)(v6 + 48) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(v6, a2);
    v8 = v6 + 56;
  }
  a1[1] = v8;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138B28[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E7138B38[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v2;

  *a2 = &off_1E71377F8;
  v2 = (const void *)a2[5];
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v2;

  *a2 = &off_1E71377C0;
  v2 = (const void *)a2[2];
  if (v2)
    CFRelease(v2);
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  CFTypeRef result;

  *(_QWORD *)a2 = &off_1E71377F8;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  result = *(CFTypeRef *)(a3 + 40);
  *(_QWORD *)(a2 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef result;

  *(_QWORD *)a2 = &off_1E71377C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  result = *(CFTypeRef *)(a3 + 16);
  *(_QWORD *)(a2 + 16) = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<SVG::Image,SVG::Path>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<SVG::Image,SVG::Path>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E7138B28[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E7138B48[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v4;

  *(_QWORD *)a2 = &off_1E71377F8;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  v4 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = &off_1E71377C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 16) = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E7138B28[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 48) = -1;
    *(_QWORD *)v4 = &off_1E71377F8;
    result = *(__n128 *)(a3 + 8);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a3 + 24);
    *(__n128 *)(v4 + 8) = result;
    v10 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(v4 + 40) = v10;
    *(_DWORD *)(v4 + 48) = 0;
    return result;
  }
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  v8 = *(const void **)(a2 + 40);
  if (v8)
    CFRelease(v8);
  v9 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 40) = v9;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 48);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E7138B28[v5])(&v10, v4);
LABEL_7:
    *(_QWORD *)v4 = &off_1E71377C0;
    *(_BYTE *)(v4 + 8) = *(_BYTE *)(a3 + 8);
    v9 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(v4 + 16) = v9;
    *(_DWORD *)(v4 + 48) = 1;
    return;
  }
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  v7 = *(const void **)(a2 + 16);
  if (v7)
    CFRelease(v7);
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 16) = v8;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  const void *v8;
  CFTypeRef result;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 48);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v7;
      v8 = *(const void **)(a2 + 40);
      if (v8)
        CFRelease(v8);
      result = *(CFTypeRef *)(a3 + 40);
      *(_QWORD *)(a2 + 40) = result;
      if (result)
        return CFRetain(result);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138B28[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 48) = -1;
  *(_QWORD *)v4 = &off_1E71377F8;
  v10 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v4 + 8) = v10;
  result = *(CFTypeRef *)(a3 + 40);
  *(_QWORD *)(v4 + 40) = result;
  if (result)
    result = CFRetain(result);
  *(_DWORD *)(v4 + 48) = 0;
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN3SVG5ImageENS8_4PathEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v7;
  CFTypeRef result;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 48);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
      v7 = *(const void **)(a2 + 16);
      if (v7)
        CFRelease(v7);
      result = *(CFTypeRef *)(a3 + 16);
      *(_QWORD *)(a2 + 16) = result;
      if (result)
        return CFRetain(result);
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E7138B28[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 48) = -1;
  *(_QWORD *)v4 = &off_1E71377C0;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(a3 + 8);
  result = *(CFTypeRef *)(a3 + 16);
  *(_QWORD *)(v4 + 16) = result;
  if (result)
    result = CFRetain(result);
  *(_DWORD *)(v4 + 48) = 1;
  return result;
}

uint64_t std::__split_buffer<std::variant<SVG::Image,SVG::Path>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 56;
      *(_QWORD *)(a1 + 16) = v3 - 56;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(char *))off_1E7138B28[v5])(&v7);
        v4 = *(_QWORD *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = ***a1;
  v3 = *(_OWORD *)(v2 + 24);
  v4 = *(_OWORD *)(v2 + 56);
  v6[1] = *(_OWORD *)(v2 + 40);
  v6[2] = v4;
  v6[0] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = ***a1;
  v3 = *(_OWORD *)(v2 + 24);
  v4 = *(_OWORD *)(v2 + 56);
  v6[1] = *(_OWORD *)(v2 + 40);
  v6[2] = v4;
  v6[0] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = ***a1;
  v3 = *(_OWORD *)(v2 + 24);
  v4 = *(_OWORD *)(v2 + 56);
  v6[1] = *(_OWORD *)(v2 + 40);
  v6[2] = v4;
  v6[0] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(uint64_t ***a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[3];

  v2 = ***a1;
  v3 = *(_OWORD *)(v2 + 24);
  v4 = *(_OWORD *)(v2 + 56);
  v6[1] = *(_OWORD *)(v2 + 40);
  v6[2] = v4;
  v6[0] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, ***a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::simplify(SVG::ClipToPaths::BaseClipNode const&,CGContext *)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, ***a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::ClipToPaths::execute(CGContext *,SVG::PlaybackState &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, ***a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<SVG::ClipToPaths::execute(CGContext *,SVG::PlaybackState &)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SVG::Image,SVG::Path> const&>(_QWORD ***a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, ***a1);
}

void std::vector<std::variant<SVG::Image,SVG::Path>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        v7 = *((unsigned int *)v4 - 2);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, char *))off_1E7138B28[v7])(&v8, v4 - 56);
        *((_DWORD *)v4 - 2) = -1;
        v4 -= 56;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t SVG::RadialGradientElement::RadialGradientElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  void *__p[2];
  char v18;
  void *v19[2];
  unint64_t v20;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)a1 = off_1E7137738;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  SVG::GradientElement::parseAttributes((_QWORD *)a1, a3);
  std::string::basic_string[abi:nn180100]<0>(v19, "cx");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v19, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (v6)
  {
    v19[0] = (void *)-1;
    v19[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v19);
    if ((_BYTE)v20)
    {
      v7 = *(unsigned __int8 *)(a1 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)v19;
      if (!v7)
        *(_BYTE *)(a1 + 736) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v19, "cy");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v8 = SVG::Element::findInAttributeMap(a3, (uint64_t)v19, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (v8)
  {
    v19[0] = (void *)-1;
    v19[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v8 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v19);
    if ((_BYTE)v20)
    {
      v9 = *(unsigned __int8 *)(a1 + 760);
      *(_OWORD *)(a1 + 744) = *(_OWORD *)v19;
      if (!v9)
        *(_BYTE *)(a1 + 760) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v19, "r");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v10 = SVG::Element::findInAttributeMap(a3, (uint64_t)v19, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (v10)
  {
    v19[0] = (void *)-1;
    v19[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v10 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v19);
    if ((_BYTE)v20)
    {
      v11 = *(unsigned __int8 *)(a1 + 784);
      *(_OWORD *)(a1 + 768) = *(_OWORD *)v19;
      if (!v11)
        *(_BYTE *)(a1 + 784) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v19, "fx");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v12 = SVG::Element::findInAttributeMap(a3, (uint64_t)v19, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (v12)
  {
    v19[0] = (void *)-1;
    v19[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v12 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v19);
    if ((_BYTE)v20)
    {
      v13 = *(unsigned __int8 *)(a1 + 808);
      *(_OWORD *)(a1 + 792) = *(_OWORD *)v19;
      if (!v13)
        *(_BYTE *)(a1 + 808) = 1;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(v19, "fy");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v14 = SVG::Element::findInAttributeMap(a3, (uint64_t)v19, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (v14)
  {
    v19[0] = (void *)-1;
    v19[1] = (void *)0xAAAAAAAAAAAAAAAALL;
    v20 = 0xAAAAAAAAAAAAAAAALL;
    SVG::consumeAlone<SVG::Length>((uint64_t)(v14 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v19);
    if ((_BYTE)v20)
    {
      v15 = *(unsigned __int8 *)(a1 + 832);
      *(_OWORD *)(a1 + 816) = *(_OWORD *)v19;
      if (!v15)
        *(_BYTE *)(a1 + 832) = 1;
    }
  }
  return a1;
}

void SVG::RadialGradientElement::specifiedRadialState(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *j;
  unint64_t v33;
  _QWORD *v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v74[64];
  _BYTE v75[32];
  __int128 v76;
  _BYTE v77[32];
  __int128 v78;
  _BYTE v79[32];
  _BYTE v80[64];
  unint64_t v81;

  *(_OWORD *)(a3 + 128) = xmmword_1B9B92E50;
  *(_OWORD *)(a3 + 144) = unk_1B9B92E60;
  *(_OWORD *)(a3 + 160) = xmmword_1B9B92E70;
  *(_OWORD *)(a3 + 176) = unk_1B9B92E80;
  *(_OWORD *)(a3 + 64) = xmmword_1B9B92E10;
  *(_OWORD *)(a3 + 80) = unk_1B9B92E20;
  *(_OWORD *)(a3 + 96) = xmmword_1B9B92E30;
  *(_OWORD *)(a3 + 112) = unk_1B9B92E40;
  *(_OWORD *)a3 = xmmword_1B9B92DD0;
  *(_OWORD *)(a3 + 16) = unk_1B9B92DE0;
  *(_OWORD *)(a3 + 32) = xmmword_1B9B92DF0;
  *(_OWORD *)(a3 + 48) = unk_1B9B92E00;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v69 = (_OWORD *)(a3 + 8);
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 68) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  v72 = a3 + 72;
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  v71 = a3 + 120;
  *(_BYTE *)(a3 + 136) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  v70 = a3 + 168;
  *(_BYTE *)(a3 + 184) = 0;
  v5 = (char *)operator new(8uLL);
  *(_QWORD *)v5 = a1;
  v6 = v5 + 8;
  memset(v74, 0, 32);
  *(_QWORD *)&v74[32] = 0xAAAAAAAA3F800000;
  v7 = 0x9DDFEA08EB382D69 * (((((a1 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a1));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = operator new(0x18uLL);
  v10[1] = v9;
  v10[2] = a1;
  std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>((uint64_t)v74, 1uLL);
  v11 = *(_QWORD *)&v74[8];
  v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v74[8]);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v74[8])
      v9 %= *(_QWORD *)&v74[8];
  }
  else
  {
    v9 &= *(_QWORD *)&v74[8] - 1;
  }
  v13 = *(_QWORD *)v74;
  v14 = *(_QWORD **)(*(_QWORD *)v74 + 8 * v9);
  if (v14)
  {
    *v10 = *v14;
  }
  else
  {
    *v10 = *(_QWORD *)&v74[16];
    *(_QWORD *)&v74[16] = v10;
    *(_QWORD *)(v13 + 8 * v9) = &v74[16];
    if (!*v10)
      goto LABEL_14;
    v15 = *(_QWORD *)(*v10 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v15 >= v11)
        v15 %= v11;
    }
    else
    {
      v15 &= v11 - 1;
    }
    v14 = (_QWORD *)(*(_QWORD *)v74 + 8 * v15);
  }
  *v14 = v10;
LABEL_14:
  ++*(_QWORD *)&v74[24];
  *(_QWORD *)v80 = *(_QWORD *)(*(_QWORD *)v5 + 640);
  if (*(_QWORD *)v80)
  {
    v16 = v5 + 8;
    while (1)
    {
      v17 = std::__hash_table<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::__unordered_map_hasher<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::hash<__CFURL const*>,std::equal_to<__CFURL const*>,true>,std::__unordered_map_equal<__CFURL const*,std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>,std::equal_to<__CFURL const*>,std::hash<__CFURL const*>,true>,std::allocator<std::__hash_value_type<__CFURL const*,std::reference_wrapper<SVG::Element const>>>>::find<__CFURL const*>(a2, v80);
      if (!v17)
      {
        v43 = v16;
        goto LABEL_95;
      }
      if (!v18)
        goto LABEL_96;
      v19 = v18;
      v20 = *(_QWORD *)&v74[8];
      v21 = 0x9DDFEA08EB382D69 * (((8 * v18) + 8) ^ HIDWORD(v18));
      v22 = 0x9DDFEA08EB382D69 * (HIDWORD(v18) ^ (v21 >> 47) ^ v21);
      v23 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
      v24 = v6;
      if (*(_QWORD *)&v74[8])
      {
        v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v74[8]);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v26 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
          if (v23 >= *(_QWORD *)&v74[8])
            v26 = v23 % *(_QWORD *)&v74[8];
        }
        else
        {
          v26 = (*(_QWORD *)&v74[8] - 1) & v23;
        }
        v28 = *(_QWORD **)(*(_QWORD *)v74 + 8 * v26);
        if (v28)
        {
          for (i = (_QWORD *)*v28; i; i = (_QWORD *)*i)
          {
            v30 = i[1];
            if (v30 == v23)
            {
              if (i[2] == v18)
                goto LABEL_96;
            }
            else
            {
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&v74[8])
                  v30 %= *(_QWORD *)&v74[8];
              }
              else
              {
                v30 &= *(_QWORD *)&v74[8] - 1;
              }
              if (v30 != v26)
                break;
            }
          }
        }
        if (v25.u32[0] > 1uLL)
        {
          v27 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
          if (v23 >= *(_QWORD *)&v74[8])
            v27 = v23 % *(_QWORD *)&v74[8];
        }
        else
        {
          v27 = (*(_QWORD *)&v74[8] - 1) & v23;
        }
        v31 = *(_QWORD **)(*(_QWORD *)v74 + 8 * v27);
        if (v31)
        {
          for (j = (_QWORD *)*v31; j; j = (_QWORD *)*j)
          {
            v33 = j[1];
            if (v33 == v23)
            {
              if (j[2] == v18)
                goto LABEL_72;
            }
            else
            {
              if (v25.u32[0] > 1uLL)
              {
                if (v33 >= *(_QWORD *)&v74[8])
                  v33 %= *(_QWORD *)&v74[8];
              }
              else
              {
                v33 &= *(_QWORD *)&v74[8] - 1;
              }
              if (v33 != v27)
                break;
            }
          }
        }
      }
      else
      {
        v27 = 0xAAAAAAAAAAAAAAAALL;
      }
      v34 = operator new(0x18uLL);
      *v34 = 0;
      v34[1] = v23;
      v34[2] = v19;
      v35 = (float)(unint64_t)(*(_QWORD *)&v74[24] + 1);
      if (!v20 || (float)(*(float *)&v74[32] * (float)v20) < v35)
      {
        v36 = (v20 & (v20 - 1)) != 0;
        if (v20 < 3)
          v36 = 1;
        v37 = v36 | (2 * v20);
        v38 = vcvtps_u32_f32(v35 / *(float *)&v74[32]);
        if (v37 <= v38)
          v39 = v38;
        else
          v39 = v37;
        std::__hash_table<SVG::GradientElement const*,std::hash<SVG::GradientElement const*>,std::equal_to<SVG::GradientElement const*>,std::allocator<SVG::GradientElement const*>>::__rehash<true>((uint64_t)v74, v39);
        v20 = *(_QWORD *)&v74[8];
        if ((*(_QWORD *)&v74[8] & (*(_QWORD *)&v74[8] - 1)) != 0)
        {
          if (v23 >= *(_QWORD *)&v74[8])
            v27 = v23 % *(_QWORD *)&v74[8];
          else
            v27 = v23;
        }
        else
        {
          v27 = (*(_QWORD *)&v74[8] - 1) & v23;
        }
      }
      v40 = *(_QWORD *)v74;
      v41 = *(_QWORD **)(*(_QWORD *)v74 + 8 * v27);
      if (v41)
        break;
      *v34 = *(_QWORD *)&v74[16];
      *(_QWORD *)&v74[16] = v34;
      *(_QWORD *)(v40 + 8 * v27) = &v74[16];
      if (*v34)
      {
        v42 = *(_QWORD *)(*v34 + 8);
        if ((v20 & (v20 - 1)) != 0)
        {
          if (v42 >= v20)
            v42 %= v20;
        }
        else
        {
          v42 &= v20 - 1;
        }
        v41 = (_QWORD *)(*(_QWORD *)v74 + 8 * v42);
        goto LABEL_70;
      }
LABEL_71:
      ++*(_QWORD *)&v74[24];
      v6 = v24;
LABEL_72:
      if (v16 >= v6)
      {
        v44 = (v16 - v5) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          abort();
        if ((v6 - v5) >> 2 > v45)
          v45 = (v6 - v5) >> 2;
        if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          if (v46 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v47 = (char *)operator new(8 * v46);
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[8 * v44];
        v6 = &v47[8 * v46];
        *(_QWORD *)v48 = v19;
        v43 = v48 + 8;
        if (v16 == v5)
        {
          v5 = v16;
        }
        else
        {
          do
          {
            v49 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v48 - 1) = v49;
            v48 -= 8;
          }
          while (v16 != v5);
          if (!v5)
            goto LABEL_90;
        }
        operator delete(v5);
LABEL_90:
        v5 = v48;
        goto LABEL_91;
      }
      *(_QWORD *)v16 = v19;
      v43 = v16 + 8;
LABEL_91:
      *(_QWORD *)v80 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)v80 = *(_QWORD *)(*((_QWORD *)v43 - 1) + 640);
      v16 = v43;
      if (!*(_QWORD *)v80)
        goto LABEL_95;
    }
    *v34 = *v41;
LABEL_70:
    *v41 = v34;
    goto LABEL_71;
  }
  v43 = v5 + 8;
LABEL_95:
  v16 = v43;
LABEL_96:
  v50 = *(_QWORD **)&v74[16];
  if (*(_QWORD *)&v74[16])
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = *(void **)v74;
  *(_QWORD *)v74 = 0;
  if (v52)
    operator delete(v52);
  for (; v16 != v5; *(_OWORD *)(a3 + 48) = v66)
  {
    v54 = *((_QWORD *)v16 - 1);
    v16 -= 8;
    v53 = (_BYTE *)v54;
    v55 = *(_OWORD *)(v54 + 792);
    *(_OWORD *)&v77[16] = *(_OWORD *)(v54 + 776);
    v78 = v55;
    v56 = *(_OWORD *)(v54 + 824);
    *(_OWORD *)v79 = *(_OWORD *)(v54 + 808);
    *(_OWORD *)&v79[16] = v56;
    v57 = *(_OWORD *)(v54 + 728);
    *(_OWORD *)v75 = *(_OWORD *)(v54 + 712);
    *(_OWORD *)&v75[16] = v57;
    v58 = *(_OWORD *)(v54 + 760);
    v76 = *(_OWORD *)(v54 + 744);
    *(_OWORD *)v77 = v58;
    v59 = *(_OWORD *)(v54 + 664);
    *(_OWORD *)v74 = *(_OWORD *)(v54 + 648);
    *(_OWORD *)&v74[16] = v59;
    v60 = *(_OWORD *)(v54 + 696);
    *(_OWORD *)&v74[32] = *(_OWORD *)(v54 + 680);
    *(_OWORD *)&v74[48] = v60;
    *(_OWORD *)v80 = xmmword_1B9B92D88;
    memset(&v80[16], 255, 32);
    *(_OWORD *)&v80[48] = unk_1B9B92DB8;
    v81 = 0xAAAAAAAAAAAAAAAALL;
    SVG::GradientElement::State::specifiedInherit(v54 + 648, a3, (uint64_t)v80);
    *(_DWORD *)v74 = *(_DWORD *)v80;
    v74[4] = v80[4];
    *(_OWORD *)&v74[8] = *(_OWORD *)&v80[8];
    *(_OWORD *)&v74[24] = *(_OWORD *)&v80[24];
    *(_OWORD *)&v74[40] = *(_OWORD *)&v80[40];
    v74[56] = v80[56];
    *(_DWORD *)v75 = v81;
    v75[4] = BYTE4(v81);
    if (!*(_BYTE *)(v54 + 736) && *(_BYTE *)(a3 + 88))
    {
      *(_OWORD *)&v75[8] = *(_OWORD *)v72;
      v75[24] = *(_BYTE *)(v72 + 16);
    }
    if (!v53[760] && *(_BYTE *)(a3 + 112))
    {
      v76 = *(_OWORD *)(a3 + 96);
      v77[0] = *(_BYTE *)(a3 + 112);
    }
    if (!v53[784] && *(_BYTE *)(a3 + 136))
    {
      *(_OWORD *)&v77[8] = *(_OWORD *)v71;
      v77[24] = *(_BYTE *)(v71 + 16);
    }
    if (!v53[808] && *(_BYTE *)(a3 + 160))
    {
      v78 = *(_OWORD *)(a3 + 144);
      v79[0] = *(_BYTE *)(a3 + 160);
    }
    if (!v53[832] && *(_BYTE *)(a3 + 184))
    {
      *(_OWORD *)&v79[8] = *(_OWORD *)v70;
      v79[24] = *(_BYTE *)(v70 + 16);
    }
    v61 = v78;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)&v77[16];
    *(_OWORD *)(a3 + 144) = v61;
    v62 = *(_OWORD *)&v79[16];
    *(_OWORD *)(a3 + 160) = *(_OWORD *)v79;
    *(_OWORD *)(a3 + 176) = v62;
    v63 = *(_OWORD *)&v75[16];
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v75;
    *(_OWORD *)(a3 + 80) = v63;
    v64 = *(_OWORD *)v77;
    *(_OWORD *)(a3 + 96) = v76;
    *(_OWORD *)(a3 + 112) = v64;
    v65 = *(_OWORD *)&v74[16];
    *(_OWORD *)a3 = *(_OWORD *)v74;
    *(_OWORD *)(a3 + 16) = v65;
    v66 = *(_OWORD *)&v74[48];
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v74[32];
  }
  if (!*(_BYTE *)(a3 + 4))
  {
    *(_DWORD *)a3 = 1;
    *(_BYTE *)(a3 + 4) = 1;
  }
  if (!*(_BYTE *)(a3 + 56))
  {
    v67 = MEMORY[0x1E0C9BAA8];
    v68 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *v69 = *MEMORY[0x1E0C9BAA8];
    v69[1] = v68;
    v69[2] = *(_OWORD *)(v67 + 32);
    *(_BYTE *)(a3 + 56) = 1;
  }
  if (!*(_BYTE *)(a3 + 68))
  {
    *(_DWORD *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 68) = 1;
  }
  if (!*(_BYTE *)(a3 + 88))
  {
    *(_QWORD *)(a3 + 72) = 0x4049000000000000;
    *(_DWORD *)(a3 + 80) = 1;
    *(_BYTE *)(a3 + 88) = 1;
  }
  if (!*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a3 + 96) = 0x4049000000000000;
    *(_DWORD *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
  }
  if (!*(_BYTE *)(a3 + 136))
  {
    *(_QWORD *)(a3 + 120) = 0x4049000000000000;
    *(_DWORD *)(a3 + 128) = 1;
    *(_BYTE *)(a3 + 136) = 1;
  }
  if (v5)
    operator delete(v5);
}

void SVG::RadialGradientElement::~RadialGradientElement(SVG::RadialGradientElement *this)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = &unk_1E71375A0;
  v2 = (const void *)*((_QWORD *)this + 80);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138BC8[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138BE0[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138BF8[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138BE0[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138BF8[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = &unk_1E71375A0;
  v2 = (const void *)*((_QWORD *)this + 80);
  if (v2)
    CFRelease(v2);
  v3 = *((unsigned int *)this + 128);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138BC8[v3])(&v8, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v4 = *((unsigned int *)this + 116);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138BE0[v4])(&v9, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v5 = *((unsigned int *)this + 82);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138BF8[v5])(&v10, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v6 = *((unsigned int *)this + 66);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138BE0[v6])(&v11, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v7 = *((unsigned int *)this + 36);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E7138BF8[v7])(&v12, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::RadialGradientElement::getState(SVG::RadialGradientElement *this)
{
  return (uint64_t)this + 648;
}

__n128 SVG::RadialGradientElement::specifiedState@<Q0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __n128 result;
  _OWORD v6[4];
  uint64_t v7;

  SVG::RadialGradientElement::specifiedRadialState(a1, a2, (uint64_t)v6);
  v4 = v6[3];
  *(_OWORD *)(a3 + 32) = v6[2];
  *(_OWORD *)(a3 + 48) = v4;
  *(_QWORD *)(a3 + 64) = v7;
  result = (__n128)v6[1];
  *(_OWORD *)a3 = v6[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t SVG::StopElement::StopElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  void *__p[2];
  char v9;
  void *v10[2];
  unint64_t v11;

  v5 = SVG::Element::Element(a1, a2, a3);
  SVG::Presentation::Presentation(v5 + 64, a3);
  *(_QWORD *)a1 = off_1E7137350;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  std::string::basic_string[abi:nn180100]<0>(v10, "offset");
  std::string::basic_string[abi:nn180100]<0>(__p, "http://www.w3.org/2000/svg");
  v6 = SVG::Element::findInAttributeMap(a3, (uint64_t)v10, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
  {
    operator delete(v10[0]);
    if (!v6)
      return a1;
  }
  else if (!v6)
  {
    return a1;
  }
  v10[0] = (void *)-1;
  v10[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  SVG::consumeAlone<SVG::Length>((uint64_t)(v6 + 64), (_QWORD *(*)(__int128 *__return_ptr, uint64_t, unint64_t))SVG::consumeLength, (uint64_t)v10);
  if ((_BYTE)v11)
    *(_OWORD *)(a1 + 640) = *(_OWORD *)v10;
  return a1;
}

uint64_t SVG::StopElement::appendChild()
{
  return 0;
}

void SVG::StopElement::~StopElement(SVG::StopElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138C10[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138C28[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138C40[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138C28[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138C40[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v2 = *((unsigned int *)this + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E7138C10[v2])(&v7, (char *)this + 480);
  *((_DWORD *)this + 128) = -1;
  v3 = *((unsigned int *)this + 116);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E7138C28[v3])(&v8, (char *)this + 416);
  *((_DWORD *)this + 116) = -1;
  v4 = *((unsigned int *)this + 82);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E7138C40[v4])(&v9, (char *)this + 312);
  *((_DWORD *)this + 82) = -1;
  v5 = *((unsigned int *)this + 66);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E7138C28[v5])(&v10, (char *)this + 216);
  *((_DWORD *)this + 66) = -1;
  v6 = *((unsigned int *)this + 36);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))off_1E7138C40[v6])(&v11, (char *)this + 128);
  *((_DWORD *)this + 36) = -1;
  SVG::Element::~Element((void **)this);
  MEMORY[0x1BCCCA1B4]();
}

uint64_t SVG::decodeBase64@<X0>(SVG *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", this, 1);
  *a2 = result;
  return result;
}

size_t SVG::consumeColorKeyword@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  __CFString *v12;
  unint64_t v13;
  unint64_t v14;
  const char **v15;
  const char *v16;
  size_t result;
  size_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  int v22;
  BOOL v23;
  size_t v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  __CFString *p_data;
  __CFString *v29;
  void *isa;
  size_t v31;
  size_t v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  size_t v36;

  v5 = *((unsigned __int8 *)a1 + 23);
  v7 = (uint64_t *)*a1;
  v6 = a1[1];
  v35 = (uint64_t *)*a1;
  v36 = v6;
  if ((v5 & 0x80u) == 0)
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = a1;
  }
  v8 = v6 >= a2;
  v9 = v6 - a2;
  if (v8)
    v10 = v9;
  else
    v10 = 0;
  v11 = (char *)v7 + a2;
  v12 = (__CFString *)&SVG::colorKeywords;
  v13 = 147;
  do
  {
    v14 = v13 >> 1;
    v15 = (const char **)v12 + 2 * (v13 >> 1);
    v16 = *v15;
    result = strlen(*v15);
    if (result)
    {
      v18 = result - 1;
      v19 = v10;
      v20 = v11;
      while (v19)
      {
        v21 = *v16;
        v22 = *v20;
        if (v21 < v22)
        {
          v12 = (__CFString *)(v15 + 2);
          v14 = v13 + ~v14;
          break;
        }
        ++v20;
        ++v16;
        v23 = v21 > v22 || v18-- == 0;
        --v19;
        if (v23)
          break;
      }
    }
    v13 = v14;
  }
  while (v14);
  if (v12 == CFSTR("data"))
    goto LABEL_25;
  result = strlen((const char *)v12->isa);
  v24 = result + a2;
  if ((v5 & 0x80) != 0)
  {
    v25 = v35;
    if (v36 < v24)
    {
LABEL_25:
      v26 = 0;
      v27 = a3;
      *(_BYTE *)a3 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v25 = a1;
    if (v24 > v5)
      goto LABEL_25;
  }
  result = memcmp((char *)v25 + a2, v12->isa, result);
  if ((_DWORD)result)
    goto LABEL_25;
  p_data = (__CFString *)&v12->data;
  do
  {
    v29 = p_data;
    if (p_data == CFSTR("data"))
      break;
    isa = p_data->isa;
    v31 = strlen((const char *)p_data->isa);
    v32 = v31 + a2;
    if ((v5 & 0x80) != 0)
    {
      v33 = v35;
      if (v36 < v32)
        break;
    }
    else
    {
      v33 = a1;
      if (v32 > v5)
        break;
    }
    v34 = memcmp((char *)v33 + a2, isa, v31);
    p_data = (__CFString *)&v29->data;
  }
  while (!v34);
  result = strlen(v29[-1].data);
  *(_QWORD *)a3 = LOWORD(v29[-1].length) | ((unint64_t)BYTE2(v29[-1].length) << 16);
  *(_QWORD *)(a3 + 8) = result + a2;
  v27 = a3;
  v26 = 1;
LABEL_26:
  *(_BYTE *)(v27 + 16) = v26;
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

Boolean CFURLCanBeDecomposed(CFURLRef anURL)
{
  return MEMORY[0x1E0C992B0](anURL);
}

CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1E0C992E8](anURL, charactersToLeaveEscaped);
}

CFStringRef CFURLCopyNetLocation(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99300](anURL);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99340](anURL);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99348](anURL);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1E0C9BAB8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  return MEMORY[0x1E0C9BB48](context);
}

size_t CGBitmapContextGetBitsPerComponent(CGContextRef context)
{
  return MEMORY[0x1E0C9BB50](context);
}

size_t CGBitmapContextGetBitsPerPixel(CGContextRef context)
{
  return MEMORY[0x1E0C9BB58](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1E0C9BB60](context);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BB68](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1E0C9BB78](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1E0C9BB80](context);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB8](red, green, blue, alpha);
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE30](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextAddRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9BFE8](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
  MEMORY[0x1E0C9C008](c, auxiliaryInfo);
}

void CGContextClip(CGContextRef c)
{
  MEMORY[0x1E0C9C028](c);
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
  MEMORY[0x1E0C9C030](c, mask, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C038](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C198](c, gradient, *(_QWORD *)&options, (__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y);
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C1D0](c, gradient, *(_QWORD *)&options, (__n128)startCenter, *(__n128 *)&startCenter.y, startRadius, (__n128)endCenter, *(__n128 *)&endCenter.y, endRadius);
}

void CGContextEOClip(CGContextRef c)
{
  MEMORY[0x1E0C9C1E8](c);
}

void CGContextEOFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C1F0](c);
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
  MEMORY[0x1E0C9C200](c);
}

void CGContextFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C218](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFlush(CGContextRef c)
{
  MEMORY[0x1E0C9C230](c);
}

uint64_t CGContextGetBaseCTM()
{
  return MEMORY[0x1E0C9C240]();
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9C250](retstr, c);
}

uint64_t CGContextGetFillColorAsColor()
{
  return MEMORY[0x1E0C9C280]();
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x1E0C9C3B8](c, alpha);
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
  MEMORY[0x1E0C9C400](c, space);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetFillPattern(CGContextRef c, CGPatternRef pattern, const CGFloat *components)
{
  MEMORY[0x1E0C9C410](c, pattern, components);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA90](space, colors, locations);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5A0](provider, options);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
  MEMORY[0x1E0C9D280](path, m, clockwise, x, y, radius, startAngle, endAngle);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2A0](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
  MEMORY[0x1E0C9D2B0](path, m, points, count);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  MEMORY[0x1E0C9D2E8](path, info, function);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

CGPathRef CGPathCreateCopyByDashingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat phase, const CGFloat *lengths, size_t count)
{
  return (CGPathRef)MEMORY[0x1E0C9D328](path, transform, lengths, count, phase);
}

CGPathRef CGPathCreateCopyByStrokingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit)
{
  return (CGPathRef)MEMORY[0x1E0C9D348](path, transform, *(_QWORD *)&lineCap, *(_QWORD *)&lineJoin, lineWidth, miterLimit);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D358](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D3F0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D410](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x1E0C9D4A8](info, matrix, *(_QWORD *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4728]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x1E0DE4930](__format);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

void operator delete(void *__p)
{
  off_1E7136510(__p);
}

uint64_t operator delete()
{
  return off_1E7136518();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E7136520(__sz);
}

uint64_t operator new()
{
  return off_1E7136528();
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1E0DE5290](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE52A0](stream, *(_QWORD *)&operation, *(_QWORD *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1E0DE52B0](stream, *(_QWORD *)&flags);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

vImage_Error vImageAlphaBlend_ARGB8888(const vImage_Buffer *srcTop, const vImage_Buffer *srcBottom, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CB98](srcTop, srcBottom, dest, *(_QWORD *)&flags);
}

vImage_Error vImageBufferFill_ARGB8888(const vImage_Buffer *dest, const Pixel_8888 color, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CBD8](dest, color, *(_QWORD *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[16], int32_t divisor, const int16_t *pre_bias, const int32_t *post_bias, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D410](src, dest, matrix, *(_QWORD *)&divisor, pre_bias, post_bias, *(_QWORD *)&flags);
}

