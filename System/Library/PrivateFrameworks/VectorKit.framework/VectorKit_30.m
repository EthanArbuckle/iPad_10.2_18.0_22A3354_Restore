void sub_19FBC3AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v26;
  uint64_t v27;

  v26 = a17;
  if (a17 == &a14)
  {
    v27 = 4;
    v26 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *altitude::LabelDataManagerPrivate::setLabelDataCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 56);
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v3 != v9)
  {
    v5 = v10;
    v6 = *(_QWORD **)(a1 + 80);
    if (v10 == v9)
    {
      if (v6 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), v9);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
        *(_QWORD *)(a1 + 80) = 0;
        v10 = v9;
        (*(void (**)(_QWORD *, _QWORD *))(v11[0] + 24))(v11, v3);
        (*(void (**)(_QWORD *))(v11[0] + 32))(v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v3);
        (*(void (**)(_QWORD *))(*v10 + 32))(v10);
        v10 = *(_QWORD **)(a1 + 80);
      }
      *(_QWORD *)(a1 + 80) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(a1 + 56) + 24))(v3, v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80));
      *(_QWORD *)(a1 + 80) = v10;
      v10 = v9;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v5;
    }
  }
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

uint64_t altitude::LabelDataManagerPrivate::flushLabelTiles(uint64_t this)
{
  *(_BYTE *)(this + 88) = 1;
  return this;
}

void altitude::LabelDataManagerPrivate::onTileComponentDataLoaded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  altitude::LabelDataManagerPrivate *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;

  if (!*(_QWORD *)(a1 + 80) || *(_DWORD *)(a3 + 8) != 3)
    return;
  v6 = *(_QWORD *)(a3 + 88);
  v5 = *(std::__shared_weak_count **)(a3 + 96);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
LABEL_9:
    if (!v6)
      goto LABEL_20;
  }
  v11 = *(_OWORD *)(a3 + 88);
  v12 = *(_QWORD *)(a3 + 96);
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v35 = v11;
  v15 = *(_QWORD *)(a1 + 80);
  if (!v15)
    goto LABEL_41;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 48))(v15, &v35);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_20:
  v20 = *(_QWORD *)(a3 + 104);
  v19 = *(std::__shared_weak_count **)(a3 + 112);
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (v24)
    {
      if (!v20)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (!v20)
        return;
    }
    v25 = *(std::__shared_weak_count **)(a3 + 112);
    v33 = *(_QWORD *)(a3 + 104);
    v34 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    if (!v20)
      return;
    v33 = *(_QWORD *)(a3 + 104);
    v34 = 0;
  }
  v28 = *(_QWORD *)(a1 + 80);
  if (!v28)
  {
LABEL_41:
    std::__throw_bad_function_call[abi:nn180100]();
    return;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v33);
  v29 = v34;
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void `non-virtual thunk to'altitude::LabelDataManagerPrivate::~LabelDataManagerPrivate(altitude::LabelDataManagerPrivate *this)
{
  uint64_t v2;
  altitude::LabelDataManagerPrivate *v3;
  uint64_t v4;
  altitude::LabelDataManagerPrivate *v5;
  uint64_t v6;

  *((_QWORD *)this - 1) = &off_1E42C61B0;
  *(_QWORD *)this = &unk_1E42C61F0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 688);
  if (v2)
    altitude::TileManager::unregisterTileListener(v2, (uint64_t)this);
  v3 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 9);
  if (v3 == (altitude::LabelDataManagerPrivate *)((char *)this + 48))
  {
    v4 = 4;
    v3 = (altitude::LabelDataManagerPrivate *)((char *)this + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 5);
  if (v5 == (altitude::LabelDataManagerPrivate *)((char *)this + 16))
  {
    v6 = 4;
    v5 = (altitude::LabelDataManagerPrivate *)((char *)this + 16);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

{
  uint64_t v2;
  altitude::LabelDataManagerPrivate *v3;
  uint64_t v4;
  altitude::LabelDataManagerPrivate *v5;
  uint64_t v6;

  *((_QWORD *)this - 1) = &off_1E42C61B0;
  *(_QWORD *)this = &unk_1E42C61F0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 688);
  if (v2)
    altitude::TileManager::unregisterTileListener(v2, (uint64_t)this);
  v3 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 9);
  if (v3 == (altitude::LabelDataManagerPrivate *)((char *)this + 48))
  {
    v4 = 4;
    v3 = (altitude::LabelDataManagerPrivate *)((char *)this + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (altitude::LabelDataManagerPrivate *)*((_QWORD *)this + 5);
  if (v5 == (altitude::LabelDataManagerPrivate *)((char *)this + 16))
  {
    v6 = 4;
    v5 = (altitude::LabelDataManagerPrivate *)((char *)this + 16);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::LabelDataManagerPrivate::onTileComponentDataLoaded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  altitude::LabelDataManagerPrivate::onTileComponentDataLoaded(a1 - 8, a2, a3);
}

void sub_19FBC45BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBC45DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBC4690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBC4730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t altitude::TrafficTilePrivate::renderStamp(altitude::TrafficTilePrivate *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t altitude::TrafficTilePrivate::geoTileKey(altitude::TrafficTilePrivate *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t altitude::TrafficTilePrivate::vk_tile(altitude::TrafficTilePrivate *this)
{
  return *((_QWORD *)this + 12);
}

void altitude::TrafficTilePrivate::~TrafficTilePrivate(altitude::TrafficTilePrivate *this)
{
  altitude::TrafficTilePrivate::~TrafficTilePrivate(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)this = off_1E42C56E0;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 12) = 0;

  }
  v3 = *((_QWORD *)this + 9);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t altitude::TrafficTilePrivate::setRenderStamp(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

void *altitude::TrafficTilePrivate::vk_tile(altitude::TrafficTilePrivate *this, void *a2)
{
  void *v4;
  void *result;

  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 12) = 0;

  }
  result = a2;
  *((_QWORD *)this + 12) = result;
  return result;
}

void ggl::MaskingOverlay::FillPipelineSetup::~FillPipelineSetup(ggl::MaskingOverlay::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::MaskingOverlay::FillPipelineSetup::constantDataIsEnabled(ggl::MaskingOverlay::FillPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::MaskingOverlay::FillPipelineSetup::textureIsEnabled(ggl::MaskingOverlay::FillPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::MaskingOverlay::MaskingPipelineSetup::~MaskingPipelineSetup(ggl::MaskingOverlay::MaskingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::MaskingOverlay::MaskingPipelineSetup::constantDataIsEnabled(ggl::MaskingOverlay::MaskingPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::MaskingOverlay::MaskingPipelineSetup::textureIsEnabled(ggl::MaskingOverlay::MaskingPipelineSetup *this)
{
  return 0;
}

void md::FlyoverDsmDataRequester::~FlyoverDsmDataRequester(md::FlyoverDsmDataRequester *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E429E760;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E429E760;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &off_1E42A7D58;
  if (*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 0;
  if (*((_BYTE *)this + 28))
    *((_BYTE *)this + 28) = 0;
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::FlyoverDsmDataRequester::setResourceManifestInformer(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  *result = &off_1E42A3158;
  result[1] = a2;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = *(_QWORD **)(a1 + 48);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void md::FlyoverDsmDataRequester::requestDataKeys(md::SingleGEOResourceDataRequester *this, gdc::LayerDataCollector **a2, char a3)
{
  if (*((_BYTE *)a2 + 82) != 1)
    md::SingleGEOResourceDataRequester::requestDataKeys(this, a2, a3);
}

void md::FlyoverDsmManifestInformer::~FlyoverDsmManifestInformer(md::FlyoverDsmManifestInformer *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::FlyoverDsmManifestInformer::resourceTileForTile(md::FlyoverDsmManifestInformer *this, unsigned __int16 a2, const QuadTile *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 1);
  if (a3->_level <= 0xDu)
    v4 = 50;
  else
    v4 = 20;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
}

_QWORD *md::FlyoverDsmManifestInformer::downloadZoomRange@<X0>(md::FlyoverDsmManifestInformer *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8[4];
  uint64_t v9;
  char v10[4];
  uint64_t v11;

  (*(void (**)(char *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(v10, *((_QWORD *)this + 1), 20);
  result = (*(_QWORD *(**)(char *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(v8, *((_QWORD *)this + 1), 50);
  if (!v10[0])
  {
    if (!v8[0])
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
    v7 = v9;
LABEL_13:
    *(_QWORD *)(a2 + 4) = v7;
    *(_BYTE *)a2 = 1;
    return result;
  }
  if (!v8[0])
  {
    v7 = v11;
    goto LABEL_13;
  }
  if (v9 >= v11)
    v5 = v11;
  else
    v5 = v9;
  if (HIDWORD(v11) <= HIDWORD(v9))
    v6 = HIDWORD(v9);
  else
    v6 = HIDWORD(v11);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 4) = v5 | (v6 << 32);
  return result;
}

uint64_t md::FlyoverDsmManifestInformer::tileSize(md::FlyoverDsmManifestInformer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void md::RoadTileDataRenderable::~RoadTileDataRenderable(md::RoadTileDataRenderable *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E426F460;
  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](v2);
  *(_QWORD *)this = &off_1E426F2A0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E426F460;
  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](v2);
  *(_QWORD *)this = &off_1E426F2A0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::MapTileDataRenderable<md::RoadTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F2A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E426F2A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A1AF4E00);
}

md::VenueLevel *md::VenueLevel::VenueLevel(md::VenueLevel *this, uint64_t a2, __int16 a3, const char *__s, const char *a5, const char *a6, const char *a7, char a8, double a9)
{
  size_t v14;
  size_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  size_t v20;
  size_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  size_t v26;
  size_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  size_t v32;
  size_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  __int128 __dst;
  unint64_t v40;

  *(_QWORD *)this = a2;
  *((_WORD *)this + 4) = a3;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 168) = a8;
  *((double *)this + 22) = a9;
  if (!__s)
    goto LABEL_14;
  v14 = strlen(__s);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    v40 = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v40) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_9:
    memcpy(p_dst, __s, v15);
  *((_BYTE *)p_dst + v15) = 0;
  v19 = (void **)((char *)this + 24);
  if (*((_BYTE *)this + 16))
  {
    if (*((char *)this + 47) < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = __dst;
    *((_QWORD *)this + 5) = v40;
LABEL_14:
    if (a5)
      goto LABEL_15;
LABEL_29:
    if (!a6)
      goto LABEL_44;
    goto LABEL_30;
  }
  *(_OWORD *)v19 = __dst;
  *((_QWORD *)this + 5) = v40;
  *((_BYTE *)this + 16) = 1;
  if (!a5)
    goto LABEL_29;
LABEL_15:
  v20 = strlen(a5);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    v40 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = v22;
    goto LABEL_22;
  }
  HIBYTE(v40) = v20;
  v22 = &__dst;
  if (v20)
LABEL_22:
    memcpy(v22, a5, v21);
  *((_BYTE *)v22 + v21) = 0;
  v25 = (void **)((char *)this + 56);
  if (*((_BYTE *)this + 48))
  {
    if (*((char *)this + 79) < 0)
      operator delete(*v25);
    *(_OWORD *)v25 = __dst;
    *((_QWORD *)this + 9) = v40;
    if (!a6)
    {
LABEL_44:
      if (!a7)
        return this;
LABEL_45:
      v32 = strlen(a7);
      if (v32 <= 0x7FFFFFFFFFFFFFF7)
      {
        v33 = v32;
        if (v32 >= 0x17)
        {
          v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17)
            v35 = v32 | 7;
          v36 = v35 + 1;
          v34 = (__int128 *)operator new(v35 + 1);
          *((_QWORD *)&__dst + 1) = v33;
          v40 = v36 | 0x8000000000000000;
          *(_QWORD *)&__dst = v34;
        }
        else
        {
          HIBYTE(v40) = v32;
          v34 = &__dst;
          if (!v32)
          {
LABEL_53:
            *((_BYTE *)v34 + v33) = 0;
            v37 = (void **)((char *)this + 120);
            if (*((_BYTE *)this + 112))
            {
              if (*((char *)this + 143) < 0)
                operator delete(*v37);
              *(_OWORD *)v37 = __dst;
              *((_QWORD *)this + 17) = v40;
            }
            else
            {
              *(_OWORD *)v37 = __dst;
              *((_QWORD *)this + 17) = v40;
              *((_BYTE *)this + 112) = 1;
            }
            return this;
          }
        }
        memcpy(v34, a7, v33);
        goto LABEL_53;
      }
LABEL_61:
      abort();
    }
  }
  else
  {
    *(_OWORD *)v25 = __dst;
    *((_QWORD *)this + 9) = v40;
    *((_BYTE *)this + 48) = 1;
    if (!a6)
      goto LABEL_44;
  }
LABEL_30:
  v26 = strlen(a6);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_61;
  v27 = v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (__int128 *)operator new(v29 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v40 = v30 | 0x8000000000000000;
    *(_QWORD *)&__dst = v28;
    goto LABEL_37;
  }
  HIBYTE(v40) = v26;
  v28 = &__dst;
  if (v26)
LABEL_37:
    memcpy(v28, a6, v27);
  *((_BYTE *)v28 + v27) = 0;
  v31 = (void **)((char *)this + 88);
  if (!*((_BYTE *)this + 80))
  {
    *(_OWORD *)v31 = __dst;
    *((_QWORD *)this + 13) = v40;
    *((_BYTE *)this + 80) = 1;
    if (!a7)
      return this;
    goto LABEL_45;
  }
  if (*((char *)this + 111) < 0)
    operator delete(*v31);
  *(_OWORD *)v31 = __dst;
  *((_QWORD *)this + 13) = v40;
  if (a7)
    goto LABEL_45;
  return this;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42802D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42802D8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *CanUpdateWithStyle;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  CanUpdateWithStyle = (uint64_t *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(CanUpdateWithStyle + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)CanUpdateWithStyle[11];
    v12 = CanUpdateWithStyle[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)CanUpdateWithStyle[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      CanUpdateWithStyle[10] = (uint64_t)v21;
      CanUpdateWithStyle[11] = (uint64_t)v14;
      CanUpdateWithStyle[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    CanUpdateWithStyle[11] = (uint64_t)v14;
    v9 = CanUpdateWithStyle[31];
  }
  else
  {
    v8 = (_DWORD *)(CanUpdateWithStyle[10] + (((uint64_t)v6 - CanUpdateWithStyle[7]) >> 1));
    *v8 = v5;
    v9 = CanUpdateWithStyle[31];
    if (v8 != (_DWORD *)CanUpdateWithStyle[11])
    {
      v10 = (_QWORD *)CanUpdateWithStyle[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)CanUpdateWithStyle[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427BBB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BBB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::operator()(uint64_t a1))()
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (***v7)();
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***result)();
  uint64_t v13;
  char v14;
  uint64_t (**v15)();
  uint64_t v16;
  int v17;
  uint64_t (***v18)();
  uint64_t (**v19)();
  uint64_t v20;
  int v21;
  uint64_t (***v22)();
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD ***)(a1 + 8);
  v3 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v4 = HIDWORD(*v3);
  v5 = *v3 << 32;
  v15 = &off_1E4280368;
  v16 = v5;
  v17 = v4;
  v18 = &v15;
  v19 = &off_1E4280368;
  v22 = &v19;
  v20 = v5;
  v21 = v4;
  v23 = 0;
  ecs2::Runtime::queueCommand(v6, (uint64_t)&v19);
  if (v23 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v23])(&v14, &v19);
  v23 = -1;
  v7 = v18;
  if (v18 == &v15)
  {
    v8 = 4;
    v7 = &v15;
  }
  else
  {
    if (!v18)
      goto LABEL_8;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_8:
  v9 = *v2;
  v10 = HIDWORD(*v3);
  v11 = **(unsigned int **)(a1 + 16) | (*v3 << 32);
  v15 = &off_1E42802D8;
  v16 = v11;
  v17 = v10;
  v18 = &v15;
  v19 = &off_1E42802D8;
  v22 = &v19;
  v20 = v11;
  v21 = v10;
  v23 = 0;
  ecs2::Runtime::queueCommand(v9, (uint64_t)&v19);
  if (v23 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v23])(&v14, &v19);
  v23 = -1;
  result = v18;
  if (v18 == &v15)
  {
    v13 = 4;
    result = &v15;
  }
  else
  {
    if (!v18)
      return result;
    v13 = 5;
  }
  return (uint64_t (***)())(*result)[v13]();
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4280368;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4280368;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MaterialPendingProcessing>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427BB68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427BB68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, _BYTE *a2)
{
  if (*a2 == 3)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427BB20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427BB20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;
  uint64_t (***v13)();
  BOOL v14;
  int8x8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  char v37;
  uint64_t (**v38)();
  __int128 v39;
  uint64_t (***v40)();
  uint64_t (**v41)();
  __int128 v42;
  uint64_t (***v43)();
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v8 = *(_QWORD ***)(a1 + 24);
  v9 = **(_QWORD **)(a1 + 8);
  v38 = (uint64_t (**)())v5;
  v10 = *(_QWORD *)(v9 + 120);
  if (v5 >= (unint64_t)((*(_QWORD *)(v9 + 128) - v10) >> 3))
    goto LABEL_9;
  v11 = *(uint64_t (***)())(v10 + 8 * v5);
  if (!v11)
    goto LABEL_10;
  if (HIDWORD(v5) != HIDWORD(v11)
    || ((v12 = *(_QWORD *)(v9 + 144),
         v13 = (uint64_t (***)())(v12 + 8 * v11),
         v13 != *(uint64_t (****)())(v9 + 152))
      ? (v14 = v12 == 0)
      : (v14 = 1),
        v14))
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v33 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v9 + 56, v5, &v38);
    ++v33[3];
    v11 = *v13;
  }
LABEL_10:
  v15 = *(int8x8_t **)v9;
  v41 = v11;
  *(_QWORD *)&v42 = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v35, v15, (uint64_t *)&v41, 0);
  (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v35 + 264))(&v34, **(float **)(a1 + 16));
  v16 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v17 = *v16;
  v18 = *v8;
  if (!v19)
  {
    v38 = &off_1E427DB30;
    *(_QWORD *)&v39 = v17 << 32;
    DWORD2(v39) = HIDWORD(v17);
    v40 = &v38;
    v41 = &off_1E427DB30;
    v43 = &v41;
    *(_QWORD *)&v42 = v17 << 32;
    DWORD2(v42) = HIDWORD(v17);
    v44 = 0;
    ecs2::Runtime::queueCommand(v18, (uint64_t)&v41);
    if (v44 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v44])(&v37, &v41);
    v44 = -1;
    v22 = v40;
    if (v40 == &v38)
    {
      v23 = 4;
      v22 = &v38;
    }
    else
    {
      if (!v40)
        goto LABEL_28;
      v23 = 5;
    }
    (*v22)[v23]();
LABEL_28:
    if (!v7)
      goto LABEL_36;
    v26 = *v8;
    v27 = *v16;
    v38 = &off_1E4282960;
    *(_QWORD *)&v39 = v27;
    v40 = &v38;
    v41 = &off_1E4282960;
    v43 = &v41;
    *(_QWORD *)&v42 = v27;
    v44 = 1;
    ecs2::Runtime::queueCommand(v26, (uint64_t)&v41);
    if (v44 != -1)
      goto LABEL_30;
    goto LABEL_31;
  }
  v38 = &off_1E4281DD8;
  *(_QWORD *)&v39 = HIDWORD(v34);
  *((_QWORD *)&v39 + 1) = v17;
  v40 = &v38;
  v43 = &v41;
  v41 = &off_1E4281DD8;
  v42 = v39;
  v44 = 0;
  ecs2::Runtime::queueCommand(v18, (uint64_t)&v41);
  if (v44 != -1)
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v44])(&v37, &v41);
  v44 = -1;
  v20 = v40;
  if (v40 == &v38)
  {
    v21 = 4;
    v20 = &v38;
  }
  else
  {
    if (!v40)
      goto LABEL_23;
    v21 = 5;
  }
  (*v20)[v21]();
LABEL_23:
  if (!v6)
    goto LABEL_36;
  v24 = *v8;
  v25 = *v16;
  v38 = &off_1E4282570;
  *(_QWORD *)&v39 = v25;
  v40 = &v38;
  v41 = &off_1E4282570;
  v43 = &v41;
  *(_QWORD *)&v42 = v25;
  v44 = 1;
  ecs2::Runtime::queueCommand(v24, (uint64_t)&v41);
  if (v44 != -1)
LABEL_30:
    ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v44])(&v37, &v41);
LABEL_31:
  v44 = -1;
  v28 = v40;
  if (v40 == &v38)
  {
    v29 = 4;
    v28 = &v38;
  }
  else
  {
    if (!v40)
      goto LABEL_36;
    v29 = 5;
  }
  (*v28)[v29]();
LABEL_36:
  v30 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_19FBC63A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282960;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ZIndex>(a2);
  return gdc::ComponentStorageWrapper<md::ls::ZIndex>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427DB30;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427DB30;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::DefaultZIndex>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4282570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4282570;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::DefaultZIndex>(a2);
  return gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::remove(v3, *(_QWORD *)(a1 + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281DD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281DD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::ZIndex>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int8x8_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  uint64_t v31[2];

  v5 = *a2;
  v6 = **(_QWORD **)(a1 + 8);
  v30 = v5;
  v7 = *(_QWORD *)(v6 + 120);
  if (v5 >= (unint64_t)((*(_QWORD *)(v6 + 128) - v7) >> 3))
    goto LABEL_9;
  v8 = *(_QWORD *)(v7 + 8 * v5);
  if (v8)
  {
    if (HIDWORD(v5) == HIDWORD(v8))
    {
      v9 = *(_QWORD *)(v6 + 144);
      v10 = (uint64_t *)(v9 + 8 * v8);
      if (v10 != *(uint64_t **)(v6 + 152) && v9 != 0)
      {
        v27 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v5, &v30);
        ++v27[3];
        v8 = *v10;
        goto LABEL_10;
      }
    }
LABEL_9:
    v8 = 0;
  }
LABEL_10:
  v12 = *(int8x8_t **)v6;
  v31[0] = v8;
  v31[1] = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v28, v12, v31, 0);
  v13 = **(_QWORD ***)(a1 + 8);
  v14 = *a3;
  v15 = *a3;
  v16 = v13[89];
  if (v15 < (v13[90] - v16) >> 3
    && ((v17 = *(_QWORD *)(v16 + 8 * v15)) != 0 ? (v18 = HIDWORD(v14) == HIDWORD(v17)) : (v18 = 0), v18))
  {
    v20 = v13[92] + 8 * v17;
    v19 = v13[93];
  }
  else
  {
    v19 = v13[93];
    v20 = v19;
  }
  if (v20 == v19)
    v21 = 0;
  else
    v21 = v20;
  if (v21)
  {
    v22 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v13 + 81), v14, a3);
    ++v22[3];
  }
  (*(void (**)(uint64_t *__return_ptr, float))(*(_QWORD *)v28 + 264))(v31, **(float **)(a1 + 16));
  if (LOBYTE(v31[0]))
  {
    v23 = 0;
    *(_DWORD *)v21 = HIDWORD(v31[0]);
  }
  else
  {
    v23 = 1;
  }
  *(_BYTE *)(v21 + 4) = v23;
  v24 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19FBC6BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427C3D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C3D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int8x8_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  BOOL v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  uint64_t v36[2];

  v5 = *a2;
  v6 = **(_QWORD **)(a1 + 8);
  v35 = v5;
  v7 = *(_QWORD *)(v6 + 120);
  if (v5 >= (unint64_t)((*(_QWORD *)(v6 + 128) - v7) >> 3))
    goto LABEL_9;
  v8 = *(_QWORD *)(v7 + 8 * v5);
  if (v8)
  {
    if (HIDWORD(v5) == HIDWORD(v8))
    {
      v9 = *(_QWORD *)(v6 + 144);
      v10 = (uint64_t *)(v9 + 8 * v8);
      if (v10 != *(uint64_t **)(v6 + 152) && v9 != 0)
      {
        v32 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v5, &v35);
        ++v32[3];
        v8 = *v10;
        goto LABEL_10;
      }
    }
LABEL_9:
    v8 = 0;
  }
LABEL_10:
  v12 = *(int8x8_t **)v6;
  v36[0] = v8;
  v36[1] = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v33, v12, v36, 0);
  v13 = **(_QWORD ***)(a1 + 8);
  v14 = *a3;
  v15 = *a3;
  v16 = v13[52];
  if (v15 < (v13[53] - v16) >> 3
    && ((v17 = *(_QWORD *)(v16 + 8 * v15)) != 0 ? (v18 = HIDWORD(v14) == HIDWORD(v17)) : (v18 = 0), v18))
  {
    v31 = 3 * v17;
    v19 = (char *)v13[56];
    v20 = (char *)(v13[55] + v31);
  }
  else
  {
    v19 = (char *)v13[56];
    v20 = v19;
  }
  if (v20 == v19)
    v21 = 0;
  else
    v21 = v20;
  if (v21)
  {
    v22 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v13 + 44), v14, a3);
    ++v22[3];
  }
  v23 = v33;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(_QWORD *)v33 + 848))(v36, v33, **(float **)(a1 + 16));
  if (LOBYTE(v36[0]))
    v24 = BYTE1(v36[0]) == 0;
  else
    v24 = 1;
  v25 = !v24;
  v21[1] = v25;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(_QWORD *)v23 + 360))(v36, v23, **(float **)(a1 + 16));
  if (LOBYTE(v36[0]))
    v26 = BYTE1(v36[0]) == 0;
  else
    v26 = 0;
  v27 = !v26;
  *v21 = v27;
  v28 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_19FBC6E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ggl::FoggedSpecularBuilding::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::FoggedSpecularBuildingShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43BF8 = 1;
          }
          ggl::FoggedSpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          unk_1EE57F210 = &ggl::FoggedSpecularBuilding::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57F218 = 0;
          if ((v95 & 1) == 0
          {
            ggl::FoggedSpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57F248 = ggl::Tile::View::reflection(void)::reflection;
            qword_1EE57F250 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
            unk_1EE57F258 = ggl::Building::Style::reflection(void)::reflection;
            qword_1EE57F260 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE57F268 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE57F270 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
          }
          qword_1EE57F220 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57F228 = xmmword_19FFB3710;
        }
      }
      ggl::FoggedSpecularBuilding::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FoggedSpecularBuilding::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::FoggedSpecularBuildingShader::typedReflection(v90);
      qword_1ECE31AC8 = (uint64_t)&ggl::FoggedSpecularBuildingShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57F3D8 = 0;
        qword_1EE57F3E0 = (uint64_t)"";
        dword_1EE57F3E8 = 0;
        qword_1EE57F3F0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57F3F8 = 2;
      }
      qword_1ECE31AD0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31AD8 = 1;
      qword_1ECE31AE0 = 0;
      unk_1ECE31AE8 = 1;
      qword_1ECE31AF0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31AF8 = 0;
      if ((v93 & 1) == 0
      {
        ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57F288 = 0;
        qword_1EE57F290 = (uint64_t)"skyfog";
        dword_1EE57F298 = 3;
        qword_1EE57F2A0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57F2A8 = xmmword_19FFB3720;
        qword_1EE57F2B8 = 1;
        unk_1EE57F2C0 = "view";
        dword_1EE57F2C8 = 3;
        qword_1EE57F2D0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57F2D8 = vdupq_n_s64(2uLL);
        qword_1EE57F2E8 = 2;
        unk_1EE57F2F0 = "scale";
        dword_1EE57F2F8 = 3;
        qword_1EE57F300 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57F308 = xmmword_19FFB3730;
        qword_1EE57F318 = 3;
        unk_1EE57F320 = "style";
        dword_1EE57F328 = 3;
        qword_1EE57F330 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1EE57F338 = xmmword_19FFB3740;
        qword_1EE57F348 = 4;
        unk_1EE57F350 = "gradient";
        dword_1EE57F358 = 3;
        qword_1EE57F360 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        unk_1EE57F368 = xmmword_19FFB3670;
        qword_1EE57F378 = 5;
        unk_1EE57F380 = "lightConfig";
        dword_1EE57F388 = 3;
        qword_1EE57F390 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE57F398 = xmmword_19FFB3750;
        qword_1EE57F3A8 = 6;
        unk_1EE57F3B0 = "fade";
        dword_1EE57F3B8 = 3;
        qword_1EE57F3C0 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE57F3C8 = 2;
      }
      qword_1ECE31B00 = (uint64_t)&ggl::FoggedSpecularBuilding::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE31B08 = 7;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FoggedSpecularBuilding::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BAF90;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

uint64_t ppred_decompress(float **a1, unsigned int *a2, float **a3, unsigned int *a4, uint64_t *a5, _QWORD *a6, unsigned int **a7, _QWORD *a8, _QWORD *a9, int *a10, uint64_t a11)
{
  unsigned int *v12;
  int *v13;
  __int32 *v14;
  __int32 v15;
  uint64_t v16;
  float64x2_t v17;
  float32x2_t v18;
  float v19;
  int v20;
  int v21;
  int v22;
  __int32 *v23;
  uint64_t v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t result;
  uint64_t v34;
  int32x2_t v35;
  size_t v36;
  size_t v37;
  int *v38;
  void *v39;
  __int32 v40;
  unsigned int v41;
  int v42;
  int *v43;
  unsigned int v44;
  int v45;
  int v46;
  void *v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  BOOL v51;
  int v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  _DWORD *v68;
  unsigned int *v69;
  uint64_t *v70;
  unint64_t v71;
  unsigned int v72;
  size_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int *v87;
  char *v88;
  unsigned int *v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  int32x4_t v96;
  int32x4_t *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  _DWORD *v106;
  unsigned int *v107;
  unint64_t v108;
  unsigned int v109;
  size_t v110;
  int v111;
  uint64_t v112;
  _DWORD *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  int v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  _DWORD *v130;
  unsigned int *v131;
  uint64_t *v132;
  unint64_t v133;
  unsigned int v134;
  _DWORD *v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  _DWORD *v140;
  unsigned int *v141;
  _QWORD *v142;
  unint64_t v143;
  unsigned int v144;
  _DWORD *v145;
  uint64_t v146;
  size_t v147;
  size_t v148;
  void *v149;
  _DWORD *v150;
  _DWORD *v151;
  char *v152;
  char *v153;
  int16x4_t v154;
  int16x4_t v155;
  int16x4_t v156;
  int16x4_t v157;
  _DWORD *v158;
  unsigned int *v159;
  void *v160;
  void *v161;
  _DWORD *v162;
  size_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  int v181;
  char *v182;
  char *v183;
  int v184;
  char *v185;
  char *v186;
  int v187;
  int v188;
  uint64_t v189;
  char *v190;
  int v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  int16x4_t v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  _DWORD *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  int16x4_t v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  __int16 *v240;
  __int16 v241;
  __int16 *v242;
  __int16 v243;
  __int16 *v244;
  __int16 v245;
  uint64_t v246;
  _WORD *v247;
  __int16 v248;
  __int16 v249;
  __int16 v250;
  __int16 *v251;
  unsigned int *v252;
  void *v253;
  float *v254;
  uint64_t v255;
  float64x2_t v256;
  uint64_t v257;
  uint64_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  const __int16 *v264;
  float *v265;
  uint64_t v266;
  float64x2_t v267;
  int32x4_t v268;
  int64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  int32x4_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  int32x4_t v276;
  float64x2_t v277;
  int32x4_t v278;
  float64x2_t v279;
  int32x4_t v280;
  float64x2_t v281;
  float *v282;
  float *v283;
  uint64_t v284;
  int16x4_t *v285;
  __int16 *v286;
  int64x2_t v287;
  int16x4_t v288;
  float *v289;
  uint64_t v290;
  double v291;
  uint64_t v292;
  const __int16 *v293;
  float *v294;
  uint64_t v295;
  double v296;
  int32x4_t v297;
  int64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  int32x4_t v301;
  float64x2_t v302;
  float64x2_t v303;
  int32x4_t v304;
  float64x2_t v305;
  float *v306;
  float *v307;
  uint64_t v308;
  float32x2_t *v309;
  __int16 *v310;
  double v311;
  int64x2_t v312;
  uint64_t __n;
  size_t v314;
  char v315;
  float **v316;
  float64x2_t v317;
  uint64_t v318;
  uint64_t v320;
  uint64_t __len;
  char *v323;
  void *v324;
  _DWORD *v325;
  char *v326;
  char *v327;
  void *v328;
  int v329;
  unsigned int *v330;
  _DWORD *v332;
  uint64_t v334;
  char *v335;
  __int16 *v336;
  int v338;
  int v339;
  int v340;
  void *v342;
  _DWORD *v344;
  char *v345;
  int32x2_t v346;
  uint64_t v347;
  uint64_t v348;
  int16x8x2_t v349;
  float32x4x2_t v350;
  float32x4x2_t v351;
  int16x8x3_t v352;
  float32x4x3_t v353;
  float32x4x3_t v354;

  *(_OWORD *)(a11 + 116) = 0u;
  *(_OWORD *)(a11 + 104) = 0u;
  *(_OWORD *)(a11 + 88) = 0u;
  v12 = *(unsigned int **)(a11 + 16);
  v13 = *(int **)(a11 + 40);
  v14 = *(__int32 **)a11;
  v15 = **(_DWORD **)a11;
  *(_DWORD *)(a11 + 88) = 32;
  v16 = *(_QWORD *)(v14 + 5);
  v17 = *(float64x2_t *)(v14 + 1);
  *(_DWORD *)(a11 + 88) = 224;
  v18 = *(float32x2_t *)(v14 + 7);
  v19 = *((float *)v14 + 9);
  *(_DWORD *)(a11 + 88) = 320;
  v20 = *((unsigned __int8 *)v14 + 40);
  *(_DWORD *)(a11 + 88) = 328;
  *a4 = *(__int32 *)((char *)v14 + 41);
  v21 = *(_DWORD *)(a11 + 88);
  v22 = v21 + 32;
  *(_DWORD *)(a11 + 88) = v21 + 32;
  v23 = *(__int32 **)a11;
  if (v21 < -32)
    v22 = v21 + 39;
  v24 = *(unsigned int *)((char *)v23 + (v22 >> 3));
  v25 = v21 + 64;
  *(_DWORD *)(a11 + 88) = v21 + 64;
  if (v21 < -64)
    v25 = v21 + 71;
  v26 = (char *)*(unsigned int *)((char *)v23 + (v25 >> 3));
  v27 = v21 + 96;
  *(_DWORD *)(a11 + 88) = v21 + 96;
  if (v21 < -96)
    v27 = v21 + 103;
  v28 = *((unsigned __int8 *)v23 + (v27 >> 3));
  v29 = v21 + 104;
  *(_DWORD *)(a11 + 88) = v21 + 104;
  if (v21 < -104)
    v29 = v21 + 111;
  v30 = *(unsigned int *)((char *)v23 + (v29 >> 3));
  v31 = v21 + 136;
  *(_DWORD *)(a11 + 88) = v21 + 136;
  if (v21 < -136)
    v31 = v21 + 143;
  v32 = *(__int32 *)((char *)v23 + (v31 >> 3));
  *(_DWORD *)(a11 + 88) = v21 + 168;
  result = 1;
  if ((v15 & 0x80000000) == 0)
  {
    if (v20)
    {
      if ((v24 & 0x80000000) == 0 && (v26 & 0x80000000) == 0)
      {
        if (v28)
        {
          if ((v32 & 0x80000000) == 0)
          {
            v34 = *v13;
            *a10 = v34;
            if ((v34 & 0x80000000) == 0)
            {
              v335 = v26;
              v329 = v28;
              v338 = v32;
              v316 = a1;
              v317 = v17;
              v318 = v16;
              v315 = v20;
              v35.i32[0] = 0;
              v35.i32[1] = v15;
              v346 = vadd_s32(v35, (int32x2_t)0xFFFFFFE000000020);
              v36 = 3 * v34;
              v37 = 12 * v34;
              v38 = (int *)malloc_type_malloc(12 * v34, 0x100004052888210uLL);
              v39 = malloc_type_malloc(v37, 0x100004052888210uLL);
              memset(v38, 255, v37);
              memset(v39, 255, v37);
              v40 = v346.i32[0];
              v41 = v346.u32[1];
              if (v346.i32[1] >= 0x80u)
              {
                do
                {
                  v55 = *(unsigned int *)((char *)v13 + v40 / 8);
                  v56 = v40 + 32;
                  if (v40 + 32 < 0)
                    v56 = v40 + 39;
                  v57 = *(unsigned int *)((char *)v13 + (v56 >> 3));
                  if ((v55 & 0x80000000) == 0)
                    v38[v55] = v57;
                  if ((v57 & 0x80000000) == 0)
                    v38[v57] = v55;
                  v41 -= 64;
                  v40 += 64;
                }
                while (v41 > 0x7F);
              }
              v42 = 0;
              v43 = 0;
              v44 = *(int *)((char *)v13 + v40 / 8);
              *a2 = v44;
              v45 = v40 + 39;
              if (v40 + 32 >= 0)
                v45 = v40 + 32;
              if ((v44 & 0x80000000) != 0 || (v46 = *(int *)((char *)v13 + (v45 >> 3)), v46 < 0))
              {
                v47 = v38;
                v49 = v39;
                goto LABEL_52;
              }
              v47 = malloc_type_calloc(*a10, 4uLL, 0x100004052888210uLL);
              v48 = malloc_type_malloc(v36, 0x100004077774924uLL);
              v49 = v48;
              v50 = *a10;
              if (v46)
                v51 = 1;
              else
                v51 = v50 < 1;
              if (v51)
              {
                v52 = 0;
                if (v50 > 0)
                  goto LABEL_40;
              }
              else
              {
                *v48 = 80;
                v52 = 1;
                if (*a10 > 1)
                {
LABEL_40:
                  v58 = 0;
                  v59 = 0;
                  v60 = v52;
                  do
                  {
                    if (v58 <= 0)
                    {
                      v61 = *v12++;
                      v59 |= (unint64_t)bswap32(v61) << (32 - v58);
                      v58 += 32;
                    }
                    v62 = v59;
                    v59 *= 2;
                    if (v62 < 0)
                    {
                      if (v58 <= 2)
                        v59 |= (unint64_t)bswap32(*v12) << (33 - v58);
                      __asm { BR              X3 }
                    }
                    v49[v60] = 67;
                    --v58;
                    v52 = ++v60;
                  }
                  while (v60 < *a10);
                }
              }
              v53 = *a2;
              if (v52 < 1)
                v54 = 0;
              else
                v54 = malloc_type_malloc(12 * v52, 0x100004052888210uLL);
              free(v54);
              if (v53)
              {
                free(v38);
                free(v39);
                v43 = 0;
                v42 = 0;
              }
              else
              {
                *a5 = (uint64_t)v39;
                v42 = 1;
                v43 = v38;
              }
LABEL_52:
              free(v47);
              free(v49);
              if (!v42)
                return 1;
              v63 = malloc_type_calloc(*a10, 4uLL, 0x100004052888210uLL);
              v64 = v63;
              *a8 = v63;
              v65 = *(_QWORD *)(a11 + 24);
              if ((_DWORD)v24)
              {
                v66 = 0;
                v67 = 0;
                v68 = v63;
                v69 = *(unsigned int **)(a11 + 24);
                v70 = a5;
                do
                {
                  if (v67 <= 0)
                  {
                    v72 = *v69++;
                    v66 |= (unint64_t)bswap32(v72) << 32;
                    v67 = 32;
                  }
                  v71 = v66 >> 63;
                  --v67;
                  v66 *= 2;
                  *v68++ = v71;
                  --v24;
                }
                while (v24);
              }
              else
              {
                v67 = 0;
                v69 = *(unsigned int **)(a11 + 24);
                v70 = a5;
              }
              *(_DWORD *)(a11 + 100) = *(_DWORD *)(a11 + 100) - v67 + 8 * ((_DWORD)v69 - v65);
              v73 = *a10;
              v74 = malloc_type_calloc(v73, 4uLL, 0x100004052888210uLL);
              v75 = v74;
              if ((int)v73 >= 1)
              {
                v76 = 0;
                v77 = 0;
                v78 = v74;
                while (1)
                {
                  if (*v78)
                    goto LABEL_64;
                  LODWORD(v79) = v76;
                  if (v43[v76] == -1)
                    goto LABEL_71;
                  if (v43[v76 + 1] == -1)
                    break;
                  v79 = v76 + 2;
                  if (v43[v79] == -1)
                    goto LABEL_71;
                  v80 = 0;
LABEL_63:
                  *v78 = v80;
LABEL_64:
                  v76 += 3;
                  ++v78;
                  if (3 * v73 == v76)
                    goto LABEL_73;
                }
                LODWORD(v79) = v76 + 1;
LABEL_71:
                v81 = v77 + 1;
                v80 = v64[v77];
                if (v80)
                {
                  v82 = 1431655766 * v43[3 * (v79 / 3) + ((int)v79 + 2) % 3u];
                  *((_DWORD *)v74 + (int)(HIDWORD(v82) + (v82 >> 63))) = v80;
                }
                v77 = v81;
                goto LABEL_63;
              }
LABEL_73:
              memcpy(v64, v74, 4 * v73);
              free(v75);
              v83 = (unsigned int *)malloc_type_calloc(*a10, 4uLL, 0x100004052888210uLL);
              *a7 = v83;
              v84 = *(_QWORD *)(a11 + 32);
              if ((int)v335 < 1)
              {
                v86 = 0;
                v89 = *(unsigned int **)(a11 + 32);
              }
              else
              {
                v85 = 0;
                v86 = 0;
                v87 = v83;
                v88 = v335;
                v89 = *(unsigned int **)(a11 + 32);
                do
                {
                  if (v86 < v329)
                  {
                    v91 = *v89++;
                    v85 |= (unint64_t)bswap32(v91) << (32 - v86);
                    v86 += 32;
                  }
                  v90 = v85 >> (64 - v329);
                  v86 -= v329;
                  v85 <<= v329;
                  *v87++ = v90;
                  --v88;
                }
                while (v88);
              }
              *(_DWORD *)(a11 + 104) = *(_DWORD *)(a11 + 104) - v86 + 8 * ((_DWORD)v89 - v84);
              if ((_DWORD)v335 != 1)
                goto LABEL_89;
              v92 = *a10;
              if ((int)v92 <= 1)
                goto LABEL_89;
              v93 = *v83;
              if (v92 >= 9)
              {
                v95 = (v92 - 1) & 0xFFFFFFFFFFFFFFF8;
                v96 = vdupq_n_s32(v93);
                v97 = (int32x4_t *)(v83 + 5);
                v98 = v95;
                do
                {
                  v97[-1] = v96;
                  *v97 = v96;
                  v97 += 2;
                  v98 -= 8;
                }
                while (v98);
                if (v92 - 1 == v95)
                  goto LABEL_89;
                v94 = v95 | 1;
              }
              else
              {
                v94 = 1;
              }
              v99 = v92 - v94;
              v100 = &v83[v94];
              do
              {
                *v100++ = v93;
                --v99;
              }
              while (v99);
LABEL_89:
              v101 = malloc_type_calloc((int)*a2, 4uLL, 0x100004052888210uLL);
              v102 = v101;
              *a9 = v101;
              v103 = *(_QWORD *)(a11 + 72);
              if ((int)v30 < 1)
              {
                v105 = 0;
                v107 = *(unsigned int **)(a11 + 72);
              }
              else
              {
                v104 = 0;
                v105 = 0;
                v106 = v101;
                v107 = *(unsigned int **)(a11 + 72);
                do
                {
                  if (v105 <= 0)
                  {
                    v109 = *v107++;
                    v104 |= (unint64_t)bswap32(v109) << 32;
                    v105 = 32;
                  }
                  v108 = v104 >> 63;
                  --v105;
                  v104 *= 2;
                  *v106++ = v108;
                  --v30;
                }
                while (v30);
              }
              *(_DWORD *)(a11 + 124) = *(_DWORD *)(a11 + 124) - v105 + 8 * ((_DWORD)v107 - v103);
              v110 = (int)*a2;
              v111 = *a10;
              v112 = *v70;
              v113 = malloc_type_calloc(v110, 4uLL, 0x100004052888210uLL);
              v114 = malloc_type_calloc(v110, 4uLL, 0x100004052888210uLL);
              v115 = v114;
              if (v111 >= 1)
              {
                v116 = 0;
                LODWORD(v117) = 3 * v111;
                if (3 * v111 <= 1)
                  v117 = 1;
                else
                  v117 = v117;
                do
                {
                  while (v43[v116] == -1)
                  {
                    v118 = 3 * (v116 / 3);
                    *((_DWORD *)v114 + *(int *)(v112 + 4 * (int)(v118 + ((int)v116++ + 2) % 3u))) = 1;
                    *((_DWORD *)v114 + *(int *)(v112 + 4 * (int)(v118 + v116 % 3))) = 1;
                    if (v116 == v117)
                      goto LABEL_102;
                  }
                  ++v116;
                }
                while (v116 != v117);
              }
LABEL_102:
              if ((int)v110 >= 1)
              {
                v119 = 0;
                v120 = v110;
                v121 = v114;
                v122 = v113;
                do
                {
                  if (*v121++)
                  {
                    v124 = v102[v119++];
                    *v122 = v124;
                  }
                  ++v122;
                  --v120;
                }
                while (v120);
              }
              memcpy(v102, v113, 4 * v110);
              free(v113);
              free(v115);
              v125 = malloc_type_malloc(4 * (int)*a2, 0x100004052888210uLL);
              v126 = *a2;
              v127 = *(_QWORD *)(a11 + 64);
              v325 = v125;
              if ((int)v126 < 1)
              {
                v129 = 0;
                LODWORD(v131) = *(_QWORD *)(a11 + 64);
                v132 = a5;
              }
              else
              {
                v128 = 0;
                v129 = 0;
                v130 = v125;
                v131 = *(unsigned int **)(a11 + 64);
                v132 = a5;
                do
                {
                  if (v129 <= 0)
                  {
                    v134 = *v131++;
                    v128 |= (unint64_t)bswap32(v134) << 32;
                    v129 = 32;
                  }
                  v133 = v128 >> 63;
                  --v129;
                  v128 *= 2;
                  *v130++ = v133;
                  --v126;
                }
                while (v126);
              }
              *(_DWORD *)(a11 + 120) = *(_DWORD *)(a11 + 120) - v129 + 8 * ((_DWORD)v131 - v127);
              v135 = malloc_type_calloc(v338, 4uLL, 0x100004052888210uLL);
              v136 = *(_QWORD *)(a11 + 8);
              if (v338 < 1)
              {
                v138 = 0;
                v141 = *(unsigned int **)(a11 + 8);
                v142 = a6;
              }
              else
              {
                v137 = 0;
                v138 = 0;
                v139 = v338;
                v140 = v135;
                v141 = *(unsigned int **)(a11 + 8);
                v142 = a6;
                do
                {
                  if (v138 <= 0)
                  {
                    v144 = *v141++;
                    v137 |= (unint64_t)bswap32(v144) << 32;
                    v138 = 32;
                  }
                  v143 = v137 >> 63;
                  --v138;
                  v137 *= 2;
                  *v140++ = v143;
                  --v139;
                }
                while (v139);
              }
              *(_DWORD *)(a11 + 92) = *(_DWORD *)(a11 + 92) - v138 + 8 * ((_DWORD)v141 - v136);
              v327 = *(char **)(a11 + 56);
              v334 = *(_QWORD *)(a11 + 48);
              v332 = v135;
              v336 = (__int16 *)malloc_type_calloc((int)*a4, 4uLL, 0x100004052888210uLL);
              v145 = malloc_type_malloc(12 * *a10, 0x100004052888210uLL);
              *v142 = v145;
              v146 = *v132;
              v147 = *a10;
              v148 = (int)*a2;
              v330 = *a7;
              v328 = malloc_type_calloc(v148, 4uLL, 0x100004052888210uLL);
              v149 = malloc_type_malloc(4 * v148, 0x100004052888210uLL);
              __len = 4 * v148;
              memset(v149, 255, 4 * v148);
              v150 = malloc_type_calloc(v147, 4uLL, 0x100004052888210uLL);
              v151 = malloc_type_malloc(12 * v147, 0x100004052888210uLL);
              v152 = (char *)malloc_type_malloc(12 * v147, 0x100004052888210uLL);
              v314 = v148;
              v326 = (char *)malloc_type_calloc(v148, 6uLL, 0x1000040274DC3F3uLL);
              __n = 4 * v147;
              v153 = (char *)malloc_type_malloc(4 * v147, 0x100004052888210uLL);
              v158 = v151;
              v160 = v328;
              v159 = v330;
              v161 = v149;
              v162 = v332;
              v345 = v153;
              v163 = v147;
              v164 = 0;
              v165 = 0;
              v166 = 0;
              v167 = 0;
              *a4 = 0;
              v323 = v152 - 4;
              v324 = v152;
              v168 = v325;
              v342 = v161;
              v344 = v158;
              if ((int)v147 > 0)
              {
LABEL_120:
                v169 = (int)v167;
                do
                {
                  if (!v150[v169])
                  {
                    v167 = v169;
                    goto LABEL_125;
                  }
                  ++v169;
                }
                while (v163 != v169);
LABEL_156:
                v252 = v159;
                v253 = v158;
                memcpy(v327, v326, 6 * v314);
                memcpy(v252, v345, __n);
                free(v160);
                free(v161);
                free(v150);
                free(v253);
                free(v324);
                free(v326);
                free(v345);
                v254 = (float *)malloc_type_malloc(12 * (int)*a2, 0x10000403E1C8BA9uLL);
                *v316 = v254;
                v255 = *a2;
                if ((int)v255 >= 1)
                {
                  v256 = vcvtq_f64_f32(v18);
                  *(double *)&v257 = v19;
                  if (v255 < 8)
                  {
                    v258 = 0;
LABEL_162:
                    v284 = v255 - v258;
                    v285 = (int16x4_t *)&v254[3 * v258 + 2];
                    v286 = (__int16 *)&v327[6 * v258 + 4];
                    do
                    {
                      v287.i64[0] = *(v286 - 2);
                      v287.i64[1] = *(v286 - 1);
                      v288 = (int16x4_t)vcvt_f32_f64(vmlaq_f64(v256, vcvtq_f64_s64(v287), v317));
                      v285[-1] = v288;
                      v288.i16[0] = *v286;
                      *(float *)v288.i32 = *(double *)&v257 + *(double *)&v318 * (double)vmovl_s16(v288).i32[0];
                      v285->i32[0] = v288.i32[0];
                      v285 = (int16x4_t *)((char *)v285 + 12);
                      v286 += 3;
                      --v284;
                    }
                    while (v284);
                    goto LABEL_164;
                  }
                  v259 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v317.f64[0], 0);
                  v260 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v256.f64[0], 0);
                  v261 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v317, 1);
                  v262 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v256, 1);
                  v263 = (float64x2_t)vdupq_lane_s64(v318, 0);
                  v258 = v255 & 0xFFFFFFF8;
                  v264 = (const __int16 *)v327;
                  v265 = v254;
                  v266 = v258;
                  v267 = (float64x2_t)vdupq_lane_s64(v257, 0);
                  do
                  {
                    v352 = vld3q_s16(v264);
                    v264 += 24;
                    v268 = vmovl_high_s16(v352.val[0]);
                    v269.i64[0] = v268.i32[0];
                    v269.i64[1] = v268.i32[1];
                    v270 = vcvtq_f64_s64(v269);
                    v269.i64[0] = v268.i32[2];
                    v269.i64[1] = v268.i32[3];
                    v271 = vcvtq_f64_s64(v269);
                    v272 = vmovl_s16(*(int16x4_t *)v352.val[0].i8);
                    v269.i64[0] = v272.i32[0];
                    v269.i64[1] = v272.i32[1];
                    v273 = vcvtq_f64_s64(v269);
                    v269.i64[0] = v272.i32[2];
                    v269.i64[1] = v272.i32[3];
                    v274 = vmlaq_f64(v260, vcvtq_f64_s64(v269), v259);
                    v275 = vmlaq_f64(v260, v273, v259);
                    v353.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v260, v270, v259)), vmlaq_f64(v260, v271, v259));
                    v276 = vmovl_high_s16(v352.val[1]);
                    v269.i64[0] = v276.i32[0];
                    v269.i64[1] = v276.i32[1];
                    v277 = vcvtq_f64_s64(v269);
                    v269.i64[0] = v276.i32[2];
                    v269.i64[1] = v276.i32[3];
                    v353.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v262, v277, v261)), vmlaq_f64(v262, vcvtq_f64_s64(v269), v261));
                    v278 = vmovl_high_s16(v352.val[2]);
                    v269.i64[0] = v278.i32[0];
                    v269.i64[1] = v278.i32[1];
                    v279 = vcvtq_f64_s64(v269);
                    v269.i64[0] = v278.i32[2];
                    v269.i64[1] = v278.i32[3];
                    v353.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v267, v279, v263)), vmlaq_f64(v267, vcvtq_f64_s64(v269), v263));
                    v354.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v275), v274);
                    v280 = vmovl_s16(*(int16x4_t *)v352.val[1].i8);
                    v269.i64[0] = v280.i32[0];
                    v269.i64[1] = v280.i32[1];
                    v281 = vcvtq_f64_s64(v269);
                    v269.i64[0] = v280.i32[2];
                    v269.i64[1] = v280.i32[3];
                    v354.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v262, v281, v261)), vmlaq_f64(v262, vcvtq_f64_s64(v269), v261));
                    v352.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v352.val[2].i8);
                    v269.i64[0] = v352.val[0].i32[0];
                    v269.i64[1] = v352.val[0].i32[1];
                    v352.val[1] = (int16x8_t)vcvtq_f64_s64(v269);
                    v269.i64[0] = v352.val[0].i32[2];
                    v269.i64[1] = v352.val[0].i32[3];
                    v354.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v267, (float64x2_t)v352.val[1], v263)), vmlaq_f64(v267, vcvtq_f64_s64(v269), v263));
                    v282 = v265 + 24;
                    vst3q_f32(v265, v354);
                    v283 = v265 + 12;
                    vst3q_f32(v283, v353);
                    v265 = v282;
                    v266 -= 8;
                  }
                  while (v266);
                  if (v258 != v255)
                    goto LABEL_162;
                }
LABEL_164:
                v289 = (float *)malloc_type_malloc(8 * (int)*a4, 0x100004000313F17uLL);
                *a3 = v289;
                v290 = *a4;
                if ((int)v290 >= 1)
                {
                  v291 = (double)~(-1 << v315);
                  if (v290 >= 8)
                  {
                    v292 = v290 & 0xFFFFFFF8;
                    v293 = v336;
                    v294 = v289;
                    v295 = v292;
                    v296 = 1.0 / v291;
                    do
                    {
                      v349 = vld2q_s16(v293);
                      v293 += 16;
                      v297 = vmovl_high_s16(v349.val[0]);
                      v298.i64[0] = v297.i32[0];
                      v298.i64[1] = v297.i32[1];
                      v299 = vcvtq_f64_s64(v298);
                      v298.i64[0] = v297.i32[2];
                      v298.i64[1] = v297.i32[3];
                      v300 = vcvtq_f64_s64(v298);
                      v301 = vmovl_s16(*(int16x4_t *)v349.val[0].i8);
                      v298.i64[0] = v301.i32[0];
                      v298.i64[1] = v301.i32[1];
                      v302 = vcvtq_f64_s64(v298);
                      v298.i64[0] = v301.i32[2];
                      v298.i64[1] = v301.i32[3];
                      v303 = vmulq_n_f64(vcvtq_f64_s64(v298), v296);
                      v351.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v299, v296)), vmulq_n_f64(v300, v296));
                      v304 = vmovl_high_s16(v349.val[1]);
                      v298.i64[0] = v304.i32[0];
                      v298.i64[1] = v304.i32[1];
                      v305 = vcvtq_f64_s64(v298);
                      v298.i64[0] = v304.i32[2];
                      v298.i64[1] = v304.i32[3];
                      v351.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v305, v296)), vmulq_n_f64(vcvtq_f64_s64(v298), v296));
                      v350.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v302, v296)), v303);
                      v349.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v349.val[1].i8);
                      v298.i64[0] = v349.val[0].i32[0];
                      v298.i64[1] = v349.val[0].i32[1];
                      v349.val[1] = (int16x8_t)vcvtq_f64_s64(v298);
                      v298.i64[0] = v349.val[0].i32[2];
                      v298.i64[1] = v349.val[0].i32[3];
                      v350.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)v349.val[1], v296)), vmulq_n_f64(vcvtq_f64_s64(v298), v296));
                      v306 = v294 + 16;
                      vst2q_f32(v294, v350);
                      v307 = v294 + 8;
                      vst2q_f32(v307, v351);
                      v294 = v306;
                      v295 -= 8;
                    }
                    while (v295);
                    if (v292 == v290)
                      goto LABEL_172;
                  }
                  else
                  {
                    v292 = 0;
                  }
                  v308 = v290 - v292;
                  v309 = (float32x2_t *)&v289[2 * v292];
                  v310 = &v336[2 * v292];
                  v311 = 1.0 / v291;
                  do
                  {
                    v312.i64[0] = *v310;
                    v312.i64[1] = v310[1];
                    *v309++ = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v312), v311));
                    v310 += 2;
                    --v308;
                  }
                  while (v308);
                }
LABEL_172:
                free(v325);
                free(v332);
                free(v336);
                free(v43);
                return 0;
              }
              while (1)
              {
LABEL_125:
                if ((_DWORD)v167 == (_DWORD)v163)
                  goto LABEL_156;
                v170 = v167;
                v320 = v167;
                v171 = 3 * v167;
                *v158 = 3 * v167;
                v172 = v165;
                v173 = (v171 + 2) % 3 + v171;
                v174 = *(int *)(v146 + v173 * 4);
                v175 = 3 * (int)v167;
                v176 = *(int *)(v146 + v175 * 4);
                v177 = (v171 + 1) % 3 + v171;
                v178 = *(int *)(v146 + v177 * 4);
                v179 = &v326[6 * v174];
                v180 = &v327[6 * v174];
                v181 = *(_DWORD *)v180;
                *((_WORD *)v179 + 2) = *((_WORD *)v180 + 2);
                *(_DWORD *)v179 = v181;
                v182 = &v326[6 * v176];
                v183 = &v327[6 * v176];
                v184 = *(_DWORD *)v183;
                *((_WORD *)v182 + 2) = *((_WORD *)v183 + 2);
                *(_DWORD *)v182 = v184;
                v185 = &v326[6 * v178];
                v186 = &v327[6 * v178];
                v187 = *(_DWORD *)v186;
                *((_WORD *)v185 + 2) = *((_WORD *)v186 + 2);
                *(_DWORD *)v185 = v187;
                v188 = 1;
                *((_DWORD *)v160 + v178) = 1;
                *((_DWORD *)v160 + v176) = 1;
                *((_DWORD *)v160 + v174) = 1;
                *(_DWORD *)&v336[2 * *a4] = *(_DWORD *)(v334 + 4 * (int)*a4);
                LODWORD(v174) = (*a4)++;
                v145[v173] = v174;
                *(_DWORD *)&v336[2 * *a4] = *(_DWORD *)(v334 + 4 * (int)*a4);
                LODWORD(v174) = (*a4)++;
                v145[v175] = v174;
                *(_DWORD *)&v336[2 * *a4] = *(_DWORD *)(v334 + 4 * (int)*a4);
                LODWORD(v174) = (*a4)++;
                v145[v177] = v174;
                *((_DWORD *)v161 + *(int *)(v146 + v173 * 4)) = v145[v173];
                *((_DWORD *)v161 + *(int *)(v146 + v175 * 4)) = v145[v175];
                *((_DWORD *)v161 + *(int *)(v146 + v177 * 4)) = v145[v177];
                v189 = v170;
                v150[v189] = 1;
                v165 = v172 + 1;
                *(_DWORD *)&v345[v189 * 4] = v159[v172];
LABEL_128:
                if (v188)
                  goto LABEL_136;
                v190 = &v323[4 * v166];
                do
                {
                  v192 = *(_DWORD *)v190;
                  v190 -= 4;
                  v191 = v192;
                  v193 = v192 / 3;
                  v194 = v150[v192 / 3];
                  --v166;
                }
                while (v166 && v194);
                if (!v194)
                  break;
                v161 = v342;
LABEL_154:
                v163 = v147;
                v167 = v320;
                if ((int)v320 < (int)v147)
                  goto LABEL_120;
              }
              v347 = v193;
              v339 = v165;
              memset(v342, 255, __len);
              v160 = v328;
              v195 = *(int *)(v146 + 4 * v191);
              if (!*((_DWORD *)v328 + v195))
              {
                v196 = v43[v191];
                v197 = *(_DWORD *)(v146 + 4 * v196);
                v198 = 3 * ((int)v196 / 3);
                v199 = *(_DWORD *)(v146 + 4 * (v198 + ((int)v196 + 2) % 3));
                v200 = &v326[6 * *(int *)(v146 + 4 * (v198 + ((int)v196 + 1) % 3))];
                v201 = &v326[6 * v199];
                v202 = &v326[6 * v197];
                v203 = &v327[6 * v195];
                v154.i32[0] = *(_DWORD *)v200;
                v154.i16[2] = *((_WORD *)v200 + 2);
                v155.i32[0] = *(_DWORD *)v201;
                v155.i16[2] = *((_WORD *)v201 + 2);
                v204 = &v326[6 * v195];
                v156.i32[0] = *(_DWORD *)v202;
                v156.i16[2] = *((_WORD *)v202 + 2);
                v157.i32[0] = *(_DWORD *)v203;
                v157.i16[2] = *((_WORD *)v203 + 2);
                v205 = vadd_s16(v155, v154);
                v155 = vadd_s16(v156, v157);
                v154 = vsub_s16(v205, v155);
                *((_WORD *)v204 + 2) = v154.i16[2];
                *(_DWORD *)v204 = v154.i32[0];
                *((_DWORD *)v328 + v195) = 1;
              }
              *(_DWORD *)&v336[2 * *a4] = *(_DWORD *)(v334 + 4 * (int)*a4);
              v206 = (*a4)++;
              v207 = 3 * (int)v347 + (v191 + 2) % 3;
              v145[v207] = v206;
              *(_DWORD *)&v336[2 * *a4] = *(_DWORD *)(v334 + 4 * (int)*a4);
              v208 = (*a4)++;
              v209 = v191;
              v145[v209] = v208;
              *(_DWORD *)&v336[2 * *a4] = *(_DWORD *)(v334 + 4 * (int)*a4);
              v210 = (*a4)++;
              v211 = 3 * (int)v347 + (v191 + 1) % 3;
              v145[v211] = v210;
              v158 = v344;
              *((_DWORD *)v342 + *(int *)(v146 + v207 * 4)) = v145[v207];
              *((_DWORD *)v342 + *(int *)(v146 + v209 * 4)) = v145[v209];
              *((_DWORD *)v342 + *(int *)(v146 + v211 * 4)) = v145[v211];
              v212 = v347;
              v188 = 1;
              v150[v212] = 1;
              v159 = v330;
              v162 = v332;
              v165 = v339 + 1;
              *(_DWORD *)&v345[v212 * 4] = v330[v339];
              *v344 = v191;
              v161 = v342;
LABEL_136:
              v213 = v158[--v188];
              v340 = v165;
              v348 = v165 - 1;
              v214 = v213;
              while (1)
              {
                v219 = v43[v214];
                if ((v219 & 0x80000000) != 0)
                  goto LABEL_140;
                v220 = v219 / 3uLL;
                if (v150[v220])
                  goto LABEL_140;
                v221 = *(int *)(v146 + 4 * v219);
                v222 = 3 * (v214 / 3);
                v223 = v222 + (v214 + 2) % 3;
                v224 = v222 + (v214 + 1) % 3;
                if (!v168[*(int *)(v146 + 4 * v223)] || !v168[*(int *)(v146 + 4 * v224)])
                  break;
                v225 = (v164 + 1);
                if (!v162[(int)v164])
                  goto LABEL_148;
                v217 = v166++;
                v218 = v324;
LABEL_139:
                v218[v217] = v219;
                v164 = v225;
LABEL_140:
                v214 = 3 * (v214 / 3) + (v214 + 1) % 3;
                if (v214 == v213)
                {
                  v165 = v340;
                  if (!(v188 | v166))
                  {
                    v166 = 0;
                    goto LABEL_154;
                  }
                  goto LABEL_128;
                }
              }
              v225 = v164;
LABEL_148:
              if (!*((_DWORD *)v160 + v221))
              {
                v226 = v43[v219];
                v227 = *(_DWORD *)(v146 + 4 * v226);
                v228 = 3 * ((int)v226 / 3);
                v229 = *(_DWORD *)(v146 + 4 * (v228 + ((int)v226 + 2) % 3));
                v230 = &v326[6 * *(int *)(v146 + 4 * (v228 + ((int)v226 + 1) % 3))];
                v231 = &v326[6 * v229];
                v232 = &v326[6 * v227];
                v233 = &v327[6 * v221];
                v154.i32[0] = *(_DWORD *)v230;
                v154.i16[2] = *((_WORD *)v230 + 2);
                v155.i32[0] = *(_DWORD *)v231;
                v155.i16[2] = *((_WORD *)v231 + 2);
                v234 = &v326[6 * v221];
                v158 = v344;
                v156.i32[0] = *(_DWORD *)v232;
                v156.i16[2] = *((_WORD *)v232 + 2);
                v157.i32[0] = *(_DWORD *)v233;
                v157.i16[2] = *((_WORD *)v233 + 2);
                v235 = vadd_s16(v155, v154);
                v155 = vadd_s16(v156, v157);
                v154 = vsub_s16(v235, v155);
                *((_WORD *)v234 + 2) = v154.i16[2];
                *(_DWORD *)v234 = v154.i32[0];
                *((_DWORD *)v160 + v221) = 1;
              }
              v236 = *((_DWORD *)v161 + v221);
              if (v236 == -1)
              {
                v237 = v43[v219];
                v238 = 3 * ((int)v237 / 3);
                v239 = *(int *)(v146 + 4 * v219);
                v240 = &v336[2 * v145[v238 + ((int)v237 + 1) % 3]];
                v241 = *v240;
                v242 = &v336[2 * v145[v238 + ((int)v237 + 2) % 3]];
                v243 = *v242;
                v244 = &v336[2 * v145[v237]];
                v245 = *v244;
                LOWORD(v240) = v240[1];
                LOWORD(v242) = v242[1];
                LOWORD(v244) = v244[1];
                v246 = (int)*a4;
                v247 = (_WORD *)(v334 + 4 * v246);
                v248 = v243 + v241;
                v249 = v245 + *v247;
                v162 = v332;
                v250 = v248 - v249;
                v251 = &v336[2 * v246];
                v161 = v342;
                *v251 = v250;
                v251[1] = (_WORD)v242 + (_WORD)v240 - ((_WORD)v244 + v247[1]);
                v145[v219] = v246;
                v160 = v328;
                v159 = v330;
                ++*a4;
                v168 = v325;
                *((_DWORD *)v342 + v239) = v145[v219];
                v158 = v344;
              }
              else
              {
                v145[v219] = v236;
              }
              v215 = 3 * v220;
              v145[v215 + ((int)v219 + 2) % 3u] = v145[v224];
              v145[v215 + ((int)v219 + 1) % 3u] = v145[v223];
              v216 = v220;
              v150[v216] = 1;
              *(_DWORD *)&v345[v216 * 4] = v159[v348];
              v217 = v188++;
              v218 = v158;
              goto LABEL_139;
            }
          }
        }
      }
    }
  }
  return result;
}

void ppred_decompress_free(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  free(a1);
  free(a2);
  free(a3);
  free(a4);
  free(a5);
  free(a6);
  free(a7);
}

void ggl::MeshTyped<ggl::Draping::FoundationVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Draping::FoundationVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::LoadingStatusLogic::~LoadingStatusLogic(md::LoadingStatusLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

void md::LoadingStatusLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[7];
  int v8;
  _QWORD v9[7];
  int v10;
  char v11[32];

  strcpy((char *)a2, "LoadingStatusLogic");
  *(_WORD *)(a2 + 23) = 18;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v4 = *(unsigned __int8 *)(a1 + 128);
  v11[23] = 21;
  strcpy(v11, "skipFullyLoadedReport");
  v10 = 0;
  memset(&v9[4], 0, 24);
  v9[0] = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v11, (uint64_t)v9);
  if (!*(_BYTE *)(a1 + 128))
  {
    v11[23] = 11;
    strcpy(v11, "sceneStatus");
    v5 = *(_QWORD *)(a1 + 120);
    if (*(_BYTE *)(v5 + 88))
      v6 = *(unsigned __int8 *)(v5 + 89);
    else
      v6 = 0;
    v8 = 0;
    memset(&v7[4], 0, 24);
    v7[0] = v6;
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v11, (uint64_t)v7);
  }
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_QWORD *)(a3 + 8) == 0x90B6813830DCB581 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LoadAllLayers", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void ___ZN2md18LoadingStatusLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_12SceneContextEEEENS6_IJNS_25IdentifiedResourceContextEEEEEE20ResolvedDependenciesERNS_20LoadingStatusContextE_block_invoke_1(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LoadRequiredLayers", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEF60;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEF18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEF18;
  a2[1] = v2;
  return result;
}

uint64_t md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(uint64_t a1, unint64_t a2)
{
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 0;
  v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x99BED48DEFBBD82BLL;
    if (a2 <= 0x99BED48DEFBBD82BLL)
      v3 = 0x99BED48DEFBBD82BLL % a2;
  }
  else
  {
    v3 = (a2 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v5 = *(_QWORD **)(a1 + 8 * v3);
  if (!v5)
    goto LABEL_25;
  v6 = (_QWORD *)*v5;
  if (!v6)
    goto LABEL_25;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v8 = v6[1];
      if (v8 == 0x99BED48DEFBBD82BLL)
      {
        if (v6[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_23;
      }
      else if ((v8 & (a2 - 1)) != v3)
      {
        goto LABEL_25;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v7 = v6[1];
    if (v7 == 0x99BED48DEFBBD82BLL)
      break;
    if (v7 >= a2)
      v7 %= a2;
    if (v7 != v3)
      goto LABEL_25;
LABEL_12:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_25;
  }
  if (v6[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_12;
LABEL_23:
  v9 = v6[5];
  if (*(_QWORD *)(v9 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
LABEL_26:
  if (v2.u32[0] > 1uLL)
  {
    v11 = 0x12B1E486D3040E2CLL;
    if (a2 <= 0x12B1E486D3040E2CLL)
      v11 = 0x12B1E486D3040E2CLL % a2;
  }
  else
  {
    v11 = (a2 - 1) & 0x12B1E486D3040E2CLL;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return v10;
  v13 = (_QWORD *)*v12;
  if (!v13)
    return v10;
  if (v2.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x12B1E486D3040E2CLL)
      {
        if (v13[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_46;
      }
      else if ((v15 & (a2 - 1)) != v11)
      {
        return v10;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
    }
  }
  while (2)
  {
    v14 = v13[1];
    if (v14 != 0x12B1E486D3040E2CLL)
    {
      if (v14 >= a2)
        v14 %= a2;
      if (v14 != v11)
        return v10;
      goto LABEL_35;
    }
    if (v13[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_35:
      v13 = (_QWORD *)*v13;
      if (!v13)
        return v10;
      continue;
    }
    break;
  }
LABEL_46:
  if (*(_QWORD *)(v13[5] + 8) == 0x12B1E486D3040E2CLL)
    return v10;
  return v10;
}

_QWORD *gdc::ManagedObjectHolder<md::LoadingStatusContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1018;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::LoadingStatusContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1018;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LoadingStatusContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::realistic::TrafficRenderLayer::~TrafficRenderLayer(md::realistic::TrafficRenderLayer *this)
{
  md::realistic::TrafficRenderLayer::~TrafficRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;

  *(_QWORD *)this = &off_1E42B0130;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 7) = 0;
  }
  v3 = *((_QWORD *)this + 9);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v8)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11)
      goto LABEL_23;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_23:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v14)
    goto LABEL_27;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v17)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v17)
      goto LABEL_33;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_33:
  *(_QWORD *)this = off_1E428C468;
  v20 = (void *)*((_QWORD *)this + 1);
  if (v20)
  {
    *((_QWORD *)this + 2) = v20;
    operator delete(v20);
  }
}

uint64_t *md::realistic::TrafficRenderLayer::layout(md::realistic::TrafficRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *result;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_count v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  uint64_t v48;
  unsigned __int8 v49;
  std::__shared_weak_count_vtbl *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *shared_owners;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count_vtbl *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t shared_weak_owners;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  geo::read_write_lock *v104;
  const char *v105;
  malloc_zone_t *zone;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  _QWORD *v113;
  uint64_t v114[2];
  uint64_t v115;
  std::__shared_weak_count *v116;

  v4 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = *(unsigned int *)(v4[17] + 88);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 92) + 16);
  v7 = *(_QWORD *)(v4[5] + 32);
  if (!*(_BYTE *)(v7 + 32) || *(_QWORD *)(v7 + 304) == *(_QWORD *)(v7 + 296))
  {
    v9 = (unsigned __int8 *)v4[18];
    v8 = v9[8];
    if (v8 >= v9[9])
    {
      LOBYTE(v8) = 1;
      v9[8] = 1;
      v9[9] = v9[10];
    }
    v9[8] = v8 + 1;
  }
  else
  {
    LOBYTE(v8) = *(_BYTE *)(v6 + 1289);
  }
  v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 376)), *(float64x2_t *)(v6 + 392));
  v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 408)), *(float64x2_t *)(v6 + 424));
  v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 440)), *(float64x2_t *)(v6 + 456));
  v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 472)), *(float64x2_t *)(v6 + 488));
  v14 = (_QWORD *)*((_QWORD *)this + 14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = v14[1];
  v19 = (float32x4_t *)v14[9];
  *v19 = v10;
  v19[1] = v11;
  v19[2] = v12;
  v19[3] = v13;
  if (v14[8] > v18)
    v18 = v14[8];
  v14[7] = 0;
  v14[8] = v18;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 8) + 55) = v8;
  *(_BYTE *)(*((_QWORD *)this + 9) + 55) = v8;
  v22 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18));
  v23 = *v22;
  v24 = v22[1];
  while (v23 != v24)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v23 + 344);
    if (v25)
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v25 + 80))(v25, a2, v6, *(_QWORD *)(*((_QWORD *)a2 + 92) + 24), v5, 0);
    v23 += 8;
  }
  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18));
  v29 = *result;
  v30 = result[1];
  while (v29 != v30)
  {
    result = *(uint64_t **)(*(_QWORD *)v29 + 344);
    if (result)
      result = altitude::TrafficTileComponent::collectRenderItems(result, v28, v27, *(_QWORD *)(*((_QWORD *)this + 5) + 24), v5, 4, *(_QWORD *)(*((_QWORD *)this + 5) + 120));
    v29 += 8;
  }
  if (*((_BYTE *)this + 178))
  {
    v31 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
    v32 = v31[3];
    v33 = v31[4];
    v34 = v33 - v32;
    if (v33 == v32)
      goto LABEL_36;
    v35 = 0;
    v36 = v34 >> 3;
    while (1)
    {
      v37 = *(unsigned __int8 **)(v32 + 8 * v35);
      if (*v37 == *((unsigned __int8 *)this + 176))
      {
        v38 = *((_QWORD *)v37 + 1);
        v39 = v31[15];
        if (v38 < (v31[16] - v39) >> 3)
          break;
      }
      if (++v35 >= v36)
        goto LABEL_36;
    }
    v40 = *(_QWORD *)(v39 + 8 * v38);
    if (!v40)
    {
LABEL_36:
      v41 = 0;
      v42 = *((_QWORD *)this + 7);
      if (!v42)
        goto LABEL_37;
    }
    else
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8 * *((unsigned __int8 *)this + 177));
      v42 = *((_QWORD *)this + 7);
      if (!v42)
      {
LABEL_37:
        v43 = operator new();
        *(_BYTE *)(v43 + 31) = 19;
        *(_QWORD *)v43 = &off_1E42C4580;
        strcpy((char *)(v43 + 8), "/road/element/clear");
        *(_QWORD *)(v43 + 32) = 0;
        *(_BYTE *)(v43 + 40) = 1;
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)(v43 + 64) = 0u;
        *(_OWORD *)(v43 + 80) = 0u;
        *(_OWORD *)(v43 + 96) = 0u;
        *(_QWORD *)(v43 + 112) = 0;
        *(_BYTE *)(v43 + 120) = 1;
        *(_QWORD *)(v43 + 128) = 0;
        *(_QWORD *)(v43 + 136) = 0;
        *((_QWORD *)this + 7) = v43;
        v44 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v45 = (std::__shared_count)0;
        v46 = v44;
        v44->__shared_owners_ = 0;
        v47 = (unint64_t *)&v44->__shared_owners_;
        v44->__shared_weak_owners_ = 0;
        v44->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
        v44[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v48 = (uint64_t)&v44[1];
        v44[1].__shared_owners_ = 8;
        LODWORD(v44[1].__shared_weak_owners_) = 6;
        v44[2].std::__shared_count = 0u;
        *(_OWORD *)&v44[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v44[3].__shared_owners_ = 0u;
        v44[4].std::__shared_count = 0u;
        v44[4].__shared_weak_owners_ = 0;
        v110 = v44;
        if ((v49 & 1) == 0)
        {
          v45 = (std::__shared_count)0;
          if (v102)
          {
            v103 = operator new();
            *(_QWORD *)(v103 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v103 + 24) = "GeoGL";
            *(_OWORD *)(v103 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v103 = &off_1E42B5668;
            *(_QWORD *)(v103 + 8) = "GeoGL";
            *(_OWORD *)(v103 + 72) = 0u;
            *(_OWORD *)(v103 + 88) = 0u;
            *(_OWORD *)(v103 + 104) = 0u;
            *(_OWORD *)(v103 + 120) = 0u;
            *(_OWORD *)(v103 + 136) = 0u;
            *(_OWORD *)(v103 + 152) = 0u;
            *(_OWORD *)(v103 + 168) = 0u;
            *(_OWORD *)(v103 + 184) = 0u;
            *(_OWORD *)(v103 + 200) = 0u;
            *(_OWORD *)(v103 + 216) = 0u;
            *(_OWORD *)(v103 + 232) = 0u;
            *(_QWORD *)(v103 + 248) = 0;
            *(_OWORD *)(v103 + 56) = 0u;
            v104 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v103 + 56), 0);
            if ((_DWORD)v104)
              geo::read_write_lock::logFailure(v104, (uint64_t)"initialization", v105);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v103 + 48) = zone;
            malloc_set_zone_name(zone, "GeoGL");
            *(_QWORD *)(v103 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v103;
            v46 = v110;
            v45 = (std::__shared_count)0;
          }
        }
        v50 = v46[4].__vftable;
        v46[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v46[5].__shared_owners_ = 0;
        *((std::__shared_count *)v46 + 11) = v45;
        v46[8].std::__shared_count = v45;
        v46[8].__shared_weak_owners_ = 0;
        v46[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        v46[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        *((std::__shared_count *)v46 + 10) = v45;
        LODWORD(v46[5].__shared_weak_owners_) = 0;
        v46[9].__shared_weak_owners_ = (uint64_t)"/traffic/element/clear/vdata";
        v46[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
        v46[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B74E0;
        v51 = 4 * v46[1].__shared_owners_;
        v52 = v46[4].__shared_owners_ - (_QWORD)v50;
        v46[9].__shared_owners_ = (uint64_t)&unk_1E42B7500;
        if (v51 != v52)
        {
          if (v51 <= v52)
          {
            if (v51 < v52)
              v46[4].__shared_owners_ = (uint64_t)v50 + v51;
          }
          else
          {
            std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)&v46[4], v51 - v52);
          }
          shared_owners = (std::__shared_weak_count *)v46[2].__shared_owners_;
          v46[2].__vftable = 0;
          v46[2].__shared_owners_ = 0;
          if (shared_owners)
          {
            v54 = (unint64_t *)&shared_owners->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
              std::__shared_weak_count::__release_weak(shared_owners);
            }
          }
          v46[6].__vftable = 0;
          LODWORD(v46[5].__shared_weak_owners_) = 0;
          v50 = v46[4].__vftable;
          v56 = (std::__shared_weak_count_vtbl *)(v46[4].__shared_owners_ - (_QWORD)v50);
          v46[2].__shared_weak_owners_ = 0;
          v46[3].__vftable = v56;
          v46[3].__shared_owners_ = 0;
          v46[3].__shared_weak_owners_ = (uint64_t)v56;
          v51 = 4 * v46[1].__shared_owners_;
        }
        v111 = v51;
        if (!v51)
          v50 = 0;
        *(_OWORD *)&v50->~__shared_weak_count = xmmword_19FFB33E0;
        *(_OWORD *)&v50->__on_zero_shared = xmmword_19FFB33F0;
        v57 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v57->__shared_owners_ = 0;
        v58 = (unint64_t *)&v57->__shared_owners_;
        v57->__shared_weak_owners_ = 0;
        v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        ggl::BufferData::BufferData((uint64_t)&v57[1], 2, 1, 0, 6, 6);
        LODWORD(v57[10].__vftable) = 0;
        v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v57[1].__shared_owners_ = 2;
        v57[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v57[9].__shared_weak_owners_ = (uint64_t)"/traffic/element/clear/idata";
        v59 = v57[4].__vftable;
        v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x2000200010000;
        LODWORD(v59->~__shared_weak_count_0) = 3;
        v60 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v60->__shared_owners_ = 0;
        v61 = (unint64_t *)&v60->__shared_owners_;
        v60->__shared_weak_owners_ = 0;
        v60->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE5A8;
        v109 = v60;
        v62 = &v60[1].__vftable;
        v115 = v48;
        v116 = v46;
        do
          v63 = __ldxr(v47);
        while (__stxr(v63 + 1, v47));
        v114[0] = (uint64_t)&v57[1];
        v114[1] = (uint64_t)v57;
        do
          v64 = __ldxr(v58);
        while (__stxr(v64 + 1, v58));
        ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)&v60[1], (uint64_t)"/traffic/element/clear/mesh", &v115, v114);
        do
          v65 = __ldaxr(v58);
        while (__stlxr(v65 - 1, v58));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        v66 = v116;
        if (v116)
        {
          v67 = (unint64_t *)&v116->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = *((_QWORD *)this + 12);
        v70 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v112 = v70;
        v73 = (std::__shared_weak_count_vtbl *)operator new();
        v74 = v73;
        v113 = v62;
        if (v70)
        {
          v75 = (unint64_t *)&v70->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
          ggl::PipelineSetup::PipelineSetup(v73, v69, (uint64_t)v70);
          v77 = (unint64_t *)&v70->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        else
        {
          ggl::PipelineSetup::PipelineSetup(v73, v69, 0);
        }
        v74->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42BAA88;
        v79 = (int64x2_t *)operator new();
        v79->i64[0] = (uint64_t)&off_1E42B59B0;
        v80 = *((_QWORD *)this + 9);
        v79[1].i64[0] = (uint64_t)"";
        v79[1].i64[1] = v80;
        v79[2].i64[0] = (uint64_t)v74;
        v79[2].i32[2] = 0;
        v79[3].i64[0] = 0;
        v79[3].i32[2] = 1065353216;
        v79[4].i64[0] = (uint64_t)v62;
        v79[4].i64[1] = 0;
        v79[5].i64[0] = 0;
        v79[5].i64[1] = 0;
        v79[6] = vdupq_n_s64(1uLL);
        v79[7].i64[0] = 0;
        v108 = *((_QWORD *)this + 7);
        v81 = operator new();
        v107 = v41;
        v82 = (std::__shared_weak_count *)operator new();
        v83 = v82;
        v82->__shared_owners_ = 0;
        v84 = (unint64_t *)&v82->__shared_owners_;
        v82->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7B48;
        v82->__shared_weak_owners_ = 0;
        v82[1].__vftable = v74;
        do
          v85 = __ldxr(v61);
        while (__stxr(v85 + 1, v61));
        *(_OWORD *)(v81 + 40) = 0u;
        *(_OWORD *)(v81 + 24) = 0u;
        *(_QWORD *)(v81 + 56) = 0x3FF0000000000000;
        *(_OWORD *)(v81 + 8) = 0u;
        *(_QWORD *)v81 = &off_1E42C3938;
        *(_QWORD *)(v81 + 160) = 0xFFFFFFFF00000000;
        *(_WORD *)(v81 + 168) = 0;
        *(_QWORD *)(v81 + 172) = -1;
        *(_BYTE *)(v81 + 180) = 1;
        *(_QWORD *)(v81 + 184) = v79;
        *(_QWORD *)(v81 + 192) = v74;
        *(_QWORD *)(v81 + 200) = v82;
        do
          v86 = __ldxr(v84);
        while (__stxr(v86 + 1, v84));
        *(_QWORD *)(v81 + 208) = 0;
        *(_QWORD *)(v81 + 216) = v113;
        *(_QWORD *)(v81 + 224) = v109;
        do
          v87 = __ldxr(v61);
        while (__stxr(v87 + 1, v61));
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(v81 + 232) = _Q0;
        *(_QWORD *)(v81 + 248) = 0x3FF0000000000000;
        *(_QWORD *)(v81 + 256) = 0;
        *(_QWORD *)(v81 + 264) = 0;
        *(_QWORD *)(v81 + 272) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 16))(v108, v81);
        do
          v93 = __ldaxr(v61);
        while (__stlxr(v93 - 1, v61));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
        do
          v94 = __ldaxr(v84);
        while (__stlxr(v94 - 1, v84));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
        v41 = v107;
        if (v112)
        {
          v95 = (unint64_t *)&v112->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        do
          v97 = __ldaxr(v61);
        while (__stlxr(v97 - 1, v61));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
        shared_weak_owners = v57[3].__shared_weak_owners_;
        if (shared_weak_owners <= 0xC)
          shared_weak_owners = 12;
        v57[3].__shared_owners_ = 0;
        v57[3].__shared_weak_owners_ = shared_weak_owners;
        do
          v99 = __ldaxr(v58);
        while (__stlxr(v99 - 1, v58));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        if (v111)
        {
          v100 = v110[3].__shared_weak_owners_;
          if (v100 <= v111)
            v100 = v111;
          v110[3].__shared_owners_ = 0;
          v110[3].__shared_weak_owners_ = v100;
        }
        do
          v101 = __ldaxr(v47);
        while (__stlxr(v101 - 1, v47));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
        v42 = *((_QWORD *)this + 7);
      }
    }
    return (uint64_t *)ggl::CommandBuffer::pushRenderItem(v41, *(ggl::RenderItem **)(**(_QWORD **)(v42 + 48) + 184));
  }
  return result;
}

void sub_19FBCAC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, unint64_t a14, std::__shared_weak_count *a15)
{
  unint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t shared_weak_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  do
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  do
    v23 = __ldaxr(v20);
  while (__stlxr(v23 - 1, v20));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  do
    v26 = __ldaxr(v18);
  while (__stlxr(v26 - 1, v18));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  shared_weak_owners = v19[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC)
    shared_weak_owners = 12;
  v19[3].__shared_owners_ = 0;
  v19[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v28 = __ldaxr(v17);
  while (__stlxr(v28 - 1, v17));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (a14)
  {
    v29 = a13[3].__shared_weak_owners_;
    if (v29 <= a14)
      v29 = a14;
    a13[3].__shared_owners_ = 0;
    a13[3].__shared_weak_owners_ = v29;
  }
  do
    v30 = __ldaxr(v15);
  while (__stlxr(v30 - 1, v15));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  _Unwind_Resume(exception_object);
}

void md::realistic::TrafficRenderLayer::setActive(md::realistic::TrafficRenderLayer *this, int a2)
{
  uint64_t v2;

  *((_BYTE *)this + 32) = a2;
  v2 = *((_QWORD *)this + 19);
  if (a2)
    *(_BYTE *)(v2 + 92) = 1;
  else
    altitude::SkeletonRequestManager::disable((pthread_mutex_t **)v2);
}

void ggl::FlyoverLibrary::~FlyoverLibrary(ggl::FlyoverLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverLibraryBundleMTLData::~FlyoverLibraryBundleMTLData(ggl::FlyoverLibraryBundleMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciElevationRaster::~DaVinciElevationRaster(md::DaVinciElevationRaster *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429CB38;
  *((_QWORD *)this + 79) = &unk_1E429CBA0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429CB38;
  *((_QWORD *)this + 79) = &unk_1E429CBA0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::DaVinciElevationRaster::elevationInMetersAtWorldPoint(uint64_t a1, double *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  return md::ElevationRaster::elevationInMetersAtWorldPoint(*(_QWORD *)(a1 + 720), a3, *a2, a2[1], a6, a7, a8, a9, a10, a11);
}

BOOL md::DaVinciElevationRaster::isValid(md::DaVinciElevationRaster *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 90);
  return v1 && *v1 != v1[1];
}

uint64_t md::DaVinciElevationRaster::primaryRaster(md::DaVinciElevationRaster *this)
{
  return *((_QWORD *)this + 90);
}

uint64_t md::ElevationTileData::fallbackRaster(md::ElevationTileData *this)
{
  return 0;
}

uint64_t md::RenderBatch::remove(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = a1[31];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v5 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v6 = a1[30];
  v7 = *(uint64_t **)(*(_QWORD *)&v6 + 8 * v5);
  if (!v7)
    return 0;
  result = *v7;
  if (!*v7)
    return result;
  v9 = *(_QWORD *)&v2 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = *(_QWORD *)(result + 8);
      if (v10 == a2)
      {
        if (__PAIR64__(*(unsigned __int16 *)(result + 18), *(unsigned __int16 *)(result + 16)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *(_DWORD *)(result + 20) == HIDWORD(a2))
        {
          goto LABEL_15;
        }
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      result = *(_QWORD *)result;
      if (!result)
        return result;
    }
  }
  while (1)
  {
    v11 = *(_QWORD *)(result + 8);
    if (v11 == a2)
      break;
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
    if (v11 != v5)
      return 0;
LABEL_18:
    result = *(_QWORD *)result;
    if (!result)
      return result;
  }
  if (__PAIR64__(*(unsigned __int16 *)(result + 18), *(unsigned __int16 *)(result + 16)) != __PAIR64__(WORD1(a2), (unsigned __int16)a2)|| *(_DWORD *)(result + 20) != HIDWORD(a2))
  {
    goto LABEL_18;
  }
LABEL_15:
  if (v4.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v2 <= a2)
      a2 %= *(_QWORD *)&v2;
  }
  else
  {
    a2 &= v9;
  }
  v12 = *(uint64_t **)(*(_QWORD *)&v6 + 8 * a2);
  do
  {
    v13 = v12;
    v12 = (uint64_t *)*v12;
  }
  while (v12 != (uint64_t *)result);
  if (v13 == (uint64_t *)&a1[32])
    goto LABEL_42;
  v14 = v13[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v14 >= *(_QWORD *)&v2)
      v14 %= *(_QWORD *)&v2;
  }
  else
  {
    v14 &= v9;
  }
  if (v14 != a2)
  {
LABEL_42:
    if (!*(_QWORD *)result)
      goto LABEL_43;
    v15 = *(_QWORD *)(*(_QWORD *)result + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v15 >= *(_QWORD *)&v2)
        v15 %= *(_QWORD *)&v2;
    }
    else
    {
      v15 &= v9;
    }
    if (v15 != a2)
LABEL_43:
      *(_QWORD *)(*(_QWORD *)&v6 + 8 * a2) = 0;
  }
  v16 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v17 >= *(_QWORD *)&v2)
        v17 %= *(_QWORD *)&v2;
    }
    else
    {
      v17 &= v9;
    }
    if (v17 != a2)
    {
      *(_QWORD *)(*(_QWORD *)&a1[30] + 8 * v17) = v13;
      v16 = *(_QWORD *)result;
    }
  }
  *v13 = v16;
  *(_QWORD *)result = 0;
  --*(_QWORD *)&a1[33];
  operator delete((void *)result);
  result = 1;
  if (!a1[44].i8[0])
  {
    a1[44].i8[0] = 1;
    if (a1[46].i8[0])
      a1[46].i8[0] = 0;
    ++*(_QWORD *)&a1[47];
  }
  return result;
}

uint64_t std::vector<md::MeshRenderable>::__emplace_back_slow_path<std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::components::MeshInstance *&>(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3, char *a4, uint64_t **a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  void (***v40)(char *);
  void (**v41)(char *);
  BOOL v42;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x124924924924924)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v12 = 0x124924924924924;
  else
    v12 = v6;
  if (v12)
  {
    if (v12 > 0x124924924924924)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v13 = (char *)operator new(224 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = (uint64_t)&v13[224 * v5];
  v44 = a2;
  v45 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  md::MeshRenderable::MeshRenderable(v14, &v44, *a4, *a5);
  v17 = v45;
  if (v45)
  {
    v18 = (unint64_t *)&v45->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = &v13[224 * v12];
  v21 = v14 + 224;
  v22 = (char *)*a1;
  v23 = (char *)a1[1];
  if (v23 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v21;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    v24 = v14;
    do
    {
      *(_QWORD *)(v24 - 224) = &off_1E428F838;
      v24 -= 224;
      v26 = *(_OWORD *)(v23 - 216);
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v23 - 25);
      *(_OWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 32) = *((_QWORD *)v23 - 24);
      v27 = *((_QWORD *)v23 - 23);
      *(_QWORD *)(v24 + 40) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *((_OWORD *)v23 - 11);
      v31 = *((_OWORD *)v23 - 9);
      *(_OWORD *)(v14 - 160) = *((_OWORD *)v23 - 10);
      *(_OWORD *)(v14 - 144) = v31;
      *(_OWORD *)(v14 - 176) = v30;
      v32 = *((_OWORD *)v23 - 8);
      v33 = *((_OWORD *)v23 - 7);
      v34 = *((_OWORD *)v23 - 6);
      *(_QWORD *)(v14 - 82) = *(_QWORD *)(v23 - 82);
      *(_OWORD *)(v14 - 112) = v33;
      *(_OWORD *)(v14 - 96) = v34;
      *(_OWORD *)(v14 - 128) = v32;
      *(_BYTE *)(v14 - 72) = 0;
      *(_BYTE *)(v14 - 48) = 0;
      if (*(v23 - 48))
      {
        *(_QWORD *)(v14 - 72) = *((_QWORD *)v23 - 9);
        v35 = *((_QWORD *)v23 - 8);
        *(_QWORD *)(v14 - 64) = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        *(_BYTE *)(v14 - 56) = *(v23 - 56);
        *(_BYTE *)(v14 - 48) = 1;
      }
      *(_QWORD *)(v14 - 40) = *((_QWORD *)v23 - 5);
      *(_WORD *)(v14 - 32) = 0;
      if (*(v23 - 31))
      {
        *(_BYTE *)(v14 - 32) = *(v23 - 32);
        *(_BYTE *)(v14 - 31) = 1;
      }
      v25 = *(_OWORD *)(v23 - 28);
      *(_OWORD *)(v14 - 16) = *((_OWORD *)v23 - 1);
      *(_OWORD *)(v14 - 28) = v25;
      v23 -= 224;
      v14 = v24;
    }
    while (v23 != v22);
    v23 = (char *)*a1;
    v38 = (char *)a1[1];
    *a1 = v24;
    a1[1] = v21;
    a1[2] = (uint64_t)v20;
    if (v38 == v23)
    {
      v23 = v38;
      if (!v38)
        return v21;
      goto LABEL_39;
    }
    v39 = v38 - 224;
    v40 = (void (***)(char *))(v38 - 224);
    do
    {
      v41 = *v40;
      v40 -= 28;
      (*v41)(v39);
      v42 = v39 == v23;
      v39 = (char *)v40;
    }
    while (!v42);
  }
  if (v23)
LABEL_39:
    operator delete(v23);
  return v21;
}

void md::MeshBatcher::~MeshBatcher(md::MeshBatcher *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (_QWORD *)*((_QWORD *)this + 10);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v8)
      goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_15:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v11)
    goto LABEL_19;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v14)
      return;
  }
  else
  {
LABEL_19:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v14)
      return;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void **std::vector<md::MeshRenderable>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 224;
      v6 = v3 - 224;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 224;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<getBase(std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<getBase(std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<getBase(std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_19FBCB928(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FBCB9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::GeoResourceProvider::~GeoResourceProvider(md::GeoResourceProvider *this)
{
  md::GeoResourceProvider::~GeoResourceProvider(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  *(_QWORD *)this = &off_1E4297168;
  *((_QWORD *)this + 33) = &unk_1E42971C0;
  grl::ResourceProvider::removeObserver((uint64_t)this, (uint64_t)this + 264);
  objc_msgSend(*((id *)this + 38), "clearProvider");
  objc_msgSend(*((id *)this + 35), "clearProvider");
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeTileGroupObserver:", *((_QWORD *)this + 35));

  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    v4 = *((_QWORD *)this + 41);
    v5 = (void *)*((_QWORD *)this + 40);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 40);
    }
    *((_QWORD *)this + 41) = v3;
    operator delete(v5);
  }
  *((_QWORD *)this + 37) = &off_1E42B50D0;

  *((_QWORD *)this + 34) = &off_1E42B50B0;
  *(_QWORD *)this = &unk_1E42C25D0;
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*((_QWORD **)this + 31));
  std::mutex::~mutex((std::mutex *)((char *)this + 176));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  v9 = (_QWORD *)*((_QWORD *)this + 3);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    operator delete(v11);
}

uint64_t grl::ResourceProvider::supportsResource()
{
  return 1;
}

{
  return 1;
}

void md::GeoResourceProvider::onTileGroupChange(md::GeoResourceProvider *this)
{
  std::mutex *v2;
  NSObject *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)((char *)this + 112);
  std::mutex::lock((std::mutex *)((char *)this + 112));
  if (GEOGetVectorKitVKGeoResourceProviderLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKGeoResourceProviderLog(void)::onceToken, &__block_literal_global_78);
  v3 = GEOGetVectorKitVKGeoResourceProviderLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKGeoResourceProviderLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 41) - *((_QWORD *)this + 40)) >> 3);
    v10 = 134217984;
    v11 = v4;
    _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_INFO, "Received tileGroupChange - clearing cached resource names (count:%lu)", (uint8_t *)&v10, 0xCu);
  }
  v5 = *((_QWORD *)this + 40);
  for (i = *((_QWORD *)this + 41); i != v5; i -= 24)
  {
    v7 = *(std::__shared_weak_count **)(i - 8);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  *((_QWORD *)this + 41) = v5;
  grl::ResourceProvider::clearResourceNamesCache(this);
  std::mutex::unlock(v2);
}

void sub_19FBCBB9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'md::GeoResourceProvider::~GeoResourceProvider(md::GeoResourceProvider *this)
{
  md::GeoResourceProvider::~GeoResourceProvider((md::GeoResourceProvider *)((char *)this - 264));
}

{
  md::GeoResourceProvider::~GeoResourceProvider((md::GeoResourceProvider *)((char *)this - 264));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'md::GeoResourceProvider::onTileGroupChange(md::GeoResourceProvider *this)
{
  md::GeoResourceProvider::onTileGroupChange((md::GeoResourceProvider *)((char *)this - 264));
}

void sub_19FBCBD4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map((void **)(v1 + 320));
  *(_QWORD *)(v1 + 296) = &off_1E42B50D0;

  *(_QWORD *)(v1 + 272) = &off_1E42B50B0;
  grl::ResourceProvider::~ResourceProvider((grl::ResourceProvider *)v1);
  _Unwind_Resume(a1);
}

void **geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void grl::ResourceProvider::~ResourceProvider(grl::ResourceProvider *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E42C25D0;
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*((_QWORD **)this + 31));
  std::mutex::~mutex((std::mutex *)((char *)this + 176));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t geo::_retain_ptr<GRLResourceGroupObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B50B0;

  return a1;
}

void geo::_retain_ptr<GRLResourceGroupObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B50B0;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<RegionalResourceObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B50D0;

  return a1;
}

void geo::_retain_ptr<RegionalResourceObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B50D0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

char *std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_back_slow_path<char const*&>(uint64_t *a1, const char **a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v26 = a1 + 3;
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v6, 8);
  else
    v7 = 0;
  v8 = (char *)(v7 + 24 * v2);
  v23 = v8;
  v24 = v8;
  v25 = v7 + 24 * v6;
  if (!v7)
  {
    v12 = v8;
    goto LABEL_21;
  }
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v15 = (char *)operator new(v13 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)v8 = v15;
    v8 = v15;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
      goto LABEL_20;
  }
  memmove(v8, v9, v11);
LABEL_20:
  v8[v11] = 0;
  v8 = v23;
  v12 = v24;
LABEL_21:
  v16 = v12 + 24;
  v17 = *a1;
  v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (uint64_t)v8;
    a1[1] = (uint64_t)v16;
    v21 = a1[2];
    a1[2] = v25;
  }
  else
  {
    do
    {
      v19 = *(_OWORD *)(v18 - 24);
      *((_QWORD *)v8 - 1) = *(_QWORD *)(v18 - 8);
      *(_OWORD *)(v8 - 24) = v19;
      v8 -= 24;
      *(_QWORD *)(v18 - 16) = 0;
      *(_QWORD *)(v18 - 8) = 0;
      *(_QWORD *)(v18 - 24) = 0;
      v18 -= 24;
    }
    while (v18 != v17);
    v18 = *a1;
    v20 = a1[1];
    *a1 = (uint64_t)v8;
    a1[1] = (uint64_t)v16;
    v21 = a1[2];
    a1[2] = v25;
    while (v20 != v18)
    {
      if (*(char *)(v20 - 1) < 0)
        operator delete(*(void **)(v20 - 24));
      v20 -= 24;
    }
  }
  if (v18)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v26 + 40))(*v26, v18, v21 - v18);
  return v16;
}

void sub_19FBCC20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 32);
    v4 = *(_QWORD *)(result + 24);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v1);
      v4 = *(_QWORD *)(v2 + 24);
    }
    *(_QWORD *)(v2 + 32) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v4, *(_QWORD *)(v2 + 40) - v4);
  }
  return result;
}

md::GeoResourceProvider *md::GeoResourceProvider::GeoResourceProvider(md::GeoResourceProvider *this)
{
  GRLResourceGroupObserver *v2;
  void *v3;
  void *v4;
  RegionalResourceObserver *v5;
  void *v6;

  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_QWORD *)this + 6) = 850045863;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 850045863;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 850045863;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *(_QWORD *)this = &off_1E4297168;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = &unk_1E42971C0;
  *((_QWORD *)this + 34) = &off_1E42B50B0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 37) = &off_1E42B50D0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = 0;
  v2 = -[GRLResourceGroupObserver initWithResourceProvider:]([GRLResourceGroupObserver alloc], "initWithResourceProvider:", this);
  v3 = (void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = v2;

  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addTileGroupObserver:queue:", *((_QWORD *)this + 35), MEMORY[0x1E0C80D38]);

  v5 = -[RegionalResourceObserver initWithResourceProvider:]([RegionalResourceObserver alloc], "initWithResourceProvider:", this);
  v6 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v5;

  grl::ResourceProvider::addObserver((uint64_t)this, (uint64_t)this + 264);
  return this;
}

void sub_19FBCC520(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = v2;

  v6 = *(_QWORD *)(v1 + 320);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + 328);
    v8 = *(void **)(v1 + 320);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = *(void **)(v1 + 320);
    }
    *(_QWORD *)(v1 + 328) = v6;
    operator delete(v8);
  }
  *(_QWORD *)(v1 + 296) = v3;

  *(_QWORD *)(v1 + 272) = &off_1E42B50B0;
  grl::ResourceProvider::~ResourceProvider((grl::ResourceProvider *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelTextDataLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelTextDataLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBF28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelTextDataLoader>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void md::LabelTextDataLoader::~LabelTextDataLoader(std::mutex **this)
{
  std::mutex *v2;
  uint64_t sig;
  std::mutex *v4;
  std::mutex *v5;
  std::mutex *v6;
  std::mutex *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *this;
  if (*this)
  {
    std::mutex::lock(*this);
    sig = v2[1].__m_.__sig;
    std::mutex::unlock(v2);
    if (sig)
    {
      v4 = *this;
      std::mutex::lock(*this);
      v4[1].__m_.__sig = 0;
      std::mutex::unlock(v4);
    }
  }
  v5 = this[3];
  if (v5)
  {
    v6 = this[4];
    v7 = this[3];
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)&v6[-1].__m_.__opaque[48];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, std::mutex *))v8->__on_zero_shared)(v8, v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 = (std::mutex *)((char *)v6 - 16);
      }
      while (v6 != v5);
      v7 = this[3];
    }
    this[4] = v5;
    (*(void (**)(std::mutex *, std::mutex *, int64_t))(this[6]->__m_.__sig + 40))(this[6], v7, (char *)this[5] - (char *)v7);
  }
  v11 = (std::__shared_weak_count *)this[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19FBCC744(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 32);
    v5 = *(_QWORD *)(v1 + 24);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v6->__on_zero_shared)(v6, v5);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(_QWORD *)(v1 + 24);
    }
    *(_QWORD *)(v1 + 32) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 48) + 40))(*(_QWORD *)(v1 + 48), v5, *(_QWORD *)(v1 + 40) - v5);
  }
  v9 = *(std::__shared_weak_count **)(v1 + 8);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *md::LabelTextDataLoader::finishBatch(void)::$_0::~$_0(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *a1;
  if (*a1)
  {
    v9 = a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v10, a1[2] - v10);
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E42CFD70;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 8);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v10, *(_QWORD *)(a1 + 24) - v10);
  }
  return a1;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_1E42CFD70;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 8);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(_QWORD *)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v8;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v10, *(_QWORD *)(a1 + 24) - v10);
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::__clone(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  a2[1] = 0;
  a2[2] = 0;
  *a2 = &off_1E42CFD70;
  result = (_QWORD *)a1[4];
  a2[3] = 0;
  a2[4] = result;
  v5 = (char *)a1[1];
  v6 = (char *)a1[2];
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      abort();
    v8 = v7 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    a2[1] = result;
    a2[2] = result;
    a2[3] = &result[2 * v8];
    do
    {
      if (result)
      {
        v9 = *((_QWORD *)v5 + 1);
        *result = *(_QWORD *)v5;
        result[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
      }
      v5 += 16;
      result += 2;
    }
    while (v5 != v6);
    a2[2] = result;
  }
  v12 = a1[6];
  a2[5] = a1[5];
  a2[6] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a1[8];
  a2[7] = a1[7];
  a2[8] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::destroy[abi:nn180100]((uint64_t *)(a1 + 8));
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42D9C68;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42D9C68;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42D9C68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9C20;
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D9CB0;
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D9CB0;
}

void std::__function::__alloc_func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::destroy[abi:nn180100](uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *a1;
  if (*a1)
  {
    v9 = a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v10, a1[2] - v10);
  }
}

void md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCD27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCD46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCD65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCD84C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCDA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCDC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCDE1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCE00C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCE1FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCE3EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  int64x2_t v11;
  float64x2_t v12;
  float32x4_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  __int128 v22;

  v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 272);
    v7 = *(_QWORD *)(a1 + 280);
    if (v6 != v7)
    {
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(*(_QWORD *)v6 + 384);
          v10 = 1 << *(_BYTE *)(v9 + 169);
          v11.i64[0] = *(int *)(v9 + 176);
          v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
          v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
          v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
          LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_19FFB3850)).u32[0];
          HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_19FFB3850, v13)).i32[1];
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0)
            break;
          v6 += 8;
          if (v6 == v7)
            return;
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v22, a1);
        v14 = v22;
        v22 = 0uLL;
        v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (!v15)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
LABEL_11:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_10:
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
            goto LABEL_11;
        }
        v6 += 8;
        if (*a3)
          v21 = 1;
        else
          v21 = v6 == v7;
      }
      while (!v21);
    }
  }
}

void sub_19FBCE5DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::featureMarker(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

md::CartographicTiledRenderResources *md::CartographicTiledRenderResources::CartographicTiledRenderResources(md::CartographicTiledRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  VKSharedResources *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  unsigned __int8 v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int8x16_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  ggl::PolygonSolidFillS2Shader *v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  __int128 v139;
  __int16 v140;
  char v141;
  _BYTE v142[36];
  uint64_t v143;
  char v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  _OWORD v147[2];
  _QWORD v148[3];
  _QWORD *v149;
  _QWORD v150[3];
  _QWORD *v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *((_QWORD *)this + 16) = 0;
  v6 = (uint64_t *)((char *)this + 104);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 32;
  v7 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v7 = 0;
  v7[1] = 0;
  *((_QWORD *)this + 16) = v7;
  *((_QWORD *)this + 17) = v7;
  v8 = operator new();
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = &off_1E42B5DE8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 36) = 65537;
  *(_DWORD *)(v8 + 44) = 0;
  *(_QWORD *)(v8 + 48) = 0xFF7F0200000600;
  *(_WORD *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 58) = 3;
  *(_QWORD *)(v8 + 67) = 0;
  *(_QWORD *)(v8 + 59) = 0;
  *(_BYTE *)(v8 + 75) = 0;
  *(_QWORD *)(v8 + 132) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_WORD *)(v8 + 188) = 257;
  *(_QWORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *(_BYTE *)(v8 + 208) = 0;
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v8 = *(_QWORD *)this;
  }
  *(_BYTE *)(v8 + 208) = 1;
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v142);
  v10 = *(_OWORD *)v142;
  *(_OWORD *)v142 = 0uLL;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *(_OWORD *)((char *)this + 8) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(std::__shared_weak_count **)&v142[8];
  if (*(_QWORD *)&v142[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v142[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v5, "shaderLibrary") + 80);
  v18 = *(_QWORD *)(v17 + 1712);
  v19 = *(std::__shared_weak_count **)(v17 + 1720);
  v145 = v18;
  v146 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)&v142[28] = 0;
  *(_QWORD *)&v142[20] = 0;
  v143 = 0;
  v142[0] = 0;
  *(_OWORD *)&v142[4] = xmmword_19FFB3060;
  v144 = 0;
  v22 = operator new(0x198uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_1E42E0C28;
  v23 = *(_OWORD *)&a3->colorFormatsCount;
  v147[0] = *(_OWORD *)a3->colorFormats;
  v147[1] = v23;
  v24 = ggl::PolygonSolidFill::MeshPipelineState::MeshPipelineState((uint64_t)(v22 + 3), &v145, (uint64_t)v142, v147, 0);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v24;
  *((_QWORD *)this + 4) = v22;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v146;
  if (v146)
  {
    v29 = (unint64_t *)&v146->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v5, "shaderLibrary", 1, 0x100000000) + 80);
  v32 = *(_QWORD *)(v31 + 1736);
  v33 = *(_QWORD *)(v31 + 1744);
  *(_QWORD *)&v147[0] = v32;
  *((_QWORD *)&v147[0] + 1) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v145 = 0;
  v36 = (char *)operator new(0x198uLL);
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *(_QWORD *)v36 = &off_1E42E0C60;
  v37 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v142 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v142[16] = v37;
  if ((v38 & 1) == 0)
  {
    if ((_DWORD)v132)
    {
      if ((v133 & 1) == 0)
      {
        if ((_DWORD)v132)
        {
          if ((v136 & 1) == 0
          {
            if ((v138 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43AF0 = 1;
          }
          ggl::PolygonSolidFill::S2MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57CB48 = &ggl::PolygonSolidFill::pipelineDataS2MeshPipelineDeviceStructs(void)::ref;
          qword_1EE57CB50 = 0;
          if ((v137 & 1) == 0
          {
            ggl::PolygonSolidFill::pipelineDataS2MeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57CC30 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57CC38 = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
          }
          qword_1EE57CB58 = (uint64_t)&ggl::PolygonSolidFill::pipelineDataS2MeshPipelineConstantStructs(void)::ref;
          unk_1EE57CB60 = xmmword_19FFB3410;
        }
      }
      ggl::PolygonSolidFill::S2MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonSolidFill::S2MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonSolidFillS2Shader::typedReflection(v132);
      qword_1EE57CB80 = (uint64_t)&ggl::PolygonSolidFillS2Shader::typedReflection(void)::ref;
      if ((v134 & 1) == 0
      {
        ggl::PolygonSolidFill::pipelineStateS2MeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57CDC0 = 0;
        qword_1EE57CDC8 = (uint64_t)"";
        dword_1EE57CDD0 = 0;
        qword_1EE57CDD8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57CDE0 = 1;
      }
      qword_1EE57CB88 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineAttributeStructBinding(void)::attr;
      unk_1EE57CB90 = 1;
      qword_1EE57CB98 = 0;
      unk_1EE57CBA0 = 0;
      qword_1EE57CBA8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineDeviceStructBinding(void)::ref;
      unk_1EE57CBB0 = 0;
      if ((v135 & 1) == 0
      {
        ggl::PolygonSolidFill::pipelineStateS2MeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57CD10 = 0;
        qword_1EE57CD18 = (uint64_t)"view";
        dword_1EE57CD20 = 3;
        qword_1EE57CD28 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57CD30 = xmmword_19FFB35A0;
        qword_1EE57CD40 = 1;
        unk_1EE57CD48 = "transform";
        dword_1EE57CD50 = 3;
        qword_1EE57CD58 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57CD60 = xmmword_19FFB3660;
        qword_1EE57CD70 = 2;
        unk_1EE57CD78 = "solidFill";
        dword_1EE57CD80 = 3;
        qword_1EE57CD88 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineConstantSolidFillBinding(void)::reflection;
        unk_1EE57CD90 = 5;
      }
      qword_1EE57CBB8 = (uint64_t)&ggl::PolygonSolidFill::pipelineStateS2MeshPipelineConstantStructBinding(void)::ref;
      unk_1EE57CBC0 = 3;
    }
  }
  v39 = v147[0];
  if (*((_QWORD *)&v147[0] + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v147[0] + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *((_DWORD *)v36 + 14) = 0;
    *((_QWORD *)v36 + 5) = 0;
    *((_QWORD *)v36 + 6) = 0;
    *((_QWORD *)v36 + 3) = &off_1E42B6760;
    *((_QWORD *)v36 + 4) = 0;
    *((_QWORD *)v36 + 8) = &ggl::PolygonSolidFill::S2MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v36 + 72) = v39;
    do
      v42 = __ldxr(v40);
    while (__stxr(v42 + 1, v40));
  }
  else
  {
    *((_DWORD *)v36 + 14) = 0;
    *((_QWORD *)v36 + 5) = 0;
    *((_QWORD *)v36 + 6) = 0;
    *((_QWORD *)v36 + 3) = &off_1E42B6760;
    *((_QWORD *)v36 + 4) = 0;
    *((_QWORD *)v36 + 8) = &ggl::PolygonSolidFill::S2MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v36 + 72) = v39;
  }
  v36[136] = 0;
  *(_OWORD *)(v36 + 140) = v139;
  *(_QWORD *)(v36 + 156) = 0;
  *(_QWORD *)(v36 + 172) = 0;
  *(_QWORD *)(v36 + 164) = 0;
  v36[184] = 0;
  *(_OWORD *)(v36 + 188) = v139;
  *(_QWORD *)(v36 + 204) = 0;
  *(_QWORD *)(v36 + 220) = 0;
  *(_QWORD *)(v36 + 212) = 0;
  v36[232] = 0;
  *(_OWORD *)(v36 + 236) = v139;
  *(_QWORD *)(v36 + 252) = 0;
  *(_QWORD *)(v36 + 268) = 0;
  *(_QWORD *)(v36 + 260) = 0;
  v43 = *(_OWORD *)&v142[16];
  *(_OWORD *)(v36 + 280) = *(_OWORD *)v142;
  *(_OWORD *)(v36 + 296) = v43;
  v36[312] = 0;
  *((_QWORD *)v36 + 48) = 0;
  *((_OWORD *)v36 + 22) = 0u;
  *((_OWORD *)v36 + 23) = 0u;
  *((_OWORD *)v36 + 20) = 0u;
  *((_OWORD *)v36 + 21) = 0u;
  *((_QWORD *)v36 + 49) = 0x100000001;
  v36[400] = 0;
  v36[88] = 0;
  *(_WORD *)(v36 + 89) = v140;
  v36[91] = v141;
  *(_OWORD *)(v36 + 92) = v139;
  *(_QWORD *)(v36 + 108) = v145;
  *(_QWORD *)(v36 + 124) = 0;
  *(_QWORD *)(v36 + 116) = 0;
  v36[132] = 0;
  if (*((_QWORD *)&v39 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
  }
  v36[329] = 0;
  v46 = *(int8x16_t *)(v36 + 344);
  v47 = vceqzq_s8(*(int8x16_t *)(v36 + 328));
  v48 = vmovl_high_s8(v47);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50.i64[0] = v49.u32[0];
  v50.i64[1] = v49.u32[1];
  v51 = v50;
  v52 = vmovl_s8(*(int8x8_t *)v47.i8);
  v53 = vmovl_s16(*(int16x4_t *)v52.i8);
  *((_QWORD *)v36 + 3) = &off_1E42B89A0;
  v50.i64[0] = v53.u32[0];
  v50.i64[1] = v53.u32[1];
  v54 = v50;
  v55 = vmovl_high_s16(v48);
  v50.i64[0] = v55.u32[0];
  v50.i64[1] = v55.u32[1];
  v56 = v50;
  v57 = vmovl_high_s16(v52);
  v50.i64[0] = v57.u32[0];
  v50.i64[1] = v57.u32[1];
  v58 = v50;
  v50.i64[0] = v49.u32[2];
  v50.i64[1] = v49.u32[3];
  v59 = v50;
  v50.i64[0] = v53.u32[2];
  v50.i64[1] = v53.u32[3];
  v60 = v50;
  v50.i64[0] = v55.u32[2];
  v50.i64[1] = v55.u32[3];
  v61 = v50;
  v50.i64[0] = v57.u32[2];
  v50.i64[1] = v57.u32[3];
  v62 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v50);
  v63 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v61);
  v64 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v60);
  v65 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v56);
  v66 = vceqzq_s8(v46);
  v67 = vmovl_high_s8(v66);
  v68 = vmovl_s16(*(int16x4_t *)v67.i8);
  v50.i64[0] = v68.u32[0];
  v50.i64[1] = v68.u32[1];
  v69 = v50;
  v70 = vmovl_s8(*(int8x8_t *)v66.i8);
  v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v50.i64[0] = v71.u32[0];
  v50.i64[1] = v71.u32[1];
  v72 = v50;
  v73 = vmovl_high_s16(v67);
  v50.i64[0] = v73.u32[0];
  v50.i64[1] = v73.u32[1];
  v74 = v50;
  v75 = vmovl_high_s16(v70);
  v50.i64[0] = v75.u32[0];
  v50.i64[1] = v75.u32[1];
  v76 = v50;
  v50.i64[0] = v68.u32[2];
  v50.i64[1] = v68.u32[3];
  v77 = v50;
  v50.i64[0] = v71.u32[2];
  v50.i64[1] = v71.u32[3];
  v78 = v50;
  v50.i64[0] = v73.u32[2];
  v50.i64[1] = v73.u32[3];
  v79 = v50;
  v50.i64[0] = v75.u32[2];
  v50.i64[1] = v75.u32[3];
  v80 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v79);
  v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v69), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v51));
  v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v72), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v54));
  v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v74), v65);
  v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v76), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v58));
  v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v77), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v59));
  v86 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v78), v64);
  v87 = vorrq_s8(v80, v63);
  v88 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v50), v62);
  v89 = vceqzq_s8(*(int8x16_t *)(v36 + 360));
  v90 = vmovl_s8(*(int8x8_t *)v89.i8);
  v91 = vmovl_high_s16(v90);
  v50.i64[0] = v91.i32[2];
  v50.i64[1] = v91.i32[3];
  v92 = v50;
  v93 = vmovl_high_s8(v89);
  v94 = vmovl_high_s16(v93);
  v50.i64[0] = v94.i32[2];
  v50.i64[1] = v94.i32[3];
  v95 = v50;
  v96 = vmovl_s16(*(int16x4_t *)v90.i8);
  v50.i64[0] = v96.i32[2];
  v50.i64[1] = v96.i32[3];
  v97 = v50;
  v98 = vmovl_s16(*(int16x4_t *)v93.i8);
  v50.i64[0] = v98.i32[2];
  v50.i64[1] = v98.i32[3];
  v99 = v50;
  v50.i64[0] = v91.i32[0];
  v50.i64[1] = v91.i32[1];
  v100 = v50;
  v50.i64[0] = v94.i32[0];
  v50.i64[1] = v94.i32[1];
  v101 = v50;
  v50.i64[0] = v96.i32[0];
  v50.i64[1] = v96.i32[1];
  v102 = v50;
  v50.i64[0] = v98.i32[0];
  v50.i64[1] = v98.i32[1];
  v103 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v50);
  v104 = vceqzq_s8(*(int8x16_t *)(v36 + 376));
  v105 = vmovl_high_s8(v104);
  v106 = vmovl_s16(*(int16x4_t *)v105.i8);
  v50.i64[0] = v106.i32[0];
  v50.i64[1] = v106.i32[1];
  v107 = v50;
  v108 = vmovl_s8(*(int8x8_t *)v104.i8);
  v109 = vmovl_s16(*(int16x4_t *)v108.i8);
  v50.i64[0] = v109.i32[0];
  v50.i64[1] = v109.i32[1];
  v110 = v50;
  v111 = vmovl_high_s16(v105);
  v50.i64[0] = v111.i32[0];
  v50.i64[1] = v111.i32[1];
  v112 = v50;
  v113 = vmovl_high_s16(v108);
  v50.i64[0] = v113.i32[0];
  v50.i64[1] = v113.i32[1];
  v114 = v50;
  v50.i64[0] = v106.i32[2];
  v50.i64[1] = v106.i32[3];
  v115 = v50;
  v50.i64[0] = v109.i32[2];
  v50.i64[1] = v109.i32[3];
  v116 = v50;
  v50.i64[0] = v111.i32[2];
  v50.i64[1] = v111.i32[3];
  v117 = v50;
  v50.i64[0] = v113.i32[2];
  v50.i64[1] = v113.i32[3];
  *((_QWORD *)v36 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v110), vbicq_s8((int8x16_t)xmmword_19FFB3170, v102)), v82), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v107), v103), v81)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v114), vbicq_s8((int8x16_t)xmmword_19FFB3190, v100)), v84), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v112), vbicq_s8((int8x16_t)xmmword_19FFB3180, v101)),
                                               v83))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v116), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v97)), v86), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v115), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v99)), v85)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v50), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v92)), v88), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v117),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v95)),
                                               v87)))));
  v36[312] = 1;
  v118 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = v36 + 24;
  *((_QWORD *)this + 6) = v36;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v147[0] + 1);
  if (*((_QWORD *)&v147[0] + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v147[0] + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (unint64_t *)operator new();
  v150[0] = &off_1E427B0B8;
  v150[1] = this;
  v151 = v150;
  v148[0] = &off_1E427B100;
  v149 = v148;
  ggl::FragmentedPool<ggl::PolygonSolidFill::MeshPipelineSetup>::FragmentedPool(v124, (uint64_t)v150, (uint64_t)v148, 0x3E8uLL, 0x1F40uLL);
  v125 = *v6;
  *v6 = (uint64_t)v124;
  if (v125)
  {
    v126 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v125);
    MEMORY[0x1A1AF4E00](v126, 0x10A0C40D234DDC7);
  }
  v127 = v149;
  if (v149 == v148)
  {
    v128 = 4;
    v127 = v148;
  }
  else
  {
    if (!v149)
      goto LABEL_59;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_59:
  v129 = v151;
  if (v151 == v150)
  {
    v130 = 4;
    v129 = v150;
    goto LABEL_63;
  }
  if (v151)
  {
    v130 = 5;
LABEL_63:
    (*(void (**)(void))(*v129 + 8 * v130))();
  }

  return this;
}

void sub_19FBCF1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t *v26;
  void *v27;
  uint64_t *v28;
  md::RenderItemPool *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;

  v35 = *(char **)(v31 + 24);
  if (v35 == v32)
  {
    v36 = 4;
    v35 = &a26;
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  v37 = *(_QWORD **)(v31 + 56);
  if (v37 == (_QWORD *)(v33 - 136))
  {
    v38 = 4;
    v37 = (_QWORD *)(v33 - 136);
  }
  else
  {
    if (!v37)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_11:
  MEMORY[0x1A1AF4E00](v30, 0x10A0C40D234DDC7);
  md::RenderItemPool::~RenderItemPool(v29);
  std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](v28);
  v39 = (void *)v26[10];
  if (v39)
  {
    v26[11] = (uint64_t)v39;
    operator delete(v39);
  }
  v40 = (void *)v26[7];
  if (v40)
  {
    v26[8] = (uint64_t)v40;
    operator delete(v40);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 5));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 3));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 1));
  v41 = *v26;
  *v26 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonSolidFill::MeshPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonSolidFill::MeshPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427B100;
  return result;
}

void std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonSolidFill::MeshPipelineSetup *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427B100;
}

void std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427B0B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427B0B8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v3 = ggl::BufferData::BufferData((uint64_t)&v2[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v2[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v15 = v3;
  v16 = v2;
  v4 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
  v6 = ggl::BufferData::BufferData((uint64_t)&v4[1], qword_1EE55CC40, 2, 1, 6, 1);
  v4[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
  v14[0] = v6;
  v14[1] = (uint64_t)v4;
  v7 = (_QWORD *)operator new();
  v13[0] = 0;
  v13[1] = 0;
  ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v7, *(_QWORD *)(v1 + 24), *(std::__shared_weak_count **)(v1 + 32), &v15, v13, v14);
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v7;
}

void sub_19FBCF51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::S2MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::S2MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3E20;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3E20;
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::operator()()
{
  return 1;
}

uint64_t md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42AA220;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::updateZScaleAndOffset(uint64_t **a1, md::LayoutContext *this, float a3)
{
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  double *v9;
  float v10;
  float v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  __double2 v31;
  double v32;
  uint64_t *v33;
  uint64_t *v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;

  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v6)
  {
    v9 = 0;
    v10 = MEMORY[0x10];
    v11 = MEMORY[0x14];
    goto LABEL_43;
  }
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v6 <= 0x8BD499FBD96FBB9ELL)
      v8 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v12 = *v5;
  v13 = *(_QWORD **)(v12 + 8 * v8);
  if (v13 && (v14 = (_QWORD *)*v13) != 0)
  {
    if (v7.u32[0] >= 2uLL)
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        v14 = (_QWORD *)*v14;
    }
    else
    {
      while (v14[1] != 0x8BD499FBD96FBB9ELL || v14[2] != 0x8BD499FBD96FBB9ELL)
        v14 = (_QWORD *)*v14;
    }
    v15 = *(_QWORD *)(v14[5] + 32);
    v16 = v15 + 16;
    v17 = v15 + 20;
  }
  else
  {
    v16 = 16;
    v17 = 20;
  }
  if (v7.u32[0] > 1uLL)
  {
    v18 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v6 <= 0x1AF456233693CD46uLL)
      v18 = 0x1AF456233693CD46uLL % *(_QWORD *)&v6;
  }
  else
  {
    v18 = (*(_QWORD *)&v6 - 1) & 0x1AF456233693CD46;
  }
  v10 = *(float *)v16;
  v11 = *(float *)v17;
  v19 = *(_QWORD **)(v12 + 8 * v18);
  if (!v19)
    goto LABEL_42;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_42;
  if (v7.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46)
          goto LABEL_40;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_42;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v22 = v20[1];
    if (v22 == 0x1AF456233693CD46)
      break;
    if (v22 >= *(_QWORD *)&v6)
      v22 %= *(_QWORD *)&v6;
    if (v22 != v18)
      goto LABEL_42;
LABEL_29:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_42;
  }
  if (v20[2] != 0x1AF456233693CD46)
    goto LABEL_29;
LABEL_40:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) == 0x1AF456233693CD46)
  {
    v9 = *(double **)(v24 + 32);
    goto LABEL_43;
  }
LABEL_42:
  v9 = 0;
LABEL_43:
  md::LayoutContext::frameState(this);
  v26 = v9[64];
  if (*(unsigned __int8 *)(v25 + 128) - 1 > 2)
  {
    v32 = v26 * 40075017.0;
  }
  else
  {
    v27 = sqrt(v9[62] * v9[62] + v9[63] * v9[63]);
    v28 = atan2(v9[64], v27 * 0.996647189);
    v29 = __sincos_stret(v28);
    v30 = atan2(v26 + v29.__sinval * v29.__sinval * 42841.3115 * v29.__sinval, v27 + v29.__cosval * v29.__cosval * -42697.6727 * v29.__cosval);
    v31 = __sincos_stret(v30);
    v32 = v27 / v31.__cosval + -6378137.0 / sqrt(v31.__sinval * v31.__sinval * -0.00669437999 + 1.0);
  }
  v33 = *a1;
  v34 = a1[1];
  if (*a1 != v34)
  {
    v35 = v32;
    v36 = (float)(fmaxf(v35 * 0.002, 1.0) + a3) * v11;
    do
    {
      v37 = *v33++;
      v38 = *(_QWORD *)(v37 + 384);
      md::BaseMapTileDataRenderable::adjustZScale(v37, v10, v11);
      md::BaseMapTileDataRenderable::adjustZOffset(*(_QWORD **)(v37 + 232), v36 * *(float *)(v38 + 624));
    }
    while (v33 != v34);
  }
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3D90;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3D90;
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::operator()()
{
  return 1;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3DD8;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3DD8;
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::operator()()
{
  return 1;
}

_QWORD *md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, _BYTE *a5)
{
  _QWORD *result;
  uint64_t *v7;
  int8x8_t v8;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v37;
  int v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _QWORD *v58;
  unint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  int8x8_t v131;
  _QWORD *v132;
  uint8x8_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float64x2_t *v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t *v153;
  unsigned __int8 *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  int v164;
  double v165;
  uint64_t v166;
  int v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  int v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  float32x4_t *v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _OWORD *v248;
  __int128 *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  _QWORD *v255;
  int v256;
  int v257;
  unint64_t v258;
  unint64_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t *v263;
  ggl::RenderItem *v264;
  uint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  float32x4_t *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v276;
  __int128 v277;
  int64x2_t v278;
  int64x2_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  unsigned __int8 *v283;
  _QWORD *v285;
  _QWORD *v286;
  _OWORD v287[8];
  __int128 v288;
  uint64_t v289;
  double v290;
  double v291;
  double v292;
  double v293;
  float64x2_t v294;
  double v295;
  double v296;
  double v297;
  double v298;
  _BYTE v299[48];
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  double v315;
  double v316;
  double v317;
  uint64_t v318;
  double v319;
  double v320;
  double v321;
  uint64_t v322;
  double v323;
  double v324;
  double v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  _BYTE v330[80];
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  _QWORD v334[3];
  _QWORD *v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  result = v334;
  v334[0] = &off_1E42D3E68;
  v335 = v334;
  v7 = (uint64_t *)*((_QWORD *)a2 + 1);
  v8 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v8)
  {
    v12 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v8 <= 0x3070CB6B3C7F21D3uLL)
      v11 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & 0x3070CB6B3C7F21D3;
  }
  v13 = *v7;
  v14 = *(_QWORD **)(v13 + 8 * v11);
  if (!v14)
    goto LABEL_25;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_25;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x3070CB6B3C7F21D3)
      {
        if (v15[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v17 & (*(_QWORD *)&v8 - 1)) != v11)
      {
        goto LABEL_25;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x3070CB6B3C7F21D3)
      break;
    if (v16 >= *(_QWORD *)&v8)
      v16 %= *(_QWORD *)&v8;
    if (v16 != v11)
      goto LABEL_25;
LABEL_12:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_25;
  }
  if (v15[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x3070CB6B3C7F21D3)
  {
    v281 = *(_QWORD *)(v18 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v281 = 0;
LABEL_26:
  if (v10.u32[0] > 1uLL)
  {
    v19 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v8 <= 0x99BED48DEFBBD82BLL)
      v19 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v8;
  }
  else
  {
    v19 = (*(_QWORD *)&v8 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v20 = *(_QWORD **)(v13 + 8 * v19);
  if (!v20)
    goto LABEL_49;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_49;
  if (v10.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x99BED48DEFBBD82BLL)
      {
        if (v21[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_49;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_49;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x99BED48DEFBBD82BLL)
      break;
    if (v23 >= *(_QWORD *)&v8)
      v23 %= *(_QWORD *)&v8;
    if (v23 != v19)
      goto LABEL_49;
LABEL_35:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_49;
  }
  if (v21[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_35;
LABEL_46:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_49:
    v273 = 0;
    if (v281)
      goto LABEL_50;
    goto LABEL_72;
  }
  v273 = *(_QWORD *)(v25 + 32);
  if (!v281)
    goto LABEL_72;
LABEL_50:
  v26 = *(_QWORD **)v273;
  v27 = *(unsigned __int16 **)(*(_QWORD *)v273 + 184);
  v28 = *(unsigned __int16 **)(*(_QWORD *)v273 + 192);
  if (v27 != v28)
  {
    v29 = (unsigned __int16 *)v26[15];
    while (1)
    {
      v30 = (unsigned __int16 *)v26[14];
      if (v30 != v29)
      {
        v30 = (unsigned __int16 *)v26[14];
        while (*v30 != *v27)
        {
          v30 += 56;
          if (v30 == v29)
          {
            v30 = (unsigned __int16 *)v26[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v30 + 8))
        break;
      if (++v27 == v28)
        goto LABEL_59;
    }
LABEL_73:
    *(_BYTE *)(a1 + 360) = 1;
    goto LABEL_74;
  }
LABEL_59:
  v31 = (unsigned __int16 *)v26[26];
  v32 = (unsigned __int16 *)v26[27];
  if (v31 != v32)
  {
    v34 = (unsigned __int16 *)v26[14];
    v33 = (unsigned __int16 *)v26[15];
    do
    {
      v37 = v34;
      if (v34 != v33)
      {
        v37 = v34;
        while (*v37 != *v31)
        {
          v37 += 56;
          if (v37 == v33)
          {
            v37 = v33;
            break;
          }
        }
      }
      v35 = *((unsigned __int8 *)v37 + 8);
      ++v31;
      if (v35)
        _ZF = v31 == v32;
      else
        _ZF = 1;
    }
    while (!_ZF);
    if (!v35)
      goto LABEL_73;
  }
  v38 = *(unsigned __int8 *)(a1 + 48);
  v39 = *(unsigned __int8 *)(a1 + 49);
  *(_BYTE *)(a1 + 360) = v38 != v39;
  if (v38 == v39)
  {
LABEL_72:
    result = v334;
    v12 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
LABEL_74:
  v40 = *(_QWORD **)(a1 + 352);
  v41 = v40[14];
  v282 = v40[15];
  v42 = *(uint64_t **)(a1 + 272);
  v43 = *(uint64_t **)(a1 + 280);
  v286 = (_QWORD *)a1;
  if (v42 != v43)
  {
    do
    {
      v44 = *v42;
      if (!v335
        || (*(_QWORD *)v330 = *v42, (*(unsigned int (**)(_QWORD *, _BYTE *))(*v335 + 48))(v335, v330)))
      {
        v45 = *(_QWORD *)(v44 + 384);
        v46 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v273 + 8), (unsigned __int8 *)(v45 + 16));
        if (v46)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * (v46[17] - v46[16]);
          if (*(unsigned __int8 *)(v45 + 168) == 255)
            v41 += v47;
          else
            v282 += v47;
        }
      }
      ++v42;
    }
    while (v42 != v43);
    v40 = (_QWORD *)v286[44];
  }
  v48 = v281 + 144;
  v49 = 128;
  if (*(unsigned __int8 *)(v281 + 320) - 1 >= 3)
    v48 = v281 + 128;
  else
    v49 = 144;
  v50 = *(_QWORD *)(v281 + v49);
  v51 = *(std::__shared_weak_count **)(v48 + 8);
  v313 = v50;
  v314 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
  }
  v285 = v40;
  if (v41 > (uint64_t)(v40[8] - v40[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v277 = _Q0;
    v278 = vdupq_n_s64(1uLL);
    do
    {
      v61 = operator new();
      v62 = v61;
      *(_OWORD *)v61 = 0u;
      *(_OWORD *)(v61 + 16) = 0u;
      *(_OWORD *)(v61 + 32) = 0u;
      *(_OWORD *)(v61 + 48) = 0u;
      *(_OWORD *)(v61 + 64) = 0u;
      *(_QWORD *)(v61 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v61 + 24) = "";
      *(_QWORD *)(v61 + 32) = 0;
      *(_DWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 40) = 0;
      *(_DWORD *)(v61 + 64) = 1065353216;
      *(_OWORD *)(v61 + 88) = 0u;
      *(_OWORD *)(v61 + 72) = 0u;
      *(int64x2_t *)(v61 + 104) = v278;
      *(_QWORD *)(v61 + 120) = 0;
      v40 = v285;
      v64 = (uint64_t *)v285[8];
      v63 = v285[9];
      if ((unint64_t)v64 >= v63)
      {
        v66 = (char *)v285[7];
        v67 = ((char *)v64 - v66) >> 3;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61)
          abort();
        v69 = v63 - (_QWORD)v66;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 61)
LABEL_312:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v71 = (char *)operator new(8 * v70);
        }
        else
        {
          v71 = 0;
        }
        v72 = (uint64_t *)&v71[8 * v67];
        *v72 = v62;
        v65 = v72 + 1;
        if (v64 == (uint64_t *)v66)
        {
          v40 = v285;
        }
        else
        {
          v73 = (char *)(v64 - 1) - v66;
          if (v73 < 0x58)
            goto LABEL_317;
          if ((unint64_t)(v66 - v71) < 0x20)
            goto LABEL_317;
          v74 = (v73 >> 3) + 1;
          v75 = &v71[8 * v67 - 16];
          v76 = v64 - 2;
          v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *(_OWORD *)v76;
            *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
            *(_OWORD *)v75 = v78;
            v75 -= 32;
            v76 -= 4;
            v77 -= 4;
          }
          while (v77);
          v72 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          v64 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_317:
            do
            {
              v79 = *--v64;
              *--v72 = v79;
            }
            while (v64 != (uint64_t *)v66);
          }
          v40 = v285;
          v64 = (uint64_t *)v285[7];
        }
        v40[7] = v72;
        v40[8] = v65;
        v40[9] = &v71[8 * v70];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v64 = v61;
        v65 = v64 + 1;
      }
      v40[8] = v65;
      v80 = (_QWORD *)*(v65 - 1);
      v81 = (_QWORD *)operator new();
      v82 = v286[44];
      v83 = operator new(0xE8uLL);
      v83[1] = 0;
      v83[2] = 0;
      *v83 = &off_1E42E2278;
      v84 = ggl::BufferData::BufferData((uint64_t)(v83 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v83[28] = ggl::Tile::View::reflection(void)::reflection;
      v83[3] = &off_1E42B97B0;
      *(_QWORD *)v330 = v84;
      *(_QWORD *)&v330[8] = v83;
      v316 = 0.0;
      v315 = 0.0;
      v85 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v85->__shared_owners_ = 0;
      v86 = (unint64_t *)&v85->__shared_owners_;
      v85->__shared_weak_owners_ = 0;
      v85->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v87 = ggl::BufferData::BufferData((uint64_t)&v85[1], qword_1EE55CC40, 2, 1, 6, 1);
      v85[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v85[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v305.f64[0] = v87;
      *(_QWORD *)&v305.f64[1] = v85;
      ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v81, *(_QWORD *)(v82 + 24), *(std::__shared_weak_count **)(v82 + 32), (uint64_t *)v330, (uint64_t *)&v315, (uint64_t *)&v305);
      *v80 = v81;
      do
        v88 = __ldaxr(v86);
      while (__stlxr(v88 - 1, v86));
      if (v88)
      {
        v89 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_127;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        v89 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_127;
      }
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (v91)
      {
LABEL_127:
        v92 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_128;
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      v92 = *(std::__shared_weak_count **)&v330[8];
      if (*(_QWORD *)&v330[8])
      {
LABEL_128:
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
LABEL_92:
      v58 = *(_QWORD **)(*(_QWORD *)(*v80 + 64) + 32);
      v59 = v58[1];
      v60 = (_OWORD *)v58[9];
      *v60 = v277;
      v60[1] = xmmword_19FFB3480;
      v80[9] = v313;
      if (v58[8] > v59)
        v59 = v58[8];
      v58[7] = 0;
      v58[8] = v59;
    }
    while (v41 > (uint64_t)(v40[8] - v40[7]) >> 3);
  }
  if (v282 > (uint64_t)(v40[11] - v40[10]) >> 3)
  {
    v279 = vdupq_n_s64(1uLL);
    do
    {
      v95 = operator new();
      v96 = v95;
      *(_OWORD *)v95 = 0u;
      *(_OWORD *)(v95 + 16) = 0u;
      *(_OWORD *)(v95 + 32) = 0u;
      *(_OWORD *)(v95 + 48) = 0u;
      *(_OWORD *)(v95 + 64) = 0u;
      *(_QWORD *)(v95 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v95 + 24) = "";
      *(_QWORD *)(v95 + 32) = 0;
      *(_DWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 40) = 0;
      *(_DWORD *)(v95 + 64) = 1065353216;
      *(_OWORD *)(v95 + 88) = 0u;
      *(_OWORD *)(v95 + 72) = 0u;
      *(int64x2_t *)(v95 + 104) = v279;
      *(_QWORD *)(v95 + 120) = 0;
      v40 = v285;
      v98 = (uint64_t *)v285[11];
      v97 = v285[12];
      if ((unint64_t)v98 >= v97)
      {
        v101 = (char *)v285[10];
        v102 = ((char *)v98 - v101) >> 3;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61)
          abort();
        v104 = v97 - (_QWORD)v101;
        if (v104 >> 2 > v103)
          v103 = v104 >> 2;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 >> 61)
            goto LABEL_312;
          v106 = (char *)operator new(8 * v105);
        }
        else
        {
          v106 = 0;
        }
        v107 = (uint64_t *)&v106[8 * v102];
        *v107 = v96;
        v99 = v107 + 1;
        if (v98 == (uint64_t *)v101)
        {
          v40 = v285;
        }
        else
        {
          v108 = (char *)(v98 - 1) - v101;
          if (v108 < 0x58)
            goto LABEL_318;
          if ((unint64_t)(v101 - v106) < 0x20)
            goto LABEL_318;
          v109 = (v108 >> 3) + 1;
          v110 = &v106[8 * v102 - 16];
          v111 = v98 - 2;
          v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *(_OWORD *)v111;
            *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
            *(_OWORD *)v110 = v113;
            v110 -= 32;
            v111 -= 4;
            v112 -= 4;
          }
          while (v112);
          v107 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
          v98 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
          if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_318:
            do
            {
              v114 = *--v98;
              *--v107 = v114;
            }
            while (v98 != (uint64_t *)v101);
          }
          v40 = v285;
          v98 = (uint64_t *)v285[10];
        }
        v40[10] = v107;
        v40[11] = v99;
        v40[12] = &v106[8 * v105];
        v100 = v286;
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v98 = v95;
        v99 = v98 + 1;
        v100 = v286;
      }
      v40[11] = v99;
      v115 = (_QWORD *)*(v99 - 1);
      v116 = (_QWORD *)operator new();
      v117 = v100[44];
      v118 = operator new(0xE8uLL);
      v118[1] = 0;
      v118[2] = 0;
      *v118 = &off_1E42E2278;
      v119 = ggl::BufferData::BufferData((uint64_t)(v118 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v118[28] = ggl::Tile::View::reflection(void)::reflection;
      v118[3] = &off_1E42B97B0;
      *(_QWORD *)v330 = v119;
      *(_QWORD *)&v330[8] = v118;
      v316 = 0.0;
      v315 = 0.0;
      v120 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v120->__shared_owners_ = 0;
      v121 = (unint64_t *)&v120->__shared_owners_;
      v120->__shared_weak_owners_ = 0;
      v120->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v122 = ggl::BufferData::BufferData((uint64_t)&v120[1], qword_1EE55CC40, 2, 1, 6, 1);
      v120[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v120[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v305.f64[0] = v122;
      *(_QWORD *)&v305.f64[1] = v120;
      ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(v116, *(_QWORD *)(v117 + 40), *(std::__shared_weak_count **)(v117 + 48), (uint64_t *)v330, (uint64_t *)&v315, (uint64_t *)&v305);
      *v115 = v116;
      do
        v123 = __ldaxr(v121);
      while (__stlxr(v123 - 1, v121));
      if (v123)
      {
        v124 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_169;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
        v124 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_169;
      }
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (v126)
      {
LABEL_169:
        v127 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_170;
        goto LABEL_136;
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      v127 = *(std::__shared_weak_count **)&v330[8];
      if (*(_QWORD *)&v330[8])
      {
LABEL_170:
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
LABEL_136:
      v115[9] = v313;
    }
    while (v282 > (uint64_t)(v40[11] - v40[10]) >> 3);
  }
  v130 = (_QWORD *)*((_QWORD *)a2 + 1);
  v131 = (int8x8_t)v130[1];
  v132 = v286;
  if (!*(_QWORD *)&v131)
    goto LABEL_199;
  v133 = (uint8x8_t)vcnt_s8(v131);
  v133.i16[0] = vaddlv_u8(v133);
  if (v133.u32[0] > 1uLL)
  {
    v134 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v131 <= 0x1AF456233693CD46uLL)
      v134 = 0x1AF456233693CD46uLL % *(_QWORD *)&v131;
  }
  else
  {
    v134 = (*(_QWORD *)&v131 - 1) & 0x1AF456233693CD46;
  }
  v135 = *(_QWORD **)(*v130 + 8 * v134);
  if (!v135)
    goto LABEL_199;
  v136 = (_QWORD *)*v135;
  if (!v136)
    goto LABEL_199;
  if (v133.u32[0] < 2uLL)
  {
    v137 = *(_QWORD *)&v131 - 1;
    while (1)
    {
      v139 = v136[1];
      if (v139 == 0x1AF456233693CD46)
      {
        if (v136[2] == 0x1AF456233693CD46)
          goto LABEL_197;
      }
      else if ((v139 & v137) != v134)
      {
        goto LABEL_199;
      }
      v136 = (_QWORD *)*v136;
      if (!v136)
        goto LABEL_199;
    }
  }
  while (1)
  {
    v138 = v136[1];
    if (v138 == 0x1AF456233693CD46)
      break;
    if (v138 >= *(_QWORD *)&v131)
      v138 %= *(_QWORD *)&v131;
    if (v138 != v134)
      goto LABEL_199;
LABEL_186:
    v136 = (_QWORD *)*v136;
    if (!v136)
      goto LABEL_199;
  }
  if (v136[2] != 0x1AF456233693CD46)
    goto LABEL_186;
LABEL_197:
  v140 = v136[5];
  if (*(_QWORD *)(v140 + 8) == 0x1AF456233693CD46)
  {
    v141 = *(_QWORD *)(v140 + 32);
    goto LABEL_200;
  }
LABEL_199:
  v141 = 0;
LABEL_200:
  md::LayoutContext::frameState(a2);
  v280 = *(unsigned __int8 *)(v142 + 128);
  v143 = (float64x2_t *)(v141 + 808);
  if (*a5)
    v143 = (float64x2_t *)(a5 + 8);
  v144 = v143[5];
  v309 = v143[4];
  v310 = v144;
  v145 = v143[7];
  v311 = v143[6];
  v312 = v145;
  v146 = v143[1];
  v305 = *v143;
  v306 = v146;
  v147 = v143[3];
  v307 = v143[2];
  v308 = v147;
  v148 = (_QWORD *)v286[34];
  v272 = (_QWORD *)v286[35];
  if (v148 != v272)
  {
    while (1)
    {
      v276 = v148;
      v149 = *v148;
      if (!v335
        || (*(_QWORD *)v330 = *v148, ((*(uint64_t (**)(_QWORD *, _BYTE *))(*v335 + 48))(v335, v330) & 1) != 0))
      {
        v150 = *(_QWORD *)(v149 + 384);
        v151 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v273 + 8), (unsigned __int8 *)(v150 + 16));
        if (v151)
        {
          v152 = v151[16];
          v153 = v151[17];
          if (v153 != v152)
            break;
        }
      }
LABEL_204:
      v148 = v276 + 1;
      if (v276 + 1 == v272)
        goto LABEL_300;
    }
    v283 = (unsigned __int8 *)(v150 + 168);
    while (2)
    {
      v154 = *(unsigned __int8 **)(v149 + 384);
      v155 = (_QWORD *)v132[44];
      if (v154[168] != 255)
      {
        v156 = v155[15];
        v157 = v40[10];
        v158 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v157 + 8 * v156) + 64) + 32);
        *(_OWORD *)v330 = 0uLL;
        v159 = *(_QWORD *)(v158 + 8);
        if (v159)
          v160 = *(_DWORD **)(v158 + 72);
        else
          v160 = 0;
        *(_QWORD *)&v191 = 0;
        *((_QWORD *)&v191 + 1) = v158;
        *(_OWORD *)v330 = v191;
        *(_QWORD *)&v330[16] = 0;
        *(_QWORD *)&v330[24] = v159;
        *(_QWORD *)&v330[40] = v160;
        *(_WORD *)&v330[32] = 1;
        v192 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v154 + 32))(v154);
        v160[8] = *v192;
        v160[9] = v192[1];
        v160[10] = v192[2];
        v193 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v149 + 384) + 32))(*(_QWORD *)(v149 + 384));
        v160[12] = v193[3];
        v160[13] = v193[4];
        v160[14] = v193[5];
        *(_QWORD *)(*(_QWORD *)(v157 + 8 * v156) + 32) = *(_QWORD *)v286[44];
        *(_QWORD *)(*(_QWORD *)(v157 + 8 * v156) + 40) = **(_QWORD **)(v157 + 8 * v156);
        v194 = *(uint64_t **)(v157 + 8 * v156);
        v194[7] = 0;
        *((_DWORD *)v194 + 12) = *(unsigned __int8 *)(v150 + 169) + a4;
        v195 = *v194;
        md::GeometryContext::transformConstantData(&v315, (uint64_t *)v281, v283, v280, 0.0, 0.0);
        v196 = *(_QWORD *)(v195 + 64);
        v197 = v315;
        v198 = v316;
        *(double *)(v196 + 16) = v315;
        *(_QWORD *)(v196 + 24) = 0;
        v199 = *(_QWORD *)(v195 + 160);
        if (v198 != 0.0)
        {
          v200 = (unint64_t *)(*(_QWORD *)&v198 + 8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v202 = *(std::__shared_weak_count **)(v199 + 24);
        *(double *)(v199 + 16) = v197;
        *(double *)(v199 + 24) = v198;
        if (!v202)
          goto LABEL_237;
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
          v205 = *(std::__shared_weak_count **)&v316;
          if (v316 != 0.0)
          {
LABEL_238:
            v206 = (unint64_t *)&v205->__shared_owners_;
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
        }
        else
        {
LABEL_237:
          v205 = *(std::__shared_weak_count **)&v316;
          if (v316 != 0.0)
            goto LABEL_238;
        }
        v222 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v307), v308);
        v223 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v309), v310);
        v224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v311), v312);
        v225 = *(uint64_t **)(v157 + 8 * v156);
        v227 = *v225;
        v226 = v225 + 1;
        v228 = **(_QWORD ***)(v227 + 64);
        v229 = v228[1];
        v230 = (float32x4_t *)v228[9];
        *v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v305), v306);
        v230[1] = v222;
        v230[2] = v223;
        v230[3] = v224;
        if (v228[8] > v229)
          v229 = v228[8];
        v228[7] = 0;
        v228[8] = v229;
        v231 = *(_QWORD **)(a3 + 80);
        v232 = *(_QWORD *)(a3 + 88);
        if ((unint64_t)v231 < v232)
        {
          if (v231)
            *v231 = v226;
          v233 = v231 + 1;
          goto LABEL_280;
        }
        v234 = *(_QWORD *)(a3 + 72);
        v235 = ((uint64_t)v231 - v234) >> 3;
        v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 61)
          abort();
        v237 = v232 - v234;
        if (v237 >> 2 > v236)
          v236 = v237 >> 2;
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
          v238 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v238 = v236;
        if (v238)
        {
          v239 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v238, 8);
          v240 = (_QWORD *)(v239 + 8 * v235);
          v241 = v239 + 8 * v238;
          if (v239)
            *v240 = v226;
        }
        else
        {
          v241 = 0;
          v240 = (_QWORD *)(8 * v235);
        }
        v243 = *(_QWORD *)(a3 + 72);
        v242 = *(_QWORD *)(a3 + 80);
        v244 = v242 - v243;
        if (v242 == v243)
        {
          v246 = v240;
          goto LABEL_278;
        }
        v245 = v244 - 8;
        if ((unint64_t)(v244 - 8) < 0x38)
        {
          v246 = v240;
        }
        else
        {
          v246 = v240;
          if ((unint64_t)(v242 - (_QWORD)v240) >= 0x20)
          {
            v247 = (v245 >> 3) + 1;
            v248 = v240 - 2;
            v249 = (__int128 *)(v242 - 16);
            v250 = v247 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v251 = *v249;
              *(v248 - 1) = *(v249 - 1);
              *v248 = v251;
              v248 -= 2;
              v249 -= 2;
              v250 -= 4;
            }
            while (v250);
            v246 = &v240[-(v247 & 0x3FFFFFFFFFFFFFFCLL)];
            v242 -= 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
            if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_277:
              v242 = *(_QWORD *)(a3 + 72);
LABEL_278:
              v233 = v240 + 1;
              *(_QWORD *)(a3 + 72) = v246;
              *(_QWORD *)(a3 + 80) = v240 + 1;
              v253 = *(_QWORD *)(a3 + 88);
              *(_QWORD *)(a3 + 88) = v241;
              if (v242)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v242, v253 - v242);
LABEL_280:
              *(_QWORD *)(a3 + 80) = v233;
              ++*(_QWORD *)(v286[44] + 120);
              if (*(_QWORD *)&v330[40])
              {
                v254 = *(_OWORD *)&v330[16];
                if (*(_QWORD *)&v330[24] != *(_QWORD *)&v330[16])
                {
                  v255 = *(_QWORD **)&v330[8];
                  v256 = v330[32];
                  v257 = v330[33];
                  if (*(_QWORD *)v330 && *(_BYTE *)(*(_QWORD *)&v330[8] + 17) != 2)
                    (*(void (**)(void))(**(_QWORD **)v330 + 64))();
                  if (v256 && !v257)
                  {
                    v258 = v255[7];
                    v259 = v255[8];
                    if (v259 == v258)
                      v258 = v255[10] - v255[9];
                    if ((unint64_t)v254 < v258)
                      v258 = v254;
                    if (v259 <= *((_QWORD *)&v254 + 1))
                      v259 = *((_QWORD *)&v254 + 1);
                    if (v259 == v258)
                      v259 = v258 + v255[10] - v255[9];
                    v255[7] = v258;
                    v255[8] = v259;
                  }
                }
              }
              v132 = v286;
LABEL_212:
              v40 = v285;
              v152 += 3;
              if (v152 == v153)
                goto LABEL_204;
              continue;
            }
          }
        }
        do
        {
          v252 = *(_QWORD *)(v242 - 8);
          v242 -= 8;
          *--v246 = v252;
        }
        while (v242 != v243);
        goto LABEL_277;
      }
      break;
    }
    v161 = v155[14];
    v162 = v40[7];
    *(_QWORD *)(*(_QWORD *)(v162 + 8 * v161) + 32) = *v155;
    *(_QWORD *)(*(_QWORD *)(v162 + 8 * v161) + 40) = **(_QWORD **)(v162 + 8 * v161);
    v163 = *(uint64_t **)(v162 + 8 * v161);
    v163[7] = 0;
    *((_DWORD *)v163 + 12) = *(unsigned __int8 *)(v150 + 169) + a4;
    if ((v280 - 1) > 2u)
    {
      v208 = 1 << *((_BYTE *)v152 + 1);
      v209 = 1.0 / (double)v208;
      v210 = v209 * (double)*((int *)v152 + 2);
      v211 = v209 * (double)(v208 + ~*((_DWORD *)v152 + 1));
      memset(&v299[8], 0, 32);
      *(double *)v299 = v209;
      *(double *)&v299[40] = v209;
      v300 = 0u;
      v301 = 0u;
      v302 = *(unint64_t *)&v209;
      *(double *)&v303 = v210;
      *((double *)&v303 + 1) = v211;
      v304 = xmmword_19FFB33A0;
      v212 = *v163;
      v213 = *(_QWORD *)(*v163 + 64);
      *(_QWORD *)(v213 + 24) = 0;
      v214 = v155[1];
      *(_QWORD *)(v213 + 16) = v214;
      v215 = *(_QWORD *)(v212 + 160);
      v216 = v155[2];
      if (v216)
      {
        v217 = (unint64_t *)(v216 + 8);
        do
          v218 = __ldxr(v217);
        while (__stxr(v218 + 1, v217));
      }
      v219 = *(std::__shared_weak_count **)(v215 + 24);
      *(_QWORD *)(v215 + 16) = v214;
      *(_QWORD *)(v215 + 24) = v216;
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
    }
    else
    {
      v164 = 1 << *(_BYTE *)(v150 + 169);
      v165 = 1.0 / (double)v164;
      v166 = *(int *)(v150 + 176);
      v167 = v164 + ~*(_DWORD *)(v150 + 172);
      *(double *)v330 = v165 * (double)v166;
      *(double *)&v330[8] = v165 * (double)v167;
      *(double *)&v330[16] = v165 + (double)v166 * v165;
      *(double *)&v330[24] = v165 + (double)v167 * v165;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v288, (double *)v330, 0.0, 0.0);
      v331.f64[1] = 0.0;
      memset(&v330[8], 0, 72);
      v333.f64[1] = 1.0;
      v332 = v294;
      v333.f64[0] = v295;
      *(double *)v330 = v296 - v294.f64[0];
      *(double *)&v330[40] = v297 - v294.f64[1];
      v331.f64[0] = v298 - v295;
      v168 = v291;
      v169 = v292;
      v170 = v168 + v168;
      v171 = (v168 + v168) * v168;
      v172 = (v169 + v169) * v169;
      v173 = v290;
      v174 = v173 + v173;
      v175 = (v173 + v173) * v291;
      v176 = (v169 + v169) * v293;
      v177 = v292 * (v173 + v173);
      v178 = 1.0 - (v173 + v173) * v173;
      v315 = 1.0 - (v171 + v172);
      v316 = v176 + v175;
      v319 = v175 - v176;
      v320 = v178 - v172;
      v323 = v293 * v170 + v177;
      v324 = v170 * v292 - v293 * v174;
      v317 = v177 - v293 * v170;
      v321 = v293 * v174 + v170 * v292;
      v325 = v178 - v171;
      v318 = 0;
      v322 = 0;
      v326 = 0;
      v327 = v288;
      v328 = v289;
      v329 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v287, &v315, (double *)v330);
      *(_OWORD *)v299 = v287[0];
      *(_OWORD *)&v299[16] = v287[1];
      *(_OWORD *)&v299[32] = v287[2];
      v300 = v287[3];
      v301 = v287[4];
      v302 = v287[5];
      v303 = v287[6];
      v304 = v287[7];
      v179 = **(_QWORD **)(v162 + 8 * v161);
      md::GeometryContext::transformConstantData((double *)v330, (uint64_t *)v281, v283, v280, 0.0, 0.0);
      v180 = *(_QWORD *)(v179 + 64);
      v181 = *(_OWORD *)v330;
      *(_QWORD *)(v180 + 16) = *(_QWORD *)v330;
      *(_QWORD *)(v180 + 24) = 0;
      v182 = *(_QWORD *)(v179 + 160);
      if (*((_QWORD *)&v181 + 1))
      {
        v183 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      v185 = *(std::__shared_weak_count **)(v182 + 24);
      *(_OWORD *)(v182 + 16) = v181;
      if (!v185)
        goto LABEL_224;
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
        v188 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
        {
LABEL_225:
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      else
      {
LABEL_224:
        v188 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_225;
      }
      v132 = v286;
    }
    gm::operator*<double,4,4,4>((double *)v330, v305.f64, (double *)v299);
    v260 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v330[32]), *(float64x2_t *)&v330[48]);
    v261 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v330[64]), v331);
    v262 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v332), v333);
    v263 = *(uint64_t **)(v162 + 8 * v161);
    v265 = *v263;
    v264 = (ggl::RenderItem *)(v263 + 1);
    v266 = **(_QWORD ***)(v265 + 64);
    v267 = v266[1];
    v268 = (float32x4_t *)v266[9];
    *v268 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v330), *(float64x2_t *)&v330[16]);
    v268[1] = v260;
    v268[2] = v261;
    v268[3] = v262;
    if (v266[8] > v267)
      v267 = v266[8];
    v266[7] = 0;
    v266[8] = v267;
    ggl::CommandBuffer::pushRenderItem(a3, v264);
    ++*(_QWORD *)(v132[44] + 112);
    goto LABEL_212;
  }
LABEL_300:
  v269 = v314;
  if (v314)
  {
    v270 = (unint64_t *)&v314->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  result = v335;
  if (v335 == v334)
  {
    v12 = 4;
    result = v334;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  else if (v335)
  {
    v12 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  return result;
}

void sub_19FBD1224(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3E68;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3E68;
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::operator()()
{
  return 1;
}

_QWORD *md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, _BYTE *a5)
{
  _QWORD *result;
  uint64_t *v7;
  int8x8_t v8;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v37;
  int v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _QWORD *v58;
  unint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  int8x8_t v131;
  _QWORD *v132;
  uint8x8_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float64x2_t *v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t *v153;
  unsigned __int8 *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  int v164;
  double v165;
  uint64_t v166;
  int v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  int v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  float32x4_t *v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _OWORD *v248;
  __int128 *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  _QWORD *v255;
  int v256;
  int v257;
  unint64_t v258;
  unint64_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t *v263;
  ggl::RenderItem *v264;
  uint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  float32x4_t *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v276;
  __int128 v277;
  int64x2_t v278;
  int64x2_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  unsigned __int8 *v283;
  _QWORD *v285;
  _QWORD *v286;
  _OWORD v287[8];
  __int128 v288;
  uint64_t v289;
  double v290;
  double v291;
  double v292;
  double v293;
  float64x2_t v294;
  double v295;
  double v296;
  double v297;
  double v298;
  _BYTE v299[48];
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  double v315;
  double v316;
  double v317;
  uint64_t v318;
  double v319;
  double v320;
  double v321;
  uint64_t v322;
  double v323;
  double v324;
  double v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  _BYTE v330[80];
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  _QWORD v334[3];
  _QWORD *v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  result = v334;
  v334[0] = &off_1E42D3D48;
  v335 = v334;
  v7 = (uint64_t *)*((_QWORD *)a2 + 1);
  v8 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v8)
  {
    v12 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v8 <= 0x3070CB6B3C7F21D3uLL)
      v11 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & 0x3070CB6B3C7F21D3;
  }
  v13 = *v7;
  v14 = *(_QWORD **)(v13 + 8 * v11);
  if (!v14)
    goto LABEL_25;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_25;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x3070CB6B3C7F21D3)
      {
        if (v15[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v17 & (*(_QWORD *)&v8 - 1)) != v11)
      {
        goto LABEL_25;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x3070CB6B3C7F21D3)
      break;
    if (v16 >= *(_QWORD *)&v8)
      v16 %= *(_QWORD *)&v8;
    if (v16 != v11)
      goto LABEL_25;
LABEL_12:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_25;
  }
  if (v15[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x3070CB6B3C7F21D3)
  {
    v281 = *(_QWORD *)(v18 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v281 = 0;
LABEL_26:
  if (v10.u32[0] > 1uLL)
  {
    v19 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v8 <= 0x99BED48DEFBBD82BLL)
      v19 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v8;
  }
  else
  {
    v19 = (*(_QWORD *)&v8 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v20 = *(_QWORD **)(v13 + 8 * v19);
  if (!v20)
    goto LABEL_49;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_49;
  if (v10.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x99BED48DEFBBD82BLL)
      {
        if (v21[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_49;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_49;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x99BED48DEFBBD82BLL)
      break;
    if (v23 >= *(_QWORD *)&v8)
      v23 %= *(_QWORD *)&v8;
    if (v23 != v19)
      goto LABEL_49;
LABEL_35:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_49;
  }
  if (v21[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_35;
LABEL_46:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_49:
    v273 = 0;
    if (v281)
      goto LABEL_50;
    goto LABEL_72;
  }
  v273 = *(_QWORD *)(v25 + 32);
  if (!v281)
    goto LABEL_72;
LABEL_50:
  v26 = *(_QWORD **)v273;
  v27 = *(unsigned __int16 **)(*(_QWORD *)v273 + 184);
  v28 = *(unsigned __int16 **)(*(_QWORD *)v273 + 192);
  if (v27 != v28)
  {
    v29 = (unsigned __int16 *)v26[15];
    while (1)
    {
      v30 = (unsigned __int16 *)v26[14];
      if (v30 != v29)
      {
        v30 = (unsigned __int16 *)v26[14];
        while (*v30 != *v27)
        {
          v30 += 56;
          if (v30 == v29)
          {
            v30 = (unsigned __int16 *)v26[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v30 + 8))
        break;
      if (++v27 == v28)
        goto LABEL_59;
    }
LABEL_73:
    *(_BYTE *)(a1 + 360) = 1;
    goto LABEL_74;
  }
LABEL_59:
  v31 = (unsigned __int16 *)v26[26];
  v32 = (unsigned __int16 *)v26[27];
  if (v31 != v32)
  {
    v34 = (unsigned __int16 *)v26[14];
    v33 = (unsigned __int16 *)v26[15];
    do
    {
      v37 = v34;
      if (v34 != v33)
      {
        v37 = v34;
        while (*v37 != *v31)
        {
          v37 += 56;
          if (v37 == v33)
          {
            v37 = v33;
            break;
          }
        }
      }
      v35 = *((unsigned __int8 *)v37 + 8);
      ++v31;
      if (v35)
        _ZF = v31 == v32;
      else
        _ZF = 1;
    }
    while (!_ZF);
    if (!v35)
      goto LABEL_73;
  }
  v38 = *(unsigned __int8 *)(a1 + 48);
  v39 = *(unsigned __int8 *)(a1 + 49);
  *(_BYTE *)(a1 + 360) = v38 != v39;
  if (v38 == v39)
  {
LABEL_72:
    result = v334;
    v12 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
LABEL_74:
  v40 = *(_QWORD **)(a1 + 352);
  v41 = v40[14];
  v282 = v40[15];
  v42 = *(uint64_t **)(a1 + 272);
  v43 = *(uint64_t **)(a1 + 280);
  v286 = (_QWORD *)a1;
  if (v42 != v43)
  {
    do
    {
      v44 = *v42;
      if (!v335
        || (*(_QWORD *)v330 = *v42, (*(unsigned int (**)(_QWORD *, _BYTE *))(*v335 + 48))(v335, v330)))
      {
        v45 = *(_QWORD *)(v44 + 384);
        v46 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v273 + 8), (unsigned __int8 *)(v45 + 16));
        if (v46)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * (v46[17] - v46[16]);
          if (*(unsigned __int8 *)(v45 + 168) == 255)
            v41 += v47;
          else
            v282 += v47;
        }
      }
      ++v42;
    }
    while (v42 != v43);
    v40 = (_QWORD *)v286[44];
  }
  v48 = v281 + 144;
  v49 = 128;
  if (*(unsigned __int8 *)(v281 + 320) - 1 >= 3)
    v48 = v281 + 128;
  else
    v49 = 144;
  v50 = *(_QWORD *)(v281 + v49);
  v51 = *(std::__shared_weak_count **)(v48 + 8);
  v313 = v50;
  v314 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
  }
  v285 = v40;
  if (v41 > (uint64_t)(v40[8] - v40[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v277 = _Q0;
    v278 = vdupq_n_s64(1uLL);
    do
    {
      v61 = operator new();
      v62 = v61;
      *(_OWORD *)v61 = 0u;
      *(_OWORD *)(v61 + 16) = 0u;
      *(_OWORD *)(v61 + 32) = 0u;
      *(_OWORD *)(v61 + 48) = 0u;
      *(_OWORD *)(v61 + 64) = 0u;
      *(_QWORD *)(v61 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v61 + 24) = "";
      *(_QWORD *)(v61 + 32) = 0;
      *(_DWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 40) = 0;
      *(_DWORD *)(v61 + 64) = 1065353216;
      *(_OWORD *)(v61 + 88) = 0u;
      *(_OWORD *)(v61 + 72) = 0u;
      *(int64x2_t *)(v61 + 104) = v278;
      *(_QWORD *)(v61 + 120) = 0;
      v40 = v285;
      v64 = (uint64_t *)v285[8];
      v63 = v285[9];
      if ((unint64_t)v64 >= v63)
      {
        v66 = (char *)v285[7];
        v67 = ((char *)v64 - v66) >> 3;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61)
          abort();
        v69 = v63 - (_QWORD)v66;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 61)
LABEL_312:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v71 = (char *)operator new(8 * v70);
        }
        else
        {
          v71 = 0;
        }
        v72 = (uint64_t *)&v71[8 * v67];
        *v72 = v62;
        v65 = v72 + 1;
        if (v64 == (uint64_t *)v66)
        {
          v40 = v285;
        }
        else
        {
          v73 = (char *)(v64 - 1) - v66;
          if (v73 < 0x58)
            goto LABEL_317;
          if ((unint64_t)(v66 - v71) < 0x20)
            goto LABEL_317;
          v74 = (v73 >> 3) + 1;
          v75 = &v71[8 * v67 - 16];
          v76 = v64 - 2;
          v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *(_OWORD *)v76;
            *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
            *(_OWORD *)v75 = v78;
            v75 -= 32;
            v76 -= 4;
            v77 -= 4;
          }
          while (v77);
          v72 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          v64 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_317:
            do
            {
              v79 = *--v64;
              *--v72 = v79;
            }
            while (v64 != (uint64_t *)v66);
          }
          v40 = v285;
          v64 = (uint64_t *)v285[7];
        }
        v40[7] = v72;
        v40[8] = v65;
        v40[9] = &v71[8 * v70];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v64 = v61;
        v65 = v64 + 1;
      }
      v40[8] = v65;
      v80 = (_QWORD *)*(v65 - 1);
      v81 = (_QWORD *)operator new();
      v82 = v286[44];
      v83 = operator new(0xE8uLL);
      v83[1] = 0;
      v83[2] = 0;
      *v83 = &off_1E42E2278;
      v84 = ggl::BufferData::BufferData((uint64_t)(v83 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v83[28] = ggl::Tile::View::reflection(void)::reflection;
      v83[3] = &off_1E42B97B0;
      *(_QWORD *)v330 = v84;
      *(_QWORD *)&v330[8] = v83;
      v316 = 0.0;
      v315 = 0.0;
      v85 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v85->__shared_owners_ = 0;
      v86 = (unint64_t *)&v85->__shared_owners_;
      v85->__shared_weak_owners_ = 0;
      v85->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v87 = ggl::BufferData::BufferData((uint64_t)&v85[1], qword_1EE55CC40, 2, 1, 6, 1);
      v85[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v85[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v305.f64[0] = v87;
      *(_QWORD *)&v305.f64[1] = v85;
      ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v81, *(_QWORD *)(v82 + 24), *(std::__shared_weak_count **)(v82 + 32), (uint64_t *)v330, (uint64_t *)&v315, (uint64_t *)&v305);
      *v80 = v81;
      do
        v88 = __ldaxr(v86);
      while (__stlxr(v88 - 1, v86));
      if (v88)
      {
        v89 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_127;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        v89 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_127;
      }
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (v91)
      {
LABEL_127:
        v92 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_128;
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      v92 = *(std::__shared_weak_count **)&v330[8];
      if (*(_QWORD *)&v330[8])
      {
LABEL_128:
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
LABEL_92:
      v58 = *(_QWORD **)(*(_QWORD *)(*v80 + 64) + 32);
      v59 = v58[1];
      v60 = (_OWORD *)v58[9];
      *v60 = v277;
      v60[1] = xmmword_19FFB3480;
      v80[9] = v313;
      if (v58[8] > v59)
        v59 = v58[8];
      v58[7] = 0;
      v58[8] = v59;
    }
    while (v41 > (uint64_t)(v40[8] - v40[7]) >> 3);
  }
  if (v282 > (uint64_t)(v40[11] - v40[10]) >> 3)
  {
    v279 = vdupq_n_s64(1uLL);
    do
    {
      v95 = operator new();
      v96 = v95;
      *(_OWORD *)v95 = 0u;
      *(_OWORD *)(v95 + 16) = 0u;
      *(_OWORD *)(v95 + 32) = 0u;
      *(_OWORD *)(v95 + 48) = 0u;
      *(_OWORD *)(v95 + 64) = 0u;
      *(_QWORD *)(v95 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v95 + 24) = "";
      *(_QWORD *)(v95 + 32) = 0;
      *(_DWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 40) = 0;
      *(_DWORD *)(v95 + 64) = 1065353216;
      *(_OWORD *)(v95 + 88) = 0u;
      *(_OWORD *)(v95 + 72) = 0u;
      *(int64x2_t *)(v95 + 104) = v279;
      *(_QWORD *)(v95 + 120) = 0;
      v40 = v285;
      v98 = (uint64_t *)v285[11];
      v97 = v285[12];
      if ((unint64_t)v98 >= v97)
      {
        v101 = (char *)v285[10];
        v102 = ((char *)v98 - v101) >> 3;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61)
          abort();
        v104 = v97 - (_QWORD)v101;
        if (v104 >> 2 > v103)
          v103 = v104 >> 2;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 >> 61)
            goto LABEL_312;
          v106 = (char *)operator new(8 * v105);
        }
        else
        {
          v106 = 0;
        }
        v107 = (uint64_t *)&v106[8 * v102];
        *v107 = v96;
        v99 = v107 + 1;
        if (v98 == (uint64_t *)v101)
        {
          v40 = v285;
        }
        else
        {
          v108 = (char *)(v98 - 1) - v101;
          if (v108 < 0x58)
            goto LABEL_318;
          if ((unint64_t)(v101 - v106) < 0x20)
            goto LABEL_318;
          v109 = (v108 >> 3) + 1;
          v110 = &v106[8 * v102 - 16];
          v111 = v98 - 2;
          v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *(_OWORD *)v111;
            *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
            *(_OWORD *)v110 = v113;
            v110 -= 32;
            v111 -= 4;
            v112 -= 4;
          }
          while (v112);
          v107 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
          v98 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
          if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_318:
            do
            {
              v114 = *--v98;
              *--v107 = v114;
            }
            while (v98 != (uint64_t *)v101);
          }
          v40 = v285;
          v98 = (uint64_t *)v285[10];
        }
        v40[10] = v107;
        v40[11] = v99;
        v40[12] = &v106[8 * v105];
        v100 = v286;
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v98 = v95;
        v99 = v98 + 1;
        v100 = v286;
      }
      v40[11] = v99;
      v115 = (_QWORD *)*(v99 - 1);
      v116 = (_QWORD *)operator new();
      v117 = v100[44];
      v118 = operator new(0xE8uLL);
      v118[1] = 0;
      v118[2] = 0;
      *v118 = &off_1E42E2278;
      v119 = ggl::BufferData::BufferData((uint64_t)(v118 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v118[28] = ggl::Tile::View::reflection(void)::reflection;
      v118[3] = &off_1E42B97B0;
      *(_QWORD *)v330 = v119;
      *(_QWORD *)&v330[8] = v118;
      v316 = 0.0;
      v315 = 0.0;
      v120 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v120->__shared_owners_ = 0;
      v121 = (unint64_t *)&v120->__shared_owners_;
      v120->__shared_weak_owners_ = 0;
      v120->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v122 = ggl::BufferData::BufferData((uint64_t)&v120[1], qword_1EE55CC40, 2, 1, 6, 1);
      v120[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v120[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v305.f64[0] = v122;
      *(_QWORD *)&v305.f64[1] = v120;
      ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(v116, *(_QWORD *)(v117 + 40), *(std::__shared_weak_count **)(v117 + 48), (uint64_t *)v330, (uint64_t *)&v315, (uint64_t *)&v305);
      *v115 = v116;
      do
        v123 = __ldaxr(v121);
      while (__stlxr(v123 - 1, v121));
      if (v123)
      {
        v124 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_169;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
        v124 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_169;
      }
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (v126)
      {
LABEL_169:
        v127 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_170;
        goto LABEL_136;
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      v127 = *(std::__shared_weak_count **)&v330[8];
      if (*(_QWORD *)&v330[8])
      {
LABEL_170:
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
LABEL_136:
      v115[9] = v313;
    }
    while (v282 > (uint64_t)(v40[11] - v40[10]) >> 3);
  }
  v130 = (_QWORD *)*((_QWORD *)a2 + 1);
  v131 = (int8x8_t)v130[1];
  v132 = v286;
  if (!*(_QWORD *)&v131)
    goto LABEL_199;
  v133 = (uint8x8_t)vcnt_s8(v131);
  v133.i16[0] = vaddlv_u8(v133);
  if (v133.u32[0] > 1uLL)
  {
    v134 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v131 <= 0x1AF456233693CD46uLL)
      v134 = 0x1AF456233693CD46uLL % *(_QWORD *)&v131;
  }
  else
  {
    v134 = (*(_QWORD *)&v131 - 1) & 0x1AF456233693CD46;
  }
  v135 = *(_QWORD **)(*v130 + 8 * v134);
  if (!v135)
    goto LABEL_199;
  v136 = (_QWORD *)*v135;
  if (!v136)
    goto LABEL_199;
  if (v133.u32[0] < 2uLL)
  {
    v137 = *(_QWORD *)&v131 - 1;
    while (1)
    {
      v139 = v136[1];
      if (v139 == 0x1AF456233693CD46)
      {
        if (v136[2] == 0x1AF456233693CD46)
          goto LABEL_197;
      }
      else if ((v139 & v137) != v134)
      {
        goto LABEL_199;
      }
      v136 = (_QWORD *)*v136;
      if (!v136)
        goto LABEL_199;
    }
  }
  while (1)
  {
    v138 = v136[1];
    if (v138 == 0x1AF456233693CD46)
      break;
    if (v138 >= *(_QWORD *)&v131)
      v138 %= *(_QWORD *)&v131;
    if (v138 != v134)
      goto LABEL_199;
LABEL_186:
    v136 = (_QWORD *)*v136;
    if (!v136)
      goto LABEL_199;
  }
  if (v136[2] != 0x1AF456233693CD46)
    goto LABEL_186;
LABEL_197:
  v140 = v136[5];
  if (*(_QWORD *)(v140 + 8) == 0x1AF456233693CD46)
  {
    v141 = *(_QWORD *)(v140 + 32);
    goto LABEL_200;
  }
LABEL_199:
  v141 = 0;
LABEL_200:
  md::LayoutContext::frameState(a2);
  v280 = *(unsigned __int8 *)(v142 + 128);
  v143 = (float64x2_t *)(v141 + 808);
  if (*a5)
    v143 = (float64x2_t *)(a5 + 8);
  v144 = v143[5];
  v309 = v143[4];
  v310 = v144;
  v145 = v143[7];
  v311 = v143[6];
  v312 = v145;
  v146 = v143[1];
  v305 = *v143;
  v306 = v146;
  v147 = v143[3];
  v307 = v143[2];
  v308 = v147;
  v148 = (_QWORD *)v286[34];
  v272 = (_QWORD *)v286[35];
  if (v148 != v272)
  {
    while (1)
    {
      v276 = v148;
      v149 = *v148;
      if (!v335
        || (*(_QWORD *)v330 = *v148, ((*(uint64_t (**)(_QWORD *, _BYTE *))(*v335 + 48))(v335, v330) & 1) != 0))
      {
        v150 = *(_QWORD *)(v149 + 384);
        v151 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v273 + 8), (unsigned __int8 *)(v150 + 16));
        if (v151)
        {
          v152 = v151[16];
          v153 = v151[17];
          if (v153 != v152)
            break;
        }
      }
LABEL_204:
      v148 = v276 + 1;
      if (v276 + 1 == v272)
        goto LABEL_300;
    }
    v283 = (unsigned __int8 *)(v150 + 168);
    while (2)
    {
      v154 = *(unsigned __int8 **)(v149 + 384);
      v155 = (_QWORD *)v132[44];
      if (v154[168] != 255)
      {
        v156 = v155[15];
        v157 = v40[10];
        v158 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v157 + 8 * v156) + 64) + 32);
        *(_OWORD *)v330 = 0uLL;
        v159 = *(_QWORD *)(v158 + 8);
        if (v159)
          v160 = *(_DWORD **)(v158 + 72);
        else
          v160 = 0;
        *(_QWORD *)&v191 = 0;
        *((_QWORD *)&v191 + 1) = v158;
        *(_OWORD *)v330 = v191;
        *(_QWORD *)&v330[16] = 0;
        *(_QWORD *)&v330[24] = v159;
        *(_QWORD *)&v330[40] = v160;
        *(_WORD *)&v330[32] = 1;
        v192 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v154 + 32))(v154);
        v160[8] = *v192;
        v160[9] = v192[1];
        v160[10] = v192[2];
        v193 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v149 + 384) + 32))(*(_QWORD *)(v149 + 384));
        v160[12] = v193[3];
        v160[13] = v193[4];
        v160[14] = v193[5];
        *(_QWORD *)(*(_QWORD *)(v157 + 8 * v156) + 32) = *(_QWORD *)v286[44];
        *(_QWORD *)(*(_QWORD *)(v157 + 8 * v156) + 40) = **(_QWORD **)(v157 + 8 * v156);
        v194 = *(uint64_t **)(v157 + 8 * v156);
        v194[7] = 0;
        *((_DWORD *)v194 + 12) = *(unsigned __int8 *)(v150 + 169) + a4;
        v195 = *v194;
        md::GeometryContext::transformConstantData(&v315, (uint64_t *)v281, v283, v280, 0.0, 0.0);
        v196 = *(_QWORD *)(v195 + 64);
        v197 = v315;
        v198 = v316;
        *(double *)(v196 + 16) = v315;
        *(_QWORD *)(v196 + 24) = 0;
        v199 = *(_QWORD *)(v195 + 160);
        if (v198 != 0.0)
        {
          v200 = (unint64_t *)(*(_QWORD *)&v198 + 8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v202 = *(std::__shared_weak_count **)(v199 + 24);
        *(double *)(v199 + 16) = v197;
        *(double *)(v199 + 24) = v198;
        if (!v202)
          goto LABEL_237;
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
          v205 = *(std::__shared_weak_count **)&v316;
          if (v316 != 0.0)
          {
LABEL_238:
            v206 = (unint64_t *)&v205->__shared_owners_;
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
        }
        else
        {
LABEL_237:
          v205 = *(std::__shared_weak_count **)&v316;
          if (v316 != 0.0)
            goto LABEL_238;
        }
        v222 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v307), v308);
        v223 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v309), v310);
        v224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v311), v312);
        v225 = *(uint64_t **)(v157 + 8 * v156);
        v227 = *v225;
        v226 = v225 + 1;
        v228 = **(_QWORD ***)(v227 + 64);
        v229 = v228[1];
        v230 = (float32x4_t *)v228[9];
        *v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v305), v306);
        v230[1] = v222;
        v230[2] = v223;
        v230[3] = v224;
        if (v228[8] > v229)
          v229 = v228[8];
        v228[7] = 0;
        v228[8] = v229;
        v231 = *(_QWORD **)(a3 + 80);
        v232 = *(_QWORD *)(a3 + 88);
        if ((unint64_t)v231 < v232)
        {
          if (v231)
            *v231 = v226;
          v233 = v231 + 1;
          goto LABEL_280;
        }
        v234 = *(_QWORD *)(a3 + 72);
        v235 = ((uint64_t)v231 - v234) >> 3;
        v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 61)
          abort();
        v237 = v232 - v234;
        if (v237 >> 2 > v236)
          v236 = v237 >> 2;
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
          v238 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v238 = v236;
        if (v238)
        {
          v239 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v238, 8);
          v240 = (_QWORD *)(v239 + 8 * v235);
          v241 = v239 + 8 * v238;
          if (v239)
            *v240 = v226;
        }
        else
        {
          v241 = 0;
          v240 = (_QWORD *)(8 * v235);
        }
        v243 = *(_QWORD *)(a3 + 72);
        v242 = *(_QWORD *)(a3 + 80);
        v244 = v242 - v243;
        if (v242 == v243)
        {
          v246 = v240;
          goto LABEL_278;
        }
        v245 = v244 - 8;
        if ((unint64_t)(v244 - 8) < 0x38)
        {
          v246 = v240;
        }
        else
        {
          v246 = v240;
          if ((unint64_t)(v242 - (_QWORD)v240) >= 0x20)
          {
            v247 = (v245 >> 3) + 1;
            v248 = v240 - 2;
            v249 = (__int128 *)(v242 - 16);
            v250 = v247 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v251 = *v249;
              *(v248 - 1) = *(v249 - 1);
              *v248 = v251;
              v248 -= 2;
              v249 -= 2;
              v250 -= 4;
            }
            while (v250);
            v246 = &v240[-(v247 & 0x3FFFFFFFFFFFFFFCLL)];
            v242 -= 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
            if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_277:
              v242 = *(_QWORD *)(a3 + 72);
LABEL_278:
              v233 = v240 + 1;
              *(_QWORD *)(a3 + 72) = v246;
              *(_QWORD *)(a3 + 80) = v240 + 1;
              v253 = *(_QWORD *)(a3 + 88);
              *(_QWORD *)(a3 + 88) = v241;
              if (v242)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v242, v253 - v242);
LABEL_280:
              *(_QWORD *)(a3 + 80) = v233;
              ++*(_QWORD *)(v286[44] + 120);
              if (*(_QWORD *)&v330[40])
              {
                v254 = *(_OWORD *)&v330[16];
                if (*(_QWORD *)&v330[24] != *(_QWORD *)&v330[16])
                {
                  v255 = *(_QWORD **)&v330[8];
                  v256 = v330[32];
                  v257 = v330[33];
                  if (*(_QWORD *)v330 && *(_BYTE *)(*(_QWORD *)&v330[8] + 17) != 2)
                    (*(void (**)(void))(**(_QWORD **)v330 + 64))();
                  if (v256 && !v257)
                  {
                    v258 = v255[7];
                    v259 = v255[8];
                    if (v259 == v258)
                      v258 = v255[10] - v255[9];
                    if ((unint64_t)v254 < v258)
                      v258 = v254;
                    if (v259 <= *((_QWORD *)&v254 + 1))
                      v259 = *((_QWORD *)&v254 + 1);
                    if (v259 == v258)
                      v259 = v258 + v255[10] - v255[9];
                    v255[7] = v258;
                    v255[8] = v259;
                  }
                }
              }
              v132 = v286;
LABEL_212:
              v40 = v285;
              v152 += 3;
              if (v152 == v153)
                goto LABEL_204;
              continue;
            }
          }
        }
        do
        {
          v252 = *(_QWORD *)(v242 - 8);
          v242 -= 8;
          *--v246 = v252;
        }
        while (v242 != v243);
        goto LABEL_277;
      }
      break;
    }
    v161 = v155[14];
    v162 = v40[7];
    *(_QWORD *)(*(_QWORD *)(v162 + 8 * v161) + 32) = *v155;
    *(_QWORD *)(*(_QWORD *)(v162 + 8 * v161) + 40) = **(_QWORD **)(v162 + 8 * v161);
    v163 = *(uint64_t **)(v162 + 8 * v161);
    v163[7] = 0;
    *((_DWORD *)v163 + 12) = *(unsigned __int8 *)(v150 + 169) + a4;
    if ((v280 - 1) > 2u)
    {
      v208 = 1 << *((_BYTE *)v152 + 1);
      v209 = 1.0 / (double)v208;
      v210 = v209 * (double)*((int *)v152 + 2);
      v211 = v209 * (double)(v208 + ~*((_DWORD *)v152 + 1));
      memset(&v299[8], 0, 32);
      *(double *)v299 = v209;
      *(double *)&v299[40] = v209;
      v300 = 0u;
      v301 = 0u;
      v302 = *(unint64_t *)&v209;
      *(double *)&v303 = v210;
      *((double *)&v303 + 1) = v211;
      v304 = xmmword_19FFB33A0;
      v212 = *v163;
      v213 = *(_QWORD *)(*v163 + 64);
      *(_QWORD *)(v213 + 24) = 0;
      v214 = v155[1];
      *(_QWORD *)(v213 + 16) = v214;
      v215 = *(_QWORD *)(v212 + 160);
      v216 = v155[2];
      if (v216)
      {
        v217 = (unint64_t *)(v216 + 8);
        do
          v218 = __ldxr(v217);
        while (__stxr(v218 + 1, v217));
      }
      v219 = *(std::__shared_weak_count **)(v215 + 24);
      *(_QWORD *)(v215 + 16) = v214;
      *(_QWORD *)(v215 + 24) = v216;
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
    }
    else
    {
      v164 = 1 << *(_BYTE *)(v150 + 169);
      v165 = 1.0 / (double)v164;
      v166 = *(int *)(v150 + 176);
      v167 = v164 + ~*(_DWORD *)(v150 + 172);
      *(double *)v330 = v165 * (double)v166;
      *(double *)&v330[8] = v165 * (double)v167;
      *(double *)&v330[16] = v165 + (double)v166 * v165;
      *(double *)&v330[24] = v165 + (double)v167 * v165;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v288, (double *)v330, 0.0, 0.0);
      v331.f64[1] = 0.0;
      memset(&v330[8], 0, 72);
      v333.f64[1] = 1.0;
      v332 = v294;
      v333.f64[0] = v295;
      *(double *)v330 = v296 - v294.f64[0];
      *(double *)&v330[40] = v297 - v294.f64[1];
      v331.f64[0] = v298 - v295;
      v168 = v291;
      v169 = v292;
      v170 = v168 + v168;
      v171 = (v168 + v168) * v168;
      v172 = (v169 + v169) * v169;
      v173 = v290;
      v174 = v173 + v173;
      v175 = (v173 + v173) * v291;
      v176 = (v169 + v169) * v293;
      v177 = v292 * (v173 + v173);
      v178 = 1.0 - (v173 + v173) * v173;
      v315 = 1.0 - (v171 + v172);
      v316 = v176 + v175;
      v319 = v175 - v176;
      v320 = v178 - v172;
      v323 = v293 * v170 + v177;
      v324 = v170 * v292 - v293 * v174;
      v317 = v177 - v293 * v170;
      v321 = v293 * v174 + v170 * v292;
      v325 = v178 - v171;
      v318 = 0;
      v322 = 0;
      v326 = 0;
      v327 = v288;
      v328 = v289;
      v329 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v287, &v315, (double *)v330);
      *(_OWORD *)v299 = v287[0];
      *(_OWORD *)&v299[16] = v287[1];
      *(_OWORD *)&v299[32] = v287[2];
      v300 = v287[3];
      v301 = v287[4];
      v302 = v287[5];
      v303 = v287[6];
      v304 = v287[7];
      v179 = **(_QWORD **)(v162 + 8 * v161);
      md::GeometryContext::transformConstantData((double *)v330, (uint64_t *)v281, v283, v280, 0.0, 0.0);
      v180 = *(_QWORD *)(v179 + 64);
      v181 = *(_OWORD *)v330;
      *(_QWORD *)(v180 + 16) = *(_QWORD *)v330;
      *(_QWORD *)(v180 + 24) = 0;
      v182 = *(_QWORD *)(v179 + 160);
      if (*((_QWORD *)&v181 + 1))
      {
        v183 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      v185 = *(std::__shared_weak_count **)(v182 + 24);
      *(_OWORD *)(v182 + 16) = v181;
      if (!v185)
        goto LABEL_224;
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
        v188 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
        {
LABEL_225:
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      else
      {
LABEL_224:
        v188 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_225;
      }
      v132 = v286;
    }
    gm::operator*<double,4,4,4>((double *)v330, v305.f64, (double *)v299);
    v260 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v330[32]), *(float64x2_t *)&v330[48]);
    v261 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v330[64]), v331);
    v262 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v332), v333);
    v263 = *(uint64_t **)(v162 + 8 * v161);
    v265 = *v263;
    v264 = (ggl::RenderItem *)(v263 + 1);
    v266 = **(_QWORD ***)(v265 + 64);
    v267 = v266[1];
    v268 = (float32x4_t *)v266[9];
    *v268 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v330), *(float64x2_t *)&v330[16]);
    v268[1] = v260;
    v268[2] = v261;
    v268[3] = v262;
    if (v266[8] > v267)
      v267 = v266[8];
    v266[7] = 0;
    v266[8] = v267;
    ggl::CommandBuffer::pushRenderItem(a3, v264);
    ++*(_QWORD *)(v132[44] + 112);
    goto LABEL_212;
  }
LABEL_300:
  v269 = v314;
  if (v314)
  {
    v270 = (unint64_t *)&v314->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  result = v335;
  if (v335 == v334)
  {
    v12 = 4;
    result = v334;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  else if (v335)
  {
    v12 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  return result;
}

void sub_19FBD2A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3D48;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3D48;
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::operator()()
{
  return 1;
}

uint64_t md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::~CartographicTiledVectorRenderLayer(_QWORD *a1)
{
  md::CartographicTiledRenderResources *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;

  *a1 = off_1E42A99F8;
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  v3 = (uint64_t **)*((_QWORD *)v2 + 7);
  v4 = (uint64_t **)*((_QWORD *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = **v3;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5[1] = (uint64_t)&off_1E42B59B0;
      v5[3] = 3131955885;
      MEMORY[0x1A1AF4E00](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  v7 = (uint64_t **)*((_QWORD *)v2 + 10);
  v8 = (uint64_t **)*((_QWORD *)v2 + 11);
  if (v7 == v8)
    goto LABEL_13;
  do
  {
    v9 = *v7;
    v10 = **v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9[1] = (uint64_t)&off_1E42B59B0;
    v9[3] = 3131955885;
    MEMORY[0x1A1AF4E00](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return md::CartographicTiledRenderLayer<md::FlyoverRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CA688;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CA688;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42CA688;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E42C9B90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E42C9B90;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42C9B90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42C9B90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  md::LabelManager *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5 || (v6 = std::__shared_weak_count::lock(v5)) == 0)
  {
LABEL_23:
    if (!v3)
      return;
    goto LABEL_24;
  }
  v7 = v6;
  v8 = *(md::LabelManager **)(a1 + 8);
  if (v8)
  {
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v25 = 0;
    v11 = operator new(0x20uLL);
    *v11 = &off_1E42CA688;
    v11[1] = v8;
    v11[2] = v4;
    v11[3] = v3;
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v25 = v11;
    md::LabelManager::queueCommand(v8, 21, 0, v24);
    v16 = v25;
    if (v25 == v24)
    {
      v17 = 4;
      v16 = v24;
    }
    else
    {
      if (!v25)
      {
LABEL_15:
        if (v3)
        {
          v18 = (unint64_t *)&v3->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        goto LABEL_20;
      }
      v17 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v16 + 8 * v17))(v16, v14, v15);
    goto LABEL_15;
  }
LABEL_20:
  v20 = (unint64_t *)&v7->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    goto LABEL_23;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v3)
    return;
LABEL_24:
  v22 = (unint64_t *)&v3->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19FBD3110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  char *v17;
  char *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
    {
LABEL_6:
      md::components::Material::~Material((md::components::Material *)&a9);
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v15)
      {
        v23 = (unint64_t *)&v15->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      _Unwind_Resume(a1);
    }
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  goto LABEL_6;
}

void std::__function::__func<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CA448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA448;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 8);
  if (!*((_BYTE *)result + 3375))
    return md::LabelManager::startStylesheetAnimation((uint64_t)result, *(_QWORD *)(a1 + 16));
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CA250;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CA250;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetAnimation", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CA208;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CA208;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetAnimation", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0,std::allocator<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0,std::allocator<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CA298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0,std::allocator<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CA298;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0,std::allocator<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0>,void ()(void)>::operator()(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64x2_t v4;
  int32x4_t v5;

  v1 = result;
  v2 = result[1];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 336) + 161);
  if (*((unsigned __int8 *)result + 16) != v3
    || (v4 = (uint64x2_t)vdupq_n_s64(v3),
        v5 = (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_19FFB5AF0),
        v4.i64[0] = *(_QWORD *)&vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_19FFB5B00), v5)) & 0xFF00FF00FF00FFLL,
        v5.i32[0] = *(_DWORD *)((char *)result + 17),
        (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v5.i8), *(int16x4_t *)v4.i8), 0xFuLL))) & 1) == 0)|| __PAIR64__(*((unsigned __int8 *)result + 22), *((unsigned __int8 *)result + 21)) != __PAIR64__(BYTE6(v3), BYTE5(v3))|| *((unsigned __int8 *)result + 23) != HIBYTE(v3))
  {
    result = md::LabelManager::startStylesheetAnimation(result[1], result[2]);
    if (!*((_BYTE *)v1 + 24))
    {
      *(_BYTE *)(v2 + 3375) = 0;
      return md::LabelManager::startStylesheetLabelAnimations((md::LabelManager *)v2);
    }
  }
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CA568;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CA568;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetLabelAnimations", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CA520;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CA520;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetLabelAnimations", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C9D40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C9D40;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  char v33;
  uint8_t buf[8];
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v38 = v37;
  v35[0] = &off_1E42D97A0;
  v36 = v35;
  v37[0] = &off_1E42D97E8;
  v40 = v39;
  v39[0] = &off_1E42D97A0;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetDidChange", (const char *)&unk_1A0189141, buf, 2u);
  }

  v3 = v36;
  if (v36 == v35)
  {
    v4 = 4;
    v3 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v5 = v38;
  if (v38 == v37)
  {
    v6 = 4;
    v5 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  v7 = *(_QWORD *)(v1 + 3488);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 520);
    v9 = *(std::__shared_weak_count **)(v7 + 528);
    if (!v9)
      goto LABEL_21;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v8)
        goto LABEL_40;
    }
    else
    {
LABEL_21:
      if (!v8)
        goto LABEL_40;
    }
    v13 = *(_QWORD *)(v1 + 3488);
    v14 = *(_QWORD *)(v13 + 520);
    v15 = *(std::__shared_weak_count **)(v13 + 528);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v14);
    v19 = md::LabelStyleCache::setVariantStyleType(*(_QWORD *)(v1 + 336), v18);
    if (v19)
    {
      v20 = *(_QWORD *)(v1 + 168);
      v21 = *(_QWORD **)v20;
      v22 = *(_QWORD **)(v20 + 8);
      if (*(_QWORD **)v20 != v22)
      {
        do
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 8))(*v21);
          ++v21;
        }
        while (v21 != v22);
      }
    }
    if (!v15)
      goto LABEL_32;
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v19)
        goto LABEL_40;
    }
    else
    {
LABEL_32:
      if (!v19)
        goto LABEL_40;
    }
    *(_BYTE *)(v1 + 3373) = 1;
    v25 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(v1 + 136);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 56);
        if (v27)
        {
          *(_QWORD *)buf = v1;
          v33 = 9;
          (*(void (**)(uint64_t, uint8_t *, char *))(*(_QWORD *)v27 + 48))(v27, buf, &v33);
        }
      }
    }
  }
LABEL_40:
  md::LabelStyleCache::stylesheetDidChange(*(std::mutex **)(v1 + 336));
  v28 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if ((v28 & 1) != 0)
  {
    v29 = *(_QWORD *)(v1 + 136);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 56);
      if (v30)
      {
        *(_QWORD *)buf = v1;
        v33 = 9;
        (*(void (**)(uint64_t, uint8_t *, char *))(*(_QWORD *)v30 + 48))(v30, buf, &v33);
      }
    }
  }
  if (!v40)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19FBD3B8CLL);
  }
  (*(void (**)(_QWORD *))(*v40 + 48))(v40);
  result = v40;
  if (v40 == v39)
  {
    v32 = 4;
    result = v39;
  }
  else
  {
    if (!v40)
      return result;
    v32 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v32))();
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D97A0;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D97A0;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetDidChange", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D97E8;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D97E8;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetDidChange", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA0E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA0E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 3375))
  {
    *(_BYTE *)(v1 + 3375) = 0;
    if (*(_BYTE *)(v1 + 3376))
      md::LabelManager::startStylesheetLabelAnimations((md::LabelManager *)v1);
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 152))(*(_QWORD *)(v1 + 240));
  }
  v2 = *(_QWORD *)(v1 + 3488);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 520);
    v4 = *(std::__shared_weak_count **)(v2 + 528);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v3);
    v8 = md::LabelStyleCache::setVariantStyleType(*(_QWORD *)(v1 + 336), v7);
    if (v8)
    {
      v9 = *(_QWORD *)(v1 + 168);
      v10 = *(_QWORD **)v9;
      v11 = *(_QWORD **)(v9 + 8);
      if (*(_QWORD **)v9 != v11)
      {
        do
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 8))(*v10);
          ++v10;
        }
        while (v10 != v11);
      }
    }
    if (!v4)
      goto LABEL_16;
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v8)
        goto LABEL_22;
    }
    else
    {
LABEL_16:
      if (!v8)
        goto LABEL_22;
    }
    *(_BYTE *)(v1 + 3373) = 1;
    v14 = atomic_load((unsigned __int8 *)(v1 + 3058));
    if ((v14 & 1) != 0)
    {
      v15 = *(_QWORD *)(v1 + 136);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 56);
        if (v16)
        {
          v21 = v1;
          v20 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v16 + 48))(v16, &v21, &v20);
        }
      }
    }
  }
LABEL_22:
  v17 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if ((v17 & 1) != 0)
  {
    v18 = *(_QWORD *)(v1 + 136);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 56);
      if (v19)
      {
        v21 = v1;
        v20 = 9;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v19 + 48))(v19, &v21, &v20);
      }
    }
  }
}

void sub_19FBD3FB4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::LabelManager::resolveLabelScaleFactor(md::LabelManager *this)
{
  int v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t (**v17)();
  unsigned __int8 v18;
  uint64_t (***v19)();
  uint64_t (**v20)();
  unsigned __int8 v21;
  uint64_t (***v22)();
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned __int8 *)this + 3368);
  v2 = 0x505040302uLL >> (8 * (v1 - 1));
  if ((v1 - 1) > 4)
    LOBYTE(v2) = 1;
  if (*((_BYTE *)this + 3370))
    v3 = v2;
  else
    v3 = *((_BYTE *)this + 3368);
  *((_BYTE *)this + 3369) = v3;
  v4 = *((_QWORD *)this + 42);
  std::mutex::lock((std::mutex *)v4);
  if (*(unsigned __int8 *)(v4 + 159) != v1)
  {
    *(_BYTE *)(v4 + 159) = v1;
    md::LabelStyleCache::updateNavRoadSignScale((md::LabelStyleCache *)v4);
  }
  if (*(unsigned __int8 *)(v4 + 158) != v3)
  {
    *(_BYTE *)(v4 + 158) = v3;
    v20 = &off_1E42CC410;
    v21 = v3;
    v22 = &v20;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(v4 + 264), (uint64_t)&v20);
    v5 = v22;
    if (v22 == &v20)
    {
      v6 = 4;
      v5 = &v20;
    }
    else
    {
      if (!v22)
        goto LABEL_14;
      v6 = 5;
    }
    (*v5)[v6]();
LABEL_14:
    v17 = &off_1E42CC410;
    v18 = v3;
    v19 = &v17;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(v4 + 376), (uint64_t)&v17);
    v7 = v19;
    if (v19 == &v17)
    {
      v8 = 4;
      v7 = &v17;
    }
    else
    {
      if (!v19)
        goto LABEL_19;
      v8 = 5;
    }
    (*v7)[v8]();
LABEL_19:
    v9 = *(_QWORD *)(v4 + 432);
    v10 = *(unsigned __int8 *)(v4 + 158);
    if (*(unsigned __int8 *)(v9 + 93) != v10)
    {
      *(_BYTE *)(v9 + 93) = v10;
      *(_BYTE *)(v9 + 136) = -1;
      *(_BYTE *)(v9 + 125) = 0;
      v11 = *(std::__shared_weak_count **)(v9 + 416);
      *(_QWORD *)(v9 + 408) = 0;
      *(_QWORD *)(v9 + 416) = 0;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = *(std::__shared_weak_count **)(v9 + 432);
      *(_QWORD *)(v9 + 424) = 0;
      *(_QWORD *)(v9 + 432) = 0;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)v4);
}

void sub_19FBD41FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void md::LabelManager::styleForFeatureAttributes(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  _QWORD v62[2];

  v7 = *(_QWORD *)(a2 + 128);
  if (!v7 || (v8 = atomic_load((unsigned __int8 *)(v7 + 3659)), (v8 & 1) == 0))
  {
    md::createFeatureAttributeSet((gss::Allocator *)&v55, a3);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v60, (uint64_t *)(a2 + 184), &v55, a4);
    if (v55)
    {
      v56 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 40))(v58, v55, v57 - v55);
    }
    *a1 = 0;
    a1[1] = 0;
    v9 = v60;
    v10 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v56 = (uint64_t)v10;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v56 = 0;
    }
    v57 = 0;
    v58 = 0;
    v55 = v9;
    v59 = 0;
    if (v9)
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v57);
      v59 = v17;
      if (!v10)
        goto LABEL_25;
    }
    else
    {
      v17 = 0;
      v59 = 0;
      if (!v10)
        goto LABEL_25;
    }
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    v17 = v59;
LABEL_25:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v55);
    if (v17)
    {
      v20 = a2 + 208;
      md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::find((uint64_t)&v55, a2 + 208, &v60);
      if ((_BYTE)v57)
      {
        v22 = v55;
        v21 = v56;
        if (v56)
        {
          v23 = (unint64_t *)(v56 + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = (std::__shared_weak_count *)a1[1];
        *a1 = v22;
        a1[1] = v21;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      else
      {
        if (*a1)
          goto LABEL_67;
        v38 = operator new(0x1E8uLL);
        v39 = v38;
        v38[1] = 0;
        v38[2] = 0;
        *v38 = &off_1E42DAC90;
        v40 = v38 + 3;
        v41 = v61;
        v62[0] = v60;
        v62[1] = v61;
        if (v61)
        {
          v42 = (unint64_t *)&v61->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        md::LabelStyle::LabelStyle((uint64_t)(v38 + 3), v62, (_QWORD *)(a2 + 136), *(_BYTE *)(a2 + 156), *(_BYTE *)(a2 + 158), *(_QWORD *)(a2 + 161), *(_BYTE *)(a2 + 160), *(float *)(a2 + 152));
        if (v41)
        {
          v44 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v46 = (std::__shared_weak_count *)a1[1];
        *a1 = (uint64_t)v40;
        a1[1] = (uint64_t)v39;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::insert(v20, &v60, a1);
      }
      if (!(_BYTE)v57)
        goto LABEL_67;
      v49 = (std::__shared_weak_count *)v56;
      if (!v56)
        goto LABEL_67;
      v50 = (unint64_t *)(v56 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (v51)
      {
LABEL_67:
        v52 = v61;
        if (v61)
        {
          v53 = (unint64_t *)&v61->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        return;
      }
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      v37 = v49;
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 128);
      if (!v28)
        goto LABEL_67;
      v29 = atomic_load((unsigned __int8 *)(v28 + 3658));
      if ((v29 & 1) == 0)
        goto LABEL_67;
      v31 = *(_QWORD *)(a2 + 432);
      v30 = *(_QWORD *)(a2 + 440);
      if (v30)
      {
        v32 = (unint64_t *)(v30 + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = (std::__shared_weak_count *)a1[1];
      *a1 = v31;
      a1[1] = v30;
      if (!v34)
        goto LABEL_67;
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (v36)
        goto LABEL_67;
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      v37 = v34;
    }
    std::__shared_weak_count::__release_weak(v37);
    goto LABEL_67;
  }
  v14 = *(_QWORD *)(a2 + 440);
  *a1 = *(_QWORD *)(a2 + 432);
  a1[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
}

void sub_19FBD461C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if ((_BYTE)a12)
  {
    if (a11)
    {
      p_shared_owners = (unint64_t *)&a11->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
        std::__shared_weak_count::__release_weak(a11);
      }
    }
  }
  v20 = *(std::__shared_weak_count **)(v16 + 8);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (a16)
  {
    v23 = (unint64_t *)&a16->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<unsigned char,std::unique_ptr<md::MaterialRaster>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  md::MaterialRaster *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (md::MaterialRaster *)v2[3];
      v2[3] = 0;
      if (v6)
      {
        md::MaterialRaster::~MaterialRaster(v6);
        MEMORY[0x1A1AF4E00]();
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void md::MaterialRaster::~MaterialRaster(md::MaterialRaster *this)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_17;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void altitude::TransitionTileJob::~TransitionTileJob(altitude::TransitionTileJob *this)
{
  altitude::TransitionTileJob::~TransitionTileJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &off_1E42C52B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  karo::Job::~Job(this);
}

void altitude::TransitionTileJob::jobStep(altitude::TransitionTileJob *this)
{
  altitude::TransitionTileJob *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  std::string::size_type v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  const char *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type size;
  std::string::value_type *v36;
  int v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  __n128 v44;
  double v45;
  double v51;
  unint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __n128 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  std::once_flag::_State_type *v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  std::once_flag::_State_type *v78;
  uint64_t *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::once_flag::_State_type *v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  std::once_flag::_State_type *v101;
  uint64_t *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  std::once_flag::_State_type *v107;
  uint64_t *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  std::once_flag::_State_type *v113;
  uint64_t *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  unint64_t v117;
  std::once_flag::_State_type *v118;
  unint64_t *v119;
  uint64_t *v120;
  std::__shared_weak_count *v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  std::once_flag::_State_type *v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  std::once_flag::_State_type *v152;
  uint64_t v153;
  char v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  float32x2_t *v170;
  uint64_t v171;
  uint64_t v172;
  double *v173;
  float64x2_t *v174;
  double *v175;
  uint64_t v176;
  __n128 v177;
  __n128 v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  double *v182;
  unint64_t v183;
  uint64_t v184;
  double *v185;
  float *v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  long double v201;
  long double v202;
  long double v203;
  double v204;
  double v205;
  double v206;
  __double2 v207;
  double v208;
  __double2 v209;
  double v210;
  long double v211;
  double v212;
  double v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  double *v217;
  double *v218;
  float64x2_t *v219;
  __int128 v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  double *v226;
  double *v227;
  char *v228;
  void *v229;
  unint64_t v230;
  BOOL v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int v235;
  double *v236;
  float *v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  long double v252;
  long double v253;
  long double v254;
  double v255;
  double v256;
  double v257;
  __double2 v258;
  double v259;
  __double2 v260;
  double v261;
  long double v262;
  double v263;
  double v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  double *v268;
  double *v269;
  double *v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  float32x2_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  uint64_t v278;
  float32x2_t *v279;
  char *v280;
  int *v281;
  unsigned int *v282;
  unsigned int *v283;
  unsigned int *v284;
  unsigned int *v285;
  unsigned int *v286;
  uint64_t v287;
  int v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  char *v298;
  char *v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  float64x2_t v305;
  int v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  uint64_t v311;
  int32x2_t v312;
  float64x2_t v313;
  double *v314;
  float64x2_t v315;
  int32x2_t v316;
  int64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  unsigned __int8 v320;
  int v321;
  double v322;
  int32x2_t v323;
  __int32 v324;
  __int32 v325;
  double v326;
  unsigned __int32 v327;
  double v328;
  uint64_t v329;
  double v330;
  char *v331;
  int v332;
  char *v333;
  double *v334;
  double v335;
  double v336;
  double v337;
  int *v338;
  int v339;
  int v340;
  int v341;
  long double v342;
  long double v343;
  double v344;
  long double v345;
  double v346;
  __double2 v347;
  double v348;
  double v349;
  __double2 v350;
  float v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  unint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  unsigned int v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  unint64_t v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  char *v387;
  unint64_t v388;
  unint64_t shared_weak_owners;
  uint64_t v390;
  std::__shared_weak_count_vtbl *v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  void (__cdecl **p_on_zero_shared)(std::__shared_count *__hidden);
  __int128 *v397;
  unint64_t v398;
  __int128 v399;
  unint64_t v400;
  uint64_t v401;
  _WORD *v402;
  __int16 *v403;
  __int16 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  __int128 v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  std::__shared_weak_count_vtbl *v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  char *v419;
  float32x2_t *v420;
  float32x2_t *v421;
  uint64_t v422;
  _DWORD *p_get_deleter;
  uint64_t v424;
  float32x2_t *v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  std::__shared_weak_count_vtbl *v431;
  unsigned __int8 v432;
  std::__shared_weak_count *v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  __int128 v436;
  unint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  uint64_t v482;
  int8x16_t v483;
  double v484;
  int8x16_t v485;
  double v486;
  double v487;
  int8x16_t v488;
  int8x16_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  unint64_t v499;
  _OWORD *v500;
  _QWORD *v501;
  unint64_t v502;
  __int128 v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  std::__shared_weak_count *v506;
  unint64_t v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  unint64_t v514;
  _QWORD *v515;
  unint64_t v516;
  _QWORD *v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  std::__shared_weak_count_vtbl *v521;
  unsigned __int8 v522;
  std::__shared_weak_count *v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  __int128 v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t *v531;
  uint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  uint64_t v572;
  int8x16_t v573;
  double v574;
  int8x16_t v575;
  double v576;
  double v577;
  int8x16_t v578;
  int8x16_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  unint64_t v589;
  _OWORD *v590;
  _QWORD *v591;
  unint64_t v592;
  __int128 v593;
  std::__shared_weak_count *v594;
  unint64_t *v595;
  std::__shared_weak_count *v596;
  unint64_t v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  _QWORD *v604;
  unint64_t v605;
  _QWORD *v606;
  unint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t *v610;
  unint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  uint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  std::__shared_weak_count *v629;
  __n128 v630;
  __n128 v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  _QWORD *v635;
  unint64_t v636;
  __n128 *v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t *v641;
  unint64_t v642;
  std::__shared_weak_count *v643;
  unint64_t *v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t *v648;
  unint64_t v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  uint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  std::__shared_weak_count *v660;
  __n128 v661;
  __n128 v662;
  unint64_t *v663;
  unint64_t v664;
  unint64_t v665;
  _QWORD *v666;
  unint64_t v667;
  __n128 *v668;
  unint64_t v669;
  unsigned int v670;
  char *v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t *v675;
  uint64_t *v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t *v679;
  unint64_t v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  unsigned int i;
  char *v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t *v689;
  uint64_t *v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t *v693;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  __int128 *j;
  __int128 *v699;
  __int128 *k;
  __int128 *v701;
  unint64_t v702;
  uint64_t v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  std::__shared_weak_count_vtbl *v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t v710;
  char *v711;
  float32x2_t *v712;
  float32x2_t *v713;
  uint64_t v714;
  _DWORD *v715;
  _DWORD *v716;
  uint64_t v717;
  float32x2_t *v718;
  unint64_t v719;
  uint64_t *v720;
  unint64_t v721;
  uint64_t *v722;
  uint64_t v723;
  std::__shared_weak_count_vtbl *v724;
  unsigned __int8 v725;
  std::__shared_weak_count *v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  __int128 v729;
  unint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t *v734;
  uint64_t v735;
  _QWORD *v736;
  uint64_t v737;
  unint64_t *v738;
  unint64_t v739;
  std::__shared_weak_count *v740;
  unint64_t *v741;
  unint64_t v742;
  std::__shared_weak_count *v743;
  unint64_t *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  unint64_t v752;
  std::__shared_weak_count *v753;
  unint64_t *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  std::__shared_weak_count *v759;
  unint64_t *v760;
  unint64_t v761;
  unint64_t v762;
  std::__shared_weak_count *v763;
  unint64_t *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unint64_t v768;
  std::__shared_weak_count *v769;
  unint64_t *v770;
  unint64_t v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  uint64_t v775;
  int8x16_t v776;
  double v777;
  int8x16_t v778;
  double v779;
  double v780;
  int8x16_t v781;
  int8x16_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  unint64_t v789;
  uint64_t v790;
  _QWORD *v791;
  unint64_t v792;
  _OWORD *v793;
  _QWORD *v794;
  unint64_t v795;
  __int128 v796;
  std::__shared_weak_count *v797;
  unint64_t *v798;
  std::__shared_weak_count *v799;
  unint64_t v800;
  _QWORD *v801;
  unint64_t v802;
  unsigned __int8 v803;
  unsigned __int8 v804;
  uint64_t v805;
  unint64_t v806;
  std::__shared_weak_count *v807;
  unint64_t *v808;
  unint64_t v809;
  unint64_t v810;
  std::__shared_weak_count *shared_owners;
  unint64_t *v812;
  unint64_t v813;
  unint64_t v814;
  unint64_t v815;
  unint64_t v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  _QWORD *v823;
  unint64_t v824;
  _QWORD *v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t *v829;
  unint64_t v830;
  std::__shared_weak_count *v831;
  unint64_t *v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t *v836;
  unint64_t v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  uint64_t v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  unint64_t v847;
  std::__shared_weak_count *v848;
  __n128 v849;
  __n128 v850;
  unint64_t *v851;
  unint64_t v852;
  unint64_t v853;
  _QWORD *v854;
  unint64_t v855;
  __n128 *v856;
  unint64_t v857;
  unint64_t v858;
  unsigned __int8 v859;
  unsigned __int8 v860;
  int v861;
  unsigned __int8 v862;
  int v863;
  uint64_t v864;
  geo::read_write_lock *v865;
  const char *v866;
  malloc_zone_t *zone;
  int v868;
  uint64_t v869;
  geo::read_write_lock *v870;
  const char *v871;
  malloc_zone_t *v872;
  unsigned __int8 v873;
  unsigned __int8 v874;
  unsigned __int8 v875;
  unsigned __int8 v876;
  unsigned __int8 v877;
  unsigned __int8 v878;
  unsigned __int8 v879;
  unint64_t *v880;
  unint64_t v881;
  std::__shared_weak_count *v882;
  __n128 v883;
  BOOL v884;
  uint64_t *v885;
  _QWORD *v886;
  unsigned int *v887;
  unsigned int *v888;
  unsigned int *v889;
  unsigned int *v890;
  int *v891;
  unsigned int *v892;
  unsigned int v893;
  unsigned int v894;
  uint64_t v895;
  _QWORD *v896;
  uint64_t v897;
  __n128 v898;
  char v899;
  uint64_t v900;
  char *v901;
  float64x2_t *v902;
  uint64_t v903;
  std::__shared_weak_count *v904;
  std::__shared_weak_count *v905;
  unint64_t v906;
  unint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  float64x2_t v912;
  unint64_t v913;
  _QWORD *v914;
  altitude::TransitionTileJob *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  unint64_t v920;
  unint64_t v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t *v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  float32x2_t *__p;
  float32x2_t *__pa;
  int __sz;
  double __sz_4;
  size_t __sz_4a;
  size_t __sz_4b;
  double v945;
  uint64_t v946;
  uint64_t v947;
  char *v948;
  double v949;
  std::__shared_weak_count_vtbl *v950;
  unint64_t v951;
  double v952;
  int v953;
  std::__shared_weak_count *v954;
  uint64_t v955;
  double v956;
  unsigned int v957;
  __n128 v958;
  __n128 v959;
  char *v960;
  char *v961;
  double v962;
  uint64_t v963;
  std::__shared_weak_count *v964;
  void *v965;
  double *v966;
  unint64_t v967;
  uint64_t v968;
  uint64_t v969;
  unsigned int v970;
  __n128 v971;
  __n128 v972;
  void *v973;
  size_t v974;
  int64_t v975;
  std::string __dst;
  std::string v977;
  _DWORD v978[2];
  _BYTE v979[32];
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  uint64_t v984;

  v1 = this;
  v984 = *MEMORY[0x1E0C80C00];
  *((double *)this + 36) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  v2 = *((_DWORD *)v1 + 60);
  v3 = *((_DWORD *)v1 + 64);
  v4 = 192;
  if (v2 <= v3)
    v5 = 192;
  else
    v5 = 208;
  if (v2 <= v3)
    v4 = 208;
  v6 = *(_QWORD **)((char *)v1 + v4);
  v7 = *(_QWORD *)((char *)v1 + v5);
  v8 = 272;
  if (v2 <= v3)
    v8 = 273;
  __sz = *((unsigned __int8 *)v1 + v8);
  v931 = **(_QWORD **)(v7 + 48);
  v9 = *(unint64_t **)(*(_QWORD *)(v931 + 216) + 64);
  v10 = (std::__shared_weak_count *)v9[1];
  v967 = *v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v882 = v10;
  v13 = operator new();
  v14 = *((_QWORD *)v1 + 24);
  v15 = (const char *)(v14 + 8);
  if (*(char *)(v14 + 31) < 0)
    v15 = *(const char **)v15;
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_886:
    abort();
  v17 = v16;
  v896 = (_QWORD *)v7;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__r_.__value_.__l.__size_ = v17;
    goto LABEL_20;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
  p_dst = &__dst;
  if (v16)
LABEL_20:
    memmove(p_dst, v15, v17);
  p_dst->__r_.__value_.__s.__data_[v17] = 0;
  v21 = std::string::insert(&__dst, 0, "/morphactor/", 0xCuLL);
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v977.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v977.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v977, "->", 2uLL);
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)v979 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v979[16] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *((_QWORD *)v1 + 26);
  v26 = (const char *)(v25 + 8);
  if (*(char *)(v25 + 31) < 0)
    v26 = *(const char **)v26;
  v27 = strlen(v26);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_886;
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v975 = v31 | 0x8000000000000000;
    v973 = v29;
    v974 = v28;
    goto LABEL_30;
  }
  HIBYTE(v975) = v27;
  v29 = &v973;
  if (v27)
LABEL_30:
    memmove(v29, v26, v28);
  *((_BYTE *)v29 + v28) = 0;
  if (v975 >= 0)
    v32 = (const std::string::value_type *)&v973;
  else
    v32 = (const std::string::value_type *)v973;
  if (v975 >= 0)
    v33 = HIBYTE(v975);
  else
    v33 = v974;
  v34 = std::string::append((std::string *)v979, v32, v33);
  v36 = (std::string::value_type *)v34->__r_.__value_.__r.__words[0];
  size = v34->__r_.__value_.__l.__size_;
  v978[0] = v34->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v978 + 3) = *(_DWORD *)((char *)&v34->__r_.__value_.__r.__words[2] + 3);
  v37 = SHIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__r.__words[0] = 0;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)v13 = off_1E42BE278;
  if (v37 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v13 + 8), v36, size);
  }
  else
  {
    *(_QWORD *)(v13 + 8) = v36;
    *(_QWORD *)(v13 + 16) = size;
    *(_DWORD *)(v13 + 24) = v978[0];
    *(_DWORD *)(v13 + 27) = *(_DWORD *)((char *)v978 + 3);
    *(_BYTE *)(v13 + 31) = v37;
  }
  *(_QWORD *)v13 = &off_1E42C4580;
  *(_QWORD *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 40) = 1;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_QWORD *)(v13 + 112) = 0;
  *(_BYTE *)(v13 + 120) = 1;
  *(_QWORD *)(v13 + 128) = 0;
  *(_QWORD *)(v13 + 136) = 0;
  v38 = (_QWORD *)operator new();
  *v38 = &off_1E42E87C0;
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = v13;
  v39 = (std::__shared_weak_count *)*((_QWORD *)v1 + 29);
  *((_QWORD *)v1 + 28) = v13;
  *((_QWORD *)v1 + 29) = v38;
  if (!v39)
    goto LABEL_44;
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v975) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_882;
    }
  }
  else
  {
LABEL_44:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_45;
  }
  operator delete(v36);
  if ((SHIBYTE(v975) & 0x80000000) == 0)
  {
LABEL_46:
    if ((v979[23] & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_883;
  }
LABEL_882:
  operator delete(v973);
  if ((v979[23] & 0x80000000) == 0)
  {
LABEL_47:
    if ((SHIBYTE(v977.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_48;
LABEL_884:
    operator delete(v977.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_885;
  }
LABEL_883:
  operator delete(*(void **)v979);
  if (SHIBYTE(v977.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_884;
LABEL_48:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_49;
LABEL_885:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_49:
  v42 = (uint64_t *)v6[6];
  v43 = (uint64_t *)v6[7];
  if (v42 != v43)
  {
    v884 = v2 > v3;
    v891 = (int *)((char *)v1 + 248);
    v892 = (unsigned int *)((char *)v1 + 244);
    v889 = (unsigned int *)((char *)v1 + 260);
    v890 = (unsigned int *)((char *)v1 + 252);
    v887 = (unsigned int *)((char *)v1 + 268);
    v888 = (unsigned int *)((char *)v1 + 264);
    v44.n128_u64[0] = 0;
    v44.n128_u64[1] = v967;
    v883 = v44;
    v45 = 1.0;
    __asm { FMOV            V0.2D, #1.0 }
    v912 = _Q0;
    v51 = 0.5;
    v921 = 0xFFFFFFFF00000004;
    v920 = 0xFFFFFFFF00000004;
    v893 = v3;
    v894 = v2;
    v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
    v885 = (uint64_t *)v6[7];
    v886 = v6;
    v915 = v1;
    while (1)
    {
      v53 = *(_QWORD **)(*v42 + 216);
      v54 = (uint64_t *)v53[8];
      v55 = *v54;
      v56 = (std::__shared_weak_count *)v54[1];
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (std::__shared_weak_count *)v53[13];
      v934 = v53[12];
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = *(_QWORD *)(v55 + 48) - *(_QWORD *)(v55 + 40);
      v63 = *(_QWORD *)(v55 + 8);
      v64 = 0uLL;
      v65 = v62 / v63;
      v963 = v55;
      switch(*(_DWORD *)(*v42 + 160))
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_120;
        case 1:
          v66 = **(_QWORD **)(v55 + 216);
          v67 = *(_QWORD *)(v66 + 8);
          v965 = *(void **)(v66 + 24);
          if ((*(_BYTE *)(v55 + 16) & 2) == 0)
          {
            v68 = atomic_load(v52);
            if (v68 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v69 = v52;
              v70 = v43;
              v71 = v59;
              std::__call_once(v69, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v64 = 0uLL;
              v59 = v71;
              v43 = v70;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v933 = v63 * v65;
          if (v63 * v65)
          {
            v72 = **(_QWORD **)(v55 + 216);
            v73 = *(_QWORD *)(v72 + 8);
            v929 = *(_QWORD *)(v72 + 24);
            v968 = *(_QWORD *)(v67 + 24);
            v74 = *(_QWORD *)(v55 + 72);
            v937 = v74;
            if (v74)
              goto LABEL_102;
          }
          else
          {
            v104 = **(_QWORD **)(v55 + 216);
            v73 = *(_QWORD *)(v104 + 8);
            v929 = *(_QWORD *)(v104 + 24);
            v968 = *(_QWORD *)(v67 + 24);
          }
          v105 = *(_QWORD *)(v55 + 8);
          if ((*(_BYTE *)(v55 + 16) & 2) == 0)
          {
            v106 = atomic_load(v52);
            if (v106 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v107 = v52;
              v108 = v43;
              v109 = v59;
              std::__call_once(v107, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v64 = 0uLL;
              v59 = v109;
              v43 = v108;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v933 = v105 * v65;
          if (v105 * v65)
          {
            v74 = 0;
            v937 = *(_QWORD *)(v55 + 72);
          }
          else
          {
            v937 = 0;
            v74 = 0;
          }
LABEL_102:
          v955 = v74;
          v913 = v65;
          *(_QWORD *)&v97 = 0;
          *((_QWORD *)&v97 + 1) = v55;
          v93 = *(_QWORD *)(v73 + 56);
          v122 = *(uint64_t **)(*v42 + 256);
          v95 = *v122;
          v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v42 + 192) + 64) + 64);
          if ((*(_BYTE *)(v116 + 16) & 2) != 0)
          {
            v94 = 0;
            v96 = *v122;
            goto LABEL_111;
          }
          v123 = atomic_load(v52);
          if (v123 != -1)
            goto LABEL_99;
          goto LABEL_100;
        case 2:
          v84 = **(_QWORD **)(v55 + 216);
          v85 = *(_QWORD *)(v84 + 8);
          v965 = *(void **)(v84 + 24);
          if ((*(_BYTE *)(v55 + 16) & 2) == 0)
          {
            v86 = atomic_load(v52);
            if (v86 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v87 = v52;
              v88 = v43;
              v89 = v59;
              std::__call_once(v87, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v64 = 0uLL;
              v59 = v89;
              v43 = v88;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v933 = v63 * v65;
          if (v63 * v65)
          {
            v90 = **(_QWORD **)(v55 + 216);
            v91 = *(_QWORD *)(v90 + 8);
            v929 = *(_QWORD *)(v90 + 24);
            v968 = *(_QWORD *)(v85 + 24);
            v92 = *(_QWORD *)(v55 + 72);
            v937 = v92;
            if (v92)
              goto LABEL_107;
          }
          else
          {
            v110 = **(_QWORD **)(v55 + 216);
            v91 = *(_QWORD *)(v110 + 8);
            v929 = *(_QWORD *)(v110 + 24);
            v968 = *(_QWORD *)(v85 + 24);
          }
          v111 = *(_QWORD *)(v55 + 8);
          if ((*(_BYTE *)(v55 + 16) & 2) == 0)
          {
            v112 = atomic_load(v52);
            if (v112 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v113 = v52;
              v114 = v43;
              v115 = v59;
              std::__call_once(v113, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v64 = 0uLL;
              v59 = v115;
              v43 = v114;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v933 = v111 * v65;
          if (v111 * v65)
          {
            v92 = 0;
            v937 = *(_QWORD *)(v55 + 72);
          }
          else
          {
            v937 = 0;
            v92 = 0;
          }
LABEL_107:
          v955 = v92;
          v913 = v65;
          *(_QWORD *)&v97 = 0;
          *((_QWORD *)&v97 + 1) = v55;
          v93 = *(_QWORD *)(v91 + 56);
          v124 = *(uint64_t **)(*v42 + 256);
          v96 = *v124;
          v95 = v124[1];
          v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v42 + 192) + 64) + 64);
          if ((*(_BYTE *)(v116 + 16) & 2) == 0)
          {
            v125 = atomic_load(v52);
            if (v125 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v916 = v93;
              v126 = v95;
              v127 = v96;
              v128 = v43;
              v129 = v59;
              v923 = v97;
              std::__call_once(v52, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v97 = v923;
              v64 = 0uLL;
              v59 = v129;
              v43 = v128;
              v96 = v127;
              v95 = v126;
              v93 = v916;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v94 = 1;
          goto LABEL_111;
        case 3:
          v75 = **(_QWORD **)(v55 + 216);
          v76 = *(_QWORD *)(v75 + 8);
          v965 = *(void **)(v75 + 24);
          if ((*(_BYTE *)(v55 + 16) & 2) == 0)
          {
            v77 = atomic_load(v52);
            if (v77 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v78 = v52;
              v79 = v43;
              v80 = v59;
              std::__call_once(v78, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v64 = 0uLL;
              v59 = v80;
              v43 = v79;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v933 = v63 * v65;
          if (v63 * v65)
          {
            v81 = **(_QWORD **)(v55 + 216);
            v82 = *(_QWORD *)(v81 + 8);
            v929 = *(_QWORD *)(v81 + 24);
            v968 = *(_QWORD *)(v76 + 24);
            v83 = *(_QWORD *)(v55 + 72);
            v937 = v83;
            if (v83)
              goto LABEL_97;
          }
          else
          {
            v98 = **(_QWORD **)(v55 + 216);
            v82 = *(_QWORD *)(v98 + 8);
            v929 = *(_QWORD *)(v98 + 24);
            v968 = *(_QWORD *)(v76 + 24);
          }
          v99 = *(_QWORD *)(v55 + 8);
          if ((*(_BYTE *)(v55 + 16) & 2) == 0)
          {
            v100 = atomic_load(v52);
            if (v100 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v101 = v52;
              v102 = v43;
              v103 = v59;
              std::__call_once(v101, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v64 = 0uLL;
              v59 = v103;
              v43 = v102;
              v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
            }
          }
          v933 = v99 * v65;
          if (v99 * v65)
          {
            v83 = 0;
            v937 = *(_QWORD *)(v55 + 72);
          }
          else
          {
            v937 = 0;
            v83 = 0;
          }
LABEL_97:
          v955 = v83;
          v913 = v65;
          *(_QWORD *)&v97 = 0;
          *((_QWORD *)&v97 + 1) = v55;
          v93 = *(_QWORD *)(v82 + 88);
          v95 = *(_QWORD *)(*(_QWORD *)(*v42 + 256) + 8);
          v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v42 + 192) + 64) + 64);
          if ((*(_BYTE *)(v116 + 16) & 2) == 0)
          {
            v117 = atomic_load(v52);
            if (v117 != -1)
            {
LABEL_99:
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              v118 = v52;
              v119 = v52;
              v120 = v43;
              v121 = v59;
              v922 = v97;
              std::__call_once(v118, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
              v97 = v922;
              v64 = 0uLL;
              v59 = v121;
              v43 = v120;
              v52 = v119;
            }
          }
LABEL_100:
          v94 = 0;
          v96 = v95;
LABEL_111:
          v130 = *(unint64_t **)(v116 + 72);
          v921 = v130[1];
          v920 = *v130;
LABEL_112:
          __p = 0;
          v131 = *(_QWORD *)(v967 + 8);
          v132 = (*(_QWORD *)(v967 + 48) - *(_QWORD *)(v967 + 40)) / v131;
          switch(*(_DWORD *)(v931 + 160))
          {
            case 0:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              goto LABEL_113;
            case 1:
              v917 = v93;
              v932 = v42;
              v149 = **(_QWORD **)(v967 + 216);
              v150 = *(_QWORD *)(v149 + 8);
              v142 = *(_QWORD *)(v149 + 24);
              if ((*(_BYTE *)(v967 + 16) & 2) == 0)
              {
                v151 = atomic_load(v52);
                if (v151 != -1)
                {
                  *(_QWORD *)v979 = &__dst;
                  v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
                  v152 = v52;
                  v908 = v95;
                  v153 = v96;
                  v154 = v94;
                  v155 = v59;
                  v925 = v97;
                  std::__call_once(v152, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
                  v97 = v925;
                  v59 = v155;
                  v94 = v154;
                  v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
                  v96 = v153;
                  v95 = v908;
                }
              }
              v897 = v131 * v132;
              v900 = v96;
              v899 = v94;
              v156 = v52;
              if (v131 * v132)
                v911 = *(_QWORD *)(v967 + 72);
              else
                v911 = 0;
              LODWORD(v132) = __sz;
              v157 = *(_QWORD *)(v150 + 24);
              v158 = **(_QWORD **)(v931 + 256);
              v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v931 + 192) + 64) + 64);
              v895 = v158;
              if ((*(_BYTE *)(v160 + 16) & 2) == 0)
              {
                v163 = atomic_load(v156);
                if (v163 != -1)
                {
                  *(_QWORD *)v979 = &__dst;
                  v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
                  v164 = v59;
                  v927 = v97;
                  std::__call_once(v156, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
                  v97 = v927;
                  v59 = v164;
                }
              }
              goto LABEL_151;
            case 2:
              v917 = v93;
              v932 = v42;
              v140 = **(_QWORD **)(v967 + 216);
              v141 = *(_QWORD *)(v140 + 8);
              v142 = *(_QWORD *)(v140 + 24);
              if ((*(_BYTE *)(v967 + 16) & 2) == 0)
              {
                v143 = atomic_load(v52);
                if (v143 != -1)
                {
                  *(_QWORD *)v979 = &__dst;
                  v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
                  v144 = v52;
                  v145 = v95;
                  v146 = v96;
                  v147 = v59;
                  v924 = v97;
                  std::__call_once(v144, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
                  v97 = v924;
                  v59 = v147;
                  v96 = v146;
                  v95 = v145;
                  v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
                }
              }
              v897 = v131 * v132;
              v900 = v96;
              v148 = v52;
              if (v131 * v132)
                v911 = *(_QWORD *)(v967 + 72);
              else
                v911 = 0;
              LODWORD(v132) = __sz;
              v157 = *(_QWORD *)(v141 + 24);
              v159 = *(uint64_t **)(v931 + 256);
              v158 = *v159;
              v895 = v159[1];
              v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v931 + 192) + 64) + 64);
              if ((*(_BYTE *)(v160 + 16) & 2) == 0)
              {
                v161 = atomic_load(v148);
                if (v161 != -1)
                {
                  *(_QWORD *)v979 = &__dst;
                  v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
                  v162 = v59;
                  v926 = v97;
                  std::__call_once(v148, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
                  v97 = v926;
                  v59 = v162;
                }
              }
              v899 = 1;
LABEL_151:
              v165 = *(unint64_t **)(v160 + 72);
              v906 = *v165;
              v907 = v165[1];
              v64 = v883;
              v93 = v917;
              break;
            default:
              v899 = v94;
              v900 = v96;
              v932 = v42;
              v911 = 0;
              v157 = 0;
              v142 = 0;
              v895 = 0;
              v158 = 0;
              break;
          }
          v167 = *(_QWORD *)(v963 + 40);
          v166 = *(_QWORD *)(v963 + 48);
          v168 = *(_QWORD *)(v963 + 8);
          v898 = v64;
          v928 = v97;
          if ((_DWORD)v132 || (v169 = v166 - v167, v168 > v166 - v167))
          {
            v948 = 0;
            v170 = 0;
          }
          else
          {
            v276 = v169 / v168;
            if ((v169 / v168) >> 61)
              goto LABEL_886;
            v277 = v59;
            v278 = v276;
            v279 = (float32x2_t *)operator new(8 * v276);
            v948 = (char *)&v279[v278];
            v167 = *(_QWORD *)(v963 + 40);
            v166 = *(_QWORD *)(v963 + 48);
            v168 = *(_QWORD *)(v963 + 8);
            v59 = v277;
            v170 = v279;
          }
          v918 = v93;
          v905 = v59;
          v171 = ((v166 - v167) / v168);
          if (v171)
          {
            v172 = 16 * v171;
            v960 = (char *)operator new(16 * v171);
            v901 = &v960[v172];
          }
          else
          {
            v901 = 0;
            v960 = 0;
          }
          v909 = v95;
          v903 = v158;
          v173 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v932 + 24))(*v932);
          v951 = (*(_QWORD *)(v967 + 48) - *(_QWORD *)(v967 + 40)) / *(_QWORD *)(v967 + 8);
          if ((_DWORD)v951)
          {
            v174 = (float64x2_t *)operator new(24 * v951);
            v175 = &v174->f64[3 * v951];
          }
          else
          {
            v175 = 0;
            v174 = 0;
          }
          v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v931 + 24))(v931);
          v179 = *(_QWORD *)(v967 + 48) - *(_QWORD *)(v967 + 40);
          v180 = *(_QWORD *)(v967 + 8);
          v904 = v56;
          __pa = v170;
          if (v180 <= v179)
          {
            v182 = (double *)v176;
            v183 = 0;
            v184 = v911 + v157;
            v185 = (double *)v174;
            do
            {
              v186 = (float *)(v184 + v183 * v142);
              v187 = *v186;
              v188 = v186[1];
              v189 = v186[2];
              v190 = v182[4];
              v191 = v182[5];
              v192 = v182[6];
              v193 = v182[3];
              v194 = -(v193 * v189 - v191 * v187);
              v195 = *v182 + v187;
              v196 = -(v190 * v187 - v193 * v188);
              v197 = v182[1] + v188;
              v198 = -(v191 * v188 - v190 * v189) - (v191 * v188 - v190 * v189);
              v199 = v194 + v194;
              v200 = v196 + v196;
              v201 = v195 + v200 * v190 + v198 * v192 - v199 * v191;
              v202 = v197 - v200 * v193 + v198 * v191 + v199 * v192;
              v203 = v189 + v200 * v192 + v182[2] + v199 * v193 - v198 * v190;
              v204 = sqrt(v201 * v201 + v202 * v202);
              v205 = atan2(v203, v204 * 0.996647189);
              v206 = atan2(v202, v201);
              v207 = __sincos_stret(v205);
              v208 = atan2(v203 + v207.__sinval * v207.__sinval * 42841.3115 * v207.__sinval, v204 + v207.__cosval * v207.__cosval * -42697.6727 * v207.__cosval);
              v209 = __sincos_stret(v208);
              v210 = v204 / v209.__cosval + -6378137.0 / sqrt(v45 + v209.__sinval * v209.__sinval * -0.00669437999);
              v211 = tan(v208 * v51 + 0.785398163);
              v212 = v51 + v206 * 0.159154943;
              v213 = v51 + log(v211) * 0.159154943;
              if (v185 < v175)
              {
                *v185 = v212;
                v185[1] = v213;
                v185[2] = v210;
                v185 += 3;
              }
              else
              {
                v214 = 0xAAAAAAAAAAAAAAABLL * (((char *)v185 - (char *)v174) >> 3) + 1;
                if (v214 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_886;
                if (0x5555555555555556 * (((char *)v175 - (char *)v174) >> 3) > v214)
                  v214 = 0x5555555555555556 * (((char *)v175 - (char *)v174) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v175 - (char *)v174) >> 3) >= 0x555555555555555)
                  v215 = 0xAAAAAAAAAAAAAAALL;
                else
                  v215 = v214;
                if (v215)
                {
                  if (v215 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_887;
                  v216 = (char *)operator new(24 * v215);
                }
                else
                {
                  v216 = 0;
                }
                v217 = (double *)&v216[8 * (((char *)v185 - (char *)v174) >> 3)];
                *v217 = v212;
                v217[1] = v213;
                v217[2] = v210;
                if (v185 == (double *)v174)
                {
                  v219 = (float64x2_t *)&v216[8 * (((char *)v185 - (char *)v174) >> 3)];
                }
                else
                {
                  v218 = (double *)&v216[8 * (((char *)v185 - (char *)v174) >> 3)];
                  do
                  {
                    v219 = (float64x2_t *)(v218 - 3);
                    v220 = *(_OWORD *)(v185 - 3);
                    *(v218 - 1) = *(v185 - 1);
                    *(_OWORD *)(v218 - 3) = v220;
                    v185 -= 3;
                    v218 -= 3;
                  }
                  while (v185 != (double *)v174);
                }
                v175 = (double *)&v216[24 * v215];
                v185 = v217 + 3;
                if (v174)
                  operator delete(v174);
                v174 = v219;
              }
              ++v183;
              v181 = (*(_QWORD *)(v967 + 48) - *(_QWORD *)(v967 + 40)) / *(_QWORD *)(v967 + 8);
            }
            while (v183 < v181);
            v170 = __pa;
          }
          else
          {
            v181 = v179 / v180;
          }
          v221 = (_QWORD *)v963;
          v222 = *(_QWORD *)(v963 + 48) - *(_QWORD *)(v963 + 40);
          v223 = *(_QWORD *)(v963 + 8);
          v224 = (v222 / v223);
          if ((v222 / v223))
          {
            v225 = 3 * v224;
            v226 = (double *)operator new(24 * v224);
            v227 = &v226[v225];
            v223 = *(_QWORD *)(v963 + 8);
            v222 = *(_QWORD *)(v963 + 48) - *(_QWORD *)(v963 + 40);
          }
          else
          {
            v227 = 0;
            v226 = 0;
          }
          v228 = v960;
          v229 = v965;
          v969 = v955 + v968;
          if (v223 > v222)
          {
            v966 = v226;
            v230 = 0;
            v231 = 1;
            v233 = v893;
            v232 = v894;
            goto LABEL_231;
          }
          v234 = 0;
          v235 = 0;
          v236 = v226;
          do
          {
            v237 = (float *)(v969 + v234 * (_QWORD)v229);
            v238 = *v237;
            v239 = v237[1];
            v240 = v237[2];
            v241 = v173[4];
            v242 = v173[5];
            v243 = v173[6];
            v244 = v173[3];
            v245 = -(v244 * v240 - v242 * v238);
            v246 = *v173 + v238;
            v247 = -(v241 * v238 - v244 * v239);
            v248 = v173[1] + v239;
            v249 = -(v242 * v239 - v241 * v240) - (v242 * v239 - v241 * v240);
            v250 = v245 + v245;
            v251 = v247 + v247;
            v252 = v246 + v251 * v241 + v249 * v243 - v250 * v242;
            v253 = v248 - v251 * v244 + v249 * v242 + v250 * v243;
            v254 = v240 + v251 * v243 + v173[2] + v250 * v244 - v249 * v241;
            v255 = sqrt(v252 * v252 + v253 * v253);
            v256 = atan2(v254, v255 * 0.996647189);
            v257 = atan2(v253, v252);
            v258 = __sincos_stret(v256);
            v259 = atan2(v254 + v258.__sinval * v258.__sinval * 42841.3115 * v258.__sinval, v255 + v258.__cosval * v258.__cosval * -42697.6727 * v258.__cosval);
            v260 = __sincos_stret(v259);
            v261 = v255 / v260.__cosval + -6378137.0 / sqrt(v45 + v260.__sinval * v260.__sinval * -0.00669437999);
            v262 = tan(v259 * v51 + 0.785398163);
            v263 = v51 + v257 * 0.159154943;
            v264 = v51 + log(v262) * 0.159154943;
            if (v236 < v227)
            {
              *v236 = v263;
              v236[1] = v264;
              v236[2] = v261;
              v236 += 3;
            }
            else
            {
              v265 = 0xAAAAAAAAAAAAAAABLL * (v236 - v226) + 1;
              if (v265 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_886;
              if (0x5555555555555556 * (v227 - v226) > v265)
                v265 = 0x5555555555555556 * (v227 - v226);
              if (0xAAAAAAAAAAAAAAABLL * (v227 - v226) >= 0x555555555555555)
                v266 = 0xAAAAAAAAAAAAAAALL;
              else
                v266 = v265;
              if (v266)
              {
                if (v266 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_887;
                v267 = (char *)operator new(24 * v266);
              }
              else
              {
                v267 = 0;
              }
              v268 = (double *)&v267[8 * (v236 - v226)];
              *v268 = v263;
              v268[1] = v264;
              v268[2] = v261;
              v269 = v226;
              if (v236 == v226)
              {
                v226 = (double *)&v267[8 * (v236 - v226)];
                v229 = v965;
              }
              else
              {
                v270 = (double *)&v267[8 * (v236 - v226)];
                v229 = v965;
                do
                {
                  v226 = v270 - 3;
                  v271 = *(_OWORD *)(v236 - 3);
                  *(v270 - 1) = *(v236 - 1);
                  *(_OWORD *)(v270 - 3) = v271;
                  v236 -= 3;
                  v270 -= 3;
                }
                while (v236 != v269);
              }
              v227 = (double *)&v267[24 * v266];
              v236 = v268 + 3;
              if (v269)
                operator delete(v269);
              v221 = (_QWORD *)v963;
            }
            v234 = ++v235;
          }
          while ((v221[6] - v221[5]) / v221[1] > (unint64_t)v235);
          v230 = ((char *)v236 - (char *)v226) / 24;
          v231 = v236 == v226;
          if (__sz)
          {
            v966 = v226;
            v233 = v893;
            v232 = v894;
            v170 = __pa;
LABEL_229:
            v228 = v960;
            goto LABEL_231;
          }
          v966 = v226;
          _ZF = v236 == v226;
          v233 = v893;
          v232 = v894;
          v228 = v960;
          if (_ZF)
          {
            v170 = __pa;
            goto LABEL_231;
          }
          v170 = __pa;
          v272 = v948 - (char *)__pa;
          if (v230 > (v948 - (char *)__pa) >> 3)
          {
            if (v230 >> 61)
              goto LABEL_886;
            v273 = v272 >> 2;
            if (v272 >> 2 <= v230)
              v273 = v230;
            _CF = (unint64_t)v272 >= 0x7FFFFFFFFFFFFFF8;
            v274 = 0x1FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v274 = v273;
            if (v274 >> 61)
LABEL_887:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v275 = (float32x2_t *)operator new(8 * v274);
            if (__pa)
              operator delete(__pa);
            v231 = 0;
            v170 = v275;
            goto LABEL_229;
          }
          v231 = 0;
LABEL_231:
          v902 = v174;
          __p = v170;
          if (!v231)
          {
            v300 = 0;
            v301 = sqrtf((float)v951);
            v302 = v301 - 1;
            v303 = (int)sqrtf((float)v181);
            v304 = v301 - 2;
            v305 = *(float64x2_t *)((char *)v174 + 24 * (v301 - 2) * v301);
            v306 = v303 - 1;
            v307 = *v174;
            v308 = vsubq_f64(v305, *v174);
            v309 = vmulq_n_f64(v308, v45 / (double)v304);
            v310 = vdivq_f64(v912, v309);
            if (v230 <= 1)
              v311 = 1;
            else
              v311 = v230;
            v312 = vdup_n_s32(v304);
            v313 = vdivq_f64(v912, v308);
            v314 = v966 + 2;
            while (2)
            {
              if (!__sz || v303 >= 1 && (((int)v300 / v306) & 0x80000000) == 0 && (int)v300 / v306 < v306)
              {
                v315 = vsubq_f64(*(float64x2_t *)(v314 - 2), v307);
                v316 = vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v315, v310))), 0), v312);
                v317.i64[0] = v316.i32[0];
                v317.i64[1] = v316.i32[1];
                v318 = vmlsq_f64(v315, vcvtq_f64_s64(v317), v309);
                v319 = vmulq_f64(v318, v310);
                v320 = vmovn_s64(vcgtq_f64(v318, (float64x2_t)vdupq_laneq_s64((int64x2_t)v318, 1))).u8[0];
                v321 = v316.i32[1] * v302;
                v322 = v174[1].f64[3 * v316.i32[1] * v302 + 3 * v316.i32[0]];
                if ((v320 & 1) != 0)
                {
                  v323 = vadd_s32(v316, (int32x2_t)0x100000001);
                  v324 = v323.i32[1];
                  v325 = v323.i32[0];
                  v326 = v174[1].f64[3 * (v321 + v323.i32[0])];
                  *v314 = v326
                        + (v322 - v326) * (v45 - v319.f64[0])
                        + (v174[1].f64[3 * v325 + 3 * v324 * v302] - v326) * v319.f64[1];
                  if (!__sz)
                    goto LABEL_258;
                }
                else
                {
                  v327 = v302 + v302 * v316.i32[1] + v316.i32[0];
                  v328 = v174[1].f64[3 * v327];
                  *v314 = v328 + (v322 - v328) * (v45 - v319.f64[1]) + (v174[2].f64[3 * v327 + 1] - v328) * v319.f64[0];
                  if (!__sz)
LABEL_258:
                    v170[v300] = vcvt_f32_f64(vmulq_f64(v315, v313));
                }
              }
              ++v300;
              v314 += 3;
              if (v311 != v300)
                continue;
              break;
            }
            v329 = 0;
            v330 = v173[5];
            v945 = *v173;
            v949 = v173[3];
            v962 = v173[4];
            v952 = v173[6];
            v956 = v330;
            __sz_4 = -(v173[1] * v949 - *v173 * v962) * v962
                   + -(v173[1] * v330 - v173[2] * v962) * v952
                   + -(v173[2] * v949 - *v173 * v330) * v330;
            v280 = v228;
            v331 = v901;
            while (2)
            {
              v333 = v228;
              v334 = &v966[3 * v329];
              v335 = *v334;
              v336 = v334[1];
              v337 = v334[2];
              v338 = (int *)(v969 + v329 * (_QWORD)v229);
              v339 = *v338;
              v340 = v338[1];
              v341 = v338[2];
              v342 = v335 * 6.28318531;
              v343 = exp(v336 * 6.28318531 + -3.14159265);
              v344 = atan(v343) * 2.0 + -1.57079633;
              v345 = fmod(v342, 6.28318531);
              v346 = fmod(v345 + 6.28318531, 6.28318531) + -3.14159265;
              v347 = __sincos_stret(v344);
              v348 = 6378137.0 / sqrt(v347.__sinval * v347.__sinval * -0.00669437999 + 1.0);
              v349 = (v348 + v337) * v347.__cosval;
              v350 = __sincos_stret(v346);
              v351 = v349 * v350.__cosval
                   - v945
                   + (__sz_4
                    + -((v337 + v348 * 0.99330562) * v347.__sinval * v962 - v349 * v350.__sinval * v956) * v952
                    + -(v349 * v350.__cosval * v956 - (v337 + v348 * 0.99330562) * v347.__sinval * v949) * v956
                    + -(v349 * v350.__cosval * v962 - v349 * v350.__sinval * v949) * v962)
                   * 2.0;
              if (v280 >= v331)
              {
                v352 = (v280 - v333) >> 4;
                v353 = v352 + 1;
                if ((unint64_t)(v352 + 1) >> 60)
                  goto LABEL_886;
                v354 = v333;
                if ((v331 - v333) >> 3 > v353)
                  v353 = (v331 - v333) >> 3;
                if ((unint64_t)(v331 - v333) >= 0x7FFFFFFFFFFFFFF0)
                  v355 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v355 = v353;
                if (v355)
                {
                  if (v355 >> 60)
                    goto LABEL_887;
                  v356 = (char *)operator new(16 * v355);
                  v354 = v333;
                }
                else
                {
                  v356 = 0;
                }
                v357 = &v356[16 * v352];
                *(_DWORD *)v357 = v339;
                *((_DWORD *)v357 + 1) = v340;
                *((_DWORD *)v357 + 2) = v341;
                *((float *)v357 + 3) = v351;
                if (v280 == v354)
                {
                  v359 = &v356[16 * v352];
                  v51 = 0.5;
                }
                else
                {
                  v358 = &v356[16 * v352];
                  v51 = 0.5;
                  do
                  {
                    v359 = v358 - 16;
                    *((_OWORD *)v358 - 1) = *((_OWORD *)v280 - 1);
                    v280 -= 16;
                    v358 -= 16;
                  }
                  while (v280 != v354);
                }
                v331 = &v356[16 * v355];
                v280 = v357 + 16;
                if (v354)
                  operator delete(v354);
                v228 = v359;
                if (v232 <= v233)
                {
LABEL_270:
                  v332 = *((_DWORD *)v280 - 4);
                  *((_DWORD *)v280 - 4) = *((_DWORD *)v280 - 1);
                  *((_DWORD *)v280 - 1) = v332;
                }
              }
              else
              {
                *(_DWORD *)v280 = v339;
                *((_DWORD *)v280 + 1) = v340;
                *((_DWORD *)v280 + 2) = v341;
                *((float *)v280 + 3) = v351;
                v280 += 16;
                v51 = 0.5;
                v228 = v333;
                if (v232 <= v233)
                  goto LABEL_270;
              }
              if (++v329 == v311)
                goto LABEL_233;
              continue;
            }
          }
          v280 = v228;
LABEL_233:
          v281 = v891;
          if (v232 <= v233)
            v282 = v887;
          else
            v282 = v890;
          if (v232 <= v233)
            v283 = v888;
          else
            v283 = (unsigned int *)v891;
          v284 = v892;
          if (v232 <= v233)
            v285 = v889;
          else
            v285 = v892;
          if (v232 <= v233)
            v286 = v890;
          else
            v286 = v887;
          if (v232 <= v233)
          {
            v287 = *((unsigned int *)v915 + 60);
          }
          else
          {
            v281 = (int *)v888;
            v284 = v889;
            v287 = *((unsigned int *)v915 + 64);
          }
          if (v232 <= v233)
            v288 = *((_DWORD *)v915 + 64);
          else
            v288 = *((_DWORD *)v915 + 60);
          v178.n128_u64[0] = v906;
          v177.n128_u64[0] = v907;
          v289 = v932;
          v45 = 1.0;
          v961 = v228;
          v290 = v929;
          v291 = v934;
          if (__sz)
          {
            v292 = *v284;
            v293 = *v281;
            v294 = *v286;
            v295 = *v285;
            v296 = *v283;
            v297 = *v282;
            v970 = *v282;
            if (v288 == (_DWORD)v287)
            {
              v298 = 0;
              v299 = 0;
            }
            else
            {
              v360 = *v285;
              v361 = (char *)operator new(16 * (v288 - v287));
              v297 = v970;
              v295 = v360;
              v298 = v361;
              v299 = &v361[16 * (v288 - v287)];
            }
            v957 = v294;
            v953 = v293;
            if (v288 != (_DWORD)v287 || v295 != (_DWORD)v292 || v296 != v293)
            {
              v362 = v298;
              goto LABEL_301;
            }
            v362 = v298;
            while (v297 < v294 || v294 < v297)
            {
              do
              {
LABEL_301:
                if (v362 >= v299)
                {
                  v363 = v292;
                  v364 = v287;
                  v365 = (v362 - v298) >> 4;
                  v366 = v365 + 1;
                  if ((unint64_t)(v365 + 1) >> 60)
                    goto LABEL_886;
                  if ((v299 - v298) >> 3 > v366)
                    v366 = (v299 - v298) >> 3;
                  if ((unint64_t)(v299 - v298) >= 0x7FFFFFFFFFFFFFF0)
                    v367 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v367 = v366;
                  if (v367)
                  {
                    if (v367 >> 60)
                      goto LABEL_887;
                    v368 = v296;
                    v369 = v288;
                    v370 = v295;
                    v371 = (char *)operator new(16 * v367);
                    v295 = v370;
                    v288 = v369;
                    v296 = v368;
                    v297 = v970;
                  }
                  else
                  {
                    v371 = 0;
                  }
                  v372 = &v371[16 * v365];
                  *(_DWORD *)v372 = v288;
                  *((_DWORD *)v372 + 1) = v295;
                  *((_DWORD *)v372 + 2) = v296;
                  *((_DWORD *)v372 + 3) = v297;
                  if (v362 == v298)
                  {
                    v374 = v362;
                    v298 = &v371[16 * v365];
                    v287 = v364;
                  }
                  else
                  {
                    v373 = &v371[16 * v365];
                    v287 = v364;
                    do
                    {
                      *((_OWORD *)v373 - 1) = *((_OWORD *)v362 - 1);
                      v373 -= 16;
                      v362 -= 16;
                    }
                    while (v362 != v298);
                    v374 = v298;
                    v298 = v373;
                  }
                  v292 = v363;
                  v299 = &v371[16 * v367];
                  v362 = v372 + 16;
                  v293 = v953;
                  if (v374)
                  {
                    v375 = v296;
                    v376 = v288;
                    v377 = v295;
                    operator delete(v374);
                    v297 = v970;
                    v295 = v377;
                    v288 = v376;
                    v296 = v375;
                  }
                  v294 = v957;
                }
                else
                {
                  *(_DWORD *)v362 = v288;
                  *((_DWORD *)v362 + 1) = v295;
                  *((_DWORD *)v362 + 2) = v296;
                  *((_DWORD *)v362 + 3) = v297;
                  v362 += 16;
                }
                --v288;
                v295 >>= 1;
                v296 >>= 1;
              }
              while (v288 != (_DWORD)v287 || v295 != (_DWORD)v292 || v296 != v293);
            }
            if ((int)((unint64_t)(v362 - v298) >> 4) >= 1)
            {
              v378 = ((unint64_t)(v362 - v298) >> 4) + 1;
              v178.n128_u64[0] = v906;
              v177.n128_u64[0] = v907;
              v289 = v932;
              v290 = v929;
              v291 = v934;
              do
              {
                v177.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)v177.n128_u64[0], (float32x2_t)0x3F0000003F000000);
                v178.n128_u64[0] = (unint64_t)vmla_f32((float32x2_t)v178.n128_u64[0], (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)&v298[16 * (v378-- - 2) + 4], (int8x8_t)0x100000001))), (float32x2_t)v177.n128_u64[0]);
              }
              while (v378 > 1);
LABEL_331:
              v958 = v178;
              v971 = v177;
              operator delete(v298);
              v178 = v958;
              v177 = v971;
              goto LABEL_332;
            }
            v178.n128_u64[0] = v906;
            v177.n128_u64[0] = v907;
            v289 = v932;
            v290 = v929;
            v291 = v934;
            if (v298)
              goto LABEL_331;
          }
LABEL_332:
          v959 = v178;
          v972 = v177;
          v379 = (*(_QWORD *)(v291 + 48) - *(_QWORD *)(v291 + 40)) / *(_QWORD *)(v291 + 8);
          v380 = (std::__shared_weak_count *)operator new(0xF8uLL);
          v380->__shared_owners_ = 0;
          v381 = (unint64_t *)&v380->__shared_owners_;
          v380->__shared_weak_owners_ = 0;
          v380->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
          v950 = (std::__shared_weak_count_vtbl *)&v380[1];
          ggl::BufferData::BufferData((uint64_t)&v380[1], 2, 1, 0, 7, v379);
          LODWORD(v380[10].__vftable) = 0;
          v380[1].__shared_owners_ = 2;
          v380[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
          v380[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
          v380[9].__shared_weak_owners_ = (uint64_t)"/render/morph/indexdata";
          v383 = *(_QWORD *)(v291 + 40);
          v382 = *(_QWORD *)(v291 + 48);
          v384 = *(_QWORD *)(v291 + 8);
          if ((*(_BYTE *)(v291 + 16) & 2) == 0)
          {
            v385 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v385 != -1)
            {
              *(_QWORD *)v979 = &__dst;
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v382 - v383 == (v382 - v383) % v384)
            v386 = 0;
          else
            v386 = *(_QWORD *)(v291 + 72);
          v387 = v961;
          v388 = (unint64_t)v380[3].__vftable - v380[2].__shared_weak_owners_;
          shared_weak_owners = v388 / v380[1].__shared_owners_ * v380[1].__shared_owners_;
          v390 = v388 % v380[1].__shared_owners_;
          if (v388 == v390)
            v391 = 0;
          else
            v391 = v380[4].__vftable;
          v392 = *(_QWORD *)(v291 + 48) - *(_QWORD *)(v291 + 40);
          v393 = *(_QWORD *)(v291 + 8);
          if (v393 <= v392)
          {
            v394 = 0;
            v395 = v392 / v393;
            if (v395 <= 1)
              v395 = 1;
            if (v395 < 0x10)
              goto LABEL_349;
            if ((unint64_t)v391 - v386 <= 0x1F)
              goto LABEL_349;
            v394 = v395 & 0xFFFFFFFFFFFFFFF0;
            p_on_zero_shared = &v391->__on_zero_shared;
            v397 = (__int128 *)(v386 + 16);
            v398 = v395 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v399 = *v397;
              *((_OWORD *)p_on_zero_shared - 1) = *(v397 - 1);
              *(_OWORD *)p_on_zero_shared = v399;
              p_on_zero_shared += 4;
              v397 += 2;
              v398 -= 16;
            }
            while (v398);
            if (v395 != v394)
            {
LABEL_349:
              v400 = v395 - v394;
              v401 = 2 * v394;
              v402 = (_WORD *)((char *)v391 + 2 * v394);
              v403 = (__int16 *)(v386 + v401);
              do
              {
                v404 = *v403++;
                *v402++ = v404;
                --v400;
              }
              while (v400);
            }
          }
          if (v391 && v388 != v390)
          {
            if (v380[3].__shared_weak_owners_ > shared_weak_owners)
              shared_weak_owners = v380[3].__shared_weak_owners_;
            v380[3].__shared_owners_ = 0;
            v380[3].__shared_weak_owners_ = shared_weak_owners;
          }
          v405 = *v289;
          v954 = v380;
          if (*(_DWORD *)(v405 + 160) == 3)
          {
            v406 = **(_QWORD **)(v963 + 216);
            v407 = *(_QWORD *)(v406 + 8);
            v408 = *(_QWORD *)(v406 + 24);
            v946 = v937;
            if (!v937)
            {
              v409 = *(_QWORD *)(v963 + 8);
              if ((*(_BYTE *)(v963 + 16) & 2) == 0)
              {
                v410 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
                if (v410 != -1)
                {
                  *(_QWORD *)v979 = &__dst;
                  v977.__r_.__value_.__r.__words[0] = (std::string::size_type)v979;
                  std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v977, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
                  v387 = v961;
                }
              }
              *(_QWORD *)&v411 = 0;
              *((_QWORD *)&v411 + 1) = v963;
              v928 = v411;
              v933 = v409 * v913;
              if (v409 * v913)
                v946 = *(_QWORD *)(v963 + 72);
              else
                v946 = 0;
            }
            v703 = *(_QWORD *)(v407 + 56);
            v704 = (v280 - v387) >> 4;
            v705 = (std::__shared_weak_count *)operator new(0xF8uLL);
            v705->__shared_owners_ = 0;
            v706 = (unint64_t *)&v705->__shared_owners_;
            v705->__shared_weak_owners_ = 0;
            v705->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E00C8;
            v914 = &v705[1].__vftable;
            ggl::BufferData::BufferData((uint64_t)&v705[1], 48, 0, 0, 7, v704);
            v707 = 0;
            v705[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7DA0;
            v705[9].__shared_weak_owners_ = (uint64_t)"render/morph/vertexdata";
            v705[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverMorphBorder::vertexReflection;
            v705[9].__shared_owners_ = (uint64_t)&unk_1E42B7DC0;
            v708 = (unint64_t)v705[3].__vftable - v705[2].__shared_weak_owners_;
            v964 = v705;
            v709 = v708 / v705[1].__shared_owners_ * v705[1].__shared_owners_;
            v710 = v708 % v705[1].__shared_owners_;
            if (v708 != v710)
              v707 = v705[4].__vftable;
            v711 = v961;
            if (v280 != v961)
            {
              v712 = __p;
              v713 = (float32x2_t *)(v937 + v918);
              if (v704 <= 1)
                v714 = 1;
              else
                v714 = v704;
              v715 = (_DWORD *)&v707[1].~__shared_weak_count + 1;
              v716 = (_DWORD *)(v946 + v703 + 4);
              do
              {
                v717 = *(_QWORD *)v711;
                *(v715 - 9) = *((_DWORD *)v711 + 2);
                *(_QWORD *)(v715 - 11) = v717;
                *(v715 - 7) = *((_DWORD *)v711 + 3);
                *(v715 - 5) = *(v716 - 1);
                *(v715 - 4) = *v716;
                *(v715 - 3) = v713->i32[0];
                *(v715 - 2) = v713->i32[1];
                if (__sz)
                  v718 = v713;
                else
                  v718 = v712;
                *(v715 - 1) = v718->i32[0];
                v711 += 16;
                ++v712;
                *v715 = v718->i32[1];
                v715 += 12;
                v716 = (_DWORD *)((char *)v716 + v408);
                v713 = (float32x2_t *)((char *)v713 + v290);
                --v714;
              }
              while (v714);
            }
            if (v707 && v708 != v710)
            {
              v719 = v705[3].__shared_weak_owners_;
              if (v719 <= v709)
                v719 = v709;
              v705[3].__shared_owners_ = 0;
              v705[3].__shared_weak_owners_ = v719;
            }
            v427 = operator new();
            v720 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v915 + 1) + 8) + 40) + 8) + 216);
            v919 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v405 + 24))(v405);
            __sz_4b = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v405 + 56))(v405);
            do
              v721 = __ldxr(v381);
            while (__stxr(v721 + 1, v381));
            v722 = *(uint64_t **)(v405 + 256);
            v930 = *v722;
            v936 = v722[1];
            v938 = v722[2];
            v723 = operator new();
            *(_QWORD *)v723 = &off_1E42B59B0;
            *(_QWORD *)(v723 + 48) = 0;
            *(_QWORD *)(v723 + 24) = 0;
            *(_QWORD *)(v723 + 32) = 0;
            *(_QWORD *)(v723 + 16) = "";
            *(_DWORD *)(v723 + 40) = 0;
            *(_DWORD *)(v723 + 56) = 1065353216;
            *(_OWORD *)(v723 + 64) = 0u;
            *(_OWORD *)(v723 + 80) = 0u;
            *(int64x2_t *)(v723 + 96) = vdupq_n_s64(1uLL);
            *(_QWORD *)(v723 + 112) = 0;
            v724 = (std::__shared_weak_count_vtbl *)operator new();
            if ((v725 & 1) == 0
            {
              if ((v859 & 1) == 0
              {
                if ((v877 & 1) == 0
                {
                  ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorphBorder::vertexReflection;
                }
                ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r;
                unk_1EE5762A8 = 1;
              }
              ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r;
              *(_QWORD *)algn_1EE575FE8 = &ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineDeviceStructs(void)::ref;
              qword_1EE575FF0 = 0;
              if ((v860 & 1) == 0
              {
                ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
                unk_1EE576020 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
                qword_1EE576028 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
                unk_1EE576030 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
                qword_1EE576038 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
                unk_1EE576040 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
              }
              qword_1EE575FF8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineConstantStructs(void)::ref;
              unk_1EE576000 = xmmword_19FFB5830;
              v45 = 1.0;
              v51 = 0.5;
            }
            ggl::PipelineSetup::PipelineSetup((uint64_t)v724, (uint64_t)&ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::typedReflection(void)::ref);
            v724->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42BA790;
            v726 = (std::__shared_weak_count *)operator new();
            v727 = v726;
            v726->__shared_owners_ = 0;
            v728 = (unint64_t *)&v726->__shared_owners_;
            v726->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7B10;
            v726->__shared_weak_owners_ = 0;
            v726[1].__vftable = v724;
            *(_OWORD *)(v427 + 8) = 0u;
            *(_OWORD *)(v427 + 24) = 0u;
            *(_OWORD *)(v427 + 40) = 0u;
            *(_QWORD *)(v427 + 56) = 0x3FF0000000000000;
            *(_QWORD *)v427 = &off_1E42C3938;
            *(_QWORD *)(v427 + 160) = -4294967290;
            *(_WORD *)(v427 + 168) = 0;
            *(_QWORD *)(v427 + 172) = -1;
            *(_BYTE *)(v427 + 180) = 1;
            *(_QWORD *)(v427 + 184) = v723;
            *(_QWORD *)(v427 + 192) = v724;
            *(_QWORD *)(v427 + 200) = v726;
            v729 = 0uLL;
            do
              v730 = __ldxr(v728);
            while (__stxr(v730 + 1, v728));
            *(_QWORD *)(v427 + 208) = 0;
            *(_QWORD *)(v427 + 216) = 0;
            *(_QWORD *)(v427 + 224) = 0;
            *(float64x2_t *)(v427 + 232) = v912;
            v731 = v427 + 256;
            *(_QWORD *)(v427 + 248) = 0x3FF0000000000000;
            *(_QWORD *)(v427 + 256) = 0;
            *(_QWORD *)(v427 + 264) = 0;
            *(_QWORD *)(v427 + 272) = 0;
            do
              v732 = __ldaxr(v728);
            while (__stlxr(v732 - 1, v728));
            if (!v732)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v726->__on_zero_shared)(v726, (__n128)0);
              std::__shared_weak_count::__release_weak(v727);
              v729 = 0uLL;
            }
            *(_QWORD *)v427 = &off_1E42C5D68;
            *(_BYTE *)(v427 + 312) = 0;
            *(_OWORD *)(v427 + 280) = v729;
            *(_OWORD *)(v427 + 296) = v729;
            v733 = *(_QWORD *)(v427 + 192);
            v734 = *(uint64_t **)(v733 + 64);
            v734[1] = 0;
            v735 = *v720;
            *v734 = *v720;
            v736 = *(_QWORD **)(v733 + 160);
            v737 = v720[1];
            if (v737)
            {
              v738 = (unint64_t *)(v737 + 8);
              do
                v739 = __ldxr(v738);
              while (__stxr(v739 + 1, v738));
            }
            v740 = (std::__shared_weak_count *)v736[1];
            *v736 = v735;
            v736[1] = v737;
            if (v740)
            {
              v741 = (unint64_t *)&v740->__shared_owners_;
              do
                v742 = __ldaxr(v741);
              while (__stlxr(v742 - 1, v741));
              if (!v742)
              {
                ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
                std::__shared_weak_count::__release_weak(v740);
              }
            }
            v743 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v743->__shared_owners_ = 0;
            v744 = (unint64_t *)&v743->__shared_owners_;
            v743->__shared_weak_owners_ = 0;
            v743->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
            v745 = ggl::BufferData::BufferData((uint64_t)&v743[1], qword_1EE550AB8, 2, 1, 6, 1);
            v743[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            v743[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
            v746 = *(_QWORD *)(v733 + 64);
            *(_QWORD *)(v746 + 16) = v745;
            *(_QWORD *)(v746 + 24) = 0;
            v747 = *(_QWORD *)(v733 + 160);
            do
              v748 = __ldxr(v744);
            while (__stxr(v748 + 1, v744));
            v749 = *(std::__shared_weak_count **)(v747 + 24);
            *(_QWORD *)(v747 + 16) = v745;
            *(_QWORD *)(v747 + 24) = v743;
            if (v749)
            {
              v750 = (unint64_t *)&v749->__shared_owners_;
              do
                v751 = __ldaxr(v750);
              while (__stlxr(v751 - 1, v750));
              if (!v751)
              {
                ((void (*)(std::__shared_weak_count *))v749->__on_zero_shared)(v749);
                std::__shared_weak_count::__release_weak(v749);
              }
            }
            do
              v752 = __ldaxr(v744);
            while (__stlxr(v752 - 1, v744));
            if (!v752)
            {
              ((void (*)(std::__shared_weak_count *))v743->__on_zero_shared)(v743);
              std::__shared_weak_count::__release_weak(v743);
            }
            v753 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v753->__shared_owners_ = 0;
            v754 = (unint64_t *)&v753->__shared_owners_;
            v753->__shared_weak_owners_ = 0;
            v753->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
            v755 = ggl::BufferData::BufferData((uint64_t)&v753[1], qword_1EE550C18, 2, 1, 6, 1);
            v753[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            v753[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
            v756 = *(_QWORD *)(v733 + 64);
            *(_QWORD *)(v756 + 32) = v755;
            *(_QWORD *)(v756 + 40) = 0;
            v757 = *(_QWORD *)(v733 + 160);
            do
              v758 = __ldxr(v754);
            while (__stxr(v758 + 1, v754));
            v759 = *(std::__shared_weak_count **)(v757 + 40);
            *(_QWORD *)(v757 + 32) = v755;
            *(_QWORD *)(v757 + 40) = v753;
            if (v759)
            {
              v760 = (unint64_t *)&v759->__shared_owners_;
              do
                v761 = __ldaxr(v760);
              while (__stlxr(v761 - 1, v760));
              if (!v761)
              {
                ((void (*)(std::__shared_weak_count *))v759->__on_zero_shared)(v759);
                std::__shared_weak_count::__release_weak(v759);
              }
            }
            do
              v762 = __ldaxr(v754);
            while (__stlxr(v762 - 1, v754));
            if (!v762)
            {
              ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
              std::__shared_weak_count::__release_weak(v753);
            }
            v763 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v763->__shared_owners_ = 0;
            v764 = (unint64_t *)&v763->__shared_owners_;
            v763->__shared_weak_owners_ = 0;
            v763->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
            v765 = ggl::BufferData::BufferData((uint64_t)&v763[1], qword_1EE550B78, 2, 1, 6, 1);
            v763[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
            v763[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
            v766 = *(_QWORD *)(v733 + 64);
            *(_QWORD *)(v766 + 48) = v765;
            *(_QWORD *)(v766 + 56) = 0;
            v767 = *(_QWORD *)(v733 + 160);
            do
              v768 = __ldxr(v764);
            while (__stxr(v768 + 1, v764));
            v769 = *(std::__shared_weak_count **)(v767 + 56);
            *(_QWORD *)(v767 + 48) = v765;
            *(_QWORD *)(v767 + 56) = v763;
            if (v769)
            {
              v770 = (unint64_t *)&v769->__shared_owners_;
              do
                v771 = __ldaxr(v770);
              while (__stlxr(v771 - 1, v770));
              if (!v771)
              {
                ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
                std::__shared_weak_count::__release_weak(v769);
              }
            }
            do
              v772 = __ldaxr(v764);
            while (__stlxr(v772 - 1, v764));
            if (!v772)
            {
              ((void (*)(std::__shared_weak_count *))v763->__on_zero_shared)(v763);
              std::__shared_weak_count::__release_weak(v763);
            }
            v773 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v773->__shared_owners_ = 0;
            v774 = (unint64_t *)&v773->__shared_owners_;
            v773->__shared_weak_owners_ = 0;
            v773->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
            v775 = ggl::BufferData::BufferData((uint64_t)&v773[1], qword_1EE550BD8, 2, 1, 6, 1);
            v773[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            v773[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
            v783 = *(_QWORD *)(v733 + 64);
            *(_QWORD *)(v783 + 64) = v775;
            *(_QWORD *)(v783 + 72) = 0;
            v784 = *(_QWORD *)(v733 + 160);
            do
              v785 = __ldxr(v774);
            while (__stxr(v785 + 1, v774));
            v786 = *(std::__shared_weak_count **)(v784 + 72);
            *(_QWORD *)(v784 + 64) = v775;
            *(_QWORD *)(v784 + 72) = v773;
            if (v786)
            {
              v787 = (unint64_t *)&v786->__shared_owners_;
              do
                v788 = __ldaxr(v787);
              while (__stlxr(v788 - 1, v787));
              if (!v788)
              {
                ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
                std::__shared_weak_count::__release_weak(v786);
              }
            }
            do
              v789 = __ldaxr(v774);
            while (__stlxr(v789 - 1, v774));
            if (!v789)
            {
              ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
              std::__shared_weak_count::__release_weak(v773);
            }
            **(_QWORD **)(v733 + 96) = v720[32];
            altitude::util::computeLocalClipPlanes(__sz_4b, (uint64_t)v979, 1.04999995, v776, v777, v778, v779, v780, v781, v782);
            v790 = *(_QWORD *)(v733 + 64);
            v791 = *(_QWORD **)(v790 + 32);
            v792 = v791[1];
            v793 = (_OWORD *)v791[9];
            *v793 = *(_OWORD *)v979;
            v793[1] = *(_OWORD *)&v979[16];
            v793[2] = v980;
            v793[3] = v981;
            v793[4] = v982;
            v793[5] = v983;
            if (v791[8] > v792)
              v792 = v791[8];
            v791[7] = 0;
            v791[8] = v792;
            v794 = *(_QWORD **)(v790 + 64);
            v795 = v794[1];
            *(_QWORD *)&v796 = v920;
            *((_QWORD *)&v796 + 1) = v921;
            *(_OWORD *)v794[9] = v796;
            if (v794[8] > v795)
              v795 = v794[8];
            v794[7] = 0;
            v794[8] = v795;
            v797 = (std::__shared_weak_count *)operator new(0xA8uLL);
            v797->__shared_owners_ = 0;
            v798 = (unint64_t *)&v797->__shared_owners_;
            v797->__shared_weak_owners_ = 0;
            v797->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3628;
            v799 = v797 + 1;
            do
              v800 = __ldxr(v706);
            while (__stxr(v800 + 1, v706));
            v801 = &unk_1ECE44000;
            do
              v802 = __ldxr(v381);
            while (__stxr(v802 + 1, v381));
            if ((v803 & 1) == 0)
            {
              v801 = (_QWORD *)&unk_1ECE44000;
              if (v861)
              {
                if ((v862 & 1) == 0
                {
                  ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorphBorder::vertexReflection;
                }
                ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r;
                unk_1EE5762A8 = 1;
                v45 = 1.0;
                v51 = 0.5;
                v801 = (_QWORD *)&unk_1ECE44000;
              }
            }
            v797[3].__shared_weak_owners_ = 0;
            v797[2].__shared_owners_ = 0;
            v797[2].__shared_weak_owners_ = 0;
            LODWORD(v797[3].__vftable) = 0;
            v797[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
            v797[1].__shared_owners_ = (uint64_t)"/meshes/flyover";
            v797[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
            v797[2].__vftable = 0;
            v797[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r;
            v797[4].__vftable = 0;
            v797[4].__shared_owners_ = 0;
            if ((v804 & 1) == 0)
            {
              v801 = (_QWORD *)&unk_1ECE44000;
              if (v863)
              {
                v864 = operator new();
                *(_QWORD *)(v864 + 16) = 0xA3D02C1100000005;
                *(_QWORD *)(v864 + 24) = "GeoGL";
                *(_OWORD *)(v864 + 32) = xmmword_19FFB2DE0;
                *(_QWORD *)v864 = &off_1E42B5668;
                *(_QWORD *)(v864 + 8) = "GeoGL";
                *(_OWORD *)(v864 + 72) = 0u;
                *(_OWORD *)(v864 + 88) = 0u;
                *(_OWORD *)(v864 + 104) = 0u;
                *(_OWORD *)(v864 + 120) = 0u;
                *(_OWORD *)(v864 + 136) = 0u;
                *(_OWORD *)(v864 + 152) = 0u;
                *(_OWORD *)(v864 + 168) = 0u;
                *(_OWORD *)(v864 + 184) = 0u;
                *(_OWORD *)(v864 + 200) = 0u;
                *(_OWORD *)(v864 + 216) = 0u;
                *(_OWORD *)(v864 + 232) = 0u;
                *(_QWORD *)(v864 + 248) = 0;
                *(_OWORD *)(v864 + 56) = 0u;
                v865 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v864 + 56), 0);
                if ((_DWORD)v865)
                  geo::read_write_lock::logFailure(v865, (uint64_t)"initialization", v866);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v864 + 48) = zone;
                malloc_set_zone_name(zone, "GeoGL");
                *(_QWORD *)(v864 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                ggl::Allocator::instance(void)::alloc = v864;
                v801 = (_QWORD *)&unk_1ECE44000;
                v45 = 1.0;
                v51 = 0.5;
              }
            }
            v805 = v801[495];
            v797[6].__vftable = 0;
            v797[5].__vftable = 0;
            v797[5].__shared_owners_ = 0;
            v797[4].__shared_weak_owners_ = v805;
            if ((v805 & 1) == 0)
            {
              v801 = (_QWORD *)&unk_1ECE44000;
              if (v868)
              {
                v869 = operator new();
                *(_QWORD *)(v869 + 16) = 0xA3D02C1100000005;
                *(_QWORD *)(v869 + 24) = "GeoGL";
                *(_OWORD *)(v869 + 32) = xmmword_19FFB2DE0;
                *(_QWORD *)v869 = &off_1E42B5668;
                *(_QWORD *)(v869 + 8) = "GeoGL";
                *(_OWORD *)(v869 + 72) = 0u;
                *(_OWORD *)(v869 + 88) = 0u;
                *(_OWORD *)(v869 + 104) = 0u;
                *(_OWORD *)(v869 + 120) = 0u;
                *(_OWORD *)(v869 + 136) = 0u;
                *(_OWORD *)(v869 + 152) = 0u;
                *(_OWORD *)(v869 + 168) = 0u;
                *(_OWORD *)(v869 + 184) = 0u;
                *(_OWORD *)(v869 + 200) = 0u;
                *(_OWORD *)(v869 + 216) = 0u;
                *(_OWORD *)(v869 + 232) = 0u;
                *(_QWORD *)(v869 + 248) = 0;
                v910 = v869;
                *(_OWORD *)(v869 + 56) = 0u;
                v870 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v869 + 56), 0);
                if ((_DWORD)v870)
                  geo::read_write_lock::logFailure(v870, (uint64_t)"initialization", v871);
                v872 = malloc_create_zone(0, 0);
                *(_QWORD *)(v910 + 48) = v872;
                malloc_set_zone_name(v872, "GeoGL");
                *(_QWORD *)(v910 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                ggl::Allocator::instance(void)::alloc = v910;
                v801 = (_QWORD *)&unk_1ECE44000;
                v45 = 1.0;
                v51 = 0.5;
              }
            }
            v797[6].__shared_owners_ = v801[495];
            v797[6].__shared_weak_owners_ = 0;
            v797[5].__shared_weak_owners_ = (uint64_t)&v797[6];
            v797[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BDA38;
            v797[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BDA58;
            *(_QWORD *)v979 = v914;
            *(_QWORD *)&v979[8] = v964;
            do
              v806 = __ldxr(v706);
            while (__stxr(v806 + 1, v706));
            std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)&v797[3].__shared_weak_owners_, (uint64_t *)v979, (uint64_t *)&v979[16], 1uLL);
            v807 = *(std::__shared_weak_count **)&v979[8];
            if (*(_QWORD *)&v979[8])
            {
              v808 = (unint64_t *)(*(_QWORD *)&v979[8] + 8);
              do
                v809 = __ldaxr(v808);
              while (__stlxr(v809 - 1, v808));
              if (!v809)
              {
                ((void (*)(std::__shared_weak_count *))v807->__on_zero_shared)(v807);
                std::__shared_weak_count::__release_weak(v807);
              }
            }
            do
              v810 = __ldxr(v381);
            while (__stxr(v810 + 1, v381));
            shared_owners = (std::__shared_weak_count *)v797[5].__shared_owners_;
            v797[5].__vftable = v950;
            v797[5].__shared_owners_ = (uint64_t)v954;
            if (shared_owners)
            {
              v812 = (unint64_t *)&shared_owners->__shared_owners_;
              do
                v813 = __ldaxr(v812);
              while (__stlxr(v813 - 1, v812));
              if (!v813)
              {
                ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
                std::__shared_weak_count::__release_weak(shared_owners);
              }
            }
            v797[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BA750;
            v797[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BA770;
            do
              v814 = __ldaxr(v381);
            while (__stlxr(v814 - 1, v381));
            if (!v814)
            {
              ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
              std::__shared_weak_count::__release_weak(v954);
            }
            do
              v815 = __ldaxr(v706);
            while (__stlxr(v815 - 1, v706));
            if (!v815)
            {
              ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
              std::__shared_weak_count::__release_weak(v964);
            }
            do
              v816 = __ldxr(v798);
            while (__stxr(v816 + 1, v798));
            do
              v817 = __ldxr(v798);
            while (__stxr(v817 + 1, v798));
            v818 = *(std::__shared_weak_count **)(v427 + 224);
            *(_QWORD *)(v427 + 216) = v799;
            *(_QWORD *)(v427 + 224) = v797;
            if (v818)
            {
              v819 = (unint64_t *)&v818->__shared_owners_;
              do
                v820 = __ldaxr(v819);
              while (__stlxr(v820 - 1, v819));
              if (!v820)
              {
                ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
                std::__shared_weak_count::__release_weak(v818);
              }
            }
            v821 = *(_QWORD *)(v427 + 184);
            if (v821)
              *(_QWORD *)(v821 + 64) = v799;
            do
              v822 = __ldaxr(v798);
            while (__stlxr(v822 - 1, v798));
            v513 = v896;
            if (!v822)
            {
              ((void (*)(std::__shared_weak_count *))v797->__on_zero_shared)(v797);
              std::__shared_weak_count::__release_weak(v797);
            }
            if (*(_BYTE *)(v427 + 312))
              v823 = v720 + 31;
            else
              v823 = v720 + 30;
            *(_QWORD *)(v427 + 208) = *v823;
            (*(void (**)(uint64_t, size_t))(*(_QWORD *)v427 + 32))(v427, __sz_4b);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v427 + 16))(v427, v919);
            *(float64x2_t *)(v427 + 232) = v912;
            *(_QWORD *)(v427 + 248) = 0x3FF0000000000000;
            *(_QWORD *)(*(_QWORD *)(v427 + 184) + 64) = *(_QWORD *)(v427 + 216);
            *(_QWORD *)(*(_QWORD *)(v427 + 184) + 32) = *(_QWORD *)(v427 + 192);
            *(_QWORD *)(*(_QWORD *)(v427 + 184) + 24) = *(_QWORD *)(v427 + 208);
            do
              v824 = __ldaxr(v798);
            while (__stlxr(v824 - 1, v798));
            if (!v824)
            {
              ((void (*)(std::__shared_weak_count *))v797->__on_zero_shared)(v797);
              std::__shared_weak_count::__release_weak(v797);
            }
            *(_QWORD *)v427 = &off_1E42C6538;
            *(_BYTE *)(v427 + 313) = v884;
            v825 = *(_QWORD **)(v427 + 256);
            v826 = *(_QWORD *)(v427 + 264) - (_QWORD)v825;
            if (v826 > 0x1F)
            {
              if (v826 != 32)
                *(_QWORD *)(v427 + 264) = v825 + 4;
            }
            else
            {
              std::vector<altitude::TextureMap *>::__append(v427 + 256, 4 - (v826 >> 3));
              v825 = *(_QWORD **)v731;
            }
            *v825 = v930;
            *(_QWORD *)(*(_QWORD *)v731 + 8) = v936;
            *(_QWORD *)(*(_QWORD *)v731 + 16) = v938;
            *(_QWORD *)(*(_QWORD *)v731 + 24) = v903;
            v828 = v720[22];
            v827 = v720[23];
            if (v827)
            {
              v829 = (unint64_t *)(v827 + 8);
              do
                v830 = __ldxr(v829);
              while (__stxr(v830 + 1, v829));
            }
            v831 = *(std::__shared_weak_count **)(v427 + 288);
            *(_QWORD *)(v427 + 280) = v828;
            *(_QWORD *)(v427 + 288) = v827;
            if (v831)
            {
              v832 = (unint64_t *)&v831->__shared_owners_;
              do
                v833 = __ldaxr(v832);
              while (__stlxr(v833 - 1, v832));
              if (!v833)
              {
                ((void (*)(std::__shared_weak_count *))v831->__on_zero_shared)(v831);
                std::__shared_weak_count::__release_weak(v831);
              }
            }
            v835 = v720[24];
            v834 = v720[25];
            if (v834)
            {
              v836 = (unint64_t *)(v834 + 8);
              do
                v837 = __ldxr(v836);
              while (__stxr(v837 + 1, v836));
            }
            v838 = *(std::__shared_weak_count **)(v427 + 304);
            *(_QWORD *)(v427 + 296) = v835;
            *(_QWORD *)(v427 + 304) = v834;
            if (v838)
            {
              v839 = (unint64_t *)&v838->__shared_owners_;
              do
                v840 = __ldaxr(v839);
              while (__stlxr(v840 - 1, v839));
              if (!v840)
              {
                ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
                std::__shared_weak_count::__release_weak(v838);
              }
            }
            ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v427 + 192), *(_QWORD *)(v427 + 280), *(std::__shared_weak_count **)(v427 + 288));
            v841 = *(_QWORD *)(v427 + 192);
            v842 = (std::__shared_weak_count *)operator new(0xE8uLL);
            v842->__shared_owners_ = 0;
            v843 = (unint64_t *)&v842->__shared_owners_;
            v842->__shared_weak_owners_ = 0;
            v842->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1168;
            v844 = ggl::BufferData::BufferData((uint64_t)&v842[1], qword_1EE54CA10, 2, 1, 6, 1);
            v842[9].__shared_owners_ = (uint64_t)ggl::FlyoverMorph::Morph::reflection(void)::reflection;
            v842[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8D70;
            v845 = *(_QWORD *)(v841 + 64);
            *(_QWORD *)(v845 + 80) = v844;
            *(_QWORD *)(v845 + 88) = 0;
            v846 = *(_QWORD *)(v841 + 160);
            do
              v847 = __ldxr(v843);
            while (__stxr(v847 + 1, v843));
            v848 = *(std::__shared_weak_count **)(v846 + 88);
            *(_QWORD *)(v846 + 80) = v844;
            *(_QWORD *)(v846 + 88) = v842;
            v849 = v972;
            v850 = v959;
            if (v848)
            {
              v851 = (unint64_t *)&v848->__shared_owners_;
              do
                v852 = __ldaxr(v851);
              while (__stlxr(v852 - 1, v851));
              if (!v852)
              {
                ((void (*)(std::__shared_weak_count *, __n128, __n128))v848->__on_zero_shared)(v848, v972, v959);
                std::__shared_weak_count::__release_weak(v848);
                v850 = v959;
                v849 = v972;
              }
            }
            do
              v853 = __ldaxr(v843);
            while (__stlxr(v853 - 1, v843));
            v42 = v932;
            if (!v853)
            {
              ((void (*)(std::__shared_weak_count *, __n128, __n128))v842->__on_zero_shared)(v842, v849, v850);
              std::__shared_weak_count::__release_weak(v842);
              v850.n128_u64[0] = v959.n128_u64[0];
              v849.n128_u64[0] = v972.n128_u64[0];
            }
            v854 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v427 + 192) + 64) + 80);
            v855 = v854[1];
            v856 = (__n128 *)v854[9];
            v849.n128_u64[1] = v850.n128_u64[0];
            *v856 = v849;
            v856[1].n128_u64[0] = 0;
            if (v854[8] > v855)
              v855 = v854[8];
            v854[7] = 0;
            v854[8] = v855;
            do
              v857 = __ldaxr(v381);
            while (__stlxr(v857 - 1, v381));
            if (!v857)
            {
              ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
              std::__shared_weak_count::__release_weak(v954);
            }
            do
              v858 = __ldaxr(v706);
            while (__stlxr(v858 - 1, v706));
            v937 = v946;
            if (!v858)
              goto LABEL_617;
          }
          else
          {
            v412 = (v280 - v961) >> 4;
            v413 = (std::__shared_weak_count *)operator new(0xF8uLL);
            v413->__shared_owners_ = 0;
            v414 = (unint64_t *)&v413->__shared_owners_;
            v413->__shared_weak_owners_ = 0;
            v413->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFBF8;
            v935 = (uint64_t)&v413[1];
            ggl::BufferData::BufferData((uint64_t)&v413[1], 48, 0, 0, 7, v412);
            v415 = 0;
            v413[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B7820;
            v413[9].__shared_weak_owners_ = (uint64_t)"/render/morph/vertexdata";
            v413[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverMorph::vertexReflection;
            v413[9].__shared_owners_ = (uint64_t)&unk_1E42B7840;
            v416 = (unint64_t)v413[3].__vftable - v413[2].__shared_weak_owners_;
            v964 = v413;
            v417 = v416 / v413[1].__shared_owners_ * v413[1].__shared_owners_;
            v418 = v416 % v413[1].__shared_owners_;
            if (v416 != v418)
              v415 = v413[4].__vftable;
            v419 = v961;
            if (v280 != v961)
            {
              v420 = __p;
              v421 = (float32x2_t *)(v937 + v918);
              if (v412 <= 1)
                v422 = 1;
              else
                v422 = (v280 - v961) >> 4;
              p_get_deleter = &v415->__get_deleter;
              do
              {
                v424 = *(_QWORD *)v419;
                *(p_get_deleter - 4) = *((_DWORD *)v419 + 2);
                *((_QWORD *)p_get_deleter - 3) = v424;
                *(p_get_deleter - 2) = *((_DWORD *)v419 + 3);
                *p_get_deleter = v421->i32[0];
                p_get_deleter[1] = v421->i32[1];
                if (__sz)
                  v425 = v421;
                else
                  v425 = v420;
                p_get_deleter[2] = v425->i32[0];
                v419 += 16;
                p_get_deleter[3] = v425->i32[1];
                ++v420;
                p_get_deleter += 12;
                v421 = (float32x2_t *)((char *)v421 + v290);
                --v422;
              }
              while (v422);
            }
            if (v415 && v416 != v418)
            {
              v426 = v413[3].__shared_weak_owners_;
              if (v426 <= v417)
                v426 = v417;
              v413[3].__shared_owners_ = 0;
              v413[3].__shared_weak_owners_ = v426;
            }
            v427 = operator new();
            v428 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v915 + 1) + 8) + 40) + 8) + 216);
            __sz_4a = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v932 + 24))(*v932);
            v947 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v932 + 56))(*v932);
            if ((v899 & 1) != 0)
            {
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)&v380[1];
              v977.__r_.__value_.__l.__size_ = (std::string::size_type)v380;
              do
                v429 = __ldxr(v381);
              while (__stxr(v429 + 1, v381));
              v430 = operator new();
              *(_QWORD *)v430 = &off_1E42B59B0;
              *(_QWORD *)(v430 + 48) = 0;
              *(_QWORD *)(v430 + 24) = 0;
              *(_QWORD *)(v430 + 32) = 0;
              *(_QWORD *)(v430 + 16) = "";
              *(_DWORD *)(v430 + 40) = 0;
              *(_DWORD *)(v430 + 56) = 1065353216;
              *(_OWORD *)(v430 + 64) = 0u;
              *(_OWORD *)(v430 + 80) = 0u;
              *(int64x2_t *)(v430 + 96) = vdupq_n_s64(1uLL);
              *(_QWORD *)(v430 + 112) = 0;
              v431 = (std::__shared_weak_count_vtbl *)operator new();
              if ((v432 & 1) == 0
              {
                if ((v873 & 1) == 0
                {
                  if ((v878 & 1) == 0
                  {
                    ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
                  }
                  ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
                  unk_1EE5761A8 = 1;
                }
                ggl::FlyoverMorphNight::MorphPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
                *(_QWORD *)algn_1EE575F78 = &ggl::FlyoverMorphNight::pipelineDataMorphPipelineDeviceStructs(void)::ref;
                qword_1EE575F80 = 0;
                if ((v874 & 1) == 0
                {
                  ggl::FlyoverMorphNight::pipelineDataMorphPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
                  unk_1EE575FB0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
                  qword_1EE575FB8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
                  unk_1EE575FC0 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
                  qword_1EE575FC8 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
                  unk_1EE575FD0 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
                }
                qword_1EE575F88 = (uint64_t)&ggl::FlyoverMorphNight::pipelineDataMorphPipelineConstantStructs(void)::ref;
                unk_1EE575F90 = xmmword_19FFB5830;
                v45 = 1.0;
                v51 = 0.5;
              }
              ggl::PipelineSetup::PipelineSetup((uint64_t)v431, (uint64_t)&ggl::FlyoverMorphNight::MorphPipelineSetup::typedReflection(void)::ref);
              v431->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42BA090;
              v433 = (std::__shared_weak_count *)operator new();
              v434 = v433;
              v433->__shared_owners_ = 0;
              v435 = (unint64_t *)&v433->__shared_owners_;
              v433->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7A68;
              v433->__shared_weak_owners_ = 0;
              v433[1].__vftable = v431;
              *(_OWORD *)(v427 + 8) = 0u;
              *(_OWORD *)(v427 + 24) = 0u;
              *(_OWORD *)(v427 + 40) = 0u;
              *(_QWORD *)(v427 + 56) = 0x3FF0000000000000;
              *(_QWORD *)v427 = &off_1E42C3938;
              *(_QWORD *)(v427 + 160) = -4294967291;
              *(_WORD *)(v427 + 168) = 0;
              *(_QWORD *)(v427 + 172) = -1;
              *(_BYTE *)(v427 + 180) = 1;
              *(_QWORD *)(v427 + 184) = v430;
              *(_QWORD *)(v427 + 192) = v431;
              *(_QWORD *)(v427 + 200) = v433;
              v436 = 0uLL;
              do
                v437 = __ldxr(v435);
              while (__stxr(v437 + 1, v435));
              *(_QWORD *)(v427 + 208) = 0;
              *(_QWORD *)(v427 + 216) = 0;
              *(_QWORD *)(v427 + 224) = 0;
              *(float64x2_t *)(v427 + 232) = v912;
              v438 = v427 + 256;
              *(_QWORD *)(v427 + 248) = 0x3FF0000000000000;
              *(_QWORD *)(v427 + 256) = 0;
              *(_QWORD *)(v427 + 264) = 0;
              *(_QWORD *)(v427 + 272) = 0;
              do
                v439 = __ldaxr(v435);
              while (__stlxr(v439 - 1, v435));
              if (!v439)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v433->__on_zero_shared)(v433, (__n128)0);
                std::__shared_weak_count::__release_weak(v434);
                v436 = 0uLL;
              }
              *(_QWORD *)v427 = &off_1E42C5D10;
              *(_BYTE *)(v427 + 312) = 0;
              *(_OWORD *)(v427 + 280) = v436;
              *(_OWORD *)(v427 + 296) = v436;
              v440 = *(_QWORD *)(v427 + 192);
              v441 = *(uint64_t **)(v440 + 64);
              v441[1] = 0;
              v442 = *v428;
              *v441 = *v428;
              v443 = *(_QWORD **)(v440 + 160);
              v444 = v428[1];
              if (v444)
              {
                v445 = (unint64_t *)(v444 + 8);
                do
                  v446 = __ldxr(v445);
                while (__stxr(v446 + 1, v445));
              }
              v447 = (std::__shared_weak_count *)v443[1];
              *v443 = v442;
              v443[1] = v444;
              if (v447)
              {
                v448 = (unint64_t *)&v447->__shared_owners_;
                do
                  v449 = __ldaxr(v448);
                while (__stlxr(v449 - 1, v448));
                if (!v449)
                {
                  ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                  std::__shared_weak_count::__release_weak(v447);
                }
              }
              v450 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v450->__shared_owners_ = 0;
              v451 = (unint64_t *)&v450->__shared_owners_;
              v450->__shared_weak_owners_ = 0;
              v450->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
              v452 = ggl::BufferData::BufferData((uint64_t)&v450[1], qword_1EE550AB8, 2, 1, 6, 1);
              v450[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
              v450[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
              v453 = *(_QWORD *)(v440 + 64);
              *(_QWORD *)(v453 + 16) = v452;
              *(_QWORD *)(v453 + 24) = 0;
              v454 = *(_QWORD *)(v440 + 160);
              do
                v455 = __ldxr(v451);
              while (__stxr(v455 + 1, v451));
              v456 = *(std::__shared_weak_count **)(v454 + 24);
              *(_QWORD *)(v454 + 16) = v452;
              *(_QWORD *)(v454 + 24) = v450;
              if (v456)
              {
                v457 = (unint64_t *)&v456->__shared_owners_;
                do
                  v458 = __ldaxr(v457);
                while (__stlxr(v458 - 1, v457));
                if (!v458)
                {
                  ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                  std::__shared_weak_count::__release_weak(v456);
                }
              }
              do
                v459 = __ldaxr(v451);
              while (__stlxr(v459 - 1, v451));
              if (!v459)
              {
                ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                std::__shared_weak_count::__release_weak(v450);
              }
              v460 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v460->__shared_owners_ = 0;
              v461 = (unint64_t *)&v460->__shared_owners_;
              v460->__shared_weak_owners_ = 0;
              v460->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
              v462 = ggl::BufferData::BufferData((uint64_t)&v460[1], qword_1EE550C18, 2, 1, 6, 1);
              v460[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
              v460[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
              v463 = *(_QWORD *)(v440 + 64);
              *(_QWORD *)(v463 + 32) = v462;
              *(_QWORD *)(v463 + 40) = 0;
              v464 = *(_QWORD *)(v440 + 160);
              do
                v465 = __ldxr(v461);
              while (__stxr(v465 + 1, v461));
              v466 = *(std::__shared_weak_count **)(v464 + 40);
              *(_QWORD *)(v464 + 32) = v462;
              *(_QWORD *)(v464 + 40) = v460;
              if (v466)
              {
                v467 = (unint64_t *)&v466->__shared_owners_;
                do
                  v468 = __ldaxr(v467);
                while (__stlxr(v468 - 1, v467));
                if (!v468)
                {
                  ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                  std::__shared_weak_count::__release_weak(v466);
                }
              }
              do
                v469 = __ldaxr(v461);
              while (__stlxr(v469 - 1, v461));
              if (!v469)
              {
                ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                std::__shared_weak_count::__release_weak(v460);
              }
              v470 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v470->__shared_owners_ = 0;
              v471 = (unint64_t *)&v470->__shared_owners_;
              v470->__shared_weak_owners_ = 0;
              v470->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
              v472 = ggl::BufferData::BufferData((uint64_t)&v470[1], qword_1EE550B78, 2, 1, 6, 1);
              v470[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
              v470[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
              v473 = *(_QWORD *)(v440 + 64);
              *(_QWORD *)(v473 + 48) = v472;
              *(_QWORD *)(v473 + 56) = 0;
              v474 = *(_QWORD *)(v440 + 160);
              do
                v475 = __ldxr(v471);
              while (__stxr(v475 + 1, v471));
              v476 = *(std::__shared_weak_count **)(v474 + 56);
              *(_QWORD *)(v474 + 48) = v472;
              *(_QWORD *)(v474 + 56) = v470;
              if (v476)
              {
                v477 = (unint64_t *)&v476->__shared_owners_;
                do
                  v478 = __ldaxr(v477);
                while (__stlxr(v478 - 1, v477));
                if (!v478)
                {
                  ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
                  std::__shared_weak_count::__release_weak(v476);
                }
              }
              do
                v479 = __ldaxr(v471);
              while (__stlxr(v479 - 1, v471));
              if (!v479)
              {
                ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
                std::__shared_weak_count::__release_weak(v470);
              }
              v480 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v480->__shared_owners_ = 0;
              v481 = (unint64_t *)&v480->__shared_owners_;
              v480->__shared_weak_owners_ = 0;
              v480->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
              v482 = ggl::BufferData::BufferData((uint64_t)&v480[1], qword_1EE550BD8, 2, 1, 6, 1);
              v480[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
              v480[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
              v490 = *(_QWORD *)(v440 + 64);
              *(_QWORD *)(v490 + 64) = v482;
              *(_QWORD *)(v490 + 72) = 0;
              v491 = *(_QWORD *)(v440 + 160);
              do
                v492 = __ldxr(v481);
              while (__stxr(v492 + 1, v481));
              v493 = *(std::__shared_weak_count **)(v491 + 72);
              *(_QWORD *)(v491 + 64) = v482;
              *(_QWORD *)(v491 + 72) = v480;
              if (v493)
              {
                v494 = (unint64_t *)&v493->__shared_owners_;
                do
                  v495 = __ldaxr(v494);
                while (__stlxr(v495 - 1, v494));
                if (!v495)
                {
                  ((void (*)(std::__shared_weak_count *))v493->__on_zero_shared)(v493);
                  std::__shared_weak_count::__release_weak(v493);
                }
              }
              do
                v496 = __ldaxr(v481);
              while (__stlxr(v496 - 1, v481));
              if (!v496)
              {
                ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
                std::__shared_weak_count::__release_weak(v480);
              }
              **(_QWORD **)(v440 + 96) = v428[32];
              altitude::util::computeLocalClipPlanes(v947, (uint64_t)v979, 1.04999995, v483, v484, v485, v486, v487, v488, v489);
              v497 = *(_QWORD *)(v440 + 64);
              v498 = *(_QWORD **)(v497 + 32);
              v499 = v498[1];
              v500 = (_OWORD *)v498[9];
              *v500 = *(_OWORD *)v979;
              v500[1] = *(_OWORD *)&v979[16];
              v500[2] = v980;
              v500[3] = v981;
              v500[4] = v982;
              v500[5] = v983;
              if (v498[8] > v499)
                v499 = v498[8];
              v498[7] = 0;
              v498[8] = v499;
              v501 = *(_QWORD **)(v497 + 64);
              v502 = v501[1];
              *(_QWORD *)&v503 = v920;
              *((_QWORD *)&v503 + 1) = v921;
              *(_OWORD *)v501[9] = v503;
              if (v501[8] > v502)
                v502 = v501[8];
              v501[7] = 0;
              v501[8] = v502;
              v504 = (std::__shared_weak_count *)operator new(0xA8uLL);
              v504->__shared_owners_ = 0;
              v505 = (unint64_t *)&v504->__shared_owners_;
              v504->__shared_weak_owners_ = 0;
              v504->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC00;
              v506 = v504 + 1;
              std::construct_at[abi:nn180100]<ggl::FlyoverMorph::MorphMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::FlyoverMorph::MorphMesh*>((uint64_t)&v504[1], v935, v964, (uint64_t *)&v977);
              do
                v507 = __ldxr(v505);
              while (__stxr(v507 + 1, v505));
              do
                v508 = __ldxr(v505);
              while (__stxr(v508 + 1, v505));
              v509 = *(std::__shared_weak_count **)(v427 + 224);
              *(_QWORD *)(v427 + 216) = v506;
              *(_QWORD *)(v427 + 224) = v504;
              if (v509)
              {
                v510 = (unint64_t *)&v509->__shared_owners_;
                do
                  v511 = __ldaxr(v510);
                while (__stlxr(v511 - 1, v510));
                if (!v511)
                {
                  ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                  std::__shared_weak_count::__release_weak(v509);
                }
              }
              v512 = *(_QWORD *)(v427 + 184);
              if (v512)
                *(_QWORD *)(v512 + 64) = v506;
              v513 = v896;
              do
                v514 = __ldaxr(v505);
              while (__stlxr(v514 - 1, v505));
              if (!v514)
              {
                ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                std::__shared_weak_count::__release_weak(v504);
              }
              if (*(_BYTE *)(v427 + 312))
                v515 = v428 + 31;
              else
                v515 = v428 + 30;
              *(_QWORD *)(v427 + 208) = *v515;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v427 + 32))(v427, v947);
              (*(void (**)(uint64_t, size_t))(*(_QWORD *)v427 + 16))(v427, __sz_4a);
              *(float64x2_t *)(v427 + 232) = v912;
              *(_QWORD *)(v427 + 248) = 0x3FF0000000000000;
              *(_QWORD *)(*(_QWORD *)(v427 + 184) + 64) = *(_QWORD *)(v427 + 216);
              *(_QWORD *)(*(_QWORD *)(v427 + 184) + 32) = *(_QWORD *)(v427 + 192);
              *(_QWORD *)(*(_QWORD *)(v427 + 184) + 24) = *(_QWORD *)(v427 + 208);
              do
                v516 = __ldaxr(v505);
              while (__stlxr(v516 - 1, v505));
              if (!v516)
              {
                ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                std::__shared_weak_count::__release_weak(v504);
              }
              *(_QWORD *)v427 = &off_1E42C64B8;
              *(_BYTE *)(v427 + 313) = v884;
              v517 = *(_QWORD **)(v427 + 256);
              v518 = *(_QWORD *)(v427 + 264) - (_QWORD)v517;
              if (v518 > 0x1F)
              {
                if (v518 != 32)
                  *(_QWORD *)(v427 + 264) = v517 + 4;
              }
              else
              {
                std::vector<altitude::TextureMap *>::__append(v427 + 256, 4 - (v518 >> 3));
                v517 = *(_QWORD **)v438;
              }
              *v517 = v900;
              *(_QWORD *)(*(_QWORD *)v438 + 8) = v903;
              *(_QWORD *)(*(_QWORD *)v438 + 16) = v909;
              *(_QWORD *)(*(_QWORD *)v438 + 24) = v895;
              v609 = v428[18];
              v608 = v428[19];
              if (v608)
              {
                v610 = (unint64_t *)(v608 + 8);
                do
                  v611 = __ldxr(v610);
                while (__stxr(v611 + 1, v610));
              }
              v612 = *(std::__shared_weak_count **)(v427 + 288);
              *(_QWORD *)(v427 + 280) = v609;
              *(_QWORD *)(v427 + 288) = v608;
              if (v612)
              {
                v613 = (unint64_t *)&v612->__shared_owners_;
                do
                  v614 = __ldaxr(v613);
                while (__stlxr(v614 - 1, v613));
                if (!v614)
                {
                  ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
                  std::__shared_weak_count::__release_weak(v612);
                }
              }
              v616 = v428[20];
              v615 = v428[21];
              if (v615)
              {
                v617 = (unint64_t *)(v615 + 8);
                do
                  v618 = __ldxr(v617);
                while (__stxr(v618 + 1, v617));
              }
              v619 = *(std::__shared_weak_count **)(v427 + 304);
              *(_QWORD *)(v427 + 296) = v616;
              *(_QWORD *)(v427 + 304) = v615;
              if (v619)
              {
                v620 = (unint64_t *)&v619->__shared_owners_;
                do
                  v621 = __ldaxr(v620);
                while (__stlxr(v621 - 1, v620));
                if (!v621)
                {
                  ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
                  std::__shared_weak_count::__release_weak(v619);
                }
              }
              ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v427 + 192), *(_QWORD *)(v427 + 280), *(std::__shared_weak_count **)(v427 + 288));
              v622 = *(_QWORD *)(v427 + 192);
              v623 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v623->__shared_owners_ = 0;
              v624 = (unint64_t *)&v623->__shared_owners_;
              v623->__shared_weak_owners_ = 0;
              v623->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1168;
              v625 = ggl::BufferData::BufferData((uint64_t)&v623[1], qword_1EE54CA10, 2, 1, 6, 1);
              v623[9].__shared_owners_ = (uint64_t)ggl::FlyoverMorph::Morph::reflection(void)::reflection;
              v623[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8D70;
              v626 = *(_QWORD *)(v622 + 64);
              *(_QWORD *)(v626 + 80) = v625;
              *(_QWORD *)(v626 + 88) = 0;
              v627 = *(_QWORD *)(v622 + 160);
              do
                v628 = __ldxr(v624);
              while (__stxr(v628 + 1, v624));
              v629 = *(std::__shared_weak_count **)(v627 + 88);
              *(_QWORD *)(v627 + 80) = v625;
              *(_QWORD *)(v627 + 88) = v623;
              v630 = v972;
              v631 = v959;
              if (v629)
              {
                v632 = (unint64_t *)&v629->__shared_owners_;
                do
                  v633 = __ldaxr(v632);
                while (__stlxr(v633 - 1, v632));
                if (!v633)
                {
                  ((void (*)(std::__shared_weak_count *, __n128, __n128))v629->__on_zero_shared)(v629, v972, v959);
                  std::__shared_weak_count::__release_weak(v629);
                  v631 = v959;
                  v630 = v972;
                }
              }
              do
                v634 = __ldaxr(v624);
              while (__stlxr(v634 - 1, v624));
              v42 = v932;
              if (!v634)
              {
                ((void (*)(std::__shared_weak_count *, __n128, __n128))v623->__on_zero_shared)(v623, v630, v631);
                std::__shared_weak_count::__release_weak(v623);
                v631.n128_u64[0] = v959.n128_u64[0];
                v630.n128_u64[0] = v972.n128_u64[0];
              }
              v635 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v427 + 192) + 64) + 80);
              v636 = v635[1];
              v637 = (__n128 *)v635[9];
              v630.n128_u64[1] = v631.n128_u64[0];
              *v637 = v630;
              v637[1].n128_u64[0] = 0;
              if (v635[8] > v636)
                v636 = v635[8];
              v635[7] = 0;
              v635[8] = v636;
              do
                v638 = __ldaxr(v381);
              while (__stlxr(v638 - 1, v381));
            }
            else
            {
              v977.__r_.__value_.__r.__words[0] = (std::string::size_type)&v380[1];
              v977.__r_.__value_.__l.__size_ = (std::string::size_type)v380;
              do
                v519 = __ldxr(v381);
              while (__stxr(v519 + 1, v381));
              v520 = operator new();
              *(_QWORD *)v520 = &off_1E42B59B0;
              *(_QWORD *)(v520 + 48) = 0;
              *(_QWORD *)(v520 + 24) = 0;
              *(_QWORD *)(v520 + 32) = 0;
              *(_QWORD *)(v520 + 16) = "";
              *(_DWORD *)(v520 + 40) = 0;
              *(_DWORD *)(v520 + 56) = 1065353216;
              *(_OWORD *)(v520 + 64) = 0u;
              *(_OWORD *)(v520 + 80) = 0u;
              *(int64x2_t *)(v520 + 96) = vdupq_n_s64(1uLL);
              *(_QWORD *)(v520 + 112) = 0;
              v521 = (std::__shared_weak_count_vtbl *)operator new();
              if ((v522 & 1) == 0
              {
                if ((v875 & 1) == 0
                {
                  if ((v879 & 1) == 0
                  {
                    ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
                  }
                  ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
                  unk_1EE5761A8 = 1;
                }
                ggl::FlyoverMorph::MorphPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
                *(_QWORD *)algn_1EE575E48 = &ggl::FlyoverMorph::pipelineDataMorphPipelineDeviceStructs(void)::ref;
                qword_1EE575E50 = 0;
                if ((v876 & 1) == 0
                {
                  ggl::FlyoverMorph::pipelineDataMorphPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
                  unk_1EE575E80 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
                  qword_1EE575E88 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
                  unk_1EE575E90 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
                  qword_1EE575E98 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
                  unk_1EE575EA0 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
                }
                qword_1EE575E58 = (uint64_t)&ggl::FlyoverMorph::pipelineDataMorphPipelineConstantStructs(void)::ref;
                unk_1EE575E60 = xmmword_19FFB4850;
                v45 = 1.0;
                v51 = 0.5;
              }
              ggl::PipelineSetup::PipelineSetup((uint64_t)v521, (uint64_t)&ggl::FlyoverMorph::MorphPipelineSetup::typedReflection(void)::ref);
              v521->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E42B60E0;
              v523 = (std::__shared_weak_count *)operator new();
              v524 = v523;
              v523->__shared_owners_ = 0;
              v525 = (unint64_t *)&v523->__shared_owners_;
              v523->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E76E8;
              v523->__shared_weak_owners_ = 0;
              v523[1].__vftable = v521;
              *(_OWORD *)(v427 + 8) = 0u;
              *(_OWORD *)(v427 + 24) = 0u;
              *(_OWORD *)(v427 + 40) = 0u;
              *(_QWORD *)(v427 + 56) = 0x3FF0000000000000;
              *(_QWORD *)v427 = &off_1E42C3938;
              *(_QWORD *)(v427 + 160) = 0xFFFFFFFF00000004;
              *(_WORD *)(v427 + 168) = 0;
              *(_QWORD *)(v427 + 172) = -1;
              *(_BYTE *)(v427 + 180) = 1;
              *(_QWORD *)(v427 + 184) = v520;
              *(_QWORD *)(v427 + 192) = v521;
              *(_QWORD *)(v427 + 200) = v523;
              v526 = 0uLL;
              do
                v527 = __ldxr(v525);
              while (__stxr(v527 + 1, v525));
              *(_QWORD *)(v427 + 208) = 0;
              *(_QWORD *)(v427 + 216) = 0;
              *(_QWORD *)(v427 + 224) = 0;
              *(float64x2_t *)(v427 + 232) = v912;
              v528 = v427 + 256;
              *(_QWORD *)(v427 + 248) = 0x3FF0000000000000;
              *(_QWORD *)(v427 + 256) = 0;
              *(_QWORD *)(v427 + 264) = 0;
              *(_QWORD *)(v427 + 272) = 0;
              do
                v529 = __ldaxr(v525);
              while (__stlxr(v529 - 1, v525));
              if (!v529)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v523->__on_zero_shared)(v523, (__n128)0);
                std::__shared_weak_count::__release_weak(v524);
                v526 = 0uLL;
              }
              *(_QWORD *)v427 = &off_1E42C5BB0;
              *(_BYTE *)(v427 + 312) = 0;
              *(_OWORD *)(v427 + 280) = v526;
              *(_OWORD *)(v427 + 296) = v526;
              v530 = *(_QWORD *)(v427 + 192);
              v531 = *(uint64_t **)(v530 + 64);
              v531[1] = 0;
              v532 = *v428;
              *v531 = *v428;
              v533 = *(_QWORD **)(v530 + 160);
              v534 = v428[1];
              if (v534)
              {
                v535 = (unint64_t *)(v534 + 8);
                do
                  v536 = __ldxr(v535);
                while (__stxr(v536 + 1, v535));
              }
              v537 = (std::__shared_weak_count *)v533[1];
              *v533 = v532;
              v533[1] = v534;
              if (v537)
              {
                v538 = (unint64_t *)&v537->__shared_owners_;
                do
                  v539 = __ldaxr(v538);
                while (__stlxr(v539 - 1, v538));
                if (!v539)
                {
                  ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
                  std::__shared_weak_count::__release_weak(v537);
                }
              }
              v540 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v540->__shared_owners_ = 0;
              v541 = (unint64_t *)&v540->__shared_owners_;
              v540->__shared_weak_owners_ = 0;
              v540->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1398;
              v542 = ggl::BufferData::BufferData((uint64_t)&v540[1], qword_1EE550AB8, 2, 1, 6, 1);
              v540[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Transform::reflection(void)::reflection;
              v540[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EB0;
              v543 = *(_QWORD *)(v530 + 64);
              *(_QWORD *)(v543 + 16) = v542;
              *(_QWORD *)(v543 + 24) = 0;
              v544 = *(_QWORD *)(v530 + 160);
              do
                v545 = __ldxr(v541);
              while (__stxr(v545 + 1, v541));
              v546 = *(std::__shared_weak_count **)(v544 + 24);
              *(_QWORD *)(v544 + 16) = v542;
              *(_QWORD *)(v544 + 24) = v540;
              if (v546)
              {
                v547 = (unint64_t *)&v546->__shared_owners_;
                do
                  v548 = __ldaxr(v547);
                while (__stlxr(v548 - 1, v547));
                if (!v548)
                {
                  ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                  std::__shared_weak_count::__release_weak(v546);
                }
              }
              do
                v549 = __ldaxr(v541);
              while (__stlxr(v549 - 1, v541));
              if (!v549)
              {
                ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                std::__shared_weak_count::__release_weak(v540);
              }
              v550 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v550->__shared_owners_ = 0;
              v551 = (unint64_t *)&v550->__shared_owners_;
              v550->__shared_weak_owners_ = 0;
              v550->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E12B8;
              v552 = ggl::BufferData::BufferData((uint64_t)&v550[1], qword_1EE550C18, 2, 1, 6, 1);
              v550[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
              v550[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E30;
              v553 = *(_QWORD *)(v530 + 64);
              *(_QWORD *)(v553 + 32) = v552;
              *(_QWORD *)(v553 + 40) = 0;
              v554 = *(_QWORD *)(v530 + 160);
              do
                v555 = __ldxr(v551);
              while (__stxr(v555 + 1, v551));
              v556 = *(std::__shared_weak_count **)(v554 + 40);
              *(_QWORD *)(v554 + 32) = v552;
              *(_QWORD *)(v554 + 40) = v550;
              if (v556)
              {
                v557 = (unint64_t *)&v556->__shared_owners_;
                do
                  v558 = __ldaxr(v557);
                while (__stlxr(v558 - 1, v557));
                if (!v558)
                {
                  ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
                  std::__shared_weak_count::__release_weak(v556);
                }
              }
              do
                v559 = __ldaxr(v551);
              while (__stlxr(v559 - 1, v551));
              if (!v559)
              {
                ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
                std::__shared_weak_count::__release_weak(v550);
              }
              v560 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v560->__shared_owners_ = 0;
              v561 = (unint64_t *)&v560->__shared_owners_;
              v560->__shared_weak_owners_ = 0;
              v560->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1328;
              v562 = ggl::BufferData::BufferData((uint64_t)&v560[1], qword_1EE550B78, 2, 1, 6, 1);
              v560[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Material::reflection(void)::reflection;
              v560[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E70;
              v563 = *(_QWORD *)(v530 + 64);
              *(_QWORD *)(v563 + 48) = v562;
              *(_QWORD *)(v563 + 56) = 0;
              v564 = *(_QWORD *)(v530 + 160);
              do
                v565 = __ldxr(v561);
              while (__stxr(v565 + 1, v561));
              v566 = *(std::__shared_weak_count **)(v564 + 56);
              *(_QWORD *)(v564 + 48) = v562;
              *(_QWORD *)(v564 + 56) = v560;
              if (v566)
              {
                v567 = (unint64_t *)&v566->__shared_owners_;
                do
                  v568 = __ldaxr(v567);
                while (__stlxr(v568 - 1, v567));
                if (!v568)
                {
                  ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
                  std::__shared_weak_count::__release_weak(v566);
                }
              }
              do
                v569 = __ldaxr(v561);
              while (__stlxr(v569 - 1, v561));
              if (!v569)
              {
                ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
                std::__shared_weak_count::__release_weak(v560);
              }
              v570 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v570->__shared_owners_ = 0;
              v571 = (unint64_t *)&v570->__shared_owners_;
              v570->__shared_weak_owners_ = 0;
              v570->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1360;
              v572 = ggl::BufferData::BufferData((uint64_t)&v570[1], qword_1EE550BD8, 2, 1, 6, 1);
              v570[9].__shared_owners_ = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
              v570[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8E90;
              v580 = *(_QWORD *)(v530 + 64);
              *(_QWORD *)(v580 + 64) = v572;
              *(_QWORD *)(v580 + 72) = 0;
              v581 = *(_QWORD *)(v530 + 160);
              do
                v582 = __ldxr(v571);
              while (__stxr(v582 + 1, v571));
              v583 = *(std::__shared_weak_count **)(v581 + 72);
              *(_QWORD *)(v581 + 64) = v572;
              *(_QWORD *)(v581 + 72) = v570;
              if (v583)
              {
                v584 = (unint64_t *)&v583->__shared_owners_;
                do
                  v585 = __ldaxr(v584);
                while (__stlxr(v585 - 1, v584));
                if (!v585)
                {
                  ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
                  std::__shared_weak_count::__release_weak(v583);
                }
              }
              do
                v586 = __ldaxr(v571);
              while (__stlxr(v586 - 1, v571));
              if (!v586)
              {
                ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                std::__shared_weak_count::__release_weak(v570);
              }
              **(_QWORD **)(v530 + 96) = v428[32];
              altitude::util::computeLocalClipPlanes(v947, (uint64_t)v979, 1.04999995, v573, v574, v575, v576, v577, v578, v579);
              v587 = *(_QWORD *)(v530 + 64);
              v588 = *(_QWORD **)(v587 + 32);
              v589 = v588[1];
              v590 = (_OWORD *)v588[9];
              *v590 = *(_OWORD *)v979;
              v590[1] = *(_OWORD *)&v979[16];
              v590[2] = v980;
              v590[3] = v981;
              v590[4] = v982;
              v590[5] = v983;
              if (v588[8] > v589)
                v589 = v588[8];
              v588[7] = 0;
              v588[8] = v589;
              v591 = *(_QWORD **)(v587 + 64);
              v592 = v591[1];
              *(_QWORD *)&v593 = v920;
              *((_QWORD *)&v593 + 1) = v921;
              *(_OWORD *)v591[9] = v593;
              if (v591[8] > v592)
                v592 = v591[8];
              v591[7] = 0;
              v591[8] = v592;
              v594 = (std::__shared_weak_count *)operator new(0xA8uLL);
              v594->__shared_owners_ = 0;
              v595 = (unint64_t *)&v594->__shared_owners_;
              v594->__shared_weak_owners_ = 0;
              v594->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEC00;
              v596 = v594 + 1;
              std::construct_at[abi:nn180100]<ggl::FlyoverMorph::MorphMesh,char const(&)[16],std::shared_ptr<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>> const&,std::shared_ptr<ggl::IndexData> const&,ggl::FlyoverMorph::MorphMesh*>((uint64_t)&v594[1], v935, v964, (uint64_t *)&v977);
              do
                v597 = __ldxr(v595);
              while (__stxr(v597 + 1, v595));
              do
                v598 = __ldxr(v595);
              while (__stxr(v598 + 1, v595));
              v599 = *(std::__shared_weak_count **)(v427 + 224);
              *(_QWORD *)(v427 + 216) = v596;
              *(_QWORD *)(v427 + 224) = v594;
              if (v599)
              {
                v600 = (unint64_t *)&v599->__shared_owners_;
                do
                  v601 = __ldaxr(v600);
                while (__stlxr(v601 - 1, v600));
                if (!v601)
                {
                  ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                  std::__shared_weak_count::__release_weak(v599);
                }
              }
              v602 = *(_QWORD *)(v427 + 184);
              if (v602)
                *(_QWORD *)(v602 + 64) = v596;
              v513 = v896;
              do
                v603 = __ldaxr(v595);
              while (__stlxr(v603 - 1, v595));
              if (!v603)
              {
                ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
                std::__shared_weak_count::__release_weak(v594);
              }
              if (*(_BYTE *)(v427 + 312))
                v604 = v428 + 31;
              else
                v604 = v428 + 30;
              *(_QWORD *)(v427 + 208) = *v604;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v427 + 32))(v427, v947);
              (*(void (**)(uint64_t, size_t))(*(_QWORD *)v427 + 16))(v427, __sz_4a);
              *(float64x2_t *)(v427 + 232) = v912;
              *(_QWORD *)(v427 + 248) = 0x3FF0000000000000;
              *(_QWORD *)(*(_QWORD *)(v427 + 184) + 64) = *(_QWORD *)(v427 + 216);
              *(_QWORD *)(*(_QWORD *)(v427 + 184) + 32) = *(_QWORD *)(v427 + 192);
              *(_QWORD *)(*(_QWORD *)(v427 + 184) + 24) = *(_QWORD *)(v427 + 208);
              do
                v605 = __ldaxr(v595);
              while (__stlxr(v605 - 1, v595));
              if (!v605)
              {
                ((void (*)(std::__shared_weak_count *))v594->__on_zero_shared)(v594);
                std::__shared_weak_count::__release_weak(v594);
              }
              *(_QWORD *)v427 = &off_1E42C5E80;
              *(_BYTE *)(v427 + 313) = v884;
              v606 = *(_QWORD **)(v427 + 256);
              v607 = *(_QWORD *)(v427 + 264) - (_QWORD)v606;
              if (v607 > 0xF)
              {
                if (v607 != 16)
                  *(_QWORD *)(v427 + 264) = v606 + 2;
              }
              else
              {
                std::vector<altitude::TextureMap *>::__append(v427 + 256, 2 - (v607 >> 3));
                v606 = *(_QWORD **)v528;
              }
              *v606 = v900;
              *(_QWORD *)(*(_QWORD *)v528 + 8) = v903;
              v640 = v428[14];
              v639 = v428[15];
              if (v639)
              {
                v641 = (unint64_t *)(v639 + 8);
                do
                  v642 = __ldxr(v641);
                while (__stxr(v642 + 1, v641));
              }
              v643 = *(std::__shared_weak_count **)(v427 + 288);
              *(_QWORD *)(v427 + 280) = v640;
              *(_QWORD *)(v427 + 288) = v639;
              if (v643)
              {
                v644 = (unint64_t *)&v643->__shared_owners_;
                do
                  v645 = __ldaxr(v644);
                while (__stlxr(v645 - 1, v644));
                if (!v645)
                {
                  ((void (*)(std::__shared_weak_count *))v643->__on_zero_shared)(v643);
                  std::__shared_weak_count::__release_weak(v643);
                }
              }
              v647 = v428[16];
              v646 = v428[17];
              if (v646)
              {
                v648 = (unint64_t *)(v646 + 8);
                do
                  v649 = __ldxr(v648);
                while (__stxr(v649 + 1, v648));
              }
              v650 = *(std::__shared_weak_count **)(v427 + 304);
              *(_QWORD *)(v427 + 296) = v647;
              *(_QWORD *)(v427 + 304) = v646;
              if (v650)
              {
                v651 = (unint64_t *)&v650->__shared_owners_;
                do
                  v652 = __ldaxr(v651);
                while (__stlxr(v652 - 1, v651));
                if (!v652)
                {
                  ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
                  std::__shared_weak_count::__release_weak(v650);
                }
              }
              ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v427 + 192), *(_QWORD *)(v427 + 280), *(std::__shared_weak_count **)(v427 + 288));
              v653 = *(_QWORD *)(v427 + 192);
              v654 = (std::__shared_weak_count *)operator new(0xE8uLL);
              v654->__shared_owners_ = 0;
              v655 = (unint64_t *)&v654->__shared_owners_;
              v654->__shared_weak_owners_ = 0;
              v654->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1168;
              v656 = ggl::BufferData::BufferData((uint64_t)&v654[1], qword_1EE54CA10, 2, 1, 6, 1);
              v654[9].__shared_owners_ = (uint64_t)ggl::FlyoverMorph::Morph::reflection(void)::reflection;
              v654[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8D70;
              v657 = *(_QWORD *)(v653 + 64);
              *(_QWORD *)(v657 + 80) = v656;
              *(_QWORD *)(v657 + 88) = 0;
              v658 = *(_QWORD *)(v653 + 160);
              do
                v659 = __ldxr(v655);
              while (__stxr(v659 + 1, v655));
              v660 = *(std::__shared_weak_count **)(v658 + 88);
              *(_QWORD *)(v658 + 80) = v656;
              *(_QWORD *)(v658 + 88) = v654;
              v661 = v972;
              v662 = v959;
              if (v660)
              {
                v663 = (unint64_t *)&v660->__shared_owners_;
                do
                  v664 = __ldaxr(v663);
                while (__stlxr(v664 - 1, v663));
                if (!v664)
                {
                  ((void (*)(std::__shared_weak_count *, __n128, __n128))v660->__on_zero_shared)(v660, v972, v959);
                  std::__shared_weak_count::__release_weak(v660);
                  v662 = v959;
                  v661 = v972;
                }
              }
              do
                v665 = __ldaxr(v655);
              while (__stlxr(v665 - 1, v655));
              v42 = v932;
              if (!v665)
              {
                ((void (*)(std::__shared_weak_count *, __n128, __n128))v654->__on_zero_shared)(v654, v661, v662);
                std::__shared_weak_count::__release_weak(v654);
                v662.n128_u64[0] = v959.n128_u64[0];
                v661.n128_u64[0] = v972.n128_u64[0];
              }
              v666 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v427 + 192) + 64) + 80);
              v667 = v666[1];
              v668 = (__n128 *)v666[9];
              v661.n128_u64[1] = v662.n128_u64[0];
              *v668 = v661;
              v668[1].n128_u64[0] = 0;
              if (v666[8] > v667)
                v667 = v666[8];
              v666[7] = 0;
              v666[8] = v667;
              do
                v638 = __ldaxr(v381);
              while (__stlxr(v638 - 1, v381));
            }
            if (!v638)
            {
              ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
              std::__shared_weak_count::__release_weak(v954);
            }
            do
              v669 = __ldaxr(v414);
            while (__stlxr(v669 - 1, v414));
            if (!v669)
            {
LABEL_617:
              ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
              std::__shared_weak_count::__release_weak(v964);
            }
          }
          v670 = 0;
          *(_DWORD *)(v427 + 164) = *(_DWORD *)(*v42 + 164);
          *(_BYTE *)(v427 + 168) = 1;
          v1 = v915;
          while (1)
          {
            v672 = v670;
            v673 = v886[12];
            if (v672 >= (v886[13] - v673) >> 4)
              break;
            v674 = *((_QWORD *)v915 + 28);
            v675 = (uint64_t *)(v673 + 16 * v672);
            v676 = *(uint64_t **)(v674 + 104);
            if ((unint64_t)v676 >= *(_QWORD *)(v674 + 112))
            {
              v671 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v674 + 96), *v675, v675[1]);
            }
            else
            {
              *v676 = 0;
              v676[1] = 0;
              v677 = *v675;
              v678 = v675[1];
              if (v678)
              {
                v679 = (unint64_t *)(v678 + 8);
                do
                  v680 = __ldxr(v679);
                while (__stxr(v680 + 1, v679));
                v681 = (std::__shared_weak_count *)v676[1];
                *v676 = v677;
                v676[1] = v678;
                if (v681)
                {
                  v682 = (unint64_t *)&v681->__shared_owners_;
                  do
                    v683 = __ldaxr(v682);
                  while (__stlxr(v683 - 1, v682));
                  if (!v683)
                  {
                    ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
                    std::__shared_weak_count::__release_weak(v681);
                  }
                }
                v671 = (char *)(v676 + 2);
              }
              else
              {
                *v676 = v677;
                v676[1] = 0;
                v671 = (char *)(v676 + 2);
              }
            }
            *(_QWORD *)(v674 + 104) = v671;
            v670 = v672 + 1;
          }
          for (i = 0; ; i = v686 + 1)
          {
            v686 = i;
            v687 = v513[12];
            if (v686 >= (v513[13] - v687) >> 4)
              break;
            v688 = *((_QWORD *)v915 + 28);
            v689 = (uint64_t *)(v687 + 16 * v686);
            v690 = *(uint64_t **)(v688 + 104);
            if ((unint64_t)v690 >= *(_QWORD *)(v688 + 112))
            {
              v685 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v688 + 96), *v689, v689[1]);
            }
            else
            {
              *v690 = 0;
              v690[1] = 0;
              v691 = *v689;
              v692 = v689[1];
              if (v692)
              {
                v693 = (unint64_t *)(v692 + 8);
                do
                  v694 = __ldxr(v693);
                while (__stxr(v694 + 1, v693));
                v695 = (std::__shared_weak_count *)v690[1];
                *v690 = v691;
                v690[1] = v692;
                if (v695)
                {
                  v696 = (unint64_t *)&v695->__shared_owners_;
                  do
                    v697 = __ldaxr(v696);
                  while (__stlxr(v697 - 1, v696));
                  if (!v697)
                  {
                    ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
                    std::__shared_weak_count::__release_weak(v695);
                  }
                }
                v685 = (char *)(v690 + 2);
              }
              else
              {
                *v690 = v691;
                v690[1] = 0;
                v685 = (char *)(v690 + 2);
              }
            }
            *(_QWORD *)(v688 + 104) = v685;
          }
          v699 = (__int128 *)v886[9];
          for (j = (__int128 *)v886[10]; v699 != j; ++v699)
            altitude::RenderableGroup::takeOwnership(*((_QWORD **)v915 + 28), v699);
          v701 = (__int128 *)v513[9];
          for (k = (__int128 *)v513[10]; v701 != k; ++v701)
            altitude::RenderableGroup::takeOwnership(*((_QWORD **)v915 + 28), v701);
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v915 + 28) + 16))(*((_QWORD *)v915 + 28), v427);
          do
            v702 = __ldaxr(v381);
          while (__stlxr(v702 - 1, v381));
          v56 = v904;
          if (!v702)
          {
            ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
            std::__shared_weak_count::__release_weak(v954);
          }
          v52 = &ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag;
          v43 = v885;
          if (v966)
            operator delete(v966);
          operator delete(v902);
          if (v961)
            operator delete(v961);
          if (v911)
          {
            v59 = v905;
            v97 = v928;
            if (v897)
            {
              v64 = v898;
              if (v898.n128_u64[0])
              {
                if (*(_BYTE *)(v898.n128_u64[1] + 17) != 2)
                {
                  (*(void (**)(void))(*(_QWORD *)v898.n128_u64[0] + 64))();
                  v97 = v928;
                  v59 = v905;
                }
              }
            }
          }
          else
          {
            v59 = v905;
            v97 = v928;
          }
LABEL_113:
          if (v937 && v933 && (_QWORD)v97 && *(_BYTE *)(*((_QWORD *)&v97 + 1) + 17) != 2)
          {
            v133 = v59;
            (*(void (**)(__n128))(*(_QWORD *)v97 + 64))(v64);
            v59 = v133;
          }
          if (__p)
          {
            v134 = v59;
            operator delete(__p);
            v59 = v134;
          }
          if (!v59)
            goto LABEL_124;
LABEL_120:
          v135 = (unint64_t *)&v59->__shared_owners_;
          do
            v136 = __ldaxr(v135);
          while (__stlxr(v136 - 1, v135));
          if (!v136)
          {
            v139 = v59;
            ((void (*)(std::__shared_weak_count *, __n128))v59->__on_zero_shared)(v59, v64);
            std::__shared_weak_count::__release_weak(v139);
            if (v56)
            {
LABEL_125:
              v137 = (unint64_t *)&v56->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v56->__on_zero_shared)(v56, v64);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
LABEL_124:
            if (v56)
              goto LABEL_125;
          }
          if (++v42 == v43)
            goto LABEL_874;
          break;
        default:
          v913 = v62 / v63;
          v937 = 0;
          v955 = 0;
          v968 = 0;
          v965 = 0;
          v93 = 0;
          v929 = 0;
          v94 = 0;
          v95 = 0;
          v96 = 0;
          v97 = 0uLL;
          goto LABEL_112;
      }
    }
  }
LABEL_874:
  *((double *)v1 + 37) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  pthread_mutex_lock(*((pthread_mutex_t **)v1 + 19));
  *((_DWORD *)v1 + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)v1 + 19));
  if (v882)
  {
    v880 = (unint64_t *)&v882->__shared_owners_;
    do
      v881 = __ldaxr(v880);
    while (__stlxr(v881 - 1, v880));
    if (!v881)
    {
      ((void (*)(std::__shared_weak_count *))v882->__on_zero_shared)(v882);
      std::__shared_weak_count::__release_weak(v882);
    }
  }
}

BOOL altitude::TransitionTileJob::succeeded(pthread_mutex_t **this)
{
  _BOOL8 v2;

  pthread_mutex_lock(this[19]);
  v2 = ((_DWORD)this[20] & 2) == 0;
  pthread_mutex_unlock(this[19]);
  return v2;
}

uint64_t altitude::TransitionTileJob::getElement@<X0>(altitude::TransitionTileJob *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = (*(uint64_t (**)(altitude::TransitionTileJob *))(*(_QWORD *)this + 40))(this);
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 29);
    *a2 = *((_QWORD *)this + 28);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E00C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E00C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<altitude::RenderableGroup *,std::shared_ptr<altitude::RenderableGroup>::__shared_ptr_default_delete<altitude::RenderableGroup,altitude::RenderableGroup>,std::allocator<altitude::RenderableGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::RenderableGroup *,std::shared_ptr<altitude::RenderableGroup>::__shared_ptr_default_delete<altitude::RenderableGroup,altitude::RenderableGroup>,std::allocator<altitude::RenderableGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void altitude::TransitionTileRequestManager::~TransitionTileRequestManager(altitude::TransitionTileRequestManager *this)
{
  *(_QWORD *)this = off_1E42C2F70;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::TransitionTileRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C2F70;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::TransitionTileRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[12];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    while (v4[12] != a2)
    {
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = a1 + 72;
    do
    {
      v6 = altitude::TransitionTileRequestId::operator<((_DWORD *)(v4 + 32), a2);
      v7 = (uint64_t *)(v4 + 8);
      if (!v6)
      {
        v7 = (uint64_t *)v4;
        v5 = v4;
      }
      v4 = *v7;
    }
    while (*v7);
    if (v5 != a1 + 72 && !altitude::TransitionTileRequestId::operator<(a2, (_DWORD *)(v5 + 32)))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 96) + 16))(*(_QWORD *)(v5 + 96));
      std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), (uint64_t *)v5);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::TransitionTileRequestManager::createRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  _QWORD *result;
  __int128 v37;
  uint64_t v38;

  v6 = operator new();
  v7 = karo::Job::Job(v6, *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 180) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v7 + 240) = 0u;
  v8 = (_OWORD *)(v7 + 240);
  *(_QWORD *)v7 = &off_1E42C52B8;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_WORD *)(v7 + 272) = 0;
  *(double *)(v6 + 280) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(double *)(v6 + 288) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(double *)(v6 + 296) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  v10 = a2[6];
  v9 = a2[7];
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(std::__shared_weak_count **)(v6 + 200);
  *(_QWORD *)(v6 + 192) = v10;
  *(_QWORD *)(v6 + 200) = v9;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = a2[1];
  v17 = *(_QWORD *)(v16 + 328);
  if (!v17)
  {
    v18 = operator new();
    *(_DWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = v18 + 32;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_QWORD *)v18 = &off_1E42C5580;
    *(_OWORD *)(v18 + 80) = 0u;
    v19 = (void **)(v18 + 80);
    *(_QWORD *)(v18 + 208) = 0;
    *(_QWORD *)(v18 + 216) = 0;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 185) = 0u;
    *(_QWORD *)(v18 + 232) = 0;
    *(_DWORD *)(v18 + 224) = -1;
    *(_OWORD *)(v18 + 248) = 0u;
    *(_OWORD *)(v18 + 264) = 0u;
    *(_DWORD *)(v18 + 279) = 0;
    *(_QWORD *)(v18 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v18 + 296) = 0;
    *(_WORD *)(v18 + 300) = 0;
    altitude::Tile::createTileName(&v37, (unsigned int *)(v16 + 392), (uint64_t *)(*(_QWORD *)(v16 + 288) + 40), (uint64_t *)(*(_QWORD *)(v16 + 288) + 136));
    if (*(char *)(v18 + 103) < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = v37;
    *(_QWORD *)(v18 + 96) = v38;
    *(_QWORD *)(v16 + 328) = v18;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    v17 = *(_QWORD *)(v16 + 328);
  }
  v20 = *(_QWORD *)(v17 + 120);
  v21 = *(_QWORD *)(v17 + 128);
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(std::__shared_weak_count **)(v6 + 216);
  *(_QWORD *)(v6 + 208) = v20;
  *(_QWORD *)(v6 + 216) = v21;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v28 = *a2;
  v27 = a2[1];
  v29 = (unsigned int *)(*a2 + 392);
  *v8 = *(_OWORD *)v29;
  *(_OWORD *)(v6 + 256) = *(_OWORD *)(v27 + 392);
  v30 = *(_QWORD *)(v28 + 328);
  if (!v30)
  {
    v31 = operator new();
    *(_DWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v31 + 40) = 0;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = v31 + 32;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
    *(_QWORD *)v31 = &off_1E42C5580;
    *(_OWORD *)(v31 + 80) = 0u;
    v32 = (void **)(v31 + 80);
    *(_QWORD *)(v31 + 208) = 0;
    *(_QWORD *)(v31 + 216) = 0;
    *(_OWORD *)(v31 + 96) = 0u;
    *(_OWORD *)(v31 + 112) = 0u;
    *(_OWORD *)(v31 + 128) = 0u;
    *(_OWORD *)(v31 + 144) = 0u;
    *(_OWORD *)(v31 + 160) = 0u;
    *(_OWORD *)(v31 + 176) = 0u;
    *(_OWORD *)(v31 + 185) = 0u;
    *(_DWORD *)(v31 + 224) = -1;
    *(_QWORD *)(v31 + 232) = 0;
    *(_OWORD *)(v31 + 248) = 0u;
    *(_OWORD *)(v31 + 264) = 0u;
    *(_DWORD *)(v31 + 279) = 0;
    *(_QWORD *)(v31 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v31 + 296) = 0;
    *(_WORD *)(v31 + 300) = 0;
    altitude::Tile::createTileName(&v37, v29, (uint64_t *)(*(_QWORD *)(v28 + 288) + 40), (uint64_t *)(*(_QWORD *)(v28 + 288) + 136));
    if (*(char *)(v31 + 103) < 0)
      operator delete(*v32);
    *(_OWORD *)v32 = v37;
    *(_QWORD *)(v31 + 96) = v38;
    *(_QWORD *)(v28 + 328) = v31;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v28);
    v30 = *(_QWORD *)(v28 + 328);
    v27 = a2[1];
  }
  *(_BYTE *)(v6 + 272) = *(_BYTE *)(v30 + 296);
  v33 = *(_QWORD *)(v27 + 328);
  if (!v33)
  {
    v34 = operator new();
    *(_DWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 40) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)(v34 + 24) = v34 + 32;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    *(_QWORD *)v34 = &off_1E42C5580;
    *(_OWORD *)(v34 + 80) = 0u;
    v35 = (void **)(v34 + 80);
    *(_QWORD *)(v34 + 208) = 0;
    *(_QWORD *)(v34 + 216) = 0;
    *(_OWORD *)(v34 + 96) = 0u;
    *(_OWORD *)(v34 + 112) = 0u;
    *(_OWORD *)(v34 + 128) = 0u;
    *(_OWORD *)(v34 + 144) = 0u;
    *(_OWORD *)(v34 + 160) = 0u;
    *(_OWORD *)(v34 + 176) = 0u;
    *(_OWORD *)(v34 + 185) = 0u;
    *(_QWORD *)(v34 + 232) = 0;
    *(_DWORD *)(v34 + 224) = -1;
    *(_OWORD *)(v34 + 248) = 0u;
    *(_OWORD *)(v34 + 264) = 0u;
    *(_DWORD *)(v34 + 279) = 0;
    *(_QWORD *)(v34 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v34 + 296) = 0;
    *(_WORD *)(v34 + 300) = 0;
    altitude::Tile::createTileName(&v37, (unsigned int *)(v27 + 392), (uint64_t *)(*(_QWORD *)(v27 + 288) + 40), (uint64_t *)(*(_QWORD *)(v27 + 288) + 136));
    if (*(char *)(v34 + 103) < 0)
      operator delete(*v35);
    *(_OWORD *)v35 = v37;
    *(_QWORD *)(v34 + 96) = v38;
    *(_QWORD *)(v27 + 328) = v34;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v27);
    v33 = *(_QWORD *)(v27 + 328);
  }
  *(_BYTE *)(v6 + 273) = *(_BYTE *)(v33 + 296);
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E89B8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 64);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 68);
      v12 = *(_DWORD *)(v8 + 72);
      v13 = *(_BYTE *)(v8 + 76);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 80;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 72);
  if (!v6)
    goto LABEL_8;
  v7 = a1 + 72;
  do
  {
    v8 = altitude::TransitionTileRequestId::operator<((_DWORD *)(v6 + 32), a2);
    v9 = (uint64_t *)(v6 + 8);
    if (!v8)
    {
      v9 = (uint64_t *)v6;
      v7 = v6;
    }
    v6 = *v9;
  }
  while (*v9);
  if (v7 == a1 + 72 || altitude::TransitionTileRequestId::operator<(a2, (_DWORD *)(v7 + 32)))
  {
LABEL_8:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v13 = *(_QWORD *)(v7 + 96);
    v12 = *(std::__shared_weak_count **)(v7 + 104);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v13)
    {
      karo::Job::waitToFinish((karo::Job *)v13, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 152));
      v10 = *(_DWORD *)(v13 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 152));
      if (!v12)
        return v10;
    }
    else
    {
      v10 = 0;
      if (!v12)
        return v10;
    }
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v10;
}

void karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  *a4 = 0;
  a4[1] = 0;
  v9 = (_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 72);
  if (v8)
  {
    v10 = a1 + 72;
    do
    {
      v11 = altitude::TransitionTileRequestId::operator<((_DWORD *)(v8 + 32), (_DWORD *)a2);
      v12 = (uint64_t *)(v8 + 8);
      if (!v11)
      {
        v12 = (uint64_t *)v8;
        v10 = v8;
      }
      v8 = *v12;
    }
    while (*v12);
    if ((_QWORD *)v10 != v9 && !altitude::TransitionTileRequestId::operator<((_DWORD *)a2, (_DWORD *)(v10 + 32)))
    {
      v38 = *(_QWORD *)(v10 + 96);
      v37 = *(_QWORD *)(v10 + 104);
      if (v37)
      {
        v39 = (unint64_t *)(v37 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      *a4 = v38;
      a4[1] = v37;
      return;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v41, a1, a2, a3);
  v14 = v41;
  v13 = v42;
  *a4 = v41;
  a4[1] = (uint64_t)v13;
  v15 = *(_QWORD *)(a1 + 72);
  v16 = v9;
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v16 = (_QWORD *)v15;
        v17 = (_DWORD *)(v15 + 32);
        if (!altitude::TransitionTileRequestId::operator<((_DWORD *)a2, (_DWORD *)(v15 + 32)))
          break;
        v15 = *v16;
        v9 = v16;
        if (!*v16)
          goto LABEL_15;
      }
      if (!altitude::TransitionTileRequestId::operator<(v17, (_DWORD *)a2))
        break;
      v15 = v16[1];
      if (!v15)
      {
        v9 = v16 + 1;
        goto LABEL_15;
      }
    }
    v19 = v16;
    if (!v13)
      goto LABEL_23;
  }
  else
  {
LABEL_15:
    v18 = operator new(0x70uLL);
    v19 = v18;
    v20 = *(_OWORD *)(a2 + 16);
    v18[2] = *(_OWORD *)a2;
    v18[3] = v20;
    v18[4] = *(_OWORD *)(a2 + 32);
    v21 = *(_QWORD *)(a2 + 56);
    *((_QWORD *)v18 + 10) = *(_QWORD *)(a2 + 48);
    *((_QWORD *)v18 + 11) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    *((_QWORD *)v18 + 12) = 0;
    *((_QWORD *)v18 + 13) = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v9 = v18;
    v24 = **(_QWORD **)(a1 + 64);
    v25 = (uint64_t *)v18;
    if (v24)
    {
      *(_QWORD *)(a1 + 64) = v24;
      v25 = (uint64_t *)*v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v25);
    ++*(_QWORD *)(a1 + 80);
    if (!v13)
      goto LABEL_23;
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v27 = __ldxr(p_shared_owners);
  while (__stxr(v27 + 1, p_shared_owners));
LABEL_23:
  v28 = (std::__shared_weak_count *)*((_QWORD *)v19 + 13);
  *((_QWORD *)v19 + 12) = v14;
  *((_QWORD *)v19 + 13) = v13;
  if (!v28)
    goto LABEL_27;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = *(_QWORD *)(a1 + 48);
    if (!v31)
      return;
  }
  else
  {
LABEL_27:
    v31 = *(_QWORD *)(a1 + 48);
    if (!v31)
      return;
  }
  v32 = *a4;
  v33 = (std::__shared_weak_count *)a4[1];
  v41 = v32;
  v42 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    karo::JobManager::queueJob(v31, &v41);
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    karo::JobManager::queueJob(v31, &v41);
  }
}

uint64_t altitude::TransitionTileRequestManager::request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t altitude::TransitionTileRequestManager::getElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  double *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double *v19;
  std::__shared_weak_count *v20;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(double **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(&v19, a1, a2, 0);
  v7 = v19;
  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(double *))(*(_QWORD *)v7 + 40))(v7) & 1) != 0)
  {
    (*(void (**)(double *))(*(_QWORD *)v7 + 48))(v7);
    v10 = *(_QWORD *)(a1 + 96);
    if (v10)
    {
      v11 = v7[37];
      v12 = (v11 - v7[36]) * 1000.0;
      gdc::Statistics::addSampleValue(v10, "TransitionTileLoadJobTotalTime", 0x3FD9A88F0000001EuLL, (v11 - v7[35]) * 1000.0);
      gdc::Statistics::addSampleValue(*(_QWORD *)(a1 + 96), "TransitionTileLoadJobMainTime", 0x1E8C1E970000001DuLL, v12);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (!v6)
    goto LABEL_12;
  v13 = (unint64_t *)&v6->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v15 = v20;
    if (!v20)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  }
  else
  {
LABEL_12:
    v15 = v20;
    if (!v20)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

BOOL altitude::TransitionTileRequestId::operator<(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  _BOOL8 v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v2 = a1[4];
  v3 = a2[4];
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  v5 = a1[5];
  v6 = a2[5];
  if (v5 < v6)
    return 1;
  if (v5 > v6)
    return 0;
  v7 = a1[6];
  v8 = a2[6];
  if (v7 < v8)
    return 1;
  if (v7 <= v8)
  {
    v9 = a1[7];
    v10 = a2[7];
    v11 = v9 >= v10;
    v12 = v9 < v10;
    if (!v11)
      return v12;
  }
  v13 = a2[6];
  v14 = a1[6];
  if (v13 < v14)
    return 0;
  if (v13 <= v14 && a2[7] < a1[7])
    return 0;
  v15 = a1[8];
  v16 = a2[8];
  if (v15 < v16)
    return 1;
  if (v15 > v16)
    return 0;
  v17 = a1[9];
  v18 = a2[9];
  if (v17 < v18)
    return 1;
  if (v17 > v18)
    return 0;
  v19 = a1[10];
  v20 = a2[10];
  if (v19 < v20)
    return 1;
  if (v19 > v20)
    return 0;
  return a1[11] < a2[11];
}

void std::__shared_ptr_pointer<altitude::TransitionTileJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TransitionTileJob>,std::allocator<altitude::TransitionTileJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TransitionTileJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TransitionTileJob>,std::allocator<altitude::TransitionTileJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, a2);
  v8 = (std::__shared_weak_count *)a2[13];
  if (!v8)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a2[11];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_13:
    v11 = (std::__shared_weak_count *)a2[11];
    if (!v11)
      goto LABEL_19;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_19:
  operator delete(a2);
}

void std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (a1)
  {
    std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[13];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)a1[11];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(a1);
  }
}

void md::MapTileData::~MapTileData(md::MapTileData *this)
{
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;

  *(_QWORD *)this = &off_1E428C3C0;
  *((_QWORD *)this + 79) = &unk_1E428C400;
  v2 = *((_QWORD *)this + 85);
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40FDD25D6FLL);
    *((_QWORD *)this + 85) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 82);
  if (v6)
  {
    *((_QWORD *)this + 83) = v6;
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)this = &off_1E42B4768;
  if (*((_BYTE *)this + 112))
    *((_BYTE *)this + 112) = 0;
  v10 = (void *)*((_QWORD *)this + 4);
  if (v10 != *((void **)this + 6))
    free(v10);
}

void md::MapTileData::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  void *v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::string::size_type v29;
  _BYTE *p_dst;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void **v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  std::string v60;
  void *v61;
  __int128 v62;
  _BYTE v63[32];
  char v64;
  _BYTE v65[8];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _BYTE v71[8];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _DWORD v77[2];
  _BYTE v78[32];
  void *v79;
  size_t v80;
  uint64_t v81;
  int v82;
  char v83[24];
  _BYTE v84[8];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90[17];
  _BYTE v91[9];
  _OWORD v92[3];
  char v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string __dst;

  gdc::LayerData::createDebugNode(a1, a2);
  if (!*(_QWORD *)(a1 + 680))
    return;
  strcpy(v90, "Debug Model Tile");
  *(_WORD *)v91 = 16;
  memset(v92, 0, sizeof(v92));
  v93 = 0;
  v4 = *(_QWORD *)(a1 + 120);
  *((_BYTE *)&v60.__r_.__value_.__s + 23) = 3;
  LODWORD(v60.__r_.__value_.__l.__data_) = 7955787;
  v88 = 0;
  v86 = 0;
  v87 = 0;
  v89 = 1;
  v85 = v4;
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)&v60, (uint64_t)v84);
  v5 = *(_DWORD *)(a1 + 176);
  v83[23] = 8;
  strcpy(v83, "Tile Key");
  v47 = (_QWORD *)a2;
  std::to_string(&v96, v5);
  v6 = std::string::insert(&v96, 0, "x: ", 3uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v97, ", y: ", 5uLL);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v95, *(_DWORD *)(a1 + 172));
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v95;
  else
    v10 = (std::string *)v95.__r_.__value_.__r.__words[0];
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  else
    size = v95.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v98, (const std::string::value_type *)v10, size);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&__dst, ", z: ", 5uLL);
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v94, *(unsigned __int8 *)(a1 + 169));
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v94;
  else
    v16 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v17 = v94.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v60, (const std::string::value_type *)v16, v17);
  v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v20 = v18->__r_.__value_.__l.__size_;
  v77[0] = v18->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v77 + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
  v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v60.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v95.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_28:
    operator delete(v97.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
LABEL_20:
  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_21;
LABEL_29:
  operator delete(v96.__r_.__value_.__l.__data_);
LABEL_21:
  v80 = 0;
  v81 = 0;
  v79 = 0;
  v82 = 4;
  if (v21 < 0)
  {
    std::string::__assign_no_alias<true>(&v79, v19, v20);
  }
  else
  {
    v79 = v19;
    v80 = v20;
    LODWORD(v81) = v77[0];
    *(_DWORD *)((char *)&v81 + 3) = *(_DWORD *)((char *)v77 + 3);
    HIBYTE(v81) = v21;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)v83, (uint64_t)v78);
  if (SHIBYTE(v81) < 0)
  {
    operator delete(v79);
    if ((v21 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_85:
    operator delete(v19);
    goto LABEL_33;
  }
  if (v21 < 0)
    goto LABEL_85;
LABEL_33:
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 48);
  *((_BYTE *)&v60.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v60, "Style");
  v74 = 0;
  v75 = 0;
  v76 = 1;
  v73 = 0;
  v72 = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)&v60, (uint64_t)v71);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 40);
  *((_BYTE *)&v60.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v60, "Byte Count");
  v68 = 0;
  v69 = 0;
  v70 = 1;
  v67 = 0;
  v66 = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)&v60, (uint64_t)v65);
  v24 = *(_QWORD **)(*(_QWORD *)(a1 + 680) + 16);
  if (v24)
  {
    while (1)
    {
      v25 = (const char *)v24[2];
      v26 = v24[3];
      v27 = v24[4];
      v28 = strlen(v25);
      if (v28 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v29 = v28;
      if (v28 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
      p_dst = &__dst;
      if (v28)
        goto LABEL_43;
LABEL_44:
      p_dst[v29] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        v33 = (void *)__dst.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&v60, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        LOBYTE(v61) = 0;
        v62 = 0u;
        memset(v63, 0, sizeof(v63));
        v64 = 0;
        operator delete(v33);
      }
      else
      {
        v60 = __dst;
        LOBYTE(v61) = 0;
        v62 = 0u;
        memset(v63, 0, sizeof(v63));
        v64 = 0;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__dst, "Byte Count");
      v57 = 0;
      v58 = 0;
      v56 = 0;
      v59 = 1;
      v55 = v26;
      gdc::DebugTreeNode::addProperty((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v54);
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&__dst, "Decode Time");
      v51 = 0;
      v52 = 0;
      v50 = 0;
      v53 = 2;
      v49 = v27;
      gdc::DebugTreeNode::addProperty((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v48);
      gdc::DebugTreeNode::addChildNode(v90, (__int128 *)&v60);
      v34 = *(void ***)&v63[9];
      if (*(_QWORD *)&v63[9])
      {
        v35 = *(_QWORD *)&v63[17];
        v36 = *(void **)&v63[9];
        if (*(_QWORD *)&v63[17] != *(_QWORD *)&v63[9])
        {
          do
          {
            v37 = *(_QWORD *)(v35 - 24);
            if (v37)
            {
              v38 = *(_QWORD *)(v35 - 16);
              v39 = *(void **)(v35 - 24);
              if (v38 != v37)
              {
                do
                {
                  if (*(char *)(v38 - 1) < 0)
                    operator delete(*(void **)(v38 - 24));
                  v38 -= 24;
                }
                while (v38 != v37);
                v39 = *(void **)(v35 - 24);
              }
              *(_QWORD *)(v35 - 16) = v37;
              operator delete(v39);
            }
            v40 = *(_QWORD *)(v35 - 48);
            if (v40)
            {
              v41 = *(_QWORD *)(v35 - 40);
              v42 = *(void **)(v35 - 48);
              if (v41 != v40)
              {
                do
                {
                  if (*(char *)(v41 - 9) < 0)
                    operator delete(*(void **)(v41 - 32));
                  v41 -= 64;
                }
                while (v41 != v40);
                v42 = *(void **)(v35 - 48);
              }
              *(_QWORD *)(v35 - 40) = v40;
              operator delete(v42);
            }
            v43 = (void **)(v35 - 80);
            if (*(char *)(v35 - 57) < 0)
              operator delete(*v43);
            v35 -= 80;
          }
          while (v43 != v34);
          v36 = *(void **)&v63[9];
        }
        *(_QWORD *)&v63[17] = v34;
        operator delete(v36);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v62 + 1));
      if ((char)v62 < 0)
      {
        operator delete(v61);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
LABEL_75:
          operator delete(v60.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_75;
      }
      v24 = (_QWORD *)*v24;
      if (!v24)
        goto LABEL_76;
    }
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_43:
    memmove(p_dst, v25, v29);
    goto LABEL_44;
  }
LABEL_76:
  gdc::DebugTreeNode::addChildNode(v47, (__int128 *)v90);
  v44 = *(_QWORD *)((char *)&v92[1] + 9);
  if (*(_QWORD *)((char *)&v92[1] + 9))
  {
    v45 = *(_QWORD *)((char *)&v92[2] + 1);
    v46 = *(void **)((char *)&v92[1] + 9);
    if (*(_QWORD *)((char *)&v92[2] + 1) != *(_QWORD *)((char *)&v92[1] + 9))
    {
      do
      {
        v45 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v45);
      }
      while (v45 != v44);
      v46 = *(void **)((char *)&v92[1] + 9);
    }
    *(_QWORD *)((char *)&v92[2] + 1) = v44;
    operator delete(v46);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v92 + 1));
  if ((SLOBYTE(v92[0]) & 0x80000000) == 0)
  {
    if ((v91[0] & 0x80000000) == 0)
      return;
LABEL_87:
    operator delete(*(void **)v90);
    return;
  }
  operator delete(*(void **)&v91[1]);
  if ((v91[0] & 0x80000000) != 0)
    goto LABEL_87;
}

void sub_19FBDB41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, gdc::DebugTreeNode *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v32 - 121) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v32 - 233) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v32 - 121) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v32 - 144));
  if ((*(char *)(v32 - 233) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v32 - 153) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v32 - 256));
  if ((*(char *)(v32 - 153) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v32 - 185) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v32 - 176));
  if ((*(char *)(v32 - 185) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v32 - 209) & 0x80000000) == 0)
    {
LABEL_14:
      gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&STACK[0x218]);
      gdc::DebugTreeNode::~DebugTreeNode(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*(void **)(v32 - 232));
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(v32 - 208));
  if ((*(char *)(v32 - 209) & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t md::MapTileData::MapTileData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  long double v18;
  long double v19;
  long double v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  double v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  void *v32;
  int v33;
  uint64_t v34;
  geo::codec::VectorTile *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t i;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  void *v58;
  uint64_t v59;
  void *__p;
  uint64_t v61;
  int v62;
  uint64_t v63;

  *(_QWORD *)a1 = &off_1E42B4768;
  do
  {
    v10 = __ldaxr(gdc::LayerData::nextId(void)::idGenerator);
    v11 = v10 + 1;
  }
  while (__stlxr(v11, gdc::LayerData::nextId(void)::idGenerator));
  *(_DWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)a2;
  gdc::LayerDataKey::LayerDataKey(a1 + 24, a2 + 8);
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 160) = 1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v12 = *(_DWORD **)(a2 + 16);
  v13 = v12[2];
  v14 = v12[3];
  LODWORD(v12) = *v12;
  v15 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4);
  *(_BYTE *)(a1 + 168) = v14;
  *(_BYTE *)(a1 + 169) = v13;
  *(_DWORD *)(a1 + 172) = v15;
  *(_DWORD *)(a1 + 176) = (_DWORD)v12;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = xmmword_19FFB3010;
  *(int64x2_t *)(a1 + 256) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 272) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(a1 + 288) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  v16 = 1 << v13;
  v17 = ((double)(v16 + ~v15) + 0.5) / (double)v16;
  v18 = exp(v17 * 6.28318531 + -3.14159265);
  v19 = atan(v18) * 114.591559 + -90.0;
  v20 = cos(v19 * 0.034906585) * -559.82 + 111132.92;
  v21 = v20 + cos(v19 * 0.0698131701) * 1.175;
  v22 = v21 + cos(v19 * 0.104719755) * -0.0023;
  v23 = v19 * 0.00872664626;
  v24 = tan(v19 * 0.00872664626 + 0.78103484);
  v25 = log(v24);
  v26 = tan(v23 + 0.789761487);
  *(float *)&v25 = fabs((log(v26) - v25) * 0.159154943) / (v22 * (float)(1.0 / (float)v16));
  __powidf2();
  *(_DWORD *)(a1 + 616) = LODWORD(v25);
  *(float *)&v27 = v27 * 0.0000000249532021;
  *(_DWORD *)(a1 + 620) = LODWORD(v25);
  *(_DWORD *)(a1 + 624) = LODWORD(v27);
  v58 = 0;
  v63 = 0;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)(a1 + 168), (double *)&v58, (double *)&v63);
  *(_QWORD *)a1 = &off_1E428C3C0;
  *(_QWORD *)(a1 + 632) = &unk_1E428C400;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  v28 = *(const void **)a3;
  v29 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v29)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v29 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v30 = (char *)operator new(v29);
    *(_QWORD *)(a1 + 656) = v30;
    *(_QWORD *)(a1 + 664) = v30;
    v31 = &v30[8 * (v29 >> 3)];
    *(_QWORD *)(a1 + 672) = v31;
    memcpy(v30, v28, v29);
    *(_QWORD *)(a1 + 664) = v31;
  }
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = xmmword_19FFB3470;
  *(_QWORD *)(a1 + 704) = 0x80000000800000;
  *(_BYTE *)(a1 + 712) = a5;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "preserveModelTile");

  if (!v33)
    goto LABEL_16;
  v35 = *(geo::codec::VectorTile **)a4;
  v34 = *(_QWORD *)(a4 + 8);
  if (v34)
  {
    v36 = (unint64_t *)(v34 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(a1 + 640) = v35;
  v38 = *(std::__shared_weak_count **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = v34;
  if (!v38)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(p_shared_owners);
  while (__stlxr(v40 - 1, p_shared_owners));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!*(_QWORD *)a4)
      return a1;
  }
  else
  {
LABEL_16:
    if (!*(_QWORD *)a4)
      return a1;
  }
  v41 = operator new();
  *(_OWORD *)(v41 + 16) = 0u;
  *(_OWORD *)(v41 + 32) = 0u;
  *(_QWORD *)(v41 + 48) = 0;
  *(_OWORD *)v41 = 0u;
  *(_DWORD *)(v41 + 32) = 1065353216;
  *(_QWORD *)(a1 + 680) = v41;
  *(_QWORD *)(*(_QWORD *)(a1 + 680) + 40) = geo::codec::VectorTile::debugByteCount(*(geo::codec::VectorTile **)a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 680) + 48) = (unint64_t)*(unsigned __int16 *)(geo::codec::VectorTile::key(*(geo::codec::VectorTile **)a4)
                                                                                    + 8) >> 2;
  geo::codec::VectorTile::debugInfoPerChapterAndChapterDetails(*(geo::codec::VectorTile **)a4, (uint64_t)&v58);
  v42 = *(_QWORD *)(a1 + 680);
  if (*(_QWORD *)(v42 + 24))
  {
    v43 = *(_QWORD **)(v42 + 16);
    if (v43)
    {
      do
      {
        v44 = (_QWORD *)*v43;
        operator delete(v43);
        v43 = v44;
      }
      while (v44);
    }
    *(_QWORD *)(v42 + 16) = 0;
    v45 = *(_QWORD *)(v42 + 8);
    if (v45)
    {
      for (i = 0; i != v45; ++i)
        *(_QWORD *)(*(_QWORD *)v42 + 8 * i) = 0;
    }
    *(_QWORD *)(v42 + 24) = 0;
  }
  v47 = v58;
  v58 = 0;
  v48 = *(void **)v42;
  *(_QWORD *)v42 = v47;
  if (v48)
    operator delete(v48);
  v49 = v59;
  v50 = __p;
  *(_QWORD *)(v42 + 16) = __p;
  *(_QWORD *)(v42 + 8) = v49;
  v59 = 0;
  v51 = v61;
  *(_QWORD *)(v42 + 24) = v61;
  *(_DWORD *)(v42 + 32) = v62;
  if (v51)
  {
    v52 = v50[1];
    v53 = *(_QWORD *)(v42 + 8);
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v52 >= v53)
        v52 %= v53;
    }
    else
    {
      v52 &= v53 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v42 + 8 * v52) = v42 + 16;
    __p = 0;
    v61 = 0;
  }
  else
  {
    v54 = __p;
    if (__p)
    {
      do
      {
        v55 = (_QWORD *)*v54;
        operator delete(v54);
        v54 = v55;
      }
      while (v55);
    }
  }
  v56 = v58;
  v58 = 0;
  if (v56)
    operator delete(v56);
  return a1;
}

void sub_19FBDBB08(_Unwind_Exception *a1)
{
  gdc::LayerData *v1;
  void *v3;

  v3 = (void *)*((_QWORD *)v1 + 82);
  if (v3)
  {
    *((_QWORD *)v1 + 83) = v3;
    operator delete(v3);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 640);
  gdc::LayerData::~LayerData(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciAssetLayerDataSource::~DaVinciAssetLayerDataSource(md::DaVinciAssetLayerDataSource *this)
{
  *(_QWORD *)this = &off_1E42A3B18;
  *((_QWORD *)this + 73) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
}

{
  *(_QWORD *)this = &off_1E42A3B18;
  *((_QWORD *)this + 73) = &off_1E42B4D50;

  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::DaVinciAssetLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v24 = v8;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v10, &v25);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v24 = v5 + 24;
  v32[0] = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v31 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  v12 = *((unsigned __int16 *)a1 + 4);
  if (v12 > 0x51)
    v13 = "<Invalid>";
  else
    v13 = off_1E42F61C0[v12];
  v14 = strlen(v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)", Asset ID: ", 12);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)">", 1);
  if ((v31 & 0x10) != 0)
  {
    v17 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v17 = v28;
    }
    v18 = (const void **)&v27;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v16 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    v18 = (const void **)v26;
    v17 = v26[2];
  }
  v19 = *v18;
  v16 = v17 - (_QWORD)*v18;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v16;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_18;
  }
  a2[23] = v16;
  if (v16)
LABEL_18:
    memmove(a2, v19, v16);
LABEL_19:
  a2[v16] = 0;
  v24 = *v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v7[3];
  v25 = v11 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v32);
}

void sub_19FBDBE44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v1);
  _Unwind_Resume(a1);
}

void sub_19FBDBE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::AssetData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDEE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::AssetData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDEE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::AssetData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::SinglePassRouteLine::BasePipelineState::~BasePipelineState(ggl::SinglePassRouteLine::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SinglePassRouteLine::BasePipelineSetup::~BasePipelineSetup(ggl::SinglePassRouteLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SinglePassRouteLine::BasePipelineSetup::constantDataIsEnabled(ggl::SinglePassRouteLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::SinglePassRouteLine::BasePipelineSetup::textureIsEnabled(ggl::SinglePassRouteLine::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::SinglePassRouteLine::BasePipelineSetup::BasePipelineSetup(ggl::SinglePassRouteLine::BasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43E18 = 1;
    }
    ggl::SinglePassRouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    unk_1EE585E90 = &ggl::SinglePassRouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1EE585E98 = 0;
    if ((v5 & 1) == 0
    {
      ggl::SinglePassRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(_QWORD *)algn_1EE585EC8 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EE585ED0 = (uint64_t)ggl::SinglePassRouteLine::Style::reflection(void)::reflection;
      unk_1EE585ED8 = ggl::SinglePassRouteLine::ClipParams::reflection(void)::reflection;
      qword_1EE585EE0 = (uint64_t)ggl::SinglePassRouteLine::DrawAnimationDescription::reflection(void)::reflection;
    }
    qword_1EE585EA0 = (uint64_t)&ggl::SinglePassRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1EE585EA8 = xmmword_19FFB3030;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::SinglePassRouteLine::BasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42BA9E8;
  return result;
}

void sub_19FBDC330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FBDC3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 104));
  _Unwind_Resume(a1);
}

void sub_19FBDC660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FBDC738(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 104));
  _Unwind_Resume(a1);
}

void sub_19FBDC7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBDC908(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 104));
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<GEOVectorTileDecoder * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4EB0;

  return a1;
}

void geo::_retain_ptr<GEOVectorTileDecoder * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4EB0;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyHashFunc,GEOTileKeyEqualsFunc,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyEqualsFunc,GEOTileKeyHashFunc,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>>>::find<_GEOTileKey>(_QWORD *a1)
{
  unint64_t v2;
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = GEOTileKeyHash();
  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = v2;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v2;
    if (v2 >= *(_QWORD *)&v3)
      v6 = v2 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = (*(_QWORD *)&v3 - 1) & v2;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v11 = v8[1];
        if (v11 == v4)
        {
          if ((GEOTileKeyEquals() & 1) != 0)
            return v8;
        }
        else if ((v11 & v9) != v6)
        {
          return 0;
        }
        v8 = (_QWORD *)*v8;
        if (!v8)
          return v8;
      }
    }
    do
    {
      v10 = v8[1];
      if (v10 == v4)
      {
        if ((GEOTileKeyEquals() & 1) != 0)
          return v8;
      }
      else
      {
        if (v10 >= *(_QWORD *)&v3)
          v10 %= *(_QWORD *)&v3;
        if (v10 != v6)
          return 0;
      }
      v8 = (_QWORD *)*v8;
    }
    while (v8);
  }
  return v8;
}

_QWORD *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyHashFunc,GEOTileKeyEqualsFunc,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyEqualsFunc,GEOTileKeyHashFunc,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v6 = GEOTileKeyHash();
  v7 = v6;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v8)
        v3 = v6 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v6;
    }
    v10 = *(void ***)(*a1 + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if ((GEOTileKeyEquals() & 1) != 0)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_22;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if ((GEOTileKeyEquals() & 1) != 0)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v3)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  v14 = a1 + 2;
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = **a3;
  v11[4] = 0;
  v11[5] = 0;
  v15 = (float)(unint64_t)(a1[3] + 1);
  v16 = *((float *)a1 + 8);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = a1[1];
    if (prime <= v8)
    {
      if (prime >= v8)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v8)
      {
        v8 = a1[1];
LABEL_59:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8)
            v3 = v7 % v8;
          else
            v3 = v7;
        }
        else
        {
          v3 = (v8 - 1) & v7;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v8 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = (void *)*a1;
    *a1 = (uint64_t)v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v23++) = 0;
    while (prime != v23);
    v24 = (_QWORD *)*v14;
    if (!*v14)
    {
LABEL_58:
      v8 = prime;
      goto LABEL_59;
    }
    v25 = v24[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*a1 + 8 * v27) = v14;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v29))
        {
          *v24 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*a1 + v30);
          **(_QWORD **)(*a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v29) = v24;
          v24 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*a1 + 8 * v25) = v14;
    v34 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*a1 + 8 * v36))
        {
          *(_QWORD *)(*a1 + 8 * v36) = v24;
          goto LABEL_63;
        }
        *v24 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*a1 + v35);
        **(_QWORD **)(*a1 + v35) = v34;
        v34 = v24;
      }
      v36 = v25;
LABEL_63:
      v24 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v3);
  if (v38)
  {
    *v11 = *v38;
LABEL_80:
    *v38 = v11;
    goto LABEL_81;
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v37 + 8 * v3) = v14;
  if (*v11)
  {
    v39 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v39 >= v8)
        v39 %= v8;
    }
    else
    {
      v39 &= v8 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v11;
}

void sub_19FBDD17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FBDD5D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void altitude::GeoServicesLoadJob::setData(altitude::GeoServicesLoadJob *this, NSObject *a2)
{
  int v4;
  BOOL v6;
  altitude::GeoServicesLoadJob *v7;
  NSObject *v8;

  v8 = a2;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v4 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  v6 = (v4 & 2) == 0 && v8 != 0;
  *((_BYTE *)this + 244) = v6;
  objc_storeStrong((id *)this + 29, a2);
  *((_DWORD *)this + 60) = 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    *((_DWORD *)this + 60) = objc_msgSend(*((id *)this + 29), "length");
  v7 = (altitude::GeoServicesLoadJob *)*((_QWORD *)this + 34);
  if (v7)
    altitude::GeoServicesLoadJob::setData(v7, v8);

}

void sub_19FBDD710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void altitude::GeoServicesLoadJob::~GeoServicesLoadJob(altitude::GeoServicesLoadJob *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_1E42C5460;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:

  *(_QWORD *)this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  karo::Job::~Job(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_1E42C5460;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:

  *(_QWORD *)this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  karo::Job::~Job(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::GeoServicesLoadJob::cancel(altitude::GeoServicesLoadJob *this)
{
  void *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (void *)**((_QWORD **)this + 36);
  if (v2)
  {
    objc_msgSend(v2, "getJobForKey:", (char *)this + 216);
    if (v8)
      objc_msgSend(**((id **)this + 36), "cancelJob:", &v8);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  karo::Job::cancel(this);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v3 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v3 & 1) == 0)
    karo::Job::step(this);
  v4 = *((_QWORD *)this + 34);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19FBDD9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void altitude::GeoServicesLoadJob::setPriority(altitude::GeoServicesLoadJob *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = atomic_load((unsigned int *)this + 4);
  if (v2 != a2)
  {
    if (a2 <= 1)
      v4 = 1;
    else
      v4 = a2;
    v5 = atomic_load((unsigned int *)this + 4);
    if (v5 != (_DWORD)v4)
    {
      pthread_mutex_lock(*((pthread_mutex_t **)this + 7));
      v7 = *((_QWORD *)this + 4);
      v6 = *((_QWORD *)this + 5);
      if (v6 != v7)
      {
        v8 = 0;
        v9 = 1;
        do
        {
          v10 = v7 + 32 * v8;
          if (*(_BYTE *)(v10 + 24))
          {
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 24))(*(_QWORD *)(v10 + 8), v4);
            v7 = *((_QWORD *)this + 4);
            v6 = *((_QWORD *)this + 5);
          }
          v8 = v9++;
        }
        while (v8 < (v6 - v7) >> 5);
      }
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 7));
      v11 = atomic_load((unint64_t *)this + 3);
      atomic_store(v4, (unsigned int *)this + 4);
      if (v11)
        atomic_store(1u, (unsigned __int8 *)(v11 + 96));
    }
    v12 = (void *)**((_QWORD **)this + 36);
    if (v12)
    {
      objc_msgSend(v12, "getJobForKey:", (char *)this + 216);
      if (v16)
        objc_msgSend(**((id **)this + 36), "updateJobPriority:", &v16);
      v13 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
  }
}

void sub_19FBDDB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t altitude::GeoServicesLoadJob::jobStep(altitude::GeoServicesLoadJob *this)
{
  double v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *((double *)this + 33) = v2;
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    gdc::Statistics::addSampleValue(v3, "GeoServicesLoadJobTotalTime (ms)", 0xF3A2BAA200000020, (v2 - *((double *)this + 32)) * 1000.0);
    LODWORD(v4) = *((_DWORD *)this + 60);
    gdc::Statistics::addSampleValue(*((_QWORD *)this + 31), "GeoServicesLoadJobDataSize (bytes)", 0xC4CC103000000022, (double)v4);
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  result = *((_QWORD *)this + 34);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t altitude::GeoServicesLoadJob::succeeded(altitude::GeoServicesLoadJob *this)
{
  return *((unsigned __int8 *)this + 244);
}

uint64_t altitude::GeoServicesLoadJob::getDataSize(altitude::GeoServicesLoadJob *this)
{
  return *((unsigned int *)this + 60);
}

void *altitude::GeoServicesLoadJob::getData(altitude::GeoServicesLoadJob *this)
{
  char isKindOfClass;
  void *result;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  result = (void *)*((_QWORD *)this + 29);
  if ((isKindOfClass & 1) != 0)
    return (void *)objc_msgSend(objc_retainAutorelease(result), "bytes");
  return result;
}

void altitude::GeoServicesLoader::~GeoServicesLoader(altitude::GeoServicesLoader *this)
{
  altitude::GeoServicesLoader::~GeoServicesLoader(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42C4F60;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::GeoServicesLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  objc_msgSend(**((id **)this + 12), "cancelRequests");
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E42C32B8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::GeoServicesLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[8];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[9];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FBDDE00(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[8] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

void altitude::GeoServicesLoader::createRequest(uint64_t a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  void *v28;
  char v29;
  void *v30[2];
  uint64_t v31;

  v8 = operator new();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 112);
  v29 = 0;
  LOBYTE(v28) = 0;
  v27 = 5;
  strcpy((char *)__p, "apple");
  altitude::TileKey::toUrlString(v30, a2, (uint64_t)&v28, (uint64_t)__p, 1);
  karo::Job::Job(v8, v9);
  *(_BYTE *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v8 = off_1E42C2C58;
  v11 = (std::string *)(v8 + 192);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)v30;
    *(_QWORD *)(v8 + 208) = v31;
    if ((v27 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v30[0], (std::string::size_type)v30[1]);
  operator delete(v30[0]);
  if (v27 < 0)
LABEL_3:
    operator delete(__p[0]);
LABEL_4:
  if (v29 < 0)
    operator delete(v28);
  *(_QWORD *)v8 = off_1E42C5460;
  *(_QWORD *)(v8 + 224) = 0;
  *(_QWORD *)(v8 + 232) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 237) = 0;
  *(_QWORD *)(v8 + 248) = v10;
  *(_QWORD *)(v8 + 272) = 0;
  *(_QWORD *)(v8 + 280) = 0;
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v8 + 288) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v8 + 296) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(double *)(v8 + 256) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(double *)(v8 + 264) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *(_QWORD *)(v8 + 216) = altitude::TileKey::getGEOTileKey(a2, *(_QWORD *)(v8 + 8));
  *(_QWORD *)(v8 + 224) = v15;
  v24 = v8;
  v16 = (std::__shared_weak_count *)operator new();
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8A60;
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  v25 = v16;
  if (a3)
  {
    if (*a3 <= 1u)
      v17 = 1;
    else
      v17 = *a3;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v17);
  }
  objc_msgSend(**(id **)(a1 + 96), "fetchDataForJob:", &v24);
  v18 = v25;
  *a4 = v24;
  a4[1] = (uint64_t)v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = v25;
    if (v25)
    {
      v22 = (unint64_t *)&v25->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_19FBDE23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FBDE254(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FBDE270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void **v23;
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v24);

  karo::AsyncFileLoader::LoadJob::~LoadJob(v23);
  MEMORY[0x1A1AF4E00](v23, 0x10B3C40FD76E06ALL);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 32);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 36);
      v12 = *(_DWORD *)(v8 + 40);
      v13 = *(_BYTE *)(v8 + 44);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
        *(_QWORD *)(a3 + 8) = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FBDE468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FBDE5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

double altitude::GeoServicesLoader::getRequest@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v6;

  karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::getRequest(a1, a2, a3, (uint64_t **)&v6);
  result = *(double *)&v6;
  *a4 = v6;
  return result;
}

void altitude::GeoServicesLoader::requestTile(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void (**v21)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v22;
  std::__shared_weak_count *v23;
  int v24;

  v24 = a4;
  karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT(a1, a2, a3, a4, a5, a6, (uint64_t)&v24, &v21);
  v9 = v22;
  v8 = v23;
  *a7 = &off_1E42C2D08;
  a7[1] = v9;
  a7[2] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v9)
  {
    v12 = (unsigned int *)(v9 + 128);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v9 = a7[1];
    v8 = (std::__shared_weak_count *)a7[2];
  }
  *a7 = &off_1E42C2C18;
  a7[3] = 0;
  a7[4] = 0;
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    a7[3] = v9;
    a7[4] = v8;
  }
  else
  {
    a7[3] = v9;
  }
  v21 = &off_1E42C2D08;
  if (v22)
  {
    v16 = (unsigned int *)(v22 + 128);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

double altitude::GeoServicesLoader::createAndQueueTileRequest@<D0>(_QWORD *a1@<X0>, int a2@<W2>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  double v11[3];
  int v12;
  __int128 v13;

  v12 = a2;
  (*(void (**)(double *__return_ptr))(*a1 + 64))(v11);
  v5 = a1[6];
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)&v11[1];
    v13 = *(_OWORD *)v11;
    if (*(_QWORD *)&v11[1])
    {
      v7 = (unint64_t *)(*(_QWORD *)&v11[1] + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      karo::JobManager::queueJob(v5, &v13);
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 - 1, v7));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v5, &v13);
    }
  }
  result = v11[0];
  *a3 = *(_OWORD *)v11;
  return result;
}

uint64_t altitude::GeoServicesLoader::invalidateTile(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v5[0] = altitude::TileKey::getGEOTileKey(a2, *(_QWORD *)(a1 + 32));
  v5[1] = v3;
  return objc_msgSend(**(id **)(a1 + 96), "reportCorruptTile:", v5);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 8);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 9);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void sub_19FBDE95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = (uint64_t **)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>((uint64_t)(a1 + 8), (unsigned int *)a2);
  v10 = v9;
  if (a1 + 9 == v9)
  {
    (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v35, a1, a2, a3);
    v16 = v35;
    v15 = v36;
    *a4 = v35;
    a4[1] = (uint64_t *)v15;
    v17 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>((uint64_t)v8, &v35, (unsigned int *)a2);
    v18 = *v17;
    if (!*v17)
    {
      v19 = v17;
      v18 = (uint64_t)operator new(0x50uLL);
      v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v18 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v18 + 48) = v20;
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      v21 = v35;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v21;
      *v19 = v18;
      v22 = (_QWORD *)**v8;
      v23 = (uint64_t *)v18;
      if (v22)
      {
        *v8 = v22;
        v23 = (uint64_t *)*v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v23);
      ++a1[10];
    }
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = *(std::__shared_weak_count **)(v18 + 72);
    *(_QWORD *)(v18 + 64) = v16;
    *(_QWORD *)(v18 + 72) = v15;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = a1[6];
    if (v29)
    {
      v30 = *a4;
      v31 = (std::__shared_weak_count *)a4[1];
      v35 = v30;
      v36 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        karo::JobManager::queueJob(v29, &v35);
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      else
      {
        karo::JobManager::queueJob(v29, &v35);
      }
    }
  }
  else
  {
    v12 = v9[8];
    v11 = v9[9];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
  }
}

void sub_19FBDEB54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::GeoServicesLoadJob *,std::shared_ptr<altitude::GeoServicesLoadJob>::__shared_ptr_default_delete<altitude::GeoServicesLoadJob,altitude::GeoServicesLoadJob>,std::allocator<altitude::GeoServicesLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::GeoServicesLoadJob *,std::shared_ptr<altitude::GeoServicesLoadJob>::__shared_ptr_default_delete<altitude::GeoServicesLoadJob,altitude::GeoServicesLoadJob>,std::allocator<altitude::GeoServicesLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::clearRequest(uint64_t a1, unsigned int *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = (uint64_t **)(a1 + 64);
  v5 = (uint64_t *)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    v6 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5[8] + 16))(v5[8]);
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v6;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    v12 = (std::__shared_weak_count *)v6[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v6);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_19FBDECA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void sub_19FBDED8C(_Unwind_Exception *a1)
{
  altitude::TileKeyLoader *v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 96);
  altitude::TileKeyLoader::~TileKeyLoader(v1);
  _Unwind_Resume(a1);
}

void sub_19FBDEDAC(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void altitude::TileKeyLoader::~TileKeyLoader(altitude::TileKeyLoader *this)
{
  *(_QWORD *)this = off_1E42C32B8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::TileKeyLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void sub_19FBDEE20(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::TileFetcherContainer *,std::shared_ptr<altitude::TileFetcherContainer>::__shared_ptr_default_delete<altitude::TileFetcherContainer,altitude::TileFetcherContainer>,std::allocator<altitude::TileFetcherContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TileFetcherContainer *,std::shared_ptr<altitude::TileFetcherContainer>::__shared_ptr_default_delete<altitude::TileFetcherContainer,altitude::TileFetcherContainer>,std::allocator<altitude::TileFetcherContainer>>::__on_zero_shared(uint64_t result)
{
  id *v1;

  v1 = *(id **)(result + 24);
  if (v1)
  {

    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void ggl::FlyoverTraffic::DefaultMesh::~DefaultMesh(ggl::FlyoverTraffic::DefaultMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::FlyoverTraffic::DefaultMesh::~DefaultMesh(ggl::FlyoverTraffic::DefaultMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverTraffic::DefaultMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverTraffic::DefaultMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::FlyoverTraffic::Default>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverTraffic::Default>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverTraffic::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverTraffic::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverTraffic::DefaultPipelineState::DefaultPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverTrafficShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::FlyoverTraffic::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverTraffic::defaultReflection;
            }
            ggl::MeshTyped<ggl::FlyoverTraffic::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverTraffic::Default>::attributesReflection(void)::r;
            unk_1EE576218 = 1;
          }
          ggl::FlyoverTraffic::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverTraffic::Default>::typedReflection(void)::r;
          unk_1EE589D60 = &ggl::FlyoverTraffic::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE589D68 = 0;
          if ((v97 & 1) == 0
          {
            ggl::FlyoverTraffic::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE589EE8 = ggl::FlyoverTraffic::Displacement::reflection(void)::reflection;
            qword_1EE589EF0 = (uint64_t)ggl::FlyoverTraffic::Pattern::reflection(void)::reflection;
            unk_1EE589EF8 = ggl::FlyoverTraffic::Style::reflection(void)::reflection;
            qword_1EE589F00 = (uint64_t)ggl::FlyoverTraffic::Shared::reflection(void)::reflection;
          }
          qword_1EE589D70 = (uint64_t)&ggl::FlyoverTraffic::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE589D78 = xmmword_19FFB4BF0;
        }
      }
      ggl::FlyoverTraffic::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverTraffic::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverTrafficShader::typedReflection(v92);
      qword_1EE589D08 = (uint64_t)&ggl::FlyoverTrafficShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::FlyoverTraffic::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE589DA8 = 0;
        qword_1EE589DB0 = (uint64_t)"";
        dword_1EE589DB8 = 0;
        qword_1EE589DC0 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE589DC8 = 8;
      }
      qword_1EE589D10 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE589D18 = 1;
      qword_1EE589D20 = 0;
      unk_1EE589D28 = 0;
      qword_1EE589D30 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1EE589D38 = 0;
      if ((v95 & 1) == 0
      {
        ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE589DE8 = 0;
        qword_1EE589DF0 = (uint64_t)"view";
        dword_1EE589DF8 = 3;
        qword_1EE589E00 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        unk_1EE589E08 = vdupq_n_s64(1uLL);
        qword_1EE589E18 = 1;
        unk_1EE589E20 = "displacement";
        dword_1EE589E28 = 3;
        qword_1EE589E30 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantDisplacementBinding(void)::reflection;
        unk_1EE589E38 = xmmword_19FFB3C60;
        qword_1EE589E48 = 2;
        unk_1EE589E50 = "pattern";
        dword_1EE589E58 = 3;
        qword_1EE589E60 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantPatternBinding(void)::reflection;
        unk_1EE589E68 = xmmword_19FFB3040;
        qword_1EE589E78 = 3;
        unk_1EE589E80 = "style";
        dword_1EE589E88 = 3;
        qword_1EE589E90 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantStyleBinding(void)::reflection;
        unk_1EE589E98 = xmmword_19FFB3440;
        qword_1EE589EA8 = 4;
        unk_1EE589EB0 = "sharedConstants";
        dword_1EE589EB8 = 3;
        qword_1EE589EC0 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE589EC8 = 1;
      }
      qword_1EE589D40 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE589D48 = 5;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverTraffic::DefaultPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  *(_QWORD *)a1 = &off_1E42B6B68;
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FlyoverTraffic::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverTraffic::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverTraffic::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverTraffic::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

uint64_t ggl::FlyoverTraffic::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverTraffic::DefaultPipelineSetup *this)
{
  return 0;
}

_QWORD *ggl::FlyoverTraffic::DefaultPipelineSetup::DefaultPipelineSetup(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    v17 = (unint64_t *)&a3->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &off_1E42B6B38;
  v19 = (uint64_t *)a1[8];
  v20 = *a4;
  v21 = a4[1];
  *v19 = *a4;
  v19[1] = 0;
  v22 = (_QWORD *)a1[20];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)v22[1];
  *v22 = v20;
  v22[1] = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = a1[8];
  v29 = *a5;
  v30 = a5[1];
  *(_QWORD *)(v28 + 16) = *a5;
  *(_QWORD *)(v28 + 24) = 0;
  v31 = a1[20];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(v31 + 24);
  *(_QWORD *)(v31 + 16) = v29;
  *(_QWORD *)(v31 + 24) = v30;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = a1[8];
  v38 = *a6;
  v39 = a6[1];
  *(_QWORD *)(v37 + 32) = *a6;
  *(_QWORD *)(v37 + 40) = 0;
  v40 = a1[20];
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *(std::__shared_weak_count **)(v40 + 40);
  *(_QWORD *)(v40 + 32) = v38;
  *(_QWORD *)(v40 + 40) = v39;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = a1[8];
  v47 = *a7;
  v48 = a7[1];
  *(_QWORD *)(v46 + 48) = *a7;
  *(_QWORD *)(v46 + 56) = 0;
  v49 = a1[20];
  if (v48)
  {
    v50 = (unint64_t *)(v48 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(std::__shared_weak_count **)(v49 + 56);
  *(_QWORD *)(v49 + 48) = v47;
  *(_QWORD *)(v49 + 56) = v48;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = a1[8];
  v56 = *a8;
  v57 = a8[1];
  *(_QWORD *)(v55 + 64) = *a8;
  *(_QWORD *)(v55 + 72) = 0;
  v58 = a1[20];
  if (v57)
  {
    v59 = (unint64_t *)(v57 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *(std::__shared_weak_count **)(v58 + 72);
  *(_QWORD *)(v58 + 64) = v56;
  *(_QWORD *)(v58 + 72) = v57;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::ScreenMesh::~ScreenMesh(ggl::DaVinci::ScreenMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::ScreenMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::ScreenMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::RouteLineSection::~RouteLineSection(md::RouteLineSection *this)
{
  md::RouteLineSection::~RouteLineSection(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  void *v29;

  *(_QWORD *)this = &off_1E4292130;
  *((_DWORD *)this + 22) = -1082130432;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 16) = 0;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0xBFF0000000000000;
  v3 = *((_QWORD *)this + 12);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  if (!v16)
    goto LABEL_29;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
    if (!v19)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
    if (!v19)
      goto LABEL_35;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_35:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v22)
    goto LABEL_39;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v25)
      goto LABEL_45;
  }
  else
  {
LABEL_39:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v25)
      goto LABEL_45;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_45:
  objc_destroyWeak((id *)this + 28);
  *((_QWORD *)this + 7) = &off_1E42B4D70;

  v28 = (void *)*((_QWORD *)this + 4);
  if (v28)
  {
    *((_QWORD *)this + 5) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 1);
  if (v29)
  {
    *((_QWORD *)this + 2) = v29;
    operator delete(v29);
  }
}

BOOL md::RouteLineSection::isMatchingCandidate(md::RouteLineSection *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4) > 1;
}

uint64_t md::RouteLineSection::polylineStart(md::RouteLineSection *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 12);
}

uint64_t md::RouteLineSection::polylineEnd(md::RouteLineSection *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) - 36);
}

uint64_t md::RouteLineSection::operator[](uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96));
}

uint64_t md::RouteLineSection::size(md::RouteLineSection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12));
}

unint64_t md::RouteLineSection::vertexCount(md::RouteLineSection *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4);
}

uint64_t geo::_retain_ptr<GEOStyleAttributes * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D70;

  return a1;
}

void geo::_retain_ptr<GEOStyleAttributes * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4D70;

  JUMPOUT(0x1A1AF4E00);
}

void md::RouteLineSection::updateStyleQueryIfNecessary(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, int a4, int a5, int a6, gss::FeatureAttributeSet *a7, gss::FeatureAttributeSet *a8, float a9, unsigned __int8 a10, unsigned int a11, unsigned int a12)
{
  id WeakRetained;
  __int32 v20;
  uint64_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int8x8_t v24;
  int32x2_t v25;
  int8x8_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  id v36;
  const GEOStyleAttributes *v37;
  gss::Allocator *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int *v105;
  unsigned int *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  unsigned int *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int *v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  char hasValueForKeyAtZAtEnd;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  __int16 v188;
  __int16 v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  __int128 v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  gss::Allocator *v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  __int128 v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  BOOL v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  int8x8_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  unsigned int *v241;
  unsigned int *v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE v253[15];
  char v254;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 224));
  v20 = objc_msgSend(WeakRetained, "composedRouteSegmentIndex");

  v21 = *(_QWORD *)(a1 + 272);
  if (v21)
  {
    if (v20 != a11 || (v21 = *(_QWORD *)(a1 + 288)) != 0)
    {
      if (*(unsigned __int8 *)(a1 + 257) == a4
        && *(unsigned __int8 *)(a1 + 258) == a5
        && *(unsigned __int8 *)(a1 + 259) == a6
        && *a3 == *(unsigned __int8 *)(a1 + 262)
        && a3[1] == *(unsigned __int8 *)(a1 + 263)
        && a3[2] == *(unsigned __int8 *)(a1 + 264)
        && a3[3] == *(unsigned __int8 *)(a1 + 265)
        && a3[4] == *(unsigned __int8 *)(a1 + 266)
        && a3[5] == *(unsigned __int8 *)(a1 + 267)
        && a3[6] == *(unsigned __int8 *)(a1 + 268)
        && a3[7] == *(unsigned __int8 *)(a1 + 269)
        && *(_DWORD *)(a1 + 400) == a11
        && *(_DWORD *)(a1 + 404) == a12
        && (((*(_QWORD *)(a1 + 336) == 0) ^ a10) & 1) != 0)
      {
        return;
      }
      LODWORD(v21) = 1;
    }
  }
  v22.i32[0] = v20;
  v22.i32[1] = *(_DWORD *)(a1 + 248);
  v23 = (int32x2_t)vbic_s8((int8x8_t)__PAIR64__(a12, a11), (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a12, a11), (int32x2_t)-1));
  v24 = (int8x8_t)vcgt_s32(v23, v22);
  v231 = (int8x8_t)vsub_s32((int32x2_t)vand_s8(v24, (int8x8_t)0x200000002), (int32x2_t)vbic_s8((int8x8_t)vcge_s32(v23, v22), v24));
  if ((_DWORD)v21)
  {
    if (*(unsigned __int8 *)(a1 + 257) == a4
      && *(unsigned __int8 *)(a1 + 258) == a5
      && *(unsigned __int8 *)(a1 + 259) == a6
      && *a3 == *(unsigned __int8 *)(a1 + 262)
      && a3[1] == *(unsigned __int8 *)(a1 + 263)
      && a3[2] == *(unsigned __int8 *)(a1 + 264)
      && a3[3] == *(unsigned __int8 *)(a1 + 265)
      && a3[4] == *(unsigned __int8 *)(a1 + 266)
      && a3[5] == *(unsigned __int8 *)(a1 + 267)
      && a3[6] == *(unsigned __int8 *)(a1 + 268)
      && a3[7] == *(unsigned __int8 *)(a1 + 269))
    {
      v25 = (int32x2_t)vbic_s8(*(int8x8_t *)(a1 + 400), (int8x8_t)vceq_s32(*(int32x2_t *)(a1 + 400), (int32x2_t)-1));
      v26 = (int8x8_t)vcgt_s32(v25, v22);
      v27 = vmvn_s8((int8x8_t)vceq_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32((int32x2_t)vand_s8(v26, (int8x8_t)0x200000002), (int32x2_t)vbic_s8((int8x8_t)vcge_s32(v25, v22), v26)), (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v231, (int8x8_t)0xFF000000FFLL)));
      if (((v27.i32[0] | v27.i32[1]) & 1) == 0)
        return;
    }
  }
  v29 = *a2;
  v28 = a2[1];
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(std::__shared_weak_count **)(a1 + 392);
  *(_QWORD *)(a1 + 384) = v29;
  *(_QWORD *)(a1 + 392) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *(_BYTE *)(a1 + 257) = a4;
  *(_BYTE *)(a1 + 258) = a5;
  *(_BYTE *)(a1 + 259) = a6;
  *(_QWORD *)(a1 + 262) = *(_QWORD *)a3;
  *(_BYTE *)(a1 + 408) = v231.i8[4];
  memset(v253, 0, sizeof(v253));
  v254 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x10002u) = a4;
  if (a6)
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x10002u) = 3;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x1004Du) = a5;
  v35 = *(_QWORD *)(a1 + 262);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x10001u) = v35;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x1000Du) = BYTE1(v35);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x1000Eu) = BYTE2(v35);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x10033u) = BYTE4(v35);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x1003Cu) = BYTE5(v35);
  *(_DWORD *)(a1 + 400) = a11;
  *(_DWORD *)(a1 + 404) = a12;
  v36 = *(id *)(a1 + 64);
  if (v36)
  {
    v37 = (const GEOStyleAttributes *)*(id *)(a1 + 64);
    md::createFeatureAttributeSet((md *)&v249, v37);

  }
  else
  {
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v252 = gss::Allocator::instance(0);
  }

  v39 = *(std::__shared_weak_count **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v245 = 0;
  v246 = 0;
  v247 = 0;
  v248 = gss::Allocator::instance(v38);
  v240 = 0;
  v42 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, 8, 4);
  v43 = v42 + 2;
  if (v42)
    *(_QWORD *)v42 = 0xB00000005;
  v44 = v42 + 2;
  v46 = v245;
  v45 = v246;
  if (v246 != v245)
  {
    v47 = (char *)v246 - (char *)v245 - 8;
    if (v47 < 0x38)
    {
      v49 = v246;
    }
    else if ((unint64_t)((char *)v246 - (char *)v42) < 0x20)
    {
      v49 = v246;
    }
    else
    {
      v48 = (v47 >> 3) + 1;
      v49 = &v246[-2 * (v48 & 0x3FFFFFFFFFFFFFFCLL)];
      v50 = v42 - 4;
      v51 = v246 - 4;
      v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v53 = *(_OWORD *)v51;
        *((_OWORD *)v50 - 1) = *((_OWORD *)v51 - 1);
        *(_OWORD *)v50 = v53;
        v50 -= 8;
        v51 -= 8;
        v52 -= 4;
      }
      while (v52);
      v42 -= 2 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_62;
    }
    do
    {
      v54 = *((_QWORD *)v49 - 1);
      v49 -= 2;
      *((_QWORD *)v42 - 1) = v54;
      v42 -= 2;
    }
    while (v49 != v46);
LABEL_62:
    v45 = v245;
  }
  v245 = v42;
  v246 = v44;
  v55 = v247;
  v247 = (unint64_t)v43;
  if (v45)
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v248 + 40))(v248, v45, v55 - (_QWORD)v45);
  v246 = v44;
  v56 = *(unsigned __int16 *)(a1 + 216);
  if ((unint64_t)v44 < v247)
  {
    *(_QWORD *)v44 = ((v56 << 32) | 0x10009) + 7;
    v57 = v44 + 2;
    goto LABEL_90;
  }
  v58 = ((char *)v44 - (char *)v245) >> 3;
  if ((unint64_t)(v58 + 1) >> 61)
    abort();
  v59 = (uint64_t)(v247 - (_QWORD)v245) >> 2;
  if (v59 <= v58 + 1)
    v59 = v58 + 1;
  if (v247 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
    v60 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v60 = v59;
  if (v60)
  {
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, 8 * v60, 4);
    v62 = (unsigned int *)(v61 + 8 * v58);
    v63 = v61 + 8 * v60;
    if (v61)
      *(_QWORD *)v62 = ((v56 << 32) | 0x10009) + 7;
  }
  else
  {
    v63 = 0;
    v62 = (unsigned int *)(8 * v58);
  }
  v57 = v62 + 2;
  v65 = v245;
  v64 = v246;
  if (v246 != v245)
  {
    v66 = (char *)v246 - (char *)v245 - 8;
    if (v66 < 0x38)
    {
      v68 = v246;
    }
    else if ((unint64_t)((char *)v246 - (char *)v62) < 0x20)
    {
      v68 = v246;
    }
    else
    {
      v67 = (v66 >> 3) + 1;
      v68 = &v246[-2 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
      v69 = v62 - 4;
      v70 = v246 - 4;
      v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v72 = *(_OWORD *)v70;
        *((_OWORD *)v69 - 1) = *((_OWORD *)v70 - 1);
        *(_OWORD *)v69 = v72;
        v69 -= 8;
        v70 -= 8;
        v71 -= 4;
      }
      while (v71);
      v62 -= 2 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
      if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_87;
    }
    do
    {
      v73 = *((_QWORD *)v68 - 1);
      v68 -= 2;
      *((_QWORD *)v62 - 1) = v73;
      v62 -= 2;
    }
    while (v68 != v65);
LABEL_87:
    v64 = v245;
  }
  v245 = v62;
  v246 = v57;
  v74 = v247;
  v247 = v63;
  if (v64)
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v248 + 40))(v248, v64, v74 - (_QWORD)v64);
LABEL_90:
  v246 = v57;
  if ((unint64_t)v57 < v247)
  {
    *(_QWORD *)v57 = (((unint64_t)v231.u8[4] << 32) | 0x10009) + 75;
    v75 = v57 + 2;
    goto LABEL_115;
  }
  v76 = ((char *)v57 - (char *)v245) >> 3;
  if ((unint64_t)(v76 + 1) >> 61)
    abort();
  v77 = (uint64_t)(v247 - (_QWORD)v245) >> 2;
  if (v77 <= v76 + 1)
    v77 = v76 + 1;
  if (v247 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
    v78 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v78 = v77;
  if (v78)
  {
    v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, 8 * v78, 4);
    v80 = (unsigned int *)(v79 + 8 * v76);
    v81 = v79 + 8 * v78;
    if (v79)
      *(_QWORD *)v80 = (((unint64_t)v231.u8[4] << 32) | 0x10009) + 75;
  }
  else
  {
    v81 = 0;
    v80 = (unsigned int *)(8 * v76);
  }
  v75 = v80 + 2;
  v83 = v245;
  v82 = v246;
  if (v246 != v245)
  {
    v84 = (char *)v246 - (char *)v245 - 8;
    if (v84 < 0x38)
    {
      v86 = v246;
    }
    else if ((unint64_t)((char *)v246 - (char *)v80) < 0x20)
    {
      v86 = v246;
    }
    else
    {
      v85 = (v84 >> 3) + 1;
      v86 = &v246[-2 * (v85 & 0x3FFFFFFFFFFFFFFCLL)];
      v87 = v80 - 4;
      v88 = v246 - 4;
      v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v90 = *(_OWORD *)v88;
        *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
        *(_OWORD *)v87 = v90;
        v87 -= 8;
        v88 -= 8;
        v89 -= 4;
      }
      while (v89);
      v80 -= 2 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_112;
    }
    do
    {
      v91 = *((_QWORD *)v86 - 1);
      v86 -= 2;
      *((_QWORD *)v80 - 1) = v91;
      v80 -= 2;
    }
    while (v86 != v83);
LABEL_112:
    v82 = v245;
  }
  v245 = v80;
  v246 = v75;
  v92 = v247;
  v247 = v81;
  if (v82)
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v248 + 40))(v248, v82, v92 - (_QWORD)v82);
LABEL_115:
  v246 = v75;
  if ((unint64_t)v75 < v247)
  {
    *(_QWORD *)v75 = (((unint64_t)v231.u8[0] << 32) | 0x10009) + 11;
    v93 = v75 + 2;
    goto LABEL_140;
  }
  v94 = ((char *)v75 - (char *)v245) >> 3;
  if ((unint64_t)(v94 + 1) >> 61)
    abort();
  v95 = (uint64_t)(v247 - (_QWORD)v245) >> 2;
  if (v95 <= v94 + 1)
    v95 = v94 + 1;
  if (v247 - (unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
    v96 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v96 = v95;
  if (v96)
  {
    v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, 8 * v96, 4);
    v98 = (unsigned int *)(v97 + 8 * v94);
    v99 = v97 + 8 * v96;
    if (v97)
      *(_QWORD *)v98 = (((unint64_t)v231.u8[0] << 32) | 0x10009) + 11;
  }
  else
  {
    v99 = 0;
    v98 = (unsigned int *)(8 * v94);
  }
  v93 = v98 + 2;
  v101 = v245;
  v100 = v246;
  if (v246 != v245)
  {
    v102 = (char *)v246 - (char *)v245 - 8;
    if (v102 < 0x38)
    {
      v104 = v246;
    }
    else if ((unint64_t)((char *)v246 - (char *)v98) < 0x20)
    {
      v104 = v246;
    }
    else
    {
      v103 = (v102 >> 3) + 1;
      v104 = &v246[-2 * (v103 & 0x3FFFFFFFFFFFFFFCLL)];
      v105 = v98 - 4;
      v106 = v246 - 4;
      v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v108 = *(_OWORD *)v106;
        *((_OWORD *)v105 - 1) = *((_OWORD *)v106 - 1);
        *(_OWORD *)v105 = v108;
        v105 -= 8;
        v106 -= 8;
        v107 -= 4;
      }
      while (v107);
      v98 -= 2 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
      if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_137;
    }
    do
    {
      v109 = *((_QWORD *)v104 - 1);
      v104 -= 2;
      *((_QWORD *)v98 - 1) = v109;
      v98 -= 2;
    }
    while (v104 != v101);
LABEL_137:
    v100 = v245;
  }
  v245 = v98;
  v246 = v93;
  v110 = v247;
  v247 = v99;
  if (v100)
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v248 + 40))(v248, v100, v110 - (_QWORD)v100);
LABEL_140:
  v246 = v93;
  if (v20 != a11)
    goto LABEL_208;
  v111 = v248;
  v112 = v245;
  v113 = (char *)v93 - (char *)v245;
  if (v93 != v245)
  {
    if (v113 < 0)
      abort();
    v114 = (*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, (char *)v93 - (char *)v245, 4);
    v115 = (unsigned int *)v114;
    v116 = 0;
    do
    {
      if (v114 + v116 * 4)
        *(_QWORD *)(v114 + v116 * 4) = *(_QWORD *)&v112[v116];
      v116 += 2;
    }
    while (&v112[v116] != v93);
    v117 = (unsigned int *)(v114 + v116 * 4);
    v118 = v114 + 8 * (v113 >> 3);
    if (v240)
      goto LABEL_148;
LABEL_152:
    v241 = v115;
    v242 = v117;
    v243 = v118;
    v244 = v111;
    v240 = 1;
    goto LABEL_153;
  }
  v117 = 0;
  v115 = 0;
  v118 = 0;
  if (!v240)
    goto LABEL_152;
LABEL_148:
  if (v241)
  {
    v242 = v241;
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v244 + 40))(v244, v241, v243 - (_QWORD)v241);
  }
  v241 = v115;
  v242 = v117;
  v243 = v118;
LABEL_153:
  v119 = v246;
  if ((unint64_t)v246 < v247)
  {
    if (v246)
      *(_QWORD *)v246 = 65545;
    v120 = v119 + 2;
    goto LABEL_180;
  }
  v121 = ((char *)v246 - (char *)v245) >> 3;
  v122 = v121 + 1;
  if ((unint64_t)(v121 + 1) >> 61)
    abort();
  v123 = v247 - (_QWORD)v245;
  if ((uint64_t)(v247 - (_QWORD)v245) >> 2 > v122)
    v122 = v123 >> 2;
  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
    v124 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v124 = v122;
  if (v124)
  {
    v125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v248 + 16))(v248, 8 * v124, 4);
    v126 = (unsigned int *)(v125 + 8 * v121);
    v127 = v125 + 8 * v124;
    if (v125)
      *(_QWORD *)v126 = 65545;
  }
  else
  {
    v127 = 0;
    v126 = (unsigned int *)(8 * v121);
  }
  v120 = v126 + 2;
  v129 = v245;
  v128 = v246;
  if (v246 != v245)
  {
    v130 = (char *)v246 - (char *)v245 - 8;
    if (v130 < 0x38)
    {
      v132 = v246;
    }
    else if ((unint64_t)((char *)v246 - (char *)v126) < 0x20)
    {
      v132 = v246;
    }
    else
    {
      v131 = (v130 >> 3) + 1;
      v132 = &v246[-2 * (v131 & 0x3FFFFFFFFFFFFFFCLL)];
      v133 = v126 - 4;
      v134 = v246 - 4;
      v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v136 = *(_OWORD *)v134;
        *((_OWORD *)v133 - 1) = *((_OWORD *)v134 - 1);
        *(_OWORD *)v133 = v136;
        v133 -= 8;
        v134 -= 8;
        v135 -= 4;
      }
      while (v135);
      v126 -= 2 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
      if (v131 == (v131 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_177;
    }
    do
    {
      v137 = *((_QWORD *)v132 - 1);
      v132 -= 2;
      *((_QWORD *)v126 - 1) = v137;
      v126 -= 2;
    }
    while (v132 != v129);
LABEL_177:
    v128 = v245;
  }
  v245 = v126;
  v246 = v120;
  v138 = v247;
  v247 = v127;
  if (v128)
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v248 + 40))(v248, v128, v138 - (_QWORD)v128);
LABEL_180:
  v246 = v120;
  v139 = v242;
  if ((unint64_t)v242 >= v243)
  {
    v141 = ((char *)v242 - (char *)v241) >> 3;
    v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 61)
      abort();
    v143 = v243 - (_QWORD)v241;
    if ((uint64_t)(v243 - (_QWORD)v241) >> 2 > v142)
      v142 = v143 >> 2;
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
      v144 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v144 = v142;
    if (v144)
    {
      v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v244 + 16))(v244, 8 * v144, 4);
      v146 = (unsigned int *)(v145 + 8 * v141);
      v147 = v145 + 8 * v144;
      if (v145)
        *(_QWORD *)v146 = 0x200010009;
    }
    else
    {
      v147 = 0;
      v146 = (unsigned int *)(8 * v141);
    }
    v140 = v146 + 2;
    v149 = v241;
    v148 = v242;
    if (v242 == v241)
      goto LABEL_205;
    v150 = (char *)v242 - (char *)v241 - 8;
    if (v150 < 0x38)
    {
      v152 = v242;
    }
    else if ((unint64_t)((char *)v242 - (char *)v146) < 0x20)
    {
      v152 = v242;
    }
    else
    {
      v151 = (v150 >> 3) + 1;
      v152 = &v242[-2 * (v151 & 0x3FFFFFFFFFFFFFFCLL)];
      v153 = v146 - 4;
      v154 = v242 - 4;
      v155 = v151 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v156 = *(_OWORD *)v154;
        *((_OWORD *)v153 - 1) = *((_OWORD *)v154 - 1);
        *(_OWORD *)v153 = v156;
        v153 -= 8;
        v154 -= 8;
        v155 -= 4;
      }
      while (v155);
      v146 -= 2 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
      if (v151 == (v151 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_204;
    }
    do
    {
      v157 = *((_QWORD *)v152 - 1);
      v152 -= 2;
      *((_QWORD *)v146 - 1) = v157;
      v146 -= 2;
    }
    while (v152 != v149);
LABEL_204:
    v148 = v241;
LABEL_205:
    v241 = v146;
    v242 = v140;
    v158 = v243;
    v243 = v147;
    if (v148)
      (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v244 + 40))(v244, v148, v158 - (_QWORD)v148);
    goto LABEL_207;
  }
  if (v242)
    *(_QWORD *)v242 = 0x200010009;
  v140 = v139 + 2;
LABEL_207:
  v242 = v140;
LABEL_208:
  if (v240)
  {
    gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v249, &v241, (uint64_t *)&v233);
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v237, *a2, (gss::FeatureAttributeSet *)&v233, (gss::QueryOverrides *)v253);
    v159 = v237;
    v237 = 0uLL;
    v160 = *(std::__shared_weak_count **)(a1 + 296);
    *(_OWORD *)(a1 + 288) = v159;
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v163 = (std::__shared_weak_count *)*((_QWORD *)&v237 + 1);
    if (*((_QWORD *)&v237 + 1))
    {
      v164 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    if ((_QWORD)v233)
    {
      *((_QWORD *)&v233 + 1) = v233;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v235 + 40))(v235, v233, v234 - v233);
    }
  }
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v249, &v245, (uint64_t *)&v237);
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v233, *a2, (gss::FeatureAttributeSet *)&v237, (gss::QueryOverrides *)v253);
  v166 = v233;
  v233 = 0uLL;
  v167 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v166;
  if (v167)
  {
    v168 = (unint64_t *)&v167->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v171 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  *(_BYTE *)(a1 + 260) = 0;
  v173 = *(_QWORD *)(a1 + 272);
  if (v173)
  {
    v174 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)&v232 = *(_QWORD *)(a1 + 272);
    *((_QWORD *)&v232 + 1) = v174;
    if (v174)
    {
      v175 = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldxr(v175);
      while (__stxr(v176 + 1, v175));
      *((_QWORD *)&v233 + 1) = v174;
      do
        v177 = __ldxr(v175);
      while (__stxr(v177 + 1, v175));
    }
    else
    {
      *((_QWORD *)&v233 + 1) = 0;
    }
    v234 = 0;
    v235 = 0;
    *(_QWORD *)&v233 = v173;
    v236 = 0;
    v178 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v173 + 48))(v173, &v234);
    v236 = v178;
    if (v174)
    {
      v179 = (unint64_t *)&v174->__shared_owners_;
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
      v178 = v236;
    }
    if (v178)
    {
      v181 = *(_QWORD *)(v233 + 24);
      if ((int)a9 >= 0x17)
        v182 = 23;
      else
        v182 = (int)a9;
      v183 = *(unsigned __int8 *)(v181 + 11);
      if (v183 != 2
        || (hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v233 + 24), 0x1D0u, v182, 0), v183 = 1, (hasValueForKeyAtZAtEnd & 1) == 0))
      {
        LOBYTE(v183) = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v181, 0x1D0u, v182, v183);
      }
      *(_BYTE *)(a1 + 260) = v183;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v233);
  }
  v185 = *(std::__shared_weak_count **)(a1 + 312);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  if (!v185)
    goto LABEL_258;
  v186 = (unint64_t *)&v185->__shared_owners_;
  do
    v187 = __ldaxr(v186);
  while (__stlxr(v187 - 1, v186));
  if (!v187)
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
    if ((*(_DWORD *)(a1 + 400) & 0x80000000) == 0)
      goto LABEL_259;
  }
  else
  {
LABEL_258:
    if ((*(_DWORD *)(a1 + 400) & 0x80000000) == 0)
      goto LABEL_259;
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v253, 0x1003Au) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v233, *a2, (gss::FeatureAttributeSet *)&v237, (gss::QueryOverrides *)v253);
  v222 = v233;
  v233 = 0uLL;
  v223 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v222;
  if (v223)
  {
    v224 = (unint64_t *)&v223->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v227 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
LABEL_259:
  *(_QWORD *)((char *)&v233 + 7) = 0;
  *(_QWORD *)&v233 = 0;
  HIBYTE(v233) = 1;
  v188 = *(unsigned __int8 *)(a1 + 257);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v233, 0x10002u) = v188;
  v189 = *(unsigned __int8 *)(a1 + 258);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v233, 0x1004Du) = v189;
  if (*(_BYTE *)(a1 + 259))
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v233, 0x10002u) = 3;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v233, 0x10054u) = v231.u8[4];
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v232, *a2, a7, (gss::QueryOverrides *)&v233);
  v190 = v232;
  v232 = 0uLL;
  v191 = *(std::__shared_weak_count **)(a1 + 328);
  *(_OWORD *)(a1 + 320) = v190;
  if (v191)
  {
    v192 = (unint64_t *)&v191->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v195 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
      v197 = 0uLL;
      if (!a10)
        goto LABEL_272;
      goto LABEL_271;
    }
  }
  v197 = 0uLL;
  if (a10)
  {
LABEL_271:
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v232, *a2, a8, (gss::QueryOverrides *)&v233);
    v197 = v232;
  }
LABEL_272:
  v232 = 0uLL;
  v198 = *(std::__shared_weak_count **)(a1 + 344);
  *(_OWORD *)(a1 + 336) = v197;
  if (v198)
  {
    v199 = (unint64_t *)&v198->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v202 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v233, 0x1003Au) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v232, *a2, a7, (gss::QueryOverrides *)&v233);
  v205 = v232;
  v232 = 0uLL;
  v206 = *(std::__shared_weak_count **)(a1 + 360);
  *(_OWORD *)(a1 + 352) = v205;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (!*((_QWORD *)&v232 + 1))
    goto LABEL_291;
  v210 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
  do
    v211 = __ldaxr(v210);
  while (__stlxr(v211 - 1, v210));
  if (v211)
  {
LABEL_291:
    v212 = 0uLL;
    if (!a10)
      goto LABEL_293;
    goto LABEL_292;
  }
  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
  std::__shared_weak_count::__release_weak(v209);
  v212 = 0uLL;
  if (a10)
  {
LABEL_292:
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v232, *a2, a8, (gss::QueryOverrides *)&v233);
    v212 = v232;
  }
LABEL_293:
  v232 = 0uLL;
  v213 = *(std::__shared_weak_count **)(a1 + 376);
  *(_OWORD *)(a1 + 368) = v212;
  if (v213)
  {
    v214 = (unint64_t *)&v213->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v217 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  if (BYTE14(v233))
    v219 = 1;
  else
    v219 = (_QWORD)v233 == 0;
  if (!v219)
  {
    v220 = gss::Allocator::instance(v204);
    v204 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v220 + 40))(v220, v233, WORD6(v233));
  }
  if ((_QWORD)v237)
  {
    *((_QWORD *)&v237 + 1) = v237;
    v204 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v239 + 40))(v239, v237, v238 - v237);
  }
  if (v240 && v241)
  {
    v242 = v241;
    v204 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v244
                                                                                                  + 40))(v244, v241, v243 - (_QWORD)v241);
  }
  if (v245)
  {
    v246 = v245;
    v204 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unsigned int *, unint64_t))(*(_QWORD *)v248
                                                                                                  + 40))(v248, v245, v247 - (_QWORD)v245);
  }
  if (v249)
  {
    v250 = v249;
    v204 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v252 + 40))(v252, v249, v251 - v249);
  }
  if (!v253[14])
  {
    if (*(_QWORD *)v253)
    {
      v221 = gss::Allocator::instance(v204);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v221 + 40))(v221, *(_QWORD *)v253, *(unsigned __int16 *)&v253[12]);
    }
  }
}

void sub_19FBE1760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v37;

  if (a23)
    (*(void (**)(void))(*(_QWORD *)a26 + 40))();
  if (a27 && a28)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a31 + 40))(a31, a28, a30 - a28);
  if (a32)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a35 + 40))(a35, a32, a34 - a32);
  v37 = *(_QWORD *)(v35 - 152);
  if (v37)
  {
    *(_QWORD *)(v35 - 144) = v37;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v35 - 128) + 40))(*(_QWORD *)(v35 - 128), v37, *(_QWORD *)(v35 - 136) - v37);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v35 - 120));
  _Unwind_Resume(a1);
}

unint64_t md::RouteLineSection::simplifiedCoordinate(md::RouteLineSection *this, VKPolylineOverlay *a2, PolylineCoordinate a3)
{
  VKPolylineOverlay *v5;
  VKPolylineOverlay *v6;
  float v7;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  double v12;
  double v13;
  float v14;
  int v15;
  float v16;
  unsigned int v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v24[6];
  _BYTE v25[28];
  __int128 v26;
  int v27;
  float32x2_t v28[6];
  float32x2_t v29;
  int v30;
  __int128 v31;
  __int128 v32;
  int v33;

  v5 = a2;
  v6 = v5;
  v7 = fabsf(*((float *)this + 21));
  if (v7 > (float)(v7 * 0.000011921) && v7 >= 1.1755e-38)
  {
    -[VKPolylineOverlay composedRoute](v5, "composedRoute");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "distanceFromPoint:toPoint:", *(_QWORD *)(*((_QWORD *)this + 1) + 12), a3);
    v13 = v12;

    v14 = v13 * *((float *)this + 20);
    if (v14 <= 0.0)
    {
      v16 = 0.0;
      if (v14 < 0.0)
        (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
      v17 = 0;
    }
    else
    {
      if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13)) == 1)
      {
        v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
      }
      else
      {
        (*(void (**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 16))(&v29, *((_QWORD *)this + 13), 0);
        (*(void (**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 16))(v28, *((_QWORD *)this + 13), 1);
        v18 = vsub_f32(v29, v28[0]);
        v19 = v14 - sqrtf(vaddv_f32(vmul_f32(v18, v18)));
        v17 = 0;
        if (v19 <= 0.0)
        {
          v20 = 1;
LABEL_18:
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 13) + 16))(v25, *((_QWORD *)this + 13), v17);
          v30 = *(_DWORD *)&v25[8];
          v29 = *(float32x2_t *)v25;
          v31 = *(_OWORD *)&v25[12];
          v32 = v26;
          v33 = v27;
          (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 16))(v25, *((_QWORD *)this + 13), v20);
          v22 = vsub_f32(v29, *(float32x2_t *)v25);
          v16 = (float)(v19 / sqrtf(vaddv_f32(vmul_f32(v22, v22)))) + 1.0;
          if (v16 >= 1.0)
          {
            v17 += vcvtms_u32_f32(v16);
            v16 = v16 - floorf(v16);
          }
          goto LABEL_22;
        }
        while ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13)) - 1 > (unint64_t)(v17 + 1))
        {
          (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)this + 13) + 16))(v25);
          v20 = v17 + 2;
          (*(void (**)(float32x2_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 16))(v24, *((_QWORD *)this + 13), v20);
          v21 = vsub_f32(*(float32x2_t *)v25, v24[0]);
          v19 = v19 - sqrtf(vaddv_f32(vmul_f32(v21, v21)));
          ++v17;
          if (v19 <= 0.0)
            goto LABEL_18;
        }
        v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
      }
      v17 = v15 - 1;
      v16 = 0.0;
    }
LABEL_22:
    v10 = (unint64_t)LODWORD(v16) << 32;
    v9 = v17;
    goto LABEL_23;
  }
  v9 = 0;
  v10 = 0;
LABEL_23:

  return v10 | v9;
}

void sub_19FBE1BE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::RouteLineSection::SingleLayerVertexSource::~SingleLayerVertexSource(md::RouteLineSection::SingleLayerVertexSource *this)
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 md::RouteLineSection::SingleLayerVertexSource::operator[]@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = **(_QWORD **)(a1 + 8) + 48 * a2;
  v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

unint64_t md::RouteLineSection::SingleLayerVertexSource::size(md::RouteLineSection::SingleLayerVertexSource *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) - **((_QWORD **)this + 1)) >> 4);
}

uint64_t md::RouteLineSection::SingleLayerVertexSource::operator[](uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) + 48 * a2;
}

void md::RouteLineSection::DoubleLayerVertexSource::~DoubleLayerVertexSource(md::RouteLineSection::DoubleLayerVertexSource *this)
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 md::RouteLineSection::DoubleLayerVertexSource::operator[]@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = **(_QWORD **)(a1 + 8) + 48 * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

uint64_t md::RouteLineSection::DoubleLayerVertexSource::size(md::RouteLineSection::DoubleLayerVertexSource *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t md::RouteLineSection::DoubleLayerVertexSource::operator[](uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) + 48 * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
}

uint64_t ___ZN2md16RouteLineSection19simplifyWithEpsilonERKd_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  float v5;
  uint64_t result;
  uint64_t v8;
  float v9;
  float v10;

  v4 = *a2;
  if (*(unsigned __int8 *)(*a2 + 48 * a3 + 44) != *(unsigned __int8 *)(*a2 + 48 * a3 + 45))
  {
    v5 = *(float *)(v4 + 48 * a3 + 40);
    if (v5 == 0.0 || v5 == 1.0)
      return 1;
  }
  v8 = v4 + 48 * a3;
  v9 = *(float *)(v8 + 36);
  v10 = *(float *)(v8 - 12);
  result = v9 != v10;
  if (v9 == v10 && (a4 & 1) == 0)
    return v9 != *(float *)(v4 + 48 * a3 + 84);
  return result;
}

BOOL ___ZN2md16RouteLineSection19simplifyWithEpsilonERKd_block_invoke_2(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  int v5;
  _BOOL8 result;

  v4 = *a2 + 48 * a3;
  v5 = *(unsigned __int8 *)(v4 - 4);
  LODWORD(v4) = *(unsigned __int8 *)(v4 + 44);
  result = v5 != (_DWORD)v4;
  if (v5 == (_DWORD)v4 && (a4 & 1) == 0)
    return v5 != *(unsigned __int8 *)(*a2 + 48 * a3 + 92);
  return result;
}

void md::RouteLineSection::split(md::RouteLineSection *this, const PolylineCoordinate *a2)
{
  unint64_t index;
  float v5;
  float v6;
  int v7;
  id WeakRetained;
  int v9;

  index = a2->index;
  if ((_DWORD)index == *(_DWORD *)md::RouteLineSection::kSplitLocationAfterSection
    && vabds_f32(a2->offset, *(float *)(md::RouteLineSection::kSplitLocationAfterSection + 4)) < 0.00000011921
    || (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12)) - 1 <= index)
  {
    v5 = 3.4028e38;
  }
  else if (a2->index != *(_DWORD *)md::RouteLineSection::kSplitLocationBeforeSection
         || (v5 = -1.0,
             vabds_f32(a2->offset, *(float *)(md::RouteLineSection::kSplitLocationBeforeSection + 4)) >= 0.00000011921))
  {
    v6 = *(float *)((*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), index)+ 32);
    v5 = v6
       + (float)((float)(*(float *)((*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12), index + 1)+ 32)- v6)* a2->offset);
  }
  *((float *)this + 22) = v5;
  v7 = *((_DWORD *)this + 100);
  if ((v7 & 0x80000000) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 28);
    v9 = objc_msgSend(WeakRetained, "composedRouteSegmentIndex");

    if (v7 != v9)
      *((_DWORD *)this + 22) = -1082130432;
  }
}

void sub_19FBE1EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__24776(__n128 *a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  v3 = a2[4].n128_u64[0];
  a1[4].n128_u32[2] = a2[4].n128_u32[2];
  a1[4].n128_u64[0] = v3;
  return result;
}

void __Block_byref_object_dispose__24777(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19FBE27CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100]((void (****)(_QWORD))va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineArrowBatchKey>,std::equal_to<md::RouteLineArrowBatchKey>,true>,std::__unordered_map_equal<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineArrowBatchKey>,std::hash<md::RouteLineArrowBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t ___ZNK2md16RouteLineSection15addArrowRibbonsERNSt3__16vectorINS1_10unique_ptrINS_19RouteLineArrowLayerENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEERKNS_13LayoutContextERKNS1_10shared_ptrIN3ggl17ConstantDataTypedINSG_4Tile4ViewEEEEERKNSF_INSH_INSI_9TransformEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t result;
  char v10[32];

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = operator new();
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
  v7 = *(uint64_t **)(v3 + 48);
  v8 = *(uint64_t **)(v3 + 56);
  LODWORD(v3) = **(_DWORD **)(v3 + 64);
  v10[0] = 0;
  v10[24] = 0;
  md::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::RibbonLayer(v5, a2, *(_QWORD **)(v6 + 64), v7, v8, v10);
  *(_QWORD *)v5 = &off_1E4297A28;
  *(_BYTE *)(v5 + 152) = v3;
  *(_QWORD *)(v5 + 160) = 0;
  result = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v4 - 8) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19FBE2964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C408A7D4C0DLL);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineArrowBatchKey>,std::equal_to<md::RouteLineArrowBatchKey>,true>,std::__unordered_map_equal<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineArrowBatchKey>,std::hash<md::RouteLineArrowBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  malloc_zone_t *zone;
  void (***v7)(_QWORD, uint64_t);
  void (***v8)(_QWORD, uint64_t);
  unsigned __int8 v9;
  uint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = (_QWORD *)v2[4];
      if (v3)
      {
        v4 = (_QWORD *)v2[5];
        v5 = v2[4];
        if (v4 != v3)
        {
          do
          {
            v8 = (void (***)(_QWORD, uint64_t))*--v4;
            v7 = v8;
            *v4 = 0;
            if (v8)
            {
              (**v7)(v7, v5);
              {
                v10 = operator new();
                *(_QWORD *)(v10 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v10 + 24) = "VectorKitLabels";
                *(_OWORD *)(v10 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v10 = &off_1E42B5668;
                *(_QWORD *)(v10 + 8) = "VectorKitLabels";
                *(_OWORD *)(v10 + 72) = 0u;
                *(_OWORD *)(v10 + 88) = 0u;
                *(_OWORD *)(v10 + 104) = 0u;
                *(_OWORD *)(v10 + 120) = 0u;
                *(_OWORD *)(v10 + 136) = 0u;
                *(_OWORD *)(v10 + 152) = 0u;
                *(_OWORD *)(v10 + 168) = 0u;
                *(_OWORD *)(v10 + 184) = 0u;
                *(_OWORD *)(v10 + 200) = 0u;
                *(_OWORD *)(v10 + 216) = 0u;
                *(_OWORD *)(v10 + 232) = 0u;
                *(_QWORD *)(v10 + 248) = 0;
                v16 = v10;
                *(_OWORD *)(v10 + 56) = 0u;
                v11 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v10 + 56), 0);
                if ((_DWORD)v11)
                  geo::read_write_lock::logFailure(v11, (uint64_t)"initialization", v12);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v7, 104);
            }
          }
          while (v4 != v3);
          v5 = v2[4];
        }
        v2[5] = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[7] + 40))(v2[7], v5, v2[6] - v5);
      }
      v13 = (std::__shared_weak_count *)v2[3];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      operator delete(v2);
    }
    while (v1);
  }
}

void md::RouteLineArrowRibbon::~RouteLineArrowRibbon(md::RouteLineArrowRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void (****std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(_QWORD)))(_QWORD)
{
  void (***v2)(_QWORD);
  unsigned __int8 v3;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  malloc_zone_t *zone;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    {
      v5 = operator new();
      *(_QWORD *)(v5 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v5 + 24) = "VectorKitLabels";
      *(_OWORD *)(v5 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v5 = &off_1E42B5668;
      *(_QWORD *)(v5 + 8) = "VectorKitLabels";
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *(_OWORD *)(v5 + 152) = 0u;
      *(_OWORD *)(v5 + 168) = 0u;
      *(_OWORD *)(v5 + 184) = 0u;
      *(_OWORD *)(v5 + 200) = 0u;
      *(_OWORD *)(v5 + 216) = 0u;
      *(_OWORD *)(v5 + 232) = 0u;
      *(_QWORD *)(v5 + 248) = 0;
      *(_OWORD *)(v5 + 56) = 0u;
      v6 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v5 + 56), 0);
      if ((_DWORD)v6)
        geo::read_write_lock::logFailure(v6, (uint64_t)"initialization", v7);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v5 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v5 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v5;
    }
    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v2, 112);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 112);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void md::DottedRouteLineRibbon::~DottedRouteLineRibbon(md::DottedRouteLineRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<md::RouteStyledOverlayBatchKey const,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

void md::RouteStyledOverlayRibbon::~RouteStyledOverlayRibbon(md::RouteStyledOverlayRibbon *this)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A1068;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42A1068;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::RouteLineSection::dumpStyleAttributes(md::RouteLineSection *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  geo::read_write_lock *v9;
  const char *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::ios_base *v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  void **v29;
  unint64_t v30;
  const void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  void **v40;
  void *__dst[2];
  int64_t v42;
  void *v43[2];
  char v44;
  uint8_t buf[4];
  void **v46;
  __int128 v47;
  _QWORD v48[3];
  uint64_t v49;
  unint64_t v50;
  __int128 __p;
  __int128 v52;
  int v53;
  _QWORD v54[22];

  v54[19] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 48);
  v3 = *(_QWORD *)(v2 + 520);
  v4 = *(std::__shared_weak_count **)(v2 + 528);
  *(_QWORD *)&v47 = v3;
  *((_QWORD *)&v47 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  __dst[0] = (void *)(v3 + 16);
  v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v3 + 16));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  gss::attributesToString((unsigned __int16 *)(v3 + 216), 1, 0, 0, v43);
  v9 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v3 + 16));
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (GEOGetVectorKitRouteLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
  v13 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    v15 = *((_QWORD *)this + 34);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = MEMORY[0x1E0DE4FE0];
    v19 = MEMORY[0x1E0DE4FE0] + 64;
    v20 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v21 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v54[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)&v47 = v21;
    *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v21 - 24)) = v22;
    v23 = (std::ios_base *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24));
    std::ios_base::init(v23, (char *)&v47 + 8);
    v23[1].__vftable = 0;
    v23[1].__fmtflags_ = -1;
    *(_QWORD *)&v47 = v18 + 24;
    v54[0] = v19;
    std::streambuf::basic_streambuf();
    *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v52 = 0u;
    v53 = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"{\n", 2);
    v24 = *(_QWORD *)(v15 + 240);
    for (i = *(_QWORD *)(v15 + 248); v24 != i; v24 += 8)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"  ", 2);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" = ", 3);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)";\n", 2);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v47, (uint64_t)"}", 1);
    if ((v53 & 0x10) != 0)
    {
      v30 = *((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1) < v50)
      {
        *((_QWORD *)&v52 + 1) = v50;
        v30 = v50;
      }
      v31 = (const void **)&v49;
    }
    else
    {
      if ((v53 & 8) == 0)
      {
        v28 = 0;
        HIBYTE(v42) = 0;
        v29 = __dst;
        goto LABEL_36;
      }
      v31 = (const void **)v48;
      v30 = v48[2];
    }
    v32 = *v31;
    v28 = v30 - (_QWORD)*v31;
    if (v28 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v28 >= 0x17)
    {
      v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v33 = v28 | 7;
      v34 = v33 + 1;
      v29 = (void **)operator new(v33 + 1);
      __dst[1] = (void *)v28;
      v42 = v34 | 0x8000000000000000;
      __dst[0] = v29;
    }
    else
    {
      HIBYTE(v42) = v30 - *(_BYTE *)v31;
      v29 = __dst;
      if (!v28)
        goto LABEL_36;
    }
    memmove(v29, v32, v28);
LABEL_36:
    v35 = MEMORY[0x1E0DE4FB8];
    *((_BYTE *)v29 + v28) = 0;
    *(_QWORD *)&v47 = *v20;
    *(_QWORD *)((char *)&v48[-1] + *(_QWORD *)(v47 - 24)) = v20[3];
    *((_QWORD *)&v47 + 1) = v35 + 16;
    if (SBYTE7(v52) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AF4D64](v54);
    v36 = __dst;
    if (v42 < 0)
      v36 = (void **)__dst[0];
    *(_DWORD *)buf = 136315138;
    v46 = v36;
    _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_INFO, "Feature Attributes\n %s", buf, 0xCu);
    if (SHIBYTE(v42) < 0)
      operator delete(__dst[0]);
    if (v14)
    {
      v37 = (unint64_t *)&v14->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  if (GEOGetVectorKitRouteLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
  v39 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    v40 = v43;
    if (v44 < 0)
      v40 = (void **)v43[0];
    LODWORD(v47) = 136315138;
    *(_QWORD *)((char *)&v47 + 4) = v40;
    _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_INFO, "Client Attributes\n %s", (uint8_t *)&v47, 0xCu);
  }

  if (v44 < 0)
    operator delete(v43[0]);
}

void sub_19FBE3C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::cancelResources(id *a1, uint64_t a2)
{
  void *v4;
  _QWORD *i;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    v9 = 0;
    v10 = 0;
    v6 = a1[65];
    v9 = (*((uint64_t (**)(id *, id, _QWORD *))*a1 + 17))(a1, v6, i + 2);
    v10 = v7;

    v8 = a1[56];
    objc_msgSend(v4, "cancelKey:forClient:", &v9, v8);

  }
}

void sub_19FBE3D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::cancelAllResources(md::IdentifiedGEOResourceFetcher *this)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cancelAllForClientSynchronous:", *((_QWORD *)this + 56));

}

void sub_19FBE3DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::expireResource(md::IdentifiedGEOResourceFetcher *this, const gdc::ResourceKey *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[7];

  v6[6] = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(md::IdentifiedGEOResourceFetcher *, _QWORD, const gdc::ResourceKey *))(*(_QWORD *)this + 136))(this, *((_QWORD *)this + 65), a2);
  v4 = v3;
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN2md28IdentifiedGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke;
  v6[3] = &__block_descriptor_48_e723_B24__0r___GEOTileKey_b7b1_____GEOStandardTileKey_b40b6b26b26b14b4b4___GEOGloriaQuadIDTileKey_b6b64b14b4______b10b10b12_I____GEORegionalResourceKey_b32b8b6b8b8b1b57___GEOSputnikMetadataKey_b32b24b14b8b42___GEOFlyoverKey_b6b26b26b8b24b14b8b8___GEOTransitLineSelectionKey_b6b25b25b64___GEOPolygonSelectionKey_b6b25b25b64___GEORoadSelectionKey_b6b25b25b64___GEOContourLinesKey_b6b26b26b4b8b50___GEOTileOverlayKey_b6b26b26b8b32b16b6___GEOIdentifiedResourceKey_QCCb1b39___GEOMuninMeshKey_b64b32b16b5b3___GEOVisualLocalizationTrackKey_SCb16b6b26b26b22___GEOVisualLocalizationMetadataKey_b6b9b25b6b26b26b22___GEOVisualLocalizationDataKey_QCb5b21b21b1___GEOS2TileKey_b6b26b26b3b14b4b4b37___GEOLiveTileKey_b6b26b26b14b4b4b4b36___8d16l;
  v6[4] = v2;
  v6[5] = v4;
  objc_msgSend(v5, "expireTilesWithPredicate:", v6);

}

void sub_19FBE3EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::createDebugNode(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  const std::string::value_type *v9;
  __CFString *v10;
  __CFString *v11;
  const std::string::value_type *v12;
  void *v13;
  const std::string::value_type *v14;
  _BYTE v15[32];
  std::string v16;
  int v17;
  _BYTE v18[32];
  std::string v19;
  int v20;
  _BYTE v21[32];
  std::string __p;
  int v23;
  _QWORD v24[7];
  int v25;
  _QWORD v26[7];
  int v27;
  _BYTE v28[24];

  v3 = a1;
  gdc::ResourceFetcher::createDebugNode(a1, a2, a3);
  v28[23] = 12;
  strcpy(v28, "Preload Only");
  v5 = *((unsigned __int8 *)v3 + 504);
  v27 = 0;
  memset(&v26[4], 0, 24);
  v26[0] = v5;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v26);
  v6 = *((unsigned __int8 *)v3 + 505);
  v28[23] = 12;
  strcpy(v28, "Require Wifi");
  v25 = 0;
  memset(&v24[4], 0, 24);
  v24[0] = v6;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v24);
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)v28 = v7;
  *(_OWORD *)&v28[8] = xmmword_19FFB34A0;
  strcpy(v7, "Tile Loader Client Identifier");
  v8 = (void *)v3[56];
  if (v8)
  {
    v9 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
    memset(&__p, 0, sizeof(__p));
    v23 = 4;
    if (v9)
    {
      std::string::__assign_external(&__p, v9);
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
      qmemcpy(&__p, "<null>", 6);
    }
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    v23 = 4;
    std::string::__assign_external(&__p, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8)

  operator delete(v7);
  v28[23] = 10;
  strcpy(v28, "Tile Style");
  v10 = CFSTR("RASTER_STANDARD");
  switch(*((_DWORD *)v3 + 127))
  {
    case 0:
      break;
    case 1:
      v10 = CFSTR("VECTOR_STANDARD");
      break;
    case 2:
      v10 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER");
      break;
    case 3:
      v10 = CFSTR("VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER");
      break;
    case 4:
      v10 = CFSTR("VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER");
      break;
    case 5:
      v10 = CFSTR("RASTER_STANDARD_BACKGROUND");
      break;
    case 6:
      v10 = CFSTR("RASTER_HYBRID");
      break;
    case 7:
      v10 = CFSTR("RASTER_SATELLITE");
      break;
    case 8:
      v10 = CFSTR("RASTER_TERRAIN");
      break;
    case 0xB:
      v10 = CFSTR("VECTOR_BUILDINGS");
      break;
    case 0xC:
      v10 = CFSTR("VECTOR_TRAFFIC");
      break;
    case 0xD:
      v10 = CFSTR("VECTOR_POI");
      break;
    case 0xE:
      v10 = CFSTR("SPUTNIK_METADATA");
      break;
    case 0xF:
      v10 = CFSTR("SPUTNIK_C3M");
      break;
    case 0x10:
      v10 = CFSTR("SPUTNIK_DSM");
      break;
    case 0x11:
      v10 = CFSTR("SPUTNIK_DSM_GLOBAL");
      break;
    case 0x12:
      v10 = CFSTR("VECTOR_REALISTIC");
      break;
    case 0x13:
      v10 = CFSTR("VECTOR_LEGACY_REALISTIC");
      break;
    case 0x14:
      v10 = CFSTR("VECTOR_ROADS");
      break;
    case 0x15:
      v10 = CFSTR("RASTER_VEGETATION");
      break;
    case 0x16:
      v10 = CFSTR("VECTOR_TRAFFIC_SKELETON");
      break;
    case 0x17:
      v10 = CFSTR("RASTER_COASTLINE_MASK");
      break;
    case 0x18:
      v10 = CFSTR("RASTER_HILLSHADE");
      break;
    case 0x19:
      v10 = CFSTR("VECTOR_TRAFFIC_WITH_GREEN");
      break;
    case 0x1A:
      v10 = CFSTR("VECTOR_TRAFFIC_STATIC");
      break;
    case 0x1B:
      v10 = CFSTR("RASTER_COASTLINE_DROP_MASK");
      break;
    case 0x1C:
      v10 = CFSTR("VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL");
      break;
    case 0x1D:
      v10 = CFSTR("VECTOR_SPEED_PROFILES");
      break;
    case 0x1E:
      v10 = CFSTR("VECTOR_VENUES");
      break;
    case 0x1F:
      v10 = CFSTR("RASTER_DOWN_SAMPLED");
      break;
    case 0x20:
      v10 = CFSTR("RASTER_COLOR_BALANCED");
      break;
    case 0x21:
      v10 = CFSTR("RASTER_SATELLITE_NIGHT");
      break;
    case 0x22:
      v10 = CFSTR("SPUTNIK_VECTOR_BORDER");
      break;
    case 0x23:
      v10 = CFSTR("RASTER_SATELLITE_DIGITIZE");
      break;
    case 0x24:
      v10 = CFSTR("RASTER_HILLSHADE_PARKS");
      break;
    case 0x25:
      v10 = CFSTR("VECTOR_TRANSIT");
      break;
    case 0x26:
      v10 = CFSTR("RASTER_STANDARD_BASE");
      break;
    case 0x27:
      v10 = CFSTR("RASTER_STANDARD_LABELS");
      break;
    case 0x28:
      v10 = CFSTR("RASTER_HYBRID_ROADS");
      break;
    case 0x29:
      v10 = CFSTR("RASTER_HYBRID_LABELS");
      break;
    case 0x2A:
      v10 = CFSTR("FLYOVER_C3M_MESH");
      break;
    case 0x2B:
      v10 = CFSTR("FLYOVER_C3M_JPEG_TEXTURE");
      break;
    case 0x2C:
      v10 = CFSTR("FLYOVER_C3M_ASTC_TEXTURE");
      break;
    case 0x2D:
      v10 = CFSTR("RASTER_SATELLITE_ASTC");
      break;
    case 0x2E:
      v10 = CFSTR("RASTER_HYBRID_ROADS_AND_LABELS");
      break;
    case 0x2F:
      v10 = CFSTR("VECTOR_TRANSIT_SELECTION");
      break;
    case 0x30:
      v10 = CFSTR("VECTOR_COVERAGE");
      break;
    case 0x34:
      v10 = CFSTR("FLYOVER_METADATA");
      break;
    case 0x35:
      v10 = CFSTR("VECTOR_ROAD_NETWORK");
      break;
    case 0x36:
      v10 = CFSTR("VECTOR_LAND_COVER");
      break;
    case 0x37:
      v10 = CFSTR("VECTOR_DEBUG");
      break;
    case 0x38:
      v10 = CFSTR("VECTOR_STREET_POI");
      break;
    case 0x39:
      v10 = CFSTR("MUNIN_METADATA");
      break;
    case 0x3A:
      v10 = CFSTR("VECTOR_SPR_MERCATOR");
      break;
    case 0x3B:
      v10 = CFSTR("VECTOR_SPR_MODELS");
      break;
    case 0x3C:
      v10 = CFSTR("VECTOR_SPR_MATERIALS");
      break;
    case 0x3D:
      v10 = CFSTR("VECTOR_SPR_METADATA");
      break;
    case 0x3E:
      v10 = CFSTR("VECTOR_TRACKS");
      break;
    case 0x3F:
      v10 = CFSTR("VECTOR_RESERVED_2");
      break;
    case 0x40:
      v10 = CFSTR("VECTOR_STREET_LANDMARKS");
      break;
    case 0x41:
      v10 = CFSTR("COARSE_LOCATION_POLYGONS");
      break;
    case 0x42:
      v10 = CFSTR("VECTOR_SPR_ROADS");
      break;
    case 0x43:
      v10 = CFSTR("VECTOR_SPR_STANDARD");
      break;
    case 0x44:
      v10 = CFSTR("VECTOR_POI_V2");
      break;
    case 0x45:
      v10 = CFSTR("VECTOR_POLYGON_SELECTION");
      break;
    case 0x46:
      v10 = CFSTR("VL_METADATA");
      break;
    case 0x47:
      v10 = CFSTR("VL_DATA");
      break;
    case 0x48:
      v10 = CFSTR("PROACTIVE_APP_CLIP");
      break;
    case 0x49:
      v10 = CFSTR("VECTOR_BUILDINGS_V2");
      break;
    case 0x4A:
      v10 = CFSTR("POI_BUSYNESS");
      break;
    case 0x4B:
      v10 = CFSTR("POI_DP_BUSYNESS");
      break;
    case 0x4C:
      v10 = CFSTR("SMART_INTERFACE_SELECTION");
      break;
    case 0x4D:
      v10 = CFSTR("VECTOR_ASSETS");
      break;
    case 0x4E:
      v10 = CFSTR("SPR_ASSET_METADATA");
      break;
    case 0x4F:
      v10 = CFSTR("VECTOR_SPR_POLAR");
      break;
    case 0x50:
      v10 = CFSTR("SMART_DATA_MODE");
      break;
    case 0x51:
      v10 = CFSTR("CELLULAR_PERFORMANCE_SCORE");
      break;
    case 0x52:
      v10 = CFSTR("VECTOR_SPR_MODELS_OCCLUSION");
      break;
    case 0x53:
      v10 = CFSTR("VECTOR_TOPOGRAPHIC");
      break;
    case 0x54:
      v10 = CFSTR("VECTOR_POI_V2_UPDATE");
      break;
    case 0x55:
      v10 = CFSTR("VECTOR_LIVE_DATA_UPDATES");
      break;
    case 0x56:
      v10 = CFSTR("VECTOR_TRAFFIC_V2");
      break;
    case 0x57:
      v10 = CFSTR("VECTOR_ROAD_SELECTION");
      break;
    case 0x58:
      v10 = CFSTR("VECTOR_REGION_METADATA");
      break;
    case 0x59:
      v10 = CFSTR("RAY_TRACING");
      break;
    case 0x5A:
      v10 = CFSTR("VECTOR_CONTOURS");
      break;
    case 0x5B:
      v10 = CFSTR("RASTER_SATELLITE_POLAR");
      break;
    case 0x5C:
      v10 = CFSTR("VMAP4_ELEVATION");
      break;
    case 0x5D:
      v10 = CFSTR("VMAP4_ELEVATION_POLAR");
      break;
    case 0x5E:
      v10 = CFSTR("CELLULAR_COVERAGE_PLMN");
      break;
    case 0x5F:
      v10 = CFSTR("RASTER_SATELLITE_POLAR_NIGHT");
      break;
    case 0x60:
      v10 = CFSTR("UNUSED_96");
      break;
    case 0x61:
      v10 = CFSTR("UNUSED_97");
      break;
    case 0x62:
      v10 = CFSTR("UNUSED_98");
      break;
    case 0x63:
      v10 = CFSTR("UNUSED_99");
      break;
    case 0x64:
      v10 = CFSTR("UNUSED_100");
      break;
    case 0x65:
      v10 = CFSTR("UNUSED_101");
      break;
    case 0x66:
      v10 = CFSTR("UNUSED_102");
      break;
    case 0x67:
      v10 = CFSTR("UNUSED_103");
      break;
    case 0x68:
      v10 = CFSTR("UNUSED_104");
      break;
    case 0x69:
      v10 = CFSTR("UNUSED_105");
      break;
    case 0x6A:
      v10 = CFSTR("UNUSED_106");
      break;
    case 0x6B:
      v10 = CFSTR("UNUSED_107");
      break;
    case 0x6C:
      v10 = CFSTR("UNUSED_108");
      break;
    case 0x6D:
      v10 = CFSTR("UNUSED_109");
      break;
    case 0x6E:
      v10 = CFSTR("UNUSED_110");
      break;
    case 0x6F:
      v10 = CFSTR("UNUSED_111");
      break;
    case 0x70:
      v10 = CFSTR("UNUSED_112");
      break;
    case 0x71:
      v10 = CFSTR("UNUSED_113");
      break;
    case 0x72:
      v10 = CFSTR("UNUSED_114");
      break;
    case 0x73:
      v10 = CFSTR("UNUSED_115");
      break;
    case 0x74:
      v10 = CFSTR("UNUSED_116");
      break;
    case 0x75:
      v10 = CFSTR("UNUSED_117");
      break;
    case 0x76:
      v10 = CFSTR("UNUSED_118");
      break;
    case 0x77:
      v10 = CFSTR("UNUSED_119");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), *((unsigned int *)v3 + 127));
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
  }
  v11 = objc_retainAutorelease(v10);
  v12 = (const std::string::value_type *)-[__CFString UTF8String](v11, "UTF8String");
  memset(&v19, 0, sizeof(v19));
  v20 = 4;
  if (v12)
  {
    std::string::__assign_external(&v19, v12);
  }
  else
  {
    *((_BYTE *)&v19.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v19, "<null>");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);

  v13 = (void *)v3[65];
  v28[23] = 8;
  strcpy(v28, "Tile Set");
  if (v13)
  {
    objc_msgSend(v13, "description");
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v14 = (const std::string::value_type *)objc_msgSend(v3, "UTF8String");
    memset(&v16, 0, sizeof(v16));
    v17 = 4;
    if (v14)
    {
      std::string::__assign_external(&v16, v14);
    }
    else
    {
      *((_BYTE *)&v16.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v16, "<null>", 6);
    }
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    v17 = 4;
    std::string::__assign_external(&v16, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (v13)
  {

    if ((v28[23] & 0x80000000) != 0)
      operator delete(*(void **)v28);
  }
}

void sub_19FBE47B8(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

uint64_t md::IdentifiedGEOResourceFetcher::tileSetInfo@<X0>(void **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  void *v7;

  v7 = 0;
  result = geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(this[65], &v7);
  if ((result & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = objc_msgSend(this[65], "style");
    result = objc_msgSend(this[65], "version");
    *(_QWORD *)(a2 + 4) = result | (unint64_t)(v6 << 32);
    v5 = 1;
  }
  *(_BYTE *)a2 = v5;
  return result;
}

void sub_19FBE487C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN2md28IdentifiedGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke()
{
  return GEOTileKeyEquals();
}

uint64_t md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::~$_0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2 != *(void **)(a1 + 32))
    free(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA250;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA208;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA208;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E42D35B0;

  v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40))
    free(v2);
  return a1;
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E42D35B0;

  v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40))
    free(v2);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E42D35B0;
  std::__compressed_pair_elem<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19FBE4A78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D35B0;
  return std::__compressed_pair_elem<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40))
    free(v2);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40))
    free(v2);
  operator delete((void *)a1);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  unint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  id v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  os_signpost_id_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  unint64_t v39;
  uint64_t (***v40)();
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t (**v46)();
  uint64_t v47;
  uint64_t (***v48)();
  uint64_t (**v49)();
  uint64_t v50;
  uint64_t (***v51)();
  uint64_t (**v52)();
  __int128 v53;
  uint64_t (***v54)();
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 buf;
  char v59;
  uint64_t (**v60)();
  __int128 __p;
  _BYTE *v62;
  uint64_t v63;
  _BYTE v64[16];
  _QWORD v65[3];
  __int128 v66;
  uint8_t v67[4];
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *(unint64_t **)(a1 + 8);
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v3 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 136)), "UTF8String");
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_INFO, "Loading DevResource resource from: %s", (uint8_t *)&buf, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", *(_QWORD *)(a1 + 136));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = operator new(0x38uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1E42DE110;
    v7 = v5;
    v6[3] = &off_1E42B0670;
    v6[4] = &off_1E42B5310;
    v6[5] = v7;
    *(_QWORD *)&buf = v6 + 3;
    *((_QWORD *)&buf + 1) = v6;
    gdc::ResourceKey::ResourceKey((uint64_t)&v52, 0xFFFF, a1 + 120, 0x10uLL, 0, 2147483646);
    v59 = 1;
    v8 = v64;
    v9 = (char *)v53;
    v60 = v52;
    *(_QWORD *)&__p = v64;
    v62 = v64;
    v63 = v55;
    if ((uint64_t (***)())v53 != v54)
    {
      __p = v53;
      goto LABEL_30;
    }
    v12 = (char *)*((_QWORD *)&v53 + 1);
    v13 = *((_QWORD *)&v53 + 1) - v53;
    *((_QWORD *)&__p + 1) = &v64[*((_QWORD *)&v53 + 1) - v53];
    if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
    {
      if (v13 < 8 || (unint64_t)((unint64_t)&buf - v53 + 64) < 0x20)
        goto LABEL_29;
      if (v13 >= 0x20)
      {
        v14 = v13 & 0xFFFFFFFFFFFFFFE0;
        v15 = (__int128 *)(v53 + 16);
        v16 = v65;
        v17 = v13 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 32;
        }
        while (v17);
        if (v13 == v14)
          goto LABEL_30;
        if ((v13 & 0x18) == 0)
        {
          v9 += v14;
          v8 = &v64[v14];
          do
          {
LABEL_29:
            v24 = *v9++;
            *v8++ = v24;
          }
          while (v9 != v12);
          goto LABEL_30;
        }
      }
      else
      {
        v14 = 0;
      }
      v19 = v13 & 0xFFFFFFFFFFFFFFF8;
      v8 = &v64[v13 & 0xFFFFFFFFFFFFFFF8];
      v20 = v14 - (v13 & 0xFFFFFFFFFFFFFFF8);
      v21 = (uint64_t *)&v9[v14];
      v22 = (_QWORD *)((char *)&buf + v14 + 64);
      do
      {
        v23 = *v21++;
        *v22++ = v23;
        v20 += 8;
      }
      while (v20);
      if (v13 != v19)
      {
        v9 += v19;
        goto LABEL_29;
      }
    }
LABEL_30:
    v65[2] = v56;
    v66 = v57;
    v49 = &off_1E42DA1C0;
    v50 = a1 + 16;
    v51 = &v49;
    v46 = &off_1E42DA178;
    v47 = a1 + 16;
    v48 = &v46;
    v54 = &v52;
    v52 = &off_1E42DA178;
    *(_QWORD *)&v53 = a1 + 16;
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v25 = (id)GEOGetVectorKitResourceLoadingLog_log;
    v26 = v25;
    v27 = v50;
    v28 = *(_QWORD *)(v50 + 80);
    if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
    {
      v29 = *(_QWORD *)(v27 + 88);
      *(_DWORD *)v67 = 134217984;
      v68 = v29;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v26, OS_SIGNPOST_INTERVAL_BEGIN, v28, "CreateResource", "parent_signpost=%llu", v67, 0xCu);
    }

    v31 = v48;
    if (v48 == &v46)
    {
      v32 = 4;
      v31 = &v46;
    }
    else
    {
      if (!v48)
        goto LABEL_40;
      v32 = 5;
    }
    ((void (*)(uint64_t (***)(), uint64_t))(*v31)[v32])(v31, v30);
LABEL_40:
    v33 = v51;
    if (v51 == &v49)
    {
      v34 = 4;
      v33 = &v49;
    }
    else
    {
      if (!v51)
        goto LABEL_45;
      v34 = 5;
    }
    ((void (*)(uint64_t (***)(), uint64_t))(*v33)[v34])(v33, v30);
LABEL_45:
    if (((*(uint64_t (**)(unint64_t *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int128 *, uint64_t (**)(), uint64_t))(*v2 + 128))(v2, *(_QWORD *)(a1 + 112), a1 + 16, 1, 0, 0, 0, &buf, v46, v47) & 1) != 0)
    {
      v35 = 0;
    }
    else
    {
      v36 = (void *)MEMORY[0x1E0CB35C8];
      GEOErrorDomain();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "errorWithDomain:code:userInfo:", v37, -11, 0);
      v35 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v38 = v35;
    v39 = atomic_load(v2 + 13);
    if (v39)
      (*(void (**)(unint64_t, id))(*(_QWORD *)v39 + 24))(v39, v38);

    if (!v54)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      JUMPOUT(0x19FBE5188);
    }
    ((void (*)(uint64_t (***)()))(*v54)[6])(v54);
    v40 = v54;
    if (v54 == &v52)
    {
      v41 = 4;
      v40 = &v52;
    }
    else
    {
      if (!v54)
      {
LABEL_56:
        if (v59)
        {
          if ((_BYTE *)__p != v62)
            free((void *)__p);
          v59 = 0;
        }
        v42 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }

        goto LABEL_66;
      }
      v41 = 5;
    }
    (*v40)[v41]();
    goto LABEL_56;
  }
  v10 = (char *)operator new(0x30uLL);
  v52 = (uint64_t (**)())v10;
  v53 = xmmword_19FFB3BF0;
  strcpy(v10, "Failed to load resource from dev resouces");
  gdc::Error::Error((uint64_t)&buf, 42, "IdentifiedGEOResourceFetcher", (__int128 *)&v52);
  operator delete(v10);
  (*(void (**)(unint64_t *, _QWORD, uint64_t, __int128 *))(*v2 + 112))(v2, *(_QWORD *)(a1 + 112), a1 + 16, &buf);
  v11 = atomic_load(v2 + 13);
  if (v11)
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v11 + 24))(v11, 0);
  if (SHIBYTE(v62) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_66;
  }
  else if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(*((void **)&buf + 1));
LABEL_66:
  v45 = *(NSObject **)(a1 + 144);
  if (v45)
    dispatch_semaphore_signal(v45);

}

void sub_19FBE5220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v21;
  uint64_t v22;

  v21 = a20;
  if (a20 == &a17)
  {
    v22 = 4;
    v21 = &a17;
  }
  else
  {
    if (!a20)
      _Unwind_Resume(a1);
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  _Unwind_Resume(a1);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA178;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA178;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42DA1C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42DA1C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_id_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = 134217984;
    v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }

}

uint64_t std::__compressed_pair_elem<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  __int128 *v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  char v35;
  __int128 v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (char *)(a1 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 32;
  v5 = *(char **)(a2 + 16);
  v6 = *(char **)(a2 + 24);
  v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40)
      v8 = 64;
    else
      v8 = v6 - v5;
    v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v9 = *(char **)(a1 + 16);
    v10 = *(char **)(a1 + 24);
    if (v9 == v10)
      goto LABEL_21;
    v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      v12 = v4;
      goto LABEL_20;
    }
    v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20)
      goto LABEL_20;
    if (v11 >= 0x20)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      v14 = (__int128 *)(v9 + 16);
      v15 = v4 + 16;
      v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13)
        goto LABEL_21;
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)&v9[v13];
    v21 = &v4[v13];
    do
    {
      v22 = *v20++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18)
      goto LABEL_21;
    v9 += v18;
    do
    {
LABEL_20:
      v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 40) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      v26 = (__int128 *)(v5 + 16);
      v27 = v4 + 16;
      v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24)
        goto LABEL_39;
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      v24 = 0;
    }
    v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = (uint64_t *)&v5[v24];
    v33 = &v4[v24];
    do
    {
      v34 = *v32++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30)
      goto LABEL_39;
    v5 += v30;
    do
    {
LABEL_38:
      v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    v4 = *(char **)(a1 + 24);
  }
  *(_QWORD *)(a1 + 24) = &v4[v7];
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v36 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v36;
  *(_QWORD *)(a1 + 128) = *(id *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(id *)(a2 + 136);
  return a1;
}

uint64_t geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C10;

  return a1;
}

void geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C10;

  JUMPOUT(0x1A1AF4E00);
}

void md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(md::IdentifiedGEOResourceFetcher *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E42A5B10;
  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "cancelAllForClient:", *((_QWORD *)this + 56));
  objc_msgSend(v2, "closeForClient:", *((_QWORD *)this + 56));

  *((_QWORD *)this + 64) = &off_1E42B4C10;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 62);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *((_QWORD *)this + 58) = &off_1E42B5090;

  *((_QWORD *)this + 55) = &off_1E42B5490;
  gdc::ResourceFetcher::~ResourceFetcher(this);
}

void sub_19FBE58CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 512) = &off_1E42B4C10;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 488);
  *(_QWORD *)(v1 + 464) = &off_1E42B5090;

  *(_QWORD *)(v1 + 440) = &off_1E42B5490;
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,std::allocator<std::pair<md::TextureManager::TextureKey const,std::shared_ptr<md::SharedTextureCube>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_BYTE **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(_BYTE **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 7);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      if (v2[40])
        goto LABEL_11;
LABEL_12:
      if ((char)v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v2[40])
      goto LABEL_12;
LABEL_11:
    v2[40] = 0;
    goto LABEL_12;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void md::TextureManager::purge(md::TextureManager *this)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t i;
  geo::read_write_lock *v8;
  const char *v9;
  geo::read_write_lock *v10;
  const char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t j;
  geo::read_write_lock *v15;
  const char *v16;
  _BYTE *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BYTE *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v2 = (pthread_rwlock_t *)((char *)this + 64);
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 64));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  if (*((_QWORD *)this + 61))
  {
    v5 = (_BYTE *)*((_QWORD *)this + 60);
    if (!v5)
    {
LABEL_5:
      *((_QWORD *)this + 60) = 0;
      v6 = *((_QWORD *)this + 59);
      if (v6)
      {
        for (i = 0; i != v6; ++i)
          *(_QWORD *)(*((_QWORD *)this + 58) + 8 * i) = 0;
      }
      *((_QWORD *)this + 61) = 0;
      goto LABEL_9;
    }
    while (1)
    {
      v17 = *(_BYTE **)v5;
      v18 = (std::__shared_weak_count *)*((_QWORD *)v5 + 7);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
          break;
      }
      if (v5[40])
        goto LABEL_27;
LABEL_28:
      if ((char)v5[39] < 0)
        operator delete(*((void **)v5 + 2));
      operator delete(v5);
      v5 = v17;
      if (!v17)
        goto LABEL_5;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v5[40])
      goto LABEL_28;
LABEL_27:
    v5[40] = 0;
    goto LABEL_28;
  }
LABEL_9:
  v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  v10 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 264));
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"write lock", v11);
  if (*((_QWORD *)this + 66))
  {
    v12 = (_BYTE *)*((_QWORD *)this + 65);
    if (!v12)
    {
LABEL_15:
      *((_QWORD *)this + 65) = 0;
      v13 = *((_QWORD *)this + 64);
      if (v13)
      {
        for (j = 0; j != v13; ++j)
          *(_QWORD *)(*((_QWORD *)this + 63) + 8 * j) = 0;
      }
      *((_QWORD *)this + 66) = 0;
      goto LABEL_19;
    }
    while (1)
    {
      v21 = *(_BYTE **)v12;
      v22 = (std::__shared_weak_count *)*((_QWORD *)v12 + 7);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
          break;
      }
      if (v12[40])
        goto LABEL_38;
LABEL_39:
      if ((char)v12[39] < 0)
        operator delete(*((void **)v12 + 2));
      operator delete(v12);
      v12 = v21;
      if (!v21)
        goto LABEL_15;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!v12[40])
      goto LABEL_39;
LABEL_38:
    v12[40] = 0;
    goto LABEL_39;
  }
LABEL_19:
  v15 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 264));
  if ((_DWORD)v15)
    geo::read_write_lock::logFailure(v15, (uint64_t)"unlock", v16);
}

void md::TextureManager::texture(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, int a5, float a6)
{
  unsigned int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  NSObject *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  unint64_t v48;
  char v49[8];
  uint64_t v50;
  std::__shared_weak_count *v51;
  char v52[4];
  unsigned int v53;
  uint8_t buf[4];
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v11 = vcvtps_s32_f32(a6);
  if (v11 >= 2)
  {
    do
    {
      v52[0] = 1;
      v53 = v11;
      md::TextureManager::_texture(a1, (uint64_t)a2, a3, a4, a5, (uint64_t)v52);
      v52[0] = 0;
      v12 = (_QWORD *)*a1;
      if (*a1)
      {
        if (v12[2])
        {
          v13 = (std::__shared_weak_count *)v12[1];
          if (!v13 || (v14 = std::__shared_weak_count::lock(v13)) == 0)
          {
            std::__throw_bad_weak_ptr[abi:nn180100]();
            goto LABEL_66;
          }
          v15 = v14;
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (v12[4])
          return;
      }
      v18 = (std::__shared_weak_count *)a1[1];
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      --v11;
    }
    while (v11 > 1);
  }
  v49[0] = 0;
  md::TextureManager::_texture(&v50, (uint64_t)a2, a3, a4, a5, (uint64_t)v49);
  v21 = v50;
  if (!v50)
    goto LABEL_26;
  if (!*(_QWORD *)(v50 + 16))
    goto LABEL_25;
  v22 = *(std::__shared_weak_count **)(v50 + 8);
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      v24 = v23;
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26)
      {
LABEL_25:
        if (*(_QWORD *)(v21 + 32))
          goto LABEL_44;
        goto LABEL_26;
      }
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v24);
      if (*(_QWORD *)(v21 + 32))
        goto LABEL_44;
LABEL_26:
      v27 = *(unsigned __int8 *)(a3 + 23);
      v28 = (char)v27;
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(a3 + 8);
      if (v27 == 5)
      {
        v29 = v28 >= 0 ? a3 : *(_QWORD *)a3;
        v30 = *(_DWORD *)v29;
        v31 = *(unsigned __int8 *)(v29 + 4);
        if (v30 == 1953065079 && v31 == 101)
        {
          v39 = (std::__shared_weak_count *)operator new(0x48uLL);
          v40 = v39;
          v39->__shared_owners_ = 0;
          v41 = (unint64_t *)&v39->__shared_owners_;
          v39->__shared_weak_owners_ = 0;
          v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
          v39[1].__shared_weak_owners_ = 0;
          LODWORD(v39[2].__vftable) = 0;
          v42 = a2[1];
          v39[2].__shared_owners_ = *a2;
          v39[2].__shared_weak_owners_ = v42;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *a1 = v39 + 1;
          a1[1] = v39;
          do
            v45 = __ldxr(v41);
          while (__stxr(v45 + 1, v41));
          p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
          do
            v47 = __ldxr(p_shared_weak_owners);
          while (__stxr(v47 + 1, p_shared_weak_owners));
          v39[1].__vftable = (std::__shared_weak_count_vtbl *)&v39[1];
          v39[1].__shared_owners_ = (uint64_t)v39;
          do
            v48 = __ldaxr(v41);
          while (__stlxr(v48 - 1, v41));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v40);
          }
          goto LABEL_45;
        }
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v33 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a3 + 23) >= 0)
          v34 = a3;
        else
          v34 = *(_QWORD *)a3;
        *(_DWORD *)buf = 136315138;
        v55 = v34;
        _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_ERROR, "Missing texture: '%s'", buf, 0xCu);
      }

LABEL_44:
      v35 = v51;
      *a1 = v21;
      a1[1] = v35;
      v50 = 0;
      v51 = 0;
LABEL_45:
      v36 = v51;
      if (v51)
      {
        v37 = (unint64_t *)&v51->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      return;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_66:
  __break(1u);
}

void sub_19FBE5FB0(_Unwind_Exception *a1, _Unwind_Exception *exception_object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t exception_objecta)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&exception_objecta);
  _Unwind_Resume(a1);
}

void md::TextureManager::_texture(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6)
{
  geo::read_write_lock *v12;
  const char *v13;
  void **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  geo::read_write_lock *v19;
  const char *v20;
  geo::read_write_lock *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  geo::read_write_lock *v30;
  const char *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const std::string::value_type *v51;
  std::string *v52;
  std::string::size_type size;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t (***v59)();
  uint64_t (**v60)();
  unint64_t v61;
  uint64_t (*v62)();
  uint64_t v63;
  uint64_t (*v64)();
  const void **v65;
  std::string *v66;
  uint64_t (*v67)();
  uint64_t v68;
  uint64_t (*v69)();
  const void **v70;
  std::string *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t (*v74)();
  const void **v75;
  std::string *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t (*v79)();
  const void **v80;
  std::string *v81;
  char *v82;
  uint64_t (***v83)();
  std::string *v84;
  float v85;
  float v86;
  _BOOL8 v87;
  unint64_t v88;
  unint64_t v89;
  size_t prime;
  int v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t (*v95)();
  size_t v96;
  size_t v97;
  size_t v98;
  uint64_t (*i)();
  size_t v100;
  uint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  uint64_t (*v105)();
  uint64_t v106;
  size_t v107;
  uint64_t (***v108)();
  unint64_t v109;
  uint64_t (*v110)();
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t (***v119)();
  uint64_t v120;
  uint64_t v121;
  uint64_t (**v122)();
  uint64_t (**v123)();
  uint64_t (**v124)();
  geo::read_write_lock *v125;
  const char *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  const std::string::value_type *v134;
  unsigned int v135;
  std::string::size_type __sz;
  int v137;
  std::string *__s2;
  int v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t (**v143)();
  pthread_rwlock_t *v144;
  __int128 v145;
  _QWORD v146[2];
  uint64_t v147;
  std::__shared_weak_count *v148;
  char v149[8];
  char v150[4];
  int v151;
  std::string v152;
  unsigned __int8 v153;
  unsigned int v154;
  uint64_t (**v155)();
  uint64_t *v156;
  char v157;
  uint64_t (***v158)();
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v152 = *(std::string *)a3;
  v153 = 0;
  if (*(_BYTE *)a6)
  {
    v154 = *(_DWORD *)(a6 + 4);
    v153 = 1;
  }
  v12 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 64));
  if ((_DWORD)v12)
    geo::read_write_lock::logFailure(v12, (uint64_t)"read lock", v13);
  v14 = (void **)(a2 + 464);
  v15 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>((_QWORD *)(a2 + 464), (uint64_t)&v152);
  if (v15)
  {
    v16 = v15[7];
    *a1 = v15[6];
    a1[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 64));
    if ((_DWORD)v19)
      geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
    goto LABEL_243;
  }
  v21 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 64));
  if ((_DWORD)v21)
    geo::read_write_lock::logFailure(v21, (uint64_t)"unlock", v22);
  v150[0] = 0;
  if (*(_BYTE *)a6)
  {
    v151 = *(_DWORD *)(a6 + 4);
    v150[0] = 1;
  }
  v149[0] = 0;
  md::TextureManager::_loadData(a2, (uint64_t *)a3, (uint64_t)v150, (uint64_t)v149);
  v23 = objc_claimAutoreleasedReturnValue();
  v149[0] = 0;
  v150[0] = 0;
  v24 = *a4;
  v25 = (std::__shared_weak_count *)a4[1];
  v146[0] = v24;
  v146[1] = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  textureWithData(&v147, (void *)v23, v146, a5);
  if (v25)
  {
    v28 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v145 = 0uLL;
  v144 = (pthread_rwlock_t *)(a2 + 64);
  v30 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 64));
  if ((_DWORD)v30)
    geo::read_write_lock::logFailure(v30, (uint64_t)"write lock", v31);
  v32 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>((_QWORD *)(a2 + 464), (uint64_t)&v152);
  v33 = v32;
  if (!v32)
  {
    v140 = v23;
    v37 = (std::__shared_weak_count *)operator new(0x48uLL);
    v38 = v37;
    v37->__shared_owners_ = 0;
    v39 = (unint64_t *)&v37->__shared_owners_;
    v37->__shared_weak_owners_ = 0;
    v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB4E0;
    v40 = v37 + 1;
    v37[1].__shared_weak_owners_ = *(_QWORD *)(a2 + 576);
    LODWORD(v37[2].__vftable) = 0;
    v41 = v148;
    v37[2].__shared_owners_ = v147;
    v37[2].__shared_weak_owners_ = (uint64_t)v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    do
      v44 = __ldxr(v39);
    while (__stxr(v44 + 1, v39));
    p_shared_weak_owners = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v46 = __ldxr(p_shared_weak_owners);
    while (__stxr(v46 + 1, p_shared_weak_owners));
    v37[1].__vftable = (std::__shared_weak_count_vtbl *)&v37[1];
    v37[1].__shared_owners_ = (uint64_t)v37;
    do
      v47 = __ldaxr(v39);
    while (__stlxr(v47 - 1, v39));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v38);
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
    *(_QWORD *)&v145 = v40;
    *((_QWORD *)&v145 + 1) = v38;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (const std::string::value_type *)v152.__r_.__value_.__r.__words[0];
    v139 = SHIBYTE(v152.__r_.__value_.__r.__words[2]);
    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v152;
    else
      v52 = (std::string *)v152.__r_.__value_.__r.__words[0];
    __sz = v152.__r_.__value_.__l.__size_;
    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
    else
      size = v152.__r_.__value_.__l.__size_;
    __s2 = v52;
    v54 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v52, size);
    v55 = ((v154 - 0x61C8864680B583ABLL) ^ 1) - 0x61C8864680B583EBLL;
    v137 = v153;
    if (!v153)
      v55 = 0x9E3779B97F4A7C15;
    v56 = ((v54 >> 2) + (v54 << 6) + v55) ^ v54;
    v57 = *(_QWORD *)(a2 + 472);
    if (v57)
    {
      v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
      v58.i16[0] = vaddlv_u8(v58);
      if (v58.u32[0] > 1uLL)
      {
        v23 = ((v54 >> 2) + (v54 << 6) + v55) ^ v54;
        if (v56 >= v57)
          v23 = v56 % v57;
      }
      else
      {
        v23 = (v57 - 1) & v56;
      }
      v59 = (uint64_t (***)())*((_QWORD *)*v14 + v23);
      if (v59)
      {
        v60 = *v59;
        if (*v59)
        {
          v135 = v154;
          if (v58.u32[0] <= 1uLL)
          {
            v134 = v51;
            v61 = v57 - 1;
            if (!v153)
            {
              while (1)
              {
                v67 = v60[1];
                if (v67 != (uint64_t (*)())v56)
                {
                  if (((unint64_t)v67 & v61) != v23)
                    goto LABEL_139;
                  goto LABEL_85;
                }
                v68 = *((unsigned __int8 *)v60 + 39);
                if ((v68 & 0x80u) == 0)
                  v69 = (uint64_t (*)())*((unsigned __int8 *)v60 + 39);
                else
                  v69 = v60[3];
                if (v69 == (uint64_t (*)())size)
                {
                  v70 = (const void **)(v60 + 2);
                  if ((v68 & 0x80) != 0)
                  {
                    if (memcmp(*v70, __s2, (size_t)v60[3]))
                      goto LABEL_85;
                  }
                  else if (*((_BYTE *)v60 + 39))
                  {
                    v71 = __s2;
                    while (*(unsigned __int8 *)v70 == v71->__r_.__value_.__s.__data_[0])
                    {
                      v70 = (const void **)((char *)v70 + 1);
                      v71 = (std::string *)((char *)v71 + 1);
                      if (!--v68)
                        goto LABEL_98;
                    }
                    goto LABEL_85;
                  }
LABEL_98:
                  if (!*((_BYTE *)v60 + 40))
                    goto LABEL_138;
                }
LABEL_85:
                v60 = (uint64_t (**)())*v60;
                if (!v60)
                  goto LABEL_139;
              }
            }
            while (1)
            {
              v62 = v60[1];
              if (v62 == (uint64_t (*)())v56)
              {
                v63 = *((unsigned __int8 *)v60 + 39);
                if ((v63 & 0x80u) == 0)
                  v64 = (uint64_t (*)())*((unsigned __int8 *)v60 + 39);
                else
                  v64 = v60[3];
                if (v64 == (uint64_t (*)())size)
                {
                  v65 = (const void **)(v60 + 2);
                  if ((v63 & 0x80) != 0)
                  {
                    if (!memcmp(*v65, __s2, (size_t)v60[3]))
                    {
LABEL_81:
                      if (*((_BYTE *)v60 + 40) && *((_DWORD *)v60 + 11) == v135)
                        goto LABEL_138;
                    }
                  }
                  else
                  {
                    if (!*((_BYTE *)v60 + 39))
                      goto LABEL_81;
                    v66 = __s2;
                    while (*(unsigned __int8 *)v65 == v66->__r_.__value_.__s.__data_[0])
                    {
                      v65 = (const void **)((char *)v65 + 1);
                      v66 = (std::string *)((char *)v66 + 1);
                      if (!--v63)
                        goto LABEL_81;
                    }
                  }
                }
              }
              else if (((unint64_t)v62 & v61) != v23)
              {
                goto LABEL_139;
              }
              v60 = (uint64_t (**)())*v60;
              if (!v60)
              {
LABEL_139:
                v51 = v134;
                goto LABEL_140;
              }
            }
          }
          if (!v153)
          {
            while (1)
            {
              v77 = (unint64_t)v60[1];
              if (v77 == v56)
              {
                v78 = *((unsigned __int8 *)v60 + 39);
                if ((v78 & 0x80u) == 0)
                  v79 = (uint64_t (*)())*((unsigned __int8 *)v60 + 39);
                else
                  v79 = v60[3];
                if (v79 != (uint64_t (*)())size)
                  goto LABEL_122;
                v80 = (const void **)(v60 + 2);
                if ((v78 & 0x80) != 0)
                {
                  if (memcmp(*v80, __s2, (size_t)v60[3]))
                    goto LABEL_122;
                }
                else if (*((_BYTE *)v60 + 39))
                {
                  v81 = __s2;
                  while (*(unsigned __int8 *)v80 == v81->__r_.__value_.__s.__data_[0])
                  {
                    v80 = (const void **)((char *)v80 + 1);
                    v81 = (std::string *)((char *)v81 + 1);
                    if (!--v78)
                      goto LABEL_137;
                  }
                  goto LABEL_122;
                }
LABEL_137:
                if (!*((_BYTE *)v60 + 40))
                  goto LABEL_138;
              }
              else
              {
                if (v77 >= v57)
                  v77 %= v57;
                if (v77 != v23)
                  goto LABEL_140;
              }
LABEL_122:
              v60 = (uint64_t (**)())*v60;
              if (!v60)
                goto LABEL_140;
            }
          }
          do
          {
            v72 = (unint64_t)v60[1];
            if (v72 == v56)
            {
              v73 = *((unsigned __int8 *)v60 + 39);
              if ((v73 & 0x80u) == 0)
                v74 = (uint64_t (*)())*((unsigned __int8 *)v60 + 39);
              else
                v74 = v60[3];
              if (v74 != (uint64_t (*)())size)
                goto LABEL_103;
              v75 = (const void **)(v60 + 2);
              if ((v73 & 0x80) != 0)
              {
                if (memcmp(*v75, __s2, (size_t)v60[3]))
                  goto LABEL_103;
              }
              else if (*((_BYTE *)v60 + 39))
              {
                v76 = __s2;
                while (*(unsigned __int8 *)v75 == v76->__r_.__value_.__s.__data_[0])
                {
                  v75 = (const void **)((char *)v75 + 1);
                  v76 = (std::string *)((char *)v76 + 1);
                  if (!--v73)
                    goto LABEL_118;
                }
                goto LABEL_103;
              }
LABEL_118:
              if (*((_BYTE *)v60 + 40) && *((_DWORD *)v60 + 11) == v135)
              {
LABEL_138:
                v23 = v140;
                goto LABEL_204;
              }
            }
            else
            {
              if (v72 >= v57)
                v72 %= v57;
              if (v72 != v23)
                break;
            }
LABEL_103:
            v60 = (uint64_t (**)())*v60;
          }
          while (v60);
        }
      }
    }
LABEL_140:
    v82 = (char *)operator new(0x40uLL);
    v83 = (uint64_t (***)())(a2 + 480);
    v155 = (uint64_t (**)())v82;
    v156 = (uint64_t *)(a2 + 480);
    v157 = 0;
    v84 = (std::string *)(v82 + 16);
    *(_QWORD *)v82 = 0;
    *((_QWORD *)v82 + 1) = v56;
    if (v139 < 0)
    {
      std::string::__init_copy_ctor_external(v84, v51, __sz);
      v91 = v153;
      v82[40] = 0;
      if (!v91)
      {
LABEL_143:
        *((_QWORD *)v82 + 6) = 0;
        *((_QWORD *)v82 + 7) = 0;
        v157 = 1;
        v85 = (float)(unint64_t)(*(_QWORD *)(a2 + 488) + 1);
        v86 = *(float *)(a2 + 496);
        if (v57 && (float)(v86 * (float)v57) >= v85)
          goto LABEL_195;
        v87 = 1;
        if (v57 >= 3)
          v87 = (v57 & (v57 - 1)) != 0;
        v88 = v87 | (2 * v57);
        v89 = vcvtps_u32_f32(v85 / v86);
        if (v88 <= v89)
          prime = v89;
        else
          prime = v88;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v57 = *(_QWORD *)(a2 + 472);
        if (prime <= v57)
        {
          if (prime >= v57)
            goto LABEL_182;
          v102 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 488) / *(float *)(a2 + 496));
          if (v57 < 3 || (v103 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v103.i16[0] = vaddlv_u8(v103), v103.u32[0] > 1uLL))
          {
            v102 = std::__next_prime(v102);
          }
          else
          {
            v104 = 1 << -(char)__clz(v102 - 1);
            if (v102 >= 2)
              v102 = v104;
          }
          if (prime <= v102)
            prime = v102;
          if (prime >= v57)
          {
            v57 = *(_QWORD *)(a2 + 472);
LABEL_182:
            if ((v57 & (v57 - 1)) != 0)
            {
              if (v56 >= v57)
                v23 = v56 % v57;
              else
                v23 = v56;
            }
            else
            {
              v23 = (v57 - 1) & v56;
            }
LABEL_195:
            v108 = (uint64_t (***)())*((_QWORD *)*v14 + v23);
            if (v108)
            {
              *v155 = (uint64_t (*)())*v108;
              *v108 = v155;
              v23 = v140;
            }
            else
            {
              *v155 = (uint64_t (*)())*v83;
              *v83 = v155;
              *((_QWORD *)*v14 + v23) = v83;
              v23 = v140;
              if (*v155)
              {
                v109 = *((_QWORD *)*v155 + 1);
                if ((v57 & (v57 - 1)) != 0)
                {
                  if (v109 >= v57)
                    v109 %= v57;
                }
                else
                {
                  v109 &= v57 - 1;
                }
                *((_QWORD *)*v14 + v109) = v155;
              }
            }
            v60 = v155;
            ++*(_QWORD *)(a2 + 488);
LABEL_204:
            v110 = (uint64_t (*)())*((_QWORD *)&v145 + 1);
            if (*((_QWORD *)&v145 + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v113 = (std::__shared_weak_count *)v60[7];
            v60[6] = (uint64_t (*)())v145;
            v60[7] = v110;
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            if (!v147)
              goto LABEL_228;
            (*(void (**)(uint64_t (***__return_ptr)()))(**(_QWORD **)(a2 + 568) + 24))(&v143);
            v155 = &off_1E42CC218;
            v156 = &v147;
            v158 = &v155;
            v141 = 0;
            v142 = 0;
            (*((void (**)(uint64_t (**)(), uint64_t (***)(), uint64_t *))*v143 + 2))(v143, &v155, &v141);
            v116 = v142;
            if (v142)
            {
              v117 = (unint64_t *)&v142->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v119 = v158;
            if (v158 == &v155)
            {
              v120 = 4;
              v119 = &v155;
            }
            else
            {
              if (!v158)
                goto LABEL_223;
              v120 = 5;
            }
            (*v119)[v120]();
LABEL_223:
            if (v143)
            {
              v121 = (*((uint64_t (**)(uint64_t (**)()))*v143 + 3))(v143);
              v122 = v143;
              v143 = 0;
              v155 = v122;
              (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v121 + 48))(v121, &v155);
              v123 = v155;
              v155 = 0;
              if (v123)
                (*((void (**)(uint64_t (**)()))*v123 + 1))(v123);
              v124 = v143;
              v143 = 0;
              if (v124)
                (*((void (**)(uint64_t (**)()))*v124 + 1))(v124);
            }
            goto LABEL_228;
          }
          if (!prime)
          {
            v133 = *v14;
            *v14 = 0;
            if (v133)
              operator delete(v133);
            v57 = 0;
            *(_QWORD *)(a2 + 472) = 0;
            goto LABEL_182;
          }
        }
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v92 = operator new(8 * prime);
        v93 = *v14;
        *v14 = v92;
        if (v93)
          operator delete(v93);
        v94 = 0;
        *(_QWORD *)(a2 + 472) = prime;
        do
          *((_QWORD *)*v14 + v94++) = 0;
        while (prime != v94);
        v95 = (uint64_t (*)())*v83;
        if (!*v83)
        {
LABEL_181:
          v57 = prime;
          goto LABEL_182;
        }
        v96 = *((_QWORD *)v95 + 1);
        v97 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v98 = v96 & v97;
          *((_QWORD *)*v14 + v98) = v83;
          for (i = *(uint64_t (**)())v95; *(_QWORD *)v95; i = *(uint64_t (**)())v95)
          {
            v100 = *((_QWORD *)i + 1) & v97;
            if (v100 == v98)
            {
              v95 = i;
            }
            else if (*((_QWORD *)*v14 + v100))
            {
              *(_QWORD *)v95 = *(_QWORD *)i;
              v101 = 8 * v100;
              *(_QWORD *)i = **(_QWORD **)((char *)*v14 + v101);
              **(_QWORD **)((char *)*v14 + v101) = i;
            }
            else
            {
              *((_QWORD *)*v14 + v100) = v95;
              v95 = i;
              v98 = v100;
            }
          }
          goto LABEL_181;
        }
        if (v96 >= prime)
          v96 %= prime;
        *((_QWORD *)*v14 + v96) = v83;
        v105 = *(uint64_t (**)())v95;
        if (!*(_QWORD *)v95)
          goto LABEL_181;
        while (1)
        {
          v107 = *((_QWORD *)v105 + 1);
          if (v107 >= prime)
            v107 %= prime;
          if (v107 != v96)
          {
            if (!*((_QWORD *)*v14 + v107))
            {
              *((_QWORD *)*v14 + v107) = v95;
              goto LABEL_186;
            }
            *(_QWORD *)v95 = *(_QWORD *)v105;
            v106 = 8 * v107;
            *(_QWORD *)v105 = **(_QWORD **)((char *)*v14 + v106);
            **(_QWORD **)((char *)*v14 + v106) = v105;
            v105 = v95;
          }
          v107 = v96;
LABEL_186:
          v95 = v105;
          v105 = *(uint64_t (**)())v105;
          v96 = v107;
          if (!v105)
            goto LABEL_181;
        }
      }
    }
    else
    {
      *(_OWORD *)&v84->__r_.__value_.__l.__data_ = *(_OWORD *)&v152.__r_.__value_.__l.__data_;
      *((_QWORD *)v82 + 4) = *((_QWORD *)&v152.__r_.__value_.__l + 2);
      v82[40] = 0;
      if (!v137)
        goto LABEL_143;
    }
    *((_DWORD *)v82 + 11) = v154;
    v82[40] = 1;
    goto LABEL_143;
  }
  v34 = v32[7];
  *a1 = v32[6];
  a1[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
LABEL_228:
  v125 = (geo::read_write_lock *)pthread_rwlock_unlock(v144);
  if ((_DWORD)v125)
    geo::read_write_lock::logFailure(v125, (uint64_t)"unlock", v126);
  if (v33)
  {
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
    if (*((_QWORD *)&v145 + 1))
    {
      v128 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
  }
  else
  {
    *(_OWORD *)a1 = v145;
  }
  v130 = v148;
  if (v148)
  {
    v131 = (unint64_t *)&v148->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }

LABEL_243:
  if (v153)
    v153 = 0;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
}

void sub_19FBE6C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, pthread_rwlock_t *a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v37 - 128));
  geo::write_lock_guard::~write_lock_guard(&a20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  if (a37)
    a37 = 0;
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC218;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC218;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6DE0;
  v7[1] = ggl::Texture2D::onImplicitLoadComplete;
  v7[2] = 0;
  v7[3] = v4;
  v23 = v7;
  v15[0] = v5;
  v15[1] = v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = v20;
  v19 = v6;
  v9 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v7);
  v21 = v10;
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(__n128))(*v11 + 8 * v12))(v9);
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v15, v9);
  if (v21 == v20)
  {
    v14 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
    v8 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v14))(v8);
}

void sub_19FBE6E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 56);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      if (*(_BYTE *)(v2 + 40))
        *(_BYTE *)(v2 + 40) = 0;
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC1D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC1D0;
  a2[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<md::SharedTextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::SharedTextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBA20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::SharedTextureCube>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

xmlChar *XmlNode::Attribute(XmlNode *this, const xmlChar *a2)
{
  const xmlNode *v3;
  xmlChar *Prop;
  xmlChar *v5;
  std::__shared_weak_count *v6;
  xmlChar **v7;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xmlChar *v13;
  std::__shared_weak_count *v14;

  v3 = *(const xmlNode **)this;
  if (!v3)
    return 0;
  Prop = xmlGetProp(v3, a2);
  v5 = Prop;
  if (Prop)
  {
    v13 = Prop;
    v6 = (std::__shared_weak_count *)operator new();
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8EC0;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    v14 = v6;
    v7 = (xmlChar **)*((_QWORD *)this + 4);
    if ((unint64_t)v7 >= *((_QWORD *)this + 5))
    {
      v9 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>((char **)this + 3, (uint64_t)&v13);
      v10 = v14;
      *((_QWORD *)this + 4) = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
      *v7 = v5;
      v7[1] = (xmlChar *)v6;
      *((_QWORD *)this + 4) = v7 + 2;
    }
  }
  return v5;
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char>::__shared_ptr_default_delete<unsigned char,unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char>::__shared_ptr_default_delete<unsigned char,unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4E00);
  return result;
}

xmlChar *XmlNode::Attribute(XmlNode *this, const xmlChar *a2, int *a3)
{
  const xmlNode *v4;
  xmlChar *Prop;
  xmlChar *v7;
  std::__shared_weak_count *v8;
  xmlChar **v9;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xmlChar *v15;
  std::__shared_weak_count *v16;

  v4 = *(const xmlNode **)this;
  if (!v4)
    return 0;
  Prop = xmlGetProp(v4, a2);
  v7 = Prop;
  if (Prop)
  {
    *a3 = atoi((const char *)Prop);
    v15 = v7;
    v8 = (std::__shared_weak_count *)operator new();
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8EC0;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v16 = v8;
    v9 = (xmlChar **)*((_QWORD *)this + 4);
    if ((unint64_t)v9 >= *((_QWORD *)this + 5))
    {
      v11 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>((char **)this + 3, (uint64_t)&v15);
      v12 = v16;
      *((_QWORD *)this + 4) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      *v9 = v7;
      v9[1] = (xmlChar *)v8;
      *((_QWORD *)this + 4) = v9 + 2;
    }
  }
  return v7;
}

xmlChar *XmlNode::Attribute(XmlNode *this, const xmlChar *a2, double *a3)
{
  const xmlNode *v4;
  xmlChar *Prop;
  xmlChar *v7;
  std::__shared_weak_count *v8;
  xmlChar **v9;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xmlChar *v15;
  std::__shared_weak_count *v16;

  v4 = *(const xmlNode **)this;
  if (!v4)
    return 0;
  Prop = xmlGetProp(v4, a2);
  v7 = Prop;
  if (Prop)
  {
    *a3 = atof((const char *)Prop);
    v15 = v7;
    v8 = (std::__shared_weak_count *)operator new();
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8EC0;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v16 = v8;
    v9 = (xmlChar **)*((_QWORD *)this + 4);
    if ((unint64_t)v9 >= *((_QWORD *)this + 5))
    {
      v11 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>((char **)this + 3, (uint64_t)&v15);
      v12 = v16;
      *((_QWORD *)this + 4) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
      *v9 = v7;
      v9[1] = (xmlChar *)v8;
      *((_QWORD *)this + 4) = v9 + 2;
    }
  }
  return v7;
}

void std::__shared_ptr_pointer<_xmlDoc *,void (*)(_xmlDoc *),std::allocator<_xmlDoc>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<_xmlDoc *,void (*)(_xmlDoc *),std::allocator<_xmlDoc>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

void md::FrameGraphResourceRegistry::~FrameGraphResourceRegistry(md::FrameGraphResourceRegistry *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v11)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v11 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v11)
      goto LABEL_18;
  }
  do
  {
    v14 = (_QWORD *)*v11;
    v15 = (_QWORD *)v11[8];
    if (v15)
    {
      v16 = (_QWORD *)v11[9];
      v13 = (void *)v11[8];
      if (v16 != v15)
      {
        do
        {
          v18 = (uint64_t *)*--v16;
          v17 = v18;
          *v16 = 0;
          if (v18)
          {
            if (*((_BYTE *)v17 + 40))
              *((_BYTE *)v17 + 40) = 0;
            if (*((_BYTE *)v17 + 16))
              *((_BYTE *)v17 + 16) = 0;
            v19 = *v17;
            *v17 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            MEMORY[0x1A1AF4E00](v17, 0x1020C40BC9DCD72);
          }
        }
        while (v16 != v15);
        v13 = (void *)v11[8];
      }
      v11[9] = v15;
      operator delete(v13);
    }
    operator delete(v11);
    v11 = v14;
  }
  while (v14);
LABEL_18:
  v12 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v12)
    operator delete(v12);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::find<md::ResourceKey>(_QWORD *a1, unsigned __int8 *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v2 = *a2;
  if (*a2)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = (v3 << 6) + (v3 >> 2) + *((unsigned int *)a2 + 4) - 0x61C8864680B583EBLL;
    goto LABEL_5;
  }
  if (a2[24])
  {
    v5 = (((unint64_t)*((unsigned int *)a2 + 7) << 6)
        + ((unint64_t)*((unsigned int *)a2 + 7) >> 2)
        + *((unsigned int *)a2 + 8)
        - 0x61C8864680B583EBLL) ^ *((unsigned int *)a2 + 7);
    v6 = (*((unsigned int *)a2 + 11) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
    v3 = (*((unsigned int *)a2 + 10) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
    v4 = *((unsigned int *)a2 + 9) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583EBLL;
LABEL_5:
    v7 = v4 ^ v3;
    v8 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v8)
      return 0;
    goto LABEL_6;
  }
  v7 = 0;
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
LABEL_6:
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v10 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v11)
  {
    v12 = *v11;
    if (v12)
    {
      v13 = *(_QWORD *)&v8 - 1;
      v14 = *((_QWORD *)a2 + 1);
      v15 = *((_DWORD *)a2 + 4);
      if (a2[24])
      {
        v16 = *((_DWORD *)a2 + 7);
        v17 = *((_DWORD *)a2 + 8);
        v18 = *((_DWORD *)a2 + 9);
        v19 = *((_DWORD *)a2 + 10);
        v20 = *((_DWORD *)a2 + 11);
        if (v9.u32[0] > 1uLL)
        {
          if (!v2)
          {
            while (1)
            {
              v24 = v12[1];
              if (v24 == v7)
              {
                if (*((_BYTE *)v12 + 40)
                  && *((_DWORD *)v12 + 11) == v16
                  && *((_DWORD *)v12 + 12) == v17
                  && *((_DWORD *)v12 + 13) == v18
                  && *((_DWORD *)v12 + 14) == v19
                  && *((_DWORD *)v12 + 15) == v20)
                {
                  return v12;
                }
              }
              else
              {
                if (v24 >= *(_QWORD *)&v8)
                  v24 %= *(_QWORD *)&v8;
                if (v24 != v10)
                  return 0;
              }
              result = 0;
              v12 = (uint64_t *)*v12;
              if (!v12)
                return result;
            }
          }
          while (1)
          {
            v23 = v12[1];
            if (v23 == v7)
            {
              if (*((_BYTE *)v12 + 16))
              {
                if (v12[3] == v14 && *((_DWORD *)v12 + 8) == v15)
                  return v12;
              }
              else if (*((_BYTE *)v12 + 40)
                     && *((_DWORD *)v12 + 11) == v16
                     && *((_DWORD *)v12 + 12) == v17
                     && *((_DWORD *)v12 + 13) == v18
                     && *((_DWORD *)v12 + 14) == v19
                     && *((_DWORD *)v12 + 15) == v20)
              {
                return v12;
              }
            }
            else
            {
              if (v23 >= *(_QWORD *)&v8)
                v23 %= *(_QWORD *)&v8;
              if (v23 != v10)
                return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v21 = v12[1];
          if (v21 == v7)
          {
            if (v2 && *((_BYTE *)v12 + 16))
            {
              if (v12[3] == v14 && *((_DWORD *)v12 + 8) == v15)
                return v12;
            }
            else if (*((_BYTE *)v12 + 40)
                   && *((_DWORD *)v12 + 11) == v16
                   && *((_DWORD *)v12 + 12) == v17
                   && *((_DWORD *)v12 + 13) == v18
                   && *((_DWORD *)v12 + 14) == v19
                   && *((_DWORD *)v12 + 15) == v20)
            {
              return v12;
            }
          }
          else if ((v21 & v13) != v10)
          {
            return 0;
          }
          v12 = (uint64_t *)*v12;
          if (!v12)
            return 0;
        }
      }
      if (v9.u32[0] > 1uLL)
      {
        if (*a2)
        {
          while (1)
          {
            v26 = v12[1];
            if (v26 == v7)
            {
              if (*((_BYTE *)v12 + 16) && v12[3] == v14 && *((_DWORD *)v12 + 8) == v15)
                return v12;
            }
            else
            {
              if (v26 >= *(_QWORD *)&v8)
                v26 %= *(_QWORD *)&v8;
              if (v26 != v10)
                return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
      }
      else if (*a2)
      {
        while (1)
        {
          v25 = v12[1];
          if (v25 == v7)
          {
            if (*((_BYTE *)v12 + 16) && v12[3] == v14 && *((_DWORD *)v12 + 8) == v15)
              return v12;
          }
          else if ((v25 & v13) != v10)
          {
            return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

char *std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::__emplace_unique_key_args<md::ResourceKey,std::piecewise_construct_t const&,std::tuple<md::ResourceKey const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  size_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v55;
  unint64_t v56;

  if (*(_BYTE *)a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = (v6 << 6) + (v6 >> 2) + *(unsigned int *)(a2 + 16) - 0x61C8864680B583EBLL;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      v10 = 0;
      v11 = *((_QWORD *)a1 + 1);
      if (!v11)
        goto LABEL_60;
      goto LABEL_6;
    }
    v8 = (((unint64_t)*(unsigned int *)(a2 + 28) << 6)
        + ((unint64_t)*(unsigned int *)(a2 + 28) >> 2)
        + *(unsigned int *)(a2 + 32)
        - 0x61C8864680B583EBLL) ^ *(unsigned int *)(a2 + 28);
    v9 = (*(unsigned int *)(a2 + 44) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    v6 = (*(unsigned int *)(a2 + 40) + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    v7 = *(unsigned int *)(a2 + 36) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL;
  }
  v10 = v7 ^ v6;
  v11 = *((_QWORD *)a1 + 1);
  if (!v11)
    goto LABEL_60;
LABEL_6:
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v3 = v10;
    if (v10 >= v11)
      v3 = v10 % v11;
  }
  else
  {
    v3 = (v11 - 1) & v10;
  }
  v13 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
  if (v13)
  {
    v14 = *v13;
    if (*v13)
    {
      v15 = v11 - 1;
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 16);
      if (*(_BYTE *)(a2 + 24))
      {
        v18 = *(_DWORD *)(a2 + 28);
        v19 = *(_DWORD *)(a2 + 32);
        v20 = *(_DWORD *)(a2 + 36);
        v21 = *(_DWORD *)(a2 + 40);
        v22 = *(_DWORD *)(a2 + 44);
        if (v12.u32[0] > 1uLL)
        {
          if (!*(_BYTE *)a2)
          {
            while (1)
            {
              v25 = *((_QWORD *)v14 + 1);
              if (v25 == v10)
              {
                if (v14[40]
                  && *((_DWORD *)v14 + 11) == v18
                  && *((_DWORD *)v14 + 12) == v19
                  && *((_DWORD *)v14 + 13) == v20
                  && *((_DWORD *)v14 + 14) == v21
                  && *((_DWORD *)v14 + 15) == v22)
                {
                  return v14;
                }
              }
              else
              {
                if (v25 >= v11)
                  v25 %= v11;
                if (v25 != v3)
                  goto LABEL_60;
              }
              v14 = *(char **)v14;
              if (!v14)
                goto LABEL_60;
            }
          }
          while (1)
          {
            v24 = *((_QWORD *)v14 + 1);
            if (v24 == v10)
            {
              if (v14[16])
              {
                if (*((_QWORD *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17)
                  return v14;
              }
              else if (v14[40]
                     && *((_DWORD *)v14 + 11) == v18
                     && *((_DWORD *)v14 + 12) == v19
                     && *((_DWORD *)v14 + 13) == v20
                     && *((_DWORD *)v14 + 14) == v21
                     && *((_DWORD *)v14 + 15) == v22)
              {
                return v14;
              }
            }
            else
            {
              if (v24 >= v11)
                v24 %= v11;
              if (v24 != v3)
                goto LABEL_60;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_60;
          }
        }
        while (1)
        {
          v23 = *((_QWORD *)v14 + 1);
          if (v23 == v10)
          {
            if (*(_BYTE *)a2 && v14[16])
            {
              if (*((_QWORD *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17)
                return v14;
            }
            else if (v14[40]
                   && *((_DWORD *)v14 + 11) == v18
                   && *((_DWORD *)v14 + 12) == v19
                   && *((_DWORD *)v14 + 13) == v20
                   && *((_DWORD *)v14 + 14) == v21
                   && *((_DWORD *)v14 + 15) == v22)
            {
              return v14;
            }
          }
          else if ((v23 & v15) != v3)
          {
            goto LABEL_60;
          }
          v14 = *(char **)v14;
          if (!v14)
            goto LABEL_60;
        }
      }
      if (v12.u32[0] > 1uLL)
      {
        if (*(_BYTE *)a2)
        {
          do
          {
            v56 = *((_QWORD *)v14 + 1);
            if (v56 == v10)
            {
              if (v14[16] && *((_QWORD *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17)
                return v14;
            }
            else
            {
              if (v56 >= v11)
                v56 %= v11;
              if (v56 != v3)
                break;
            }
            v14 = *(char **)v14;
          }
          while (v14);
        }
      }
      else if (*(_BYTE *)a2)
      {
        do
        {
          v47 = *((_QWORD *)v14 + 1);
          if (v47 == v10)
          {
            if (v14[16] && *((_QWORD *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17)
              return v14;
          }
          else if ((v47 & v15) != v3)
          {
            break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_60:
  v26 = (char *)operator new(0x58uLL);
  v14 = v26;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v10;
  v26[16] = 0;
  if (*(_BYTE *)a3)
  {
    *(_OWORD *)(v26 + 24) = *(_OWORD *)(a3 + 8);
    v26[16] = 1;
  }
  v26[40] = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_OWORD *)(v26 + 44) = *(_OWORD *)(a3 + 28);
    *((_DWORD *)v26 + 15) = *(_DWORD *)(a3 + 44);
    v26[40] = 1;
  }
  *((_QWORD *)v26 + 8) = 0;
  *((_QWORD *)v26 + 9) = 0;
  *((_QWORD *)v26 + 10) = 0;
  v27 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v28 = a1[8];
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_111;
      v44 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v11 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v11)
      {
        v11 = *((_QWORD *)a1 + 1);
LABEL_111:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_124;
      }
      if (!prime)
      {
        v55 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v55)
          operator delete(v55);
        v11 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_111;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v33 = operator new(8 * prime);
    v34 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v33;
    if (v34)
      operator delete(v34);
    v35 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35++) = 0;
    while (prime != v35);
    v37 = (uint64_t *)(a1 + 4);
    v36 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v36)
    {
LABEL_110:
      v11 = prime;
      goto LABEL_111;
    }
    v38 = v36[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v37;
      for (i = (_QWORD *)*v36; *v36; i = (_QWORD *)*v36)
      {
        v42 = i[1] & v39;
        if (v42 == v40)
        {
          v36 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v36 = *i;
          v43 = 8 * v42;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v36;
          v36 = i;
          v40 = v42;
        }
      }
      goto LABEL_110;
    }
    if (v38 >= prime)
      v38 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v37;
    v48 = (_QWORD *)*v36;
    if (!*v36)
      goto LABEL_110;
    while (1)
    {
      v50 = v48[1];
      if (v50 >= prime)
        v50 %= prime;
      if (v50 != v38)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v50))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v50) = v36;
          goto LABEL_115;
        }
        *v36 = *v48;
        v49 = 8 * v50;
        *v48 = **(_QWORD **)(*(_QWORD *)a1 + v49);
        **(_QWORD **)(*(_QWORD *)a1 + v49) = v48;
        v48 = v36;
      }
      v50 = v38;
LABEL_115:
      v36 = v48;
      v48 = (_QWORD *)*v48;
      v38 = v50;
      if (!v48)
        goto LABEL_110;
    }
  }
LABEL_124:
  v51 = *(_QWORD **)a1;
  v52 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v52)
  {
    *(_QWORD *)v14 = *v52;
LABEL_132:
    *v52 = v14;
    goto LABEL_133;
  }
  *(_QWORD *)v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v51[v3] = a1 + 4;
  if (*(_QWORD *)v14)
  {
    v53 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v53 >= v11)
        v53 %= v11;
    }
    else
    {
      v53 &= v11 - 1;
    }
    v52 = (_QWORD *)(*(_QWORD *)a1 + 8 * v53);
    goto LABEL_132;
  }
LABEL_133:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

char *std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>::__emplace_back_slow_path<md::FrameGraphResourceRegistry::ResourceHolder*&>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    abort();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = a2;
  v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v2 - v3 - 8;
    if (v15 <= 0x77 || &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2)
      goto LABEL_37;
    v16 = (v15 >> 3) + 1;
    v17 = &v11[8 * v5 - 16];
    v18 = v2 - 32;
    v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *(_OWORD *)v18;
      v20 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v17 - 1) = v21;
      *(_OWORD *)v17 = v20;
      v17 -= 32;
      v19 -= 4;
    }
    while (v19);
    v12 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v2 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v22 = *((_QWORD *)v2 - 1);
        v2 -= 8;
        *(_QWORD *)v2 = 0;
        *((_QWORD *)v12 - 1) = v22;
        v12 -= 8;
      }
      while (v2 != v3);
    }
    v2 = *a1;
    v23 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v23 != v2)
    {
      v25 = (uint64_t *)*((_QWORD *)v23 - 1);
      v23 -= 8;
      v24 = v25;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        if (*((_BYTE *)v24 + 40))
          *((_BYTE *)v24 + 40) = 0;
        if (*((_BYTE *)v24 + 16))
          *((_BYTE *)v24 + 16) = 0;
        v26 = *v24;
        *v24 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        MEMORY[0x1A1AF4E00](v24, 0x1020C40BC9DCD72);
      }
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *md::FrameGraphPhysicalResourceOwner<ggl::DeviceData>::~FrameGraphPhysicalResourceOwner(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42A89D8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void md::FrameGraphPhysicalResourceOwner<ggl::DeviceData>::~FrameGraphPhysicalResourceOwner(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42A89D8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E47E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E47E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::FrameGraphPhysicalResourceOwner<ggl::Texture>::~FrameGraphPhysicalResourceOwner(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42A89F8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void ggl::ARMesh::ARMeshPipelineState::~ARMeshPipelineState(ggl::ARMesh::ARMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ARMesh::ARMeshPipelineSetup::~ARMeshPipelineSetup(ggl::ARMesh::ARMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ARMesh::ARMeshPipelineSetup::constantDataIsEnabled(ggl::ARMesh::ARMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::ARMesh::ARMeshPipelineSetup::textureIsEnabled(ggl::ARMesh::ARMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::ARMesh::ARDepthMeshPipelineState::~ARDepthMeshPipelineState(ggl::ARMesh::ARDepthMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ARMesh::ARDepthMeshPipelineSetup::~ARDepthMeshPipelineSetup(ggl::ARMesh::ARDepthMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ARMesh::ARDepthMeshPipelineSetup::constantDataIsEnabled(ggl::ARMesh::ARDepthMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::ARMesh::ARDepthMeshPipelineSetup::textureIsEnabled(ggl::ARMesh::ARDepthMeshPipelineSetup *this)
{
  return 0;
}

void ggl::ARMesh::ARShadowPipelineState::~ARShadowPipelineState(ggl::ARMesh::ARShadowPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ARMesh::ARShadowPipelineSetup::~ARShadowPipelineSetup(ggl::ARMesh::ARShadowPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::ARMesh::ARShadowPipelineSetup::constantDataIsEnabled(ggl::ARMesh::ARShadowPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

uint64_t ggl::ARMesh::ARShadowPipelineSetup::textureIsEnabled(ggl::ARMesh::ARShadowPipelineSetup *this)
{
  return 0;
}

void md::MuninPassList::~MuninPassList(md::MuninPassList *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  ggl::RenderQueue *v7;
  md::FrameGraph *v8;

  *(_QWORD *)this = &off_1E428E0E8;
  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
  *(_QWORD *)this = off_1E42AF5D0;
  v7 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    ggl::RenderQueue::~RenderQueue(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    md::FrameGraph::~FrameGraph(v8);
    MEMORY[0x1A1AF4E00]();
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  ggl::RenderQueue *v7;
  md::FrameGraph *v8;

  *(_QWORD *)this = &off_1E428E0E8;
  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 6) = v6;
    operator delete(v6);
  }
  *(_QWORD *)this = off_1E42AF5D0;
  v7 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    ggl::RenderQueue::~RenderQueue(v7);
    MEMORY[0x1A1AF4E00]();
  }
  v8 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    md::FrameGraph::~FrameGraph(v8);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::MuninPassList::buildFrameGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  _QWORD *v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  float v75;
  float v76;
  float v77;
  unint64_t *v78;
  unint64_t *v79;
  float v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  int8x8_t v84;
  uint64_t v85;
  uint8x8_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  double *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  double v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t Resource;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t *v125;
  _QWORD *v126;
  ggl::RenderQueue *v127;
  _QWORD *v128;
  _OWORD *v129;
  ggl::CommandBuffer *v130;
  double v131;
  uint64_t v132;
  ggl::CommandBuffer *v133;
  double v134;
  uint64_t v135;
  ggl::CommandBuffer *v136;
  double v137;
  uint64_t v138;
  ggl::CommandBuffer *v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *result;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v152;
  unint64_t v153;
  BOOL v154;
  _BYTE *v155;
  int v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  int v163;
  char v164;
  _BYTE v165[12];
  uint64_t v166;
  uint64_t v167;
  char v168;
  char v169;
  uint64_t v170;
  int v171;
  char v172;
  _QWORD v173[3];
  _QWORD *v174;
  _QWORD v175[3];
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  _QWORD v179[3];
  _QWORD *v180;
  _QWORD v181[3];
  _QWORD *v182;
  _BYTE v183[12];
  uint64_t v184;
  _BYTE v185[12];
  char v186;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v8 = 0xC83717EF586624DCLL;
  v9 = *(_QWORD **)(a2 + 8);
  v10 = (int8x8_t)v9[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_25;
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0xC83717EF586624DCLL;
    if (*(_QWORD *)&v10 <= 0xC83717EF586624DCLL)
      v12 = 0xC83717EF586624DCLL % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & 0xC83717EF586624DCLL;
  }
  v13 = *(_QWORD **)(*v9 + 8 * v12);
  if (!v13)
    goto LABEL_24;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_24;
  if (v11.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == 0xC83717EF586624DCLL)
      {
        if (v14[2] == 0xC83717EF586624DCLL)
          goto LABEL_22;
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_24;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v16 == 0xC83717EF586624DCLL)
      break;
    if (v16 >= *(_QWORD *)&v10)
      v16 %= *(_QWORD *)&v10;
    if (v16 != v12)
      goto LABEL_24;
LABEL_11:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_24;
  }
  if (v14[2] != 0xC83717EF586624DCLL)
    goto LABEL_11;
LABEL_22:
  v18 = (int8x8_t *)v14[5];
  if (*(_QWORD *)&v18[1] != 0xC83717EF586624DCLL)
  {
LABEL_24:
    v10 = 0;
    goto LABEL_25;
  }
  v10 = v18[4];
LABEL_25:
  v150 = (_QWORD *)v10;
  v19 = *(_QWORD *)(*(_QWORD *)&v10 + 200) - *(_QWORD *)(*(_QWORD *)&v10 + 192);
  *(_QWORD *)(a1 + 32) = v19 >> 3;
  v154 = (unint64_t)v19 > 8;
  v20 = (int8x8_t)v9[1];
  if (!*(_QWORD *)&v20)
    goto LABEL_48;
  v21 = (uint8x8_t)vcnt_s8(v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    if (*(_QWORD *)&v20 <= 0xC83717EF586624DCLL)
      v8 = 0xC83717EF586624DCLL % *(_QWORD *)&v20;
  }
  else
  {
    v8 = (*(_QWORD *)&v20 - 1) & 0xC83717EF586624DCLL;
  }
  v22 = *(_QWORD **)(*v9 + 8 * v8);
  if (!v22)
    goto LABEL_48;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_48;
  if (v21.u32[0] < 2uLL)
  {
    v24 = *(_QWORD *)&v20 - 1;
    while (1)
    {
      v26 = v23[1];
      if (v26 == 0xC83717EF586624DCLL)
      {
        if (v23[2] == 0xC83717EF586624DCLL)
          goto LABEL_46;
      }
      else if ((v26 & v24) != v8)
      {
        goto LABEL_48;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v25 = v23[1];
    if (v25 != 0xC83717EF586624DCLL)
    {
      if (v25 >= *(_QWORD *)&v20)
        v25 %= *(_QWORD *)&v20;
      if (v25 != v8)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v23[2] != 0xC83717EF586624DCLL)
    {
LABEL_35:
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v27 = v23[5];
  if (*(_QWORD *)(v27 + 8) == 0xC83717EF586624DCLL)
  {
    v28 = *(_QWORD **)(v27 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v28 = 0;
LABEL_49:
  v30 = v28[24];
  v29 = v28[25];
  v31 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 48) = v31;
  v32 = v29 - v30;
  v33 = v32 >> 3;
  *(_QWORD *)(a1 + 32) = v32 >> 3;
  v152 = (_QWORD *)(a1 + 40);
  if (v32)
  {
    std::vector<altitude::TextureMap *>::__append(a1 + 40, v33);
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  if (v33)
  {
    std::vector<altitude::TextureMap *>::__append(a1 + 64, v33);
    v34 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
    if (v34)
      std::vector<altitude::TextureMap *>::__append(a1 + 88, 3 * v34);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
  }
  v35 = v28[4];
  if (v35)
  {
    *(_BYTE *)(a1 + 168) = *(_QWORD *)(a1 + 160) != v35;
    *(_WORD *)v183 = 1;
    *(_QWORD *)&v183[4] = 0x3F80000000000000;
    v184 = 0x3F80000000000000;
    v185[0] = 0;
    v185[4] = 0;
    v185[8] = 0;
    v186 = 0;
    v188 = 1;
    v187 = 0x100000000;
    v189 = 0;
    *(_WORD *)v165 = 1;
    *(_QWORD *)&v165[4] = 0x3F80000000000000;
    v166 = 0x3F80000000000000;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 0x100000001;
    v171 = 1;
    v172 = 1;
    *(_QWORD *)(a1 + 128) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v183, "CrossFade ColorBuffer", 0xCF8B314100000015, 0);
    *(_QWORD *)(a1 + 136) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v165, "CrossFade DepthBuffer", 0x5919EB9300000015uLL, 0);
    if (*(_QWORD *)(a1 + 144))
      goto LABEL_186;
    v36 = operator new();
    if (*((_BYTE *)a4 + 72))
      v37 = (_DWORD *)a4 + 19;
    else
      v37 = &md::FrameGraphRenderTarget::size(void)const::fallback;
    v38 = *a4;
    if (*a4)
    {
      v39 = *(unsigned __int8 *)(v38 + 112);
      v40 = *(_DWORD *)(v38 + 108);
      if (v39)
        v41 = v40;
      else
        v41 = 0;
    }
    else
    {
      v41 = 0;
    }
    v44 = v37[1];
    v45 = v37[3];
    v46 = (std::__shared_weak_count *)operator new(0x58uLL);
    v46->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    v46->__shared_weak_owners_ = 0;
    v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v46[1].__shared_weak_owners_ = 0;
    v46[2].__vftable = 0;
    v46[1].__shared_owners_ = 0;
    v46[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    LODWORD(v46[2].__shared_owners_) = 0;
    *(_QWORD *)&v48 = 0x100000001;
    *((_QWORD *)&v48 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v46[2].__shared_owners_ + 4) = v48;
    *(std::__shared_weak_count_vtbl **)((char *)&v46[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v46[3].__shared_owners_) = 0;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    *(_DWORD *)(v36 + 32) = 0;
    *(_QWORD *)(v36 + 56) = 0x300000001;
    *(_DWORD *)(v36 + 64) = 1;
    *(_DWORD *)(v36 + 68) = v41;
    *(_DWORD *)(v36 + 72) = 1;
    *(_QWORD *)(v36 + 84) = 0;
    *(_QWORD *)(v36 + 76) = 0;
    *(_QWORD *)(v36 + 100) = 0x100000000;
    *(_QWORD *)(v36 + 92) = 0;
    *(_QWORD *)v36 = &off_1E42BE438;
    *(_QWORD *)(v36 + 8) = 0;
    *(_QWORD *)(v36 + 40) = &unk_1E42BE458;
    *(_QWORD *)(v36 + 48) = "";
    *(_QWORD *)(v36 + 112) = 0;
    *(_QWORD *)(v36 + 120) = 0;
    *(_WORD *)(v36 + 128) = 0;
    *(_BYTE *)(v36 + 130) = 1;
    *(_QWORD *)(v36 + 136) = v46 + 1;
    *(_QWORD *)(v36 + 144) = v46;
    do
      v49 = __ldxr(p_shared_owners);
    while (__stxr(v49 + 1, p_shared_owners));
    *(_DWORD *)(v36 + 80) = v44;
    *(_DWORD *)(v36 + 84) = v45;
    v50 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v36;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (v51)
    {
LABEL_186:
      if (!*(_QWORD *)(a1 + 152))
      {
LABEL_76:
        v52 = operator new();
        v53 = a4[8];
        if (v53)
        {
          v54 = *(unsigned __int8 *)(v53 + 112);
          LODWORD(v53) = *(_DWORD *)(v53 + 108);
          if (!v54)
            LODWORD(v53) = 0;
        }
        if (*((_BYTE *)a4 + 72))
          v55 = (_DWORD *)a4 + 19;
        else
          v55 = &md::FrameGraphRenderTarget::size(void)const::fallback;
        v56 = v55[1];
        v57 = v55[3];
        *(_QWORD *)(v52 + 16) = 0;
        *(_QWORD *)(v52 + 24) = 0;
        *(_DWORD *)(v52 + 32) = 0;
        *(_QWORD *)(v52 + 56) = 0x200000000;
        *(_DWORD *)(v52 + 64) = 2;
        *(_DWORD *)(v52 + 68) = v53;
        *(_QWORD *)(v52 + 72) = 0x100000001;
        *(_QWORD *)(v52 + 88) = 0;
        *(_QWORD *)(v52 + 96) = 0;
        *(_QWORD *)v52 = &off_1E42B6330;
        *(_QWORD *)(v52 + 8) = 0;
        *(_QWORD *)(v52 + 40) = &unk_1E42B6350;
        *(_QWORD *)(v52 + 48) = "";
        *(_DWORD *)(v52 + 80) = v56;
        *(_DWORD *)(v52 + 84) = v57;
        v58 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v52;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if (!*(_QWORD *)(a1 + 152))
        goto LABEL_76;
    }
    v60 = *(_QWORD *)(a1 + 144);
    v155 = *(_BYTE **)(a1 + 128);
    v59 = (unint64_t)v155;
    v61 = operator new();
    *(_BYTE *)(v61 + 8) = *v155;
    *(_QWORD *)(v61 + 16) = v60;
    *(_QWORD *)v61 = &off_1E42A8F38;
    v62 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), v59, &v155);
    v63 = v62[3];
    v62[3] = v61;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    v65 = *(_QWORD *)(a1 + 152);
    v155 = *(_BYTE **)(a1 + 136);
    v64 = v155;
    v66 = operator new();
    *(_BYTE *)(v66 + 8) = *v64;
    *(_QWORD *)(v66 + 16) = v65;
    *(_QWORD *)v66 = &off_1E42A8F38;
    v67 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v64, &v155);
    v43 = v67[3];
    v67[3] = v66;
    if (v43)
LABEL_88:
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  else
  {
    *(_BYTE *)(a1 + 168) = 0;
    v42 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = 0;
    if (v43)
      goto LABEL_88;
  }
  *(_QWORD *)(a1 + 160) = v28[4];
  if (*(_QWORD *)(a1 + 32) >= 2uLL)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)a2, "sizeInPixels");
    v70 = v69;
    objc_msgSend(*(id *)a2, "sizeInPixels");
    v72 = v71;
    objc_msgSend(*(id *)a2, "contentScale");
    v74 = v73;
    objc_msgSend(v68, "muninTransitionMinResolution");
    v76 = v75;
    objc_msgSend(v68, "muninTransitionMaxResolution");
    v78 = (unint64_t *)v28[24];
    v79 = (unint64_t *)v28[25];
    if (v78 == v79)
    {
      v88 = 16;
      v87 = 16;
    }
    else
    {
      v80 = fmin(v74, 2.0);
      v81 = (float)v70;
      v82 = vcvtps_u32_f32((float)(v76 * v81) / v80);
      v83 = vcvtps_u32_f32((float)(v77 * v81) / v80);
      v85 = v28[19];
      v84 = (int8x8_t)v28[20];
      v86 = (uint8x8_t)vcnt_s8(v84);
      v86.i16[0] = vaddlv_u8(v86);
      v87 = 16;
      v88 = 16;
      do
      {
        v94 = *v78;
        if (v86.u32[0] >= 2uLL)
        {
          v96 = *v78;
          if (v94 >= *(_QWORD *)&v84)
            v96 = v94 % *(_QWORD *)&v84;
          v95 = *(double **)(v85 + 8 * v96);
          do
          {
            do
              v95 = *(double **)v95;
            while (v94 != *((_QWORD *)v95 + 1));
          }
          while (*((_QWORD *)v95 + 2) != v94);
        }
        else
        {
          v95 = *(double **)(v85 + 8 * ((*(_QWORD *)&v84 - 1) & v94));
          do
          {
            do
              v95 = *(double **)v95;
            while (v94 != *((_QWORD *)v95 + 1));
          }
          while (*((_QWORD *)v95 + 2) != v94);
        }
        v97 = *((_QWORD *)v95 + 3);
        v98 = *((_QWORD *)v95 + 4);
        if (v97 == v98)
        {
          v89 = 0;
        }
        else
        {
          v89 = 0;
          v99 = v95[17];
          do
          {
            v100 = *(_QWORD *)(*(_QWORD *)v97 + 176);
            v101 = 0.0;
            if (*(_QWORD *)(*(_QWORD *)v97 + 184) != v100)
            {
              v102 = *(float *)(*(_QWORD *)v97 + 468);
              if (v102 < 3.14159265)
                v101 = (float)((float)*(unsigned int *)(*(_QWORD *)(v100 + 16) + 80) / v102);
            }
            if (v89 <= (v99 * v101))
              v89 = (v99 * v101);
            v97 += 16;
          }
          while (v97 != v98);
        }
        v90 = (float)((float)v89 * 1.25);
        if (v90 <= v82)
          v90 = v82;
        if (v90 >= v83)
          v90 = v83;
        v91 = vcvtas_u32_f32((float)v90 * (float)((float)v72 * (float)(1.0 / v81)));
        v92 = (v90 + 3) & 0xFFFFFFFC;
        v93 = (v91 + 3) & 0xFFFFFFFC;
        if (v87 <= v92)
          v87 = v92;
        if (v88 <= v93)
          v88 = v93;
        ++v78;
      }
      while (v78 != v79);
    }
    v103 = *(unsigned int *)(a1 + 176);
    if ((_DWORD)v103)
      v104 = v103 | 0x100000000;
    else
      v104 = 0;
    *(_WORD *)v183 = 0;
    *(_DWORD *)&v183[4] = v87;
    *(_DWORD *)&v183[8] = 0;
    v184 = v88;
    *(_QWORD *)v185 = v104;
    v185[8] = 0;
    v186 = 0;
    v187 = 0x100000000;
    v188 = 1;
    v189 = 0;
    *(_WORD *)v165 = 0;
    *(_DWORD *)&v165[4] = v87 >> 2;
    *(_DWORD *)&v165[8] = 0;
    v166 = v88 >> 2;
    v167 = v104;
    v168 = 0;
    v169 = 0;
    v170 = 0x100000000;
    v171 = 1;
    v172 = 0;
    v105 = *(unsigned int *)(a1 + 204);
    if ((_DWORD)v105)
      v106 = v105 | 0x100000000;
    else
      v106 = 0;
    LOWORD(v155) = 0;
    HIDWORD(v155) = v87;
    v156 = 0;
    v157 = v88;
    v158 = 0;
    v159 = v106;
    v160 = 0;
    v161 = 0;
    v162 = 0x100000000;
    v163 = 1;
    v164 = 1;
    *(_QWORD *)(a1 + 112) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v183, "Munin Composite Color", 0xE9FE168700000015, 0);
    *(_QWORD *)(a1 + 120) = md::FrameGraphBuilder::createResource(a5, (uint64_t)&v155, "Munin Composite Depth", 0x750B420700000015uLL, 0);
    if (*(_QWORD *)(a1 + 32))
    {
      v107 = 0;
      v108 = 0;
      do
      {
        Resource = md::FrameGraphBuilder::createResource(a5, (uint64_t)v183, "Munin rig color", 0x7BC3714D0000000FuLL, v108);
        v110 = md::FrameGraphBuilder::createResource(a5, (uint64_t)&v155, "Munin rig depth", 0xE73625CD0000000FLL, v108);
        v111 = 8 * v108;
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + v111) = Resource;
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + v111) = v110;
        v112 = 8 * v107;
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v107) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v165, "Blur buffer", 0x351C8D860000000BuLL, v107);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + v112 + 8) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v165, "Blur buffer", 0x351C8D860000000BuLL, v107 + 1);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + v112 + 16) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v165, "Blur buffer", 0x351C8D860000000BuLL, v107 + 2);
        ++v108;
        v107 += 3;
      }
      while (v108 < *(_QWORD *)(a1 + 32));
    }

  }
  if (v150[25] - v150[24] >= 9uLL)
  {
    *(_QWORD *)v183 = 0;
    if (*(_QWORD *)(a1 + 32))
    {
      LOBYTE(v113) = 0;
      while (1)
      {
        v181[0] = &off_1E42CB258;
        v181[1] = v183;
        v181[2] = a1;
        v182 = v181;
        md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>((unsigned __int8 ***)a5, (16 * v113) | 1, v181);
        v114 = v182;
        if (v182 == v181)
          break;
        if (v182)
        {
          v115 = 5;
LABEL_139:
          (*(void (**)(void))(*v114 + 8 * v115))();
        }
        v116 = 0;
        *(_QWORD *)v165 = 0;
        *(_QWORD *)v165 = *(_QWORD *)(*v152 + 8 * *(_QWORD *)v183);
        v155 = 0;
        do
        {
          v119 = v183[0];
          v153 = 3 * *(_QWORD *)v183 + v116;
          v120 = operator new(0x30uLL);
          *v120 = &off_1E42CB2A0;
          v120[1] = v183;
          v120[2] = &v155;
          v120[3] = v165;
          v120[4] = a1;
          v120[5] = &v153;
          v180 = v120;
          md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>((unsigned __int8 ***)a5, (16 * (3 * v119 + v116)) | 2, v179);
          v117 = v180;
          if (v180 == v179)
          {
            v117 = v179;
            v118 = 4;
LABEL_142:
            (*(void (**)(void))(*v117 + 8 * v118))();
            goto LABEL_143;
          }
          if (v180)
          {
            v118 = 5;
            goto LABEL_142;
          }
LABEL_143:
          *(_QWORD *)v165 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v153);
          v116 = (unint64_t)(v155 + 1);
          v155 = (_BYTE *)v116;
        }
        while (v116 < 3);
        v113 = *(_QWORD *)v183 + 1;
        *(_QWORD *)v183 = v113;
        if (v113 >= *(_QWORD *)(a1 + 32))
          goto LABEL_147;
      }
      v114 = v181;
      v115 = 4;
      goto LABEL_139;
    }
LABEL_147:
    v177[0] = &off_1E42CB2E8;
    v177[1] = a1;
    v178 = v177;
    md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>((unsigned __int8 ***)a5, 3, v177);
    v121 = v178;
    if (v178 == v177)
    {
      v122 = 4;
      v121 = v177;
    }
    else
    {
      if (!v178)
        goto LABEL_152;
      v122 = 5;
    }
    (*(void (**)(void))(*v121 + 8 * v122))();
  }
LABEL_152:
  v123 = operator new(0x20uLL);
  *v123 = &off_1E42CB330;
  v123[1] = &v154;
  v123[2] = a1;
  v123[3] = a4;
  v176 = v123;
  v124 = (_QWORD *)operator new();
  *v124 = &off_1E4290AA0;
  v125 = v124 + 1;
  v126 = operator new(0x150uLL);
  v126[1] = 0;
  v126[2] = 0;
  *v126 = &off_1E42DE9D0;
  v127 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v126 + 3), 4);
  v124[3] = 0;
  v128 = v124 + 3;
  v124[1] = v127;
  v124[2] = v126;
  v124[4] = 0;
  v124[5] = 0;
  v129 = operator new(0x20uLL);
  v124[4] = v129 + 2;
  v124[5] = v129 + 2;
  *v129 = 0u;
  v129[1] = 0u;
  v124[3] = v129;
  *v124 = &off_1E428C4E0;
  v130 = (ggl::CommandBuffer *)operator new();
  v131 = ggl::CommandBuffer::CommandBuffer(v130, 0, "MuninViewSynthesis");
  v132 = *(_QWORD *)v124[3];
  *(_QWORD *)v124[3] = v130;
  if (v132)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v132 + 8))(v132, v131);
  ggl::RenderQueue::setBufferForLayer(*v125, 0, v130);
  v133 = (ggl::CommandBuffer *)operator new();
  v134 = ggl::CommandBuffer::CommandBuffer(v133, 1, "Debug");
  v135 = *(_QWORD *)(*v128 + 8);
  *(_QWORD *)(*v128 + 8) = v133;
  if (v135)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v135 + 8))(v135, v134);
  ggl::RenderQueue::setBufferForLayer(*v125, 1, v133);
  v136 = (ggl::CommandBuffer *)operator new();
  v137 = ggl::CommandBuffer::CommandBuffer(v136, 2, "MuninLabels");
  v138 = *(_QWORD *)(*v128 + 16);
  *(_QWORD *)(*v128 + 16) = v136;
  if (v138)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v138 + 8))(v138, v137);
  ggl::RenderQueue::setBufferForLayer(*v125, 2, v136);
  v139 = (ggl::CommandBuffer *)operator new();
  v140 = ggl::CommandBuffer::CommandBuffer(v139, 3, "MuninOverlays");
  v141 = *(_QWORD *)(*v128 + 24);
  *(_QWORD *)(*v128 + 24) = v139;
  if (v141)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v141 + 8))(v141, v140);
  ggl::RenderQueue::setBufferForLayer(v124[1], 3, v139);
  *(_QWORD *)v165 = v124;
  if (!v176)
  {
    v142 = 0;
    goto LABEL_164;
  }
  if (v176 != v175)
  {
    v142 = (*(uint64_t (**)(void))(*v176 + 16))();
LABEL_164:
    *(_QWORD *)&v185[4] = v142;
    goto LABEL_166;
  }
  *(_QWORD *)&v185[4] = v183;
  (*(void (**)(_QWORD *, _BYTE *))(v175[0] + 24))(v175, v183);
  v142 = *(_QWORD *)&v185[4];
LABEL_166:
  v143 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 0, (uint64_t *)v165, v142);
  v144 = *(_QWORD **)&v185[4];
  if (*(_BYTE **)&v185[4] == v183)
  {
    v145 = 4;
    v144 = v183;
  }
  else
  {
    if (!*(_QWORD *)&v185[4])
      goto LABEL_171;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_171:
  if (*(_QWORD *)v165)
    (*(void (**)(_QWORD))(**(_QWORD **)v165 + 8))(*(_QWORD *)v165);
  result = v176;
  if (v176 == v175)
  {
    v147 = 4;
    result = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_178;
    v147 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v147))();
LABEL_178:
  v155 = (_BYTE *)v143;
  if (!v150[4])
    return result;
  v148 = operator new(0x20uLL);
  *v148 = &off_1E42CB378;
  v148[1] = a1;
  v148[2] = &v155;
  v148[3] = a4;
  v174 = v148;
  md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>((unsigned __int8 ***)a5, 4, v173);
  result = v174;
  if (v174 == v173)
  {
    v149 = 4;
    result = v173;
  }
  else
  {
    if (!v174)
      return result;
    v149 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v149))();
}

void sub_19FBE9B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40BE47B5E1);
  _Unwind_Resume(a1);
}

void sub_19FBE9B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char *a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  char *v43;
  char *v45;
  uint64_t v46;

  v45 = a39;
  if (a39 == v43)
  {
    v46 = 4;
    v45 = &a36;
  }
  else
  {
    if (!a39)
      _Unwind_Resume(exception_object);
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
  _Unwind_Resume(exception_object);
}

uint64_t md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>(unsigned __int8 ***a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  ggl::RenderQueue *v8;
  _QWORD *v9;
  ggl::CommandBuffer *v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4290AA0;
  v7 = operator new(0x150uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E42DE9D0;
  v8 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v7 + 3), 1);
  v6[3] = 0;
  v6[1] = v8;
  v6[2] = v7;
  v6[4] = 0;
  v6[5] = 0;
  v9 = operator new(8uLL);
  v6[3] = v9;
  *v9++ = 0;
  v6[4] = v9;
  v6[5] = v9;
  *v6 = &off_1E428C540;
  v10 = (ggl::CommandBuffer *)operator new();
  v11 = ggl::CommandBuffer::CommandBuffer(v10, 0, "Main");
  v12 = *(_QWORD *)v6[3];
  *(_QWORD *)v6[3] = v10;
  if (v12)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v12 + 8))(v12, v11);
  ggl::RenderQueue::setBufferForLayer(v6[1], 0, v10);
  v18 = v6;
  v13 = (_QWORD *)a3[3];
  if (!v13)
  {
    v14 = 0;
    goto LABEL_7;
  }
  if (v13 != a3)
  {
    v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
LABEL_7:
    v20 = (_BYTE *)v14;
    goto LABEL_9;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v19);
  v14 = (uint64_t)v20;
LABEL_9:
  md::FrameGraphBuilder::addRenderPass(a1, a2, (uint64_t *)&v18, v14);
  v15 = v20;
  if (v20 == v19)
  {
    v16 = 4;
    v15 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_14;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_14:
  result = (uint64_t)v18;
  if (v18)
    return (*(uint64_t (**)(_QWORD *))(*v18 + 8))(v18);
  return result;
}

void sub_19FBE9E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FBE9E88(_Unwind_Exception *a1)
{
  md::RenderQueueBase *v1;

  md::RenderQueueBase::~RenderQueueBase(v1);
  MEMORY[0x1A1AF4E00](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CB378;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB378;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 __src;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  HIBYTE(v11) = 9;
  strcpy((char *)&__src, "crossfade");
  v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v5, &__src, 9uLL);
  }
  else
  {
    *(_OWORD *)v5 = __src;
    *(_QWORD *)(a2 + 48) = v11;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + 128));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + 136));
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v6;
  result = *(__n128 *)(v6 + 16);
  v8 = *(_OWORD *)(v6 + 32);
  v9 = *(_OWORD *)(v6 + 48);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(v6 + 64);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  if (*(_BYTE *)(v6 + 72))
  {
    result = *(__n128 *)(v6 + 76);
    if (*(_BYTE *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
  }
  else if (*(_BYTE *)(a2 + 176))
  {
    *(_BYTE *)(a2 + 176) = 0;
  }
  return result;
}

_QWORD *md::RenderQueue<md::MuninCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::MuninCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42CB330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB330;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2, __n128 result)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 __src;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  HIBYTE(v12) = 4;
  strcpy((char *)&__src, "main");
  v6 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v6, &__src, 4uLL);
  }
  else
  {
    result.n128_u64[0] = __src;
    *(_OWORD *)v6 = __src;
    *(_QWORD *)(a2 + 48) = v12;
  }
  if (**(_BYTE **)(a1 + 8))
  {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 112));
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 120));
  }
  if (*(_BYTE *)(v5 + 168))
  {
    v7 = *(_QWORD *)(v5 + 128);
    *(_QWORD *)(a2 + 104) = v7;
    if (!*(_BYTE *)(a2 + 176))
    {
      result = *(__n128 *)(v7 + 88);
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
      *(__n128 *)(a2 + 180) = result;
      *(_BYTE *)(a2 + 176) = 1;
    }
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(v5 + 136);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)v8;
    result = *(__n128 *)(v8 + 16);
    v9 = *(_OWORD *)(v8 + 32);
    v10 = *(_OWORD *)(v8 + 48);
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(v8 + 64);
    *(_OWORD *)(a2 + 136) = v9;
    *(_OWORD *)(a2 + 152) = v10;
    *(__n128 *)(a2 + 120) = result;
    if (*(_BYTE *)(v8 + 72))
    {
      result = *(__n128 *)(v8 + 76);
      if (*(_BYTE *)(a2 + 176))
      {
        *(_DWORD *)(a2 + 196) = *(_DWORD *)(v8 + 92);
        *(__n128 *)(a2 + 180) = result;
      }
      else
      {
        *(_DWORD *)(a2 + 196) = *(_DWORD *)(v8 + 92);
        *(__n128 *)(a2 + 180) = result;
        *(_BYTE *)(a2 + 176) = 1;
      }
    }
    else if (*(_BYTE *)(a2 + 176))
    {
      *(_BYTE *)(a2 + 176) = 0;
    }
  }
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E42CB2A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E42CB2A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  void **v12;
  char v13;
  std::string *v14;
  size_t v15;
  __n128 result;
  uint64_t v17;
  std::string __p;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;

  v4 = *(_QWORD *)(a1 + 32);
  std::to_string(&v19, **(_QWORD **)(a1 + 8));
  v5 = std::string::insert(&v19, 0, "rig_pass_", 9uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v20, "_downsample_pass_", 0x11uLL);
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, **(_QWORD **)(a1 + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  v22 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v12 = (void **)(a2 + 32);
  v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 55) < 0)
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v22;
    else
      v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    else
      v15 = v22.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v12, v14, v15);
    if ((v13 & 0x80) == 0)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_27;
      goto LABEL_19;
    }
LABEL_26:
    operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_27;
LABEL_19:
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
LABEL_20:
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_29;
    goto LABEL_21;
  }
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v12, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    goto LABEL_26;
  }
  *(_OWORD *)v12 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 48) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_19;
LABEL_27:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_20;
LABEL_28:
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_29:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_30;
  }
LABEL_21:
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_22;
LABEL_30:
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_22:
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 24));
  v17 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8 * **(_QWORD **)(a1 + 40));
  *(_QWORD *)(a2 + 104) = v17;
  if (!*(_BYTE *)(a2 + 176))
  {
    result = *(__n128 *)(v17 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v17 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(_BYTE *)(a2 + 176) = 1;
  }
  return result;
}

void sub_19FBEA630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CB258;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB258;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  void **v6;
  char v7;
  std::string *p_p;
  size_t size;
  uint64_t v10;
  __int128 v11;
  std::string v12;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 16);
  std::to_string(&v12, **(_QWORD **)(a1 + 8));
  v5 = std::string::insert(&v12, 0, "rig_pass", 8uLL);
  __p = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v6 = (void **)(a2 + 32);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 55) < 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v6, p_p, size);
    if ((v7 & 0x80) == 0)
    {
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_18;
    }
LABEL_17:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    goto LABEL_17;
  }
  *(_OWORD *)v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 48) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_18:
  operator delete(v12.__r_.__value_.__l.__data_);
LABEL_13:
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * **(_QWORD **)(a1 + 8));
  *(_QWORD *)(a2 + 104) = v10;
  if (!*(_BYTE *)(a2 + 176))
  {
    v11 = *(_OWORD *)(v10 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v10 + 104);
    *(_OWORD *)(a2 + 180) = v11;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * **(_QWORD **)(a1 + 8));
}

void sub_19FBEA838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *md::RenderQueue<md::MuninDynamicCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void md::RenderQueue<md::MuninDynamicCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB2E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB2E8;
  a2[1] = v2;
  return result;
}

void **std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void **result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 __src;
  uint64_t v10;

  v3 = *(_QWORD **)(a1 + 8);
  HIBYTE(v10) = 9;
  strcpy((char *)&__src, "composite");
  result = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    result = std::string::__assign_no_alias<false>(result, &__src, 9uLL);
    if (!v3[4])
      goto LABEL_7;
  }
  else
  {
    *(_OWORD *)result = __src;
    *(_QWORD *)(a2 + 48) = v10;
    if (!v3[4])
      goto LABEL_7;
  }
  v5 = 0;
  v6 = 16;
  do
  {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3[5] + 8 * v5));
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3[8] + 8 * v5++));
    result = (void **)md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3[11] + v6));
    v6 += 24;
  }
  while (v5 < v3[4]);
LABEL_7:
  v7 = v3[14];
  *(_QWORD *)(a2 + 104) = v7;
  if (!*(_BYTE *)(a2 + 176))
  {
    v8 = *(_OWORD *)(v7 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
    *(_OWORD *)(a2 + 180) = v8;
    *(_BYTE *)(a2 + 176) = 1;
  }
  *(_QWORD *)(a2 + 168) = v3[15];
  return result;
}

void md::GEOFlyoverMetadataResourceFetcher::~GEOFlyoverMetadataResourceFetcher(md::GEOFlyoverMetadataResourceFetcher *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A9528;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 79);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher((id *)this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A9528;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 79);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher((id *)this);
  JUMPOUT(0x1A1AF4E00);
}

void md::GEOFlyoverMetadataResourceFetcher::resourceTileForTile(md::GEOFlyoverMetadataResourceFetcher *this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  if (!*((_QWORD *)this + 76)
    || (md::FlyoverRegionManager::Internal::getRegionArea((md::FlyoverRegionManager::Internal *)&v12, **((QuadTile ***)this + 78), (uint64_t)a2), !v14))
  {
    *(_BYTE *)a3 = 0;
    return;
  }
  v6 = v12;
  v5 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_13:
    *(_BYTE *)a3 = 0;
    if (!v5)
      return;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_13;
LABEL_9:
  *(_WORD *)(a3 + 8) = *(_WORD *)&a2->_type;
  *(_QWORD *)(a3 + 12) = *(_QWORD *)&a2->_yIdx;
  *(_BYTE *)a3 = 1;
  if (!v5)
    return;
LABEL_14:
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t md::GEOFlyoverMetadataResourceFetcher::tileKey(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  __int128 v10;

  v4 = a2;
  v5 = *(int **)(a3 + 8);
  v7 = v5[1];
  v6 = v5[2];
  v8 = *v5;
  objc_msgSend(v4, "size");
  objc_msgSend(v4, "scale");
  LOBYTE(v10) = GEOTileKeyMakeEmpty();
  *(_QWORD *)((char *)&v10 + 1) = v6 & 0x3F | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | (v8 << 6);

  return v10;
}

void sub_19FBEAE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3CB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3CB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::operator()(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  v4 = *a2;
  v5 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 624);
  v6 = (std::mutex *)(v5 + 48);
  std::mutex::lock((std::mutex *)(v5 + 48));
  v7 = *(_QWORD **)(v5 + 24);
  v8 = (_QWORD *)(v5 + 32);
  if (v7 == (_QWORD *)(v5 + 32))
  {
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_33;
  }
  while (1)
  {
    v9 = (int8x8_t)v7[6];
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8(v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = v4;
        if (*(_QWORD *)&v9 <= v4)
          v11 = v4 % *(_QWORD *)&v9;
      }
      else
      {
        v11 = (v9.i32[0] - 1) & v4;
      }
      v12 = *(uint64_t ***)(v7[5] + 8 * v11);
      if (v12)
      {
        v13 = *v12;
        if (*v12)
          break;
      }
    }
LABEL_24:
    v17 = (_QWORD *)v7[1];
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v18 = (_QWORD *)v7[2];
        v19 = *v18 == (_QWORD)v7;
        v7 = v18;
      }
      while (!v19);
    }
    v7 = v18;
    if (v18 == v8)
      goto LABEL_2;
  }
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == v4)
      {
        if (*((_DWORD *)v13 + 4) == (_DWORD)v4)
          goto LABEL_30;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_24;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == v4)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_24;
LABEL_14:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_24;
  }
  if (*((_DWORD *)v13 + 4) != (_DWORD)v4)
    goto LABEL_14;
LABEL_30:
  *a3 = 0;
  a3[1] = 0;
  v20 = (std::__shared_weak_count *)v13[18];
  if (v20)
  {
    v21 = std::__shared_weak_count::lock(v20);
    a3[1] = v21;
    if (v21)
      *a3 = v13[17];
  }
LABEL_33:
  std::mutex::unlock(v6);
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDC40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::GEOFlyoverMetadataResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::FlyoverPostchain::CompositePipelineState::~CompositePipelineState(ggl::FlyoverPostchain::CompositePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverPostchain::CompositePipelineSetup::~CompositePipelineSetup(ggl::FlyoverPostchain::CompositePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverPostchain::CompositePipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::CompositePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverPostchain::CompositePipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::CompositePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::FlyoverPostchain::DepthSplitPipelineState::~DepthSplitPipelineState(ggl::FlyoverPostchain::DepthSplitPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverPostchain::DepthSplitPipelineSetup::~DepthSplitPipelineSetup(ggl::FlyoverPostchain::DepthSplitPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverPostchain::DepthSplitPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::DepthSplitPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverPostchain::DepthSplitPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::DepthSplitPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::FlyoverPostchain::DownsampleCoCPipelineState::~DownsampleCoCPipelineState(ggl::FlyoverPostchain::DownsampleCoCPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::~DownsampleCoCPipelineSetup(ggl::FlyoverPostchain::DownsampleCoCPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::DownsampleCoCPipelineSetup *this)
{
  return 0;
}

BOOL ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::DownsampleCoCPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverPostchain::FGBlurPipelineState::~FGBlurPipelineState(ggl::FlyoverPostchain::FGBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverPostchain::FGBlurPipelineSetup::~FGBlurPipelineSetup(ggl::FlyoverPostchain::FGBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverPostchain::FGBlurPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::FGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverPostchain::FGBlurPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::FGBlurPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::FlyoverPostchain::BGBlurPipelineState::~BGBlurPipelineState(ggl::FlyoverPostchain::BGBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FlyoverPostchain::BGBlurPipelineSetup::~BGBlurPipelineSetup(ggl::FlyoverPostchain::BGBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverPostchain::BGBlurPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::BGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverPostchain::BGBlurPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::BGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverPostchain::TentBlurPipelineState::~TentBlurPipelineState(ggl::FlyoverPostchain::TentBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverPostchain::TentBlurPipelineState::TentBlurPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[28];

  if ((v5 & 1) == 0)
  {
    v17 = a4;
    v27 = a2;
    v28 = a3;
    a2 = v27;
    a3 = v28;
    a4 = v17;
    if (v18)
    {
      if ((v19 & 1) == 0
      {
        if ((v22 & 1) == 0
        {
          if ((v25 & 1) == 0
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1ECE43AC8 = 1;
        }
        ggl::FlyoverPostchain::TentBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        unk_1EE58A930 = &ggl::FlyoverPostchain::pipelineDataTentBlurPipelineDeviceStructs(void)::ref;
        qword_1EE58A938 = 0;
        unk_1EE58A940 = &ggl::FlyoverPostchain::pipelineDataTentBlurPipelineConstantStructs(void)::ref;
        xmmword_1EE58A948 = xmmword_19FFB2E40;
      }
      ggl::FlyoverPostchain::TentBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::TentBlurPipelineSetup::typedReflection(void)::ref;
      if ((v20 & 1) == 0
      {
        ggl::FlyoverPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainTentBlurShader";
        if ((v23 & 1) == 0
        {
          v26 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
          qword_1ECE35348 = (uint64_t)"FlyoverPostchainTentBlurShader";
          unk_1ECE35350 = ggl::flyoverPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE35358 = 1;
          unk_1ECE35360 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35368 = 0;
          unk_1ECE35370 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE35378 = 0;
          unk_1ECE35380 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v26;
          *(_DWORD *)algn_1ECE35344 = 0;
          qword_1ECE35388 = 0;
          unk_1ECE35390 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE353A0 = 0;
          unk_1ECE353A8 = 0;
          qword_1ECE35398 = 0;
        }
        qword_1ECE34748 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE34750 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
        if ((v24 & 1) == 0
        {
          ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1F63B14D0;
          qword_1ECE35670 = (uint64_t)"FlyoverPostchainTentBlurShader";
          unk_1ECE35678 = 0;
          qword_1ECE35680 = 0;
          unk_1ECE35688 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE35690 = 0;
          unk_1ECE35698 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE356A0 = 0;
          unk_1ECE356A8 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE356B0 = 1;
          unk_1ECE356B8 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE356C8 = 0;
          unk_1ECE356D0 = 0;
          qword_1ECE356C0 = 1;
        }
        qword_1ECE34758 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE34760 = -163900208;
        qword_1ECE34768 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderShaderConstants(void)::ref;
        unk_1ECE34770 = 0;
        qword_1ECE34778 = (uint64_t)ggl::flyoverPostchainTentBlurShaderShaderTextures(void)::ref;
        unk_1ECE34780 = 1;
        qword_1ECE34788 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderShaderSamplers(void)::ref;
        unk_1ECE34790 = 1;
      }
      qword_1EE58A8D8 = (uint64_t)&ggl::FlyoverPostchainTentBlurShader::typedReflection(void)::ref;
      if ((v21 & 1) == 0
      {
        ggl::FlyoverPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58AC00 = 0;
        qword_1EE58AC08 = (uint64_t)"";
        dword_1EE58AC10 = 0;
        qword_1EE58AC18 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE58AC20 = 2;
      }
      qword_1EE58A8E0 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE58A8E8 = 1;
      qword_1EE58A8F0 = 0;
      unk_1EE58A8F8 = 1;
      qword_1EE58A900 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE58A908 = 0;
      qword_1EE58A910 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineConstantStructBinding(void)::ref;
      unk_1EE58A918 = 0;
      a4 = v17;
      a2 = v27;
      a3 = v28;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v31 = *(_OWORD *)a3;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v29 = *a4;
  v30 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverPostchain::TentBlurPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v29;
  *(_OWORD *)(a1 + 272) = v30;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v31;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v31[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E42B8740;
  return a1;
}

void ggl::FlyoverPostchain::TentBlurPipelineSetup::~TentBlurPipelineSetup(ggl::FlyoverPostchain::TentBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverPostchain::TentBlurPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::TentBlurPipelineSetup *this)
{
  return 0;
}

BOOL ggl::FlyoverPostchain::TentBlurPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::TentBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::RasterLayerDataSource::~RasterLayerDataSource(md::RasterLayerDataSource *this)
{
  md::RasterLayerDataSource::~RasterLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  *(_QWORD *)this = &off_1E429B978;
  if (*((_QWORD *)this + 106))
  {
    v2 = (char *)this + 832;
    v3 = (char *)*((_QWORD *)this + 105);
    v4 = *((_QWORD *)this + 104);
    v5 = *(_QWORD *)v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *((_QWORD *)this + 106) = 0;
    if (v3 != (char *)this + 832)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 101);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v9)
    operator delete(v9);
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::RasterLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  int32x2_t *v8;
  __int32 v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  unint64_t *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  id v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  char *v74;
  std::__shared_weak_count *v75;
  void *__p[3];
  uint64_t v77;
  std::__shared_weak_count *v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  int32x2_t v81;
  __int128 v82;
  __int128 *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v8 = *(int32x2_t **)(a2 + 16);
  v9 = v8[1].i32[0];
  v79 = v8[1].i32[1];
  v80 = v9;
  v81 = vrev64_s32(*v8);
  v10 = (unsigned __int16 *)*a3;
  v11 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v11)
  {
    while (*v10 != *(unsigned __int16 *)(a1 + 584))
    {
      v10 += 24;
      if (v10 == v11)
        goto LABEL_16;
    }
  }
  if (v10 == v11 || *((_QWORD *)v10 + 4) != 1)
  {
LABEL_16:
    v14 = 0;
LABEL_17:
    v77 = v14;
    v78 = 0;
    if (!v14)
      goto LABEL_15;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)v10 + 3);
  v14 = *(_QWORD *)(v12 + 112);
  v13 = *(std::__shared_weak_count **)(v12 + 120);
  if (!v13)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v77 = v14;
  v78 = v13;
  v17 = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
    v14 = v77;
    if (!v77)
    {
LABEL_15:
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_77;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v14 = v77;
    if (!v77)
      goto LABEL_15;
  }
LABEL_18:
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  v20 = v80;
  if (*(_BYTE *)(v14 + 160))
    v21 = v80 == 0;
  else
    v21 = 1;
  if (!v21)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 776));
    v22 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((_QWORD *)(a1 + 792), &v79);
    if (!v22)
      goto LABEL_27;
    v23 = *(uint64_t **)(a1 + 840);
    v24 = (uint64_t *)v22[5];
    if (v23 != v24)
    {
      v25 = (uint64_t *)v24[1];
      if (v25 != v23)
      {
        v26 = *v24;
        *(_QWORD *)(v26 + 8) = v25;
        *(_QWORD *)v24[1] = v26;
        v27 = *v23;
        *(_QWORD *)(v27 + 8) = v24;
        *v24 = v27;
        *v23 = (uint64_t)v24;
        v24[1] = (uint64_t)v23;
        v23 = *(uint64_t **)(a1 + 840);
      }
    }
    if (v23 == (uint64_t *)(a1 + 832))
    {
LABEL_27:
      v28 = v20 - 1;
      if (!v20)
        v28 = 0;
      LOBYTE(v82) = v79;
      BYTE1(v82) = v28;
      *(int32x2_t *)((char *)&v82 + 4) = vshr_n_s32(v81, 1uLL);
      geo::LRUPolicy<geo::QuadTile,geo::QuadTile,geo::QuadTileHash>::insert(a1 + 832, (float *)(a1 + 792), &v79, (uint64_t)&v82);
      while (*(_QWORD *)(a1 + 848) > *(_QWORD *)(a1 + 784))
        geo::Cache<geo::QuadTile,geo::QuadTile,geo::QuadTileHash,geo::LRUPolicy>::_pop((_QWORD *)(a1 + 784));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 776));
  }
  if (*(_QWORD *)(v14 + 144))
  {
    v29 = (char *)operator new(0x58uLL);
    *((_QWORD *)v29 + 1) = 0;
    v30 = (unint64_t *)(v29 + 8);
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 3) = &off_1E42B63B0;
    *(_QWORD *)v29 = &off_1E42DED18;
    *((_QWORD *)v29 + 5) = 0;
    *((_QWORD *)v29 + 6) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_DWORD *)v29 + 14) = 0;
    *(_QWORD *)&v31 = 0x100000001;
    *((_QWORD *)&v31 + 1) = 0x100000001;
    *(_OWORD *)(v29 + 60) = v31;
    *(_QWORD *)(v29 + 76) = 0x100000001;
    *((_DWORD *)v29 + 21) = 0;
    v74 = v29 + 24;
    v75 = (std::__shared_weak_count *)v29;
    v32 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v33 = v32;
    v32->__shared_owners_ = 0;
    v32->__shared_weak_owners_ = 0;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E53B0;
    v34 = *(_QWORD *)(v14 + 144);
    v35 = *(std::__shared_weak_count **)(v14 + 152);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = *(_DWORD *)(v34 + 12);
    v32[4].__shared_owners_ = 0;
    LODWORD(v32[2].__shared_owners_) = 0;
    v32[1].__shared_weak_owners_ = 0;
    v32[2].__vftable = 0;
    v32[3].__shared_owners_ = 0x100000001;
    LODWORD(v32[3].__shared_weak_owners_) = 0;
    HIDWORD(v32[3].__shared_weak_owners_) = v38;
    v32[4].__vftable = (std::__shared_weak_count_vtbl *)0x100000001;
    v32[4].__shared_weak_owners_ = 0;
    v32[5].__vftable = 0;
    v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BE438;
    v32[1].__shared_owners_ = 0;
    v32[2].__shared_weak_owners_ = (uint64_t)&unk_1E42BE458;
    v32[3].__vftable = (std::__shared_weak_count_vtbl *)"";
    LODWORD(v32[5].__shared_owners_) = *(_DWORD *)(v34 + 8);
    v32[5].__shared_weak_owners_ = v34;
    v32[6].__vftable = (std::__shared_weak_count_vtbl *)v35;
    if (v35)
    {
      v39 = (unint64_t *)&v35->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    LOWORD(v32[6].__shared_owners_) = 0;
    BYTE2(v32[6].__shared_owners_) = 1;
    v32[6].__shared_weak_owners_ = (uint64_t)(v29 + 24);
    v32[7].__vftable = (std::__shared_weak_count_vtbl *)v29;
    do
      v41 = __ldxr(v30);
    while (__stxr(v41 + 1, v30));
    v32[4].__shared_owners_ = *(_QWORD *)(v34 + 16);
    if (v35)
    {
      v42 = (unint64_t *)&v35->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v72 = &v33[1].__vftable;
    v73 = v33;
    v44 = *(id *)(a1 + 760);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v44, "gglDevice") + 24))(&v71);

    *(_QWORD *)&v82 = &off_1E42D9248;
    *((_QWORD *)&v82 + 1) = &v72;
    v83 = &v82;
    v69 = 0;
    v70 = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v71 + 16))(v71, &v82, &v69);
    v45 = v70;
    if (v70)
    {
      v46 = (unint64_t *)&v70->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v83;
    if (v83 == &v82)
    {
      v49 = 4;
      v48 = &v82;
    }
    else
    {
      if (!v83)
      {
LABEL_57:
        v50 = operator new(0x2F8uLL);
        v50[1] = 0;
        v50[2] = 0;
        *v50 = &off_1E42DB278;
        v82 = 0uLL;
        v51 = md::MapTileData::MapTileData((uint64_t)(v50 + 3), a2, (uint64_t)__p, (uint64_t)&v82, 1);
        v53 = v72;
        v52 = v73;
        v50[3] = &off_1E428FC50;
        v50[82] = &unk_1E428FC90;
        v50[93] = v53;
        v50[94] = v52;
        if (v52)
        {
          v54 = (unint64_t *)&v52->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        *a4 = v51;
        a4[1] = (uint64_t)v50;
        if (v71)
        {
          v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
          v57 = v71;
          v71 = 0;
          *(_QWORD *)&v82 = v57;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v56 + 48))(v56, &v82);
          v58 = v82;
          *(_QWORD *)&v82 = 0;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          v59 = v71;
          v71 = 0;
          if (v59)
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        }
        v60 = v73;
        if (v73)
        {
          v61 = (unint64_t *)&v73->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = v75;
        if (v75)
        {
          v64 = (unint64_t *)&v75->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        goto LABEL_75;
      }
      v49 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
    goto LABEL_57;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_75:
  if (__p[0])
    operator delete(__p[0]);
LABEL_77:
  v66 = v78;
  if (v78)
  {
    v67 = (unint64_t *)&v78->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_19FBEC714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  os_unfair_lock_s *v22;

  os_unfair_lock_unlock(v22);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void md::RasterLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void geo::LRUPolicy<geo::QuadTile,geo::QuadTile,geo::QuadTileHash>::insert(uint64_t a1, float *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t **v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  _QWORD *i;
  size_t v45;
  uint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *__p;

  v9 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(a2, a3);
  if (v9)
  {
    v10 = v9;
    v11 = (uint64_t *)v9[5];
    v12 = *v11;
    *(_QWORD *)(v12 + 8) = v11[1];
    *(_QWORD *)v11[1] = v12;
    --*(_QWORD *)(a1 + 16);
    operator delete(v11);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a2, v10);
    if (__p)
      operator delete(__p);
  }
  v13 = (char *)operator new(0x40uLL);
  v14 = a3[1];
  v15 = *a3;
  v13[16] = v15;
  v13[17] = v14;
  v16 = *(_QWORD *)(a3 + 4);
  *(_QWORD *)(v13 + 20) = v16;
  *((_WORD *)v13 + 20) = *(_WORD *)a4;
  *(_QWORD *)(v13 + 44) = *(_QWORD *)(a4 + 4);
  v17 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = v17;
  *v17 = v13;
  v18 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v18;
  v19 = a3[1];
  v20 = (v19
       + ((v15 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v15 - 0x61C8864680B583EBLL);
  v21 = ((v20 << 6) + (int)v16 + (v20 >> 2) - 0x61C8864680B583EBLL) ^ v20;
  v22 = ((v21 << 6) + SHIDWORD(v16) + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
  v23 = *((_QWORD *)a2 + 1);
  v57 = v16;
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v4 = ((v21 << 6) + SHIDWORD(v16) + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
      if (v22 >= v23)
        v4 = v22 % v23;
    }
    else
    {
      v4 = v22 & (v23 - 1);
    }
    v25 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v4);
    if (v25)
    {
      v26 = *v25;
      if (v26)
      {
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            v28 = v26[1];
            if (v28 == v22)
            {
              if (__PAIR64__(*((unsigned __int8 *)v26 + 17), *((unsigned __int8 *)v26 + 16)) == __PAIR64__(v19, v15)
                && *(uint64_t *)((char *)v26 + 20) == v16)
              {
                return;
              }
            }
            else if ((v28 & (v23 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v26 = (uint64_t *)*v26;
            if (!v26)
              goto LABEL_28;
          }
        }
        do
        {
          v27 = v26[1];
          if (v27 == v22)
          {
            if (__PAIR64__(*((unsigned __int8 *)v26 + 17), *((unsigned __int8 *)v26 + 16)) == __PAIR64__(v19, v15)
              && *(uint64_t *)((char *)v26 + 20) == v16)
            {
              return;
            }
          }
          else
          {
            if (v27 >= v23)
              v27 %= v23;
            if (v27 != v4)
              break;
          }
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
    }
  }
LABEL_28:
  v29 = operator new(0x30uLL);
  *v29 = 0;
  v29[1] = v22;
  *((_BYTE *)v29 + 16) = *a3;
  *((_BYTE *)v29 + 17) = v19;
  *(_QWORD *)((char *)v29 + 20) = v57;
  v29[5] = v13;
  v30 = (float)(unint64_t)(*((_QWORD *)a2 + 3) + 1);
  v31 = a2[8];
  if (!v23 || (float)(v31 * (float)v23) < v30)
  {
    v32 = 1;
    if (v23 >= 3)
      v32 = (v23 & (v23 - 1)) != 0;
    v33 = v32 | (2 * v23);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v23 = *((_QWORD *)a2 + 1);
    }
    if (prime <= v23)
    {
      if (prime >= v23)
        goto LABEL_65;
      v47 = vcvtps_u32_f32((float)*((unint64_t *)a2 + 3) / a2[8]);
      if (v23 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
      {
        v47 = std::__next_prime(v47);
      }
      else
      {
        v49 = 1 << -(char)__clz(v47 - 1);
        if (v47 >= 2)
          v47 = v49;
      }
      if (prime <= v47)
        prime = v47;
      if (prime >= v23)
      {
        v23 = *((_QWORD *)a2 + 1);
LABEL_65:
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23)
            v4 = v22 % v23;
          else
            v4 = v22;
        }
        else
        {
          v4 = (v23 - 1) & v22;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        v56 = *(_QWORD **)a2;
        *(_QWORD *)a2 = 0;
        if (v56)
          operator delete(v56);
        v23 = 0;
        *((_QWORD *)a2 + 1) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v36 = operator new(8 * prime);
    v37 = *(_QWORD **)a2;
    *(_QWORD *)a2 = v36;
    if (v37)
      operator delete(v37);
    v38 = 0;
    *((_QWORD *)a2 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v38++) = 0;
    while (prime != v38);
    v40 = (uint64_t *)(a2 + 4);
    v39 = (_QWORD *)*((_QWORD *)a2 + 2);
    if (!v39)
    {
LABEL_64:
      v23 = prime;
      goto LABEL_65;
    }
    v41 = v39[1];
    v42 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v43 = v41 & v42;
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v43) = v40;
      for (i = (_QWORD *)*v39; *v39; i = (_QWORD *)*v39)
      {
        v45 = i[1] & v42;
        if (v45 == v43)
        {
          v39 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a2 + 8 * v45))
        {
          *v39 = *i;
          v46 = 8 * v45;
          *i = **(_QWORD **)(*(_QWORD *)a2 + v46);
          **(_QWORD **)(*(_QWORD *)a2 + v46) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v45) = v39;
          v39 = i;
          v43 = v45;
        }
      }
      goto LABEL_64;
    }
    if (v41 >= prime)
      v41 %= prime;
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v41) = v40;
    v50 = (_QWORD *)*v39;
    if (!*v39)
      goto LABEL_64;
    while (1)
    {
      v52 = v50[1];
      if (v52 >= prime)
        v52 %= prime;
      if (v52 != v41)
      {
        if (!*(_QWORD *)(*(_QWORD *)a2 + 8 * v52))
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v52) = v39;
          goto LABEL_69;
        }
        *v39 = *v50;
        v51 = 8 * v52;
        *v50 = **(_QWORD **)(*(_QWORD *)a2 + v51);
        **(_QWORD **)(*(_QWORD *)a2 + v51) = v50;
        v50 = v39;
      }
      v52 = v41;
LABEL_69:
      v39 = v50;
      v50 = (_QWORD *)*v50;
      v41 = v52;
      if (!v50)
        goto LABEL_64;
    }
  }
LABEL_78:
  v53 = *(_QWORD **)a2;
  v54 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v4);
  if (v54)
  {
    *v29 = *v54;
LABEL_86:
    *v54 = v29;
    goto LABEL_87;
  }
  *v29 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v29;
  v53[v4] = a2 + 4;
  if (*v29)
  {
    v55 = *(_QWORD *)(*v29 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v55 >= v23)
        v55 %= v23;
    }
    else
    {
      v55 &= v23 - 1;
    }
    v54 = (_QWORD *)(*(_QWORD *)a2 + 8 * v55);
    goto LABEL_86;
  }
LABEL_87:
  ++*((_QWORD *)a2 + 3);
}

void sub_19FBECE9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void geo::Cache<geo::QuadTile,geo::QuadTile,geo::QuadTileHash,geo::LRUPolicy>::_pop(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6[4];
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  void *v10;

  v2 = (char *)a1[6];
  *(_WORD *)v6 = *((_WORD *)v2 + 8);
  v7 = *(_QWORD *)(v2 + 20);
  v8 = *((_WORD *)v2 + 20);
  v9 = *(_QWORD *)(v2 + 44);
  v3 = *(_QWORD *)v2;
  *(_QWORD *)(v3 + 8) = *((_QWORD *)v2 + 1);
  **((_QWORD **)v2 + 1) = v3;
  --a1[8];
  operator delete(v2);
  v4 = a1 + 1;
  v5 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v4, v6);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v10, v4, v5);
    if (v10)
      operator delete(v10);
  }
}

void std::__shared_ptr_emplace<md::RasterTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RasterTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9248;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9248;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6DE0;
  v7[1] = ggl::Texture2D::onImplicitLoadComplete;
  v7[2] = 0;
  v7[3] = v4;
  v23 = v7;
  v15[0] = v5;
  v15[1] = v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v8 = v20;
  v19 = v6;
  v9 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v7);
  v21 = v10;
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(__n128))(*v11 + 8 * v12))(v9);
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v3 + 24))(v3, v15, v9);
  if (v21 == v20)
  {
    v14 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v14 = 5;
    v8 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v14))(v8);
}

void sub_19FBED124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ggl::GlobeTexturedShader::typedReflection(ggl::GlobeTexturedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GlobeTexturedShader::typedReflection(void)::ref = (uint64_t)"GlobeTexturedShader";
      ggl::globeTexturedShaderVertexFunctionDescriptor(v2);
      qword_1EE5855D8 = (uint64_t)&ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
      dword_1EE5855E0 = (int)v3;
      ggl::globeTexturedShaderFragmentFunctionDescriptor(v3);
      qword_1EE5855E8 = (uint64_t)&ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE5855F0 = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
      qword_1EE5855F8 = (uint64_t)ggl::globeTexturedShaderShaderConstants(void)::ref;
      unk_1EE585600 = 3;
      qword_1EE585608 = (uint64_t)ggl::globeTexturedShaderShaderTextures(void)::ref;
      unk_1EE585610 = 2;
      qword_1EE585618 = (uint64_t)ggl::globeTexturedShaderShaderSamplers(void)::ref;
      unk_1EE585620 = 2;
    }
  }
}

void ggl::globeTexturedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::globeTexturedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("GlobeTexturedShaderVertex");
      *(_DWORD *)algn_1EE585654 = 0;
      qword_1EE585658 = (uint64_t)"GlobeTexturedShader";
      unk_1EE585660 = ggl::globeTexturedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE585668 = 1;
      unk_1EE585670 = &ggl::globeTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE585678 = 3;
      unk_1EE585680 = &ggl::globeTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE585688 = 0;
      unk_1EE585690 = &ggl::globeTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE585698 = 1;
      unk_1EE5856A0 = &ggl::globeTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE5856B0 = 0;
      unk_1EE5856B8 = 0;
      qword_1EE5856A8 = 1;
    }
  }
}

void ggl::globeTexturedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::globeTexturedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("GlobeTexturedShaderFragment");
      *(_DWORD *)algn_1EE5856CC = 1;
      qword_1EE5856D0 = (uint64_t)"GlobeTexturedShader";
      unk_1EE5856D8 = 0;
      qword_1EE5856E0 = 0;
      unk_1EE5856E8 = &ggl::globeTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE5856F0 = 1;
      unk_1EE5856F8 = &ggl::globeTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE585700 = 0;
      unk_1EE585708 = &ggl::globeTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE585710 = 1;
      unk_1EE585718 = &ggl::globeTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE585728 = 0;
      unk_1EE585730 = 0;
      qword_1EE585720 = 1;
    }
  }
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::DaVinci::GlobeTexturedMesh::~GlobeTexturedMesh(ggl::DaVinci::GlobeTexturedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::DaVinci::GlobeTexturedMesh::~GlobeTexturedMesh(ggl::DaVinci::GlobeTexturedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::GlobeTexturedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::GlobeTexturedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::GlobeTexturedPipelineState::~GlobeTexturedPipelineState(ggl::DaVinci::GlobeTexturedPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::GlobeTexturedPipelineSetup::~GlobeTexturedPipelineSetup(ggl::DaVinci::GlobeTexturedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::GlobeTexturedPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GlobeTexturedPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::DaVinci::GlobeTexturedPipelineSetup::textureIsEnabled(ggl::DaVinci::GlobeTexturedPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void sub_19FBEDB10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FBEDCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FBEE0D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBEE2D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBEE4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBEE604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBEEA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBEEA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19FBEED50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBEED60(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_19FBEEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  void *v25;
  void *v26;
  id *v27;
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_19FBEF254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  void *v25;

  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_19FBEF4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBEFAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id location,uint64_t a40,char a41)
{
  void *v41;
  void *v42;

  _Block_object_dispose(&a41, 8);

  _Unwind_Resume(a1);
}

void sub_19FBF07B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  void *v36;
  void *v37;
  id *v38;
  uint64_t v39;

  objc_destroyWeak(v38);
  objc_destroyWeak((id *)(v39 - 200));

  _Block_object_dispose((const void *)(v39 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_19FBF0A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FBF1584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF15F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF18F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FBF1D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19FBF1F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF22DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FBF24B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FBF2A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF2BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19FBF2E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FBF3010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF357C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{

  _Unwind_Resume(a1);
}

void sub_19FBF3640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF36E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF3920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FBF5244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, id *a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,char *a56,char a57,uint64_t a58,uint64_t a59,char *a60)
{
  uint64_t v60;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  std::vector<md::AnimationData::LabelEntry>::~vector[abi:nn180100](a27);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](a17);
  v62 = *(void **)(v60 + 72);
  if (v62)
  {
    *(_QWORD *)(v60 + 80) = v62;
    operator delete(v62);
    v63 = *(void **)(v60 + 48);
    if (!v63)
    {
LABEL_3:
      v64 = *(void **)(v60 + 24);
      if (!v64)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v63 = *(void **)(v60 + 48);
    if (!v63)
      goto LABEL_3;
  }
  *(_QWORD *)(v60 + 56) = v63;
  operator delete(v63);
  v64 = *(void **)(v60 + 24);
  if (!v64)
  {
LABEL_4:
    v65 = *(void **)v60;
    if (!*(_QWORD *)v60)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)(v60 + 32) = v64;
  operator delete(v64);
  v65 = *(void **)v60;
  if (!*(_QWORD *)v60)
  {
LABEL_6:

    MEMORY[0x1A1AF4E00](v60, 0x10A0C400168CBFELL);
    MEMORY[0x1A1AF4E00](a13, 0x10E0C402FD04164);

    v66 = a56;
    if (a56 == &a53)
    {
      v67 = 4;
      v66 = &a53;
    }
    else
    {
      if (!a56)
        goto LABEL_15;
      v67 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
LABEL_15:
    _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__1D1Ev((uint64_t)&a32);
    v68 = a60;
    if (a60 == &a57)
    {
      v69 = 4;
      v68 = &a57;
    }
    else
    {
      if (!a60)
        goto LABEL_20;
      v69 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
LABEL_20:
    _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__0D1Ev((uint64_t)&a43);
    geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(&a47);

    geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(&a50);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(_QWORD *)(v60 + 8) = v65;
  operator delete(v65);
  goto LABEL_6;
}

double __copy_helper_block_ea8_72c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  result = *(double *)(a2 + 120);
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__1D1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 64) = &off_1E42B55B0;
  if (*(_QWORD *)(a1 + 72))
  {

    v2 = *(void **)(a1 + 72);
  }
  else
  {
    v2 = 0;
  }

  return a1;
}

uint64_t _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__0D1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 8) = &off_1E42B55D0;
  if (*(_QWORD *)(a1 + 16))
  {

    v2 = *(void **)(a1 + 16);
  }
  else
  {
    v2 = 0;
  }

  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEED1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E42D9518;
  *(_QWORD *)(a1 + 72) = &off_1E42B55B0;
  if (*(_QWORD *)(a1 + 80))
  {

    v2 = *(void **)(a1 + 80);
  }
  else
  {
    v2 = 0;
  }

  return a1;
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E42D9518;
  *(_QWORD *)(a1 + 72) = &off_1E42B55B0;
  if (*(_QWORD *)(a1 + 80))
  {

    v2 = *(void **)(a1 + 80);
  }
  else
  {
    v2 = 0;
  }

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;
  __int128 v3;

  v2 = operator new(0x60uLL);
  *v2 = &off_1E42D9518;
  v2[1] = *(id *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v2 + 2) = v3;
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  v2[8] = *(_QWORD *)(a1 + 64);
  geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(v2 + 9, a1 + 72);
  return v2;
}

_QWORD *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D9518;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  return geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((_QWORD *)(a2 + 72), a1 + 72);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE7destroyEv(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 72) = &off_1E42B55B0;
  if (*(_QWORD *)(a1 + 80))
  {

    v2 = *(void **)(a1 + 80);
  }
  else
  {
    v2 = 0;
  }

}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE18destroy_deallocateEv(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 72) = &off_1E42B55B0;
  if (*(_QWORD *)(a1 + 80))
  {

    v2 = *(void **)(a1 + 80);
  }
  else
  {
    v2 = 0;
  }

  operator delete((void *)a1);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEEclEOS5_(uint64_t a1, int *a2)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (**v25)();
  void *v26;
  int v27;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(void ***)(v2 + 792);
  v17 = 3321888768;
  v4 = *(_OWORD *)(a1 + 32);
  v21 = *(_OWORD *)(a1 + 16);
  v5 = *a2;
  v16 = MEMORY[0x1E0C809B0];
  v18 = ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__1clE18VKFlyoverTourState_block_invoke;
  v19 = &unk_1E42E9190;
  v27 = v5;
  v20 = v2;
  v22 = v4;
  v23 = *(_OWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 72;
  v7 = v3;
  geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(&v25, v6);
  dispatch_async(v7, &v16);

  v25 = &off_1E42B55B0;
  if (v26)
  {

    v15 = v26;
  }
  else
  {
    v15 = 0;
  }

}

void ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__1clE18VKFlyoverTourState_block_invoke(uint64_t a1)
{
  void *v2;
  void (**v3)(id, _QWORD);

  if ((*(_DWORD *)(a1 + 120) - 3) <= 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "endRegionChange");
    if (*(_DWORD *)(a1 + 120) == 3)
      objc_msgSend(*(id *)(a1 + 32), "moveTo:height:useHeight:zoom:rotation:tilt:duration:timingCurve:completion:", 1, VKAnimationCurveEaseOut, 0, *(double *)(a1 + 40) * 57.2957795, *(double *)(a1 + 48) * 57.2957795, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 80), *(double *)(a1 + 72), 1.0);
  }
  v2 = (void *)MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 104));

  if (v2)
  {
    v3 = (void (**)(id, _QWORD))MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 104));
    v3[2](v3, *(unsigned int *)(a1 + 120));

  }
}

void sub_19FBF595C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE96c152_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFv18VKFlyoverTourStateENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((_QWORD *)(a1 + 96), a2 + 96);
}

void __destroy_helper_block_ea8_4096c152_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFv18VKFlyoverTourStateENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 96) = &off_1E42B55B0;
  v2 = *(void **)(a1 + 104);
  if (v2)
  {

    v2 = *(void **)(a1 + 104);
  }

}

uint64_t _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEED1Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E42D94D0;
  *(_QWORD *)(a1 + 16) = &off_1E42B55D0;
  if (*(_QWORD *)(a1 + 24))
  {

    v2 = *(void **)(a1 + 24);
  }
  else
  {
    v2 = 0;
  }

  return a1;
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E42D94D0;
  *(_QWORD *)(a1 + 16) = &off_1E42B55D0;
  if (*(_QWORD *)(a1 + 24))
  {

    v2 = *(void **)(a1 + 24);
  }
  else
  {
    v2 = 0;
  }

  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E42D94D0;
  v2[1] = *(id *)(a1 + 8);
  geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(v2 + 2, a1 + 16);
  return v2;
}

_QWORD *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D94D0;
  a2[1] = *(id *)(a1 + 8);
  return geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(a2 + 2, a1 + 16);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE7destroyEv(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 16) = &off_1E42B55D0;
  if (*(_QWORD *)(a1 + 24))
  {

    v2 = *(void **)(a1 + 24);
  }
  else
  {
    v2 = 0;
  }

}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE18destroy_deallocateEv(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 16) = &off_1E42B55D0;
  if (*(_QWORD *)(a1 + 24))
  {

    v2 = *(void **)(a1 + 24);
  }
  else
  {
    v2 = 0;
  }

  operator delete((void *)a1);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEEclESB_(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[4];
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;

  v4 = **(id **)(*(_QWORD *)(a1 + 8) + 792);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__0clERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE_e5_v8__0l;
  geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(&v11, a1 + 16);
  v13 = a2;
  dispatch_async(v4, v10);

  v11 = &off_1E42B55D0;
  if (v12)
  {

    v9 = v12;
  }
  else
  {
    v9 = 0;
  }

}

void ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__0clERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  void (**v5)(id, void *);

  v2 = (void *)MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 40));

  if (v2)
  {
    v5 = (void (**)(id, void *))MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 40));
    v3 = *(uint64_t **)(a1 + 56);
    if (*((char *)v3 + 23) < 0)
      v3 = (uint64_t *)*v3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5[2](v5, v4);

  }
}

void sub_19FBF5D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_32c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1, uint64_t a2)
{
  return geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((_QWORD *)(a1 + 32), a2 + 32);
}

void __destroy_helper_block_ea8_32c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 + 32) = &off_1E42B55D0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {

    v2 = *(void **)(a1 + 40);
  }

}

void sub_19FBF5FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FBF60AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FBF616C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF6768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19FBF682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF689C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF69B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBF6A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF6B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBF6BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF6C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBF6D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FBF6E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FBF6EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::DaVinciCenterLineRoadsLayerDataSource::~DaVinciCenterLineRoadsLayerDataSource(md::DaVinciCenterLineRoadsLayerDataSource *this)
{
  md::DaVinciCenterLineRoadsLayerDataSource::~DaVinciCenterLineRoadsLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  md::DaVinciCenterLineRoadsLayerDataSource *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)this = &off_1E42AB258;
  v2 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40509EF904);
  }
  v7 = (md::DaVinciCenterLineRoadsLayerDataSource *)*((_QWORD *)this + 101);
  if (v7 == (md::DaVinciCenterLineRoadsLayerDataSource *)((char *)this + 784))
  {
    v8 = 4;
    v7 = (md::DaVinciCenterLineRoadsLayerDataSource *)((char *)this + 784);
    goto LABEL_14;
  }
  if (v7)
  {
    v8 = 5;
LABEL_14:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }

  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 95);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

uint64_t md::DaVinciCenterLineRoadsLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 824);
  if (result)
    return md::ElevationRequestUpdater::updateRequest(result, a2, a4);
  return result;
}

void std::__shared_ptr_emplace<md::DaVinciCenterLineRoadsTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciCenterLineRoadsTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciCenterLineRoadsTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::DaVinciCenterLineRoadsLayerDataSource::DaVinciCenterLineRoadsLayerDataSource(uint64_t a1, __int16 a2, __int16 a3, gdc::LayerDataStore *a4, gdc::ResourceStatusContainer *a5, void *a6, geo::TaskQueue *a7, uint64_t *a8, uint64_t a9)
{
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v16 = a6;
  md::SingleGEOResourceLayerDataSource::SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)a1, a2, a3, a4, a5, a7, 0, 0);
  *(_QWORD *)a1 = &off_1E42AB258;
  *(_OWORD *)(a1 + 752) = 0u;
  v17 = v16;
  *(_QWORD *)(a1 + 768) = v17;
  *(_BYTE *)(a1 + 776) = 0;
  v18 = *(_QWORD *)(a9 + 24);
  if (v18)
  {
    if (v18 == a9)
    {
      *(_QWORD *)(a1 + 808) = a1 + 784;
      (*(void (**)(_QWORD))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24));
      goto LABEL_6;
    }
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  }
  *(_QWORD *)(a1 + 808) = v18;
LABEL_6:
  *(_BYTE *)(a1 + 816) = 0;
  v19 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 824) = v19;

  return a1;
}

void sub_19FBF717C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3);
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource((md::SingleGEOResourceLayerDataSource *)v1);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::DsmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DsmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAC20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DsmDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::StyleSheetExtension::localizationMap(md::StyleSheetExtension *this, md::StylesheetVendor *a2)
{
  os_unfair_lock_s *v4;
  void *v5;
  void *v6;
  gss::Allocator *v7;
  gss::Allocator *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[5];

  v4 = (os_unfair_lock_s *)((char *)a2 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 7);
  if (!*((_BYTE *)a2 + 88))
  {
    objc_msgSend(*((id *)a2 + 2), "dataForResourceWithName:", CFSTR("LocalizationStyleAttributes.plist"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v5, 0, 0, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
    v7 = (gss::Allocator *)operator new(0x50uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E42E65D8;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 3) = 0;
    v8 = (gss::Allocator *)gss::Allocator::instance(v7);
    *((_QWORD *)v7 + 5) = v8;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = gss::Allocator::instance(v8);
    *((_QWORD *)v7 + 8) = 0;
    *((_DWORD *)v7 + 18) = 1065353216;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 13);
    *((_QWORD *)a2 + 12) = (char *)v7 + 24;
    *((_QWORD *)a2 + 13) = v7;
    if (!v9)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v6)
        goto LABEL_11;
    }
    else
    {
LABEL_9:
      if (!v6)
      {
LABEL_11:
        *((_BYTE *)a2 + 88) = 1;

        goto LABEL_12;
      }
    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___ZN2md16StylesheetVendor15localizationMapEv_block_invoke;
    v15[3] = &__block_descriptor_40_e15_v32__0_8_16_B24l;
    v15[4] = a2;
    objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v15);
    goto LABEL_11;
  }
LABEL_12:
  v12 = *((_QWORD *)a2 + 13);
  *(_QWORD *)this = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  os_unfair_lock_unlock(v4);
}

void sub_19FBF7394(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void md::StyleSheetExtension::currencyMap(md::StyleSheetExtension *this, md::StylesheetVendor *a2)
{
  os_unfair_lock_s *v4;
  void *v5;
  void *v6;
  gss::Allocator *v7;
  gss::Allocator *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[5];

  v4 = (os_unfair_lock_s *)((char *)a2 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 8);
  if (!*((_BYTE *)a2 + 112))
  {
    objc_msgSend(*((id *)a2 + 2), "dataForResourceWithName:", CFSTR("CurrencyStyleAttributes.plist"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v5, 0, 0, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
    v7 = (gss::Allocator *)operator new(0x50uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E42E65D8;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 3) = 0;
    v8 = (gss::Allocator *)gss::Allocator::instance(v7);
    *((_QWORD *)v7 + 5) = v8;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = gss::Allocator::instance(v8);
    *((_QWORD *)v7 + 8) = 0;
    *((_DWORD *)v7 + 18) = 1065353216;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 16);
    *((_QWORD *)a2 + 15) = (char *)v7 + 24;
    *((_QWORD *)a2 + 16) = v7;
    if (!v9)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v6)
        goto LABEL_11;
    }
    else
    {
LABEL_9:
      if (!v6)
      {
LABEL_11:
        *((_BYTE *)a2 + 112) = 1;

        goto LABEL_12;
      }
    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___ZN2md16StylesheetVendor11currencyMapEv_block_invoke;
    v15[3] = &__block_descriptor_40_e15_v32__0_8_16_B24l;
    v15[4] = a2;
    objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v15);
    goto LABEL_11;
  }
LABEL_12:
  v12 = *((_QWORD *)a2 + 16);
  *(_QWORD *)this = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  os_unfair_lock_unlock(v4);
}

void sub_19FBF7554(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *md::TransitInterTileMediator::updateTileInfos(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  _DWORD *result;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _BOOL4 v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  _BOOL4 v31;
  BOOL v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  _DWORD *v50;
  _BOOL4 v51;
  BOOL v52;
  _QWORD *v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  int v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  _BOOL4 v69;
  BOOL v70;
  _QWORD *v71;
  int v72;
  BOOL v73;
  int v74;
  int v75;
  BOOL v76;
  int v77;
  char *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v3 = *(_QWORD *)(a3 + 8) != *(_QWORD *)(a3 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = v6;
  if (!v6)
  {
    *(_DWORD *)a3 = 0;
    return result;
  }
  v8 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v10 = 1 << v9;
  v11 = result;
  v12 = v7 - 1;
  if (*a2 >= 1 << v9)
    v13 = 1 << v9;
  else
    v13 = 0;
  if (v8 >= 0)
    v14 = -v13;
  else
    v14 = 1 << v9;
  v15 = v14 + v8;
  v16 = result;
  v17 = v5;
  do
  {
    v21 = v17[8];
    v22 = v21 < v15;
    if (v21 == v15 && (v23 = v17[9], v22 = v23 < v12, v23 == v12))
      v18 = v17[10] < v9;
    else
      v18 = v22;
    v19 = !v18;
    if (v18)
      v20 = v17 + 2;
    else
      v20 = v17;
    if (v19)
      v16 = v17;
    v17 = (_DWORD *)*v20;
  }
  while (*v20);
  if (v16 == result)
    goto LABEL_29;
  v24 = v16[8];
  if (v15 == v24)
  {
    v25 = v16[9];
    if (v12 == v25)
    {
      if (v9 >= v16[10])
        goto LABEL_131;
LABEL_29:
      *(_BYTE *)a3 = 0;
      goto LABEL_30;
    }
    if (v7 <= v25)
      goto LABEL_29;
  }
  else if (v15 < v24)
  {
    goto LABEL_29;
  }
LABEL_131:
  *(_BYTE *)a3 = 1;
  if (*((unsigned __int8 *)v16 + 50) != v3)
  {
    *((_BYTE *)v16 + 50) = v3;
    v87 = (char *)*((_QWORD *)v16 + 7);
    v86 = (char *)*((_QWORD *)v16 + 8);
    if (v87 != v86)
    {
      v88 = v86 - v87 - 8;
      if (v88 < 8)
        goto LABEL_138;
      v89 = (v88 >> 3) + 1;
      v90 = (uint64_t *)(v87 + 8);
      v91 = v89 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v92 = *v90;
        *(_BYTE *)(*(v90 - 1) + 1369) = 1;
        *(_BYTE *)(v92 + 1369) = 1;
        v90 += 2;
        v91 -= 2;
      }
      while (v91);
      if (v89 != (v89 & 0x3FFFFFFFFFFFFFFELL))
      {
        v87 += 8 * (v89 & 0x3FFFFFFFFFFFFFFELL);
        do
        {
LABEL_138:
          v93 = *(_QWORD *)v87;
          v87 += 8;
          *(_BYTE *)(v93 + 1369) = 1;
        }
        while (v87 != v86);
      }
    }
  }
LABEL_30:
  if (v8 + 1 >= v10)
    v26 = 1 << v9;
  else
    v26 = 0;
  if (v8 >= -1)
    v27 = -v26;
  else
    v27 = 1 << v9;
  v28 = v27 + v8 + 1;
  v29 = result;
  v30 = v5;
  do
  {
    v34 = v30[8];
    v35 = v34 < v28;
    if (v34 == v28 && (v36 = v30[9], v35 = v36 < v7, v36 == v7))
      v31 = v30[10] < v9;
    else
      v31 = v35;
    v32 = !v31;
    if (v31)
      v33 = v30 + 2;
    else
      v33 = v30;
    if (v32)
      v29 = v30;
    v30 = (_DWORD *)*v33;
  }
  while (*v33);
  if (v29 == result)
    goto LABEL_65;
  v37 = v29[8];
  v38 = v28 < v37;
  if (v28 == v37)
  {
    v39 = v29[9];
    v38 = v7 < v39;
    if (v7 == v39)
    {
      if (v9 >= v29[10])
        goto LABEL_54;
LABEL_65:
      *(_BYTE *)(a3 + 1) = 0;
      goto LABEL_66;
    }
  }
  if (v38)
    goto LABEL_65;
LABEL_54:
  *(_BYTE *)(a3 + 1) = 1;
  if (*((unsigned __int8 *)v29 + 51) == v3)
    goto LABEL_66;
  *((_BYTE *)v29 + 51) = v3;
  v41 = (char *)*((_QWORD *)v29 + 7);
  v40 = (char *)*((_QWORD *)v29 + 8);
  if (v41 == v40)
    goto LABEL_66;
  v42 = v40 - v41 - 8;
  if (v42 >= 8)
  {
    v43 = (v42 >> 3) + 1;
    v44 = (uint64_t *)(v41 + 8);
    v45 = v43 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v46 = *v44;
      *(_BYTE *)(*(v44 - 1) + 1369) = 1;
      *(_BYTE *)(v46 + 1369) = 1;
      v44 += 2;
      v45 -= 2;
    }
    while (v45);
    if (v43 == (v43 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_66;
    v41 += 8 * (v43 & 0x3FFFFFFFFFFFFFFELL);
  }
  do
  {
    v47 = *(_QWORD *)v41;
    v41 += 8;
    *(_BYTE *)(v47 + 1369) = 1;
  }
  while (v41 != v40);
LABEL_66:
  v48 = v7 + 1;
  v49 = result;
  v50 = v5;
  do
  {
    v54 = v50[8];
    if (v54 == v15)
    {
      v55 = v50[9];
      if (v55 == v48)
        v51 = v50[10] < v9;
      else
        v51 = v55 <= v7;
    }
    else
    {
      v51 = v54 < v15;
    }
    v52 = !v51;
    if (v51)
      v53 = v50 + 2;
    else
      v53 = v50;
    if (v52)
      v49 = v50;
    v50 = (_DWORD *)*v53;
  }
  while (*v53);
  if (v49 == result)
    goto LABEL_94;
  v56 = v49[8];
  v57 = v15 < v56;
  if (v15 == v56)
  {
    v58 = v49[9];
    v57 = v48 < v58;
    if (v48 == v58)
    {
      if (v9 >= v49[10])
        goto LABEL_83;
LABEL_94:
      *(_BYTE *)(a3 + 2) = 0;
      goto LABEL_95;
    }
  }
  if (v57)
    goto LABEL_94;
LABEL_83:
  *(_BYTE *)(a3 + 2) = 1;
  if (*((unsigned __int8 *)v49 + 48) == v3)
    goto LABEL_95;
  *((_BYTE *)v49 + 48) = v3;
  v59 = (char *)*((_QWORD *)v49 + 7);
  v60 = (char *)*((_QWORD *)v49 + 8);
  if (v59 == v60)
    goto LABEL_95;
  v61 = v60 - v59 - 8;
  if (v61 >= 8)
  {
    v62 = (v61 >> 3) + 1;
    v63 = (uint64_t *)(v59 + 8);
    v64 = v62 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      v65 = *v63;
      *(_BYTE *)(*(v63 - 1) + 1369) = 1;
      *(_BYTE *)(v65 + 1369) = 1;
      v63 += 2;
      v64 -= 2;
    }
    while (v64);
    if (v62 == (v62 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_95;
    v59 += 8 * (v62 & 0x3FFFFFFFFFFFFFFELL);
  }
  do
  {
    v66 = *(_QWORD *)v59;
    v59 += 8;
    *(_BYTE *)(v66 + 1369) = 1;
  }
  while (v59 != v60);
LABEL_95:
  if (v8 <= v10)
    v67 = 0;
  else
    v67 = 1 << v9;
  if (v8 >= 1)
    v10 = -v67;
  v68 = v8 + v10 - 1;
  do
  {
    v72 = v5[8];
    v73 = v72 < v68;
    if (v72 == v68 && (v74 = v5[9], v73 = v74 < v7, v74 == v7))
      v69 = v5[10] < v9;
    else
      v69 = v73;
    v70 = !v69;
    if (v69)
      v71 = v5 + 2;
    else
      v71 = v5;
    if (v70)
      v11 = v5;
    v5 = (_DWORD *)*v71;
  }
  while (*v71);
  if (v11 == result)
    goto LABEL_129;
  v75 = v11[8];
  v76 = v68 < v75;
  if (v68 != v75 || (v77 = v11[9], v76 = v7 < v77, v7 != v77))
  {
    if (!v76)
      goto LABEL_118;
LABEL_129:
    *(_BYTE *)(a3 + 3) = 0;
    return result;
  }
  if (v9 < v11[10])
    goto LABEL_129;
LABEL_118:
  *(_BYTE *)(a3 + 3) = 1;
  if (*((unsigned __int8 *)v11 + 49) != v3)
  {
    *((_BYTE *)v11 + 49) = v3;
    v78 = (char *)*((_QWORD *)v11 + 7);
    v79 = (char *)*((_QWORD *)v11 + 8);
    if (v78 != v79)
    {
      v80 = v79 - v78 - 8;
      if (v80 < 8)
        goto LABEL_125;
      v81 = (v80 >> 3) + 1;
      v82 = (uint64_t *)(v78 + 8);
      v83 = v81 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v84 = *v82;
        *(_BYTE *)(*(v82 - 1) + 1369) = 1;
        *(_BYTE *)(v84 + 1369) = 1;
        v82 += 2;
        v83 -= 2;
      }
      while (v83);
      if (v81 != (v81 & 0x3FFFFFFFFFFFFFFELL))
      {
        v78 += 8 * (v81 & 0x3FFFFFFFFFFFFFFELL);
        do
        {
LABEL_125:
          v85 = *(_QWORD *)v78;
          v78 += 8;
          *(_BYTE *)(v85 + 1369) = 1;
        }
        while (v78 != v79);
      }
    }
  }
  return result;
}

void md::TransitInterTileMediator::populateSectionTerminusPaths(int a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  _BYTE *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  char *v57;

  if (a3 != a4)
  {
    v4 = a3;
    do
    {
      v7 = (_BYTE *)v4[7];
      v8 = (_BYTE *)v4[8];
      while (v7 != v8)
      {
        if (v7[93])
        {
          if (v7[32] == 2 && v7[33] == a1)
          {
            v16 = *(_QWORD **)(a2 + 8);
            v15 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v16 >= v15)
            {
              v22 = *(_QWORD **)a2;
              v23 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v16 - *(_QWORD *)a2) >> 3);
              v24 = v23 + 1;
              if (v23 + 1 > 0x666666666666666)
                goto LABEL_72;
              v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (_QWORD)v22) >> 3);
              if (2 * v25 > v24)
                v24 = 2 * v25;
              if (v25 >= 0x333333333333333)
                v26 = 0x666666666666666;
              else
                v26 = v24;
              if (v26 > 0x666666666666666)
                goto LABEL_73;
              v27 = 40 * v26;
              v28 = (char *)operator new(40 * v26);
              v29 = &v28[40 * v23];
              *(_QWORD *)v29 = v4;
              v30 = *(_QWORD *)(*v4 + 56);
              v31 = *(_QWORD *)(*v4 + 64);
              if (v31 >= v30)
                v32 = *(_QWORD *)(*v4 + 56);
              else
                v32 = *(_QWORD *)(*v4 + 64);
              if (v31 > v30)
                v30 = *(_QWORD *)(*v4 + 64);
              *((_QWORD *)v29 + 1) = v32;
              *((_QWORD *)v29 + 2) = v30;
              *(int64x2_t *)(v29 + 24) = vdupq_n_s64((unint64_t)v7);
              if (v16 == v22)
              {
                v34 = &v28[40 * v23];
              }
              else
              {
                v33 = &v28[40 * v23];
                do
                {
                  v34 = v33 - 40;
                  v35 = *(_OWORD *)(v16 - 5);
                  v36 = *(_OWORD *)(v16 - 3);
                  *((_QWORD *)v33 - 1) = *(v16 - 1);
                  *(_OWORD *)(v33 - 24) = v36;
                  *(_OWORD *)(v33 - 40) = v35;
                  v16 -= 5;
                  v33 -= 40;
                }
                while (v16 != v22);
              }
              v37 = &v28[v27];
              v21 = v29 + 40;
              *(_QWORD *)a2 = v34;
              *(_QWORD *)(a2 + 8) = v29 + 40;
              *(_QWORD *)(a2 + 16) = v37;
              if (v22)
                operator delete(v22);
            }
            else
            {
              *v16 = v4;
              v17 = (uint64_t *)(*v4 + 64);
              v18 = *v17;
              v19 = (uint64_t *)(*v4 + 56);
              v20 = *v17 >= (unint64_t)*v19;
              if (*v17 >= (unint64_t)*v19)
                v18 = *(_QWORD *)(*v4 + 56);
              v16[1] = v18;
              if (!v20)
                v17 = v19;
              v16[2] = *v17;
              v16[3] = v7;
              v16[4] = v7;
              v21 = v16 + 5;
            }
            *(_QWORD *)(a2 + 8) = v21;
          }
          if (v7[72] == 2 && v7[73] == a1)
          {
            v39 = v7 + 40;
            v41 = *(_QWORD **)(a2 + 8);
            v40 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v41 < v40)
            {
              *v41 = v4;
              v9 = (uint64_t *)(*v4 + 64);
              v10 = *v9;
              v11 = (uint64_t *)(*v4 + 56);
              v12 = *v9 >= (unint64_t)*v11;
              if (*v9 >= (unint64_t)*v11)
                v10 = *(_QWORD *)(*v4 + 56);
              v41[1] = v10;
              if (!v12)
                v9 = v11;
              v41[2] = *v9;
              v41[3] = v7;
              v41[4] = v39;
              v13 = v41 + 5;
            }
            else
            {
              v42 = *(_QWORD **)a2;
              v43 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v41 - *(_QWORD *)a2) >> 3);
              v44 = v43 + 1;
              if (v43 + 1 > 0x666666666666666)
LABEL_72:
                abort();
              v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (_QWORD)v42) >> 3);
              if (2 * v45 > v44)
                v44 = 2 * v45;
              if (v45 >= 0x333333333333333)
                v46 = 0x666666666666666;
              else
                v46 = v44;
              if (v46 > 0x666666666666666)
LABEL_73:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v47 = 40 * v46;
              v48 = (char *)operator new(40 * v46);
              v49 = &v48[40 * v43];
              *(_QWORD *)v49 = v4;
              v50 = *(_QWORD *)(*v4 + 56);
              v51 = *(_QWORD *)(*v4 + 64);
              if (v51 >= v50)
                v52 = *(_QWORD *)(*v4 + 56);
              else
                v52 = *(_QWORD *)(*v4 + 64);
              if (v51 > v50)
                v50 = *(_QWORD *)(*v4 + 64);
              *((_QWORD *)v49 + 1) = v52;
              *((_QWORD *)v49 + 2) = v50;
              *((_QWORD *)v49 + 3) = v7;
              *((_QWORD *)v49 + 4) = v39;
              if (v41 == v42)
              {
                v54 = &v48[40 * v43];
              }
              else
              {
                v53 = &v48[40 * v43];
                do
                {
                  v54 = v53 - 40;
                  v55 = *(_OWORD *)(v41 - 5);
                  v56 = *(_OWORD *)(v41 - 3);
                  *((_QWORD *)v53 - 1) = *(v41 - 1);
                  *(_OWORD *)(v53 - 24) = v56;
                  *(_OWORD *)(v53 - 40) = v55;
                  v41 -= 5;
                  v53 -= 40;
                }
                while (v41 != v42);
              }
              v57 = &v48[v47];
              v13 = v49 + 40;
              *(_QWORD *)a2 = v54;
              *(_QWORD *)(a2 + 8) = v49 + 40;
              *(_QWORD *)(a2 + 16) = v57;
              if (v42)
                operator delete(v42);
            }
            *(_QWORD *)(a2 + 8) = v13;
          }
        }
        v7 += 96;
      }
      v4 += 31;
    }
    while (v4 != a4);
  }
}

void md::LabelLayerData::~LabelLayerData(md::LabelLayerData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428F6A8;
  *((_QWORD *)this + 79) = &unk_1E428F6E8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E428F6A8;
  *((_QWORD *)this + 79) = &unk_1E428F6E8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::LabelLayerData::LabelLayerData(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  if (*a3)
  {
    v6 = *(uint64_t **)(*a3 + 24);
    v7 = (std::__shared_weak_count *)v6[1];
    v16 = *v6;
    v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v16 = 0;
    v17 = 0;
  }
  md::MapTileData::MapTileData((uint64_t)a1, a2, a4, (uint64_t)&v16, 1);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = &off_1E428F6A8;
  a1[79] = &unk_1E428F6E8;
  a1[90] = *a3;
  v12 = a3[1];
  a1[91] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_19FBF7F88(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL md::LabelLineResolvedPosition::hasText(md::LabelLineResolvedPosition *this, double a2)
{
  uint64_t *v3;
  uint64_t v4;

  if ((*(_QWORD *)this
     && *((_DWORD *)this + 10) == *(_DWORD *)(*(_QWORD *)this + 252)
     && *((_QWORD *)this + 3)
     && (*((__int16 *)this + 17) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), a2), *(_QWORD *)this)
     && *((_DWORD *)this + 10) == *(_DWORD *)(*(_QWORD *)this + 252))
    && (v3 = (uint64_t *)*((_QWORD *)this + 3)) != 0
    && (*((__int16 *)this + 17) & 0x80000000) == 0
    && (v4 = *v3) != 0)
  {
    return *(unsigned __int8 *)(v4 + 38) != 255;
  }
  else
  {
    return 0;
  }
}

void altitude::GeoRegionalResourceLoader::~GeoRegionalResourceLoader(altitude::GeoRegionalResourceLoader *this)
{
  *(_QWORD *)this = off_1E42C32B8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::GeoRegionalResourceLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C32B8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::GeoRegionalResourceLoader *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FBF80B4(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void sub_19FBF813C(_Unwind_Exception *a1)
{
  karo::AsyncRequestManager *v1;

  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

_QWORD *altitude::GeoRegionalResourceLoader::createRequest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  pthread_mutex_t *v8;
  _QWORD *v9;
  _BYTE *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  id obj;
  void *v48;
  karo::Job *v49;
  _QWORD v50[4];
  id v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[3];
  char v62;
  _QWORD v63[3];
  uint64_t v64;
  _QWORD v65[7];
  std::__shared_weak_count *v66;
  _QWORD v67[7];
  std::__shared_weak_count *v68;
  _QWORD v69[4];
  pthread_mutexattr_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = operator new();
  v4 = *(_QWORD *)(a1 + 32);
  v49 = (karo::Job *)v3;
  v5 = (char *)operator new(0x20uLL);
  strcpy(v5, "/georegionalresourceloadjob");
  karo::Job::Job(v3, v4);
  *(_BYTE *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v3 = off_1E42C2C58;
  std::string::__init_copy_ctor_external((std::string *)(v3 + 192), v5, 0x1BuLL);
  operator delete(v5);
  *(_QWORD *)v3 = &off_1E42C6448;
  *(_BYTE *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = GEOTileKeyMake();
  *(_QWORD *)(v3 + 240) = v6;
  v7 = (_QWORD *)operator new();
  *v7 = 0;
  pthread_mutexattr_init(&v70);
  pthread_mutexattr_settype(&v70, 2);
  v8 = (pthread_mutex_t *)operator new();
  pthread_mutex_init(v8, &v70);
  pthread_mutexattr_destroy(&v70);
  *v7 = v8;
  *(_QWORD *)(v3 + 248) = v7;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E42E8130;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  *(_QWORD *)(v3 + 256) = v9;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  *(_QWORD *)(v3 + 264) = v10;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E42E8E50;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  *(_QWORD *)(v3 + 272) = v11;
  *(_BYTE *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 288) = &off_1E42B5090;
  *(_QWORD *)(v3 + 296) = 0;
  if (v4)
  {
    v12 = *(id *)(v4 + 184);
    v13 = v12;
    if (v12)
      v14 = v12;
    v15 = *(void **)(v3 + 296);
    *(_QWORD *)(v3 + 296) = v13;

  }
  result = (_QWORD *)operator new();
  *result = &off_1E42E8C90;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  if (!*(_BYTE *)(v3 + 280))
  {
    *(_BYTE *)(v3 + 280) = 1;
    v69[0] = 0;
    v69[1] = v69;
    v69[2] = 0x2020000000;
    v69[3] = v3;
    v67[3] = __Block_byref_object_copy__25775;
    v67[4] = __Block_byref_object_dispose__25776;
    v18 = *(_QWORD *)(v3 + 264);
    v17 = *(std::__shared_weak_count **)(v3 + 272);
    v67[5] = "";
    v67[6] = v18;
    v67[0] = 0;
    v67[1] = v67;
    v67[2] = 0x4012000000;
    v68 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v44 = result;
    v65[0] = 0;
    v65[1] = v65;
    v65[2] = 0x4012000000;
    v65[3] = __Block_byref_object_copy__4_25778;
    v65[4] = __Block_byref_object_dispose__5_25779;
    v22 = *(_QWORD *)(v3 + 248);
    v21 = *(std::__shared_weak_count **)(v3 + 256);
    v65[5] = "";
    v65[6] = v22;
    v66 = v21;
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "activeTileGroup");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = GEOResourceFilterScaleForScale();
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", &unk_1E4347990);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "regionalResourceKeysForTileKey:scale:scenarios:", v3 + 232, v27, v28);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v45, "count"))
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v63[0] = 0;
      v63[1] = v63;
      v63[2] = 0x2020000000;
      v64 = 0;
      v64 = objc_msgSend(v45, "count");
      v61[0] = 0;
      v61[1] = v61;
      v61[2] = 0x2020000000;
      v62 = 0;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      obj = v45;
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, &v70, 16);
      if (v29)
      {
        v30 = *(_QWORD *)v58;
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v58 != v30)
              objc_enumerationMutation(obj);
            v32 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<altitude::GeoRegionalResourceLoader> %p"), v49);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = qos_class_self();
            v36 = *((id *)v49 + 37);
            dispatch_get_global_queue(0, 0);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v50[0] = MEMORY[0x1E0C809B0];
            v50[1] = 3221225472;
            v50[2] = ___ZN8altitude26GeoRegionalResourceLoadJob8startJobEv_block_invoke;
            v50[3] = &unk_1E42F4E00;
            v52 = v65;
            v53 = v67;
            v54 = v61;
            v55 = v69;
            v51 = v48;
            v56 = v63;
            objc_msgSend(v33, "loadKey:priority:forClient:options:reason:qos:signpostID:auditToken:callbackQ:beginNetwork:callback:", v32, 2147483646, v34, 3, 1, v35, 0, v36, v37, 0, v50);

          }
          v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, &v70, 16);
        }
        while (v29);
      }

      _Block_object_dispose(v61, 8);
      _Block_object_dispose(v63, 8);

    }
    else
    {
      karo::Job::step((karo::Job *)v3);
    }

    _Block_object_dispose(v65, 8);
    v38 = v66;
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    _Block_object_dispose(v67, 8);
    v41 = v68;
    if (v68)
    {
      v42 = (unint64_t *)&v68->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    _Block_object_dispose(v69, 8);
    v3 = (uint64_t)v49;
    result = v44;
  }
  *a2 = v3;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_19FBF8834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, karo::AsyncFileLoader::LoadJob *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);

  _Block_object_dispose(&a49, 8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  _Block_object_dispose(&a57, 8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  _Block_object_dispose(&a65, 8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void altitude::GeoRegionalResourceLoader::requestTile(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void (**v21)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v22;
  std::__shared_weak_count *v23;

  karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT(a1, a2, a3, a4, a5, a6, 0, &v21);
  v9 = v22;
  v8 = v23;
  *a7 = &off_1E42C2D08;
  a7[1] = v9;
  a7[2] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v9)
  {
    v12 = (unsigned int *)(v9 + 128);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v9 = a7[1];
    v8 = (std::__shared_weak_count *)a7[2];
  }
  *a7 = &off_1E42C2C18;
  a7[3] = 0;
  a7[4] = 0;
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    a7[3] = v9;
    a7[4] = v8;
  }
  else
  {
    a7[3] = v9;
  }
  v21 = &off_1E42C2D08;
  if (v22)
  {
    v16 = (unsigned int *)(v22 + 128);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

double altitude::GeoRegionalResourceLoader::createAndQueueTileRequest@<D0>(_QWORD *a1@<X0>, int a2@<W2>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  double v11[3];
  int v12;
  __int128 v13;

  v12 = a2;
  (*(void (**)(double *__return_ptr))(*a1 + 64))(v11);
  v5 = a1[6];
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)&v11[1];
    v13 = *(_OWORD *)v11;
    if (*(_QWORD *)&v11[1])
    {
      v7 = (unint64_t *)(*(_QWORD *)&v11[1] + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      karo::JobManager::queueJob(v5, &v13);
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 - 1, v7));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v5, &v13);
    }
  }
  result = v11[0];
  *a3 = *(_OWORD *)v11;
  return result;
}

__n128 __Block_byref_object_copy__25775(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__25776(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

__n128 __Block_byref_object_copy__4_25778(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__5_25779(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN8altitude26GeoRegionalResourceLoadJob8startJobEv_block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  pthread_mutex_t **v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;

  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "decodedRepresentation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = objc_alloc_init(MEMORY[0x1E0D27400]);
    v18 = 1;
    if (objc_msgSend(v11, "canDecodeTile:quickly:", a2, &v18))
    {
      objc_msgSend(v8, "data");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "decodeTile:forKey:", v12, a2);
      v13 = objc_claimAutoreleasedReturnValue();

      v10 = (void *)v13;
    }

  }
  v14 = *(pthread_mutex_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  pthread_mutex_lock(*v14);
  if (!**(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (!*(_BYTE *)(v15 + 24))
    {
      if (v9)
      {
        *(_BYTE *)(v15 + 24) = 1;
        GEOStringFromTileKey();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        NSLog((NSString *)CFSTR("Regional resource download failed: %@ Error: %@"), v16, v9);

        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
        if (!--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
        {
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) + 224), *(id *)(a1 + 32));
          karo::Job::step(*(karo::Job **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
        }
      }
    }
  }
  pthread_mutex_unlock(*v14);

}

void sub_19FBF8E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  pthread_mutex_t **v5;

  pthread_mutex_unlock(*v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::GeoRegionalResourceLoadJob *,std::shared_ptr<altitude::GeoRegionalResourceLoadJob>::__shared_ptr_default_delete<altitude::GeoRegionalResourceLoadJob,altitude::GeoRegionalResourceLoadJob>,std::allocator<altitude::GeoRegionalResourceLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::GeoRegionalResourceLoadJob *,std::shared_ptr<altitude::GeoRegionalResourceLoadJob>::__shared_ptr_default_delete<altitude::GeoRegionalResourceLoadJob,altitude::GeoRegionalResourceLoadJob>,std::allocator<altitude::GeoRegionalResourceLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<karo::Mutex *,std::shared_ptr<karo::Mutex>::__shared_ptr_default_delete<karo::Mutex,karo::Mutex>,std::allocator<karo::Mutex>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<karo::Mutex *,std::shared_ptr<karo::Mutex>::__shared_ptr_default_delete<karo::Mutex,karo::Mutex>,std::allocator<karo::Mutex>>::__on_zero_shared(uint64_t result)
{
  pthread_mutex_t **v1;

  v1 = *(pthread_mutex_t ***)(result + 24);
  if (v1)
  {
    pthread_mutex_destroy(*v1);
    if (*v1)
      MEMORY[0x1A1AF4E00](*v1, 0x1000C40FA0F61DDLL);
    *v1 = 0;
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void altitude::GeoRegionalResourceLoadJob::~GeoRegionalResourceLoadJob(altitude::GeoRegionalResourceLoadJob *this)
{
  altitude::GeoRegionalResourceLoadJob::~GeoRegionalResourceLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  pthread_mutex_t **v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E42C6448;
  v2 = (pthread_mutex_t **)*((_QWORD *)this + 31);
  pthread_mutex_lock(*v2);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  v3 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v3 & 1) == 0)
    (*(void (**)(altitude::GeoRegionalResourceLoadJob *))(*(_QWORD *)this + 16))(this);
  **((_BYTE **)this + 33) = 1;
  pthread_mutex_unlock(*v2);
  *((_QWORD *)this + 36) = &off_1E42B5090;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  *(_QWORD *)this = off_1E42C2C58;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  karo::Job::~Job(this);
}

uint64_t altitude::GeoRegionalResourceLoadJob::cancel(pthread_mutex_t **this)
{
  int v2;
  int v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t result;

  pthread_mutex_lock(this[19]);
  v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  if ((v2 & 2) == 0)
  {
    pthread_mutex_lock(this[19]);
    v3 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(this[19]);
    if ((v3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<altitude::GeoRegionalResourceLoader> %p"), this);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "cancelAllForClient:", v5);

    }
  }
  karo::Job::cancel((karo::Job *)this);
  pthread_mutex_lock(this[19]);
  v6 = *((_DWORD *)this + 40);
  result = pthread_mutex_unlock(this[19]);
  if ((v6 & 1) == 0)
    return karo::Job::step((karo::Job *)this);
  return result;
}

void sub_19FBF9094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t altitude::GeoRegionalResourceLoadJob::jobStep(altitude::GeoRegionalResourceLoadJob *this)
{
  *((_BYTE *)this + 216) = *((_QWORD *)this + 28) != 0;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

uint64_t altitude::GeoRegionalResourceLoadJob::succeeded(altitude::GeoRegionalResourceLoadJob *this)
{
  return *((unsigned __int8 *)this + 216);
}

BOOL altitude::GeoRegionalResourceLoadJob::getDataSize(altitude::GeoRegionalResourceLoadJob *this)
{
  return *((_QWORD *)this + 28) != 0;
}

uint64_t altitude::GeoRegionalResourceLoadJob::getData(altitude::GeoRegionalResourceLoadJob *this)
{
  return *((_QWORD *)this + 28);
}

void sub_19FBF923C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  pthread_mutex_t **v3;
  pthread_mutex_t **v4;

  v4 = v3;
  pthread_mutex_unlock(*v4);
  *(_QWORD *)(v1 + 288) = &off_1E42B5090;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 264);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);

  karo::AsyncFileLoader::LoadJob::~LoadJob((void **)v1);
  _Unwind_Resume(a1);
}

void md::FlyoverRouteBatch::~FlyoverRouteBatch(md::FlyoverRouteBatch *this)
{
  md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  malloc_zone_t *zone;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  geo::read_write_lock *v16;
  const char *v17;
  _QWORD *v18;
  unint64_t v19;
  void (***v20)(void);
  void (**v21)(void);
  _QWORD **v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v34;
  uint64_t v35;

  *(_QWORD *)a1 = &off_1E42AF288;
  v2 = *(_QWORD **)(a1 + 376);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 384);
    v4 = *(void **)(a1 + 376);
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          v8 = *(_QWORD **)(v6 + 56);
          if (v8)
          {
            v9 = *(_QWORD **)(v6 + 64);
            v5 = *(_QWORD *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                v12 = *--v9;
                v11 = v12;
                *v9 = 0;
                if (v12)
                {
                  if ((v13 & 1) == 0)
                  {
                    v35 = v11;
                    v11 = v35;
                    if (v14)
                    {
                      v34 = v2;
                      v15 = operator new();
                      *(_QWORD *)(v15 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v15 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v15 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v15 = &off_1E42B5668;
                      *(_QWORD *)(v15 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v15 + 72) = 0u;
                      *(_OWORD *)(v15 + 88) = 0u;
                      *(_OWORD *)(v15 + 104) = 0u;
                      *(_OWORD *)(v15 + 120) = 0u;
                      *(_OWORD *)(v15 + 136) = 0u;
                      *(_OWORD *)(v15 + 152) = 0u;
                      *(_OWORD *)(v15 + 168) = 0u;
                      *(_OWORD *)(v15 + 184) = 0u;
                      *(_OWORD *)(v15 + 200) = 0u;
                      *(_OWORD *)(v15 + 216) = 0u;
                      *(_OWORD *)(v15 + 232) = 0u;
                      *(_QWORD *)(v15 + 248) = 0;
                      *(_OWORD *)(v15 + 56) = 0u;
                      v16 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v15 + 56), 0);
                      if ((_DWORD)v16)
                        geo::read_write_lock::logFailure(v16, (uint64_t)"initialization", v17);
                      zone = malloc_create_zone(0, 0);
                      *(_QWORD *)(v15 + 48) = zone;
                      malloc_set_zone_name(zone, "VectorKitLabels");
                      *(_QWORD *)(v15 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v15;
                      v2 = v34;
                      v11 = v35;
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v11, 80);
                }
              }
              while (v9 != v8);
              v5 = *(_QWORD *)(v6 + 56);
            }
            *(_QWORD *)(v6 + 64) = v8;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 80) + 40))(*(_QWORD *)(v6 + 80), v5, *(_QWORD *)(v6 + 72) - v5);
          }
          MEMORY[0x1A1AF4E00](v6, 0x1020C4097AEC518);
        }
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 376);
    }
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v4);
  }
  v18 = *(_QWORD **)(a1 + 352);
  do
  {
    if (v18[1])
    {
      v19 = 0;
      v20 = (void (***)(void))(v18 + 2);
      do
      {
        v21 = *v20;
        v20 += 15;
        (*v21)();
        ++v19;
      }
      while (v19 < v18[1]);
    }
    v18[1] = 0;
    v18 = (_QWORD *)*v18;
  }
  while (v18);
  v22 = *(_QWORD ***)(a1 + 352);
  *(_QWORD *)(a1 + 360) = v22;
  v23 = *v22;
  *v22 = 0;
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      free(v23);
      v23 = v24;
    }
    while (v24);
    v22 = *(_QWORD ***)(a1 + 352);
  }
  free(v22);
  v25 = *(void **)(a1 + 328);
  if (v25)
  {
    *(_QWORD *)(a1 + 336) = v25;
    operator delete(v25);
  }
  v26 = *(_QWORD *)(a1 + 296);
  if (v26)
  {
    v27 = *(_QWORD *)(a1 + 304);
    v28 = *(_QWORD *)(a1 + 296);
    if (v27 != v26)
    {
      v29 = *(_QWORD *)(a1 + 304);
      do
      {
        v31 = *(void **)(v29 - 24);
        v29 -= 24;
        v30 = v31;
        if (v31)
        {
          *(_QWORD *)(v27 - 16) = v30;
          operator delete(v30);
        }
        v27 = v29;
      }
      while (v29 != v26);
      v28 = *(_QWORD *)(a1 + 296);
    }
    *(_QWORD *)(a1 + 304) = v26;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 320) + 40))(*(_QWORD *)(a1 + 320), v28, *(_QWORD *)(a1 + 312) - v28);
  }
  v32 = *(void **)(a1 + 272);
  if (v32)
  {
    *(_QWORD *)(a1 + 280) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(a1 + 144) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 160) = 3131955885;
  *(_QWORD *)(a1 + 16) = &off_1E42B59B0;
  *(_QWORD *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::FlyoverRouteLayer::~FlyoverRouteLayer(md::FlyoverRouteLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF4C8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[10];
  a1[10] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverRoute::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverRoute::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverRoute::Default>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoute::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoute::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFC30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoute::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::SatelliteGridMapEngineMode::~SatelliteGridMapEngineMode(md::SatelliteGridMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

md::SatelliteGridMapEngineMode *md::SatelliteGridMapEngineMode::SatelliteGridMapEngineMode(md::SatelliteGridMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[2];

  v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 4);
  *(_QWORD *)v2 = &off_1E42A3598;
  *(_BYTE *)(v2 + 49) = 1;
  *(_DWORD *)(v2 + 52) = 21;
  LOWORD(v6) = 5376;
  *((_QWORD *)&v6 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v2 + 384), (unsigned __int8 *)&v6);
  LOWORD(v6) = 5376;
  *((_QWORD *)&v6 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v6);
  LOWORD(v6) = 5376;
  *((_QWORD *)&v6 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v6);
  LOBYTE(v6) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v6)+ 17) = 0;
  LOBYTE(v6) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x33u, &v6)+ 17) = 0;
  LOBYTE(v6) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v6)+ 17) = 0;
  v21 = 0x4AC7AB7561675F6;
  v22 = "md::GridLogic]";
  v23[0] = 13;
  *(_QWORD *)&v18 = 0x336A901A15BB7353;
  *((_QWORD *)&v18 + 1) = "md::GridContext]";
  v19 = 15;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C28;
  *(_QWORD *)&v8 = 21;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8B38;
  v17 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  v21 = 0x79FE0BD9535D5C4DLL;
  v22 = "md::AnchorLogic]";
  v23[0] = 15;
  *(_QWORD *)&v18 = 0x63B6FE00C0848868;
  *((_QWORD *)&v18 + 1) = "md::AnchorContext]";
  v19 = 17;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F87F0;
  v8 = unk_1E42F8800;
  v9 = xmmword_1E42F8810;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8E88;
  v17 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v18 = 0x8E629317B3523E63;
  *((_QWORD *)&v18 + 1) = "md::CameraLogic]";
  v19 = 15;
  *(_QWORD *)&v15 = 0x1AF456233693CD46;
  *((_QWORD *)&v15 + 1) = "md::CameraContext]";
  *(_QWORD *)&v16 = 17;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8820;
  *(_QWORD *)&v8 = 20;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v21 = 0x17767EADC5B287BLL;
  v22 = "md::ElevationLogic]";
  v23[0] = 18;
  *(_QWORD *)&v18 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v18 + 1) = "md::ElevationContext]";
  v19 = 20;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F88C8;
  v8 = unk_1E42F88D8;
  v9 = xmmword_1E42F88E8;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F88F8;
  v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v15 = 0xD2443A61CED86C69;
  *((_QWORD *)&v15 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v16 = 17;
  *(_QWORD *)&v6 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v6 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v7 = 19;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v15 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v15 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v16 = 14;
  *(_QWORD *)&v6 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v6 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v7 = 21;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v15 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v15 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v16 = 18;
  *(_QWORD *)&v6 = 0x7851AF310F49C988;
  *((_QWORD *)&v6 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v7 = 25;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(_QWORD *)&v18 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v18 + 1) = "md::TileSelectionLogic]";
  v19 = 22;
  *(_QWORD *)&v15 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v15 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v16 = 24;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 3;
  v9 = xmmword_1E42F8B10;
  v10 = unk_1E42F8B20;
  *(_QWORD *)&v11 = 21;
  v7 = xmmword_1E42F8AF0;
  v8 = unk_1E42F8B00;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v3 = 0xCBF29CE484222325;
  v4 = 0x26u;
  do
    v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_927[v4++]);
  while (v4 != 368);
  v21 = v3;
  v22 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v23[0] = 330;
  *(_QWORD *)&v18 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v18 + 1) = "md::ResolvedTileSelectionContext]";
  v19 = 32;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8B38;
  *(_QWORD *)&v8 = 24;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8B50;
  v17 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v18 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v18 + 1) = "md::PendingSceneLogic]";
  v19 = 21;
  *(_QWORD *)&v15 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v15 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v16 = 23;
  BYTE8(v16) = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 5;
  v11 = xmmword_1E42F8BA8;
  v12 = *(_OWORD *)&off_1E42F8BB8;
  v13 = xmmword_1E42F8BC8;
  v14 = 25;
  v7 = xmmword_1E42F8B68;
  v8 = unk_1E42F8B78;
  v9 = xmmword_1E42F8B88;
  v10 = unk_1E42F8B98;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  v21 = 0x20A1ED17D78F322BLL;
  v22 = "md::LabelsLogic]";
  v23[0] = 15;
  *(_QWORD *)&v18 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v18 + 1) = "md::LabelsContext]";
  v19 = 17;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C28;
  *(_QWORD *)&v8 = 21;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C40;
  v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  v21 = 0x653D1F33EF15EF04;
  v22 = "md::LoadingStatusLogic]";
  v23[0] = 22;
  *(_QWORD *)&v18 = 0x90B6813830DCB581;
  *((_QWORD *)&v18 + 1) = "md::LoadingStatusContext]";
  v19 = 24;
  v20 = 1;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 1;
  v7 = xmmword_1E42F8C58;
  *(_QWORD *)&v8 = 16;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C70;
  v17 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(_QWORD *)&v15 = 0x701C95861FC50076;
  *((_QWORD *)&v15 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v16 = 17;
  *(_QWORD *)&v6 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v6 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v7 = 19;
  BYTE8(v7) = 1;
  *(_QWORD *)&v18 = &v19;
  *((_QWORD *)&v18 + 1) = 0;
  v21 = (uint64_t)v23;
  v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  v21 = 0x2B7C4502BD3C99C6;
  v22 = "md::ResolvedSceneLogic]";
  v23[0] = 22;
  *(_QWORD *)&v18 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v18 + 1) = "md::SceneContext]";
  v19 = 16;
  v20 = 1;
  *(_QWORD *)&v15 = &v16;
  *((_QWORD *)&v15 + 1) = 1;
  v16 = xmmword_1E42F8C10;
  v17 = 23;
  *(_QWORD *)&v6 = &v7;
  *((_QWORD *)&v6 + 1) = 2;
  v7 = xmmword_1E42F8BE0;
  v8 = unk_1E42F8BF0;
  v9 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v15, (uint64_t)&v6);
  LODWORD(v6) = 28;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x1Cu, &v6)+ 18) = 1;
  return this;
}

void sub_19FBFA3B0(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::MuninSceneContext::~MuninSceneContext(md::MuninSceneContext *this)
{
  md::MuninSceneContext::~MuninSceneContext(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_1E4292B88;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::~__hash_table((uint64_t)this + 152);
  std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100]((uint64_t *)this + 8, 0);
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 40, v3);
    operator delete(*((void **)this + 5));
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[3];
      v7 = (_QWORD *)v2[4];
      if (v6 != v7)
      {
        do
        {
          v8 = (std::__shared_weak_count *)v6[1];
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 += 2;
        }
        while (v6 != v7);
        v6 = (_QWORD *)v2[3];
      }
      if (v6 != (_QWORD *)v2[5])
        free(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void ***)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    if (v3)
    {
      v4 = (char *)*v3;
      if (*v3)
      {
        v5 = (char *)v3[1];
        v6 = *v3;
        if (v5 != v4)
        {
          do
          {
            v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
            if (v7)
            {
              p_shared_owners = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(p_shared_owners);
              while (__stlxr(v9 - 1, p_shared_owners));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
            v5 -= 16;
          }
          while (v5 != v4);
          v6 = *v3;
        }
        v3[1] = v4;
        operator delete(v6);
      }
      MEMORY[0x1A1AF4E00](v3, 0x1020C402AA1BF7ELL);
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 272)
  {
    if (*(_BYTE *)(i - 104))
    {
      v5 = *(void **)(i - 96);
      if (v5)
      {
        *(_QWORD *)(i - 88) = v5;
        operator delete(v5);
      }
      *(_BYTE *)(i - 104) = 0;
    }
    if (*(_BYTE *)(i - 144))
    {
      v6 = *(_QWORD *)(i - 136);
      if (v6)
      {
        v7 = *(_QWORD *)(i - 128);
        v8 = *(void **)(i - 136);
        if (v7 != v6)
        {
          do
          {
            v9 = *(void **)(v7 - 80);
            if (v9 != *(void **)(v7 - 64))
              free(v9);
            v10 = *(void **)(v7 - 104);
            if (v10)
            {
              *(_QWORD *)(v7 - 96) = v10;
              operator delete(v10);
            }
            v11 = *(void **)(v7 - 128);
            if (v11)
            {
              *(_QWORD *)(v7 - 120) = v11;
              operator delete(v11);
            }
            v12 = v7 - 1992;
            v13 = *(_QWORD **)(v7 - 1904);
            v14 = *(_QWORD **)(v7 - 1896);
            if (v13 != v14)
            {
              do
              {
                v15 = (void *)v13[31];
                if (v15 != (void *)v13[33])
                  free(v15);
                v13 += 36;
              }
              while (v13 != v14);
              v13 = *(_QWORD **)(v7 - 1904);
            }
            if (v13 != *(_QWORD **)(v7 - 1888))
              free(v13);
            v7 -= 1992;
          }
          while (v12 != v6);
          v8 = *(void **)(i - 136);
        }
        *(_QWORD *)(i - 128) = v6;
        operator delete(v8);
      }
      *(_BYTE *)(i - 144) = 0;
    }
    if (*(_BYTE *)(i - 264))
      *(_BYTE *)(i - 264) = 0;
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void md::MuninSceneLogic::~MuninSceneLogic(md::MuninSceneLogic *this)
{
  md::MuninSceneLogic::~MuninSceneLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::mutex *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  void *v39;
  _BYTE *v40;
  void *v41;
  _BYTE *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  geo::read_write_lock *v47;
  const char *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E42907E8;
  atomic_store(1u, (unsigned __int8 *)this + 960);
  v2 = *(_QWORD *)(*((_QWORD *)this + 15) + 72);
  v56[0] = &off_1E42CC770;
  v57 = v56;
  geo::TaskQueue::barrierSync(v2, v56);
  v3 = v57;
  if (v57 == v56)
  {
    v4 = 4;
    v3 = v56;
    goto LABEL_5;
  }
  if (v57)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::mutex *)*((_QWORD *)this + 106);
  std::mutex::lock(v5);
  *(_BYTE *)(*((_QWORD *)this + 106) + 64) = 0;
  std::mutex::unlock(v5);
  std::mutex::lock((std::mutex *)((char *)this + 864));
  std::mutex::unlock((std::mutex *)((char *)this + 864));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 122);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 119);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 117);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 864));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 107);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (void *)*((_QWORD *)this + 101);
  if (v18)
  {
    *((_QWORD *)this + 102) = v18;
    operator delete(v18);
  }
  if (*((_BYTE *)this + 608))
    *((_BYTE *)this + 608) = 0;
  if (*((_BYTE *)this + 600))
    *((_BYTE *)this + 600) = 0;
  if (*((_BYTE *)this + 592))
    *((_BYTE *)this + 592) = 0;
  if (*((_BYTE *)this + 584))
    *((_BYTE *)this + 584) = 0;
  v19 = *((_QWORD *)this + 70);
  if (v19)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 560, v19);
    operator delete(*((void **)this + 70));
  }
  v20 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v20)
  {
    *(_QWORD *)(v20 + 40) = &off_1E42B4C90;

    v21 = *(_QWORD **)(v20 + 32);
    if (v21 == (_QWORD *)(v20 + 8))
    {
      v22 = 4;
      v21 = (_QWORD *)(v20 + 8);
    }
    else
    {
      if (!v21)
      {
LABEL_44:
        MEMORY[0x1A1AF4E00](v20, 0x10A0C401B67C7C3);
        goto LABEL_45;
      }
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
    goto LABEL_44;
  }
LABEL_45:
  v23 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (!v23)
    goto LABEL_52;
  *(_QWORD *)(v23 + 40) = &off_1E42B4C90;

  v24 = *(_QWORD **)(v23 + 32);
  if (v24 == (_QWORD *)(v23 + 8))
  {
    v25 = 4;
    v24 = (_QWORD *)(v23 + 8);
    goto LABEL_50;
  }
  if (v24)
  {
    v25 = 5;
LABEL_50:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  MEMORY[0x1A1AF4E00](v23, 0x10A0C401B67C7C3);
LABEL_52:
  v26 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v26)
  {
    v27 = *(_BYTE **)(v26 + 24);
    if (v27)
    {
      do
      {
        if (v27[112])
          v27[112] = 0;
        v38 = *(_BYTE **)v27;
        v39 = (void *)*((_QWORD *)v27 + 4);
        if (v39 != *((void **)v27 + 6))
          free(v39);
        operator delete(v27);
        v27 = v38;
      }
      while (v38);
    }
    v28 = *(void **)(v26 + 8);
    *(_QWORD *)(v26 + 8) = 0;
    if (v28)
      operator delete(v28);
    MEMORY[0x1A1AF4E00](v26, 0x10A0C402A8DDD12);
  }
  v29 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v29)
    MEMORY[0x1A1AF4E00](v29, 0x60C4044C4A2DFLL);
  v30 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v30)
  {
    v31 = *(_QWORD **)(v30 + 80);
    if (v31)
    {
      do
      {
        v32 = (_QWORD *)*v31;
        operator delete(v31);
        v31 = v32;
      }
      while (v32);
    }
    v33 = *(void **)(v30 + 64);
    *(_QWORD *)(v30 + 64) = 0;
    if (v33)
      operator delete(v33);
    MEMORY[0x1A1AF4E00](v30, 0x10A0C40091BD0E7);
  }
  v34 = (void *)*((_QWORD *)this + 60);
  if (v34)
  {
    *((_QWORD *)this + 61) = v34;
    operator delete(v34);
  }
  v35 = *((_QWORD *)this + 56);
  if (v35)
  {
    v36 = *((_QWORD *)this + 57);
    v37 = (void *)*((_QWORD *)this + 56);
    if (v36 != v35)
    {
      do
      {
        v40 = *(_BYTE **)(v36 - 24);
        if (v40)
        {
          do
          {
            if (v40[112])
              v40[112] = 0;
            v42 = *(_BYTE **)v40;
            v43 = (void *)*((_QWORD *)v40 + 4);
            if (v43 != *((void **)v40 + 6))
              free(v43);
            operator delete(v40);
            v40 = v42;
          }
          while (v42);
        }
        v41 = *(void **)(v36 - 40);
        *(_QWORD *)(v36 - 40) = 0;
        if (v41)
          operator delete(v41);
        v36 -= 48;
      }
      while (v36 != v35);
      v37 = (void *)*((_QWORD *)this + 56);
    }
    *((_QWORD *)this + 57) = v35;
    operator delete(v37);
  }
  v44 = (_QWORD *)*((_QWORD *)this + 53);
  if (v44)
  {
    do
    {
      v45 = (_QWORD *)*v44;
      operator delete(v44);
      v44 = v45;
    }
    while (v45);
  }
  v46 = (void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v46)
    operator delete(v46);
  v47 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 208));
  if ((_DWORD)v47)
    geo::read_write_lock::logFailure(v47, (uint64_t)"destruction", v48);
  v49 = (void *)*((_QWORD *)this + 23);
  if (v49)
  {
    *((_QWORD *)this + 24) = v49;
    operator delete(v49);
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

void md::MuninSceneLogic::didBecomeActive(md::MuninSceneLogic *this)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int16 v23;
  md::MuninSceneLogic *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  uint8_t buf[8];
  _QWORD *v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 832))
    return;
  v2 = (std::__shared_weak_count_vtbl *)((char *)this + 864);
  if (!std::mutex::try_lock((std::mutex *)((char *)this + 864)))
    return;
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4 = v3;
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E65A0;
  v3[1].__vftable = v2;
  v6 = &v3[1].__vftable;
  v32 = &v3[1].__vftable;
  v33 = v3;
  if (*((_QWORD *)this + 116) && *((_QWORD *)this + 118))
  {
    if (GEOGetVectorKitMuninSceneLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitMuninSceneLogicLog(void)::onceToken, &__block_literal_global_26);
    v7 = GEOGetVectorKitMuninSceneLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitMuninSceneLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_INFO, "tapSdfTexture and tapAlphaTexture are already loaded at this point!", buf, 2u);
    }
LABEL_35:
    v21 = (unint64_t *)&v4->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    return;
  }
  *(_QWORD *)buf = this;
  v30 = &v3[1].__vftable;
  v31 = v3;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = *(_QWORD *)(*((_QWORD *)this + 15) + 72);
  if (v9)
  {
    v24 = this;
    v25 = &v3[1].__vftable;
    v26 = v3;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = operator new(0x20uLL);
    *v11 = &off_1E42CC650;
    v11[1] = this;
    v11[2] = v6;
    v11[3] = v4;
    v25 = 0;
    v26 = 0;
    v35 = v11;
    geo::TaskQueue::async(&v27, v9, v34);
    v12 = v28;
    if (v28)
    {
      v13 = (unint64_t *)&v28->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v35;
    if (v35 == v34)
    {
      v16 = 4;
      v15 = v34;
    }
    else
    {
      if (!v35)
        goto LABEL_25;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  else
  {
    md::MuninSceneLogic::didBecomeActive(void)::$_0::operator()((uint64_t *)buf);
  }
LABEL_25:
  if (GEOGetVectorKitMuninSceneLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMuninSceneLogicLog(void)::onceToken, &__block_literal_global_26);
  v17 = GEOGetVectorKitMuninSceneLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMuninSceneLogicLog(void)::log, OS_LOG_TYPE_INFO))
  {
    v23 = 0;
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_INFO, "tapSdfTexture and tapAlphaTexture are successfully loaded.", (uint8_t *)&v23, 2u);
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v4 = v33;
  if (v33)
    goto LABEL_35;
}

void sub_19FBFAB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t prime;
  int8x8_t v16;
  BOOL v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  int8x8_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  size_t __n;
  _QWORD *v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char v75;

  v51 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v53, a1);
  v4 = operator new();
  v5 = v4;
  v6 = v54;
  v7 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 16) = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(_QWORD *)(v4 + 8) = v54;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_QWORD *)v5 = &off_1E4292B88;
  *(_OWORD *)(v5 + 24) = v56;
  *(_OWORD *)(v5 + 40) = v57;
  v12 = v59;
  *(_QWORD *)(v5 + 56) = v58;
  v57 = 0uLL;
  v58 = 0;
  v59 = 0;
  *(_QWORD *)(v5 + 64) = v12;
  *(_OWORD *)(v5 + 72) = v60;
  *(_OWORD *)(v5 + 88) = v61;
  *(_OWORD *)(v5 + 104) = v62;
  v13 = v63;
  *(_DWORD *)(v5 + 128) = v64;
  *(_OWORD *)(v5 + 136) = v65;
  *(_OWORD *)(v5 + 152) = 0u;
  v14 = (_QWORD *)(v5 + 152);
  *(_QWORD *)(v5 + 120) = v13;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_DWORD *)(v5 + 184) = v68;
  prime = __n;
  if (__n == 1)
  {
    prime = 2;
LABEL_26:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5 + 152, prime);
    goto LABEL_27;
  }
  if ((__n & (__n - 1)) != 0)
  {
    prime = std::__next_prime(__n);
    v16 = *(int8x8_t *)(v5 + 160);
    v17 = prime >= *(_QWORD *)&v16;
    if (prime > *(_QWORD *)&v16)
      goto LABEL_26;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    if (__n)
      goto LABEL_26;
  }
  if (!v17)
  {
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 176) / *(float *)(v5 + 184));
    if (*(_QWORD *)&v16 < 3uLL || (v19 = (uint8x8_t)vcnt_s8(v16), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v18 = std::__next_prime(v18);
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
    }
    if (prime <= v18)
      prime = v18;
    if (prime < *(_QWORD *)&v16)
      goto LABEL_26;
  }
LABEL_27:
  v50 = (_QWORD *)a2;
  v21 = v67;
  if (v67)
  {
    v52 = (_QWORD *)(v5 + 168);
    do
    {
      v22 = v21[2];
      v23 = *(_QWORD *)(v5 + 160);
      if (v23)
      {
        v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] > 1uLL)
        {
          a2 = v21[2];
          if (v22 >= v23)
            a2 = v22 % v23;
        }
        else
        {
          a2 = (v23 - 1) & v22;
        }
        v25 = *(_QWORD **)(*v14 + 8 * a2);
        if (v25)
        {
          v26 = (_QWORD *)*v25;
          if (v26)
          {
            if (v24.u32[0] < 2uLL)
            {
              while (1)
              {
                v28 = v26[1];
                if (v28 == v22)
                {
                  if (v26[2] == v22)
                    goto LABEL_96;
                }
                else if ((v28 & (v23 - 1)) != a2)
                {
                  goto LABEL_49;
                }
                v26 = (_QWORD *)*v26;
                if (!v26)
                  goto LABEL_49;
              }
            }
            do
            {
              v27 = v26[1];
              if (v27 == v22)
              {
                if (v26[2] == v22)
                  goto LABEL_96;
              }
              else
              {
                if (v27 >= v23)
                  v27 %= v23;
                if (v27 != a2)
                  break;
              }
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
        }
      }
LABEL_49:
      v29 = (char *)operator new(0x90uLL);
      v73 = v29;
      v74 = v5 + 168;
      v75 = 0;
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = v22;
      *((_QWORD *)v29 + 2) = v21[2];
      v30 = v29 + 56;
      *((_QWORD *)v29 + 3) = v29 + 56;
      *((_QWORD *)v29 + 4) = v29 + 56;
      *((_QWORD *)v29 + 5) = v29 + 56;
      *((_QWORD *)v29 + 6) = 5;
      v31 = (char *)v21[3];
      v32 = (char *)v21[4];
      v33 = (v32 - v31) >> 4;
      if ((unint64_t)(v32 - v31) >= 0x51)
      {
        geo::small_vector_base<std::shared_ptr<md::mun::MuninViewData>>::grow((void **)v29 + 3, (v32 - v31) >> 4);
        v30 = (_QWORD *)*((_QWORD *)v29 + 4);
      }
      if (v31 != v32)
      {
        do
        {
          *v30 = *(_QWORD *)v31;
          v34 = *((_QWORD *)v31 + 1);
          v30[1] = v34;
          if (v34)
          {
            v35 = (unint64_t *)(v34 + 8);
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
          v31 += 16;
          v30 += 2;
        }
        while (v31 != v32);
        v30 = (_QWORD *)*((_QWORD *)v29 + 4);
      }
      *((_QWORD *)v29 + 4) = &v30[2 * v33];
      *((_QWORD *)v29 + 17) = v21[17];
      v75 = 1;
      v37 = (float)(unint64_t)(*(_QWORD *)(v5 + 176) + 1);
      v38 = *(float *)(v5 + 184);
      if (!v23 || (float)(v38 * (float)v23) < v37)
      {
        v39 = (v23 & (v23 - 1)) != 0;
        if (v23 < 3)
          v39 = 1;
        v40 = v39 | (2 * v23);
        v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41)
          v42 = v41;
        else
          v42 = v40;
        if (v42 == 1)
        {
          v42 = 2;
        }
        else if ((v42 & (v42 - 1)) != 0)
        {
          v42 = std::__next_prime(v42);
        }
        v43 = *(int8x8_t *)(v5 + 160);
        if (v42 > *(_QWORD *)&v43)
          goto LABEL_71;
        if (v42 < *(_QWORD *)&v43)
        {
          v44 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 176) / *(float *)(v5 + 184));
          if (*(_QWORD *)&v43 < 3uLL || (v45 = (uint8x8_t)vcnt_s8(v43), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
          {
            v44 = std::__next_prime(v44);
          }
          else
          {
            v46 = 1 << -(char)__clz(v44 - 1);
            if (v44 >= 2)
              v44 = v46;
          }
          if (v42 <= v44)
            v42 = v44;
          if (v42 < *(_QWORD *)&v43)
LABEL_71:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5 + 152, v42);
        }
        v23 = *(_QWORD *)(v5 + 160);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23)
            a2 = v22 % v23;
          else
            a2 = v22;
        }
        else
        {
          a2 = (v23 - 1) & v22;
        }
      }
      v47 = *(_QWORD **)(*v14 + 8 * a2);
      if (v47)
      {
        *(_QWORD *)v73 = *v47;
        *v47 = v73;
      }
      else
      {
        *(_QWORD *)v73 = *v52;
        *v52 = v73;
        *(_QWORD *)(*v14 + 8 * a2) = v52;
        if (*(_QWORD *)v73)
        {
          v48 = *(_QWORD *)(*(_QWORD *)v73 + 8);
          if ((v23 & (v23 - 1)) != 0)
          {
            if (v48 >= v23)
              v48 %= v23;
          }
          else
          {
            v48 &= v23 - 1;
          }
          *(_QWORD *)(*v14 + 8 * v48) = v73;
        }
      }
      ++*(_QWORD *)(v5 + 176);
LABEL_96:
      v21 = (_QWORD *)*v21;
    }
    while (v21);
  }
  *(_OWORD *)(v5 + 192) = v69;
  v49 = v72;
  *(_QWORD *)(v5 + 208) = v70;
  v70 = 0;
  v69 = 0uLL;
  *(_OWORD *)(v5 + 216) = v71;
  *(_QWORD *)(v5 + 232) = v49;
  *(_BYTE *)(v5 + 240) = 1;
  v51[2] = "md::MuninSceneContext]";
  v51[3] = 21;
  v51[4] = v5;
  *v51 = &off_1E42B0E60;
  v51[1] = 0xC83717EF586624DCLL;
  *v50 = v51;
  md::MuninSceneContext::~MuninSceneContext((md::MuninSceneContext *)&v53);
}

void sub_19FBFB180(_Unwind_Exception *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::~__hash_table(v7);
  std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100](a2, 0);
  std::vector<md::MuninSceneEvent>::~vector[abi:nn180100](a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v6 + 8);
  MEMORY[0x1A1AF4E00](v6, 0x10F1C40E4F88C75);
  md::MuninSceneContext::~MuninSceneContext((md::MuninSceneContext *)va);
  MEMORY[0x1A1AF4E00](a5, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[4];

  if (*(_QWORD *)(a3 + 8) == 0xC83717EF586624DCLL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void md::MuninSceneLogic::allocateContext(md::MuninSceneLogic *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v3 = *((_QWORD *)this + 121);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 122);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *((_QWORD *)this + 67);
    v8 = (char *)this + 480;
    v9 = (char *)this + 616;
    v10 = *((_QWORD *)this + 21);
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v4;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    do
      v14 = __ldaxr(v11);
    while (__stlxr(v14 - 1, v11));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 67);
    v8 = (char *)this + 480;
    v9 = (char *)this + 616;
    v10 = *((_QWORD *)this + 21);
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_QWORD *)a2 = &off_1E4292B88;
  *(_QWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 184) = 1065353216;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = v8;
  *(_QWORD *)(a2 + 224) = v9;
  *(_QWORD *)(a2 + 232) = v10;
  *(_BYTE *)(a2 + 240) = 1;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 116) = 0u;
  if (v4)
  {
    v15 = (unint64_t *)&v4->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::MuninSceneLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  const md::CameraContext *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  gss::Allocator *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  gss::Allocator *v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  float *v30;
  float v31;
  _BOOL4 v32;
  unsigned int v34;
  float v35;
  _BOOL4 v36;
  unsigned int v38;
  float *v39;
  float v40;
  float v41;
  _BOOL4 v42;
  unsigned int v44;
  float v45;
  _BOOL4 v46;
  unsigned int v48;
  float *v49;
  float v50;
  float v51;
  _BOOL4 v52;
  unsigned int v54;
  float v55;
  _BOOL4 v56;
  unsigned int v58;
  float *v59;
  float v60;
  float v61;
  _BOOL4 v62;
  unsigned int v64;
  float v65;
  _BOOL4 v66;
  unsigned int v67;
  float *v68;
  float v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  md::MapEngine **v78;
  VKTimedAnimation *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  BOOL v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  void **v95;
  _BYTE *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  int v106;
  uint64_t v107;
  id v108;
  _QWORD *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  float (*v114)(uint64_t, float);
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  void ***v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  int64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  int64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  void **v171;
  char *v172;
  char *v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void **v178;
  char *v179;
  char *v180;
  void *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  void *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  double v198;
  double *v199;
  char *v200;
  char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  float v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  double v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *i;
  uint64_t v223;
  int v224;
  _QWORD *v225;
  _QWORD *v226;
  void *v227;
  _QWORD *v228;
  int8x8_t v229;
  uint8x8_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __n128 v239;
  _QWORD *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  float64x2_t *v243;
  unint64_t *v244;
  unint64_t v245;
  double v246;
  double v247;
  int v248;
  float64x2_t v249;
  float64x2_t v250;
  float v251;
  float v252;
  float *v253;
  unint64_t *v254;
  unint64_t v255;
  float *v256;
  float *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  unint64_t *v263;
  unint64_t v264;
  float *v265;
  int v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t j;
  void *v276;
  __n128 *v277;
  unint64_t v278;
  const std::nothrow_t *v279;
  unint64_t v280;
  void *v281;
  BOOL v282;
  void *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  float v295;
  int8x8_t v296;
  unint64_t v297;
  uint8x8_t v298;
  unint64_t v299;
  unint64_t v300;
  uint8x8_t v301;
  unint64_t v302;
  _QWORD **v303;
  _QWORD *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  _QWORD **v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t *v314;
  unint64_t v315;
  float v316;
  int8x8_t v317;
  uint8x8_t v318;
  unint64_t v319;
  int8x8_t v320;
  uint8x8_t v321;
  unint64_t v322;
  _QWORD **v323;
  _QWORD *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  _QWORD **v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  float v342;
  float *v343;
  float *v344;
  uint64_t v345;
  float *v346;
  uint64_t v347;
  unint64_t v348;
  _QWORD *k;
  uint64_t v350;
  double v351;
  float v352;
  uint64_t v353;
  float v354;
  uint64_t v355;
  double v356;
  uint64_t v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  long double v363;
  double v364;
  float *v365;
  double v366;
  uint64_t v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  double v372;
  double v373;
  double v374;
  unint64_t v375;
  double v376;
  unint64_t v377;
  int8x8_t v380;
  uint8x8_t v381;
  unint64_t v382;
  _QWORD *v383;
  _QWORD *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  void **v390;
  unint64_t v391;
  unint64_t *v392;
  _QWORD *v393;
  unint64_t *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  _BYTE *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  _OWORD *v404;
  unint64_t *v405;
  uint64_t v406;
  __int128 v407;
  unint64_t v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  float64x2_t **v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  float64x2_t *v430;
  float64_t v431;
  float64x2_t v432;
  float64x2_t v433;
  uint64_t v434;
  double v435;
  unint64_t v436;
  uint64_t v437;
  float v438;
  unint64_t v439;
  char *v440;
  float v441;
  unint64_t v442;
  char *v443;
  char *v444;
  float v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _QWORD *v450;
  unint64_t v451;
  uint64_t v452;
  float *v453;
  float *v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  void *v458;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float v465;
  unint64_t *v466;
  unint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  float *v477;
  float *v478;
  uint64_t v479;
  float *v480;
  uint64_t v481;
  unint64_t v482;
  float v483;
  float v484;
  float v485;
  uint64_t *v487;
  _QWORD *v488;
  float64x2_t *v489;
  const md::CameraContext *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  float64x2_t v494;
  float *v495;
  id v496;
  float64x2_t v497;
  unint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  __n128 v501;
  uint64_t *v502;
  std::__shared_weak_count *v503;
  std::__shared_weak_count *v504;
  std::__shared_weak_count *v505;
  unint64_t v506;
  float64x2_t *v507;
  std::__shared_weak_count *v508;
  void *v509;
  float *v510;
  float *v511;
  void *v512[2];
  _QWORD *v513;
  _QWORD v514[3];
  gss::Allocator *v515;
  _QWORD v516[3];
  _QWORD *v517;
  _QWORD v518[3];
  _QWORD *v519;
  _QWORD v520[3];
  _QWORD *v521;
  void *__p;
  uint64_t v523;
  float (*v524)(uint64_t, float);
  std::__shared_weak_count *v525;
  uint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t v530;

  v530 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)*a3;
  v7 = (const md::CameraContext *)a3[1];
  v518[0] = &off_1E42CC698;
  v518[1] = a2;
  v519 = v518;
  v516[0] = &off_1E42CC6E0;
  v516[1] = a2;
  v517 = v516;
  v521 = v520;
  v520[0] = &off_1E42CC6E0;
  v520[1] = a2;
  _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v518);
  v8 = v517;
  if (v517 == v516)
  {
    v9 = 4;
    v8 = v516;
  }
  else
  {
    if (!v517)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v519;
  if (v519 == v518)
  {
    v11 = 4;
    v10 = v518;
  }
  else
  {
    if (!v519)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v514[0] = &off_1E42CC728;
  v514[1] = a1;
  v12 = (gss::Allocator *)v514;
  v515 = (gss::Allocator *)v514;
  v13 = (_BYTE *)v6[6];
  v14 = (_BYTE *)v6[7];
  if (v13 == v14)
  {
    v15 = 4;
LABEL_19:
    v12 = (gss::Allocator *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 8 * v15))();
    goto LABEL_20;
  }
  do
  {
    LOBYTE(__p) = *v13;
    if (!v515)
    {
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_812:
      __break(1u);
      return;
    }
    (*(void (**)(gss::Allocator *, void **))(*(_QWORD *)v515 + 48))(v515, &__p);
    ++v13;
  }
  while (v13 != v14);
  v12 = v515;
  if (v515 == (gss::Allocator *)v514)
  {
    v15 = 4;
    v12 = (gss::Allocator *)v514;
    goto LABEL_19;
  }
  if (v515)
  {
    v15 = 5;
    goto LABEL_19;
  }
LABEL_20:
  v17 = v6[2];
  v16 = (std::__shared_weak_count *)v6[3];
  v503 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v17)
  {
    __p = 0;
    v523 = 0;
    v524 = 0;
    v525 = (std::__shared_weak_count *)gss::Allocator::instance(v12);
    *(void **)((char *)v512 + 7) = 0;
    v512[0] = 0;
    HIBYTE(v512[1]) = 1;
    gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v509, v17, (gss::FeatureAttributeSet *)&__p, (gss::QueryOverrides *)v512);
    if (!BYTE6(v512[1]) && v512[0])
    {
      v21 = gss::Allocator::instance(v20);
      (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v21 + 40))(v21, v512[0], WORD2(v512[1]));
    }
    if (__p)
    {
      v523 = (uint64_t)__p;
      ((void (*)(std::__shared_weak_count *, void *, int64_t))v525->__vftable[1].~__shared_weak_count)(v525, __p, (char *)v524 - (char *)__p);
    }
    v22 = v509;
    v23 = (std::__shared_weak_count *)v510;
    v512[0] = v509;
    v512[1] = v510;
    if (v510)
    {
      v24 = (unint64_t *)(v510 + 2);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v523 = (uint64_t)v23;
      do
        v26 = __ldxr(v24);
      while (__stxr(v26 + 1, v24));
    }
    else
    {
      v523 = 0;
    }
    v524 = 0;
    v525 = 0;
    __p = v22;
    LOBYTE(v526) = 0;
    if (v22)
      LODWORD(v22) = (*(uint64_t (**)(void *, float (**)(uint64_t, float)))(*(_QWORD *)v22 + 48))(v22, &v524);
    LOBYTE(v526) = (_BYTE)v22;
    if (v23)
    {
      v27 = (unint64_t *)&v23->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      LODWORD(v22) = v526;
    }
    if ((_DWORD)v22)
    {
      v29 = *((_QWORD *)__p + 3);
      v30 = *(float **)v29;
      if (*(_QWORD *)v29)
      {
        v31 = *v30;
        v32 = *v30 == 1.0;
        if (*(_BYTE *)(v29 + 10))
        {
          if (v31 != 0.0 && v31 != 1.0)
          {
LABEL_55:
            if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*((_QWORD *)__p + 3), 0x49u, 0) & 1) == 0)
            {
              v34 = 1;
              goto LABEL_57;
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        v32 = 0;
      }
      v34 = *(unsigned __int8 *)(v29 + v32 + 11);
      if (v34 == 2)
        goto LABEL_55;
LABEL_57:
      if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x49u, v34))
      {
LABEL_58:
        if (v30)
        {
          v35 = *v30;
          v36 = *v30 == 1.0;
          if (*(_BYTE *)(v29 + 10))
          {
            if (v35 != 0.0 && v35 != 1.0)
            {
LABEL_68:
              LOBYTE(v512[0]) = 1;
              LOBYTE(v507) = 1;
              v39 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x49u, 0, v512);
              v40 = *v39
                  + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x49u, 1u, &v507)- *v39)* v35);
              if (!*(_BYTE *)(a1 + 584))
                goto LABEL_69;
              goto LABEL_70;
            }
          }
        }
        else
        {
          v36 = 0;
        }
        v38 = *(unsigned __int8 *)(v29 + v36 + 11);
        v35 = 0.0;
        if (v38 == 2)
          goto LABEL_68;
        v40 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x49u, v38, 0);
        if (!*(_BYTE *)(a1 + 584))
LABEL_69:
          *(_BYTE *)(a1 + 584) = 1;
LABEL_70:
        *(float *)(a1 + 588) = v40;
        v29 = *((_QWORD *)__p + 3);
        v30 = *(float **)v29;
      }
      if (v30)
      {
        v41 = *v30;
        v42 = *v30 == 1.0;
        if (*(_BYTE *)(v29 + 10))
        {
          if (v41 != 0.0 && v41 != 1.0)
          {
LABEL_81:
            if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x4Au, 0) & 1) == 0)
            {
              v44 = 1;
              goto LABEL_83;
            }
            goto LABEL_84;
          }
        }
      }
      else
      {
        v42 = 0;
      }
      v44 = *(unsigned __int8 *)(v29 + v42 + 11);
      if (v44 == 2)
        goto LABEL_81;
LABEL_83:
      if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x4Au, v44))
      {
LABEL_84:
        if (v30)
        {
          v45 = *v30;
          v46 = *v30 == 1.0;
          if (*(_BYTE *)(v29 + 10))
          {
            if (v45 != 0.0 && v45 != 1.0)
            {
LABEL_94:
              LOBYTE(v512[0]) = 1;
              LOBYTE(v507) = 1;
              v49 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Au, 0, v512);
              v50 = *v49
                  + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Au, 1u, &v507)- *v49)* v45);
              if (!*(_BYTE *)(a1 + 592))
                goto LABEL_95;
              goto LABEL_96;
            }
          }
        }
        else
        {
          v46 = 0;
        }
        v48 = *(unsigned __int8 *)(v29 + v46 + 11);
        v45 = 0.0;
        if (v48 == 2)
          goto LABEL_94;
        v50 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Au, v48, 0);
        if (!*(_BYTE *)(a1 + 592))
LABEL_95:
          *(_BYTE *)(a1 + 592) = 1;
LABEL_96:
        *(float *)(a1 + 596) = v50;
        v29 = *((_QWORD *)__p + 3);
        v30 = *(float **)v29;
      }
      if (v30)
      {
        v51 = *v30;
        v52 = *v30 == 1.0;
        if (*(_BYTE *)(v29 + 10))
        {
          if (v51 != 0.0 && v51 != 1.0)
          {
LABEL_107:
            if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x4Bu, 0) & 1) == 0)
            {
              v54 = 1;
              goto LABEL_109;
            }
            goto LABEL_110;
          }
        }
      }
      else
      {
        v52 = 0;
      }
      v54 = *(unsigned __int8 *)(v29 + v52 + 11);
      if (v54 == 2)
        goto LABEL_107;
LABEL_109:
      if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x4Bu, v54))
      {
LABEL_110:
        if (v30)
        {
          v55 = *v30;
          v56 = *v30 == 1.0;
          if (*(_BYTE *)(v29 + 10))
          {
            if (v55 != 0.0 && v55 != 1.0)
            {
LABEL_120:
              LOBYTE(v512[0]) = 1;
              LOBYTE(v507) = 1;
              v59 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Bu, 0, v512);
              v60 = *v59
                  + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Bu, 1u, &v507)- *v59)* v55);
              if (!*(_BYTE *)(a1 + 600))
                goto LABEL_121;
              goto LABEL_122;
            }
          }
        }
        else
        {
          v56 = 0;
        }
        v58 = *(unsigned __int8 *)(v29 + v56 + 11);
        v55 = 0.0;
        if (v58 == 2)
          goto LABEL_120;
        v60 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Bu, v58, 0);
        if (!*(_BYTE *)(a1 + 600))
LABEL_121:
          *(_BYTE *)(a1 + 600) = 1;
LABEL_122:
        *(float *)(a1 + 604) = v60;
        v29 = *((_QWORD *)__p + 3);
        v30 = *(float **)v29;
      }
      if (v30)
      {
        v61 = *v30;
        v62 = *v30 == 1.0;
        if (*(_BYTE *)(v29 + 10))
        {
          if (v61 != 0.0 && v61 != 1.0)
          {
LABEL_133:
            if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x4Cu, 0) & 1) == 0)
            {
              v64 = 1;
              goto LABEL_135;
            }
            goto LABEL_136;
          }
        }
      }
      else
      {
        v62 = 0;
      }
      v64 = *(unsigned __int8 *)(v29 + v62 + 11);
      if (v64 == 2)
        goto LABEL_133;
LABEL_135:
      if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v29, 0x4Cu, v64))
      {
LABEL_136:
        if (!v30)
        {
          v66 = 0;
          goto LABEL_142;
        }
        v65 = *v30;
        v66 = *v30 == 1.0;
        if (!*(_BYTE *)(v29 + 10) || v65 == 0.0 || v65 == 1.0)
        {
LABEL_142:
          v67 = *(unsigned __int8 *)(v29 + v66 + 11);
          v65 = 0.0;
          if (v67 == 2)
            goto LABEL_143;
          v69 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Cu, v67, 0);
          if (!*(_BYTE *)(a1 + 608))
LABEL_144:
            *(_BYTE *)(a1 + 608) = 1;
        }
        else
        {
LABEL_143:
          LOBYTE(v512[0]) = 1;
          LOBYTE(v507) = 1;
          v68 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Cu, 0, v512);
          v69 = *v68
              + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v29, 0x4Cu, 1u, &v507)- *v68)* v65);
          if (!*(_BYTE *)(a1 + 608))
            goto LABEL_144;
        }
        *(float *)(a1 + 612) = v69;
      }
    }
    gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&__p);
    v70 = (std::__shared_weak_count *)v510;
    if (v510)
    {
      v71 = (unint64_t *)(v510 + 2);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  md::SceneStateManager::clear(*(md::SceneStateManager **)(a1 + 968));
  v73 = *(_QWORD *)(a1 + 544);
  if (v73)
  {
    v74 = *(_QWORD *)(a1 + 552);
    if (v74)
    {
      objc_msgSend(*(id *)(v74 + 48), "stop");
      v75 = *(_QWORD *)(a1 + 552);
      v73 = *(_QWORD *)(a1 + 544);
      *(_QWORD *)(a1 + 544) = 0;
      *(_QWORD *)(a1 + 552) = v73;
      if (v75)
      {
        *(_QWORD *)(v75 + 40) = &off_1E42B4C90;

        v76 = *(_QWORD **)(v75 + 32);
        if (v76 == (_QWORD *)(v75 + 8))
        {
          v77 = 4;
          v76 = (_QWORD *)(v75 + 8);
LABEL_159:
          (*(void (**)(void))(*v76 + 8 * v77))();
        }
        else if (v76)
        {
          v77 = 5;
          goto LABEL_159;
        }
        MEMORY[0x1A1AF4E00](v75, 0x10A0C401B67C7C3);
        v73 = *(_QWORD *)(a1 + 552);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 544) = 0;
      *(_QWORD *)(a1 + 552) = v73;
    }
    v78 = *(md::MapEngine ***)(a1 + 136);
    v79 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", *(float *)(v73 + 4));
    v80 = *(void **)(v73 + 48);
    *(_QWORD *)(v73 + 48) = v79;

    __p = (void *)MEMORY[0x1E0C809B0];
    v523 = 3221225472;
    v524 = ___ZN2md15FadeEffectBlock3runEPNS_15AnimationRunnerE_block_invoke;
    v525 = (std::__shared_weak_count *)&__block_descriptor_40_e8_v12__0f8l;
    v526 = v73;
    objc_msgSend(*(id *)(v73 + 48), "setStepHandler:", &__p);
    objc_msgSend(*(id *)(v73 + 48), "setCompletionHandler:", &__block_literal_global_11856);
    md::AnimationRunner::runAnimation(v78, *(VKAnimation **)(v73 + 48));
  }
  v81 = *(_QWORD *)(a1 + 552);
  if (v81)
  {
    if ((objc_msgSend(*(id *)(v81 + 48), "running") & 1) == 0)
    {
      v82 = *(_QWORD *)(a1 + 552);
      *(_QWORD *)(a1 + 552) = 0;
      if (v82)
      {
        *(_QWORD *)(v82 + 40) = &off_1E42B4C90;

        v83 = *(_QWORD **)(v82 + 32);
        if (v83 == (_QWORD *)(v82 + 8))
        {
          v84 = 4;
          v83 = (_QWORD *)(v82 + 8);
LABEL_177:
          (*(void (**)(void))(*v83 + 8 * v84))();
        }
        else if (v83)
        {
          v84 = 5;
          goto LABEL_177;
        }
        MEMORY[0x1A1AF4E00](v82, 0x10A0C401B67C7C3);
      }
    }
  }
  v85 = *(_QWORD *)(a1 + 968);
  v86 = *(_QWORD *)(a1 + 144);
  if (v85 + 184 != v86 + 168)
  {
    v87 = *(_BYTE **)(v86 + 168);
    v88 = (uint64_t)(*(_QWORD *)(v86 + 176) - (_QWORD)v87) >> 1;
    v89 = *(_QWORD *)(v85 + 184);
    v90 = (*(_QWORD *)(v85 + 192) - v89) >> 1;
    v91 = v88 >= v90;
    v92 = v88 - v90;
    if (v92 != 0 && v91)
    {
      std::vector<md::TileSelectionTileSetType>::__append(v85 + 184, v92);
      v87 = *(_BYTE **)(v86 + 168);
    }
    else if (!v91)
    {
      *(_QWORD *)(v85 + 192) = v89 + 2 * v88;
    }
    v93 = *(_BYTE **)(v86 + 176);
    if (v93 != v87)
      memmove(*(void **)(v85 + 184), v87, v93 - v87);
  }
  md::SceneStateManager::updateMerged((md::SceneStateManager *)v85);
  v95 = (void **)(a4 + 40);
  v94 = *(_QWORD *)(a4 + 40);
  *(_BYTE *)(a4 + 240) = *(_BYTE *)(a1 + 833);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 552);
  if (v94)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100](a4 + 40, v94);
    operator delete(*v95);
    *v95 = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 56) = 0;
  }
  *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 560);
  *(_QWORD *)(a4 + 56) = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100](a1 + 560, 0);
  v97 = *(_QWORD *)(a4 + 40);
  v96 = *(_BYTE **)(a4 + 48);
  if ((_BYTE *)v97 == v96)
  {
    v99 = 0;
    v98 = 0;
LABEL_202:
    v97 = 0;
  }
  else
  {
    v98 = *(_QWORD *)(a4 + 40);
    while (*(_BYTE *)v98 != 2)
    {
      v98 += 272;
      if ((_BYTE *)v98 == v96)
      {
        v98 = 0;
        break;
      }
    }
    v99 = *(_QWORD *)(a4 + 40);
    do
    {
      if (*(_BYTE *)v99 == 4)
        goto LABEL_198;
      v99 += 272;
    }
    while ((_BYTE *)v99 != v96);
    v99 = 0;
LABEL_198:
    while (*(_BYTE *)v97)
    {
      v97 += 272;
      if ((_BYTE *)v97 == v96)
        goto LABEL_202;
    }
  }
  v101 = (uint64_t *)(a4 + 64);
  v100 = *(_QWORD *)(a4 + 64);
  if (v100)
  {
    if (*(_BYTE *)(v100 + 64) == 1)
    {
      v102 = *(double *)(*(_QWORD *)(v100 + 88) + 64) >= *(double *)(*(_QWORD *)(v100 + 88) + 56);
      if (v99)
        goto LABEL_212;
    }
    else
    {
      v102 = 0;
      if (v99)
        goto LABEL_212;
    }
    if (v98 || v102)
LABEL_212:
      std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100]((uint64_t *)(a4 + 64), 0);
  }
  else if (v99 | v98)
  {
    goto LABEL_212;
  }
  v492 = a1;
  v499 = a4;
  if (!v97 || v99 || v98 || !*(_BYTE *)(v97 + 8))
    goto LABEL_370;
  v500 = operator new();
  v103 = *(_QWORD *)(a1 + 160);
  md::LayoutContext::frameState(a2);
  v490 = v7;
  v105 = *(double *)(v104 + 88);
  v106 = *(unsigned __int8 *)(v97 + 16);
  v107 = *(_QWORD *)(a1 + 840);
  v108 = **(id **)(a1 + 120);
  v493 = (uint64_t *)(a4 + 64);
  if (!*(_BYTE *)(a1 + 56))
  {
    v111 = 0;
    v110 = 0;
    v505 = 0;
LABEL_227:
    v116 = 0;
    v114 = 0;
    v504 = 0;
    goto LABEL_229;
  }
  v109 = (_QWORD *)a1;
  v110 = *(void **)(a1 + 928);
  v111 = (std::__shared_weak_count *)v109[117];
  v505 = v111;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
    v109 = (_QWORD *)v492;
    if (!*(_BYTE *)(v492 + 56))
      goto LABEL_227;
  }
  v114 = (float (*)(uint64_t, float))v109[118];
  v115 = (std::__shared_weak_count *)v109[119];
  v504 = v115;
  if (v115)
  {
    v116 = (std::__shared_weak_count *)v109[119];
    v117 = (unint64_t *)&v115->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  else
  {
    v116 = 0;
  }
LABEL_229:
  v496 = v108;
  v119 = *(_OWORD *)(v97 + 24);
  *(_QWORD *)(v500 + 16) = *(_QWORD *)(v97 + 40);
  *(_OWORD *)v500 = v119;
  v120 = *(_QWORD *)(v97 + 64);
  v121 = *(_OWORD *)(v97 + 48);
  *(_QWORD *)(v500 + 88) = 0;
  v122 = (void ***)(v500 + 88);
  *(_OWORD *)(v500 + 24) = v121;
  *(_QWORD *)(v500 + 40) = v120;
  *(_QWORD *)(v500 + 48) = *(_QWORD *)(v97 + 72);
  *(double *)(v500 + 56) = v105;
  *(_BYTE *)(v500 + 64) = v106;
  *(_QWORD *)(v500 + 72) = v107;
  *(_DWORD *)(v500 + 80) = 0;
  *(_QWORD *)(v500 + 96) = v103;
  *(_BYTE *)(v500 + 104) = 0;
  __p = v110;
  v523 = (uint64_t)v111;
  v123 = v116;
  if (v111)
  {
    v124 = (unint64_t *)&v111->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
    v123 = v504;
  }
  v524 = v114;
  v525 = v123;
  if (v123)
  {
    v126 = (unint64_t *)&v123->__shared_owners_;
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 1, v126));
  }
  v512[1] = 0;
  v128 = operator new(0x20uLL);
  v512[0] = v128;
  v513 = v128 + 4;
  *v128 = v110;
  v128[1] = v111;
  if (v111)
  {
    v129 = (unint64_t *)&v111->__shared_owners_;
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
  }
  v128[2] = v114;
  v128[3] = v123;
  a1 = v492;
  if (!v123)
  {
    v512[1] = v128 + 4;
    a4 = v499;
    v7 = v490;
    v134 = (std::__shared_weak_count *)v523;
    if (!v523)
      goto LABEL_252;
LABEL_249:
    v135 = (unint64_t *)&v134->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (v136)
      goto LABEL_252;
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
    if (!v106)
      goto LABEL_263;
LABEL_253:
    if (v106 != 1)
      goto LABEL_346;
    v137 = (_QWORD *)operator new();
    v138 = v137;
    __p = 0;
    v523 = 0;
    v524 = 0;
    v139 = v512[0];
    v140 = v512[1];
    v141 = (char *)v512[1] - (char *)v512[0];
    if (v512[1] == v512[0])
    {
      v143 = 0;
      *v137 = 0;
      v137[1] = 0;
      v137[2] = 0;
    }
    else
    {
      if (v141 < 0)
        abort();
      v142 = (char *)operator new((char *)v512[1] - (char *)v512[0]);
      v143 = v142;
      __p = v142;
      v524 = (float (*)(uint64_t, float))&v142[16 * (v141 >> 4)];
      v144 = v142;
      do
      {
        *(_QWORD *)v144 = *v139;
        v145 = v139[1];
        *((_QWORD *)v144 + 1) = v145;
        if (v145)
        {
          v146 = (unint64_t *)(v145 + 8);
          do
            v147 = __ldxr(v146);
          while (__stxr(v147 + 1, v146));
        }
        v139 += 2;
        v144 += 16;
      }
      while (v139 != v140);
      v523 = (uint64_t)v144;
      v138[1] = 0;
      v138[2] = 0;
      *v138 = 0;
      v159 = v144 - v142;
      if (v144 != v142)
      {
        a1 = v492;
        if (v159 < 0)
          abort();
        v160 = operator new(v144 - v142);
        *v138 = v160;
        v138[1] = v160;
        v138[2] = &v160[2 * (v159 >> 4)];
        v161 = v143;
        do
        {
          v162 = *((_QWORD *)v161 + 1);
          *v160 = *(_QWORD *)v161;
          v160[1] = v162;
          if (v162)
          {
            v163 = (unint64_t *)(v162 + 8);
            do
              v164 = __ldxr(v163);
            while (__stxr(v164 + 1, v163));
          }
          v161 += 16;
          v160 += 2;
        }
        while (v161 != v144);
        v138[1] = v160;
        goto LABEL_291;
      }
    }
    a1 = v492;
LABEL_291:
    v138[3] = 0xA0000000DLL;
    v138[7] = 0;
    v138[8] = 0;
    v138[6] = 0;
    *((_OWORD *)v138 + 2) = xmmword_19FFB5B10;
    v171 = *v122;
    *v122 = (void **)v138;
    if (v171)
    {
      v172 = (char *)*v171;
      if (*v171)
      {
        v173 = (char *)v171[1];
        v174 = *v171;
        if (v173 != v172)
        {
          do
          {
            v175 = (std::__shared_weak_count *)*((_QWORD *)v173 - 1);
            if (v175)
            {
              v176 = (unint64_t *)&v175->__shared_owners_;
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            v173 -= 16;
          }
          while (v173 != v172);
          v174 = *v171;
          v143 = (char *)__p;
        }
        v171[1] = v172;
        operator delete(v174);
      }
      MEMORY[0x1A1AF4E00](v171, 0x1020C402AA1BF7ELL);
    }
    if (v143)
    {
      v185 = (char *)v523;
      v186 = v143;
      if ((char *)v523 != v143)
      {
        do
        {
          v187 = (std::__shared_weak_count *)*((_QWORD *)v185 - 1);
          if (v187)
          {
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          v185 -= 16;
        }
        while (v185 != v143);
        v186 = __p;
      }
      v523 = (uint64_t)v143;
      v190 = 0x404E000000000001;
      v191 = 64;
      *(double *)&v192 = 1.08333333;
      goto LABEL_342;
    }
    v190 = 0x404E000000000001;
    v191 = 64;
    *(double *)&v193 = 1.08333333;
    goto LABEL_344;
  }
  v131 = (unint64_t *)&v123->__shared_owners_;
  v7 = v490;
  do
    v132 = __ldxr(v131);
  while (__stxr(v132 + 1, v131));
  v512[1] = v128 + 4;
  a4 = v499;
  do
    v133 = __ldaxr(v131);
  while (__stlxr(v133 - 1, v131));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
  }
  v134 = (std::__shared_weak_count *)v523;
  if (v523)
    goto LABEL_249;
LABEL_252:
  if (v106)
    goto LABEL_253;
LABEL_263:
  v148 = (_QWORD *)operator new();
  v149 = v148;
  __p = 0;
  v523 = 0;
  v524 = 0;
  v150 = v512[0];
  v151 = v512[1];
  v152 = (char *)v512[1] - (char *)v512[0];
  if (v512[1] == v512[0])
  {
    v154 = 0;
    *v148 = 0;
    v148[1] = 0;
    v148[2] = 0;
LABEL_302:
    a1 = v492;
    goto LABEL_303;
  }
  if (v152 < 0)
    abort();
  v153 = (char *)operator new((char *)v512[1] - (char *)v512[0]);
  v154 = v153;
  __p = v153;
  v524 = (float (*)(uint64_t, float))&v153[16 * (v152 >> 4)];
  v155 = v153;
  do
  {
    *(_QWORD *)v155 = *v150;
    v156 = v150[1];
    *((_QWORD *)v155 + 1) = v156;
    if (v156)
    {
      v157 = (unint64_t *)(v156 + 8);
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
    }
    v150 += 2;
    v155 += 16;
  }
  while (v150 != v151);
  v523 = (uint64_t)v155;
  v149[1] = 0;
  v149[2] = 0;
  *v149 = 0;
  v165 = v155 - v153;
  if (v155 == v153)
    goto LABEL_302;
  a1 = v492;
  if (v165 < 0)
    abort();
  v166 = operator new(v155 - v153);
  *v149 = v166;
  v149[1] = v166;
  v149[2] = &v166[2 * (v165 >> 4)];
  v167 = v154;
  do
  {
    v168 = *((_QWORD *)v167 + 1);
    *v166 = *(_QWORD *)v167;
    v166[1] = v168;
    if (v168)
    {
      v169 = (unint64_t *)(v168 + 8);
      do
        v170 = __ldxr(v169);
      while (__stxr(v170 + 1, v169));
    }
    v167 += 16;
    v166 += 2;
  }
  while (v167 != v155);
  v149[1] = v166;
LABEL_303:
  v149[3] = 0xA0000000DLL;
  v149[7] = 0;
  v149[8] = 0;
  v149[6] = 0;
  *((_OWORD *)v149 + 2) = xmmword_19FFB5B10;
  v178 = *v122;
  *v122 = (void **)v149;
  if (v178)
  {
    v179 = (char *)*v178;
    if (*v178)
    {
      v180 = (char *)v178[1];
      v181 = *v178;
      if (v180 != v179)
      {
        do
        {
          v182 = (std::__shared_weak_count *)*((_QWORD *)v180 - 1);
          if (v182)
          {
            v183 = (unint64_t *)&v182->__shared_owners_;
            do
              v184 = __ldaxr(v183);
            while (__stlxr(v184 - 1, v183));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
          }
          v180 -= 16;
        }
        while (v180 != v179);
        v181 = *v178;
        v154 = (char *)__p;
      }
      v178[1] = v179;
      operator delete(v181);
    }
    MEMORY[0x1A1AF4E00](v178, 0x1020C402AA1BF7ELL);
  }
  if (!v154)
  {
    v190 = 0x404E3EF368EB0433;
    v191 = 122;
    *(double *)&v193 = 2.03333333;
LABEL_344:
    v198 = *(double *)&v193;
    goto LABEL_345;
  }
  v194 = (char *)v523;
  v186 = v154;
  if ((char *)v523 != v154)
  {
    do
    {
      v195 = (std::__shared_weak_count *)*((_QWORD *)v194 - 1);
      if (v195)
      {
        v196 = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v194 -= 16;
    }
    while (v194 != v154);
    v186 = __p;
  }
  v523 = (uint64_t)v154;
  v190 = 0x404E3EF368EB0433;
  v191 = 122;
  *(double *)&v192 = 2.03333333;
LABEL_342:
  v198 = *(double *)&v192;
  operator delete(v186);
LABEL_345:
  v199 = (double *)*v122;
  v199[6] = v105;
  v199[7] = v198 + v105;
  v199[10] = 0.0;
  *((_QWORD *)v199 + 11) = v191;
  v199[8] = v105;
  *((_QWORD *)v199 + 9) = v190;
LABEL_346:
  v200 = (char *)v512[0];
  if (v512[0])
  {
    v201 = (char *)v512[1];
    if (v512[1] != v512[0])
    {
      do
      {
        v202 = (std::__shared_weak_count *)*((_QWORD *)v201 - 1);
        if (v202)
        {
          v203 = (unint64_t *)&v202->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
          }
        }
        v201 -= 16;
      }
      while (v201 != v200);
      v200 = (char *)v512[0];
    }
    operator delete(v200);
  }

  std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100](v493, v500);
  if (v116)
  {
    v205 = (unint64_t *)&v116->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (v505)
  {
    v207 = (unint64_t *)&v505->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
      std::__shared_weak_count::__release_weak(v505);
    }
  }

  ++*(_QWORD *)(a1 + 840);
  v209 = **(_QWORD **)(a1 + 160);
  if (v209)
  {
    LOBYTE(__p) = 8;
    md::MapEngine::setNeedsTick(v209, &__p);
  }
  v210 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 24) + 56);
  gdc::ResourceManager::clearFailedResources(*(gdc::ResourceManager **)(v210 + 56), *(gdc::ResourceManager **)(v210 + 64));
  v101 = v493;
LABEL_370:
  v211 = *v101;
  if (*v101)
  {
    md::LayoutContext::frameState(a2);
    v213 = *(double *)(v212 + 88);
    v214 = v213 - *(double *)(v211 + 56);
    *(float *)(v211 + 80) = v214;
    v215 = *(_QWORD *)(v211 + 88);
    if (*(_BYTE *)(v211 + 104))
    {
      v216 = v213 + 0.883333333;
      *(double *)(v215 + 48) = v213;
      *(double *)(v215 + 56) = v213 + 0.883333333;
      *(double *)(v215 + 64) = v213;
      *(_OWORD *)(v215 + 80) = xmmword_19FFB5B20;
      *(_QWORD *)(v215 + 72) = 0x404E000000000000;
      *(_BYTE *)(v211 + 104) = 0;
      v217 = v213;
      v218 = v213;
    }
    else
    {
      v216 = *(double *)(v215 + 56);
      v218 = *(double *)(v215 + 64);
      v217 = *(double *)(v215 + 48);
    }
    v219 = fmax(v218, v213);
    *(double *)(v215 + 64) = v219;
    if (v219 - v217 >= v216 - v217 && !*(_BYTE *)(v211 + 64))
      *(_BYTE *)(v211 + 104) = 1;
    v220 = **(_QWORD **)(v211 + 96);
    if (v220)
    {
      LOBYTE(__p) = 8;
      md::MapEngine::setNeedsTick(v220, &__p);
    }
  }
  md::LayoutContext::frameState(a2);
  md::MuninSceneLogic::requestData((md::MuninSceneLogic *)a1, v7, (md::MuninSceneContext *)(uint64_t)(*(double *)(v221 + 88) * 1000.0));
  for (i = *(_QWORD **)(a1 + 424); i; i = (_QWORD *)*i)
  {
    md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)&__p, *(_QWORD *)(a1 + 168), i[2]);
    if ((_BYTE)__p)
    {
      v226 = v527;
      v225 = v528;
      if (v527 != v528)
      {
        do
        {
          v227 = (void *)v226[31];
          if (v227 != (void *)v226[33])
            free(v227);
          v226 += 36;
        }
        while (v226 != v225);
        v226 = v527;
      }
      if (v226 != v529)
        free(v226);
      LOBYTE(__p) = 0;
    }
  }
  v223 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a4 + 240))
    v224 = md::SceneContext::sceneStatus(*(md::SceneContext **)(a4 + 8));
  else
    v224 = 0;
  gdc::LoadingStatusTracker::setSceneStatus(v223, v224);
  v228 = (_QWORD *)*((_QWORD *)a2 + 1);
  v229 = (int8x8_t)v228[1];
  if (!*(_QWORD *)&v229)
    goto LABEL_417;
  v230 = (uint8x8_t)vcnt_s8(v229);
  v230.i16[0] = vaddlv_u8(v230);
  if (v230.u32[0] > 1uLL)
  {
    v231 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v229 <= 0x1AF456233693CD46uLL)
      v231 = 0x1AF456233693CD46uLL % *(_QWORD *)&v229;
  }
  else
  {
    v231 = (*(_QWORD *)&v229 - 1) & 0x1AF456233693CD46;
  }
  v232 = *(_QWORD **)(*v228 + 8 * v231);
  if (!v232)
    goto LABEL_417;
  v233 = (_QWORD *)*v232;
  if (!v233)
    goto LABEL_417;
  if (v230.u32[0] < 2uLL)
  {
    v234 = *(_QWORD *)&v229 - 1;
    while (1)
    {
      v236 = v233[1];
      if (v236 == 0x1AF456233693CD46)
      {
        if (v233[2] == 0x1AF456233693CD46)
          goto LABEL_415;
      }
      else if ((v236 & v234) != v231)
      {
        goto LABEL_417;
      }
      v233 = (_QWORD *)*v233;
      if (!v233)
        goto LABEL_417;
    }
  }
  while (2)
  {
    v235 = v233[1];
    if (v235 != 0x1AF456233693CD46)
    {
      if (v235 >= *(_QWORD *)&v229)
        v235 %= *(_QWORD *)&v229;
      if (v235 != v231)
        goto LABEL_417;
      goto LABEL_404;
    }
    if (v233[2] != 0x1AF456233693CD46)
    {
LABEL_404:
      v233 = (_QWORD *)*v233;
      if (!v233)
        goto LABEL_417;
      continue;
    }
    break;
  }
LABEL_415:
  v237 = v233[5];
  if (*(_QWORD *)(v237 + 8) == 0x1AF456233693CD46)
  {
    v491 = *(_QWORD *)(v237 + 32);
    goto LABEL_418;
  }
LABEL_417:
  v491 = 0;
LABEL_418:
  if (*(double *)(a4 + 136) == 0.0)
  {
    md::LayoutContext::frameState(a2);
    *(_QWORD *)(a4 + 136) = *(_QWORD *)(v238 + 88);
  }
  md::SceneContext::renderData((md::SceneContext *)v512, *(_QWORD *)(a4 + 8), 36);
  v509 = 0;
  v510 = 0;
  v511 = 0;
  v489 = (float64x2_t *)(v491 + 504);
  v239 = *(__n128 *)v512;
  v240 = v513;
  while (2)
  {
    v241 = v239.n128_u64[0];
    if ((_QWORD *)v239.n128_u64[0] != v240)
    {
      v501 = v239;
      v243 = *(float64x2_t **)(v239.n128_u64[0] + 112);
      v242 = *(std::__shared_weak_count **)(v239.n128_u64[0] + 120);
      v507 = v243;
      v508 = v242;
      if (v242)
      {
        v244 = (unint64_t *)&v242->__shared_owners_;
        do
          v245 = __ldxr(v244);
        while (__stxr(v245 + 1, v244));
      }
      if (!md::mun::isPhotoVisible((const double *)(v491 + 984), (uint64_t)&v243[14].f64[1]))
      {
        v239 = v501;
        if (v242)
          goto LABEL_461;
        goto LABEL_465;
      }
      feclearexcept(1);
      v246 = v243[12].f64[1];
      v247 = *(double *)(v491 + 496);
      v494 = *v489;
      v497 = v243[13];
      v248 = fetestexcept(1);
      v249 = vsubq_f64(v497, v494);
      v250 = vmulq_f64(v249, v249);
      v251 = sqrt(v250.f64[0] + (v246 - v247) * (v246 - v247) + v250.f64[1]);
      if (v248)
        v252 = 0.0;
      else
        v252 = v251;
      v253 = v510;
      if (v510 < v511)
      {
        *v510 = v252;
        *((_QWORD *)v253 + 1) = v243;
        *((_QWORD *)v253 + 2) = v242;
        v239 = v501;
        if (v242)
        {
          v254 = (unint64_t *)&v242->__shared_owners_;
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
        }
        v256 = v253 + 6;
        a1 = v492;
        a4 = v499;
LABEL_460:
        v510 = v256;
        v242 = v508;
        if (v508)
        {
LABEL_461:
          v270 = (unint64_t *)&v242->__shared_owners_;
          do
            v271 = __ldaxr(v270);
          while (__stlxr(v271 - 1, v270));
          if (!v271)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v242->__on_zero_shared)(v242, v239);
            std::__shared_weak_count::__release_weak(v242);
            v239.n128_u64[1] = v501.n128_u64[1];
          }
        }
LABEL_465:
        v272 = v241 + 144;
        if (v241 + 144 != v239.n128_u64[1])
        {
          while (!*(_QWORD *)(v272 + 112))
          {
            v272 += 144;
            if (v272 == v239.n128_u64[1])
            {
              v272 = v239.n128_u64[1];
              break;
            }
          }
        }
        v239.n128_u64[0] = v272;
        continue;
      }
      v257 = (float *)v509;
      v258 = 0xAAAAAAAAAAAAAAABLL * (((char *)v510 - (_BYTE *)v509) >> 3);
      v259 = v258 + 1;
      if (v258 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * (((char *)v511 - (_BYTE *)v509) >> 3) > v259)
        v259 = 0x5555555555555556 * (((char *)v511 - (_BYTE *)v509) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v511 - (_BYTE *)v509) >> 3) >= 0x555555555555555)
        v260 = 0xAAAAAAAAAAAAAAALL;
      else
        v260 = v259;
      if (v260 > 0xAAAAAAAAAAAAAAALL)
LABEL_804:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v261 = (char *)operator new(24 * v260);
      v262 = &v261[24 * v258];
      *(float *)v262 = v252;
      *((_QWORD *)v262 + 1) = v243;
      *((_QWORD *)v262 + 2) = v242;
      if (v242)
      {
        v263 = (unint64_t *)&v242->__shared_owners_;
        do
          v264 = __ldxr(v263);
        while (__stxr(v264 + 1, v263));
      }
      v256 = (float *)(v262 + 24);
      if (v253 == v257)
      {
        v509 = &v261[24 * v258];
        v511 = (float *)&v261[24 * v260];
        a1 = v492;
        a4 = v499;
        if (v253)
          goto LABEL_458;
      }
      else
      {
        v265 = v253;
        do
        {
          v266 = *((_DWORD *)v265 - 6);
          v265 -= 6;
          *((_DWORD *)v262 - 6) = v266;
          v262 -= 24;
          *(_OWORD *)(v262 + 8) = *(_OWORD *)(v265 + 2);
          *((_QWORD *)v265 + 1) = 0;
          *((_QWORD *)v265 + 2) = 0;
        }
        while (v265 != v257);
        v509 = v262;
        v510 = v256;
        v511 = (float *)&v261[24 * v260];
        a1 = v492;
        a4 = v499;
        do
        {
          v267 = (std::__shared_weak_count *)*((_QWORD *)v253 - 1);
          if (v267)
          {
            v268 = (unint64_t *)&v267->__shared_owners_;
            do
              v269 = __ldaxr(v268);
            while (__stlxr(v269 - 1, v268));
            if (!v269)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v267);
            }
          }
          v253 -= 6;
        }
        while (v253 != v257);
        v253 = v257;
        if (v257)
LABEL_458:
          operator delete(v253);
      }
      v239 = v501;
      goto LABEL_460;
    }
    break;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (*(_QWORD *)(a4 + 176))
    {
      v273 = *(_QWORD **)(a4 + 168);
      if (v273)
      {
        do
        {
          v284 = (_QWORD *)*v273;
          v286 = (_QWORD *)v273[3];
          v285 = (_QWORD *)v273[4];
          if (v286 != v285)
          {
            do
            {
              v287 = (std::__shared_weak_count *)v286[1];
              if (v287)
              {
                v288 = (unint64_t *)&v287->__shared_owners_;
                do
                  v289 = __ldaxr(v288);
                while (__stlxr(v289 - 1, v288));
                if (!v289)
                {
                  ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                  std::__shared_weak_count::__release_weak(v287);
                }
              }
              v286 += 2;
            }
            while (v286 != v285);
            v286 = (_QWORD *)v273[3];
          }
          if (v286 != (_QWORD *)v273[5])
            free(v286);
          operator delete(v273);
          v273 = v284;
        }
        while (v284);
      }
      *(_QWORD *)(a4 + 168) = 0;
      v274 = *(_QWORD *)(a4 + 160);
      if (v274)
      {
        for (j = 0; j != v274; ++j)
          *(_QWORD *)(*(_QWORD *)(a4 + 152) + 8 * j) = 0;
      }
      *(_QWORD *)(a4 + 176) = 0;
    }
    v239 = 0uLL;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_BYTE *)(a1 + 472) = 0;
  }
  v276 = v509;
  v277 = (__n128 *)v510;
  v278 = 0xAAAAAAAAAAAAAAABLL * (((char *)v510 - (_BYTE *)v509) >> 3);
  if ((char *)v510 - (_BYTE *)v509 < 1)
  {
    v283 = 0;
    v280 = 0;
  }
  else
  {
    v279 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v280 = 0xAAAAAAAAAAAAAAABLL * (((char *)v510 - (_BYTE *)v509) >> 3);
    while (1)
    {
      v281 = operator new(24 * v280, v279);
      if (v281)
        break;
      v282 = v280 > 1;
      v280 >>= 1;
      if (!v282)
      {
        v283 = 0;
        v280 = 0;
        goto LABEL_498;
      }
    }
    v283 = v281;
LABEL_498:
    a4 = v499;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>((uint64_t)v276, v277, v278, (uint64_t)v283, v280, v239);
  if (v283)
    operator delete(v283);
  if (!*(_QWORD *)(a4 + 176) && v509 != v510)
  {
    v290 = *((_QWORD *)v509 + 1);
    v291 = *(_QWORD *)(v290 + 224);
    *(_QWORD *)(a4 + 80) = v291;
    v292 = *(_QWORD *)(v290 + 168);
    *(_QWORD *)(a4 + 72) = v292;
    *(_QWORD *)(a4 + 88) = v292;
    *(_QWORD *)(a4 + 96) = v291;
    *(_DWORD *)(a4 + 120) = 0;
  }
  v488 = (_QWORD *)(a4 + 152);
  v293 = *(_QWORD *)(a4 + 112);
  v502 = (uint64_t *)(a4 + 112);
  v294 = v492;
  if (v293 && *(float *)(a4 + 128) >= 0.99)
  {
    v295 = *(float *)(a4 + 124);
    v296 = *(int8x8_t *)(a4 + 160);
    if (v295 >= 1.0)
    {
      if (v296)
      {
        v300 = *(_QWORD *)(a4 + 80);
        v301 = (uint8x8_t)vcnt_s8(v296);
        v301.i16[0] = vaddlv_u8(v301);
        if (v301.u32[0] > 1uLL)
        {
          v302 = *(_QWORD *)(a4 + 80);
          if (v300 >= *(_QWORD *)&v296)
            v302 = v300 % *(_QWORD *)&v296;
        }
        else
        {
          v302 = (*(_QWORD *)&v296 - 1) & v300;
        }
        v308 = *(_QWORD ***)(*v488 + 8 * v302);
        if (v308)
        {
          v309 = *v308;
          if (*v308)
          {
            if (v301.u32[0] < 2uLL)
            {
              v310 = *(_QWORD *)&v296 - 1;
              while (1)
              {
                v312 = v309[1];
                if (v312 == v300)
                {
                  if (v309[2] == v300)
                    goto LABEL_551;
                }
                else if ((v312 & v310) != v302)
                {
                  goto LABEL_552;
                }
                v309 = (_QWORD *)*v309;
                if (!v309)
                  goto LABEL_552;
              }
            }
            do
            {
              v311 = v309[1];
              if (v311 == v300)
              {
                if (v309[2] == v300)
                {
LABEL_551:
                  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::erase(v488, v309);
                  v293 = *(_QWORD *)(a4 + 112);
                  v295 = *(float *)(a4 + 124);
                  break;
                }
              }
              else
              {
                if (v311 >= *(_QWORD *)&v296)
                  v311 %= *(_QWORD *)&v296;
                if (v311 != v302)
                  break;
              }
              v309 = (_QWORD *)*v309;
            }
            while (v309);
          }
        }
      }
LABEL_552:
      *(_QWORD *)(a4 + 72) = *(_QWORD *)(a4 + 104);
      *(_QWORD *)(a4 + 80) = v293;
      v295 = v295 + -1.0;
    }
    else
    {
      if (v296)
      {
        v297 = *(_QWORD *)(a4 + 96);
        v298 = (uint8x8_t)vcnt_s8(v296);
        v298.i16[0] = vaddlv_u8(v298);
        if (v298.u32[0] > 1uLL)
        {
          v299 = *(_QWORD *)(a4 + 96);
          if (v297 >= *(_QWORD *)&v296)
            v299 = v297 % *(_QWORD *)&v296;
        }
        else
        {
          v299 = (*(_QWORD *)&v296 - 1) & v297;
        }
        v303 = *(_QWORD ***)(*v488 + 8 * v299);
        if (v303)
        {
          v304 = *v303;
          if (*v303)
          {
            if (v298.u32[0] < 2uLL)
            {
              v305 = *(_QWORD *)&v296 - 1;
              while (1)
              {
                v307 = v304[1];
                if (v307 == v297)
                {
                  if (v304[2] == v297)
                    goto LABEL_549;
                }
                else if ((v307 & v305) != v299)
                {
                  goto LABEL_550;
                }
                v304 = (_QWORD *)*v304;
                if (!v304)
                  goto LABEL_550;
              }
            }
            do
            {
              v306 = v304[1];
              if (v306 == v297)
              {
                if (v304[2] == v297)
                {
LABEL_549:
                  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::erase(v488, v304);
                  v293 = *(_QWORD *)(a4 + 112);
                  v295 = *(float *)(a4 + 124);
                  break;
                }
              }
              else
              {
                if (v306 >= *(_QWORD *)&v296)
                  v306 %= *(_QWORD *)&v296;
                if (v306 != v299)
                  break;
              }
              v304 = (_QWORD *)*v304;
            }
            while (v304);
          }
        }
      }
LABEL_550:
      *(_QWORD *)(a4 + 88) = *(_QWORD *)(a4 + 104);
      *(_QWORD *)(a4 + 96) = v293;
    }
    *(float *)(a4 + 120) = v295;
    *(_DWORD *)(a4 + 124) = 0;
    *(_DWORD *)(a4 + 128) = 0;
    *(_QWORD *)(a4 + 104) = 0;
    *(_QWORD *)(a4 + 112) = 0;
  }
  v314 = (uint64_t *)(a4 + 80);
  v313 = *(_QWORD *)(a4 + 80);
  v315 = *(_QWORD *)(a4 + 96);
  v498 = (unint64_t *)(a4 + 96);
  if (v313 == v315)
  {
LABEL_555:
    v315 = v313;
  }
  else
  {
    v316 = *(float *)(a4 + 120);
    if (v316 >= 0.99)
    {
      v320 = *(int8x8_t *)(a4 + 160);
      if (v320)
      {
        v321 = (uint8x8_t)vcnt_s8(v320);
        v321.i16[0] = vaddlv_u8(v321);
        if (v321.u32[0] > 1uLL)
        {
          v322 = *(_QWORD *)(a4 + 80);
          if (v313 >= *(_QWORD *)&v320)
            v322 = v313 % *(_QWORD *)&v320;
        }
        else
        {
          v322 = (*(_QWORD *)&v320 - 1) & v313;
        }
        v323 = *(_QWORD ***)(*v488 + 8 * v322);
        if (v323)
        {
          v324 = *v323;
          if (*v323)
          {
            if (v321.u32[0] < 2uLL)
            {
              v325 = *(_QWORD *)&v320 - 1;
              while (1)
              {
                v327 = v324[1];
                if (v327 == v313)
                {
                  if (v324[2] == v313)
                    goto LABEL_600;
                }
                else if ((v327 & v325) != v322)
                {
                  goto LABEL_601;
                }
                v324 = (_QWORD *)*v324;
                if (!v324)
                  goto LABEL_601;
              }
            }
            do
            {
              v326 = v324[1];
              if (v326 == v313)
              {
                if (v324[2] == v313)
                {
LABEL_600:
                  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::erase(v488, v324);
                  v315 = *v498;
                  break;
                }
              }
              else
              {
                if (v326 >= *(_QWORD *)&v320)
                  v326 %= *(_QWORD *)&v320;
                if (v326 != v322)
                  break;
              }
              v324 = (_QWORD *)*v324;
            }
            while (v324);
          }
        }
      }
LABEL_601:
      *(_QWORD *)(a4 + 72) = *(_QWORD *)(a4 + 88);
      *(_QWORD *)(a4 + 80) = v315;
      *(_DWORD *)(a4 + 120) = 0;
      v313 = v315;
    }
    else if (v316 <= 0.01)
    {
      v317 = *(int8x8_t *)(a4 + 160);
      if (v317)
      {
        v318 = (uint8x8_t)vcnt_s8(v317);
        v318.i16[0] = vaddlv_u8(v318);
        if (v318.u32[0] > 1uLL)
        {
          v319 = *(_QWORD *)(a4 + 96);
          if (v315 >= *(_QWORD *)&v317)
            v319 = v315 % *(_QWORD *)&v317;
        }
        else
        {
          v319 = (*(_QWORD *)&v317 - 1) & v315;
        }
        v328 = *(_QWORD ***)(*v488 + 8 * v319);
        if (v328)
        {
          v329 = *v328;
          if (*v328)
          {
            if (v318.u32[0] < 2uLL)
            {
              v330 = *(_QWORD *)&v317 - 1;
              while (1)
              {
                v332 = v329[1];
                if (v332 == v315)
                {
                  if (v329[2] == v315)
                    goto LABEL_801;
                }
                else if ((v332 & v330) != v319)
                {
                  goto LABEL_802;
                }
                v329 = (_QWORD *)*v329;
                if (!v329)
                  goto LABEL_802;
              }
            }
            do
            {
              v331 = v329[1];
              if (v331 == v315)
              {
                if (v329[2] == v315)
                {
LABEL_801:
                  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::erase(v488, v329);
                  v313 = *v314;
                  break;
                }
              }
              else
              {
                if (v331 >= *(_QWORD *)&v317)
                  v331 %= *(_QWORD *)&v317;
                if (v331 != v319)
                  break;
              }
              v329 = (_QWORD *)*v329;
            }
            while (v329);
          }
        }
      }
LABEL_802:
      *(_QWORD *)(a4 + 88) = *(_QWORD *)(a4 + 72);
      *(_QWORD *)(a4 + 96) = v313;
      goto LABEL_555;
    }
  }
  v333 = *(_QWORD *)(a4 + 40);
  v334 = *(_QWORD *)(a4 + 48);
  v335 = 0.0;
  if (v333 == v334)
    goto LABEL_625;
  while (*(_BYTE *)v333 != 3)
  {
    v333 += 272;
    if (v333 == v334)
      goto LABEL_625;
  }
  if (!*(_BYTE *)(v333 + 168))
  {
LABEL_625:
    v342 = 0.0;
  }
  else
  {
    v336 = *(_QWORD *)(v333 + 176);
    v337 = *(_QWORD *)(v333 + 184);
    if (v313 == v315)
    {
      v338 = (v337 - v336) >> 3;
      if (v337 == v336)
      {
LABEL_614:
        v339 = 0;
      }
      else
      {
        v339 = 0;
        if (v338 <= 1)
          v340 = 1;
        else
          v340 = v338;
        while (*(_QWORD *)(v336 + 8 * v339) != v315)
        {
          if (v340 == ++v339)
            goto LABEL_614;
        }
      }
      v341 = v339 + 1;
      v342 = 0.0;
      if (v339 + 1 < v338)
      {
        v343 = (float *)v509;
        v344 = v510;
        do
        {
          v345 = *(_QWORD *)(v336 + 8 * v341);
          v346 = v343;
          if (v343 == v344)
          {
LABEL_620:
            v348 = 0;
          }
          else
          {
            while (1)
            {
              v347 = *((_QWORD *)v346 + 1);
              if (*(_QWORD *)(v347 + 224) == v345)
                break;
              v346 += 6;
              if (v346 == v344)
                goto LABEL_620;
            }
            *(_QWORD *)(a4 + 96) = v345;
            *(_QWORD *)(a4 + 88) = *(_QWORD *)(v347 + 168);
            v348 = v341;
          }
          ++v341;
        }
        while (v341 < v338 && !v348);
LABEL_785:
        v342 = 0.0;
        v335 = 0.0;
        if (v348 > v339)
          v335 = fminf((float)((float)(*(float *)(v333 + 264) - (float)v339) + (float)*(unint64_t *)(v333 + 256))/ (float)(v348 - v339), 1.0);
        v474 = v339 + 1;
        if (v339 + 1 < v348)
        {
          v475 = 0;
          v476 = *(_QWORD *)(a4 + 112);
          v477 = (float *)v509;
          v478 = v510;
          do
          {
            v479 = *(_QWORD *)(v336 + 8 * v474);
            v480 = v477;
            if (v477 != v478)
            {
              while (1)
              {
                v481 = *((_QWORD *)v480 + 1);
                if (*(_QWORD *)(v481 + 224) == v479)
                  break;
                v480 += 6;
                if (v480 == v478)
                  goto LABEL_791;
              }
              v475 = v474;
              if (!v476)
              {
                *(_QWORD *)(a4 + 112) = v479;
                *(_QWORD *)(a4 + 104) = *(_QWORD *)(v481 + 168);
                v476 = v479;
                v475 = v474;
              }
            }
LABEL_791:
            ++v474;
          }
          while (v474 != v348);
          if (v475 > v339)
          {
            v482 = *(_QWORD *)(v333 + 256);
            v483 = *(float *)(v333 + 264);
            v484 = (float)v482;
            if (v482 >= v475)
              v485 = (float)((float)((float)(v484 - (float)v475) + v483) / (float)(v348 - v475)) + 1.0;
            else
              v485 = (float)((float)(v484 - (float)v339) + v483) / (float)(v475 - v339);
            v342 = fminf(v485, 2.0);
          }
        }
      }
    }
    else
    {
      v342 = 0.0;
      v470 = v337 - v336;
      if (v337 != v336)
      {
        v339 = 0;
        v348 = 0;
        v471 = 0;
        v472 = v470 >> 3;
        if (v472 <= 1)
          v472 = 1;
        do
        {
          v473 = *(_QWORD *)(v336 + 8 * v471);
          if (v473 == v313)
            v339 = v471;
          if (v473 == v315)
            v348 = v471;
          ++v471;
        }
        while (v472 != v471);
        goto LABEL_785;
      }
    }
  }
  for (k = *(_QWORD **)(a4 + 168); k; k = (_QWORD *)*k)
  {
    v367 = k[3];
    v368 = k[4];
    if (v367 != v368)
    {
      do
      {
        v369 = *(std::__shared_weak_count **)(v367 + 8);
        if (v369)
        {
          v370 = (unint64_t *)&v369->__shared_owners_;
          do
            v371 = __ldaxr(v370);
          while (__stlxr(v371 - 1, v370));
          if (!v371)
          {
            ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
            std::__shared_weak_count::__release_weak(v369);
          }
        }
        v367 += 16;
      }
      while (v367 != v368);
      v367 = k[3];
    }
    k[4] = v367;
  }
  *(_QWORD *)(a4 + 200) = *(_QWORD *)(a4 + 192);
  md::LayoutContext::frameState(a2);
  v351 = *(double *)(v350 + 496);
  md::LayoutContext::frameState(a2);
  v352 = v351;
  v354 = *(double *)(v353 + 504);
  v355 = 720;
  if ((float)(v352 / fmaxf(v354, 0.01)) > 1.0)
    v355 = 736;
  v356 = *(double *)(v492 + v355);
  md::LayoutContext::frameState(a2);
  v358 = *(double *)(v357 + 496);
  v359 = *(double *)(v357 + 504);
  v360 = v359 * v358;
  v361 = v358 / v359;
  if (v360 <= 0.0)
    v361 = 1.0;
  v362 = fmin(v361, 1.0);
  v363 = tan(v356 * 0.5);
  v364 = atan(v363 * v362);
  v365 = (float *)v509;
  v495 = v510;
  if (v509 != v510)
  {
    v366 = v364 + v364;
    v487 = (uint64_t *)(a4 + 80);
    do
    {
      v377 = *(_QWORD *)(*((_QWORD *)v365 + 1) + 224);
      v506 = v377;
      if (*v314 != v377 && *v498 != v377 && *v502 != v377)
        goto LABEL_645;
      v380 = *(int8x8_t *)(v499 + 160);
      if (!*(_QWORD *)&v380)
        goto LABEL_674;
      v381 = (uint8x8_t)vcnt_s8(v380);
      v381.i16[0] = vaddlv_u8(v381);
      if (v381.u32[0] > 1uLL)
      {
        v382 = v377;
        if (v377 >= *(_QWORD *)&v380)
          v382 = v377 % *(_QWORD *)&v380;
      }
      else
      {
        v382 = (*(_QWORD *)&v380 - 1) & v377;
      }
      v383 = *(_QWORD **)(*v488 + 8 * v382);
      if (v383)
      {
        v384 = (_QWORD *)*v383;
        if (*v383)
        {
          if (v381.u32[0] < 2uLL)
          {
            v385 = *(_QWORD *)&v380 - 1;
            while (1)
            {
              v387 = v384[1];
              if (v377 == v387)
              {
                if (v384[2] == v377)
                  goto LABEL_675;
              }
              else if ((v387 & v385) != v382)
              {
                goto LABEL_674;
              }
              v384 = (_QWORD *)*v384;
              if (!v384)
                goto LABEL_675;
            }
          }
          do
          {
            v386 = v384[1];
            if (v377 == v386)
            {
              if (v384[2] == v377)
                break;
            }
            else
            {
              if (v386 >= *(_QWORD *)&v380)
                v386 %= *(_QWORD *)&v380;
              if (v386 != v382)
                goto LABEL_674;
            }
            v384 = (_QWORD *)*v384;
          }
          while (v384);
        }
      }
      else
      {
LABEL_674:
        v384 = 0;
      }
LABEL_675:
      v388 = std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v488, v377, (uint64_t *)&v506);
      v390 = (void **)(v388 + 24);
      v389 = *((_QWORD *)v388 + 3);
      *((double *)v388 + 17) = v366;
      if (v389 == *((_QWORD *)v388 + 4))
      {
        v392 = *(unint64_t **)(v499 + 200);
        v391 = *(_QWORD *)(v499 + 208);
        if ((unint64_t)v392 >= v391)
        {
          v394 = *(unint64_t **)(v499 + 192);
          v395 = v392 - v394;
          v396 = v395 + 1;
          if ((unint64_t)(v395 + 1) >> 61)
            abort();
          v397 = v391 - (_QWORD)v394;
          if (v397 >> 2 > v396)
            v396 = v397 >> 2;
          if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFF8)
            v398 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v398 = v396;
          if (v398)
          {
            if (v398 >> 61)
              goto LABEL_804;
            v399 = v398;
            v400 = operator new(8 * v398);
            v398 = v399;
          }
          else
          {
            v400 = 0;
          }
          v401 = (unint64_t *)&v400[8 * v395];
          *v401 = v377;
          v393 = v401 + 1;
          if (v392 != v394)
          {
            v402 = (char *)(v392 - 1) - (char *)v394;
            if (v402 < 0x58)
              goto LABEL_815;
            if ((unint64_t)((char *)v394 - v400) < 0x20)
              goto LABEL_815;
            v403 = (v402 >> 3) + 1;
            v404 = &v400[8 * v395 - 16];
            v405 = v392 - 2;
            v406 = v403 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v407 = *(_OWORD *)v405;
              *(v404 - 1) = *((_OWORD *)v405 - 1);
              *v404 = v407;
              v404 -= 2;
              v405 -= 4;
              v406 -= 4;
            }
            while (v406);
            v401 -= v403 & 0x3FFFFFFFFFFFFFFCLL;
            v392 -= v403 & 0x3FFFFFFFFFFFFFFCLL;
            if (v403 != (v403 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_815:
              do
              {
                v408 = *--v392;
                *--v401 = v408;
              }
              while (v392 != v394);
            }
          }
          *(_QWORD *)(v499 + 192) = v401;
          *(_QWORD *)(v499 + 200) = v393;
          *(_QWORD *)(v499 + 208) = &v400[8 * v398];
          if (v394)
            operator delete(v394);
        }
        else
        {
          *v392 = v377;
          v393 = v392 + 1;
        }
        *(_QWORD *)(v499 + 200) = v393;
        v294 = v492;
      }
      v409 = *((_QWORD *)v365 + 1);
      v410 = (std::__shared_weak_count *)*((_QWORD *)v365 + 2);
      v507 = (float64x2_t *)v409;
      v508 = v410;
      if (v410)
      {
        v411 = (unint64_t *)&v410->__shared_owners_;
        do
          v412 = __ldxr(v411);
        while (__stxr(v412 + 1, v411));
      }
      v413 = *((_QWORD *)v388 + 3);
      v414 = *((_QWORD *)v388 + 4) - v413;
      v314 = v487;
      v415 = 0;
      if (v414)
      {
        v416 = v414 >> 4;
        if ((unint64_t)(v414 >> 4) <= 1)
          v416 = 1;
        v417 = *((_QWORD *)v388 + 3);
        while (*(unsigned __int8 *)(v409 + 472) != *(unsigned __int8 *)(*(_QWORD *)v417 + 472))
        {
          ++v415;
          v417 += 16;
          if (v416 == v415)
          {
            v415 = v416;
            goto LABEL_717;
          }
        }
        if (*(unsigned __int8 *)(v409 + 544) < *(unsigned __int8 *)(*(_QWORD *)v417 + 544))
        {
          if (v410)
          {
            v418 = (unint64_t *)&v410->__shared_owners_;
            do
              v419 = __ldxr(v418);
            while (__stxr(v419 + 1, v418));
          }
          *(_QWORD *)(v413 + 16 * v415) = v409;
          v420 = v413 + 16 * v415;
          v421 = *(std::__shared_weak_count **)(v420 + 8);
          *(_QWORD *)(v420 + 8) = v410;
          if (v421)
          {
            v422 = (unint64_t *)&v421->__shared_owners_;
            do
              v423 = __ldaxr(v422);
            while (__stlxr(v423 - 1, v422));
            if (!v423)
            {
              ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
              std::__shared_weak_count::__release_weak(v421);
            }
          }
        }
      }
LABEL_717:
      v424 = (float64x2_t **)*((_QWORD *)v388 + 4);
      if (v415 == ((uint64_t)v424 - *((_QWORD *)v388 + 3)) >> 4)
      {
        if (*((_QWORD *)v388 + 6) < (unint64_t)(v415 + 1))
        {
          geo::small_vector_base<std::shared_ptr<md::mun::MuninViewData>>::grow(v390, v415 + 1);
          v424 = (float64x2_t **)*((_QWORD *)v388 + 4);
        }
        *v424 = v507;
        v425 = v508;
        v424[1] = (float64x2_t *)v508;
        if (v425)
        {
          v426 = (unint64_t *)&v425->__shared_owners_;
          do
            v427 = __ldxr(v426);
          while (__stxr(v427 + 1, v426));
          v424 = (float64x2_t **)*((_QWORD *)v388 + 4);
        }
        *((_QWORD *)v388 + 4) = v424 + 2;
      }
      if (!v410)
        goto LABEL_729;
      v428 = (unint64_t *)&v410->__shared_owners_;
      do
        v429 = __ldaxr(v428);
      while (__stlxr(v429 - 1, v428));
      if (!v429)
      {
        ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
        std::__shared_weak_count::__release_weak(v410);
        if (!v384)
        {
LABEL_730:
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*(_QWORD *)(v294 + 520) + 64, v506, v506);
          v430 = *(float64x2_t **)*v390;
          v431 = v430[12].f64[1] - *(double *)(v491 + 496);
          v432 = vsubq_f64(v430[13], *v489);
          v433 = vmulq_f64(v432, v432);
          *(float *)&v431 = sqrt(v433.f64[0] + v431 * v431 + v433.f64[1]);
          v434 = *(_QWORD *)(v294 + 520);
          v435 = *(float *)&v431;
          v436 = *(_QWORD *)(v434 + 56);
          if (v436)
          {
            v372 = fmax(*(double *)(v434 + 32), v435);
            *(double *)(v434 + 24) = fmin(*(double *)(v434 + 24), v435);
            *(double *)(v434 + 32) = v372;
            v373 = (double)v436;
            v374 = *(double *)(v434 + 40) + v435 / (double)v436;
            v375 = v436 + 1;
            v376 = *(double *)(v434 + 48) + v435;
            *(double *)(v434 + 40) = v374 * v373 / (double)v375;
            *(double *)(v434 + 48) = v376;
          }
          else
          {
            *(double *)(v434 + 24) = v435;
            *(double *)(v434 + 32) = v435;
            *(double *)(v434 + 40) = v435;
            *(double *)(v434 + 48) = v435;
            v375 = 1;
          }
          *(_QWORD *)(v434 + 56) = v375;
          v314 = v487;
        }
      }
      else
      {
LABEL_729:
        if (!v384)
          goto LABEL_730;
      }
LABEL_645:
      v365 += 6;
    }
    while (v365 != v495);
  }
  md::LayoutContext::frameState(a2);
  v438 = *(double *)(v437 + 88) - *(double *)(v499 + 136);
  v439 = *(_QWORD *)(v499 + 112);
  if (!v439
    || (v440 = std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v488, v439, v502), *((_QWORD *)v440 + 4) == *((_QWORD *)v440 + 3)))
  {
    *(_DWORD *)(v499 + 124) = 0;
    *(_DWORD *)(v499 + 128) = 0;
  }
  else
  {
    v441 = fminf(*(float *)(v499 + 128) + (float)(v438 * 5.0), 1.0);
    *(float *)(v499 + 124) = v342;
    *(float *)(v499 + 128) = v441;
  }
  v442 = *v314;
  if (*v314 != *v498)
  {
    v443 = std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v488, v442, v314);
    if (*((_QWORD *)v443 + 4) != *((_QWORD *)v443 + 3))
    {
      v444 = std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v488, *v498, (uint64_t *)v498);
      if (*((_QWORD *)v444 + 4) != *((_QWORD *)v444 + 3))
      {
        v445 = fminf(fminf(*(float *)(v499 + 120) + (float)(v438 * 10.0), v335), 1.0);
        goto LABEL_744;
      }
    }
    v442 = *v314;
  }
  v445 = 0.0;
  if (v442)
LABEL_744:
    *(float *)(v499 + 120) = v445;
  md::LayoutContext::frameState(a2);
  *(double *)(v499 + 144) = *(double *)(v446 + 88) - *(double *)(v499 + 136);
  md::LayoutContext::frameState(a2);
  *(_QWORD *)(v499 + 136) = *(_QWORD *)(v447 + 88);
  v449 = *(_QWORD *)(v499 + 192);
  v448 = *(_QWORD *)(v499 + 200);
  if (v449 != v448)
  {
    v450 = (_QWORD *)(v448 - 8);
    if ((unint64_t)v450 > v449)
    {
      v451 = v449 + 8;
      do
      {
        v452 = *(_QWORD *)(v451 - 8);
        *(_QWORD *)(v451 - 8) = *v450;
        *v450-- = v452;
        v91 = v451 >= (unint64_t)v450;
        v451 += 8;
      }
      while (!v91);
    }
  }
  v453 = (float *)v509;
  if (v509)
  {
    v454 = v510;
    if (v510 != v509)
    {
      do
      {
        v455 = (std::__shared_weak_count *)*((_QWORD *)v454 - 1);
        if (v455)
        {
          v456 = (unint64_t *)&v455->__shared_owners_;
          do
            v457 = __ldaxr(v456);
          while (__stlxr(v457 - 1, v456));
          if (!v457)
          {
            ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
            std::__shared_weak_count::__release_weak(v455);
          }
        }
        v454 -= 6;
      }
      while (v454 != v453);
      v453 = (float *)v509;
    }
    operator delete(v453);
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", a2);
  v458 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v458, "overrideIntermediateLod"))
    *(_BYTE *)(v294 + 704) = objc_msgSend(v458, "intermediateLodOverride");
  if (objc_msgSend(v458, "muninOverrideFov"))
  {
    objc_msgSend(v458, "defaultFovPortrait");
    *(double *)(v294 + 720) = v459 * 0.0174532925;
    objc_msgSend(v458, "defaultFovLandscape");
    *(double *)(v294 + 736) = v460 * 0.0174532925;
    objc_msgSend(v458, "maxFovPortrait");
    *(double *)(v294 + 728) = v461 * 0.0174532925;
    objc_msgSend(v458, "maxFovLandscape");
    *(double *)(v294 + 744) = v462 * 0.0174532925;
    objc_msgSend(v458, "minFov");
    *(double *)(v294 + 752) = v463 * 0.0174532925;
    objc_msgSend(v458, "minFovSpring");
    *(double *)(v294 + 760) = v464 * 0.0174532925;
    objc_msgSend(v458, "maxFovSpring");
    *(double *)(v294 + 768) = v465 * 0.0174532925;
  }

  if (v503)
  {
    v466 = (unint64_t *)&v503->__shared_owners_;
    do
      v467 = __ldaxr(v466);
    while (__stlxr(v467 - 1, v466));
    if (!v467)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v503);
    }
  }
  if (!v521)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_812;
  }
  (*(void (**)(_QWORD *))(*v521 + 48))(v521);
  v468 = v521;
  if (v521 == v520)
  {
    v469 = 4;
    v468 = v520;
LABEL_775:
    (*(void (**)(void))(*v468 + 8 * v469))();
  }
  else if (v521)
  {
    v469 = 5;
    goto LABEL_775;
  }
}

void sub_19FBFE0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(&a32);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a51);
  _Unwind_Resume(a1);
}

void md::MuninSceneLogic::runAfterLayout(md::MuninSceneLogic *a1, md::LayoutContext *this, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  md::LayoutContext::frameState(this);
  md::MuninSceneLogic::requestData(a1, *(const md::CameraContext **)(a3 + 8), (md::MuninSceneContext *)(uint64_t)(*(double *)(v7 + 88) * 1000.0));
  v8 = *((_QWORD *)a1 + 19);
  if (*(_BYTE *)(a4 + 240))
    v9 = md::SceneContext::sceneStatus(*(md::SceneContext **)(a4 + 8));
  else
    v9 = 0;
  gdc::LoadingStatusTracker::setSceneStatus(v8, v9);
}

void md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::MuninSceneLogic::requestData(md::MuninSceneLogic *this, const md::CameraContext *a2, md::MuninSceneContext *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  pthread_rwlock_t *v16;
  geo::read_write_lock *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *i;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  geo::read_write_lock *v40;
  const char *v41;
  uint64_t v42;
  uint64_t j;
  _BYTE *v44;
  void *v45;
  _BYTE *v46;
  void *v47;
  BOOL v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *k;
  uint64_t **m;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  _QWORD *v56;
  _QWORD *n;
  uint64_t **ii;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  _QWORD *jj;
  uint64_t **kk;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  uint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unsigned __int16 *v73;
  unsigned __int16 *v74;
  int v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  unsigned __int16 *v81;
  unsigned int v82;
  std::__shared_weak_count *v83;
  unsigned int v84;
  geo::read_write_lock *v86;
  const char *v87;
  BOOL v88;
  geo::read_write_lock *v89;
  const char *v90;
  uint64_t v91;
  __n128 *v92;
  _QWORD **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t **v105;
  unint64_t v106;
  uint64_t *v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  __n128 *v112;
  __n128 *v113;
  __n128 *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  __n128 *v124;
  __n128 *v125;
  __n128 *v126;
  __n128 *v127;
  __n128 *v128;
  __n128 *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  __n128 *v133;
  __n128 **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  __n128 *v141;
  __n128 *v142;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v144;
  unint64_t v145;
  geo::read_write_lock *v146;
  const char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  __n128 **v153;
  geo::read_write_lock *v154;
  const char *v155;
  geo::read_write_lock *v156;
  const char *v157;
  uint64_t v158;
  geo::read_write_lock *v159;
  const char *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  unint64_t *p_shared_weak_owners;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t *v167;
  pthread_rwlock_t *v168;
  geo::read_write_lock *v169;
  const char *v170;
  uint64_t v171;
  _QWORD *v172;
  void *v173;
  geo::read_write_lock *v174;
  const char *v175;
  _QWORD *v176;
  void *v177;
  char *v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  void *v189;
  char *v190;
  char *mm;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  void *v199;
  md::MuninSceneContext *v200;
  int v201;
  void *v202;
  void *v203;
  void *v204;
  _QWORD *v205;
  uint64_t v206;
  void *v207[2];
  void *v208;
  uint64_t v209;
  std::__shared_weak_count *v210[2];
  void *__p[2];
  _QWORD v212[3];
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  _QWORD *v215;
  _QWORD *v216[2];
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)*((_QWORD *)this + 18);
  v7 = v6[7];
  if (v7 != v6[8])
  {
    while (*(_WORD *)v7 != 37)
      v7 += 16;
  }
  v8 = (_QWORD *)v6[3];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v7 + 8) + 64))(&v209);
  v9 = v209;
  v10 = HIDWORD(v209);
  v11 = 632;
  if (!*((_BYTE *)this + 832))
    v11 = 640;
  md::mun::MuninMetadataContainer::nearestMetadataTiles((uint64_t)v207, *((_QWORD *)this + 21), (double *)a2 + 1, *(double *)((char *)this + v11));
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v12 = *((_QWORD *)this + 121);
  v14 = *(_QWORD *)(v12 + 112);
  v13 = *(_QWORD *)(v12 + 120);
  if (v14 != v13)
  {
    while (*(_WORD *)v14)
    {
      v14 += 112;
      if (v14 == v13)
      {
        v14 = v13;
        break;
      }
    }
  }
  if (v9)
    v15 = v10;
  else
    v15 = 512;
  v201 = v15;
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)&v202, (uint64_t)v207);
  v16 = (pthread_rwlock_t *)((char *)this + 208);
  v215 = (_QWORD *)((char *)this + 208);
  v17 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 208));
  if ((_DWORD)v17)
    geo::read_write_lock::logFailure(v17, (uint64_t)"read lock", v18);
  v200 = a3;
  v19 = operator new();
  v20 = *(_QWORD *)(v14 + 104);
  v21 = *((_QWORD *)this + 21);
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_DWORD *)(v19 + 48) = 1065353216;
  *(_QWORD *)(v19 + 56) = v207;
  *(_QWORD *)(v19 + 64) = &v201;
  *(_QWORD *)v19 = &off_1E42ABC10;
  *(_QWORD *)(v19 + 8) = v20;
  *(_QWORD *)(v19 + 72) = v21;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 96) = 0;
  v23 = (_BYTE *)*((_QWORD *)this + 23);
  v22 = (_BYTE *)*((_QWORD *)this + 24);
  v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0)
LABEL_312:
      abort();
    v25 = (char *)operator new(v22 - v23);
    *(_QWORD *)(v19 + 80) = v25;
    *(_QWORD *)(v19 + 88) = v25;
    v26 = &v25[16 * (v24 >> 4)];
    *(_QWORD *)(v19 + 96) = v26;
    memcpy(v25, v23, v24 - 5);
    *(_QWORD *)(v19 + 88) = v26;
  }
  *(_QWORD *)(v19 + 104) = *((_QWORD *)a2 + 1);
  *(_OWORD *)(v19 + 112) = *((_OWORD *)a2 + 1);
  v210[0] = (std::__shared_weak_count *)v210;
  v210[1] = (std::__shared_weak_count *)v210;
  __p[0] = 0;
  v27 = operator new(0x18uLL);
  v217 = v27;
  v218 = v27;
  *v27 = &v217;
  v27[1] = &v217;
  v27[2] = v19;
  v219 = 1;
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::emplace<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>((unsigned __int16 **)&v204, 0, &v217);
  if (v219)
  {
    v28 = v217;
    v29 = v218;
    v30 = *v218;
    *(_QWORD *)(v30 + 8) = v217[1];
    *(_QWORD *)v28[1] = v30;
    v219 = 0;
    if (v29 != &v217)
    {
      do
      {
        v50 = (_QWORD *)v29[1];
        v49 = v29[2];
        v29[2] = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        operator delete(v29);
        v29 = v50;
      }
      while (v50 != &v217);
    }
  }
  v31 = v204;
  v32 = v205;
  v33 = v204;
  if (v204 != v205)
  {
    v33 = v204;
    while (*(_WORD *)v33)
    {
      v33 += 4;
      if (v33 == v205)
      {
        v33 = v205;
        break;
      }
    }
  }
  v34 = *(_QWORD *)(v33[2] + 16);
  v35 = *((_QWORD *)this + 18);
  *(_OWORD *)v210 = 0u;
  *(_OWORD *)__p = 0u;
  LODWORD(v212[0]) = 1065353216;
  for (i = *(uint64_t **)(v35 + 144); i; i = (uint64_t *)*i)
  {
    if (*((_WORD *)i + 10))
      v48 = 1;
    else
      v48 = *((_BYTE *)i + 18) == 2;
    if (!v48)
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)v210, *((_WORD *)i + 8), *((_WORD *)i + 8));
  }
  gdc::SelectionContext::setLayerDataTypes(v34, (uint64_t *)v210);
  v37 = __p[0];
  if (__p[0])
  {
    do
    {
      v38 = (_QWORD *)*v37;
      operator delete(v37);
      v37 = v38;
    }
    while (v38);
  }
  v39 = v210[0];
  v210[0] = 0;
  if (v39)
    operator delete(v39);
  v40 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 208));
  if ((_DWORD)v40)
    geo::read_write_lock::logFailure(v40, (uint64_t)"unlock", v41);
  v42 = *((_QWORD *)this + 56);
  for (j = *((_QWORD *)this + 57); j != v42; j -= 48)
  {
    v44 = *(_BYTE **)(j - 24);
    if (v44)
    {
      do
      {
        if (v44[112])
          v44[112] = 0;
        v46 = *(_BYTE **)v44;
        v47 = (void *)*((_QWORD *)v44 + 4);
        if (v47 != *((void **)v44 + 6))
          free(v47);
        operator delete(v44);
        v44 = v46;
      }
      while (v46);
    }
    v45 = *(void **)(j - 40);
    *(_QWORD *)(j - 40) = 0;
    if (v45)
      operator delete(v45);
  }
  *((_QWORD *)this + 57) = v42;
  if (*((_BYTE *)this + 833))
  {
    if (v31 != v32)
    {
      v51 = v31;
      do
      {
        for (k = (_QWORD *)v51[2]; k != v51 + 1; k = (_QWORD *)k[1])
        {
          for (m = *(uint64_t ***)(k[2] + 32); m; m = (uint64_t **)*m)
          {
            v54 = (unsigned __int16 *)v8[1];
            v55 = (unsigned __int16 *)v8[2];
            if (v54 != v55)
            {
              while (*((unsigned __int16 *)m + 8) != *v54)
              {
                v54 += 12;
                if (v54 == v55)
                  goto LABEL_61;
              }
            }
            if (v54 != v55)
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v54 + 2) + 24))(*((_QWORD *)v54 + 2), k[2], 0);
LABEL_61:
            ;
          }
        }
        v51 += 4;
      }
      while (v51 != v32);
    }
    gdc::LayerDataManager::preloadLayerDataKeys(*(uint64_t **)(v8[8] + 40), (_QWORD *)this + 56);
    gdc::LayerDataManager::createDataRequests((uint64_t)v8, (uint64_t *)&v204, (unsigned __int16 **)this + 56, (uint64_t)v200);
    v16 = (pthread_rwlock_t *)((char *)this + 208);
  }
  if (v31 != v32)
  {
    v56 = v31;
    do
    {
      for (n = (_QWORD *)v56[2]; n != v56 + 1; n = (_QWORD *)n[1])
      {
        for (ii = *(uint64_t ***)(n[2] + 32); ii; ii = (uint64_t **)*ii)
        {
          v59 = (unsigned __int16 *)v8[1];
          v60 = (unsigned __int16 *)v8[2];
          if (v59 != v60)
          {
            while (*((unsigned __int16 *)ii + 8) != *v59)
            {
              v59 += 12;
              if (v59 == v60)
                goto LABEL_77;
            }
          }
          if (v59 != v60)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v59 + 1) + 40))(*((_QWORD *)v59 + 1), *(_QWORD *)(n[2] + 8));
LABEL_77:
          ;
        }
      }
      v56 += 4;
    }
    while (v56 != v32);
    do
    {
      for (jj = (_QWORD *)v31[2]; jj != v31 + 1; jj = (_QWORD *)jj[1])
      {
        for (kk = *(uint64_t ***)(jj[2] + 32); kk; kk = (uint64_t **)*kk)
        {
          v63 = (unsigned __int16 *)v8[1];
          v64 = (unsigned __int16 *)v8[2];
          if (v63 != v64)
          {
            while (*((unsigned __int16 *)kk + 8) != *v63)
            {
              v63 += 12;
              if (v63 == v64)
                goto LABEL_90;
            }
          }
          if (v63 != v64)
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v63 + 1) + 48))(*((_QWORD *)v63 + 1), jj[2]);
LABEL_90:
          ;
        }
      }
      v31 += 4;
    }
    while (v31 != v32);
  }
  v65 = *(_QWORD *)(v14 + 104);
  gdc::LayerDataCollector::sortIndexList((unsigned __int8 **)v65);
  v66 = *(uint64_t **)(v14 + 104);
  LODWORD(v217) = 2293796;
  v210[0] = (std::__shared_weak_count *)v212;
  v210[1] = (std::__shared_weak_count *)v212;
  __p[0] = v212;
  __p[1] = (void *)2;
  geo::small_vector_base<unsigned short>::insert((char **)v210, (char *)v212, &v217);
  v68 = v210[0];
  v67 = v210[1];
  if (v210[0] == v210[1])
  {
    v67 = v210[0];
LABEL_104:
    geo::small_vector_base<unsigned short>::insert((char **)v210, (char *)v67, (_WORD *)&v217 + 1);
    goto LABEL_105;
  }
  while (1)
  {
    v69 = LOWORD(v68->__vftable);
    if (v69 > 0x22)
      break;
    v68 = (std::__shared_weak_count *)((char *)v68 + 2);
    if (v68 == v210[1])
      goto LABEL_104;
  }
  if (v68 == v210[1])
    goto LABEL_104;
  v67 = v68;
  if (v69 != 35)
    goto LABEL_104;
LABEL_105:
  v70 = *v66;
  v71 = v66[1];
  if (*v66 != v71)
  {
    v72 = 0;
    v73 = (unsigned __int16 *)v66[3];
    v74 = (unsigned __int16 *)v66[4];
    v75 = 1;
    v76 = 1;
    while (1)
    {
      v77 = *(unsigned __int16 *)(v70 + 8);
      v78 = *(_QWORD *)(v70 + 136);
      v79 = v73;
      if (v73 != v74)
      {
        v79 = v73;
        while (*v79 != v77)
        {
          v79 += 16;
          if (v79 == v74)
            goto LABEL_119;
        }
      }
      if (v79 == v74)
        break;
      v81 = v79 + 4;
      v80 = *((_QWORD *)v79 + 1);
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)v81 + 1) - v80) >> 4) <= v78)
        goto LABEL_312;
      v82 = *(_DWORD *)(v80 + 144 * v78 + 128);
      if (v82 == 2)
      {
        v72 = 1;
      }
      else if (v82 <= 1)
      {
        break;
      }
LABEL_108:
      v70 += 144;
      if (v70 == v71)
        goto LABEL_129;
    }
LABEL_119:
    v83 = v210[0];
    if (v210[0] != v210[1])
    {
      v83 = v210[0];
      while (1)
      {
        v84 = LOWORD(v83->__vftable);
        if (v84 == v77)
          break;
        v83 = (std::__shared_weak_count *)((char *)v83 + 2);
        if (v77 < v84 || v83 == v210[1])
        {
          v83 = v210[1];
          break;
        }
      }
    }
    v76 = (v83 != v210[1]) & v76;
    v75 = (v83 == v210[1]) & v75;
    goto LABEL_108;
  }
  v72 = 0;
  v76 = 1;
  v75 = 1;
LABEL_129:
  *(_BYTE *)(v14 + 10) = v72 & 1;
  *(_BYTE *)(v14 + 8) = v75 & 1;
  v86 = (geo::read_write_lock *)pthread_rwlock_rdlock(v16);
  if ((_DWORD)v86)
    geo::read_write_lock::logFailure(v86, (uint64_t)"read lock", v87);
  v88 = (v75 & v76 & 1) != 0 && *((_QWORD *)this + 23) != *((_QWORD *)this + 24);
  *(_BYTE *)(v14 + 9) = v88;
  v89 = (geo::read_write_lock *)pthread_rwlock_unlock(v16);
  if ((_DWORD)v89)
    geo::read_write_lock::logFailure(v89, (uint64_t)"unlock", v90);
  if (v210[0] != __p[0])
    free(v210[0]);
  v91 = *((_QWORD *)this + 21);
  v92 = (__n128 *)(v91 + 80);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v91 + 80));
  *(_QWORD *)(v91 + 72) = v91 + 80;
  v93 = (_QWORD **)(v91 + 72);
  *(_QWORD *)(v91 + 88) = 0;
  *(_QWORD *)(v91 + 80) = 0;
  v94 = *(_QWORD *)(v65 + 24);
  v95 = *(_QWORD *)(v65 + 32);
  if (v94 != v95)
  {
    while (*(_WORD *)v94 != 35)
    {
      v94 += 32;
      if (v94 == v95)
        goto LABEL_292;
    }
  }
  if (v94 != v95)
  {
    v96 = *(_QWORD *)(v94 + 8);
    v97 = *(_QWORD *)(v94 + 16);
    if (v96 != v97)
    {
      do
      {
        v98 = *(_DWORD *)(v96 + 128);
        if (v98 != 2)
        {
          if (v98 != 3)
          {
            std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v91 + 80));
            *(_QWORD *)(v91 + 80) = 0;
            *(_QWORD *)(v91 + 88) = 0;
            *(_QWORD *)(v91 + 72) = v92;
            goto LABEL_292;
          }
          v100 = *(std::__shared_weak_count **)(v96 + 112);
          v99 = *(std::__shared_weak_count **)(v96 + 120);
          v210[0] = v100;
          v210[1] = v99;
          if (v99)
          {
            p_shared_owners = (unint64_t *)&v99->__shared_owners_;
            do
              v102 = __ldxr(p_shared_owners);
            while (__stxr(v102 + 1, p_shared_owners));
          }
          v103 = (uint64_t *)v92->n128_u64[0];
          v104 = (uint64_t **)(v91 + 80);
          v105 = (uint64_t **)(v91 + 80);
          if (v92->n128_u64[0])
          {
            while (1)
            {
              while (1)
              {
                v105 = (uint64_t **)v103;
                v106 = v103[4];
                if ((unint64_t)v100 >= v106)
                  break;
                v103 = *v105;
                v104 = v105;
                if (!*v105)
                  goto LABEL_158;
              }
              if (v106 >= (unint64_t)v100)
                break;
              v103 = v105[1];
              if (!v103)
              {
                v104 = v105 + 1;
                goto LABEL_158;
              }
            }
          }
          else
          {
LABEL_158:
            v107 = (uint64_t *)operator new(0x30uLL);
            v107[4] = (uint64_t)v100;
            v107[5] = (uint64_t)v99;
            v210[0] = 0;
            v210[1] = 0;
            *v107 = 0;
            v107[1] = 0;
            v107[2] = (uint64_t)v105;
            *v104 = v107;
            v108 = (_QWORD *)**v93;
            if (v108)
            {
              *v93 = v108;
              v107 = *v104;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v91 + 80), v107);
            ++*(_QWORD *)(v91 + 88);
            v99 = v210[1];
          }
          if (v99)
          {
            v109 = (unint64_t *)&v99->__shared_owners_;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
        }
        v96 += 144;
      }
      while (v96 != v97);
      v111 = *(_QWORD *)(v91 + 88);
      if (!v111)
        goto LABEL_292;
      if (v111 == *(_QWORD *)(v91 + 64))
      {
        v210[0] = 0;
        v210[1] = 0;
        __p[0] = 0;
        v112 = *(__n128 **)(v91 + 48);
        v113 = (__n128 *)(v91 + 56);
        v114 = *(__n128 **)(v91 + 72);
        if (v112 != (__n128 *)(v91 + 56))
        {
          v115 = 0;
          while (1)
          {
            if (v114 == v92)
            {
              do
              {
                if (v115 >= __p[0])
                {
                  v115 = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v210, v112[2]);
                }
                else
                {
                  v115->__vftable = (std::__shared_weak_count_vtbl *)v112[2].n128_u64[0];
                  v130 = v112[2].n128_i64[1];
                  v115->__shared_owners_ = v130;
                  if (v130)
                  {
                    v131 = (unint64_t *)(v130 + 8);
                    do
                      v132 = __ldxr(v131);
                    while (__stxr(v132 + 1, v131));
                  }
                  v115 = (std::__shared_weak_count *)((char *)v115 + 16);
                }
                v210[1] = v115;
                v133 = (__n128 *)v112->n128_u64[1];
                if (v133)
                {
                  do
                  {
                    v134 = (__n128 **)v133;
                    v133 = (__n128 *)v133->n128_u64[0];
                  }
                  while (v133);
                }
                else
                {
                  do
                  {
                    v134 = (__n128 **)v112[1].n128_u64[0];
                    v48 = *v134 == v112;
                    v112 = (__n128 *)v134;
                  }
                  while (!v48);
                }
                v112 = (__n128 *)v134;
              }
              while (v134 != (__n128 **)v113);
              goto LABEL_217;
            }
            v116 = (std::__shared_weak_count_vtbl *)v112[2].n128_u64[0];
            v117 = (std::__shared_weak_count_vtbl *)v114[2].n128_u64[0];
            if (v116 < v117)
            {
              if (v115 >= __p[0])
              {
                v115 = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v210, v112[2]);
              }
              else
              {
                v115->__vftable = v116;
                v118 = v112[2].n128_i64[1];
                v115->__shared_owners_ = v118;
                if (v118)
                {
                  v119 = (unint64_t *)(v118 + 8);
                  do
                    v120 = __ldxr(v119);
                  while (__stxr(v120 + 1, v119));
                }
                v115 = (std::__shared_weak_count *)((char *)v115 + 16);
              }
              v210[1] = v115;
              v125 = (__n128 *)v112->n128_u64[1];
              if (v125)
              {
                do
                {
                  v112 = v125;
                  v125 = (__n128 *)v125->n128_u64[0];
                }
                while (v125);
              }
              else
              {
                do
                {
                  v126 = v112;
                  v112 = (__n128 *)v112[1].n128_u64[0];
                }
                while ((__n128 *)v112->n128_u64[0] != v126);
              }
              goto LABEL_170;
            }
            if (v117 >= v116)
            {
              v127 = (__n128 *)v112->n128_u64[1];
              if (v127)
              {
                do
                {
                  v112 = v127;
                  v127 = (__n128 *)v127->n128_u64[0];
                }
                while (v127);
              }
              else
              {
                do
                {
                  v128 = v112;
                  v112 = (__n128 *)v112[1].n128_u64[0];
                }
                while ((__n128 *)v112->n128_u64[0] != v128);
              }
              v124 = (__n128 *)v114->n128_u64[1];
              if (v124)
                goto LABEL_196;
            }
            else if (v115 >= __p[0])
            {
              v115 = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v210, v114[2]);
              v210[1] = v115;
              v124 = (__n128 *)v114->n128_u64[1];
              if (v124)
                goto LABEL_196;
            }
            else
            {
              v115->__vftable = v117;
              v121 = v114[2].n128_i64[1];
              v115->__shared_owners_ = v121;
              if (v121)
              {
                v122 = (unint64_t *)(v121 + 8);
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
              }
              v115 = (std::__shared_weak_count *)((char *)v115 + 16);
              v210[1] = v115;
              v124 = (__n128 *)v114->n128_u64[1];
              if (v124)
              {
                do
                {
LABEL_196:
                  v114 = v124;
                  v124 = (__n128 *)v124->n128_u64[0];
                }
                while (v124);
                goto LABEL_170;
              }
            }
            do
            {
              v129 = v114;
              v114 = (__n128 *)v114[1].n128_u64[0];
            }
            while ((__n128 *)v114->n128_u64[0] != v129);
LABEL_170:
            if (v112 == v113)
              goto LABEL_216;
          }
        }
        v115 = 0;
LABEL_216:
        if (v114 != v92)
        {
          do
          {
            if (v115 >= __p[0])
            {
              v115 = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v210, v114[2]);
            }
            else
            {
              v115->__vftable = (std::__shared_weak_count_vtbl *)v114[2].n128_u64[0];
              v138 = v114[2].n128_i64[1];
              v115->__shared_owners_ = v138;
              if (v138)
              {
                v139 = (unint64_t *)(v138 + 8);
                do
                  v140 = __ldxr(v139);
                while (__stxr(v140 + 1, v139));
              }
              v115 = (std::__shared_weak_count *)((char *)v115 + 16);
            }
            v210[1] = v115;
            v141 = (__n128 *)v114->n128_u64[1];
            if (v141)
            {
              do
              {
                v142 = v141;
                v141 = (__n128 *)v141->n128_u64[0];
              }
              while (v141);
            }
            else
            {
              do
              {
                v142 = (__n128 *)v114[1].n128_u64[0];
                v48 = v142->n128_u64[0] == (_QWORD)v114;
                v114 = v142;
              }
              while (!v48);
            }
            v114 = v142;
          }
          while (v142 != v92);
        }
LABEL_217:
        v135 = v210[0];
        if (v210[0])
        {
          v136 = v115;
          if (v115 != v210[0])
          {
            v137 = v115;
            do
            {
              shared_weak_owners = (std::__shared_weak_count *)v137[-1].__shared_weak_owners_;
              if (shared_weak_owners)
              {
                v144 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                  std::__shared_weak_count::__release_weak(shared_weak_owners);
                }
              }
              v137 = (std::__shared_weak_count *)((char *)v137 - 16);
            }
            while (v137 != v135);
            v136 = v210[0];
          }
          v210[1] = v135;
          operator delete(v136);
        }
        if (v115 == v135)
          goto LABEL_292;
      }
      v146 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v91 + 96));
      if ((_DWORD)v146)
        geo::read_write_lock::logFailure(v146, (uint64_t)"write lock", v147);
      v148 = *(_QWORD *)(v91 + 80);
      v149 = *(_OWORD *)(v91 + 48);
      *(_QWORD *)(v91 + 56) = v148;
      v150 = *(_QWORD *)(v91 + 64);
      *(_QWORD *)(v91 + 48) = *(_QWORD *)(v91 + 72);
      *(_OWORD *)(v91 + 72) = v149;
      v151 = *(_QWORD *)(v91 + 88);
      *(_QWORD *)(v91 + 64) = v151;
      *(_QWORD *)(v91 + 88) = v150;
      v152 = (_QWORD *)(v148 + 16);
      if (!v151)
        v152 = (_QWORD *)(v91 + 48);
      *v152 = v91 + 56;
      v153 = (__n128 **)(*(_QWORD *)(v91 + 80) + 16);
      if (!v150)
        v153 = (__n128 **)(v91 + 72);
      *v153 = v92;
      v154 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v91 + 96));
      if ((_DWORD)v154)
        geo::read_write_lock::logFailure(v154, (uint64_t)"unlock", v155);
      if (!*(_QWORD *)(v91 + 32))
      {
        v167 = (uint64_t *)operator new();
        md::mun::MuninNavigationGraph::MuninNavigationGraph(v167, (_QWORD **)(v91 + 48));
        v168 = (pthread_rwlock_t *)(v91 + 296);
        v169 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v91 + 296));
        if ((_DWORD)v169)
          geo::read_write_lock::logFailure(v169, (uint64_t)"write lock", v170);
        v171 = *(_QWORD *)(v91 + 496);
        *(_QWORD *)(v91 + 496) = v167;
        if (v171)
        {
          v172 = *(_QWORD **)(v171 + 40);
          if (v172)
          {
            do
            {
              v176 = (_QWORD *)*v172;
              v177 = (void *)v172[3];
              if (v177 != (void *)v172[5])
                free(v177);
              operator delete(v172);
              v172 = v176;
            }
            while (v176);
          }
          v173 = *(void **)(v171 + 24);
          *(_QWORD *)(v171 + 24) = 0;
          if (v173)
            operator delete(v173);
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v171 + 8));
          MEMORY[0x1A1AF4E00](v171, 0x10A0C408DBFAB7ELL);
        }
        v174 = (geo::read_write_lock *)pthread_rwlock_unlock(v168);
        if ((_DWORD)v174)
          geo::read_write_lock::logFailure(v174, (uint64_t)"unlock", v175);
        goto LABEL_292;
      }
      v216[0] = 0;
      v216[1] = 0;
      v215 = v216;
      std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>((uint64_t *)&v215, *(_QWORD **)(v91 + 48), (_QWORD *)(v91 + 56));
      v156 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v91 + 296));
      if ((_DWORD)v156)
        geo::read_write_lock::logFailure(v156, (uint64_t)"write lock", v157);
      v158 = *(_QWORD *)(v91 + 504) + 1;
      *(_QWORD *)(v91 + 504) = v158;
      v159 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v91 + 296));
      if ((_DWORD)v159)
        geo::read_write_lock::logFailure(v159, (uint64_t)"unlock", v160);
      v161 = *(std::__shared_weak_count **)v91;
      v162 = *(std::__shared_weak_count **)(v91 + 8);
      if (v162)
      {
        p_shared_weak_owners = (unint64_t *)&v162->__shared_weak_owners_;
        do
          v164 = __ldxr(p_shared_weak_owners);
        while (__stxr(v164 + 1, p_shared_weak_owners));
        v165 = *(_QWORD *)(*(_QWORD *)(v91 + 32) + 24);
        v210[0] = v161;
        v210[1] = v162;
        do
          v166 = __ldxr(p_shared_weak_owners);
        while (__stxr(v166 + 1, p_shared_weak_owners));
      }
      else
      {
        v165 = *(_QWORD *)(*(_QWORD *)(v91 + 32) + 24);
        v210[0] = *(std::__shared_weak_count **)v91;
        v210[1] = 0;
      }
      __p[1] = 0;
      v212[0] = 0;
      __p[0] = &__p[1];
      std::set<std::shared_ptr<md::mun::MuninMetadata>>::insert[abi:nn180100]<std::__tree_const_iterator<std::shared_ptr<md::mun::MuninMetadata>,std::__tree_node<std::shared_ptr<md::mun::MuninMetadata>,void *> *,long>>((uint64_t *)__p, v215, v216);
      v212[1] = v158;
      v220 = 0;
      v178 = (char *)operator new(0x38uLL);
      *(_QWORD *)v178 = &off_1E42D40A8;
      *(_OWORD *)(v178 + 8) = *(_OWORD *)v210;
      v210[0] = 0;
      v210[1] = 0;
      v179 = __p[1];
      *((void **)v178 + 3) = __p[0];
      *((_QWORD *)v178 + 4) = v179;
      v180 = v178 + 32;
      v181 = v212[0];
      *((_QWORD *)v178 + 5) = v212[0];
      if (v181)
      {
        v179[2] = v180;
        __p[0] = &__p[1];
        __p[1] = 0;
        v212[0] = 0;
      }
      else
      {
        *((_QWORD *)v178 + 3) = v180;
      }
      *((_QWORD *)v178 + 6) = v158;
      v220 = v178;
      geo::TaskQueue::async(&v213, v165, &v217);
      v182 = v214;
      if (v214)
      {
        v183 = (unint64_t *)&v214->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      v185 = v220;
      if (v220 == &v217)
      {
        v186 = 4;
        v185 = &v217;
      }
      else
      {
        if (!v220)
        {
LABEL_287:
          std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)__p[1]);
          if (v210[1])
            std::__shared_weak_count::__release_weak(v210[1]);
          if (v162)
            std::__shared_weak_count::__release_weak(v162);
          std::__tree<gdc::LayerDataWithWorld>::destroy(v216[0]);
          goto LABEL_292;
        }
        v186 = 5;
      }
      (*(void (**)(void))(*v185 + 8 * v186))();
      goto LABEL_287;
    }
  }
LABEL_292:
  v187 = v203;
  if (v203)
  {
    do
    {
      v188 = (_QWORD *)*v187;
      operator delete(v187);
      v187 = v188;
    }
    while (v188);
  }
  v189 = v202;
  v202 = 0;
  if (v189)
    operator delete(v189);
  v190 = (char *)v204;
  if (v204)
  {
    for (mm = (char *)v205; mm != v190; mm -= 32)
    {
      if (*((_QWORD *)mm - 1))
      {
        v192 = *((_QWORD *)mm - 3);
        v193 = (char *)*((_QWORD *)mm - 2);
        v194 = *(_QWORD *)v193;
        *(_QWORD *)(v194 + 8) = *(_QWORD *)(v192 + 8);
        **(_QWORD **)(v192 + 8) = v194;
        *((_QWORD *)mm - 1) = 0;
        if (v193 != mm - 24)
        {
          do
          {
            v196 = (char *)*((_QWORD *)v193 + 1);
            v195 = *((_QWORD *)v193 + 2);
            *((_QWORD *)v193 + 2) = 0;
            if (v195)
              (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
            operator delete(v193);
            v193 = v196;
          }
          while (v196 != mm - 24);
        }
      }
    }
    operator delete(v190);
  }
  v197 = v208;
  if (v208)
  {
    do
    {
      v198 = (_QWORD *)*v197;
      operator delete(v197);
      v197 = v198;
    }
    while (v198);
  }
  v199 = v207[0];
  v207[0] = 0;
  if (v199)
    operator delete(v199);
}

void sub_19FBFF5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v31 - 104);
  if (v33 == v30)
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 128);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0::~$_0((uint64_t)&a27);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v31 - 144));
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)&a12);
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map(&a18);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MuninSceneLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t i;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v61;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-2].n128_f32[2];
      v9 = *(float *)a1;
      if (v8 < *(float *)a1)
      {
        *(float *)a1 = v8;
        a2[-2].n128_f32[2] = v9;
        v10 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = a2[-1].n128_u64[0];
        a2[-1].n128_u64[0] = v10;
        v11 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        v18 = a1 + 24;
        if ((__n128 *)(a1 + 24) != a2)
        {
          v19 = a1;
          do
          {
            v20 = v19;
            v19 = v18;
            v21 = *(float *)v18;
            v22 = *(float *)v20;
            if (*(float *)v18 < *(float *)v20)
            {
              v23 = *(_QWORD *)(v20 + 32);
              v24 = *(_QWORD *)(v20 + 40);
              *(_QWORD *)(v20 + 32) = 0;
              *(_QWORD *)(v20 + 40) = 0;
              while (1)
              {
                v25 = v20;
                *(float *)v18 = v22;
                v26 = *(_OWORD *)(v20 + 8);
                *(_QWORD *)(v20 + 8) = 0;
                *(_QWORD *)(v20 + 16) = 0;
                v27 = *(std::__shared_weak_count **)(v18 + 16);
                *(_OWORD *)(v18 + 8) = v26;
                if (v27)
                {
                  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                  do
                    v29 = __ldaxr(p_shared_owners);
                  while (__stlxr(v29 - 1, p_shared_owners));
                  if (!v29)
                  {
                    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                    std::__shared_weak_count::__release_weak(v27);
                  }
                }
                if (v25 == v7)
                  break;
                v20 = v25 - 24;
                v22 = *(float *)(v25 - 24);
                v18 = v25;
                if (v21 >= v22)
                {
                  v30 = v25;
                  goto LABEL_24;
                }
              }
              v30 = v7;
LABEL_24:
              *(float *)v30 = v21;
              *(_QWORD *)(v25 + 8) = v23;
              v31 = *(std::__shared_weak_count **)(v30 + 16);
              *(_QWORD *)(v30 + 16) = v24;
              if (v31)
              {
                v32 = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
            }
            v18 = v19 + 24;
          }
          while ((__n128 *)(v19 + 24) != a2);
        }
      }
    }
    else
    {
      v14 = a4;
      v15 = a3 >> 1;
      v16 = (float *)(a1 + 24 * (a3 >> 1));
      if ((uint64_t)a3 <= a5)
      {
        v34 = std::__stable_sort_move<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, (__n128 *)(a1 + 24 * (a3 >> 1)), a3 >> 1, a4, a6);
        v35 = a3 - v15;
        v36 = v14 + 24 * v15;
        std::__stable_sort_move<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(v7 + 24 * (a3 >> 1), a2, v35, v36, v34);
        v61 = a3;
        v37 = v14 + 24 * a3;
        v38 = v36;
        while (v38 != v37)
        {
          if (*(float *)v38 >= *(float *)v14)
          {
            *(_DWORD *)v7 = *(_DWORD *)v14;
            v43 = *(_OWORD *)(v14 + 8);
            *(_QWORD *)(v14 + 8) = 0;
            *(_QWORD *)(v14 + 16) = 0;
            v44 = *(std::__shared_weak_count **)(v7 + 16);
            *(_OWORD *)(v7 + 8) = v43;
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v14 += 24;
          }
          else
          {
            *(_DWORD *)v7 = *(_DWORD *)v38;
            v39 = *(_OWORD *)(v38 + 8);
            *(_QWORD *)(v38 + 8) = 0;
            *(_QWORD *)(v38 + 16) = 0;
            v40 = *(std::__shared_weak_count **)(v7 + 16);
            *(_OWORD *)(v7 + 8) = v39;
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v38 += 24;
          }
          v7 += 24;
          if (v14 == v36)
          {
            while (v38 != v37)
            {
              *(_DWORD *)v7 = *(_DWORD *)v38;
              v51 = *(_OWORD *)(v38 + 8);
              *(_QWORD *)(v38 + 8) = 0;
              *(_QWORD *)(v38 + 16) = 0;
              v52 = *(std::__shared_weak_count **)(v7 + 16);
              *(_OWORD *)(v7 + 8) = v51;
              if (v52)
              {
                v53 = (unint64_t *)&v52->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v38 += 24;
              v7 += 24;
            }
            goto LABEL_59;
          }
        }
        while (v14 != v36)
        {
          *(_DWORD *)v7 = *(_DWORD *)v14;
          v47 = *(_OWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          v48 = *(std::__shared_weak_count **)(v7 + 16);
          *(_OWORD *)(v7 + 8) = v47;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v14 += 24;
          v7 += 24;
        }
LABEL_59:
        v55 = a4;
        if (a4)
        {
          for (i = 0; i < v61; ++i)
          {
            v57 = *(std::__shared_weak_count **)(v55 + 16);
            if (v57)
            {
              v58 = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v55 += 24;
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, a1 + 24 * (a3 >> 1), a3 >> 1, a4, a5);
        v17 = a3 - v15;
        std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(v16, a2, v17, v14, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>((float *)v7, v16, (float *)a2, v15, v17, v14, a5);
      }
    }
  }
}

void sub_19FBFFBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::pair<float,std::shared_ptr<md::mun::MuninViewData>>,std::__destruct_n &>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::erase(_QWORD *a1, _QWORD *__p)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v3 = (int8x8_t)a1[1];
  v4 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != __p);
  if (v7 == a1 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*__p)
      goto LABEL_19;
    v9 = *(_QWORD *)(*__p + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a1 + 8 * v4) = 0;
  }
  v10 = *__p;
  if (*__p)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v7;
      v10 = *__p;
    }
  }
  *v7 = v10;
  *__p = 0;
  --a1[3];
  v12 = (_QWORD *)__p[3];
  v13 = (_QWORD *)__p[4];
  if (v12 != v13)
  {
    do
    {
      v14 = (std::__shared_weak_count *)v12[1];
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v12 += 2;
    }
    while (v12 != v13);
    v12 = (_QWORD *)__p[3];
  }
  if (v12 != (_QWORD *)__p[5])
    free(v12);
  operator delete(__p);
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x90uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  v14 = *a3;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *((_QWORD *)v10 + 17) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *((_QWORD *)v10 + 2) = v14;
  *((_QWORD *)v10 + 3) = v10 + 56;
  *((_QWORD *)v10 + 4) = v10 + 56;
  *((_QWORD *)v10 + 5) = v10 + 56;
  *((_QWORD *)v10 + 6) = 5;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *(_QWORD *)v10 = *v25;
LABEL_58:
    *v25 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FC000C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void geo::small_vector_base<std::shared_ptr<md::mun::MuninViewData>>::grow(void **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = (char *)a1[2];
  v5 = (unint64_t)a1[3];
  v7 = (1 << -(char)__clz(v5 + 1));
  if (v5 >= 0xFFFFFFFFFFFFFFFELL)
    v8 = 1;
  else
    v8 = v7;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  v10 = malloc_type_malloc(16 * v9, 0x20040A4A59CD2uLL);
  v11 = v10;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (*a1 != v13)
  {
    v14 = v10;
    do
    {
      *v14++ = *(_OWORD *)v12;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      v12 += 16;
    }
    while (v12 != v13);
    v15 = (char *)*a1;
    v16 = (char *)a1[1];
    while (v15 != v16)
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v15 += 16;
    }
  }
  if (v3 != v6)
    free(*a1);
  *a1 = v11;
  a1[1] = (char *)v11 + v4 - v3;
  a1[3] = (void *)v9;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[3];
      v4 = (_QWORD *)v2[4];
      if (v3 != v4)
      {
        do
        {
          v5 = (std::__shared_weak_count *)v3[1];
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 += 2;
        }
        while (v3 != v4);
        v3 = (_QWORD *)v2[3];
      }
      if (v3 != (_QWORD *)v2[5])
        free(v3);
    }
    operator delete(v2);
  }
  return a1;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  _DWORD *v8;
  unint64_t *v9;
  __n128 *v10;
  unint64_t *v11;
  float v12;
  _DWORD *v13;
  float *v14;
  float *v15;
  __n128 *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  __n128 *v39;
  uint64_t v40;

  if (a3)
  {
    v5 = a4;
    v8 = (_DWORD *)a1;
    if (a3 == 2)
    {
      v12 = a2[-2].n128_f32[2];
      v11 = (unint64_t *)(a4 + 40);
      if (v12 >= *(float *)a1)
      {
        *(_DWORD *)a4 = *(_DWORD *)a1;
        result = *(__n128 *)(a1 + 8);
        *(__n128 *)(a4 + 8) = result;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        v30 = a2[-1].n128_i64[0];
        result.n128_u32[0] = a2[-2].n128_u32[2];
        *(_DWORD *)(a4 + 24) = result.n128_u32[0];
        *(_QWORD *)(a4 + 32) = v30;
        v9 = &a2[-1].n128_u64[1];
        v10 = a2 - 1;
      }
      else
      {
        *(float *)a4 = v12;
        result = a2[-1];
        *(__n128 *)(a4 + 8) = result;
        a2[-1].n128_u64[0] = 0;
        a2[-1].n128_u64[1] = 0;
        v9 = (unint64_t *)(a1 + 16);
        result.n128_u32[0] = *(_DWORD *)a1;
        *(_DWORD *)(a4 + 24) = *(_DWORD *)a1;
        v10 = (__n128 *)(a1 + 8);
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 8);
      }
      goto LABEL_31;
    }
    if (a3 == 1)
    {
      v9 = (unint64_t *)(a1 + 16);
      result.n128_u32[0] = *(_DWORD *)a1;
      *(_DWORD *)a4 = *(_DWORD *)a1;
      v10 = (__n128 *)(a1 + 8);
      *(_QWORD *)(a4 + 8) = *(_QWORD *)(a1 + 8);
      v11 = (unint64_t *)(a4 + 16);
LABEL_31:
      *v11 = *v9;
      v10->n128_u64[0] = 0;
      v10->n128_u64[1] = 0;
      return result;
    }
    if ((uint64_t)a3 > 8)
    {
      v31 = a3 >> 1;
      v32 = 24 * (a3 >> 1);
      v33 = (_DWORD *)(a1 + v32);
      std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, a1 + v32, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(&v8[(unint64_t)v32 / 4], a2, a3 - v31, v5 + v32, a3 - v31);
      v34 = (__n128 *)&v8[(unint64_t)v32 / 4];
      while (v34 != a2)
      {
        if (v34->n128_f32[0] >= *(float *)v8)
        {
          *(_DWORD *)v5 = *v8;
          result = *(__n128 *)(v8 + 2);
          *(__n128 *)(v5 + 8) = result;
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          v8 += 6;
        }
        else
        {
          *(_DWORD *)v5 = v34->n128_u32[0];
          result = *(__n128 *)((char *)v34 + 8);
          *(__n128 *)(v5 + 8) = result;
          v34->n128_u64[1] = 0;
          v34[1].n128_u64[0] = 0;
          v34 = (__n128 *)((char *)v34 + 24);
        }
        v5 += 24;
        if (v8 == v33)
        {
          if (v34 != a2)
          {
            v38 = 0;
            do
            {
              v39 = (__n128 *)((char *)v34 + v38);
              v40 = v5 + v38;
              *(_DWORD *)v40 = v34->n128_u32[v38 / 4];
              result = *(__n128 *)((char *)v34 + v38 + 8);
              *(__n128 *)(v40 + 8) = result;
              v39->n128_u64[1] = 0;
              v39[1].n128_u64[0] = 0;
              v38 += 24;
            }
            while (&v39[1].n128_i8[8] != (__int8 *)a2);
          }
          return result;
        }
      }
      if (v8 != v33)
      {
        v35 = 0;
        do
        {
          v36 = v5 + v35 * 4;
          v37 = &v8[v35];
          *(_DWORD *)v36 = v8[v35];
          result = *(__n128 *)&v8[v35 + 2];
          *(__n128 *)(v36 + 8) = result;
          *((_QWORD *)v37 + 1) = 0;
          *((_QWORD *)v37 + 2) = 0;
          v35 += 6;
        }
        while (v37 + 6 != v33);
      }
    }
    else if ((__n128 *)a1 != a2)
    {
      *(_DWORD *)a4 = *(_DWORD *)a1;
      result = *(__n128 *)(a1 + 8);
      *(__n128 *)(a4 + 8) = result;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v13 = (_DWORD *)(a1 + 24);
      if ((__n128 *)(a1 + 24) != a2)
      {
        v14 = (float *)a4;
        v15 = (float *)a4;
        do
        {
          v16 = (__n128 *)v8;
          v8 = v13;
          v17 = *v15;
          v15 += 6;
          v18 = v17;
          if (*(float *)v13 >= v17)
          {
            v14[6] = *(float *)v13;
            result = v16[2];
            *((__n128 *)v14 + 2) = result;
            v16[2].n128_u64[0] = 0;
            v16[2].n128_u64[1] = 0;
          }
          else
          {
            v14[6] = v18;
            *((_OWORD *)v14 + 2) = *(_OWORD *)(v14 + 2);
            *((_QWORD *)v14 + 1) = 0;
            *((_QWORD *)v14 + 2) = 0;
            v19 = (float *)v5;
            if (v14 != (float *)v5)
            {
              v20 = v14;
              do
              {
                v21 = *(v20 - 6);
                v20 -= 6;
                v22 = v21;
                if (*(float *)v8 >= v21)
                {
                  v19 = v14;
                  goto LABEL_25;
                }
                *v14 = v22;
                v23 = *((_OWORD *)v14 - 1);
                *((_QWORD *)v14 - 2) = 0;
                *((_QWORD *)v14 - 1) = 0;
                v24 = (std::__shared_weak_count *)*((_QWORD *)v14 + 2);
                *(_OWORD *)(v14 + 2) = v23;
                if (v24)
                {
                  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                  do
                    v26 = __ldaxr(p_shared_owners);
                  while (__stlxr(v26 - 1, p_shared_owners));
                  if (!v26)
                  {
                    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                    std::__shared_weak_count::__release_weak(v24);
                  }
                }
                v14 = v20;
              }
              while (v20 != (float *)v5);
              v19 = (float *)v5;
            }
LABEL_25:
            *v19 = *(float *)v8;
            result = v16[2];
            v16[2].n128_u64[0] = 0;
            v16[2].n128_u64[1] = 0;
            v27 = (std::__shared_weak_count *)*((_QWORD *)v19 + 2);
            *(__n128 *)(v19 + 2) = result;
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
          v13 = v8 + 6;
          v14 = v15;
        }
        while (v8 + 6 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t *std::unique_ptr<std::pair<float,std::shared_ptr<md::mun::MuninViewData>>,std::__destruct_n &>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      v4 = 0;
      do
      {
        v5 = *(std::__shared_weak_count **)(v2 + 16);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        ++v4;
        v2 += 24;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  float *v10;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *i;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  float *v46;
  float v47;
  float *v48;
  float *v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  uint64_t v58;
  float *v59;
  float v60;
  float v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  float *v70;
  int v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  float *v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  float *v94;
  BOOL v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  if (!a5)
    return;
  v8 = a5;
  v10 = a2;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4)
      return;
    v12 = *v10;
    while (1)
    {
      v13 = *a1;
      if (v12 < *a1)
        break;
      a1 += 6;
      if (!--a4)
        return;
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        *a1 = v12;
        *v10 = v13;
        v106 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = v106;
        v107 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = *((_QWORD *)v10 + 2);
        *((_QWORD *)v10 + 2) = v107;
        return;
      }
      if (a4 >= 0)
        v42 = a4;
      else
        v42 = a4 + 1;
      v23 = v42 >> 1;
      v17 = &a1[6 * (v42 >> 1)];
      v16 = v10;
      if (v10 != a3)
      {
        v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v10) >> 3);
        v16 = v10;
        do
        {
          v44 = v43 >> 1;
          v45 = &v16[6 * (v43 >> 1)];
          v47 = *v45;
          v46 = v45 + 6;
          v43 += ~(v43 >> 1);
          if (v47 < *v17)
            v16 = v46;
          else
            v43 = v44;
        }
        while (v43);
      }
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v10) >> 3);
      if (v17 != v10)
      {
LABEL_21:
        if (v16 == v10)
        {
          v27 = v17;
        }
        else
        {
          v24 = *v17;
          *v17 = v12;
          *v10 = v24;
          v25 = *((_QWORD *)v17 + 1);
          *((_QWORD *)v17 + 1) = *((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = v25;
          v26 = *((_QWORD *)v17 + 2);
          *((_QWORD *)v17 + 2) = *((_QWORD *)v10 + 2);
          *((_QWORD *)v10 + 2) = v26;
          v27 = v17 + 6;
          for (i = v10 + 6; i != v16; i += 6)
          {
            if (v27 == v10)
              v10 = i;
            v29 = *(_DWORD *)v27;
            *v27 = *i;
            *(_DWORD *)i = v29;
            v30 = *((_QWORD *)v27 + 1);
            *((_QWORD *)v27 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v30;
            v31 = *((_QWORD *)v27 + 2);
            *((_QWORD *)v27 + 2) = *((_QWORD *)i + 2);
            *((_QWORD *)i + 2) = v31;
            v27 += 6;
          }
          if (v27 != v10)
          {
            v32 = v27;
            v33 = v10;
            while (1)
            {
              v34 = *v32;
              *v32 = *v33;
              *v33 = v34;
              v35 = *((_QWORD *)v32 + 1);
              *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
              *((_QWORD *)v33 + 1) = v35;
              v36 = *((_QWORD *)v32 + 2);
              *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
              *((_QWORD *)v33 + 2) = v36;
              v32 += 6;
              v33 += 6;
              v37 = v32 == v10;
              if (v33 == v16)
              {
                if (v32 == v10)
                  goto LABEL_49;
                v33 = v10 + 6;
                v38 = *v10;
                while (1)
                {
                  v39 = v38;
                  v38 = *v32;
                  *v32 = v39;
                  *v10 = v38;
                  v40 = *((_QWORD *)v32 + 1);
                  *((_QWORD *)v32 + 1) = *((_QWORD *)v10 + 1);
                  *((_QWORD *)v10 + 1) = v40;
                  v41 = *((_QWORD *)v32 + 2);
                  *((_QWORD *)v32 + 2) = *((_QWORD *)v10 + 2);
                  *((_QWORD *)v10 + 2) = v41;
                  v32 += 6;
                  v37 = v32 == v10;
                  if (v33 != v16)
                    break;
                  if (v32 == v10)
                    goto LABEL_49;
                }
              }
              if (v37)
                v10 = v33;
            }
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (v8 >= 0)
        v14 = v8;
      else
        v14 = v8 + 1;
      v15 = v14 >> 1;
      v16 = &v10[6 * (v14 >> 1)];
      v17 = v10;
      if (v10 != a1)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)a1) >> 3);
        v17 = a1;
        do
        {
          v19 = v18 >> 1;
          v20 = &v17[6 * (v18 >> 1)];
          v22 = *v20;
          v21 = v20 + 6;
          v18 += ~(v18 >> 1);
          if (v22 > *v16)
            v18 = v19;
          else
            v17 = v21;
        }
        while (v18);
      }
      v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)a1) >> 3);
      if (v17 != v10)
        goto LABEL_21;
    }
    v27 = v16;
LABEL_49:
    a4 -= v23;
    v8 -= v15;
    if (v23 + v15 >= a4 + v8)
    {
      v51 = v16;
      v52 = v23;
      v53 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(v27, v51, a3, a4, v8, a6, a7);
      a6 = v53;
      v10 = v17;
      v8 = v15;
      a4 = v52;
      a3 = v27;
      if (!v15)
        return;
    }
    else
    {
      v48 = v17;
      v49 = a3;
      v50 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, v48, v27, v23, v15, a6, a7);
      a3 = v49;
      a6 = v50;
      a1 = v27;
      v10 = v16;
      if (!v8)
        return;
    }
  }
  if (a4 > v8)
  {
    if (a3 == v10)
      return;
    v54 = 0;
    v55 = 0;
    do
    {
      v56 = a6 + v54 * 4;
      v57 = &v10[v54];
      *(float *)v56 = v10[v54];
      *(_OWORD *)(v56 + 8) = *(_OWORD *)&v10[v54 + 2];
      *((_QWORD *)v57 + 1) = 0;
      *((_QWORD *)v57 + 2) = 0;
      ++v55;
      v54 += 6;
    }
    while (v57 + 6 != a3);
    v58 = a6 + v54 * 4;
    while (2)
    {
      if (v58 == a6)
        goto LABEL_106;
      if (v10 == a1)
      {
        do
        {
          v71 = *(_DWORD *)(v58 - 24);
          v58 -= 24;
          *((_DWORD *)a3 - 6) = v71;
          a3 -= 6;
          v72 = *(_OWORD *)(v58 + 8);
          *(_QWORD *)(v58 + 8) = 0;
          *(_QWORD *)(v58 + 16) = 0;
          v73 = (std::__shared_weak_count *)*((_QWORD *)a3 + 2);
          *(_OWORD *)(a3 + 2) = v72;
          if (v73)
          {
            p_shared_owners = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(p_shared_owners);
            while (__stlxr(v75 - 1, p_shared_owners));
            if (!v75)
            {
              v76 = a6;
              v77 = a3;
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
              a3 = v77;
              a6 = v76;
            }
          }
        }
        while (v58 != a6);
        goto LABEL_106;
      }
      v59 = v10 - 6;
      v60 = *(v10 - 6);
      v61 = *(float *)(v58 - 24);
      if (v61 >= v60)
      {
        *(a3 - 6) = v61;
        v66 = *(_OWORD *)(v58 - 16);
        *(_QWORD *)(v58 - 16) = 0;
        *(_QWORD *)(v58 - 8) = 0;
        v63 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
        *((_OWORD *)a3 - 1) = v66;
        if (v63)
        {
          v67 = (unint64_t *)&v63->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          v59 = v10;
          v58 -= 24;
          if (!v68)
          {
LABEL_73:
            v69 = a6;
            v70 = a3;
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
            a3 = v70;
            a6 = v69;
          }
        }
        else
        {
          v59 = v10;
          v58 -= 24;
        }
      }
      else
      {
        *(a3 - 6) = v60;
        v62 = *((_OWORD *)v10 - 1);
        *((_QWORD *)v10 - 2) = 0;
        *((_QWORD *)v10 - 1) = 0;
        v63 = (std::__shared_weak_count *)*((_QWORD *)a3 - 1);
        *((_OWORD *)a3 - 1) = v62;
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
            goto LABEL_73;
        }
      }
      a3 -= 6;
      v10 = v59;
      continue;
    }
  }
  if (a1 != v10)
  {
    v78 = 0;
    v55 = 0;
    do
    {
      v79 = a6 + v78 * 4;
      v80 = &a1[v78];
      *(float *)v79 = a1[v78];
      *(_OWORD *)(v79 + 8) = *(_OWORD *)&a1[v78 + 2];
      *((_QWORD *)v80 + 1) = 0;
      *((_QWORD *)v80 + 2) = 0;
      ++v55;
      v78 += 6;
    }
    while (v80 + 6 != v10);
    v81 = a6 + v78 * 4;
    if (a6 + v78 * 4 != a6)
    {
      v82 = a6;
      while (v10 != a3)
      {
        if (*v10 >= *(float *)v82)
        {
          *a1 = *(float *)v82;
          v89 = *(_OWORD *)(v82 + 8);
          *(_QWORD *)(v82 + 8) = 0;
          *(_QWORD *)(v82 + 16) = 0;
          v90 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
          *(_OWORD *)(a1 + 2) = v89;
          if (v90)
          {
            v91 = (unint64_t *)&v90->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              v93 = a6;
              v94 = a3;
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
              a3 = v94;
              a6 = v93;
            }
          }
          v82 += 24;
        }
        else
        {
          *a1 = *v10;
          v83 = *(_OWORD *)(v10 + 2);
          *((_QWORD *)v10 + 1) = 0;
          *((_QWORD *)v10 + 2) = 0;
          v84 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
          *(_OWORD *)(a1 + 2) = v83;
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              v87 = a6;
              v88 = a3;
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              a3 = v88;
              a6 = v87;
            }
          }
          v10 += 6;
        }
        a1 += 6;
        if (v82 == v81)
          goto LABEL_106;
      }
      do
      {
        *a1 = *(float *)v82;
        v96 = *(_OWORD *)(v82 + 8);
        *(_QWORD *)(v82 + 8) = 0;
        *(_QWORD *)(v82 + 16) = 0;
        v97 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
        *(_OWORD *)(a1 + 2) = v96;
        if (v97)
        {
          v98 = (unint64_t *)&v97->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            v100 = a6;
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
            a6 = v100;
          }
        }
        a1 += 6;
        v95 = v82 == v81 - 24;
        v82 += 24;
      }
      while (!v95);
    }
LABEL_106:
    if (a6)
    {
      v101 = 0;
      do
      {
        v102 = *(std::__shared_weak_count **)(a6 + 16);
        if (v102)
        {
          v103 = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            v105 = a6;
            ((void (*)(std::__shared_weak_count *, float *, float *))v102->__on_zero_shared)(v102, a2, a3);
            std::__shared_weak_count::__release_weak(v102);
            a6 = v105;
          }
        }
        ++v101;
        a6 += 24;
      }
      while (v101 != v55);
    }
  }
}

void ***std::unique_ptr<md::SpriteSheet>::~unique_ptr[abi:nn180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C402AA1BF7ELL);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC728;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC728;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEEclEOSO_(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 968);
    md::SceneStateManager::clear((md::SceneStateManager *)v2);
    v4 = *(_QWORD *)(v2 + 48);
    v3 = *(_QWORD *)(v2 + 56);
    if (v3 != v4)
    {
      do
      {
        v5 = v3 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v3 - 16));
        v3 = v5;
      }
      while (v5 != v4);
    }
    *(_QWORD *)(v2 + 56) = v4;
    *(_BYTE *)(v2 + 280) = 0;
  }
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC6E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC6E0;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MuninSceneLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC698;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC698;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v4 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0xE42D19AFCA302E68)
      {
        if (v8[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0xE42D19AFCA302E68)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0xE42D19AFCA302E68)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v12 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0x1AF456233693CD46)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988)
      v18 = 0x7851AF310F49C988 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x7851AF310F49C988;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x7851AF310F49C988)
      {
        if (v20[2] == 0x7851AF310F49C988)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x7851AF310F49C988)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x7851AF310F49C988)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x7851AF310F49C988)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::MuninSceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0E60;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void gdc::ManagedObjectHolder<md::MuninSceneContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0E60;
  v1 = a1[4];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::MuninSceneContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t *std::vector<md::MuninSceneEvent>::~vector[abi:nn180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void md::MuninSceneLogic::didBecomeActive(void)::$_0::operator()(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  void *v3;
  void *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  char *v32;
  std::__shared_weak_count *v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v1 = *a1;
  v2 = atomic_load((unsigned __int8 *)(*a1 + 960));
  if ((v2 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.VectorKit"));
    v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "tap_sheet_sdf_4k");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "png");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (char *)operator new(0x58uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1E42DED18;
    *((_QWORD *)v5 + 5) = 0;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 4) = 0;
    *((_DWORD *)v5 + 14) = 0;
    *((_QWORD *)v5 + 3) = &off_1E42B63B0;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    *(_OWORD *)(v5 + 60) = v6;
    *(_QWORD *)(v5 + 76) = 0x100000001;
    *((_DWORD *)v5 + 21) = 0;
    v34 = v5 + 24;
    v35 = (std::__shared_weak_count *)v5;
    loadTexture(&v36, v31, v3, v4, (uint64_t *)&v34);
    v7 = v36;
    v36 = 0uLL;
    v8 = *(std::__shared_weak_count **)(v1 + 936);
    *(_OWORD *)(v1 + 928) = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v35;
    if (v35)
    {
      v15 = (unint64_t *)&v35->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "tap_sheet_alpha_1k");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "png");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (char *)operator new(0x58uLL);
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = 0;
    *(_QWORD *)v19 = &off_1E42DED18;
    *((_QWORD *)v19 + 5) = 0;
    *((_QWORD *)v19 + 6) = 0;
    *((_QWORD *)v19 + 4) = 0;
    *((_DWORD *)v19 + 14) = 0;
    *((_QWORD *)v19 + 3) = &off_1E42B63B0;
    *(_QWORD *)&v20 = 0x100000001;
    *((_QWORD *)&v20 + 1) = 0x100000001;
    *(_OWORD *)(v19 + 60) = v20;
    *(_QWORD *)(v19 + 76) = 0x100000001;
    *((_DWORD *)v19 + 21) = 0;
    v32 = v19 + 24;
    v33 = (std::__shared_weak_count *)v19;
    loadTexture(&v36, v31, v17, v18, (uint64_t *)&v32);
    v21 = v36;
    v36 = 0uLL;
    v22 = *(std::__shared_weak_count **)(v1 + 952);
    *(_OWORD *)(v1 + 944) = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v33;
    if (v33)
    {
      v29 = (unint64_t *)&v33->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }

  }
}

void sub_19FC017A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_19FC017F4()
{
  JUMPOUT(0x19FC017E4);
}

void ___ZL33GEOGetVectorKitMuninSceneLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "MuninSceneLogic");
  v1 = (void *)GEOGetVectorKitMuninSceneLogicLog(void)::log;
  GEOGetVectorKitMuninSceneLogicLog(void)::log = (uint64_t)v0;

}

_QWORD *std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CC650;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CC650;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E42CC650;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E42CC650;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  md::MuninSceneLogic::didBecomeActive(void)::$_0::operator()((uint64_t *)(a1 + 8));
}

void std::__shared_ptr_emplace<std::lock_guard<std::mutex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E65A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::lock_guard<std::mutex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E65A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<std::lock_guard<std::mutex>>::__on_zero_shared(uint64_t a1)
{
  std::mutex::unlock(*(std::mutex **)(a1 + 24));
}

void sub_19FC01FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 968);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 944);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 928);
  std::mutex::~mutex((std::mutex *)(v1 + 864));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 848);
  v4 = *(void **)(v1 + 808);
  if (v4)
  {
    *(_QWORD *)(v1 + 816) = v4;
    operator delete(v4);
    if (!*(_BYTE *)(v1 + 608))
    {
LABEL_3:
      if (!*(_BYTE *)(v1 + 600))
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if (!*(_BYTE *)(v1 + 608))
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v1 + 608) = 0;
  if (!*(_BYTE *)(v1 + 600))
  {
LABEL_4:
    if (!*(_BYTE *)(v1 + 592))
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(v1 + 600) = 0;
  if (!*(_BYTE *)(v1 + 592))
  {
LABEL_5:
    if (!*(_BYTE *)(v1 + 584))
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  *(_BYTE *)(v1 + 592) = 0;
  if (!*(_BYTE *)(v1 + 584))
  {
LABEL_7:
    std::vector<md::MuninSceneEvent>::~vector[abi:nn180100]((uint64_t *)(v1 + 560));
    std::unique_ptr<md::FadeEffectBlock>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 552));
    std::unique_ptr<md::FadeEffectBlock>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 544));
    std::unique_ptr<md::mun::MuninIntersector>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 536));
    v5 = *(_QWORD *)(v1 + 528);
    *(_QWORD *)(v1 + 528) = 0;
    if (v5)
      MEMORY[0x1A1AF4E00](v5, 0x60C4044C4A2DFLL);
    std::unique_ptr<md::mun::MuninDisplayAnalytic>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 520));
    v6 = *(void **)(v1 + 480);
    if (v6)
    {
      *(_QWORD *)(v1 + 488) = v6;
      operator delete(v6);
    }
    geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map((void **)(v1 + 448));
    std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 408);
    geo::read_write_lock::~read_write_lock((pthread_rwlock_t *)(v1 + 208));
    v7 = *(void **)(v1 + 184);
    if (v7)
    {
      *(_QWORD *)(v1 + 192) = v7;
      operator delete(v7);
    }
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 168);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
    md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
    _Unwind_Resume(a1);
  }
LABEL_6:
  *(_BYTE *)(v1 + 584) = 0;
  goto LABEL_7;
}

uint64_t *std::unique_ptr<md::FadeEffectBlock>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = &off_1E42B4C90;

    v3 = *(_QWORD **)(v2 + 32);
    if (v3 == (_QWORD *)(v2 + 8))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 8);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x1A1AF4E00](v2, 0x10A0C401B67C7C3);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t *std::unique_ptr<md::mun::MuninIntersector>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  _BYTE *v6;
  void *v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_BYTE **)(v2 + 24);
    if (v3)
    {
      do
      {
        if (v3[112])
          v3[112] = 0;
        v6 = *(_BYTE **)v3;
        v7 = (void *)*((_QWORD *)v3 + 4);
        if (v7 != *((void **)v3 + 6))
          free(v7);
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C402A8DDD12);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::mun::MuninDisplayAnalytic>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 80);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x1A1AF4E00](v2, 0x10A0C40091BD0E7);
  }
  return a1;
}

void std::__function::__func<md::MuninSceneLogic::~MuninSceneLogic()::$_0,std::allocator<md::MuninSceneLogic::~MuninSceneLogic()::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninSceneLogic::~MuninSceneLogic()::$_0,std::allocator<md::MuninSceneLogic::~MuninSceneLogic()::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CC770;
  return result;
}

void std::__function::__func<md::MuninSceneLogic::~MuninSceneLogic()::$_0,std::allocator<md::MuninSceneLogic::~MuninSceneLogic()::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CC770;
}

void std::__shared_ptr_pointer<md::MuninSceneLogic::ValidState *,std::shared_ptr<md::MuninSceneLogic::ValidState>::__shared_ptr_default_delete<md::MuninSceneLogic::ValidState,md::MuninSceneLogic::ValidState>,std::allocator<md::MuninSceneLogic::ValidState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

std::mutex *std::__shared_ptr_pointer<md::MuninSceneLogic::ValidState *,std::shared_ptr<md::MuninSceneLogic::ValidState>::__shared_ptr_default_delete<md::MuninSceneLogic::ValidState,md::MuninSceneLogic::ValidState>,std::allocator<md::MuninSceneLogic::ValidState>>::__on_zero_shared(uint64_t a1)
{
  std::mutex *result;

  result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void std::__shared_ptr_pointer<md::mun::MuninMetadataContainer *,std::shared_ptr<md::mun::MuninMetadataContainer>::__shared_ptr_default_delete<md::mun::MuninMetadataContainer,md::mun::MuninMetadataContainer>,std::allocator<md::mun::MuninMetadataContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

md::mun::MuninMetadataContainer *std::__shared_ptr_pointer<md::mun::MuninMetadataContainer *,std::shared_ptr<md::mun::MuninMetadataContainer>::__shared_ptr_default_delete<md::mun::MuninMetadataContainer,md::mun::MuninMetadataContainer>,std::allocator<md::mun::MuninMetadataContainer>>::__on_zero_shared(uint64_t a1)
{
  md::mun::MuninMetadataContainer *result;

  result = *(md::mun::MuninMetadataContainer **)(a1 + 24);
  if (result)
  {
    md::mun::MuninMetadataContainer::~MuninMetadataContainer(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

double md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E4292B88;
  result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 1;
  return result;
}

uint64_t md::MuninSceneLogic::getLodForCavasSize(md::MuninSceneLogic *this, CGSize a2)
{
  double height;
  double width;
  void *v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;
  char *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t **v23;
  char *v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t **v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD **v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD **v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  BOOL v55;
  uint64_t **v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t v61;

  height = a2.height;
  width = a2.width;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "overrideLod"))
  {
    v6 = objc_msgSend(v5, "lodOverride");
  }
  else
  {
    v7 = width == 0.0 && height == 0.0;
    if (v7)
    {
      v6 = 4;
    }
    else
    {
      v57 = 0;
      v58 = 0;
      v56 = &v57;
      v8 = (unsigned __int16 *)*((_QWORD *)this + 102);
      v9 = (unsigned __int16 *)*((_QWORD *)this + 101);
      if (v8 == v9)
      {
        v14 = 0;
        v15 = 0;
        v60 = 0;
        v61 = 0;
        v59 = &v60;
        v16 = &v60;
        while (1)
        {
          v17 = (char *)&unk_1A007C214 + 6 * v15;
          v18 = &v60;
          if (v16 == &v60)
            goto LABEL_23;
          v19 = v14;
          v20 = &v60;
          if (v14)
          {
            do
            {
              v18 = (uint64_t **)v19;
              v19 = (uint64_t *)v19[1];
            }
            while (v19);
          }
          else
          {
            do
            {
              v18 = (uint64_t **)v20[2];
              v7 = *v18 == (uint64_t *)v20;
              v20 = v18;
            }
            while (v7);
          }
          v21 = *((unsigned __int16 *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 14) < v21)
          {
LABEL_23:
            v22 = v14 ? v18 : &v60;
            v23 = v14 ? v18 + 1 : &v60;
          }
          else
          {
            v22 = &v60;
            v23 = &v60;
            if (v14)
            {
              v25 = v14;
              v23 = &v60;
              while (1)
              {
                while (1)
                {
                  v22 = (uint64_t **)v25;
                  v26 = *((unsigned __int16 *)v25 + 14);
                  if (v21 >= v26)
                    break;
                  v25 = *v22;
                  v23 = v22;
                  if (!*v22)
                    goto LABEL_30;
                }
                if (v26 >= v21)
                  break;
                v23 = v22 + 1;
                v25 = v22[1];
                if (!v25)
                  goto LABEL_30;
              }
            }
          }
          if (!*v23)
          {
LABEL_30:
            v24 = (char *)operator new(0x20uLL);
            *(_DWORD *)(v24 + 26) = *(_DWORD *)v17;
            *((_WORD *)v24 + 15) = *((_WORD *)v17 + 2);
            *(_QWORD *)v24 = 0;
            *((_QWORD *)v24 + 1) = 0;
            *((_QWORD *)v24 + 2) = v22;
            *v23 = (uint64_t *)v24;
            if (*v59)
            {
              v59 = (uint64_t **)*v59;
              v24 = (char *)*v23;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v24);
            ++v61;
          }
          if (++v15 == 8)
            break;
          v16 = v59;
          v14 = v60;
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v57);
        v27 = v60;
        v56 = v59;
        v57 = v60;
        v58 = v61;
        if (v61)
        {
          v60[2] = (uint64_t)&v57;
          v59 = &v60;
          v60 = 0;
          v61 = 0;
          v27 = 0;
        }
        else
        {
          v56 = &v57;
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v27);
      }
      else
      {
        v10 = 0;
        v11 = 7;
        do
        {
          v12 = *v9;
          LODWORD(v59) = v10 | (v12 << 16);
          BYTE4(v59) = v11;
          geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert((uint64_t *)&v56, (unsigned __int16 *)&v59);
          if (v11 <= 1)
            v13 = 1;
          else
            v13 = v11;
          v11 = v13 - 1;
          ++v9;
          v10 = v12;
        }
        while (v9 != v8);
        LODWORD(v59) = v12 | 0xFFFF0000;
        BYTE4(v59) = v11;
        geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert((uint64_t *)&v56, (unsigned __int16 *)&v59);
      }
      v28 = v56;
      if (v56 == &v57)
        goto LABEL_79;
      v29 = 0;
      v30 = (int)fmax(width, height);
      v31 = (uint64_t)v56;
      do
      {
        v32 = *(_QWORD **)(v31 + 8);
        if (v32)
        {
          do
          {
            v33 = (_QWORD **)v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = *(_QWORD ***)(v31 + 16);
            v7 = *v33 == (_QWORD *)v31;
            v31 = (uint64_t)v33;
          }
          while (!v7);
        }
        ++v29;
        v31 = (uint64_t)v33;
      }
      while (v33 != &v57);
      v34 = (uint64_t)v56;
      do
      {
        v35 = v29 >> 1;
        v36 = (_QWORD *)v34;
        if (v29 != 1)
        {
          v38 = v29 >> 1;
          v39 = v34;
          do
          {
            v40 = *(_QWORD **)(v39 + 8);
            if (v40)
            {
              do
              {
                v36 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v36 = *(_QWORD **)(v39 + 16);
                v7 = *v36 == v39;
                v39 = (uint64_t)v36;
              }
              while (!v7);
            }
            v39 = (uint64_t)v36;
            v43 = v38-- <= 1;
          }
          while (!v43);
        }
        if (*((unsigned __int16 *)v36 + 14) <= v30)
        {
          v37 = (_QWORD *)v36[1];
          if (v37)
          {
            do
            {
              v34 = (uint64_t)v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v34 = v36[2];
              v7 = *(_QWORD *)v34 == (_QWORD)v36;
              v36 = (_QWORD *)v34;
            }
            while (!v7);
          }
          v35 = v29 + ~v35;
        }
        v29 = v35;
      }
      while (v35);
      if ((_QWORD **)v34 == &v57
        || ((v41 = *(unsigned __int16 *)(v34 + 26), v42 = *(unsigned __int16 *)(v34 + 28), v41 <= v30)
          ? (v43 = v42 > v30)
          : (v43 = 0),
            !v43))
      {
LABEL_79:
        v6 = 2;
      }
      else
      {
        v45 = 0;
        v46 = (uint64_t)v56;
        do
        {
          v47 = *(_QWORD **)(v46 + 8);
          if (v47)
          {
            do
            {
              v48 = (_QWORD **)v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = *(_QWORD ***)(v46 + 16);
              v7 = *v48 == (_QWORD *)v46;
              v46 = (uint64_t)v48;
            }
            while (!v7);
          }
          ++v45;
          v46 = (uint64_t)v48;
        }
        while (v48 != &v57);
        do
        {
          v49 = v45 >> 1;
          v50 = (uint64_t *)v28;
          if (v45 != 1)
          {
            v52 = v45 >> 1;
            v53 = v28;
            do
            {
              v54 = v53[1];
              if (v54)
              {
                do
                {
                  v50 = v54;
                  v54 = (uint64_t *)*v54;
                }
                while (v54);
              }
              else
              {
                do
                {
                  v50 = v53[2];
                  v7 = *v50 == (_QWORD)v53;
                  v53 = (uint64_t **)v50;
                }
                while (!v7);
              }
              v53 = (uint64_t **)v50;
              v43 = v52-- <= 1;
            }
            while (!v43);
          }
          if (*((unsigned __int16 *)v50 + 14) <= v30)
          {
            v51 = (uint64_t *)v50[1];
            if (v51)
            {
              do
              {
                v28 = (uint64_t **)v51;
                v51 = (uint64_t *)*v51;
              }
              while (v51);
            }
            else
            {
              do
              {
                v28 = (uint64_t **)v50[2];
                v7 = *v28 == v50;
                v50 = (uint64_t *)v28;
              }
              while (!v7);
            }
            v49 = v45 + ~v49;
          }
          v45 = v49;
        }
        while (v49);
        if (v28 == &v57
          || (*((unsigned __int16 *)v28 + 13) <= v30 ? (v55 = *((unsigned __int16 *)v28 + 14) > v30) : (v55 = 0), !v55))
        {
          v28 = &v57;
        }
        v6 = *((unsigned __int8 *)v28 + 30);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v57);
    }
  }

  return v6;
}

void sub_19FC02944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  void *v10;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a10);

  _Unwind_Resume(a1);
}

void md::MuninSceneLogic::addActiveViews(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  pthread_rwlock_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  geo::read_write_lock *v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  geo::read_write_lock *v30;
  const char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  pthread_rwlock_t *v35;
  void *v36[9];
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  if (a2)
  {
    v2 = a2;
    v3 = (_QWORD *)a1;
    v4 = (pthread_rwlock_t *)(a1 + 208);
    v5 = &v38;
    v35 = (pthread_rwlock_t *)(a1 + 208);
    while (1)
    {
      LOBYTE(v37) = *((_BYTE *)v2 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v5, (uint64_t)(v2 + 3));
      v41 = 0;
      if (*((_BYTE *)v2 + 112))
      {
        v42 = *((_DWORD *)v2 + 29);
        v41 = 1;
      }
      v6 = v2[16];
      v43 = v2[15];
      v44 = v6;
      v7 = (std::__shared_weak_count *)v2[17];
      v45 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v36, &v37);
      v10 = *((_QWORD *)v36[0] + 1);
      v11 = *((_QWORD *)v36[0] + 2);
      v12 = *((_BYTE *)v36[0] + 24);
      if (v36[0] != v36[2])
        free(v36[0]);
      v36[0] = v4;
      v13 = (geo::read_write_lock *)pthread_rwlock_wrlock(v4);
      if ((_DWORD)v13)
        geo::read_write_lock::logFailure(v13, (uint64_t)"write lock", v14);
      v16 = (char *)v3[24];
      v15 = v3[25];
      if ((unint64_t)v16 >= v15)
      {
        v18 = v5;
        v19 = v3;
        v20 = (char *)v3[23];
        v21 = (v16 - v20) >> 4;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60)
          abort();
        v23 = v15 - (_QWORD)v20;
        if (v23 >> 3 > v22)
          v22 = v23 >> 3;
        v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v22;
        if (v24)
        {
          if (v24 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = (char *)operator new(16 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[16 * v21];
        *(_QWORD *)v26 = v10;
        v26[8] = BYTE2(v11);
        v26[9] = v11;
        v26[10] = v12;
        v27 = v26;
        v5 = v18;
        if (v16 == v20)
        {
          v4 = v35;
          v3 = v19;
        }
        else
        {
          do
          {
            v28 = *((_QWORD *)v16 - 2);
            v16 -= 16;
            v29 = *(_DWORD *)(v16 + 7);
            *((_QWORD *)v27 - 2) = v28;
            v27 -= 16;
            *(_DWORD *)(v27 + 7) = v29;
          }
          while (v16 != v20);
          v3 = v19;
          v16 = (char *)v19[23];
          v4 = v35;
        }
        v17 = v26 + 16;
        v3[23] = v27;
        v3[24] = v26 + 16;
        v3[25] = &v25[16 * v24];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v10;
        v16[8] = BYTE2(v11);
        v16[9] = v11;
        v16[10] = v12;
        v17 = v16 + 16;
      }
      v3[24] = v17;
      v30 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
      if ((_DWORD)v30)
        geo::read_write_lock::logFailure(v30, (uint64_t)"unlock", v31);
      v32 = v45;
      if (v45)
      {
        v33 = (unint64_t *)&v45->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
          break;
      }
      if (v41)
        goto LABEL_38;
LABEL_39:
      if (v39 != v40)
        free(v39);
      v2 = (uint64_t *)*v2;
      if (!v2)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (!v41)
      goto LABEL_39;
LABEL_38:
    v41 = 0;
    goto LABEL_39;
  }
}

void sub_19FC02C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  pthread_rwlock_t *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, pthread_rwlock_t *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 96))
LABEL_6:
    *(_BYTE *)(a1 + 96) = 0;
LABEL_7:
  v5 = *(void **)(a1 + 16);
  if (v5 != *(void **)(a1 + 32))
    free(v5);
  return a1;
}

void md::MuninSceneLogic::addPreloadViews(uint64_t a1, const void **a2, _QWORD *a3)
{
  float v6;
  unint64_t prime;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  NSObject *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_weak_owners;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  const void *v64;
  int64_t v65;
  char *v66;
  size_t v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _BYTE *v83;
  void *v84;
  _BYTE *v85;
  void *v86;
  const void **v87;
  _QWORD *v88;
  uint64_t v89;
  __int128 *v90;
  uint8_t buf[16];
  void *v92;
  void *v93;
  char v94;
  void *__p[2];
  void *v96[2];
  int v97;
  void *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char v102[32];
  unint64_t v103;
  unint64_t v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  uint64_t v113;
  _BYTE v114[24];
  _BYTE *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  unsigned int v119;
  unsigned __int16 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 504))
  {
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
    *(_BYTE *)(a1 + 504) = 0;
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v96 = 0u;
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 432) - 0x5555555555555555 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3));
  v97 = 1065353216;
  prime = vcvtps_u32_f32(v6 / *(float *)(a1 + 440));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v89 = a1 + 408;
  v8 = *(int8x8_t *)(a1 + 416);
  if (prime > *(_QWORD *)&v8)
    goto LABEL_8;
  if (prime < *(_QWORD *)&v8)
  {
    v9 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 432) / *(float *)(a1 + 440));
    if (*(_QWORD *)&v8 < 3uLL || (v10 = (uint8x8_t)vcnt_s8(v8), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime < *(_QWORD *)&v8)
LABEL_8:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v89, prime);
  }
  v13 = *(_BYTE **)(a1 + 480);
  v12 = *(_BYTE **)(a1 + 488);
  v14 = (v12 - v13) >> 5;
  v15 = v14 - 0x5555555555555555 * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3);
  if (v15 > (uint64_t)(*(_QWORD *)(a1 + 496) - (_QWORD)v13) >> 5)
  {
    if (v15 >> 59)
      abort();
    v16 = (char *)operator new(32 * v15);
    v17 = &v16[32 * v14];
    if (v12 != v13)
    {
      v18 = &v16[32 * v14];
      do
      {
        v17 = v18 - 32;
        v19 = *((_OWORD *)v12 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v18 - 1) = v19;
        v12 -= 32;
        v18 -= 32;
      }
      while (v12 != v13);
    }
    *(_QWORD *)(a1 + 480) = v17;
    *(_QWORD *)(a1 + 488) = &v16[32 * v14];
    *(_QWORD *)(a1 + 496) = &v16[32 * v15];
    if (v13)
      operator delete(v13);
  }
  v87 = a2;
  v88 = a3;
  v20 = (__int128 *)*a2;
  v90 = (__int128 *)a2[1];
  if (*a2 != v90)
  {
    do
    {
      md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v114, *(_QWORD *)(a1 + 168), *(_QWORD *)v20);
      v21 = *(_QWORD *)(a1 + 480);
      v22 = *(_QWORD *)(a1 + 488);
      if (v21 == v22)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v21 == *(_QWORD *)v20
            && *(unsigned __int8 *)(v21 + 8) == *((unsigned __int8 *)v20 + 8)
            && *(unsigned __int8 *)(v21 + 9) == *((unsigned __int8 *)v20 + 9))
          {
            v23 += *(unsigned __int8 *)(v21 + 10) == *((unsigned __int8 *)v20 + 10);
          }
          v21 += 32;
        }
        while (v21 != v22);
      }
      if (v114[0])
      {
        v24 = *((_DWORD *)v20 + 4);
        v25 = *(_QWORD *)v20;
        v26 = *((unsigned __int8 *)v20 + 8);
        v27 = *((unsigned __int8 *)v20 + 9);
        v28 = *((unsigned __int8 *)v20 + 10);
        v98 = v102;
        v99 = v102;
        v100 = v102;
        v101 = 32;
        v103 = 0;
        v104 = v120;
        v29 = ((unint64_t)v119 << 32) | (v26 << 16) | v27;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v98, v102, (char *)&v104, (char *)v105);
        v104 = v25;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v98, v99, (char *)&v104, (char *)v105);
        v104 = v29;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v98, v99, (char *)&v104, (char *)v105);
        v104 = v28;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v98, v99, (char *)&v104, (char *)v105);
        v30 = (unsigned __int8 *)v98;
        v31 = v99 - (_BYTE *)v98;
        if (v99 == v98)
        {
          v32 = 0;
        }
        else
        {
          v32 = 0;
          if (v31 <= 1)
            v31 = 1;
          do
          {
            v33 = *v30++;
            v32 ^= (v32 << 6) + (v32 >> 2) - 0x61C8864680B583EBLL + v33;
            --v31;
          }
          while (v31);
        }
        v103 = v32;
        gdc::LayerDataRequestKey::LayerDataRequestKey(buf, 0, 0x24u, (uint64_t)&v98, v24);
        if (v98 != v100)
          free(v98);
        std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey>((uint64_t)__p, buf, (uint64_t)buf);
        if (v94)
          v94 = 0;
        if (v92 != v93)
          free(v92);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v89, *(_QWORD *)v20, *(_QWORD *)v20);
        if (v23 > 0)
          goto LABEL_89;
        *(_OWORD *)buf = *v20;
        v92 = (void *)*((_QWORD *)v20 + 2);
        v36 = *(_QWORD *)(a1 + 488);
        v39 = *(_QWORD *)(a1 + 496);
        if (v36 >= v39)
        {
          v41 = *(_QWORD *)(a1 + 480);
          v42 = (uint64_t)(v36 - v41) >> 5;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59)
            abort();
          v44 = v39 - v41;
          if (v44 >> 4 > v43)
            v43 = v44 >> 4;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
            v45 = 0x7FFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 59)
              goto LABEL_149;
            v46 = (char *)operator new(32 * v45);
          }
          else
          {
            v46 = 0;
          }
          v51 = &v46[32 * v42];
          *(_OWORD *)v51 = *(_OWORD *)buf;
          *((_QWORD *)v51 + 2) = v92;
          *((_DWORD *)v51 + 6) = 0;
          v52 = v51;
          if (v36 != v41)
          {
            do
            {
              v53 = *(_OWORD *)(v36 - 16);
              *((_OWORD *)v52 - 2) = *(_OWORD *)(v36 - 32);
              *((_OWORD *)v52 - 1) = v53;
              v52 -= 32;
              v36 -= 32;
            }
            while (v36 != v41);
            goto LABEL_85;
          }
          goto LABEL_86;
        }
        v40 = *v20;
        *(_QWORD *)(v36 + 16) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v36 = v40;
        *(_DWORD *)(v36 + 24) = 0;
        v38 = (char *)(v36 + 32);
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v34 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "Missing metadata point for preload view", buf, 2u);
        }

        if (v23 > 0)
          goto LABEL_89;
        *(_OWORD *)buf = *v20;
        v92 = (void *)*((_QWORD *)v20 + 2);
        v36 = *(_QWORD *)(a1 + 488);
        v35 = *(_QWORD *)(a1 + 496);
        if (v36 >= v35)
        {
          v47 = *(_QWORD *)(a1 + 480);
          v48 = (uint64_t)(v36 - v47) >> 5;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 59)
            abort();
          v50 = v35 - v47;
          if (v50 >> 4 > v49)
            v49 = v50 >> 4;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
            v45 = 0x7FFFFFFFFFFFFFFLL;
          else
            v45 = v49;
          if (v45)
          {
            if (v45 >> 59)
LABEL_149:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v46 = (char *)operator new(32 * v45);
          }
          else
          {
            v46 = 0;
          }
          v51 = &v46[32 * v48];
          *(_OWORD *)v51 = *(_OWORD *)buf;
          *((_QWORD *)v51 + 2) = v92;
          *((_DWORD *)v51 + 6) = 3;
          v52 = v51;
          if (v36 != v47)
          {
            do
            {
              v54 = *(_OWORD *)(v36 - 16);
              *((_OWORD *)v52 - 2) = *(_OWORD *)(v36 - 32);
              *((_OWORD *)v52 - 1) = v54;
              v52 -= 32;
              v36 -= 32;
            }
            while (v36 != v47);
LABEL_85:
            v36 = *(_QWORD *)(a1 + 480);
          }
LABEL_86:
          v38 = v51 + 32;
          *(_QWORD *)(a1 + 480) = v52;
          *(_QWORD *)(a1 + 488) = v51 + 32;
          *(_QWORD *)(a1 + 496) = &v46[32 * v45];
          if (v36)
            operator delete((void *)v36);
          goto LABEL_88;
        }
        v37 = *v20;
        *(_QWORD *)(v36 + 16) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v36 = v37;
        *(_DWORD *)(v36 + 24) = 3;
        v38 = (char *)(v36 + 32);
      }
LABEL_88:
      *(_QWORD *)(a1 + 488) = v38;
LABEL_89:
      if (v114[0])
      {
        v56 = v116;
        v55 = v117;
        if (v116 != v117)
        {
          do
          {
            v57 = (void *)v56[31];
            if (v57 != (void *)v56[33])
              free(v57);
            v56 += 36;
          }
          while (v56 != v55);
          v56 = v116;
        }
        if (v56 != v118)
          free(v56);
      }
      v20 = (__int128 *)((char *)v20 + 24);
    }
    while (v20 != v90);
  }
  v58 = *(_QWORD *)(a1 + 848);
  v59 = *(std::__shared_weak_count **)(a1 + 856);
  if (v59)
  {
    p_shared_weak_owners = (unint64_t *)&v59->__shared_weak_owners_;
    do
      v61 = __ldxr(p_shared_weak_owners);
    while (__stxr(v61 + 1, p_shared_weak_owners));
  }
  v62 = v88[3];
  if (!v62)
    goto LABEL_104;
  if ((_QWORD *)v62 != v88)
  {
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
LABEL_104:
    v108 = (_QWORD *)v62;
    goto LABEL_106;
  }
  v108 = v107;
  (*(void (**)(_QWORD *, _QWORD *))(*v88 + 24))(v88, v107);
LABEL_106:
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v64 = *v87;
  v63 = v87[1];
  v65 = v63 - (_BYTE *)*v87;
  if (v63 != *v87)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v65 >> 3) > 0xAAAAAAAAAAAAAAALL)
      abort();
    v66 = (char *)operator new(v65);
    v109 = v66;
    v110 = v66;
    v111 = &v66[8 * (v65 >> 3)];
    v67 = 24 * ((v65 - 24) / 0x18uLL) + 24;
    memcpy(v66, v64, v67);
    v110 = &v66[v67];
  }
  *(_QWORD *)&v112 = v58;
  *((_QWORD *)&v112 + 1) = v59;
  if (v59)
  {
    v68 = (unint64_t *)&v59->__shared_weak_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v113 = a1;
  v70 = operator new(0x58uLL);
  v71 = v70;
  *v70 = &off_1E42CC608;
  v72 = v70 + 1;
  if (v108)
  {
    if (v108 == v107)
    {
      v70[4] = v72;
      (*(void (**)(_QWORD *, _QWORD *))(v107[0] + 24))(v107, v72);
    }
    else
    {
      v70[4] = v108;
      v108 = 0;
    }
  }
  else
  {
    v70[4] = 0;
  }
  v71[5] = 0;
  v71[6] = 0;
  v71[7] = 0;
  v73 = v109;
  v74 = v110 - v109;
  if (v110 != v109)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v74 >> 3) > 0xAAAAAAAAAAAAAAALL)
      abort();
    v75 = (char *)operator new(v110 - v109);
    v71[5] = v75;
    v71[6] = v75;
    v71[7] = &v75[8 * (v74 >> 3)];
    memcpy(v75, v73, 24 * ((v74 - 24) / 0x18uLL) + 24);
    v71[6] = &v75[24 * ((v74 - 24) / 0x18uLL) + 24];
  }
  *((_OWORD *)v71 + 4) = v112;
  v112 = 0uLL;
  v71[10] = v113;
  v115 = v71;
  if (v73)
  {
    v110 = v73;
    operator delete(v73);
  }
  v76 = v108;
  if (v108 == v107)
  {
    v77 = 4;
    v76 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_127;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_127:
  v78 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 24);
  v106 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v71 + 16))(v71);
  gdc::LayerDataManager::requestLayerDataKeys(v78, (uint64_t)__p, v105);
  v79 = v106;
  if (v106 == v105)
  {
    v80 = 4;
    v79 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_132;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_132:
  v81 = v115;
  if (v115 == v114)
  {
    v82 = 4;
    v81 = v114;
  }
  else
  {
    if (!v115)
      goto LABEL_137;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_137:
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  v83 = v96[0];
  if (v96[0])
  {
    do
    {
      if (v83[112])
        v83[112] = 0;
      v85 = *(_BYTE **)v83;
      v86 = (void *)*((_QWORD *)v83 + 4);
      if (v86 != *((void **)v83 + 6))
        free(v86);
      operator delete(v83);
      v83 = v85;
    }
    while (v85);
  }
  v84 = __p[0];
  __p[0] = 0;
  if (v84)
    operator delete(v84);
}

void sub_19FC036B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  std::__shared_weak_count *v60;

  if (v60)
    std::__shared_weak_count::__release_weak(v60);
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  int v11;
  int v12;
  uint64_t *v13;
  const void *v14;
  size_t v15;
  unint64_t v16;
  uint64_t *v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  const void *v22;
  size_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  const void *v40;
  uint64_t *v41;
  uint64_t *v42;

  v6 = *((_QWORD *)a2 + 13);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *((_QWORD *)a2 + 13);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *a2;
        v12 = *((unsigned __int16 *)a2 + 4);
        v13 = (uint64_t *)*((_QWORD *)a2 + 10);
        v14 = (const void *)*((_QWORD *)a2 + 2);
        v15 = *((_QWORD *)a2 + 3) - (_QWORD)v14;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v10[1];
            if (v20 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                v21 = v10[4];
                if ((char *)v10[5] - (char *)v21 == v15)
                {
                  v40 = v14;
                  v42 = v13;
                  v22 = v14;
                  v23 = v15;
                  v24 = memcmp(v21, v22, v15);
                  v15 = v23;
                  v14 = v40;
                  v13 = v42;
                  if (!v24)
                    return;
                }
              }
            }
            else if (((unint64_t)v20 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v16 = (unint64_t)v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              v17 = v10[4];
              if ((char *)v10[5] - (char *)v17 == v15)
              {
                v18 = v15;
                v41 = v13;
                v19 = memcmp(v17, v14, v15);
                v15 = v18;
                v13 = v41;
                if (!v19)
                  return;
              }
            }
          }
          else
          {
            if (v16 >= v7)
              v16 %= v7;
            if (v16 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x80uLL);
  *v26 = 0;
  v26[1] = v6;
  *((_BYTE *)v26 + 16) = *(_BYTE *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 3), a3 + 8);
  *((_BYTE *)v26 + 112) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *((_DWORD *)v26 + 29) = *(_DWORD *)(a3 + 100);
    *((_BYTE *)v26 + 112) = 1;
  }
  v26[15] = *(_QWORD *)(a3 + 104);
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v7 || (float)(v28 * (float)v7) < v27)
  {
    v29 = 1;
    if (v7 >= 3)
      v29 = (v7 & (v7 - 1)) != 0;
    v30 = v29 | (2 * v7);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_45;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_45:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v37 = *(_QWORD *)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v26 = *v38;
LABEL_69:
    *v38 = v26;
    goto LABEL_70;
  }
  *v26 = *v25;
  *v25 = v26;
  *(_QWORD *)(v37 + 8 * v3) = v25;
  if (*v26)
  {
    v39 = *(_QWORD *)(*v26 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19FC03B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::~$_1(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

_QWORD *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E42CC608;
  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_1E42CC608;
  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x58uLL);
  *v2 = &off_1E42CC608;
  std::__compressed_pair_elem<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_19FC03D54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CC608;
  return std::__compressed_pair_elem<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

_QWORD *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  void *v3;
  _QWORD *result;
  uint64_t v5;

  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  result = (_QWORD *)a1[4];
  if (result == a1 + 1)
  {
    v5 = 4;
    result = a1 + 1;
  }
  else
  {
    if (!result)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (std::__shared_weak_count *)__p[9];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (void *)__p[5];
  if (v3)
  {
    __p[6] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)__p[4];
  if (v4 == __p + 1)
  {
    v5 = 4;
    v4 = __p + 1;
    goto LABEL_9;
  }
  if (v4)
  {
    v5 = 5;
LABEL_9:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  operator delete(__p);
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::operator()(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 1;
  v16 = *a2;
  v6 = a1 + 5;
  v7 = operator new(0x28uLL);
  *v7 = &off_1E42D9998;
  v7[1] = &v16;
  v7[2] = a3;
  v7[3] = v6;
  v7[4] = v5;
  v21 = v7;
  v8 = (std::__shared_weak_count *)a1[9];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v18 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = a1[8];
      v17 = v11;
      if (v11)
      {
        std::mutex::lock((std::mutex *)v11);
        if (*(_BYTE *)(v11 + 64))
        {
          v19 = a1[10];
          if (!v21)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v19);
        }
        std::mutex::unlock((std::mutex *)v11);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      return;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
}

void sub_19FC03FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D9998;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9998;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::operator()(_QWORD *result, uint64_t a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v2 = (uint64_t **)result[3];
  v3 = *v2;
  v4 = v2[1];
  if (v3 != v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 480);
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 488);
    if (v5 != v6)
    {
      do
      {
        v7 = *v3;
        v8 = (unsigned __int8 *)result[1];
        v9 = v5;
        do
        {
          if (*(_QWORD *)v9 == v7
            && *(unsigned __int8 *)(v9 + 8) == *((unsigned __int8 *)v3 + 8)
            && *(unsigned __int8 *)(v9 + 9) == *((unsigned __int8 *)v3 + 9)
            && *(unsigned __int8 *)(v9 + 10) == *((unsigned __int8 *)v3 + 10)
            && !*(_DWORD *)(v9 + 24))
          {
            v10 = *v8;
            if (v10 <= 2)
              *(_DWORD *)(v9 + 24) = dword_1A007C244[v10];
          }
          v9 += 32;
        }
        while (v9 != v6);
        v3 += 3;
      }
      while (v3 != v4);
    }
  }
  v11 = *(_QWORD *)(result[4] + 24);
  if (v11)
  {
    v12 = result[2];
    v13 = *(_BYTE *)result[1];
    return (_QWORD *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v11 + 48))(v11, &v13, v12);
  }
  return result;
}

_QWORD *std::__compressed_pair_elem<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], a1);
    }
    else
    {
      a1[3] = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    a1[3] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v6 = (_BYTE *)a2[4];
  v5 = (_BYTE *)a2[5];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v8 = (char *)operator new(v7);
    a1[4] = v8;
    a1[5] = v8;
    a1[6] = &v8[8 * (v7 >> 3)];
    v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, v6, v9);
    a1[5] = &v8[v9];
  }
  v10 = a2[8];
  a1[7] = a2[7];
  a1[8] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a1[9] = a2[9];
  return a1;
}

void sub_19FC042A8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::MuninSceneLogic::cancelViewPreloads(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void **v22;
  uint64_t v23;
  gdc::LayerDataSource **v24;
  unsigned __int16 *v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  void *v29;
  unsigned __int8 v30[16];
  void *v31;
  void *v32;
  char v33;
  void *__p[2];
  void *v35[2];
  int v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41[32];
  unint64_t v42;
  unint64_t v43;
  char v44[96];
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned int v48;
  unsigned __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v35 = 0u;
  v36 = 1065353216;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = a1 + 51;
    do
    {
      md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v44, a1[21], *(_QWORD *)v4);
      if (v44[0])
      {
        v7 = *(_QWORD *)v4;
        v8 = *(unsigned __int8 *)(v4 + 8);
        v9 = *(unsigned __int8 *)(v4 + 9);
        v10 = *(unsigned __int8 *)(v4 + 10);
        v37 = v41;
        v38 = v41;
        v39 = v41;
        v40 = 32;
        v42 = 0;
        v43 = v49;
        v11 = ((unint64_t)v48 << 32) | (v8 << 16) | v9;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v41, (char *)&v43, v44);
        v43 = v7;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v38, (char *)&v43, v44);
        v43 = v11;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v38, (char *)&v43, v44);
        v43 = v10;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v38, (char *)&v43, v44);
        v12 = (unsigned __int8 *)v37;
        v13 = v38 - (_BYTE *)v37;
        if (v38 == v37)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          if (v13 <= 1)
            v13 = 1;
          do
          {
            v15 = *v12++;
            v14 ^= (v14 << 6) + (v14 >> 2) - 0x61C8864680B583EBLL + v15;
            --v13;
          }
          while (v13);
        }
        v42 = v14;
        gdc::LayerDataRequestKey::LayerDataRequestKey(v30, 0, 0x24u, (uint64_t)&v37, 2147483646);
        if (v37 != v39)
          free(v37);
        std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey>((uint64_t)__p, v30, (uint64_t)v30);
        if (v33)
          v33 = 0;
        if (v31 != v32)
          free(v31);
      }
      std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(v6, *(_QWORD *)v4);
      v16 = a1[60];
      v17 = a1[61];
      if (v16 != v17)
      {
        v18 = *(_QWORD *)v4;
        do
        {
          if (*(_QWORD *)v16 == v18
            && *(unsigned __int8 *)(v16 + 8) == *(unsigned __int8 *)(v4 + 8)
            && *(unsigned __int8 *)(v16 + 9) == *(unsigned __int8 *)(v4 + 9)
            && *(unsigned __int8 *)(v16 + 10) == *(unsigned __int8 *)(v4 + 10)
            && !*(_DWORD *)(v16 + 24))
          {
            *(_DWORD *)(v16 + 24) = 2;
          }
          v16 += 32;
        }
        while (v16 != v17);
      }
      if (v44[0])
      {
        v19 = v45;
        v20 = v46;
        if (v45 != v46)
        {
          do
          {
            v21 = (void *)v19[31];
            if (v21 != (void *)v19[33])
              free(v21);
            v19 += 36;
          }
          while (v19 != v20);
          v19 = v45;
        }
        if (v19 != v47)
          free(v19);
      }
      v4 += 16;
    }
    while (v4 != a3);
    v22 = (void **)v35[0];
    if (v35[0])
    {
      v23 = *(_QWORD *)(a1[18] + 24);
      do
      {
        v24 = *(gdc::LayerDataSource ***)(v23 + 8);
        v25 = *(unsigned __int16 **)(v23 + 16);
        if (v24 != (gdc::LayerDataSource **)v25)
        {
          while (*((unsigned __int16 *)v22 + 12) != *(unsigned __int16 *)v24)
          {
            v24 += 3;
            if (v24 == (gdc::LayerDataSource **)v25)
              goto LABEL_37;
          }
        }
        if (v24 != (gdc::LayerDataSource **)v25)
          gdc::LayerDataSource::cancelLayerDataRequest(v24[1], (const gdc::LayerDataRequestKey *)(v22 + 2));
LABEL_37:
        v22 = (void **)*v22;
      }
      while (v22);
      v26 = v35[0];
      if (v35[0])
      {
        do
        {
          if (v26[112])
            v26[112] = 0;
          v28 = *(_BYTE **)v26;
          v29 = (void *)*((_QWORD *)v26 + 4);
          if (v29 != *((void **)v26 + 6))
            free(v29);
          operator delete(v26);
          v26 = v28;
        }
        while (v28);
      }
    }
    v27 = __p[0];
    __p[0] = 0;
    if (v27)
      operator delete(v27);
  }
}

void sub_19FC04684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a11 != a13)
    free(a11);
  geo::optional<md::mun::CollectionPoint>::~optional((uint64_t)&a39);
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void md::MuninSceneLogic::cancelAllViewPreloads(md::MuninSceneLogic *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned __int8 *k;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t m;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  char v34;
  int v35;
  uint64_t v36;
  void *__p;
  void *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unint64_t v42;

  if (*((_QWORD *)this + 54))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 53);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *((_QWORD *)this + 53) = 0;
    v4 = *((_QWORD *)this + 52);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*((_QWORD *)this + 51) + 8 * i) = 0;
    }
    *((_QWORD *)this + 54) = 0;
  }
  v6 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 18) + 24) + 64);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<gdc::LayerDataRequestKey>::reserve((uint64_t)&v40, v6[6]);
  v7 = (uint64_t *)v6[5];
  if (v7)
  {
    do
    {
      LOBYTE(v30) = *((_BYTE *)v7 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v31, (uint64_t)(v7 + 3));
      v34 = 0;
      if (*((_BYTE *)v7 + 112))
      {
        v35 = *((_DWORD *)v7 + 29);
        v34 = 1;
      }
      v36 = v7[15];
      v38 = 0;
      v39 = 0;
      __p = 0;
      v9 = (_BYTE *)v7[16];
      v8 = (_BYTE *)v7[17];
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          abort();
        __p = operator new(v8 - v9);
        v38 = __p;
        v11 = (char *)__p + 8 * (v10 >> 3);
        v39 = v11;
        memcpy(__p, v9, v10);
        v38 = v11;
      }
      v12 = v41;
      if ((unint64_t)v41 >= v42)
      {
        v13 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)&v40, (uint64_t)&v30);
      }
      else
      {
        *v41 = v30;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v12 + 8), (uint64_t)&v31);
        v12[96] = 0;
        if (v34)
        {
          *((_DWORD *)v12 + 25) = v35;
          v12[96] = 1;
        }
        *((_QWORD *)v12 + 13) = v36;
        v13 = v12 + 112;
      }
      v41 = v13;
      if (__p)
      {
        v38 = __p;
        operator delete(__p);
      }
      if (v34)
        v34 = 0;
      if (v32 != v33)
        free(v32);
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  else
  {
    v13 = v41;
  }
  v14 = v40;
  if (v40 != v13)
  {
    v15 = v40;
    do
    {
      v30 = 0;
      v31 = 0;
      gdc::LayerDataRequestTracker::_processKey(v6, v15, &v30, 1);
      v15 += 112;
    }
    while (v15 != v13);
  }
  if (v6[6])
  {
    v16 = (_QWORD *)v6[5];
    if (v16)
    {
      do
      {
        v25 = (_QWORD *)*v16;
        v26 = (void *)v16[16];
        if (v26)
        {
          v16[17] = v26;
          operator delete(v26);
        }
        if (*((_BYTE *)v16 + 112))
          *((_BYTE *)v16 + 112) = 0;
        v27 = (void *)v16[4];
        if (v27 != (void *)v16[6])
          free(v27);
        operator delete(v16);
        v16 = v25;
      }
      while (v25);
    }
    v6[5] = 0;
    v17 = v6[4];
    if (v17)
    {
      for (j = 0; j != v17; ++j)
        *(_QWORD *)(v6[3] + 8 * j) = 0;
    }
    v6[6] = 0;
  }
  if (v6[2])
  {
    v19 = *v6;
    v20 = (uint64_t *)v6[1];
    v21 = *v20;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(*v6 + 8);
    **(_QWORD **)(v19 + 8) = v21;
    v6[2] = 0;
    if (v20 != v6)
    {
      do
      {
        v22 = (uint64_t *)v20[1];
        gdc::LayerDataRequestTracker::RequestStatus::~RequestStatus((gdc::LayerDataRequestTracker::RequestStatus *)(v20 + 2));
        operator delete(v20);
        v20 = v22;
      }
      while (v22 != v6);
      v14 = v40;
    }
  }
  if (v14)
  {
    for (k = v41; k != v14; k -= 112)
    {
      if (*(k - 16))
        *(k - 16) = 0;
      v24 = (void *)*((_QWORD *)k - 12);
      if (v24 != *((void **)k - 10))
        free(v24);
    }
    operator delete(v14);
  }
  v28 = *((_QWORD *)this + 60);
  for (m = *((_QWORD *)this + 61); v28 != m; v28 += 32)
  {
    if (!*(_DWORD *)(v28 + 24))
      *(_DWORD *)(v28 + 24) = 2;
  }
}

void md::MuninSceneLogic::addSceneEvent(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  char *v64;
  std::__shared_weak_count *v65;
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  switch(*(_BYTE *)a2)
  {
    case 0:
      *(std::chrono::steady_clock::time_point *)(a1 + 512) = std::chrono::steady_clock::now();
      goto LABEL_18;
    case 1:
      if (*(_BYTE *)(a2 + 128))
        v4 = *(_BYTE *)(a2 + 160) == 0;
      else
        v4 = 1;
      if (v4)
        goto LABEL_18;
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8);
      v66[0] = &off_1E42CC5C0;
      v66[1] = a1;
      v67 = v66;
      geo::TaskQueue::barrierAsync(&v64, v5, v66);
      v6 = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = v67;
      if (v67 == v66)
      {
        v10 = 4;
        v9 = v66;
      }
      else
      {
        if (!v67)
          goto LABEL_18;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_18:
      v11 = *(_QWORD *)(a1 + 568);
      v12 = *(_QWORD *)(a1 + 576);
      if (v11 < v12)
      {
        *(_BYTE *)v11 = *(_BYTE *)a2;
        *(_BYTE *)(v11 + 8) = 0;
        if (*(_BYTE *)(a2 + 8))
        {
          *(_BYTE *)(v11 + 16) = *(_BYTE *)(a2 + 16);
          v13 = *(_OWORD *)(a2 + 24);
          *(_QWORD *)(v11 + 40) = *(_QWORD *)(a2 + 40);
          *(_OWORD *)(v11 + 24) = v13;
          v14 = *(_OWORD *)(a2 + 48);
          *(_QWORD *)(v11 + 64) = *(_QWORD *)(a2 + 64);
          *(_OWORD *)(v11 + 48) = v14;
          *(_QWORD *)(v11 + 72) = *(_QWORD *)(a2 + 72);
          v15 = *(_OWORD *)(a2 + 80);
          v16 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(v11 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(v11 + 112) = v16;
          *(_OWORD *)(v11 + 80) = v15;
          *(_BYTE *)(v11 + 8) = 1;
        }
        *(_BYTE *)(v11 + 128) = 0;
        if (*(_BYTE *)(a2 + 128))
        {
          *(_QWORD *)(v11 + 136) = 0;
          *(_QWORD *)(v11 + 144) = 0;
          *(_QWORD *)(v11 + 152) = 0;
          *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
          *(_QWORD *)(v11 + 152) = *(_QWORD *)(a2 + 152);
          *(_QWORD *)(a2 + 144) = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 136) = 0;
          *(_BYTE *)(v11 + 160) = *(_BYTE *)(a2 + 160);
          *(_BYTE *)(v11 + 128) = 1;
        }
        *(_BYTE *)(v11 + 168) = 0;
        if (*(_BYTE *)(a2 + 168))
        {
          *(_QWORD *)(v11 + 176) = 0;
          *(_QWORD *)(v11 + 184) = 0;
          *(_QWORD *)(v11 + 192) = 0;
          *(_OWORD *)(v11 + 176) = *(_OWORD *)(a2 + 176);
          *(_QWORD *)(v11 + 192) = *(_QWORD *)(a2 + 192);
          *(_QWORD *)(a2 + 176) = 0;
          *(_QWORD *)(a2 + 184) = 0;
          *(_QWORD *)(a2 + 192) = 0;
          v17 = *(_OWORD *)(a2 + 200);
          *(_QWORD *)(v11 + 216) = *(_QWORD *)(a2 + 216);
          *(_OWORD *)(v11 + 200) = v17;
          v18 = *(_OWORD *)(a2 + 224);
          *(_QWORD *)(v11 + 240) = *(_QWORD *)(a2 + 240);
          *(_OWORD *)(v11 + 224) = v18;
          *(_QWORD *)(v11 + 248) = *(_QWORD *)(a2 + 248);
          *(_OWORD *)(v11 + 256) = *(_OWORD *)(a2 + 256);
          *(_BYTE *)(v11 + 168) = 1;
        }
        v19 = (_BYTE *)(v11 + 272);
        goto LABEL_85;
      }
      v20 = *(_QWORD *)(a1 + 560);
      v21 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v11 - v20) >> 4);
      v22 = v21 + 1;
      if (v21 + 1 > 0xF0F0F0F0F0F0F0)
        abort();
      v23 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v12 - v20) >> 4);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x78787878787878)
        v24 = 0xF0F0F0F0F0F0F0;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 > 0xF0F0F0F0F0F0F0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = (char *)operator new(272 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[272 * v21];
      *v26 = *(_BYTE *)a2;
      v26[8] = 0;
      if (*(_BYTE *)(a2 + 8))
      {
        v27 = &v25[272 * v21];
        v27[16] = *(_BYTE *)(a2 + 16);
        *(_OWORD *)(v27 + 24) = *(_OWORD *)(a2 + 24);
        *((_QWORD *)v27 + 5) = *(_QWORD *)(a2 + 40);
        *((_OWORD *)v27 + 3) = *(_OWORD *)(a2 + 48);
        *((_QWORD *)v27 + 8) = *(_QWORD *)(a2 + 64);
        *((_QWORD *)v27 + 9) = *(_QWORD *)(a2 + 72);
        v28 = *(_OWORD *)(a2 + 96);
        *((_OWORD *)v27 + 5) = *(_OWORD *)(a2 + 80);
        *((_OWORD *)v27 + 6) = v28;
        *((_OWORD *)v27 + 7) = *(_OWORD *)(a2 + 112);
        v26[8] = 1;
      }
      v29 = &v25[272 * v21];
      v29[128] = 0;
      v30 = v29 + 128;
      if (*(_BYTE *)(a2 + 128))
      {
        v31 = &v25[272 * v21];
        *(_OWORD *)(v31 + 136) = *(_OWORD *)(a2 + 136);
        *((_QWORD *)v31 + 19) = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 144) = 0;
        *(_QWORD *)(a2 + 152) = 0;
        v31[160] = *(_BYTE *)(a2 + 160);
        *v30 = 1;
      }
      v32 = &v25[272 * v21];
      v32[168] = 0;
      v33 = v32 + 168;
      if (*(_BYTE *)(a2 + 168))
      {
        v34 = &v25[272 * v21];
        *((_OWORD *)v34 + 11) = *(_OWORD *)(a2 + 176);
        *((_QWORD *)v34 + 24) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        *(_QWORD *)(a2 + 192) = 0;
        *(_OWORD *)(v34 + 200) = *(_OWORD *)(a2 + 200);
        *((_QWORD *)v34 + 27) = *(_QWORD *)(a2 + 216);
        *((_OWORD *)v34 + 14) = *(_OWORD *)(a2 + 224);
        *((_QWORD *)v34 + 30) = *(_QWORD *)(a2 + 240);
        *((_QWORD *)v34 + 31) = *(_QWORD *)(a2 + 248);
        *((_OWORD *)v34 + 16) = *(_OWORD *)(a2 + 256);
        *v33 = 1;
      }
      v35 = &v25[272 * v24];
      v19 = v26 + 272;
      v36 = *(char **)(a1 + 568);
      v37 = *(char **)(a1 + 560);
      if (v36 == v37)
      {
        *(_QWORD *)(a1 + 560) = v26;
        *(_QWORD *)(a1 + 568) = v19;
        *(_QWORD *)(a1 + 576) = v35;
        if (!v36)
          goto LABEL_85;
        goto LABEL_84;
      }
      v38 = 0;
      do
      {
        v39 = &v26[v38];
        v40 = &v36[v38];
        v26[v38 - 272] = v36[v38 - 272];
        v41 = &v26[v38 - 264];
        *v41 = 0;
        if (v36[v38 - 264])
        {
          *(v39 - 256) = *(v40 - 256);
          v42 = *(_OWORD *)(v40 - 248);
          *((_QWORD *)v39 - 29) = *((_QWORD *)v40 - 29);
          *(_OWORD *)(v39 - 248) = v42;
          v43 = *((_OWORD *)v40 - 14);
          *((_QWORD *)v39 - 26) = *((_QWORD *)v40 - 26);
          *((_OWORD *)v39 - 14) = v43;
          *((_QWORD *)v39 - 25) = *((_QWORD *)v40 - 25);
          v44 = *((_OWORD *)v40 - 12);
          v45 = *((_OWORD *)v40 - 10);
          *((_OWORD *)v39 - 11) = *((_OWORD *)v40 - 11);
          *((_OWORD *)v39 - 10) = v45;
          *((_OWORD *)v39 - 12) = v44;
          *v41 = 1;
        }
        *(v39 - 144) = 0;
        if (*(v40 - 144))
        {
          v46 = &v26[v38];
          v47 = &v36[v38];
          *((_QWORD *)v46 - 17) = 0;
          *((_QWORD *)v46 - 16) = 0;
          *((_QWORD *)v46 - 15) = 0;
          *(_OWORD *)(v46 - 136) = *(_OWORD *)&v36[v38 - 136];
          *((_QWORD *)v46 - 15) = *(_QWORD *)&v36[v38 - 120];
          *((_QWORD *)v47 - 16) = 0;
          *((_QWORD *)v47 - 15) = 0;
          *((_QWORD *)v47 - 17) = 0;
          *(v46 - 112) = v36[v38 - 112];
          *(v39 - 144) = 1;
        }
        v48 = &v26[v38];
        v49 = &v36[v38];
        v26[v38 - 104] = 0;
        if (v36[v38 - 104])
        {
          *((_QWORD *)v48 - 12) = 0;
          *((_QWORD *)v48 - 11) = 0;
          *((_QWORD *)v48 - 10) = 0;
          *((_OWORD *)v48 - 6) = *((_OWORD *)v49 - 6);
          *((_QWORD *)v48 - 10) = *((_QWORD *)v49 - 10);
          *((_QWORD *)v49 - 12) = 0;
          *((_QWORD *)v49 - 11) = 0;
          *((_QWORD *)v49 - 10) = 0;
          v50 = *(_OWORD *)(v49 - 72);
          *((_QWORD *)v48 - 7) = *((_QWORD *)v49 - 7);
          *(_OWORD *)(v48 - 72) = v50;
          v51 = *((_OWORD *)v49 - 3);
          *((_QWORD *)v48 - 4) = *((_QWORD *)v49 - 4);
          *((_OWORD *)v48 - 3) = v51;
          *((_QWORD *)v48 - 3) = *((_QWORD *)v49 - 3);
          *((_OWORD *)v48 - 1) = *((_OWORD *)v49 - 1);
          *(v48 - 104) = 1;
        }
        v38 -= 272;
      }
      while (&v36[v38] != v37);
      v52 = *(char **)(a1 + 560);
      v36 = *(char **)(a1 + 568);
      *(_QWORD *)(a1 + 560) = &v26[v38];
      *(_QWORD *)(a1 + 568) = v19;
      *(_QWORD *)(a1 + 576) = v35;
      if (v36 != v52)
      {
        do
        {
          if (*(v36 - 104))
          {
            v53 = (void *)*((_QWORD *)v36 - 12);
            if (v53)
            {
              *((_QWORD *)v36 - 11) = v53;
              operator delete(v53);
            }
            *(v36 - 104) = 0;
          }
          if (*(v36 - 144))
          {
            v54 = *((_QWORD *)v36 - 17);
            if (v54)
            {
              v55 = *((_QWORD *)v36 - 16);
              v56 = (void *)*((_QWORD *)v36 - 17);
              if (v55 != v54)
              {
                do
                {
                  v57 = *(void **)(v55 - 80);
                  if (v57 != *(void **)(v55 - 64))
                    free(v57);
                  v58 = *(void **)(v55 - 104);
                  if (v58)
                  {
                    *(_QWORD *)(v55 - 96) = v58;
                    operator delete(v58);
                  }
                  v59 = *(void **)(v55 - 128);
                  if (v59)
                  {
                    *(_QWORD *)(v55 - 120) = v59;
                    operator delete(v59);
                  }
                  v60 = v55 - 1992;
                  v61 = *(_QWORD **)(v55 - 1904);
                  v62 = *(_QWORD **)(v55 - 1896);
                  if (v61 != v62)
                  {
                    do
                    {
                      v63 = (void *)v61[31];
                      if (v63 != (void *)v61[33])
                        free(v63);
                      v61 += 36;
                    }
                    while (v61 != v62);
                    v61 = *(_QWORD **)(v55 - 1904);
                  }
                  if (v61 != *(_QWORD **)(v55 - 1888))
                    free(v61);
                  v55 -= 1992;
                }
                while (v60 != v54);
                v56 = (void *)*((_QWORD *)v36 - 17);
              }
              *((_QWORD *)v36 - 16) = v54;
              operator delete(v56);
            }
            *(v36 - 144) = 0;
          }
          if (*(v36 - 264))
            *(v36 - 264) = 0;
          v36 -= 272;
        }
        while (v36 != v52);
        v36 = v52;
      }
      if (v36)
LABEL_84:
        operator delete(v36);
LABEL_85:
      *(_QWORD *)(a1 + 568) = v19;
      return;
    case 4:
    case 6:
      *(_BYTE *)(a1 + 504) = 1;
      goto LABEL_18;
    default:
      goto LABEL_18;
  }
}

void sub_19FC050CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC5C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC5C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  gdc::LayerDataStore **v2;
  unsigned __int16 *i;
  double v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  id v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  v2 = *(gdc::LayerDataStore ***)(v1 + 80);
  for (i = *(unsigned __int16 **)(v1 + 88); v2 != (gdc::LayerDataStore **)i; v2 += 2)
  {
    v5 = *(unsigned __int16 *)v2 - 11;
    v6 = v5 > 0x3D;
    v7 = (1 << v5) & 0x3000000000000003;
    if (v6 || v7 == 0)
      v4 = 31457280.0;
    else
      v4 = 41943040.0;
    gdc::LayerDataStore::purge(v2[1], 0, (unint64_t)(v4 * *(double *)(v1 + 384)));
  }
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*(_QWORD *)(v1 + 24) + 56));
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "prune:", 1);

}

void sub_19FC05248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC05D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ggl::BufferMemory *a10, ggl::BufferMemory *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;

  md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::~MeshSet((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_19FC061B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC061C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FC063C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC063CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FC065CC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC065D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FC067D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC067E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FC069E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC069F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19FC07794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  md::PolygonSection::~PolygonSection((md::PolygonSection *)&a46);
  std::list<gm::Range<double>>::~list((uint64_t *)(v46 - 224));
  std::list<gm::Range<double>>::~list((uint64_t *)(v46 - 200));
  _Unwind_Resume(a1);
}

void sub_19FC082A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (a23)
  {
    v29 = (unint64_t *)&a23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19FC08EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a10);
  v12 = *(_QWORD **)(v10 - 160);
  if (v12 == (_QWORD *)(v10 - 184))
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 184);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  md::PolygonSection::~PolygonSection((md::PolygonSection *)va);
  _Unwind_Resume(a1);
}

void sub_19FC08F04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 128);
  if (v3 == (_QWORD *)(v1 - 152))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 152);
  }
  else
  {
    if (!v3)
      _Unwind_Resume(exception_object);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  _Unwind_Resume(exception_object);
}

void sub_19FC0A30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a41);
  if (a49)
  {
    v52 = a47;
    v51 = a48;
    v53 = *a48;
    *(_QWORD *)(v53 + 8) = *(_QWORD *)(a47 + 8);
    **(_QWORD **)(v52 + 8) = v53;
    a49 = 0;
    if (v51 != &a47)
    {
      do
      {
        v54 = (uint64_t *)v51[1];
        operator delete(v51);
        v51 = v54;
      }
      while (v54 != &a47);
    }
  }
  if (*(_QWORD *)(v49 - 232))
  {
    v56 = *(_QWORD *)(v49 - 248);
    v55 = *(uint64_t **)(v49 - 240);
    v57 = *v55;
    *(_QWORD *)(v57 + 8) = *(_QWORD *)(v56 + 8);
    **(_QWORD **)(v56 + 8) = v57;
    *(_QWORD *)(v49 - 232) = 0;
    if (v55 != (uint64_t *)(v49 - 248))
    {
      do
      {
        v58 = (uint64_t *)v55[1];
        operator delete(v55);
        v55 = v58;
      }
      while (v58 != (uint64_t *)(v49 - 248));
    }
  }
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19FC0AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v39 - 240));
  _Unwind_Resume(a1);
}

void sub_19FC0AE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC0B450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a15)
  {
    a16 = a15;
    (*(void (**)(void))(*(_QWORD *)a18 + 40))();
  }
  if (a19)
  {
    a20 = a19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a22 + 40))(a22, a19, a21 - a19);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v22 - 96));
  _Unwind_Resume(a1);
}

void _computeScaleRotationTranslation(uint64_t a1, unint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v7;
  float32x2_t *v8;
  uint64_t v9;
  float32x2_t v10;
  uint64_t v11;
  float32x2_t v12;
  float v13;
  unint64_t v14;
  _BYTE *v15;
  float32x2_t *v16;
  unint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float32x2_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  float32x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  float32x2_t *v30;
  uint64_t v31;
  __int128 v32;
  float32x2_t v33;
  unint64_t v34;
  uint64_t i;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  const float *v42;
  float32x4_t v43;
  unint64_t v44;
  float32x4_t v45;
  const float *v46;
  unint64_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  const float *v57;
  float32x4_t v58;
  unint64_t v59;
  float32x4_t v60;
  const float *v61;
  unint64_t v62;
  float32x2_t *v63;
  float32x2_t v64;
  unint64_t v65;
  float v66;
  float v67;
  float *v68;
  const float *v69;
  float32x4_t v70;
  unint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  const float *v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  float *v79;
  float v80;
  uint64_t v81;
  void *v82;
  uint64_t v86;
  unint64_t v87;
  float32x2_t v88;
  _QWORD v89[192];
  _BYTE v90[64];
  uint64_t v91;
  float32x4x2_t v92;
  float32x4x2_t v93;
  float32x4x2_t v94;
  float32x4x2_t v95;
  float32x4x2_t v96;
  float32x4x2_t v97;

  v91 = *MEMORY[0x1E0C80C00];
  bzero(v90, 0x40uLL);
  bzero(v89, 0x600uLL);
  if (a2)
  {
    v7 = 0;
    v86 = a1;
    v87 = a2;
    do
    {
      v9 = v7++;
      v10 = *(float32x2_t *)(a1 + 8 * v9);
      if (v7 == a2)
        v11 = 0;
      else
        v11 = v9 + 1;
      v12 = vsub_f32(*(float32x2_t *)(a1 + 8 * v11), v10);
      if (v12.f32[1] >= 0.0)
      {
        if (v12.f32[1] == 0.0)
          v12.i32[0] = fabsf(v12.f32[0]);
      }
      else
      {
        v12 = vneg_f32(v12);
      }
      v88 = v12;
      v13 = atan2f(v12.f32[1], v12.f32[0]);
      if (v13 < 0.0 || v13 >= 3.14159265)
        NSLog((NSString *)CFSTR("problem computing angle histogram for building roof, quitting"));
      v14 = (unint64_t)(float)(v13 * 10.186);
      ++v90[v14];
      v15 = &v89[3 * v14];
      v16 = (float32x2_t *)*((_QWORD *)v15 + 1);
      v17 = *((_QWORD *)v15 + 2);
      if ((unint64_t)v16 < v17)
      {
        *v16 = v88;
        v8 = v16 + 1;
      }
      else
      {
        v18 = *(float32x2_t **)v15;
        v19 = (uint64_t)v16 - *(_QWORD *)v15;
        v20 = v19 >> 3;
        v21 = (v19 >> 3) + 1;
        v22 = v88;
        if (v21 >> 61)
          abort();
        v23 = v17 - (_QWORD)v18;
        if (v23 >> 2 > v21)
          v21 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v21;
        if (v24)
        {
          if (v24 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = operator new(8 * v24);
          v22 = v88;
        }
        else
        {
          v25 = 0;
        }
        v26 = (float32x2_t *)&v25[8 * v20];
        *v26 = v22;
        v8 = v26 + 1;
        if (v16 == v18)
        {
          v18 = v16;
        }
        else
        {
          v27 = (char *)&v16[-1] - (char *)v18;
          if (v27 < 0x58)
            goto LABEL_81;
          if ((unint64_t)((char *)v16 - &v25[v19]) < 0x20)
            goto LABEL_81;
          v28 = (v27 >> 3) + 1;
          v29 = &v25[8 * v20 - 16];
          v30 = v16 - 2;
          v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v32 = *(_OWORD *)v30->f32;
            *(v29 - 1) = *(_OWORD *)v30[-2].f32;
            *v29 = v32;
            v29 -= 2;
            v30 -= 4;
            v31 -= 4;
          }
          while (v31);
          v26 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
          v16 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
          if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_81:
            do
            {
              v33 = v16[-1];
              --v16;
              v26[-1] = v33;
              --v26;
            }
            while (v16 != v18);
            v18 = *(float32x2_t **)v15;
          }
        }
        *(_QWORD *)v15 = v26;
        *((_QWORD *)v15 + 2) = &v25[8 * v24];
        if (v18)
          operator delete(v18);
        a1 = v86;
        a2 = v87;
      }
      *((_QWORD *)v15 + 1) = v8;
    }
    while (v7 != a2);
  }
  v34 = 0;
  for (i = 1; i != 64; ++i)
  {
    if (v90[i] > v90[v34])
      v34 = i;
  }
  v36 = v89[3 * v34];
  v37 = 0.0;
  v38 = 0.0;
  v39 = v89[3 * v34 + 1] - v36;
  if (v39)
  {
    v40 = v39 >> 3;
    if (v40 <= 1)
      v40 = 1;
    if (v40 <= 7)
    {
      v41 = 0;
LABEL_51:
      v47 = v40 - v41;
      v48 = (float32x2_t *)(v36 + 8 * v41);
      do
      {
        v49 = *v48++;
        v38 = fmaxf(v38, sqrtf(vaddv_f32(vmul_f32(v49, v49))));
        --v47;
      }
      while (v47);
      goto LABEL_53;
    }
    v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    v42 = (const float *)(v36 + 32);
    v43 = 0uLL;
    v44 = v40 & 0xFFFFFFFFFFFFFFF8;
    v45 = 0uLL;
    do
    {
      v46 = v42 - 8;
      v93 = vld2q_f32(v46);
      v96 = vld2q_f32(v42);
      v43 = vmaxnmq_f32(v43, vsqrtq_f32(vmlaq_f32(vmulq_f32(v93.val[0], v93.val[0]), v93.val[1], v93.val[1])));
      v45 = vmaxnmq_f32(v45, vsqrtq_f32(vmlaq_f32(vmulq_f32(v96.val[0], v96.val[0]), v96.val[1], v96.val[1])));
      v42 += 16;
      v44 -= 8;
    }
    while (v44);
    v38 = vmaxnmvq_f32(vmaxnmq_f32(v43, v45));
    if (v40 != v41)
      goto LABEL_51;
  }
LABEL_53:
  *a3 = v38;
  v50 = (float)v34 * 0.098175;
  v51 = dbl_19FFB5B30[v50 < 1.57079633] + v50;
  v52 = v51 * 10.186;
  *a4 = v50;
  v53 = v89[3 * (unint64_t)v52];
  v54 = v89[3 * (unint64_t)v52 + 1] - v53;
  if (!v54)
    goto LABEL_63;
  v55 = v54 >> 3;
  if (v55 <= 1)
    v55 = 1;
  if (v55 <= 7)
  {
    v56 = 0;
    v37 = 0.0;
LABEL_61:
    v62 = v55 - v56;
    v63 = (float32x2_t *)(v53 + 8 * v56);
    do
    {
      v64 = *v63++;
      v37 = fmaxf(v37, sqrtf(vaddv_f32(vmul_f32(v64, v64))));
      --v62;
    }
    while (v62);
    goto LABEL_63;
  }
  v56 = v55 & 0xFFFFFFFFFFFFFFF8;
  v57 = (const float *)(v53 + 32);
  v58 = 0uLL;
  v59 = v55 & 0xFFFFFFFFFFFFFFF8;
  v60 = 0uLL;
  do
  {
    v61 = v57 - 8;
    v92 = vld2q_f32(v61);
    v94 = vld2q_f32(v57);
    v58 = vmaxnmq_f32(v58, vsqrtq_f32(vmlaq_f32(vmulq_f32(v92.val[0], v92.val[0]), v92.val[1], v92.val[1])));
    v60 = vmaxnmq_f32(v60, vsqrtq_f32(vmlaq_f32(vmulq_f32(v94.val[0], v94.val[0]), v94.val[1], v94.val[1])));
    v57 += 16;
    v59 -= 8;
  }
  while (v59);
  v37 = vmaxnmvq_f32(vmaxnmq_f32(v58, v60));
  if (v55 != v56)
    goto LABEL_61;
LABEL_63:
  a3[1] = v37;
  if (a2)
  {
    if (a2 > 7)
    {
      v65 = a2 & 0xFFFFFFFFFFFFFFF8;
      v69 = (const float *)(a1 + 32);
      v70 = 0uLL;
      v71 = a2 & 0xFFFFFFFFFFFFFFF8;
      v72 = 0uLL;
      v73 = 0uLL;
      v74 = 0uLL;
      do
      {
        v75 = v69 - 8;
        v95 = vld2q_f32(v75);
        v97 = vld2q_f32(v69);
        v73 = vaddq_f32(v95.val[0], v73);
        v74 = vaddq_f32(v97.val[0], v74);
        v70 = vaddq_f32(v95.val[1], v70);
        v72 = vaddq_f32(v97.val[1], v72);
        v69 += 16;
        v71 -= 8;
      }
      while (v71);
      v76 = vaddq_f32(v74, v73);
      v67 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v76, v76));
      v77 = vaddq_f32(v72, v70);
      v66 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v77, v77));
      v68 = a5;
      if (v65 == a2)
        goto LABEL_72;
    }
    else
    {
      v65 = 0;
      v66 = 0.0;
      v67 = 0.0;
      v68 = a5;
    }
    v78 = a2 - v65;
    v79 = (float *)(a1 + 8 * v65 + 4);
    do
    {
      v67 = *(v79 - 1) + v67;
      v80 = *v79;
      v79 += 2;
      v66 = v80 + v66;
      --v78;
    }
    while (v78);
  }
  else
  {
    v67 = 0.0;
    v66 = 0.0;
    v68 = a5;
  }
LABEL_72:
  *v68 = v67 / (float)a2;
  v68[1] = v66 / (float)a2;
  v81 = 192;
  do
  {
    v82 = (void *)v89[v81 - 3];
    if (v82)
    {
      v89[v81 - 2] = v82;
      operator delete(v82);
    }
    v81 -= 3;
  }
  while (v81 * 8);
}

void sub_19FC0C47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18;
  void *v19;

  v18 = 1536;
  while (1)
  {
    v19 = *(void **)(&a17 + v18 - 24);
    if (v19)
    {
      *(_QWORD *)(&a17 + v18 - 16) = v19;
      operator delete(v19);
    }
    v18 -= 24;
    if (!v18)
      _Unwind_Resume(exception_object);
  }
}

void _transformAndAddMesh(uint64_t a1, uint64_t a2, int16x8_t *a3, unint64_t a4, float *a5, uint64_t a6, uint64_t a7, __int16 a8, float a9, uint64_t a10, float *a11, float *a12, float *a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  __int128 v52;
  int16x8_t *v53;
  int16x8_t *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  char v66;
  __float2 v67;
  uint64_t v68;
  float32x2_t *v69;
  float32x2_t v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float v75;
  float32x2_t v76;
  float v77;
  float v78;
  int v79;
  int32x2_t v80;
  int v81;
  float v82;
  float v83;
  int32x4_t v84;
  float32x4_t v85;
  int16x8_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  int16x8_t v89;
  int16x8_t *v90;
  int16x8_t *v91;
  unint64_t v92;
  int16x8_t v93;
  unint64_t v94;
  uint64_t v95;
  __int16 *v96;
  __int16 *v97;
  __int16 v98;
  float v99;
  float v100;
  float v101;
  float v102;
  __float2 v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  __int16 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v126;
  unint64_t v130;
  unint64_t v132;
  _QWORD v133[3];
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  __int16 v137;
  int16x8_t *v138;
  __int128 v139;
  unint64_t v140;
  unint64_t v141;
  __int16 v142;
  uint64_t v143;
  float v144[8];
  uint64_t v145;

  v15 = a2;
  v145 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a6 + 8);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = **(_QWORD **)(v17 + 64);
  v19 = *(_QWORD *)(v18 + 8);
  v20 = (*(_QWORD *)(v18 + 48) - *(_QWORD *)(v18 + 40)) / v19;
  v21 = v20 + a2;
  v132 = a4;
  if (v20 + a2 >= 0x10000)
  {
    ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>::_allocateNewMesh(a6);
    a4 = v132;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = **(_QWORD **)(v17 + 64);
    v19 = *(_QWORD *)(v18 + 8);
    v20 = (*(_QWORD *)(v18 + 48) - *(_QWORD *)(v18 + 40)) / v19;
    v21 = v20 + v15;
  }
  v22 = *(_DWORD *)a6;
  v23 = v19 * v21;
  v24 = *(_QWORD *)(v18 + 72);
  v25 = *(_QWORD *)(v18 + 80) - v24;
  if (v23 != v25)
  {
    if (v23 <= v25)
    {
      if (v23 < v25)
        *(_QWORD *)(v18 + 80) = v24 + v23;
    }
    else
    {
      v26 = *(_DWORD *)a6;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v18 + 72, v23 - v25);
      v22 = v26;
      a4 = v132;
    }
    v27 = *(std::__shared_weak_count **)(v18 + 32);
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        v30 = v22;
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        v22 = v30;
        a4 = v132;
      }
    }
    *(_QWORD *)(v18 + 120) = 0;
    *(_DWORD *)(v18 + 112) = 0;
    v31 = *(_QWORD *)(v18 + 80) - *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 48) = v31;
    *(_QWORD *)(v18 + 56) = 0;
    *(_QWORD *)(v18 + 64) = v31;
    v18 = **(_QWORD **)(v17 + 64);
  }
  v32 = 0;
  v139 = 0uLL;
  v33 = *(_QWORD *)(v18 + 8);
  v34 = v33 * v20;
  v35 = v33 * v21;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v18;
  if (v35 != v34)
    v32 = *(_QWORD *)(v18 + 72) + v34;
  v37 = v16 - v22;
  v139 = v36;
  v140 = v34;
  v141 = v35;
  v143 = v32;
  v142 = 1;
  v38 = *(_QWORD *)(v17 + 96);
  v39 = *(_QWORD *)(v38 + 8);
  v40 = (*(_QWORD *)(v38 + 48) - *(_QWORD *)(v38 + 40)) / v39;
  v130 = v40 + a4;
  v41 = v39 * (v40 + a4);
  v42 = *(_QWORD *)(v38 + 72);
  v43 = *(_QWORD *)(v38 + 80) - v42;
  if (v41 != v43)
  {
    if (v41 <= v43)
    {
      if (v41 < v43)
        *(_QWORD *)(v38 + 80) = v42 + v41;
    }
    else
    {
      v44 = (*(_QWORD *)(v38 + 48) - *(_QWORD *)(v38 + 40)) / v39;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v38 + 72, v41 - v43);
      v40 = v44;
      a4 = v132;
    }
    v45 = *(std::__shared_weak_count **)(v38 + 32);
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        v48 = v40;
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        v40 = v48;
        a4 = v132;
      }
    }
    *(_QWORD *)(v38 + 120) = 0;
    *(_DWORD *)(v38 + 112) = 0;
    v42 = *(_QWORD *)(v38 + 72);
    v49 = *(_QWORD *)(v38 + 80) - v42;
    *(_QWORD *)(v38 + 40) = 0;
    *(_QWORD *)(v38 + 48) = v49;
    *(_QWORD *)(v38 + 56) = 0;
    *(_QWORD *)(v38 + 64) = v49;
    v39 = *(_QWORD *)(v38 + 8);
    v41 = v39 * v130;
  }
  v50 = v37 >> 3;
  v134 = 0uLL;
  v126 = v40;
  v51 = v39 * v40;
  *(_QWORD *)&v52 = 0;
  *((_QWORD *)&v52 + 1) = v38;
  v53 = (int16x8_t *)(v42 + v39 * v40);
  if (v41 == v39 * v40)
    v54 = 0;
  else
    v54 = v53;
  v134 = v52;
  v135 = v39 * v40;
  v136 = v41;
  v138 = v54;
  v137 = 1;
  v56 = *a12;
  v55 = a12[1];
  v57 = a13[2];
  v59 = *a13;
  v58 = a13[1];
  v60 = a13[3] - *a13;
  v61 = a13[4] - v58;
  v62 = a13[5] - v57;
  if (v60 >= 0.0)
    v63 = 65535.0 / v60;
  else
    v63 = INFINITY;
  if (v61 >= 0.0)
    v64 = 65535.0 / v61;
  else
    v64 = INFINITY;
  if (v62 >= 0.0)
    v65 = 65535.0 / v62;
  else
    v65 = INFINITY;
  if (v15)
  {
    v66 = v50;
    v67 = __sincosf_stret(a9);
    LOBYTE(v50) = v66;
    a4 = v132;
    v68 = v143 + 4;
    v69 = (float32x2_t *)(a1 + 12);
    do
    {
      v70 = v69[1];
      v71 = *a11 * v69[-2].f32[1];
      v72 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*v69, v67.__sinval));
      v73 = vmul_n_f32(*v69, v67.__cosval);
      v74.i32[0] = vsub_f32(v73, v72).u32[0];
      v75 = a11[1] * v69[-1].f32[0];
      v74.i32[1] = vadd_f32(v73, v72).i32[1];
      v76 = vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
      v77 = (float)(v56 + (float)(v71 * v67.__cosval)) - (float)(v59 + (float)(v75 * v67.__sinval));
      v78 = (float)((float)(v55 - v58) + (float)(v71 * v67.__sinval)) + (float)(v75 * v67.__cosval);
      v79 = (int)fminf(fmaxf((float)-(float)(v57 - (float)(a11[2] * v69[-1].f32[1])) * v65, 0.0), 65535.0);
      v80 = (int32x2_t)vadd_f32(vmla_f32(v76, v70, v70), (float32x2_t)vdup_lane_s32((int32x2_t)v76, 1));
      v81 = (int)fminf(fmaxf(v78 * v64, 0.0), 65535.0);
      v82 = sqrtf(*(float *)v80.i32);
      v80.i32[0] = 1123942400;
      v83 = 127.0 / v82;
      v84 = vdupq_lane_s32(v80, 0);
      *(_WORD *)(v68 - 4) = (int)fminf(fmaxf(v77 * v63, 0.0), 65535.0);
      *(_WORD *)v68 = v79;
      *(float *)v84.i32 = v83;
      v85 = (float32x4_t)vzip1q_s32(v84, v84);
      v85.f32[2] = v83;
      *(_WORD *)(v68 + 2) = a8;
      *(float32x2_t *)&v74.u32[2] = v70;
      v86 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v85, v74));
      *(_WORD *)(v68 - 2) = v81;
      *(int16x4_t *)v86.i8 = vmovn_s32((int32x4_t)v86);
      *(_DWORD *)(v68 + 4) = vmovn_s16(v86).u32[0];
      v68 += 16;
      v69 = (float32x2_t *)((char *)v69 + 28);
      --v15;
    }
    while (v15);
  }
  v87 = v50 - 1;
  if (a4)
  {
    v88 = 0;
    if (a4 < 0x10)
      goto LABEL_48;
    if ((unint64_t)((char *)v54 - (char *)a3) <= 0x1F)
      goto LABEL_48;
    v88 = a4 & 0xFFFFFFFFFFFFFFF0;
    v89 = vdupq_n_s16(v20);
    v90 = v54 + 1;
    v91 = a3 + 1;
    v92 = a4 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v93 = vaddq_s16(*v91, v89);
      v90[-1] = vaddq_s16(v91[-1], v89);
      *v90 = v93;
      v90 += 2;
      v91 += 2;
      v92 -= 16;
    }
    while (v92);
    if (v88 != a4)
    {
LABEL_48:
      v94 = a4 - v88;
      v95 = v88;
      v96 = &v54->i16[v88];
      v97 = &a3->i16[v95];
      do
      {
        v98 = *v97++;
        *v96++ = v98 + v20;
        --v94;
      }
      while (v94);
    }
  }
  v99 = *a5;
  v100 = a5[1];
  v101 = a5[3];
  v102 = a5[4];
  v103 = __sincosf_stret(a9);
  v104 = a11[1];
  v105 = *a11 * v99;
  v106 = (float)(v104 * v100) * v103.__cosval;
  v107 = v56 + (float)(v105 * v103.__cosval);
  v108 = v107 - (float)(v103.__sinval * (float)(v104 * v100));
  v109 = v55 + (float)(v105 * v103.__sinval);
  v110 = *a11 * v101;
  v111 = v56 + (float)(v110 * v103.__cosval);
  v112 = v111 - (float)(v103.__sinval * (float)(v104 * v100));
  v113 = v55 + (float)(v110 * v103.__sinval);
  v114 = v104 * v102;
  v144[0] = v108;
  v144[1] = v109 + v106;
  v144[2] = v112;
  v144[3] = v113 + v106;
  v144[4] = v111 - (float)(v103.__sinval * v114);
  v144[5] = v113 + (float)(v114 * v103.__cosval);
  v144[6] = v107 - (float)(v103.__sinval * v114);
  v144[7] = v109 + (float)(v114 * v103.__cosval);
  v115 = ggl::CullingGrid::intersectedCellsForRibbon(4uLL, v144, 1);
  v133[0] = v126;
  v133[1] = v130;
  v133[2] = a10;
  _addRangeToList(a7, v115, v87, v133);
  if (v54 && v41 != v51)
  {
    v117 = *(_QWORD *)(v38 + 56);
    v116 = *(_QWORD *)(v38 + 64);
    if (v116 == v117)
      v117 = *(_QWORD *)(v38 + 80) - *(_QWORD *)(v38 + 72);
    if (v51 < v117)
      v117 = v51;
    if (v116 <= v41)
      v116 = v41;
    if (v116 == v117)
      v116 = v117 + *(_QWORD *)(v38 + 80) - *(_QWORD *)(v38 + 72);
    *(_QWORD *)(v38 + 56) = v117;
    *(_QWORD *)(v38 + 64) = v116;
  }
  if (v143)
  {
    v119 = v140;
    v118 = v141;
    if (v141 != v140)
    {
      v120 = (_QWORD *)*((_QWORD *)&v139 + 1);
      v121 = v142;
      v122 = HIBYTE(v142);
      if ((_QWORD)v139 && *(_BYTE *)(*((_QWORD *)&v139 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v139 + 64))();
      if (v121 && !v122)
      {
        v124 = v120[7];
        v123 = v120[8];
        if (v123 == v124)
          v124 = v120[10] - v120[9];
        if (v119 < v124)
          v124 = v119;
        if (v123 <= v118)
          v123 = v118;
        if (v123 == v124)
          v123 = v124 + v120[10] - v120[9];
        v120[7] = v124;
        v120[8] = v123;
      }
    }
  }
}

void sub_19FC0CB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a27);
  _Unwind_Resume(a1);
}

void ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>::_allocateNewMesh(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_count v57;
  unsigned __int8 v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  geo::read_write_lock *v66;
  const char *v67;
  malloc_zone_t *zone;
  uint64_t v69;
  geo::read_write_lock *v70;
  const char *v71;
  malloc_zone_t *v72;
  uint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  malloc_zone_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  geo::read_write_lock *v80;
  const char *v81;
  malloc_zone_t *v82;
  int v83;
  uint64_t v84;
  geo::read_write_lock *v85;
  const char *v86;
  malloc_zone_t *v87;
  uint64_t v88;
  uint64_t v89;

  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v64 & 1) == 0
    {
      ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PrefilteredLine::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43C40 = 1;
  }
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E42BBC08;
  *(_QWORD *)(v2 + 8) = "VendedMesh";
  *(_QWORD *)(v2 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 56) = &ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(v2 + 64) = 0;
  v4 = v2 + 64;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  {
    v65 = operator new();
    *(_QWORD *)(v65 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v65 + 24) = "GeoGL";
    *(_OWORD *)(v65 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v65 = &off_1E42B5668;
    *(_QWORD *)(v65 + 8) = "GeoGL";
    *(_OWORD *)(v65 + 72) = 0u;
    *(_OWORD *)(v65 + 88) = 0u;
    *(_OWORD *)(v65 + 104) = 0u;
    *(_OWORD *)(v65 + 120) = 0u;
    *(_OWORD *)(v65 + 136) = 0u;
    *(_OWORD *)(v65 + 152) = 0u;
    *(_OWORD *)(v65 + 168) = 0u;
    *(_OWORD *)(v65 + 184) = 0u;
    *(_OWORD *)(v65 + 200) = 0u;
    *(_OWORD *)(v65 + 216) = 0u;
    *(_OWORD *)(v65 + 232) = 0u;
    *(_QWORD *)(v65 + 248) = 0;
    *(_OWORD *)(v65 + 56) = 0u;
    v66 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v65 + 56), 0);
    if ((_DWORD)v66)
      geo::read_write_lock::logFailure(v66, (uint64_t)"initialization", v67);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v65 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v65 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v65;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v6;
  {
    v69 = operator new();
    *(_QWORD *)(v69 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v69 + 24) = "GeoGL";
    *(_OWORD *)(v69 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v69 = &off_1E42B5668;
    *(_QWORD *)(v69 + 8) = "GeoGL";
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_OWORD *)(v69 + 104) = 0u;
    *(_OWORD *)(v69 + 120) = 0u;
    *(_OWORD *)(v69 + 136) = 0u;
    *(_OWORD *)(v69 + 152) = 0u;
    *(_OWORD *)(v69 + 168) = 0u;
    *(_OWORD *)(v69 + 184) = 0u;
    *(_OWORD *)(v69 + 200) = 0u;
    *(_OWORD *)(v69 + 216) = 0u;
    *(_OWORD *)(v69 + 232) = 0u;
    *(_QWORD *)(v69 + 248) = 0;
    *(_OWORD *)(v69 + 56) = 0u;
    v70 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v69 + 56), 0);
    if ((_DWORD)v70)
      geo::read_write_lock::logFailure(v70, (uint64_t)"initialization", v71);
    v72 = malloc_create_zone(0, 0);
    *(_QWORD *)(v69 + 48) = v72;
    malloc_set_zone_name(v72, "GeoGL");
    *(_QWORD *)(v69 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v69;
  }
  *(_QWORD *)(v2 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = v2 + 120;
  *(_QWORD *)v2 = &off_1E42BD8B8;
  *(_QWORD *)(v2 + 16) = &unk_1E42BD8D8;
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = (v9 - v7) >> 4;
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 < v10)
    {
      v12 = v7 + 16 * v8;
      while (v9 != v12)
      {
        v13 = *(std::__shared_weak_count **)(v9 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 16;
      }
      *(_QWORD *)(v2 + 72) = v12;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v2 + 64, v11);
  }
  *(_QWORD *)v2 = &off_1E42B72E8;
  *(_QWORD *)(v2 + 16) = &unk_1E42B7308;
  {
    v73 = operator new();
    *(_QWORD *)(v73 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v73 + 24) = "GeoGL";
    *(_OWORD *)(v73 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v73 = &off_1E42B5668;
    *(_QWORD *)(v73 + 8) = "GeoGL";
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 88) = 0u;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *(_OWORD *)(v73 + 184) = 0u;
    *(_OWORD *)(v73 + 200) = 0u;
    *(_OWORD *)(v73 + 216) = 0u;
    *(_OWORD *)(v73 + 232) = 0u;
    *(_QWORD *)(v73 + 248) = 0;
    *(_OWORD *)(v73 + 56) = 0u;
    v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v73 + 56), 0);
    if ((_DWORD)v74)
      geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
    v76 = malloc_create_zone(0, 0);
    *(_QWORD *)(v73 + 48) = v76;
    malloc_set_zone_name(v76, "GeoGL");
    *(_QWORD *)(v73 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v73;
  }
  v17 = ggl::Allocator::instance(void)::alloc;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v18 = &off_1E42DFF78;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 32) = &off_1E42B5748;
  v19 = v18 + 32;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 40) = 16;
  *(_DWORD *)(v18 + 48) = 6;
  v20 = 0uLL;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_QWORD *)(v18 + 120) = 0;
  if ((v21 & 1) == 0)
  {
    v88 = v18 + 32;
    v89 = v18;
    v20 = 0uLL;
    v78 = v77;
    v19 = v88;
    v18 = v89;
    if (v78)
    {
      v79 = operator new();
      *(_QWORD *)(v79 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v79 + 24) = "GeoGL";
      *(_OWORD *)(v79 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v79 = &off_1E42B5668;
      *(_QWORD *)(v79 + 8) = "GeoGL";
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *(_OWORD *)(v79 + 168) = 0u;
      *(_OWORD *)(v79 + 184) = 0u;
      *(_OWORD *)(v79 + 200) = 0u;
      *(_OWORD *)(v79 + 216) = 0u;
      *(_OWORD *)(v79 + 232) = 0u;
      *(_QWORD *)(v79 + 248) = 0;
      *(_OWORD *)(v79 + 56) = 0u;
      v80 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v79 + 56), 0);
      if ((_DWORD)v80)
        geo::read_write_lock::logFailure(v80, (uint64_t)"initialization", v81);
      v82 = malloc_create_zone(0, 0);
      *(_QWORD *)(v79 + 48) = v82;
      malloc_set_zone_name(v82, "GeoGL");
      *(_QWORD *)(v79 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v79;
      v19 = v88;
      v18 = v89;
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v18 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v18 + 136) = 0;
  *(_OWORD *)(v18 + 200) = v20;
  *(_OWORD *)(v18 + 184) = v20;
  *(_OWORD *)(v18 + 168) = v20;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = -1;
  *(_OWORD *)(v18 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 240) = "VendedMesh";
  *(_QWORD *)(v18 + 248) = &ggl::PrefilteredLine::defaultVboReflection;
  *(_QWORD *)(v18 + 32) = &off_1E42B7C20;
  *(_QWORD *)(v18 + 232) = &unk_1E42B7C40;
  v22 = *(uint64_t **)v4;
  v23 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v22 = v19;
  v22[1] = v18;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(uint64_t **)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v26 < v27)
  {
    if (v26)
      *v26 = v2;
    v28 = v26 + 1;
    goto LABEL_56;
  }
  v29 = ((uint64_t)v26 - *(_QWORD *)a1) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    abort();
  v31 = v27 - *(_QWORD *)a1;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  if (v30)
  {
    v32 = 8 * v30;
    v33 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v30, 8);
    v34 = (uint64_t *)(v33 + 8 * v29);
    v30 = v33 + v32;
    if (v33)
      *v34 = v2;
  }
  else
  {
    v34 = (uint64_t *)(8 * v29);
  }
  v28 = v34 + 1;
  v35 = *(char **)a1;
  v36 = *(char **)(a1 + 8);
  if (v36 == *(char **)a1)
  {
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v28;
    v51 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30;
    goto LABEL_54;
  }
  v37 = (unint64_t)&v36[-*(_QWORD *)a1 - 8];
  if (v37 <= 0x57
    || ((v38 = (v35 - v36 + 7) & 0xFFFFFFFFFFFFFFF8,
         v39 = (unint64_t)&v36[v38],
         v40 = (char *)v34 + v38,
         v39 < (unint64_t)v34)
      ? (v41 = v40 >= v36)
      : (v41 = 1),
        !v41))
  {
    v43 = *(char **)(a1 + 8);
    do
    {
LABEL_48:
      v49 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *(_QWORD *)v43 = 0;
      *--v34 = v49;
    }
    while (v43 != v35);
    goto LABEL_49;
  }
  v42 = (v37 >> 3) + 1;
  v43 = &v36[-8 * (v42 & 0x3FFFFFFFFFFFFFFCLL)];
  v44 = v34 - 2;
  v45 = v36 - 32;
  v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = *(_OWORD *)v45;
    v47 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v45 = 0uLL;
    *((_OWORD *)v45 + 1) = 0uLL;
    v45 -= 32;
    *((_OWORD *)v44 - 1) = v48;
    *(_OWORD *)v44 = v47;
    v44 -= 4;
    v46 -= 4;
  }
  while (v46);
  v34 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  v36 = *(char **)a1;
  v50 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v28;
  v51 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v30;
  while (v50 != v36)
  {
    v53 = *((_QWORD *)v50 - 1);
    v50 -= 8;
    v52 = v53;
    *(_QWORD *)v50 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
LABEL_54:
  if (v36)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v36, v51 - (_QWORD)v36);
LABEL_56:
  *(_QWORD *)(a1 + 8) = v28;
  v54 = *(v28 - 1);
  v55 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v55[1].__shared_owners_ = 2;
  LODWORD(v55[1].__shared_weak_owners_) = 262;
  v57 = (std::__shared_count)0;
  v55[2].std::__shared_count = 0u;
  *(_OWORD *)&v55[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[3].__shared_owners_ = 0u;
  v55[4].std::__shared_count = 0u;
  v55[4].__shared_weak_owners_ = 0;
  if ((v58 & 1) == 0)
  {
    v57 = (std::__shared_count)0;
    if (v83)
    {
      v84 = operator new();
      *(_QWORD *)(v84 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v84 + 24) = "GeoGL";
      *(_OWORD *)(v84 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v84 = &off_1E42B5668;
      *(_QWORD *)(v84 + 8) = "GeoGL";
      *(_OWORD *)(v84 + 72) = 0u;
      *(_OWORD *)(v84 + 88) = 0u;
      *(_OWORD *)(v84 + 104) = 0u;
      *(_OWORD *)(v84 + 120) = 0u;
      *(_OWORD *)(v84 + 136) = 0u;
      *(_OWORD *)(v84 + 152) = 0u;
      *(_OWORD *)(v84 + 168) = 0u;
      *(_OWORD *)(v84 + 184) = 0u;
      *(_OWORD *)(v84 + 200) = 0u;
      *(_OWORD *)(v84 + 216) = 0u;
      *(_OWORD *)(v84 + 232) = 0u;
      *(_QWORD *)(v84 + 248) = 0;
      *(_OWORD *)(v84 + 56) = 0u;
      v85 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v84 + 56), 0);
      if ((_DWORD)v85)
        geo::read_write_lock::logFailure(v85, (uint64_t)"initialization", v86);
      v87 = malloc_create_zone(0, 0);
      *(_QWORD *)(v84 + 48) = v87;
      malloc_set_zone_name(v87, "GeoGL");
      *(_QWORD *)(v84 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v84;
      v57 = (std::__shared_count)0;
    }
  }
  v55[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v55[5].__shared_owners_ = 0;
  *((std::__shared_count *)v55 + 11) = v57;
  v55[8].std::__shared_count = v57;
  v55[8].__shared_weak_owners_ = 0;
  v55[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v55 + 10) = v57;
  v55[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v55[5].__shared_weak_owners_) = 0;
  LODWORD(v55[10].__vftable) = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v55[1].__shared_owners_ = 2;
  v55[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v55[9].__shared_weak_owners_ = (uint64_t)"IndexData";
  do
    v59 = __ldxr(v56);
  while (__stxr(v59 + 1, v56));
  v60 = *(std::__shared_weak_count **)(v54 + 104);
  *(_QWORD *)(v54 + 96) = v55 + 1;
  *(_QWORD *)(v54 + 104) = v55;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  do
    v63 = __ldaxr(v56);
  while (__stlxr(v63 - 1, v56));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
}

void ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>::_allocateNewMesh(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_count v57;
  unsigned __int8 v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  geo::read_write_lock *v66;
  const char *v67;
  malloc_zone_t *zone;
  uint64_t v69;
  geo::read_write_lock *v70;
  const char *v71;
  malloc_zone_t *v72;
  uint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  malloc_zone_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  geo::read_write_lock *v80;
  const char *v81;
  malloc_zone_t *v82;
  int v83;
  uint64_t v84;
  geo::read_write_lock *v85;
  const char *v86;
  malloc_zone_t *v87;
  uint64_t v88;
  uint64_t v89;

  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v64 & 1) == 0
    {
      ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43CE0 = 1;
  }
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E42BBC08;
  *(_QWORD *)(v2 + 8) = "VendedMesh";
  *(_QWORD *)(v2 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 56) = &ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(v2 + 64) = 0;
  v4 = v2 + 64;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  {
    v65 = operator new();
    *(_QWORD *)(v65 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v65 + 24) = "GeoGL";
    *(_OWORD *)(v65 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v65 = &off_1E42B5668;
    *(_QWORD *)(v65 + 8) = "GeoGL";
    *(_OWORD *)(v65 + 72) = 0u;
    *(_OWORD *)(v65 + 88) = 0u;
    *(_OWORD *)(v65 + 104) = 0u;
    *(_OWORD *)(v65 + 120) = 0u;
    *(_OWORD *)(v65 + 136) = 0u;
    *(_OWORD *)(v65 + 152) = 0u;
    *(_OWORD *)(v65 + 168) = 0u;
    *(_OWORD *)(v65 + 184) = 0u;
    *(_OWORD *)(v65 + 200) = 0u;
    *(_OWORD *)(v65 + 216) = 0u;
    *(_OWORD *)(v65 + 232) = 0u;
    *(_QWORD *)(v65 + 248) = 0;
    *(_OWORD *)(v65 + 56) = 0u;
    v66 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v65 + 56), 0);
    if ((_DWORD)v66)
      geo::read_write_lock::logFailure(v66, (uint64_t)"initialization", v67);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v65 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v65 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v65;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v6;
  {
    v69 = operator new();
    *(_QWORD *)(v69 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v69 + 24) = "GeoGL";
    *(_OWORD *)(v69 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v69 = &off_1E42B5668;
    *(_QWORD *)(v69 + 8) = "GeoGL";
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_OWORD *)(v69 + 104) = 0u;
    *(_OWORD *)(v69 + 120) = 0u;
    *(_OWORD *)(v69 + 136) = 0u;
    *(_OWORD *)(v69 + 152) = 0u;
    *(_OWORD *)(v69 + 168) = 0u;
    *(_OWORD *)(v69 + 184) = 0u;
    *(_OWORD *)(v69 + 200) = 0u;
    *(_OWORD *)(v69 + 216) = 0u;
    *(_OWORD *)(v69 + 232) = 0u;
    *(_QWORD *)(v69 + 248) = 0;
    *(_OWORD *)(v69 + 56) = 0u;
    v70 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v69 + 56), 0);
    if ((_DWORD)v70)
      geo::read_write_lock::logFailure(v70, (uint64_t)"initialization", v71);
    v72 = malloc_create_zone(0, 0);
    *(_QWORD *)(v69 + 48) = v72;
    malloc_set_zone_name(v72, "GeoGL");
    *(_QWORD *)(v69 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v69;
  }
  *(_QWORD *)(v2 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = v2 + 120;
  *(_QWORD *)v2 = &off_1E42BD9F8;
  *(_QWORD *)(v2 + 16) = &unk_1E42BDA18;
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = (v9 - v7) >> 4;
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 < v10)
    {
      v12 = v7 + 16 * v8;
      while (v9 != v12)
      {
        v13 = *(std::__shared_weak_count **)(v9 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 16;
      }
      *(_QWORD *)(v2 + 72) = v12;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v2 + 64, v11);
  }
  *(_QWORD *)v2 = &off_1E42BA6C0;
  *(_QWORD *)(v2 + 16) = &unk_1E42BA6E0;
  {
    v73 = operator new();
    *(_QWORD *)(v73 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v73 + 24) = "GeoGL";
    *(_OWORD *)(v73 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v73 = &off_1E42B5668;
    *(_QWORD *)(v73 + 8) = "GeoGL";
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 88) = 0u;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *(_OWORD *)(v73 + 184) = 0u;
    *(_OWORD *)(v73 + 200) = 0u;
    *(_OWORD *)(v73 + 216) = 0u;
    *(_OWORD *)(v73 + 232) = 0u;
    *(_QWORD *)(v73 + 248) = 0;
    *(_OWORD *)(v73 + 56) = 0u;
    v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v73 + 56), 0);
    if ((_DWORD)v74)
      geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
    v76 = malloc_create_zone(0, 0);
    *(_QWORD *)(v73 + 48) = v76;
    malloc_set_zone_name(v76, "GeoGL");
    *(_QWORD *)(v73 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v73;
  }
  v17 = ggl::Allocator::instance(void)::alloc;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v18 = &off_1E42E0090;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 32) = &off_1E42B5748;
  v19 = v18 + 32;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 40) = 16;
  *(_DWORD *)(v18 + 48) = 6;
  v20 = 0uLL;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_QWORD *)(v18 + 120) = 0;
  if ((v21 & 1) == 0)
  {
    v88 = v18 + 32;
    v89 = v18;
    v20 = 0uLL;
    v78 = v77;
    v19 = v88;
    v18 = v89;
    if (v78)
    {
      v79 = operator new();
      *(_QWORD *)(v79 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v79 + 24) = "GeoGL";
      *(_OWORD *)(v79 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v79 = &off_1E42B5668;
      *(_QWORD *)(v79 + 8) = "GeoGL";
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *(_OWORD *)(v79 + 168) = 0u;
      *(_OWORD *)(v79 + 184) = 0u;
      *(_OWORD *)(v79 + 200) = 0u;
      *(_OWORD *)(v79 + 216) = 0u;
      *(_OWORD *)(v79 + 232) = 0u;
      *(_QWORD *)(v79 + 248) = 0;
      *(_OWORD *)(v79 + 56) = 0u;
      v80 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v79 + 56), 0);
      if ((_DWORD)v80)
        geo::read_write_lock::logFailure(v80, (uint64_t)"initialization", v81);
      v82 = malloc_create_zone(0, 0);
      *(_QWORD *)(v79 + 48) = v82;
      malloc_set_zone_name(v82, "GeoGL");
      *(_QWORD *)(v79 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v79;
      v19 = v88;
      v18 = v89;
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v18 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v18 + 136) = 0;
  *(_OWORD *)(v18 + 200) = v20;
  *(_OWORD *)(v18 + 184) = v20;
  *(_OWORD *)(v18 + 168) = v20;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = -1;
  *(_OWORD *)(v18 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 240) = "VendedMesh";
  *(_QWORD *)(v18 + 248) = &ggl::BuildingPointyRoof::defaultVboReflection;
  *(_QWORD *)(v18 + 32) = &off_1E42B7D60;
  *(_QWORD *)(v18 + 232) = &unk_1E42B7D80;
  v22 = *(uint64_t **)v4;
  v23 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v22 = v19;
  v22[1] = v18;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(uint64_t **)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v26 < v27)
  {
    if (v26)
      *v26 = v2;
    v28 = v26 + 1;
    goto LABEL_56;
  }
  v29 = ((uint64_t)v26 - *(_QWORD *)a1) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    abort();
  v31 = v27 - *(_QWORD *)a1;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  if (v30)
  {
    v32 = 8 * v30;
    v33 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v30, 8);
    v34 = (uint64_t *)(v33 + 8 * v29);
    v30 = v33 + v32;
    if (v33)
      *v34 = v2;
  }
  else
  {
    v34 = (uint64_t *)(8 * v29);
  }
  v28 = v34 + 1;
  v35 = *(char **)a1;
  v36 = *(char **)(a1 + 8);
  if (v36 == *(char **)a1)
  {
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v28;
    v51 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30;
    goto LABEL_54;
  }
  v37 = (unint64_t)&v36[-*(_QWORD *)a1 - 8];
  if (v37 <= 0x57
    || ((v38 = (v35 - v36 + 7) & 0xFFFFFFFFFFFFFFF8,
         v39 = (unint64_t)&v36[v38],
         v40 = (char *)v34 + v38,
         v39 < (unint64_t)v34)
      ? (v41 = v40 >= v36)
      : (v41 = 1),
        !v41))
  {
    v43 = *(char **)(a1 + 8);
    do
    {
LABEL_48:
      v49 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *(_QWORD *)v43 = 0;
      *--v34 = v49;
    }
    while (v43 != v35);
    goto LABEL_49;
  }
  v42 = (v37 >> 3) + 1;
  v43 = &v36[-8 * (v42 & 0x3FFFFFFFFFFFFFFCLL)];
  v44 = v34 - 2;
  v45 = v36 - 32;
  v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = *(_OWORD *)v45;
    v47 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v45 = 0uLL;
    *((_OWORD *)v45 + 1) = 0uLL;
    v45 -= 32;
    *((_OWORD *)v44 - 1) = v48;
    *(_OWORD *)v44 = v47;
    v44 -= 4;
    v46 -= 4;
  }
  while (v46);
  v34 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  v36 = *(char **)a1;
  v50 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v28;
  v51 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v30;
  while (v50 != v36)
  {
    v53 = *((_QWORD *)v50 - 1);
    v50 -= 8;
    v52 = v53;
    *(_QWORD *)v50 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
LABEL_54:
  if (v36)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v36, v51 - (_QWORD)v36);
LABEL_56:
  *(_QWORD *)(a1 + 8) = v28;
  v54 = *(v28 - 1);
  v55 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v55[1].__shared_owners_ = 2;
  LODWORD(v55[1].__shared_weak_owners_) = 262;
  v57 = (std::__shared_count)0;
  v55[2].std::__shared_count = 0u;
  *(_OWORD *)&v55[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[3].__shared_owners_ = 0u;
  v55[4].std::__shared_count = 0u;
  v55[4].__shared_weak_owners_ = 0;
  if ((v58 & 1) == 0)
  {
    v57 = (std::__shared_count)0;
    if (v83)
    {
      v84 = operator new();
      *(_QWORD *)(v84 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v84 + 24) = "GeoGL";
      *(_OWORD *)(v84 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v84 = &off_1E42B5668;
      *(_QWORD *)(v84 + 8) = "GeoGL";
      *(_OWORD *)(v84 + 72) = 0u;
      *(_OWORD *)(v84 + 88) = 0u;
      *(_OWORD *)(v84 + 104) = 0u;
      *(_OWORD *)(v84 + 120) = 0u;
      *(_OWORD *)(v84 + 136) = 0u;
      *(_OWORD *)(v84 + 152) = 0u;
      *(_OWORD *)(v84 + 168) = 0u;
      *(_OWORD *)(v84 + 184) = 0u;
      *(_OWORD *)(v84 + 200) = 0u;
      *(_OWORD *)(v84 + 216) = 0u;
      *(_OWORD *)(v84 + 232) = 0u;
      *(_QWORD *)(v84 + 248) = 0;
      *(_OWORD *)(v84 + 56) = 0u;
      v85 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v84 + 56), 0);
      if ((_DWORD)v85)
        geo::read_write_lock::logFailure(v85, (uint64_t)"initialization", v86);
      v87 = malloc_create_zone(0, 0);
      *(_QWORD *)(v84 + 48) = v87;
      malloc_set_zone_name(v87, "GeoGL");
      *(_QWORD *)(v84 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v84;
      v57 = (std::__shared_count)0;
    }
  }
  v55[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v55[5].__shared_owners_ = 0;
  *((std::__shared_count *)v55 + 11) = v57;
  v55[8].std::__shared_count = v57;
  v55[8].__shared_weak_owners_ = 0;
  v55[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v55 + 10) = v57;
  v55[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v55[5].__shared_weak_owners_) = 0;
  LODWORD(v55[10].__vftable) = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v55[1].__shared_owners_ = 2;
  v55[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v55[9].__shared_weak_owners_ = (uint64_t)"IndexData";
  do
    v59 = __ldxr(v56);
  while (__stxr(v59 + 1, v56));
  v60 = *(std::__shared_weak_count **)(v54 + 104);
  *(_QWORD *)(v54 + 96) = v55 + 1;
  *(_QWORD *)(v54 + 104) = v55;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  do
    v63 = __ldaxr(v56);
  while (__stlxr(v63 - 1, v56));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
}

void ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>::_allocateNewMesh(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  std::__shared_count v57;
  unsigned __int8 v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  geo::read_write_lock *v66;
  const char *v67;
  malloc_zone_t *zone;
  uint64_t v69;
  geo::read_write_lock *v70;
  const char *v71;
  malloc_zone_t *v72;
  uint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  malloc_zone_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  geo::read_write_lock *v80;
  const char *v81;
  malloc_zone_t *v82;
  int v83;
  uint64_t v84;
  geo::read_write_lock *v85;
  const char *v86;
  malloc_zone_t *v87;
  uint64_t v88;
  uint64_t v89;

  v2 = operator new();
  if ((v3 & 1) == 0
  {
    if ((v64 & 1) == 0
    {
      ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43BF8 = 1;
  }
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &off_1E42BBC08;
  *(_QWORD *)(v2 + 8) = "VendedMesh";
  *(_QWORD *)(v2 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 56) = &ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
  *(_QWORD *)(v2 + 64) = 0;
  v4 = v2 + 64;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  {
    v65 = operator new();
    *(_QWORD *)(v65 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v65 + 24) = "GeoGL";
    *(_OWORD *)(v65 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v65 = &off_1E42B5668;
    *(_QWORD *)(v65 + 8) = "GeoGL";
    *(_OWORD *)(v65 + 72) = 0u;
    *(_OWORD *)(v65 + 88) = 0u;
    *(_OWORD *)(v65 + 104) = 0u;
    *(_OWORD *)(v65 + 120) = 0u;
    *(_OWORD *)(v65 + 136) = 0u;
    *(_OWORD *)(v65 + 152) = 0u;
    *(_OWORD *)(v65 + 168) = 0u;
    *(_OWORD *)(v65 + 184) = 0u;
    *(_OWORD *)(v65 + 200) = 0u;
    *(_OWORD *)(v65 + 216) = 0u;
    *(_OWORD *)(v65 + 232) = 0u;
    *(_QWORD *)(v65 + 248) = 0;
    *(_OWORD *)(v65 + 56) = 0u;
    v66 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v65 + 56), 0);
    if ((_DWORD)v66)
      geo::read_write_lock::logFailure(v66, (uint64_t)"initialization", v67);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v65 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v65 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v65;
  }
  v6 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 88) = v6;
  {
    v69 = operator new();
    *(_QWORD *)(v69 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v69 + 24) = "GeoGL";
    *(_OWORD *)(v69 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v69 = &off_1E42B5668;
    *(_QWORD *)(v69 + 8) = "GeoGL";
    *(_OWORD *)(v69 + 72) = 0u;
    *(_OWORD *)(v69 + 88) = 0u;
    *(_OWORD *)(v69 + 104) = 0u;
    *(_OWORD *)(v69 + 120) = 0u;
    *(_OWORD *)(v69 + 136) = 0u;
    *(_OWORD *)(v69 + 152) = 0u;
    *(_OWORD *)(v69 + 168) = 0u;
    *(_OWORD *)(v69 + 184) = 0u;
    *(_OWORD *)(v69 + 200) = 0u;
    *(_OWORD *)(v69 + 216) = 0u;
    *(_OWORD *)(v69 + 232) = 0u;
    *(_QWORD *)(v69 + 248) = 0;
    *(_OWORD *)(v69 + 56) = 0u;
    v70 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v69 + 56), 0);
    if ((_DWORD)v70)
      geo::read_write_lock::logFailure(v70, (uint64_t)"initialization", v71);
    v72 = malloc_create_zone(0, 0);
    *(_QWORD *)(v69 + 48) = v72;
    malloc_set_zone_name(v72, "GeoGL");
    *(_QWORD *)(v69 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v69;
  }
  *(_QWORD *)(v2 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = v2 + 120;
  *(_QWORD *)v2 = &off_1E42BD638;
  *(_QWORD *)(v2 + 16) = &unk_1E42BD658;
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = (v9 - v7) >> 4;
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 < v10)
    {
      v12 = v7 + 16 * v8;
      while (v9 != v12)
      {
        v13 = *(std::__shared_weak_count **)(v9 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 16;
      }
      *(_QWORD *)(v2 + 72) = v12;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v2 + 64, v11);
  }
  *(_QWORD *)v2 = &off_1E42B6968;
  *(_QWORD *)(v2 + 16) = &unk_1E42B6988;
  {
    v73 = operator new();
    *(_QWORD *)(v73 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v73 + 24) = "GeoGL";
    *(_OWORD *)(v73 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v73 = &off_1E42B5668;
    *(_QWORD *)(v73 + 8) = "GeoGL";
    *(_OWORD *)(v73 + 72) = 0u;
    *(_OWORD *)(v73 + 88) = 0u;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *(_OWORD *)(v73 + 184) = 0u;
    *(_OWORD *)(v73 + 200) = 0u;
    *(_OWORD *)(v73 + 216) = 0u;
    *(_OWORD *)(v73 + 232) = 0u;
    *(_QWORD *)(v73 + 248) = 0;
    *(_OWORD *)(v73 + 56) = 0u;
    v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v73 + 56), 0);
    if ((_DWORD)v74)
      geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
    v76 = malloc_create_zone(0, 0);
    *(_QWORD *)(v73 + 48) = v76;
    malloc_set_zone_name(v76, "GeoGL");
    *(_QWORD *)(v73 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v73;
  }
  v17 = ggl::Allocator::instance(void)::alloc;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v18 = &off_1E42DFD48;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 32) = &off_1E42B5748;
  v19 = v18 + 32;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 40) = 16;
  *(_DWORD *)(v18 + 48) = 6;
  v20 = 0uLL;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_QWORD *)(v18 + 120) = 0;
  if ((v21 & 1) == 0)
  {
    v88 = v18 + 32;
    v89 = v18;
    v20 = 0uLL;
    v78 = v77;
    v19 = v88;
    v18 = v89;
    if (v78)
    {
      v79 = operator new();
      *(_QWORD *)(v79 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v79 + 24) = "GeoGL";
      *(_OWORD *)(v79 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v79 = &off_1E42B5668;
      *(_QWORD *)(v79 + 8) = "GeoGL";
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *(_OWORD *)(v79 + 168) = 0u;
      *(_OWORD *)(v79 + 184) = 0u;
      *(_OWORD *)(v79 + 200) = 0u;
      *(_OWORD *)(v79 + 216) = 0u;
      *(_OWORD *)(v79 + 232) = 0u;
      *(_QWORD *)(v79 + 248) = 0;
      *(_OWORD *)(v79 + 56) = 0u;
      v80 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v79 + 56), 0);
      if ((_DWORD)v80)
        geo::read_write_lock::logFailure(v80, (uint64_t)"initialization", v81);
      v82 = malloc_create_zone(0, 0);
      *(_QWORD *)(v79 + 48) = v82;
      malloc_set_zone_name(v82, "GeoGL");
      *(_QWORD *)(v79 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v79;
      v19 = v88;
      v18 = v89;
      v20 = 0uLL;
    }
  }
  *(_QWORD *)(v18 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v18 + 136) = 0;
  *(_OWORD *)(v18 + 200) = v20;
  *(_OWORD *)(v18 + 184) = v20;
  *(_OWORD *)(v18 + 168) = v20;
  *(_QWORD *)(v18 + 216) = 0;
  *(_QWORD *)(v18 + 224) = -1;
  *(_OWORD *)(v18 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 240) = "VendedMesh";
  *(_QWORD *)(v18 + 248) = &ggl::BuildingFacade::defaultVboReflection;
  *(_QWORD *)(v18 + 32) = &off_1E42B79A0;
  *(_QWORD *)(v18 + 232) = &unk_1E42B79C0;
  v22 = *(uint64_t **)v4;
  v23 = *(std::__shared_weak_count **)(*(_QWORD *)v4 + 8);
  *v22 = v19;
  v22[1] = v18;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(uint64_t **)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v26 < v27)
  {
    if (v26)
      *v26 = v2;
    v28 = v26 + 1;
    goto LABEL_56;
  }
  v29 = ((uint64_t)v26 - *(_QWORD *)a1) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    abort();
  v31 = v27 - *(_QWORD *)a1;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  if (v30)
  {
    v32 = 8 * v30;
    v33 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v30, 8);
    v34 = (uint64_t *)(v33 + 8 * v29);
    v30 = v33 + v32;
    if (v33)
      *v34 = v2;
  }
  else
  {
    v34 = (uint64_t *)(8 * v29);
  }
  v28 = v34 + 1;
  v35 = *(char **)a1;
  v36 = *(char **)(a1 + 8);
  if (v36 == *(char **)a1)
  {
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = v28;
    v51 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30;
    goto LABEL_54;
  }
  v37 = (unint64_t)&v36[-*(_QWORD *)a1 - 8];
  if (v37 <= 0x57
    || ((v38 = (v35 - v36 + 7) & 0xFFFFFFFFFFFFFFF8,
         v39 = (unint64_t)&v36[v38],
         v40 = (char *)v34 + v38,
         v39 < (unint64_t)v34)
      ? (v41 = v40 >= v36)
      : (v41 = 1),
        !v41))
  {
    v43 = *(char **)(a1 + 8);
    do
    {
LABEL_48:
      v49 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *(_QWORD *)v43 = 0;
      *--v34 = v49;
    }
    while (v43 != v35);
    goto LABEL_49;
  }
  v42 = (v37 >> 3) + 1;
  v43 = &v36[-8 * (v42 & 0x3FFFFFFFFFFFFFFCLL)];
  v44 = v34 - 2;
  v45 = v36 - 32;
  v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = *(_OWORD *)v45;
    v47 = *((_OWORD *)v45 + 1);
    *(_OWORD *)v45 = 0uLL;
    *((_OWORD *)v45 + 1) = 0uLL;
    v45 -= 32;
    *((_OWORD *)v44 - 1) = v48;
    *(_OWORD *)v44 = v47;
    v44 -= 4;
    v46 -= 4;
  }
  while (v46);
  v34 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_48;
LABEL_49:
  v36 = *(char **)a1;
  v50 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v34;
  *(_QWORD *)(a1 + 8) = v28;
  v51 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v30;
  while (v50 != v36)
  {
    v53 = *((_QWORD *)v50 - 1);
    v50 -= 8;
    v52 = v53;
    *(_QWORD *)v50 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
LABEL_54:
  if (v36)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v36, v51 - (_QWORD)v36);
LABEL_56:
  *(_QWORD *)(a1 + 8) = v28;
  v54 = *(v28 - 1);
  v55 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v55->__shared_owners_ = 0;
  v56 = (unint64_t *)&v55->__shared_owners_;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
  v55[1].__shared_owners_ = 2;
  LODWORD(v55[1].__shared_weak_owners_) = 262;
  v57 = (std::__shared_count)0;
  v55[2].std::__shared_count = 0u;
  *(_OWORD *)&v55[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v55[3].__shared_owners_ = 0u;
  v55[4].std::__shared_count = 0u;
  v55[4].__shared_weak_owners_ = 0;
  if ((v58 & 1) == 0)
  {
    v57 = (std::__shared_count)0;
    if (v83)
    {
      v84 = operator new();
      *(_QWORD *)(v84 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v84 + 24) = "GeoGL";
      *(_OWORD *)(v84 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v84 = &off_1E42B5668;
      *(_QWORD *)(v84 + 8) = "GeoGL";
      *(_OWORD *)(v84 + 72) = 0u;
      *(_OWORD *)(v84 + 88) = 0u;
      *(_OWORD *)(v84 + 104) = 0u;
      *(_OWORD *)(v84 + 120) = 0u;
      *(_OWORD *)(v84 + 136) = 0u;
      *(_OWORD *)(v84 + 152) = 0u;
      *(_OWORD *)(v84 + 168) = 0u;
      *(_OWORD *)(v84 + 184) = 0u;
      *(_OWORD *)(v84 + 200) = 0u;
      *(_OWORD *)(v84 + 216) = 0u;
      *(_OWORD *)(v84 + 232) = 0u;
      *(_QWORD *)(v84 + 248) = 0;
      *(_OWORD *)(v84 + 56) = 0u;
      v85 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v84 + 56), 0);
      if ((_DWORD)v85)
        geo::read_write_lock::logFailure(v85, (uint64_t)"initialization", v86);
      v87 = malloc_create_zone(0, 0);
      *(_QWORD *)(v84 + 48) = v87;
      malloc_set_zone_name(v87, "GeoGL");
      *(_QWORD *)(v84 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v84;
      v57 = (std::__shared_count)0;
    }
  }
  v55[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
  v55[5].__shared_owners_ = 0;
  *((std::__shared_count *)v55 + 11) = v57;
  v55[8].std::__shared_count = v57;
  v55[8].__shared_weak_owners_ = 0;
  v55[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
  *((std::__shared_count *)v55 + 10) = v57;
  v55[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
  LODWORD(v55[5].__shared_weak_owners_) = 0;
  LODWORD(v55[10].__vftable) = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v55[1].__shared_owners_ = 2;
  v55[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v55[9].__shared_weak_owners_ = (uint64_t)"IndexData";
  do
    v59 = __ldxr(v56);
  while (__stxr(v59 + 1, v56));
  v60 = *(std::__shared_weak_count **)(v54 + 104);
  *(_QWORD *)(v54 + 96) = v55 + 1;
  *(_QWORD *)(v54 + 104) = v55;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  do
    v63 = __ldaxr(v56);
  while (__stlxr(v63 - 1, v56));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
}

BOOL _shouldMakePointyRoofForBuilding(uint64_t a1)
{
  unsigned __int8 v1;
  float *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v23;
  uint64_t v24;
  uint64_t v25;

  if ((v1 & 1) == 0)
  {
    v24 = a1;
    a1 = v24;
    if (v23)
    {
      _shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos = 1048871919;
      a1 = v24;
    }
  }
  if (*(_DWORD *)(a1 + 100) != 1)
    return 0;
  v25 = 0;
  v2 = (float *)geo::codec::multiSectionFeaturePoints((_QWORD *)a1, 0, &v25);
  if (v25 != 4)
    return 0;
  v4 = v2[6];
  v3 = v2[7];
  v5 = v2[4];
  v6 = v2[5];
  v7 = v4 - v5;
  v8 = v3 - v6;
  v9 = (float)(v7 * v7) + (float)(v8 * v8);
  v10 = v2[1];
  v11 = *v2 - v4;
  v12 = v10 - v3;
  v13 = (float)(v11 * v11) + (float)(v12 * v12);
  if (fabsf(fminf(fmaxf((float)((float)(v11 * v7) + (float)(v12 * v8)) / sqrtf(v9 * v13), -1.0), 1.0)) > *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos)
    return 0;
  v14 = v2[2];
  v15 = v2[3];
  v16 = v14 - *v2;
  v17 = v15 - v10;
  v18 = (float)(v16 * v16) + (float)(v17 * v17);
  if (fabsf(fminf(fmaxf((float)((float)(v16 * v11) + (float)(v17 * v12)) / sqrtf(v13 * v18), -1.0), 1.0)) > *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos)
    return 0;
  v19 = v5 - v14;
  v20 = v6 - v15;
  v21 = (float)(v19 * v19) + (float)(v20 * v20);
  return fabsf(fminf(fmaxf((float)((float)(v19 * v16) + (float)(v20 * v17)) / sqrtf(v18 * v21), -1.0), 1.0)) <= *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos
      && fabsf(fminf(fmaxf((float)((float)(v7 * v19) + (float)(v8 * v20)) / sqrtf(v21 * v9), -1.0), 1.0)) <= *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos;
}

void md::Triangulator<float>::triangulate(uint64_t a1, uint64_t a2, unint64_t a3, float32x4_t a4, double a5, float32x4_t a6, double a7, double a8, float32x4_t a9)
{
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 72) = 0;
  if ((geo::Triangulator<float,unsigned short>::_triangulatePolygon(a1, a2, a3, a1 + 88, a4, a5, a6, a7, a8, a9) & 1) == 0)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v11 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      md::Triangulator<float>::_describePoints(__p, a2, a3);
      if (v14 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v16 = v12;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Triangulator failed to fully triangulate polygon: %s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }

  }
}

void sub_19FC0EE70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::writePoints(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  NSObject *v6;
  unsigned int v11;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __n128 v46;
  __int128 v47;
  _QWORD v48[2];
  uint8_t buf[16];
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  uint64_t v53;

  if (a2 < 0x10000)
  {
    v11 = *(unsigned __int16 *)(a1 + 146);
    if (a2 > (unsigned __int16)~(_WORD)v11)
    {
      v13 = *(_BYTE *)(a1 + 144) + 1;
      *(_BYTE *)(a1 + 144) = v13;
      *(_WORD *)(a1 + 146) = 0;
      *(_DWORD *)(a1 + 148) = 0;
      v14 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v13) + 64);
      v15 = *(unsigned __int16 *)(*(_QWORD *)a1 + 8 * v13);
      memset(buf, 0, sizeof(buf));
      v16 = *(_QWORD *)(v14 + 8) * v15;
      a6.n128_u64[0] = a4;
      *(_QWORD *)&v17 = a4;
      *((_QWORD *)&v17 + 1) = v14;
      v46 = a6;
      if (v16)
      {
        if (a4 && *(_BYTE *)(v14 + 17) != 2)
        {
          v45 = v17;
          v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a4 + 56))(a4);
          v17 = v45;
        }
        else
        {
          v18 = *(_QWORD *)(v14 + 72);
        }
      }
      else
      {
        v18 = 0;
      }
      *(_OWORD *)buf = v17;
      v50 = 0;
      v51 = v16;
      v53 = v18;
      v52 = 257;
      ggl::BufferMemory::operator=((uint64_t *)(a1 + 48), (uint64_t)buf);
      *(_QWORD *)&v19 = v46.n128_u64[0];
      if (v53)
      {
        v21 = v50;
        v20 = v51;
        if (v51 != v50)
        {
          v22 = *(_QWORD **)&buf[8];
          v23 = v52;
          v24 = HIBYTE(v52);
          if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
          {
            (*(void (**)(__n128))(**(_QWORD **)buf + 64))(v46);
            *(_QWORD *)&v19 = v46.n128_u64[0];
          }
          if (v23 && !v24)
          {
            v26 = v22[7];
            v25 = v22[8];
            if (v25 == v26)
              v26 = v22[10] - v22[9];
            if (v21 < v26)
              v26 = v21;
            if (v25 <= v20)
              v25 = v20;
            if (v25 == v26)
              v25 = v26 + v22[10] - v22[9];
            v22[7] = v26;
            v22[8] = v25;
          }
        }
      }
      v27 = *(unsigned __int8 *)(a1 + 144);
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v27) + 96);
      v29 = *(unsigned int *)(*(_QWORD *)a1 + 8 * v27 + 4);
      memset(buf, 0, sizeof(buf));
      v30 = *(_QWORD *)(v28 + 8) * v29;
      *((_QWORD *)&v19 + 1) = v28;
      if (v30)
      {
        if (a4 && *(_BYTE *)(v28 + 17) != 2)
        {
          v47 = v19;
          v31 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a4 + 56))(a4);
          v19 = v47;
        }
        else
        {
          v31 = *(_QWORD *)(v28 + 72);
        }
      }
      else
      {
        v31 = 0;
      }
      *(_OWORD *)buf = v19;
      v50 = 0;
      v51 = v30;
      v53 = v31;
      v52 = 257;
      ggl::BufferMemory::operator=((uint64_t *)(a1 + 96), (uint64_t)buf);
      if (v53)
      {
        v33 = v50;
        v32 = v51;
        if (v51 != v50)
        {
          v34 = *(_QWORD **)&buf[8];
          v35 = v52;
          v36 = HIBYTE(v52);
          if (*(_QWORD *)buf && *(_BYTE *)(*(_QWORD *)&buf[8] + 17) != 2)
            (*(void (**)(void))(**(_QWORD **)buf + 64))();
          if (v35 && !v36)
          {
            v38 = v34[7];
            v37 = v34[8];
            if (v37 == v38)
              v38 = v34[10] - v34[9];
            if (v33 < v38)
              v38 = v33;
            if (v37 <= v32)
              v37 = v32;
            if (v37 == v38)
              v37 = v38 + v34[10] - v34[9];
            v34[7] = v38;
            v34[8] = v37;
          }
        }
      }
      v11 = *(unsigned __int16 *)(a1 + 146);
    }
    *(_QWORD *)buf = v11;
    *(_QWORD *)&buf[8] = v11 + a2;
    v39 = *(unsigned int *)(a1 + 148) + a3;
    v48[0] = *(unsigned int *)(a1 + 148);
    v48[1] = v39;
    v40 = *(_QWORD *)(a5 + 24);
    if (v40)
    {
      (*(void (**)(uint64_t, uint8_t *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v40 + 48))(v40, buf, v48, a1 + 48, a1 + 96);
      *(_WORD *)(a1 + 146) += a2;
      *(_DWORD *)(a1 + 148) += a3;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__emplace_unique_key_args<std::pair<void const*,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<void const*,unsigned long>&&>,std::tuple<>>(v41, v42, v43, v44);
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v6 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, "MeshSet: Cannot write points for polygons: polygon is too big", buf, 2u);
    }

  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__emplace_unique_key_args<std::pair<void const*,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<void const*,unsigned long>&&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = (a3
      + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
      + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
      - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (a3
          + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
          + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
          - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              if (v13[2] == a2 && v13[3] == a3)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_28;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (v13[2] == a2 && v13[3] == a3)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_28:
  v18 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x38uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_40;
    if (prime < v10)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v10)
LABEL_40:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v29)
  {
    *v13 = *v29;
LABEL_64:
    *v29 = v13;
    goto LABEL_65;
  }
  *v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v28 + 8 * v4) = v18;
  if (*v13)
  {
    v30 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_19FC0F5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<ggl::CommandBuffer *>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::prepareSpaceForPoints(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _DWORD *v7;
  __int16 v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int16 v38[8];

  if (a2 < 0x10000)
  {
    v7 = *(_DWORD **)(a1 + 8);
    v8 = *((_WORD *)v7 - 4);
    if (a2 <= (unsigned __int16)~v8)
    {
      *((_WORD *)v7 - 4) = v8 + a2;
      *(v7 - 1) += a3;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v7 >= v9)
      {
        v11 = *(_BYTE **)a1;
        v12 = (uint64_t)v7 - *(_QWORD *)a1;
        v13 = v12 >> 3;
        v14 = (v12 >> 3) + 1;
        if (v14 >> 61)
          abort();
        v15 = v9 - (_QWORD)v11;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8;
        v17 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v16)
          v17 = v14;
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = 8 * v17;
        v19 = (char *)operator new(8 * v17);
        v20 = &v19[8 * v13];
        v21 = &v19[v18];
        *(_WORD *)v20 = a2;
        *((_DWORD *)v20 + 1) = a3;
        v10 = v20 + 8;
        if (v7 != (_DWORD *)v11)
        {
          v22 = (char *)v7 - v11 - 8;
          if (v22 < 0x58)
            goto LABEL_44;
          if ((unint64_t)((char *)v7 - v12 - v19) < 0x20)
            goto LABEL_44;
          v23 = (v22 >> 3) + 1;
          v24 = &v19[8 * v13 - 16];
          v25 = (__int128 *)(v7 - 4);
          v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *v25;
            *((_OWORD *)v24 - 1) = *(v25 - 1);
            *(_OWORD *)v24 = v27;
            v24 -= 32;
            v25 -= 2;
            v26 -= 4;
          }
          while (v26);
          v20 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v7 -= 2 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_44:
            do
            {
              v28 = *((_QWORD *)v7 - 1);
              v7 -= 2;
              *((_QWORD *)v20 - 1) = v28;
              v20 -= 8;
            }
            while (v7 != (_DWORD *)v11);
          }
        }
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v10;
        *(_QWORD *)(a1 + 16) = v21;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_WORD *)v7 = a2;
        v7[1] = a3;
        v10 = (char *)(v7 + 2);
      }
      *(_QWORD *)(a1 + 8) = v10;
    }
    v29 = *(_QWORD *)(a1 + 152);
    v30 = *(_QWORD **)(a1 + 168);
    v31 = *(std::__shared_weak_count **)(a1 + 176);
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    if (v30 && *v30 == v29 && !*(_BYTE *)(v29 + 40))
    {
      v34 = *(_QWORD *)(v29 + 8) + a3;
      *(_QWORD *)v29 += 8 * a2;
      *(_QWORD *)(v29 + 8) = v34;
      v35 = v30[3] + a3;
      v30[2] += 8 * a2;
      v30[3] = v35;
    }
    if (v31)
    {
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v38[0] = 0;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_ERROR, "MeshSet: Cannot prepare space polygons points: polygon is too large", (uint8_t *)v38, 2u);
    }

  }
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CBF90;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CBF90;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E0058;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 16, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::BuildingFlatStroke::defaultVboReflection;
  v9[3] = &off_1E42B7D20;
  v9[28] = &unk_1E42B7D40;
  *a4 = v10;
  a4[1] = v9;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4279DE0;
  return result;
}

void std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4279DE0;
}

float std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::operator()()
{
  return 0.0;
}

void std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279D98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279D98;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::operator()(uint64_t a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  float v14;
  double v15;
  double v16;
  unint64_t v17;
  float result;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = 1 << *(_BYTE *)(v10 + 57);
  v12 = 1.0 / (double)v11;
  v13 = (double)(int)(v11 + ~*(_QWORD *)(v10 + 60));
  v14 = (*a2 - v12 * (double)(int)HIDWORD(*(_QWORD *)(v10 + 60))) * (double)v11;
  v15 = -(a2[1] - v12 * v13);
  v16 = v15 * (double)v11;
  *(float *)&v15 = (float)(unint64_t)(*(_QWORD *)(v10 + 32) - 1);
  *(float *)&v13 = v16;
  v17 = md::ElevationRaster::bilinearSample((uint64_t *)v10, *(float *)&v15 * v14, (float)(unint64_t)(*(_QWORD *)(v10 + 40) - 1)+ (float)(*(float *)&v13 * (float)(unint64_t)(*(_QWORD *)(v10 + 40) - 1)), v15, v13, (float)(unint64_t)(*(_QWORD *)(v10 + 40) - 1), a8, a9, a10);
  result = *(float *)&v17;
  if (!HIDWORD(v17))
    return 0.0;
  return result;
}

_QWORD *md::FlyoverTileBuilder::generateHeightMesh(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  double v5;
  double v6;
  double v7;
  char v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  uint64_t v24;
  float *v25;
  unint64_t v26;
  uint64_t (**v27)();
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  float v46;
  int v47;
  double v48;
  float v49;
  long double v50;
  long double v51;
  double v52;
  double v53;
  long double v54;
  double v55;
  __double2 v56;
  double v57;
  double v58;
  double v59;
  __double2 v60;
  double v61;
  double v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  __int16 v68;
  float *v69;
  _WORD *v70;
  __int16 v71;
  float v72;
  float *v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  float *v79;
  uint64_t v80;
  float *v81;
  uint64_t v82;
  float *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t (**v91)();
  uint64_t (**v92)();
  _QWORD *v93;
  int v94;
  int v95;
  uint64_t (**v96)();
  uint64_t (**v97)();
  uint64_t (**v98)();
  uint64_t (**v99)();
  _QWORD *v100;
  int v101;
  int v102;
  uint64_t (**v103)();
  uint64_t (**v104)();
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _QWORD *result;
  uint64_t v111;
  double v113;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  double v121;
  float v122;
  __int128 v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  _QWORD v129[3];
  double v130;
  __int128 *v131;
  __int128 v132;
  uint64_t (**v133)();
  uint64_t (**v134)();
  uint64_t v135;
  uint64_t v136;
  uint64_t (***v137)();
  _QWORD v138[3];
  _QWORD *v139;
  __int128 v140;
  uint64_t (**v141)();
  uint64_t (**v142)();
  uint64_t v143;
  float *v144;
  uint64_t (***v145)();
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v139 = 0;
  if (a3)
  {
    v11 = *(_BYTE *)(a2 + 1);
    v12 = *(_DWORD *)(a2 + 4);
    v13 = *(_DWORD *)(a2 + 8);
    v14 = *(_BYTE *)a2;
    LOBYTE(v132) = v14;
    BYTE1(v132) = v11;
    *(_QWORD *)((char *)&v132 + 4) = __PAIR64__(v13, v12);
    v134 = &off_1E4279D98;
    v135 = a3;
    v137 = &v134;
    LOBYTE(v140) = v14;
    BYTE1(v140) = v11;
    *(_QWORD *)((char *)&v140 + 4) = __PAIR64__(v13, v12);
    v145 = &v142;
    v142 = &off_1E4279D98;
    v143 = a3;
    v15 = COERCE_DOUBLE(operator new(0x40uLL));
    **(_QWORD **)&v15 = &off_1E4279D08;
    *(_BYTE *)(*(_QWORD *)&v15 + 8) = v14;
    *(_BYTE *)(*(_QWORD *)&v15 + 9) = v11;
    *(_DWORD *)(*(_QWORD *)&v15 + 12) = v12;
    *(_DWORD *)(*(_QWORD *)&v15 + 16) = v13;
    *(_QWORD *)(*(_QWORD *)&v15 + 32) = &off_1E4279D98;
    *(_QWORD *)(*(_QWORD *)&v15 + 56) = *(_QWORD *)&v15 + 32;
    *(_QWORD *)(*(_QWORD *)&v15 + 40) = a3;
    v130 = v15;
    std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v129, v138);
    v16 = v130;
    if (*(_QWORD **)&v130 == v129)
    {
      v17 = 4;
      v16 = COERCE_DOUBLE(v129);
    }
    else
    {
      if (v130 == 0.0)
        goto LABEL_9;
      v17 = 5;
    }
    (*(void (**)(void))(**(_QWORD **)&v16 + 8 * v17))();
LABEL_9:
    v20 = v145;
    if (v145 == &v142)
    {
      v21 = 4;
      v20 = &v142;
    }
    else
    {
      if (!v145)
        goto LABEL_14;
      v21 = 5;
    }
    (*v20)[v21]();
LABEL_14:
    v18 = v137;
    if (v137 == &v134)
    {
      v19 = 4;
      v18 = &v134;
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  *(_QWORD *)&v140 = &off_1E4279D50;
  v142 = (uint64_t (**)())&v140;
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v140, v138);
  v18 = (uint64_t (***)())v142;
  if (v142 == (uint64_t (**)())&v140)
  {
    v19 = 4;
    v18 = (uint64_t (***)())&v140;
    goto LABEL_18;
  }
LABEL_15:
  if (!v18)
    goto LABEL_19;
  v19 = 5;
LABEL_18:
  (*v18)[v19]();
LABEL_19:
  v22 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF990;
  ggl::BufferData::BufferData((uint64_t)&v22[1], 32, 0, 0, 7, 221);
  v22[9].__shared_weak_owners_ = (uint64_t)"HeightMesh VertexData";
  v22[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4UVReflection;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B75A0;
  v22[9].__shared_owners_ = (uint64_t)&unk_1E42B75C0;
  v127 = &v22[1].__vftable;
  v128 = v22;
  v23 = operator new(0xF8uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E42DF1E8;
  v24 = ggl::BufferData::BufferData((uint64_t)(v23 + 3), 2, 1, 0, 7, 1152);
  v25 = 0;
  v23[3] = &off_1E42B6B88;
  v23[4] = 2;
  v23[28] = &unk_1E42B6BA8;
  v23[29] = "HeightMesh IndexData";
  v26 = (unint64_t)v22[3].__vftable - v22[2].__shared_weak_owners_;
  v27 = (uint64_t (**)())(v26 / v22[1].__shared_owners_ * v22[1].__shared_owners_);
  *((_DWORD *)v23 + 60) = 0;
  v125 = v24;
  v126 = (std::__shared_weak_count *)v23;
  v140 = 0uLL;
  *(_QWORD *)&v28 = 0;
  *(_QWORD *)&v29 = 0;
  if (v26 != v26 - (_QWORD)v27)
    v25 = (float *)v22[4].__vftable;
  *((_QWORD *)&v28 + 1) = v22 + 1;
  v140 = v28;
  v141 = 0;
  v142 = v27;
  v144 = v25;
  LOWORD(v143) = 1;
  v31 = v23[8];
  v30 = v23[9];
  v132 = 0uLL;
  *((_QWORD *)&v29 + 1) = v24;
  v32 = (v30 - v31) & 0xFFFFFFFFFFFFFFFELL;
  if (v32)
    v33 = v23[12];
  else
    v33 = 0;
  v34 = 0;
  v35 = 0;
  v132 = v29;
  v133 = 0;
  v134 = (uint64_t (**)())v32;
  v36 = 3.4028e38;
  v37 = -3.4028e38;
  v38 = v33;
  v136 = v33;
  v39 = -3.4028e38;
  v40 = 3.4028e38;
  LOWORD(v135) = 1;
  v41 = -3.4028e38;
  v42 = 3.4028e38;
  do
  {
    v43 = 0;
    v44 = 13 * v34;
    v45 = 13 * v34 + 13;
    do
    {
      *(float *)v129 = (float)v43 * 0.083333;
      *((float *)v129 + 1) = (float)v34 * 0.083333;
      if (!v139)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      v122 = v42;
      v46 = (*(float (**)(_QWORD *, _QWORD *))(*v139 + 48))(v139, v129);
      v116 = v41;
      v117 = v40;
      v118 = v39;
      v119 = v37;
      v120 = v36;
      v47 = 1 << *(_BYTE *)(a2 + 1);
      v48 = v46;
      v49 = *((float *)v129 + 1);
      v115 = *(float *)v129;
      v113 = (double)v47;
      v50 = 6.28318531 / (double)v47 * (*(float *)v129 + (double)*(int *)(a2 + 8));
      v51 = exp(((double)(v47 + ~*(_DWORD *)(a2 + 4)) + *((float *)v129 + 1)) * (6.28318531 / (double)v47) + -3.14159265);
      v121 = v7;
      v52 = v5;
      v53 = atan(v51) * 2.0 + -1.57079633;
      v54 = fmod(v50, 6.28318531);
      v55 = fmod(v54 + 6.28318531, 6.28318531) + -3.14159265;
      v56 = __sincos_stret(v53);
      v57 = 6378137.0 / sqrt(v56.__sinval * v56.__sinval * -0.00669437999 + 1.0);
      v58 = v6;
      v59 = (v57 + v48) * v56.__cosval;
      v60 = __sincos_stret(v55);
      v61 = v59 * v60.__cosval;
      v62 = v59 * v60.__sinval;
      v5 = v52;
      v7 = v121;
      if (v43 | v34)
      {
        v6 = v58;
      }
      else
      {
        v7 = v59 * v60.__cosval;
        v6 = v59 * v60.__sinval;
      }
      if (!(v43 | v34))
        v5 = (v48 + v57 * 0.99330562) * v56.__sinval;
      v63 = *a4 + (float)(*a5 * v115);
      v64 = a4[1] + (float)(*a5 * v49);
      v65 = v61 - v7;
      v66 = v62 - v6;
      v67 = (v48 + v57 * 0.99330562) * v56.__sinval - v5;
      v68 = v43 + v44;
      v69 = &v25[8 * v43 + 8 * v44];
      *v69 = v65;
      v69[1] = v66;
      v69[2] = v67;
      v69[3] = 1.0;
      v69[4] = v63;
      v69[5] = 1.0 - v64;
      if (v34 > 0xB || v43 >= 0xC)
      {
        ++v43;
      }
      else
      {
        v70 = (_WORD *)(v38 + 2 * v35);
        *v70 = v68;
        v71 = v43++ + v45;
        v70[1] = v43 + v45;
        v70[2] = v71;
        v70[3] = v43 + v44;
        v70[4] = v43 + v45;
        v35 += 6;
        v70[5] = v68;
      }
      v42 = fminf(v122, v65);
      v41 = fmaxf(v116, v65);
      v40 = fminf(v117, v66);
      *(_QWORD *)&v123 = __PAIR64__(LODWORD(v40), LODWORD(v42));
      v39 = fmaxf(v118, v66);
      v36 = fminf(v120, v67);
      *((_QWORD *)&v123 + 1) = __PAIR64__(LODWORD(v41), LODWORD(v36));
      v37 = fmaxf(v119, v67);
      v124 = __PAIR64__(LODWORD(v37), LODWORD(v39));
    }
    while (v43 != 13);
    ++v34;
  }
  while (v34 != 13);
  v72 = 626172.136 / v113;
  *(float *)v129 = v72;
  *(double *)&v129[1] = v7;
  *(double *)&v129[2] = v6;
  v130 = v5;
  v131 = &v123;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v25, (uint64_t)(v25 + 1352), 0.0, 0.015625);
  v73 = v144;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v144 + 8, (uint64_t)(v144 + 1360), 0.0, 0.015625);
  v74 = v136 + 2 * v35;
  *(_QWORD *)v74 = 0xAA00AA00A90000;
  *(_DWORD *)(v74 + 8) = 1;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 16, (uint64_t)(v73 + 1368), 0.0, 0.015625);
  *(_QWORD *)(v74 + 12) = 0xAB00AB00AA0001;
  *(_DWORD *)(v74 + 20) = 65538;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 24, (uint64_t)(v73 + 1376), 0.0, 0.015625);
  *(_QWORD *)(v74 + 24) = 0xAC00AC00AB0002;
  *(_DWORD *)(v74 + 32) = 131075;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 32, (uint64_t)(v73 + 1384), 0.0, 0.015625);
  *(_QWORD *)(v74 + 36) = 0xAD00AD00AC0003;
  *(_DWORD *)(v74 + 44) = 196612;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 40, (uint64_t)(v73 + 1392), 0.0, 0.015625);
  *(_QWORD *)(v74 + 48) = 0xAE00AE00AD0004;
  *(_DWORD *)(v74 + 56) = 262149;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 48, (uint64_t)(v73 + 1400), 0.0, 0.015625);
  *(_QWORD *)(v74 + 60) = 0xAF00AF00AE0005;
  *(_DWORD *)(v74 + 68) = 327686;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 56, (uint64_t)(v73 + 1408), 0.0, 0.015625);
  *(_QWORD *)(v74 + 72) = 0xB000B000AF0006;
  *(_DWORD *)(v74 + 80) = 393223;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 64, (uint64_t)(v73 + 1416), 0.0, 0.015625);
  *(_QWORD *)(v74 + 84) = 0xB100B100B00007;
  *(_DWORD *)(v74 + 92) = 458760;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v73 + 72, (uint64_t)(v73 + 1424), 0.0, 0.015625);
  *(_QWORD *)(v74 + 96) = 0xB200B200B10008;
  *(_DWORD *)(v74 + 104) = 524297;
  v75 = v144;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v144 + 80, (uint64_t)(v144 + 1432), 0.0, 0.015625);
  v76 = 2 * v35 + v136;
  *(_QWORD *)(v76 + 108) = 0xB300B300B20009;
  *(_DWORD *)(v76 + 116) = 589834;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 88, (uint64_t)(v75 + 1440), 0.0, 0.015625);
  *(_QWORD *)(v76 + 120) = 0xB400B400B3000ALL;
  *(_DWORD *)(v76 + 128) = 655371;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 96, (uint64_t)(v75 + 1448), 0.0, 0.015625);
  *(_QWORD *)(v76 + 132) = 0xB500B500B4000BLL;
  *(_DWORD *)(v76 + 140) = 720908;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 96, (uint64_t)(v75 + 1456), -0.015625, 0.0);
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 200, (uint64_t)(v75 + 1464), -0.015625, 0.0);
  *(_QWORD *)(v76 + 144) = 0xB700B700B6000CLL;
  *(_DWORD *)(v76 + 152) = 786457;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 304, (uint64_t)(v75 + 1472), -0.015625, 0.0);
  *(_QWORD *)(v76 + 156) = 0xB800B800B70019;
  *(_DWORD *)(v76 + 164) = 1638438;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 408, (uint64_t)(v75 + 1480), -0.015625, 0.0);
  *(_QWORD *)(v76 + 168) = 0xB900B900B80026;
  *(_DWORD *)(v76 + 176) = 2490419;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 512, (uint64_t)(v75 + 1488), -0.015625, 0.0);
  *(_QWORD *)(v76 + 180) = 0xBA00BA00B90033;
  *(_DWORD *)(v76 + 188) = 3342400;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v75 + 616, (uint64_t)(v75 + 1496), -0.015625, 0.0);
  *(_QWORD *)(v76 + 192) = 0xBB00BB00BA0040;
  *(_DWORD *)(v76 + 200) = 4194381;
  v77 = v144;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v144 + 720, (uint64_t)(v144 + 1504), -0.015625, 0.0);
  v78 = 2 * v35 + v136;
  *(_QWORD *)(v78 + 204) = 0xBC00BC00BB004DLL;
  *(_DWORD *)(v78 + 212) = 5046362;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 824, (uint64_t)(v77 + 1512), -0.015625, 0.0);
  *(_QWORD *)(v78 + 216) = 0xBD00BD00BC005ALL;
  *(_DWORD *)(v78 + 224) = 5898343;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 928, (uint64_t)(v77 + 1520), -0.015625, 0.0);
  *(_QWORD *)(v78 + 228) = 0xBE00BE00BD0067;
  *(_DWORD *)(v78 + 236) = 6750324;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 1032, (uint64_t)(v77 + 1528), -0.015625, 0.0);
  *(_QWORD *)(v78 + 240) = 0xBF00BF00BE0074;
  *(_DWORD *)(v78 + 248) = 7602305;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 1136, (uint64_t)(v77 + 1536), -0.015625, 0.0);
  *(_QWORD *)(v78 + 252) = 0xC000C000BF0081;
  *(_DWORD *)(v78 + 260) = 8454286;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 1240, (uint64_t)(v77 + 1544), -0.015625, 0.0);
  *(_QWORD *)(v78 + 264) = 0xC100C100C0008ELL;
  *(_DWORD *)(v78 + 272) = 9306267;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 1344, (uint64_t)(v77 + 1552), -0.015625, 0.0);
  *(_QWORD *)(v78 + 276) = 0xC200C200C1009BLL;
  *(_DWORD *)(v78 + 284) = 10158248;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 1344, (uint64_t)(v77 + 1560), 0.0, -0.015625);
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v77 + 1336, (uint64_t)(v77 + 1568), 0.0, -0.015625);
  *(_QWORD *)(v78 + 288) = 0xC400C400C300A8;
  *(_DWORD *)(v78 + 296) = 11010215;
  v79 = v144;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v144 + 1328, (uint64_t)(v144 + 1576), 0.0, -0.015625);
  v80 = 2 * v35 + v136;
  *(_QWORD *)(v80 + 300) = 0xC500C500C400A7;
  *(_DWORD *)(v80 + 308) = 10944678;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1320, (uint64_t)(v79 + 1584), 0.0, -0.015625);
  *(_QWORD *)(v80 + 312) = 0xC600C600C500A6;
  *(_DWORD *)(v80 + 320) = 10879141;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1312, (uint64_t)(v79 + 1592), 0.0, -0.015625);
  *(_QWORD *)(v80 + 324) = 0xC700C700C600A5;
  *(_DWORD *)(v80 + 332) = 10813604;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1304, (uint64_t)(v79 + 1600), 0.0, -0.015625);
  *(_QWORD *)(v80 + 336) = 0xC800C800C700A4;
  *(_DWORD *)(v80 + 344) = 10748067;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1296, (uint64_t)(v79 + 1608), 0.0, -0.015625);
  *(_QWORD *)(v80 + 348) = 0xC900C900C800A3;
  *(_DWORD *)(v80 + 356) = 10682530;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1288, (uint64_t)(v79 + 1616), 0.0, -0.015625);
  *(_QWORD *)(v80 + 360) = 0xCA00CA00C900A2;
  *(_DWORD *)(v80 + 368) = 10616993;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1280, (uint64_t)(v79 + 1624), 0.0, -0.015625);
  *(_QWORD *)(v80 + 372) = 0xCB00CB00CA00A1;
  *(_DWORD *)(v80 + 380) = 10551456;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1272, (uint64_t)(v79 + 1632), 0.0, -0.015625);
  *(_QWORD *)(v80 + 384) = 0xCC00CC00CB00A0;
  *(_DWORD *)(v80 + 392) = 10485919;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v79 + 1264, (uint64_t)(v79 + 1640), 0.0, -0.015625);
  *(_QWORD *)(v80 + 396) = 0xCD00CD00CC009FLL;
  *(_DWORD *)(v80 + 404) = 10420382;
  v81 = v144;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v144 + 1256, (uint64_t)(v144 + 1648), 0.0, -0.015625);
  v82 = 2 * v35 + v136;
  *(_QWORD *)(v82 + 408) = 0xCE00CE00CD009ELL;
  *(_DWORD *)(v82 + 416) = 10354845;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 1248, (uint64_t)(v81 + 1656), 0.0, -0.015625);
  *(_QWORD *)(v82 + 420) = 0xCF00CF00CE009DLL;
  *(_DWORD *)(v82 + 428) = 10289308;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 1248, (uint64_t)(v81 + 1664), 0.015625, 0.0);
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 1144, (uint64_t)(v81 + 1672), 0.015625, 0.0);
  *(_QWORD *)(v82 + 432) = 0xD100D100D0009CLL;
  *(_DWORD *)(v82 + 440) = 10223759;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 1040, (uint64_t)(v81 + 1680), 0.015625, 0.0);
  *(_QWORD *)(v82 + 444) = 0xD200D200D1008FLL;
  *(_DWORD *)(v82 + 452) = 9371778;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 936, (uint64_t)(v81 + 1688), 0.015625, 0.0);
  *(_QWORD *)(v82 + 456) = 0xD300D300D20082;
  *(_DWORD *)(v82 + 464) = 8519797;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 832, (uint64_t)(v81 + 1696), 0.015625, 0.0);
  *(_QWORD *)(v82 + 468) = 0xD400D400D30075;
  *(_WORD *)(v82 + 476) = 104;
  *(_WORD *)(v82 + 478) = 117;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 728, (uint64_t)(v81 + 1704), 0.015625, 0.0);
  *(_QWORD *)(v82 + 480) = 0xD500D500D40068;
  *(_WORD *)(v82 + 488) = 91;
  *(_WORD *)(v82 + 490) = 104;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v81 + 624, (uint64_t)(v81 + 1712), 0.015625, 0.0);
  *(_QWORD *)(v82 + 492) = 0xD600D600D5005BLL;
  *(_WORD *)(v82 + 500) = 78;
  *(_WORD *)(v82 + 502) = 91;
  v83 = v144;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v144 + 520, (uint64_t)(v144 + 1720), 0.015625, 0.0);
  v84 = 2 * v35 + v136;
  *(_QWORD *)(v84 + 504) = 0xD700D700D6004ELL;
  *(_WORD *)(v84 + 512) = 65;
  *(_WORD *)(v84 + 514) = 78;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v83 + 416, (uint64_t)(v83 + 1728), 0.015625, 0.0);
  *(_QWORD *)(v84 + 516) = 0xD800D800D70041;
  *(_WORD *)(v84 + 524) = 52;
  *(_WORD *)(v84 + 526) = 65;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v83 + 312, (uint64_t)(v83 + 1736), 0.015625, 0.0);
  *(_QWORD *)(v84 + 528) = 0xD900D900D80034;
  *(_WORD *)(v84 + 536) = 39;
  *(_WORD *)(v84 + 538) = 52;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v83 + 208, (uint64_t)(v83 + 1744), 0.015625, 0.0);
  *(_QWORD *)(v84 + 540) = 0xDA00DA00D90027;
  *(_WORD *)(v84 + 548) = 26;
  *(_WORD *)(v84 + 550) = 39;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v83 + 104, (uint64_t)(v83 + 1752), 0.015625, 0.0);
  *(_QWORD *)(v84 + 552) = 0xDB00DB00DA001ALL;
  *(_WORD *)(v84 + 560) = 13;
  *(_WORD *)(v84 + 562) = 26;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()((uint64_t)v129, v83, (uint64_t)(v83 + 1760), 0.015625, 0.0);
  *(_QWORD *)(v84 + 564) = 0xDC00DC00DB000DLL;
  *(_WORD *)(v84 + 572) = 0;
  *(_WORD *)(v84 + 574) = 13;
  v85 = v128;
  *(_QWORD *)a1 = v127;
  *(_QWORD *)(a1 + 8) = v85;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldxr(p_shared_owners);
    while (__stxr(v87 + 1, p_shared_owners));
  }
  v88 = v126;
  *(_QWORD *)(a1 + 16) = v125;
  *(_QWORD *)(a1 + 24) = v88;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  *(double *)(a1 + 32) = v7;
  *(double *)(a1 + 40) = v6;
  *(double *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = v123;
  *(_QWORD *)(a1 + 72) = v124;
  v92 = v133;
  v91 = v134;
  if (v134 != v133)
  {
    v93 = (_QWORD *)*((_QWORD *)&v132 + 1);
    v94 = v135;
    v95 = BYTE1(v135);
    if ((_QWORD)v132 && *(_BYTE *)(*((_QWORD *)&v132 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v132 + 64))();
    if (v94 && !v95)
    {
      v97 = (uint64_t (**)())v93[7];
      v96 = (uint64_t (**)())v93[8];
      if (v96 == v97)
        v97 = (uint64_t (**)())(v93[10] - v93[9]);
      if (v92 < v97)
        v97 = v92;
      if (v96 <= v91)
        v96 = v91;
      if (v96 == v97)
        v96 = (uint64_t (**)())((char *)v97 + v93[10] - v93[9]);
      v93[7] = v97;
      v93[8] = v96;
    }
  }
  v99 = v141;
  v98 = v142;
  if (v142 != v141)
  {
    v100 = (_QWORD *)*((_QWORD *)&v140 + 1);
    v101 = v143;
    v102 = BYTE1(v143);
    if ((_QWORD)v140 && *(_BYTE *)(*((_QWORD *)&v140 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v140 + 64))();
    if (v101 && !v102)
    {
      v104 = (uint64_t (**)())v100[7];
      v103 = (uint64_t (**)())v100[8];
      if (v103 == v104)
        v104 = (uint64_t (**)())(v100[10] - v100[9]);
      if (v99 < v104)
        v104 = v99;
      if (v103 <= v98)
        v103 = v98;
      if (v103 == v104)
        v103 = (uint64_t (**)())((char *)v104 + v100[10] - v100[9]);
      v100[7] = v104;
      v100[8] = v103;
    }
  }
  if (v88)
  {
    v105 = (unint64_t *)&v88->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v107 = v128;
  if (v128)
  {
    v108 = (unint64_t *)&v128->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  result = v139;
  if (v139 == v138)
  {
    v111 = 4;
    result = v138;
  }
  else
  {
    if (!v139)
      return result;
    v111 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v111))();
}

void sub_19FC116EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FC116F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  v32 = *(_QWORD **)(v30 - 232);
  if (v32 == (_QWORD *)(v30 - 256))
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 256);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  _Unwind_Resume(a1);
}

float md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_2::operator()(uint64_t a1, float *a2, uint64_t a3, float a4, float a5)
{
  double v8;
  double v9;
  long double v10;
  long double v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  __double2 v17;
  double v18;
  __double2 v19;
  long double v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  __double2 v25;
  double v26;
  double v27;
  __double2 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float result;

  v8 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = v8 + *a2;
  v11 = v9 + a2[1];
  v12 = *(double *)(a1 + 24);
  v13 = v12 + a2[2];
  v14 = sqrt(v10 * v10 + v11 * v11);
  v15 = atan2(v13, v14 * 0.996647189);
  v16 = atan2(v11, v10);
  v17 = __sincos_stret(v15);
  v18 = atan2(v13 + v17.__sinval * v17.__sinval * 42841.3115 * v17.__sinval, v14 + v17.__cosval * v17.__cosval * -42697.6727 * v17.__cosval);
  v19 = __sincos_stret(v18);
  v20 = tan(v18 * 0.5 + 0.785398163);
  v21 = v14 / v19.__cosval - *(float *)a1 + -6378137.0 / sqrt(1.0 - v19.__sinval * v19.__sinval * 0.00669437999);
  v22 = atan(v20) * 2.0 + -1.57079633;
  v23 = fmod(v16 + 3.14159265, 6.28318531);
  v24 = fmod(v23 + 6.28318531, 6.28318531) + -3.14159265;
  v25 = __sincos_stret(v22);
  v26 = 6378137.0 / sqrt(1.0 - v25.__sinval * v25.__sinval * 0.00669437999);
  v27 = (v26 + v21) * v25.__cosval;
  v28 = __sincos_stret(v24);
  v29 = -(v8 - v27 * v28.__cosval);
  v30 = -(v9 - v27 * v28.__sinval);
  v31 = -(v12 + -(v21 + v26 * 0.99330562) * v25.__sinval);
  *(float *)a3 = v29;
  *(float *)(a3 + 4) = v30;
  *(float *)(a3 + 8) = v31;
  *(_DWORD *)(a3 + 12) = 1065353216;
  v32 = a2[5] + a5;
  *(float *)(a3 + 16) = a2[4] + a4;
  *(float *)(a3 + 20) = v32;
  v33 = *(float **)(a1 + 32);
  v34 = fminf(*v33, v29);
  v35 = v33[2];
  v36 = fmaxf(v33[3], v29);
  v37 = fminf(v33[1], v30);
  *v33 = v34;
  v33[1] = v37;
  v38 = v33[5];
  result = fmaxf(v33[4], v30);
  v33[2] = fminf(v35, v31);
  v33[3] = v36;
  v33[4] = result;
  v33[5] = fmaxf(v38, v31);
  return result;
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4279D50;
  return result;
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4279D50;
}

float std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::operator()()
{
  return 0.0;
}

_QWORD *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E4279D08;
  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E4279D08;
  v1 = a1 + 4;
  v2 = (_QWORD *)a1[7];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E4279D08;
  *((_WORD *)v2 + 4) = *(_WORD *)(a1 + 8);
  *(_QWORD *)(v2 + 12) = *(_QWORD *)(a1 + 12);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (v3 == a1 + 32)
    {
      *((_QWORD *)v2 + 7) = v2 + 32;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return v2;
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  *((_QWORD *)v2 + 7) = v3;
  return v2;
}

void sub_19FC11B50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a2 = &off_1E4279D08;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(result + 12);
  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    if (v3 == result + 32)
    {
      *(_QWORD *)(a2 + 56) = a2 + 32;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 56) + 24))(*(_QWORD *)(result + 56));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 56));
      *(_QWORD *)(a2 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 56) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 32;
  v3 = (char *)*((_QWORD *)__p + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

double std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,gm::Matrix<float,2,1> const&,float const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::operator()(uint64_t a1, float32x2_t *a2)
{
  int v2;
  int64x2_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  float32_t v10;
  float32x2_t v11;
  float64x2_t v12;

  v2 = 1 << *(_BYTE *)(a1 + 9);
  v3.i64[0] = *(int *)(a1 + 16);
  v3.i64[1] = v2 + ~*(_DWORD *)(a1 + 12);
  v12 = vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v3), vcvtq_f64_f32(*a2)), 1.0 / (double)v2);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v4 + 48))(v4, &v12);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    *(_QWORD *)&result = md::imageSampleBilinear<float>(v6, v7, v8, v9, v10, v11).n128_u64[0];
  }
  return result;
}

__n128 md::imageSampleBilinear<float>(uint64_t a1, int a2, unsigned int a3, unsigned int a4, float32_t a5, float32x2_t a6)
{
  int32x2_t v6;
  float32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int v11;
  float v12;
  __n128 result;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int32x2_t v19;
  float v20;
  float v21;
  float v22;

  v6 = vadd_s32((int32x2_t)__PAIR64__(a3, a4), (int32x2_t)-1);
  a6.f32[1] = a5;
  v7 = vmul_f32(a6, vcvt_f32_s32(v6));
  v8 = vcvt_s32_f32(vrndm_f32(v7));
  v9 = vmin_s32(vmax_s32(v8, 0), v6);
  v10 = vmin_s32(vadd_s32(vmax_s32(v8, (int32x2_t)-1), (int32x2_t)0x100000001), v6);
  v11 = 1;
  v12 = 0.0;
  result.n128_u32[0] = 0;
  v14 = 0.0;
  v15 = 0.0;
  switch(a2)
  {
    case 0:
    case 22:
    case 23:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      v11 = 0;
      if (a2 != 12)
        goto LABEL_12;
      goto LABEL_13;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
    case 42:
    case 43:
      v11 = 2;
      if (a2 == 12)
        goto LABEL_13;
      goto LABEL_12;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 26:
      v11 = 4;
      if (a2 == 12)
        goto LABEL_13;
      goto LABEL_12;
    case 9:
    case 16:
    case 17:
      v11 = 8;
      if (a2 == 12)
        goto LABEL_13;
      goto LABEL_12;
    case 10:
    case 11:
      v11 = 3;
      goto LABEL_11;
    case 18:
    case 21:
      v11 = 16;
      if (a2 == 12)
        goto LABEL_13;
      goto LABEL_12;
    case 58:
      goto LABEL_59;
    default:
LABEL_11:
      if (a2 == 12)
        goto LABEL_13;
LABEL_12:
      result.n128_u32[0] = 0;
      if (a2 == 2)
      {
LABEL_13:
        result.n128_u8[0] = *(_BYTE *)(a1 + v11 * (uint64_t)(int)(v9.i32[1] + v9.i32[0] * a3));
        result.n128_f32[0] = (float)result.n128_u32[0] * 0.0039216;
      }
      v16 = 1;
      v12 = 0.0;
      v14 = 0.0;
      v15 = 0.0;
      switch(a2)
      {
        case 0:
        case 22:
        case 23:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          v16 = 0;
          if (a2 != 12)
            goto LABEL_27;
          goto LABEL_28;
        case 3:
        case 4:
        case 6:
        case 19:
        case 24:
        case 27:
        case 42:
        case 43:
          v16 = 2;
          if (a2 == 12)
            goto LABEL_28;
          goto LABEL_27;
        case 5:
        case 7:
        case 8:
        case 12:
        case 13:
        case 14:
        case 15:
        case 20:
        case 26:
          v16 = 4;
          if (a2 == 12)
            goto LABEL_28;
          goto LABEL_27;
        case 9:
        case 16:
        case 17:
          v16 = 8;
          if (a2 == 12)
            goto LABEL_28;
          goto LABEL_27;
        case 10:
        case 11:
          v16 = 3;
          goto LABEL_26;
        case 18:
        case 21:
          v16 = 16;
          if (a2 == 12)
            goto LABEL_28;
          goto LABEL_27;
        case 58:
          break;
        default:
LABEL_26:
          if (a2 == 12)
            goto LABEL_28;
LABEL_27:
          v14 = 0.0;
          if (a2 == 2)
          {
LABEL_28:
            LOBYTE(v14) = *(_BYTE *)(a1 + v16 * (uint64_t)(int)(v9.i32[1] + v10.i32[0] * a3));
            v14 = (float)LODWORD(v14) * 0.0039216;
          }
          v17 = 1;
          v12 = 0.0;
          v15 = 0.0;
          switch(a2)
          {
            case 0:
            case 22:
            case 23:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              v17 = 0;
              if (a2 != 12)
                goto LABEL_42;
              goto LABEL_43;
            case 3:
            case 4:
            case 6:
            case 19:
            case 24:
            case 27:
            case 42:
            case 43:
              v17 = 2;
              if (a2 == 12)
                goto LABEL_43;
              goto LABEL_42;
            case 5:
            case 7:
            case 8:
            case 12:
            case 13:
            case 14:
            case 15:
            case 20:
            case 26:
              v17 = 4;
              if (a2 == 12)
                goto LABEL_43;
              goto LABEL_42;
            case 9:
            case 16:
            case 17:
              v17 = 8;
              if (a2 == 12)
                goto LABEL_43;
              goto LABEL_42;
            case 10:
            case 11:
              v17 = 3;
              goto LABEL_41;
            case 18:
            case 21:
              v17 = 16;
              if (a2 == 12)
                goto LABEL_43;
              goto LABEL_42;
            case 58:
              goto LABEL_59;
            default:
LABEL_41:
              if (a2 == 12)
                goto LABEL_43;
LABEL_42:
              v12 = 0.0;
              if (a2 == 2)
              {
LABEL_43:
                LOBYTE(v12) = *(_BYTE *)(a1 + v17 * (uint64_t)(int)(v10.i32[1] + v9.i32[0] * a3));
                v12 = (float)LODWORD(v12) * 0.0039216;
              }
              v15 = 0.0;
              v18 = 1;
              switch(a2)
              {
                case 0:
                case 22:
                case 23:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  v18 = 0;
                  if (a2 != 12)
                    goto LABEL_57;
                  goto LABEL_58;
                case 3:
                case 4:
                case 6:
                case 19:
                case 24:
                case 27:
                case 42:
                case 43:
                  v18 = 2;
                  if (a2 == 12)
                    goto LABEL_58;
                  goto LABEL_57;
                case 5:
                case 7:
                case 8:
                case 12:
                case 13:
                case 14:
                case 15:
                case 20:
                case 26:
                  v18 = 4;
                  if (a2 == 12)
                    goto LABEL_58;
                  goto LABEL_57;
                case 9:
                case 16:
                case 17:
                  v18 = 8;
                  if (a2 == 12)
                    goto LABEL_58;
                  goto LABEL_57;
                case 10:
                case 11:
                  v18 = 3;
                  goto LABEL_56;
                case 18:
                case 21:
                  v18 = 16;
                  if (a2 == 12)
                    goto LABEL_58;
                  goto LABEL_57;
                case 58:
                  goto LABEL_59;
                default:
LABEL_56:
                  if (a2 == 12)
                    goto LABEL_58;
LABEL_57:
                  if (a2 == 2)
                  {
LABEL_58:
                    LOBYTE(v15) = *(_BYTE *)(a1 + v18 * (uint64_t)(int)(v10.i32[1] + v10.i32[0] * a3));
                    v15 = (float)LODWORD(v15) * 0.0039216;
                  }
                  break;
              }
              break;
          }
          break;
      }
LABEL_59:
      v19 = vceq_s32(v9, v10);
      if ((v19.i32[1] & v19.i32[0] & 1) != 0)
        return result;
      if ((v19.i8[4] & 1) != 0)
      {
        v20 = v7.f32[0] - (float)v9.i32[0];
        v7.f32[0] = (float)v10.i32[0] - v7.f32[0];
      }
      else
      {
        if ((v19.i8[0] & 1) != 0)
        {
          result.n128_f32[0] = (float)(v12 * (float)(v7.f32[1] - (float)v9.i32[1]))
                             + (float)(result.n128_f32[0] * (float)((float)v10.i32[1] - v7.f32[1]));
          return result;
        }
        v21 = v7.f32[1] - (float)v9.i32[1];
        v20 = v7.f32[0] - (float)v9.i32[0];
        v7.f32[0] = (float)v10.i32[0] - v7.f32[0];
        v22 = (float)v10.i32[1] - v7.f32[1];
        v14 = (float)(v14 * v22) + (float)(v15 * v21);
        result.n128_f32[0] = (float)(v12 * v21) + (float)(result.n128_f32[0] * v22);
      }
      result.n128_f32[0] = (float)(result.n128_f32[0] * v7.f32[0]) + (float)(v14 * v20);
      return result;
  }
}

uint64_t md::FlyoverTileBuilder::createIndexData(md::FlyoverTileBuilder *this, const geo::c3m::Mesh *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 v22;

  v4 = (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 1;
  v5 = operator new(0xF8uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E42DF1E8;
  result = ggl::BufferData::BufferData((uint64_t)(v5 + 3), 2, 1, 0, 7, v4);
  *((_DWORD *)v5 + 60) = 0;
  v5[3] = &off_1E42B6B88;
  v5[4] = 2;
  v5[28] = &unk_1E42B6BA8;
  v5[29] = "Flyover IndexData";
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = v5;
  v7 = *((_QWORD *)a2 + 16);
  v8 = *((_QWORD *)a2 + 17);
  v9 = (v8 - v7) & 0xFFFFFFFFFFFFFFFELL;
  if (v9)
  {
    v10 = v5[12];
    if (v8 == v7)
      goto LABEL_17;
  }
  else
  {
    v10 = 0;
    if (v8 == v7)
      goto LABEL_17;
  }
  v11 = (v8 - v7) >> 1;
  if (v11 <= 1)
    v11 = 1;
  if (v11 < 0x10 || (unint64_t)(v10 - v7) <= 0x1F)
  {
    v13 = 0;
LABEL_15:
    v18 = v11 - v13;
    v19 = 2 * v13;
    v20 = (_WORD *)(v10 + 2 * v13);
    v21 = (__int16 *)(v7 + v19);
    do
    {
      v22 = *v21++;
      *v20++ = v22;
      --v18;
    }
    while (v18);
    goto LABEL_17;
  }
  v13 = v11 & 0xFFFFFFFFFFFFFFF0;
  v14 = (_OWORD *)(v10 + 16);
  v15 = (__int128 *)(v7 + 16);
  v16 = v11 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v17 = *v15;
    *(v14 - 1) = *(v15 - 1);
    *v14 = v17;
    v14 += 2;
    v15 += 2;
    v16 -= 16;
  }
  while (v16);
  if (v11 != v13)
    goto LABEL_15;
LABEL_17:
  if (v10 && v9)
  {
    if (v5[11] > v9)
      v9 = v5[11];
    v5[10] = 0;
    v5[11] = v9;
  }
  return result;
}

float32_t md::imageSampleBilinear<geo::Color<float,4,(geo::ColorSpace)0>>(float32x4_t *a1, uint64_t a2, int a3, int a4, unsigned int a5, float32_t a6, float32x2_t a7)
{
  int32x2_t v11;
  int32x2_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int32x2_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;

  v11 = vadd_s32((int32x2_t)__PAIR64__(a4, a5), (int32x2_t)-1);
  a7.f32[1] = a6;
  v26 = vmul_f32(a7, vcvt_f32_s32(v11));
  v12 = vcvt_s32_f32(vrndm_f32(v26));
  v27 = vmin_s32(vmax_s32(v12, 0), v11);
  v28 = vmin_s32(vadd_s32(vmax_s32(v12, (int32x2_t)-1), (int32x2_t)0x100000001), v11);
  md::imageReadPixel(a2, a3, a4, v27.i32[1], v27.i32[0], v32.f32, *(float *)v28.i32, COERCE_FLOAT(1));
  md::imageReadPixel(a2, a3, a4, v27.i32[1], v28.i32[0], v31.f32, *(float *)v28.i32, v13);
  md::imageReadPixel(a2, a3, a4, v28.i32[1], v27.i32[0], v30.f32, *(float *)v28.i32, v14);
  md::imageReadPixel(a2, a3, a4, v28.i32[1], v28.i32[0], v29.f32, v15, v16);
  v17 = vceq_s32(v27, v28);
  if ((v17.i32[1] & v17.i32[0] & 1) != 0)
  {
    v18.i32[0] = v32.i32[0];
    *a1 = v32;
  }
  else if ((v17.i8[4] & 1) != 0)
  {
    v18 = vmlaq_n_f32(vmulq_n_f32(v31, v26.f32[0] - (float)v27.i32[0]), v32, (float)v28.i32[0] - v26.f32[0]);
    *a1 = v18;
  }
  else if ((v17.i8[0] & 1) != 0)
  {
    v18.f32[0] = v26.f32[1] - (float)v27.i32[1];
    *a1 = vmlaq_n_f32(vmulq_n_f32(v32, (float)v28.i32[1] - v26.f32[1]), v30, v18.f32[0]);
  }
  else
  {
    v19 = v26.f32[1] - (float)v27.i32[1];
    v20 = v26.f32[0] - (float)v27.i32[0];
    v21 = v20 * v19;
    v22 = (float)v28.i32[0] - v26.f32[0];
    v23 = (float)v28.i32[1] - v26.f32[1];
    v24 = v23 * v20;
    v18.f32[0] = v22 * v23;
    *a1 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v29, v21), v30, v22 * v19), v31, v24), v32, v18.f32[0]);
  }
  return v18.f32[0];
}

void md::imageReadPixel(uint64_t a1, int a2, int a3, int a4, int a5, float *a6, float a7, float a8)
{
  unsigned int v8;
  int v10;
  _BYTE *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v10 = 1;
  switch(a2)
  {
    case 0:
    case 22:
    case 23:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      v10 = 0;
      goto LABEL_8;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
    case 42:
    case 43:
      v10 = 2;
      goto LABEL_8;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 26:
      v10 = 4;
      goto LABEL_8;
    case 9:
    case 16:
    case 17:
      v10 = 8;
      goto LABEL_8;
    case 10:
    case 11:
      v10 = 3;
      goto LABEL_8;
    case 18:
    case 21:
      v10 = 16;
      goto LABEL_8;
    case 58:
      return;
    default:
LABEL_8:
      v11 = (_BYTE *)(a1 + v10 * (uint64_t)(a4 + a5 * a3));
      if (a2 == 24)
      {
        v16 = *(unsigned __int16 *)v11;
        v17 = (float)(v16 >> 11);
        v18 = (float)((v16 >> 5) & 0x3F);
        v19 = (float)(v16 & 0x1F);
        if ((float)(v17 * 0.032258) >= 0.04045)
          v15 = powf((float)(v17 * 0.030576) + 0.052133, 2.4);
        else
          v15 = v17 * 0.0024968;
        if ((float)(v18 * 0.015873) >= 0.04045)
          v20 = powf((float)(v18 * 0.015046) + 0.052133, 2.4);
        else
          v20 = v18 * 0.0012286;
        if ((float)(v19 * 0.032258) >= 0.04045)
          v22 = powf((float)(v19 * 0.030576) + 0.052133, 2.4);
        else
          v22 = v19 * 0.0024968;
        v21 = 1.0;
      }
      else
      {
        if (a2 != 12)
          return;
        LOBYTE(a7) = *v11;
        v12 = (float)LODWORD(a7);
        LOBYTE(a8) = v11[1];
        v13 = (float)LODWORD(a8);
        LOBYTE(a8) = v11[2];
        v14 = (float)LODWORD(a8);
        LOBYTE(v8) = v11[3];
        if ((float)(v12 * 0.0039216) >= 0.04045)
          v15 = powf((float)(v12 * 0.0037171) + 0.052133, 2.4);
        else
          v15 = v12 * 0.00030353;
        if ((float)(v13 * 0.0039216) >= 0.04045)
          v20 = powf((float)(v13 * 0.0037171) + 0.052133, 2.4);
        else
          v20 = v13 * 0.00030353;
        v21 = (float)v8 * 0.0039216;
        if ((float)(v14 * 0.0039216) >= 0.04045)
          v22 = powf((float)(v14 * 0.0037171) + 0.052133, 2.4);
        else
          v22 = v14 * 0.00030353;
      }
      *a6 = v15;
      a6[1] = v20;
      a6[2] = v22;
      a6[3] = v21;
      return;
  }
}

void md::FlyoverTileBuilder::computeBounds(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unsigned __int16 *v15;
  int8x8_t v16;
  float32x2_t v17;
  float32x2_t v18;
  unsigned int v19;
  uint64_t v20;
  int8x8_t v21;
  float32x2_t v22;
  char v23;
  char **v24;
  char *v25;

  *(_OWORD *)a1 = xmmword_19FFB3470;
  *(_QWORD *)(a1 + 16) = 0x80000000800000;
  v8 = *(_QWORD *)(a4 + 48) - *(_QWORD *)(a4 + 40);
  v9 = v8 % *(_QWORD *)(a4 + 8);
  if ((*(_BYTE *)(a4 + 16) & 2) == 0)
  {
    v10 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v10 != -1)
    {
      v25 = &v23;
      v24 = &v25;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v8 == v9)
    v11 = 0;
  else
    v11 = *(_QWORD *)(a4 + 72);
  v12 = a2[1];
  v13 = v12 > *a2;
  v14 = v12 - *a2;
  if (v13)
  {
    v15 = (unsigned __int16 *)(*(_QWORD *)(a3 + 128) + 2 * *a2);
    v16 = (int8x8_t)0xFF7FFFFF7F7FFFFFLL;
    v17 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v18 = (float32x2_t)0x80000000800000;
    do
    {
      v19 = *v15++;
      v20 = v11 + 32 * v19;
      v17 = vminnm_f32(*(float32x2_t *)v20, v17);
      v21 = (int8x8_t)vrev64_s32(*(int32x2_t *)v20);
      v22.i32[1] = v16.i32[1];
      v22.i32[0] = *(_DWORD *)(v20 + 8);
      v21.i32[0] = v22.i32[0];
      v16 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v21.u32[1], v16.u32[0]), v22), v21, v16);
      v18 = vmaxnm_f32(v18, *(float32x2_t *)(v20 + 4));
      --v14;
    }
    while (v14);
    *(float32x2_t *)a1 = v17;
    *(int8x8_t *)(a1 + 8) = v16;
    *(float32x2_t *)(a1 + 16) = v18;
  }
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::DaVinciGroundShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  char v183;
  int64x2_t v184;
  int64x2_t v185;
  __int128 v187;
  __int128 v188;
  _BYTE v189[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v183 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v184 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E49D8;
    v187 = *(_OWORD *)(a2 + 16);
    v188 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v179 & 1) == 0
            {
              if ((v182 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1ECE30C98 = 1;
            }
            ggl::DaVinci::GroundPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            if ((v180 & 1) == 0
            {
              ggl::DaVinci::pipelineDataGroundPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              unk_1EE581DD0 = ggl::DaVinci::Normals::reflection(void)::reflection;
              qword_1EE581DD8 = (uint64_t)ggl::DaVinci::UVs::reflection(void)::reflection;
              unk_1EE581DE0 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1EE581A20 = (uint64_t)&ggl::DaVinci::pipelineDataGroundPipelineDeviceStructs(void)::ref;
            *(_QWORD *)algn_1EE581A28 = 4;
            if ((v181 & 1) == 0
            {
              ggl::DaVinci::pipelineDataGroundPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(_QWORD *)algn_1EE581DF8 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE581E00 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1EE581E08 = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
              qword_1EE581E10 = (uint64_t)ggl::DaVinci::PlanarParameters::reflection(void)::reflection;
              unk_1EE581E18 = ggl::DaVinci::Style::reflection(void)::reflection;
              qword_1EE581E20 = (uint64_t)ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
              unk_1EE581E28 = ggl::DaVinci::StyleTransitionToFlat::reflection(void)::reflection;
              qword_1EE581E30 = (uint64_t)ggl::DaVinci::GroundAtmosphere::reflection(void)::reflection;
              unk_1EE581E38 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1EE581E40 = (uint64_t)ggl::DaVinci::StyleCameraLighting::reflection(void)::reflection;
              unk_1EE581E48 = ggl::Tile::Clipping::reflection(void)::reflection;
              qword_1EE581E50 = (uint64_t)ggl::Lighting::LightSpecularConfiguration::reflection(void)::reflection;
              unk_1EE581E58 = ggl::DaVinci::RenderTargetSize::reflection(void)::reflection;
              qword_1EE581E60 = (uint64_t)ggl::DaVinci::LightingDebugOptions::reflection(void)::reflection;
              unk_1EE581E68 = ggl::DaVinci::ColorCorrectionFactor::reflection(void)::reflection;
              qword_1EE581E70 = (uint64_t)ggl::DaVinci::ElevatedStroke::reflection(void)::reflection;
              unk_1EE581E78 = ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
              qword_1EE581E80 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
              unk_1EE581E88 = ggl::DaVinci::StyleEmissiveColor::reflection(void)::reflection;
              qword_1EE581E90 = (uint64_t)ggl::DaVinci::StyleGroundOcclusion::reflection(void)::reflection;
              unk_1EE581E98 = ggl::DaVinci::MaterialStyle::reflection(void)::reflection;
              qword_1EE581EA0 = (uint64_t)ggl::DaVinci::GradientParameters::reflection(void)::reflection;
              unk_1EE581EA8 = ggl::DaVinci::GradientParameters::reflection(void)::reflection;
              qword_1EE581EB0 = (uint64_t)ggl::DaVinci::StyleBlend::reflection(void)::reflection;
              unk_1EE581EB8 = ggl::DaVinci::RasterOverlay::reflection(void)::reflection;
              qword_1EE581EC0 = (uint64_t)ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
              unk_1EE581EC8 = ggl::DaVinci::StyleSSAO::reflection(void)::reflection;
              qword_1EE581ED0 = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
              unk_1EE581ED8 = ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
            }
            qword_1EE581A30 = (uint64_t)&ggl::DaVinci::pipelineDataGroundPipelineConstantStructs(void)::ref;
            unk_1EE581A38 = xmmword_19FFB5B40;
          }
        }
        ggl::DaVinci::GroundPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciGroundShader::typedReflection(v174);
        qword_1EE581A58 = (uint64_t)&ggl::DaVinciGroundShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE5825E8 = 0;
          qword_1EE5825F0 = (uint64_t)"";
          dword_1EE5825F8 = 0;
          qword_1EE582600 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineAttributeBinding_0(void)::attr;
          unk_1EE582608 = 2;
        }
        qword_1EE581A60 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE581A68 = 1;
        qword_1EE581A70 = 0;
        unk_1EE581A78 = 13;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundPipelineDeviceStructBinding(void)::ref = 0;
          unk_1EE581F70 = 0;
          qword_1EE581F78 = (uint64_t)"instanceTransform";
          dword_1EE581F80 = 2;
          qword_1EE581F88 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceInstanceTransformBinding(void)::reflection;
          *(_OWORD *)algn_1EE581F90 = xmmword_19FFB2E40;
          qword_1EE581FA0 = 1;
          unk_1EE581FA8 = "normals";
          dword_1EE581FB0 = 2;
          qword_1EE581FB8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceNormalsBinding(void)::reflection;
          unk_1EE581FC0 = xmmword_19FFB4830;
          qword_1EE581FD0 = 2;
          unk_1EE581FD8 = "uvs";
          dword_1EE581FE0 = 2;
          qword_1EE581FE8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceUvsBinding(void)::reflection;
          *(_OWORD *)algn_1EE581FF0 = xmmword_19FFB5B50;
          qword_1EE582000 = 3;
          unk_1EE582008 = "elevations";
          dword_1EE582010 = 2;
          qword_1EE582018 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceElevationsBinding(void)::reflection;
          unk_1EE582020 = 0;
        }
        qword_1EE581A80 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineDeviceStructBinding(void)::ref;
        *(_QWORD *)algn_1EE581A88 = 4;
        if ((v178 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE582048 = 0;
          qword_1EE582050 = (uint64_t)"view";
          dword_1EE582058 = 3;
          qword_1EE582060 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantViewBinding(void)::reflection;
          unk_1EE582068 = xmmword_19FFB35A0;
          qword_1EE582078 = 1;
          unk_1EE582080 = "transform";
          dword_1EE582088 = 3;
          qword_1EE582090 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantTransformBinding(void)::reflection;
          unk_1EE582098 = xmmword_19FFB3660;
          qword_1EE5820A8 = 2;
          unk_1EE5820B0 = "shadow";
          dword_1EE5820B8 = 3;
          qword_1EE5820C0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantShadowBinding(void)::reflection;
          unk_1EE5820C8 = xmmword_19FFB3040;
          qword_1EE5820D8 = 3;
          unk_1EE5820E0 = "lightConfigAmbient";
          dword_1EE5820E8 = 3;
          qword_1EE5820F0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLightConfigAmbientBinding(void)::reflection;
          unk_1EE5820F8 = xmmword_19FFB3CD0;
          qword_1EE582108 = 4;
          unk_1EE582110 = "planarParameters";
          dword_1EE582118 = 3;
          qword_1EE582120 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantPlanarParametersBinding(void)::reflection;
          unk_1EE582128 = xmmword_19FFB3670;
          qword_1EE582138 = 5;
          unk_1EE582140 = "style";
          dword_1EE582148 = 3;
          qword_1EE582150 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleBinding(void)::reflection;
          xmmword_1EE582158 = xmmword_19FFB5B60;
          qword_1EE582168 = 6;
          unk_1EE582170 = "sunMatrix";
          dword_1EE582178 = 3;
          qword_1EE582180 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantSunMatrixBinding(void)::reflection;
          xmmword_1EE582188 = xmmword_19FFB4840;
          qword_1EE582198 = 7;
          unk_1EE5821A0 = "transition";
          dword_1EE5821A8 = 3;
          qword_1EE5821B0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantTransitionBinding(void)::reflection;
          xmmword_1EE5821B8 = xmmword_19FFB5B70;
          qword_1EE5821C8 = 8;
          unk_1EE5821D0 = "atmosphereParameters";
          dword_1EE5821D8 = 3;
          qword_1EE5821E0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantAtmosphereParametersBinding(void)::reflection;
          xmmword_1EE5821E8 = xmmword_19FFB5B80;
          qword_1EE5821F8 = 9;
          unk_1EE582200 = "positionScaleInfo";
          dword_1EE582208 = 3;
          qword_1EE582210 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantPositionScaleInfoBinding(void)::reflection;
          xmmword_1EE582218 = xmmword_19FFB5B90;
          qword_1EE582228 = 10;
          unk_1EE582230 = "cameraLightingStyle";
          dword_1EE582238 = 3;
          qword_1EE582240 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantCameraLightingStyleBinding(void)::reflection;
          xmmword_1EE582248 = xmmword_19FFB5BA0;
          qword_1EE582258 = 11;
          qword_1EE582260 = (uint64_t)"tileClipping";
          dword_1EE582268 = 3;
          qword_1EE582270 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantTileClippingBinding(void)::reflection;
          xmmword_1EE582278 = xmmword_19FFB5BB0;
          qword_1EE582288 = 12;
          qword_1EE582290 = (uint64_t)"lightConfig";
          dword_1EE582298 = 3;
          qword_1EE5822A0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLightConfigBinding(void)::reflection;
          xmmword_1EE5822A8 = xmmword_19FFB5BC0;
          qword_1EE5822B8 = 13;
          qword_1EE5822C0 = (uint64_t)"rtSize";
          dword_1EE5822C8 = 3;
          qword_1EE5822D0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantRtSizeBinding(void)::reflection;
          xmmword_1EE5822D8 = xmmword_19FFB5BD0;
          qword_1EE5822E8 = 14;
          qword_1EE5822F0 = (uint64_t)"lightingDebugOptions";
          dword_1EE5822F8 = 3;
          qword_1EE582300 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLightingDebugOptionsBinding(void)::reflection;
          xmmword_1EE582308 = xmmword_19FFB5BE0;
          qword_1EE582318 = 15;
          qword_1EE582320 = (uint64_t)"colorFactors";
          dword_1EE582328 = 3;
          qword_1EE582330 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantColorFactorsBinding(void)::reflection;
          xmmword_1EE582338 = xmmword_19FFB5BF0;
          qword_1EE582348 = 16;
          qword_1EE582350 = (uint64_t)"elevatedStroke";
          dword_1EE582358 = 3;
          qword_1EE582360 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantElevatedStrokeBinding(void)::reflection;
          xmmword_1EE582368 = xmmword_19FFB5C00;
          qword_1EE582378 = 17;
          qword_1EE582380 = (uint64_t)"landCoverSettings";
          dword_1EE582388 = 3;
          qword_1EE582390 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantLandCoverSettingsBinding(void)::reflection;
          xmmword_1EE582398 = xmmword_19FFB5C10;
          qword_1EE5823A8 = 18;
          qword_1EE5823B0 = (uint64_t)"shadowStyle";
          dword_1EE5823B8 = 3;
          qword_1EE5823C0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantShadowStyleBinding(void)::reflection;
          xmmword_1EE5823C8 = xmmword_19FFB5C20;
          qword_1EE5823D8 = 19;
          qword_1EE5823E0 = (uint64_t)"emissiveStyle";
          dword_1EE5823E8 = 3;
          qword_1EE5823F0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantEmissiveStyleBinding(void)::reflection;
          xmmword_1EE5823F8 = xmmword_19FFB5C30;
          qword_1EE582408 = 20;
          qword_1EE582410 = (uint64_t)"groundOcclusionStyle";
          dword_1EE582418 = 3;
          qword_1EE582420 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantGroundOcclusionStyleBinding(void)::reflection;
          xmmword_1EE582428 = xmmword_19FFB5C40;
          qword_1EE582438 = 21;
          qword_1EE582440 = (uint64_t)"materialStyle";
          dword_1EE582448 = 3;
          qword_1EE582450 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantMaterialStyleBinding(void)::reflection;
          xmmword_1EE582458 = xmmword_19FFB5C50;
          qword_1EE582468 = 22;
          qword_1EE582470 = (uint64_t)"gradient1Parameters";
          dword_1EE582478 = 3;
          qword_1EE582480 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantGradient1ParametersBinding(void)::reflection;
          xmmword_1EE582488 = xmmword_19FFB5C60;
          qword_1EE582498 = 23;
          qword_1EE5824A0 = (uint64_t)"gradient2Parameters";
          dword_1EE5824A8 = 3;
          qword_1EE5824B0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantGradient2ParametersBinding(void)::reflection;
          xmmword_1EE5824B8 = xmmword_19FFB5C70;
          qword_1EE5824C8 = 24;
          qword_1EE5824D0 = (uint64_t)"styleBlend";
          dword_1EE5824D8 = 3;
          qword_1EE5824E0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleBlendBinding(void)::reflection;
          xmmword_1EE5824E8 = xmmword_19FFB5C80;
          qword_1EE5824F8 = 25;
          qword_1EE582500 = (uint64_t)"rasterOverlay";
          dword_1EE582508 = 3;
          qword_1EE582510 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantRasterOverlayBinding(void)::reflection;
          xmmword_1EE582518 = xmmword_19FFB5C90;
          qword_1EE582528 = 26;
          qword_1EE582530 = (uint64_t)"srgbBlendStyle";
          dword_1EE582538 = 3;
          qword_1EE582540 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantSrgbBlendStyleBinding(void)::reflection;
          xmmword_1EE582548 = xmmword_19FFB5CA0;
          qword_1EE582558 = 27;
          qword_1EE582560 = (uint64_t)"styleSSAO";
          dword_1EE582568 = 3;
          qword_1EE582570 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleSSAOBinding(void)::reflection;
          xmmword_1EE582578 = xmmword_19FFB5CB0;
          qword_1EE582588 = 28;
          qword_1EE582590 = (uint64_t)"styleColor";
          dword_1EE582598 = 3;
          qword_1EE5825A0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStyleColorBinding(void)::reflection;
          xmmword_1EE5825A8 = xmmword_19FFB5CC0;
          qword_1EE5825B8 = 29;
          qword_1EE5825C0 = (uint64_t)"routeLineMaskStyle";
          dword_1EE5825C8 = 3;
          qword_1EE5825D0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
          qword_1EE5825D8 = 1;
        }
        qword_1EE581A90 = (uint64_t)&ggl::DaVinci::pipelineStateGroundPipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1EE581A98 = 30;
      }
    }
    v81 = v184;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v189 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v189[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v187;
    *(_OWORD *)&v78[12].__shared_owners_ = v188;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v189[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v189;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v185 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v185;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v183;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC510;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC13DC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  char v185;
  int64x2_t v186;
  int64x2_t v187;
  __int128 v189;
  __int128 v190;
  _BYTE v191[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v185 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v186 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4CE8;
    v189 = *(_OWORD *)(a2 + 16);
    v190 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0
    {
      if ((v174 & 1) == 0
      {
        if ((v179 & 1) == 0
        {
          if ((v184 & 1) == 0
          {
            ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::packedPositionVboReflection;
          }
          ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r;
          *(_QWORD *)algn_1ECE30C70 = 1;
        }
        ggl::DaVinci::GroundNonCompressedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r;
        if ((v180 & 1) == 0
        {
          ggl::DaVinci::pipelineDataGroundNonCompressedPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
          *(_QWORD *)algn_1EE582728 = ggl::DaVinci::Normals::reflection(void)::reflection;
          qword_1EE582730 = (uint64_t)ggl::DaVinci::UVs::reflection(void)::reflection;
          unk_1EE582738 = ggl::DaVinci::Elevations::reflection(void)::reflection;
        }
        qword_1EE581CA0 = (uint64_t)&ggl::DaVinci::pipelineDataGroundNonCompressedPipelineDeviceStructs(void)::ref;
        *(_QWORD *)algn_1EE581CA8 = 4;
        if ((v181 & 1) == 0
        {
          ggl::DaVinci::pipelineDataGroundNonCompressedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1EE582940 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EE582948 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
          unk_1EE582950 = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
          qword_1EE582958 = (uint64_t)ggl::DaVinci::PlanarParameters::reflection(void)::reflection;
          unk_1EE582960 = ggl::DaVinci::Style::reflection(void)::reflection;
          qword_1EE582968 = (uint64_t)ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
          unk_1EE582970 = ggl::DaVinci::StyleTransitionToFlat::reflection(void)::reflection;
          qword_1EE582978 = (uint64_t)ggl::DaVinci::GroundAtmosphere::reflection(void)::reflection;
          unk_1EE582980 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
          qword_1EE582988 = (uint64_t)ggl::DaVinci::StyleCameraLighting::reflection(void)::reflection;
          unk_1EE582990 = ggl::Tile::Clipping::reflection(void)::reflection;
          qword_1EE582998 = (uint64_t)ggl::Lighting::LightSpecularConfiguration::reflection(void)::reflection;
          unk_1EE5829A0 = ggl::DaVinci::RenderTargetSize::reflection(void)::reflection;
          qword_1EE5829A8 = (uint64_t)ggl::DaVinci::LightingDebugOptions::reflection(void)::reflection;
          unk_1EE5829B0 = ggl::DaVinci::ColorCorrectionFactor::reflection(void)::reflection;
          qword_1EE5829B8 = (uint64_t)ggl::DaVinci::ElevatedStroke::reflection(void)::reflection;
          unk_1EE5829C0 = ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
          qword_1EE5829C8 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
          unk_1EE5829D0 = ggl::DaVinci::StyleEmissiveColor::reflection(void)::reflection;
          qword_1EE5829D8 = (uint64_t)ggl::DaVinci::StyleGroundOcclusion::reflection(void)::reflection;
          unk_1EE5829E0 = ggl::DaVinci::MaterialStyle::reflection(void)::reflection;
          qword_1EE5829E8 = (uint64_t)ggl::DaVinci::GradientParameters::reflection(void)::reflection;
          unk_1EE5829F0 = ggl::DaVinci::GradientParameters::reflection(void)::reflection;
          qword_1EE5829F8 = (uint64_t)ggl::DaVinci::StyleBlend::reflection(void)::reflection;
          unk_1EE582A00 = ggl::DaVinci::RasterOverlay::reflection(void)::reflection;
          qword_1EE582A08 = (uint64_t)ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
          unk_1EE582A10 = ggl::DaVinci::StyleSSAO::reflection(void)::reflection;
          qword_1EE582A18 = (uint64_t)ggl::DaVinci::StyleColor::reflection(void)::reflection;
          unk_1EE582A20 = ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
        }
        qword_1EE581CB0 = (uint64_t)&ggl::DaVinci::pipelineDataGroundNonCompressedPipelineConstantStructs(void)::ref;
        unk_1EE581CB8 = xmmword_19FFB5B40;
      }
      ggl::DaVinci::GroundNonCompressedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundNonCompressedPipelineSetup::typedReflection(void)::ref;
      if ((v175 & 1) == 0
      {
        ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundNotCompressedShader";
        if ((v182 & 1) == 0
        {
          ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref = 2461507574;
          qword_1ECE334A8 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1ECE334B0 = ggl::daVinciGroundNotCompressedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE334B8 = 5;
          unk_1ECE334C0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE334C8 = 12;
          unk_1ECE334D0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE334D8 = 4;
          unk_1ECE334E0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionTextureMapping(void)::ref;
          qword_1ECE334E8 = 1;
          unk_1ECE334F0 = &ggl::daVinciGroundNotCompressedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33500 = 0;
          unk_1ECE33508 = 0;
          qword_1ECE334F8 = 1;
        }
        qword_1ECE32B10 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE32B18 = -1833459722;
        if ((v183 & 1) == 0
        {
          ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref = 0x16213AD6ALL;
          qword_1ECE33520 = (uint64_t)"DaVinciGroundNotCompressedShader";
          unk_1ECE33528 = 0;
          qword_1ECE33530 = 0;
          unk_1ECE33538 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33540 = 21;
          unk_1ECE33548 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE33550 = 0;
          unk_1ECE33558 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33560 = 12;
          unk_1ECE33568 = &ggl::daVinciGroundNotCompressedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33578 = 0;
          unk_1ECE33580 = 0;
          qword_1ECE33570 = 12;
        }
        qword_1ECE32B20 = (uint64_t)&ggl::daVinciGroundNotCompressedShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE32B28 = 1645456746;
        qword_1ECE32B30 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderConstants(void)::ref;
        unk_1ECE32B38 = 30;
        qword_1ECE32B40 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderTextures(void)::ref;
        unk_1ECE32B48 = 13;
        qword_1ECE32B50 = (uint64_t)ggl::daVinciGroundNotCompressedShaderShaderSamplers(void)::ref;
        unk_1ECE32B58 = 13;
      }
      qword_1EE581CD8 = (uint64_t)&ggl::DaVinciGroundNotCompressedShader::typedReflection(void)::ref;
      if ((v176 & 1) == 0
      {
        ggl::DaVinci::pipelineStateGroundNonCompressedPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE582DE0 = 0;
        qword_1EE582DE8 = (uint64_t)"";
        dword_1EE582DF0 = 0;
        qword_1EE582DF8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineAttributeBinding_0(void)::attr;
        unk_1EE582E00 = 1;
      }
      qword_1EE581CE0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE581CE8 = 1;
      qword_1EE581CF0 = 0;
      unk_1EE581CF8 = 13;
      if ((v177 & 1) == 0
      {
        ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE582D18 = 0;
        qword_1EE582D20 = (uint64_t)"instanceTransform";
        dword_1EE582D28 = 2;
        qword_1EE582D30 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceInstanceTransformBinding(void)::reflection;
        unk_1EE582D38 = xmmword_19FFB2E40;
        qword_1EE582D48 = 1;
        unk_1EE582D50 = "normals";
        dword_1EE582D58 = 2;
        qword_1EE582D60 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceNormalsBinding(void)::reflection;
        unk_1EE582D68 = xmmword_19FFB4830;
        qword_1EE582D78 = 2;
        unk_1EE582D80 = "uvs";
        dword_1EE582D88 = 2;
        qword_1EE582D90 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceUvsBinding(void)::reflection;
        unk_1EE582D98 = xmmword_19FFB5B50;
        qword_1EE582DA8 = 3;
        unk_1EE582DB0 = "elevations";
        dword_1EE582DB8 = 2;
        qword_1EE582DC0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceElevationsBinding(void)::reflection;
        unk_1EE582DC8 = 0;
      }
      qword_1EE581D00 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineDeviceStructBinding(void)::ref;
      *(_QWORD *)algn_1EE581D08 = 4;
      if ((v178 & 1) == 0
      {
        ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStructBinding(void)::ref = 0;
        unk_1ECE336E0 = 0;
        qword_1ECE336E8 = (uint64_t)"view";
        dword_1ECE336F0 = 3;
        qword_1ECE336F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantViewBinding(void)::reflection;
        unk_1ECE33700 = xmmword_19FFB35A0;
        qword_1ECE33710 = 1;
        unk_1ECE33718 = "transform";
        dword_1ECE33720 = 3;
        qword_1ECE33728 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1ECE33730 = xmmword_19FFB3660;
        qword_1ECE33740 = 2;
        unk_1ECE33748 = "shadow";
        dword_1ECE33750 = 3;
        qword_1ECE33758 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantShadowBinding(void)::reflection;
        unk_1ECE33760 = xmmword_19FFB3040;
        qword_1ECE33770 = 3;
        unk_1ECE33778 = "lightConfigAmbient";
        dword_1ECE33780 = 3;
        qword_1ECE33788 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLightConfigAmbientBinding(void)::reflection;
        *(_OWORD *)algn_1ECE33790 = xmmword_19FFB3CD0;
        qword_1ECE337A0 = 4;
        unk_1ECE337A8 = "planarParameters";
        dword_1ECE337B0 = 3;
        qword_1ECE337B8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantPlanarParametersBinding(void)::reflection;
        unk_1ECE337C0 = xmmword_19FFB3670;
        qword_1ECE337D0 = 5;
        unk_1ECE337D8 = "style";
        dword_1ECE337E0 = 3;
        qword_1ECE337E8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleBinding(void)::reflection;
        xmmword_1ECE337F0 = xmmword_19FFB5B60;
        qword_1ECE33800 = 6;
        unk_1ECE33808 = "sunMatrix";
        dword_1ECE33810 = 3;
        qword_1ECE33818 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantSunMatrixBinding(void)::reflection;
        xmmword_1ECE33820 = xmmword_19FFB4840;
        qword_1ECE33830 = 7;
        unk_1ECE33838 = "transition";
        dword_1ECE33840 = 3;
        qword_1ECE33848 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantTransitionBinding(void)::reflection;
        xmmword_1ECE33850 = xmmword_19FFB5B70;
        qword_1ECE33860 = 8;
        unk_1ECE33868 = "atmosphereParameters";
        dword_1ECE33870 = 3;
        qword_1ECE33878 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantAtmosphereParametersBinding(void)::reflection;
        xmmword_1ECE33880 = xmmword_19FFB5B80;
        qword_1ECE33890 = 9;
        unk_1ECE33898 = "positionScaleInfo";
        dword_1ECE338A0 = 3;
        qword_1ECE338A8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantPositionScaleInfoBinding(void)::reflection;
        xmmword_1ECE338B0 = xmmword_19FFB5B90;
        qword_1ECE338C0 = 10;
        unk_1ECE338C8 = "cameraLightingStyle";
        dword_1ECE338D0 = 3;
        qword_1ECE338D8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantCameraLightingStyleBinding(void)::reflection;
        xmmword_1ECE338E0 = xmmword_19FFB5BA0;
        qword_1ECE338F0 = 11;
        qword_1ECE338F8 = (uint64_t)"tileClipping";
        dword_1ECE33900 = 3;
        qword_1ECE33908 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantTileClippingBinding(void)::reflection;
        xmmword_1ECE33910 = xmmword_19FFB5BB0;
        qword_1ECE33920 = 12;
        qword_1ECE33928 = (uint64_t)"lightConfig";
        dword_1ECE33930 = 3;
        qword_1ECE33938 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1ECE33940 = xmmword_19FFB5BC0;
        qword_1ECE33950 = 13;
        qword_1ECE33958 = (uint64_t)"rtSize";
        dword_1ECE33960 = 3;
        qword_1ECE33968 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantRtSizeBinding(void)::reflection;
        xmmword_1ECE33970 = xmmword_19FFB5BD0;
        qword_1ECE33980 = 14;
        qword_1ECE33988 = (uint64_t)"lightingDebugOptions";
        dword_1ECE33990 = 3;
        qword_1ECE33998 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLightingDebugOptionsBinding(void)::reflection;
        xmmword_1ECE339A0 = xmmword_19FFB5BE0;
        qword_1ECE339B0 = 15;
        qword_1ECE339B8 = (uint64_t)"colorFactors";
        dword_1ECE339C0 = 3;
        qword_1ECE339C8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantColorFactorsBinding(void)::reflection;
        xmmword_1ECE339D0 = xmmword_19FFB5BF0;
        qword_1ECE339E0 = 16;
        qword_1ECE339E8 = (uint64_t)"elevatedStroke";
        dword_1ECE339F0 = 3;
        qword_1ECE339F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantElevatedStrokeBinding(void)::reflection;
        xmmword_1ECE33A00 = xmmword_19FFB5C00;
        qword_1ECE33A10 = 17;
        qword_1ECE33A18 = (uint64_t)"landCoverSettings";
        dword_1ECE33A20 = 3;
        qword_1ECE33A28 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantLandCoverSettingsBinding(void)::reflection;
        xmmword_1ECE33A30 = xmmword_19FFB5C10;
        qword_1ECE33A40 = 18;
        qword_1ECE33A48 = (uint64_t)"shadowStyle";
        dword_1ECE33A50 = 3;
        qword_1ECE33A58 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantShadowStyleBinding(void)::reflection;
        xmmword_1ECE33A60 = xmmword_19FFB5C20;
        qword_1ECE33A70 = 19;
        qword_1ECE33A78 = (uint64_t)"emissiveStyle";
        dword_1ECE33A80 = 3;
        qword_1ECE33A88 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantEmissiveStyleBinding(void)::reflection;
        xmmword_1ECE33A90 = xmmword_19FFB5C30;
        qword_1ECE33AA0 = 20;
        qword_1ECE33AA8 = (uint64_t)"groundOcclusionStyle";
        dword_1ECE33AB0 = 3;
        qword_1ECE33AB8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantGroundOcclusionStyleBinding(void)::reflection;
        xmmword_1ECE33AC0 = xmmword_19FFB5C40;
        qword_1ECE33AD0 = 21;
        qword_1ECE33AD8 = (uint64_t)"materialStyle";
        dword_1ECE33AE0 = 3;
        qword_1ECE33AE8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantMaterialStyleBinding(void)::reflection;
        xmmword_1ECE33AF0 = xmmword_19FFB5C50;
        qword_1ECE33B00 = 22;
        qword_1ECE33B08 = (uint64_t)"gradient1Parameters";
        dword_1ECE33B10 = 3;
        qword_1ECE33B18 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantGradient1ParametersBinding(void)::reflection;
        xmmword_1ECE33B20 = xmmword_19FFB5C60;
        qword_1ECE33B30 = 23;
        qword_1ECE33B38 = (uint64_t)"gradient2Parameters";
        dword_1ECE33B40 = 3;
        qword_1ECE33B48 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantGradient2ParametersBinding(void)::reflection;
        xmmword_1ECE33B50 = xmmword_19FFB5C70;
        qword_1ECE33B60 = 24;
        qword_1ECE33B68 = (uint64_t)"styleBlend";
        dword_1ECE33B70 = 3;
        qword_1ECE33B78 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleBlendBinding(void)::reflection;
        xmmword_1ECE33B80 = xmmword_19FFB5C80;
        qword_1ECE33B90 = 25;
        qword_1ECE33B98 = (uint64_t)"rasterOverlay";
        dword_1ECE33BA0 = 3;
        qword_1ECE33BA8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantRasterOverlayBinding(void)::reflection;
        xmmword_1ECE33BB0 = xmmword_19FFB5C90;
        qword_1ECE33BC0 = 26;
        qword_1ECE33BC8 = (uint64_t)"srgbBlendStyle";
        dword_1ECE33BD0 = 3;
        qword_1ECE33BD8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantSrgbBlendStyleBinding(void)::reflection;
        xmmword_1ECE33BE0 = xmmword_19FFB5CA0;
        qword_1ECE33BF0 = 27;
        qword_1ECE33BF8 = (uint64_t)"styleSSAO";
        dword_1ECE33C00 = 3;
        qword_1ECE33C08 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleSSAOBinding(void)::reflection;
        xmmword_1ECE33C10 = xmmword_19FFB5CB0;
        qword_1ECE33C20 = 28;
        qword_1ECE33C28 = (uint64_t)"styleColor";
        dword_1ECE33C30 = 3;
        qword_1ECE33C38 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStyleColorBinding(void)::reflection;
        xmmword_1ECE33C40 = xmmword_19FFB5CC0;
        qword_1ECE33C50 = 29;
        qword_1ECE33C58 = (uint64_t)"routeLineMaskStyle";
        dword_1ECE33C60 = 3;
        qword_1ECE33C68 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
        qword_1ECE33C70 = 1;
      }
      qword_1EE581D10 = (uint64_t)&ggl::DaVinci::pipelineStateGroundNonCompressedPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE581D18 = 30;
    }
    v81 = v186;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v191 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v191[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundNonCompressedPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v189;
    *(_OWORD *)&v78[12].__shared_owners_ = v190;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v191[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v191;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v187 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v187;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v185;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC920;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC154E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::DaVinciGroundDepthShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  char v183;
  int64x2_t v184;
  int64x2_t v185;
  __int128 v187;
  __int128 v188;
  _BYTE v189[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v183 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v184 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AF0;
    v187 = *(_OWORD *)(a2 + 16);
    v188 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v179 & 1) == 0
            {
              if ((v182 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1ECE30C98 = 1;
            }
            ggl::DaVinci::GroundDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            if ((v180 & 1) == 0
            {
              ggl::DaVinci::pipelineDataGroundDepthPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              unk_1EE581EE8 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1EE581AA8 = (uint64_t)&ggl::DaVinci::pipelineDataGroundDepthPipelineDeviceStructs(void)::ref;
            unk_1EE581AB0 = 2;
            if ((v181 & 1) == 0
            {
              ggl::DaVinci::pipelineDataGroundDepthPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE581F10 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE581F18 = (uint64_t)ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              unk_1EE581F20 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1EE581AB8 = (uint64_t)&ggl::DaVinci::pipelineDataGroundDepthPipelineConstantStructs(void)::ref;
            unk_1EE581AC0 = xmmword_19FFB3690;
          }
        }
        ggl::DaVinci::GroundDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::GroundDepthPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciGroundDepthShader::typedReflection(v174);
        qword_1EE581AE0 = (uint64_t)&ggl::DaVinciGroundDepthShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundDepthPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE582A30 = 0;
          qword_1EE582A38 = (uint64_t)"";
          dword_1EE582A40 = 0;
          qword_1EE582A48 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineAttributeBinding_0(void)::attr;
          unk_1EE582A50 = 2;
        }
        qword_1EE581AE8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineAttributeStructBinding(void)::attr;
        unk_1EE581AF0 = 1;
        qword_1EE581AF8 = 0;
        unk_1EE581B00 = 0;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE582658 = 0;
          qword_1EE582660 = (uint64_t)"instanceTransform";
          dword_1EE582668 = 2;
          qword_1EE582670 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1EE582678 = xmmword_19FFB2E40;
          qword_1EE582688 = 1;
          unk_1EE582690 = "elevations";
          dword_1EE582698 = 2;
          qword_1EE5826A0 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceElevationsBinding(void)::reflection;
          unk_1EE5826A8 = 0;
        }
        qword_1EE581B08 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineDeviceStructBinding(void)::ref;
        unk_1EE581B10 = 2;
        if ((v178 & 1) == 0
        {
          ggl::DaVinci::pipelineStateGroundDepthPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE582750 = 0;
          qword_1EE582758 = (uint64_t)"view";
          dword_1EE582760 = 3;
          qword_1EE582768 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1EE582770 = xmmword_19FFB35A0;
          qword_1EE582780 = 1;
          unk_1EE582788 = "transform";
          dword_1EE582790 = 3;
          qword_1EE582798 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantTransformBinding(void)::reflection;
          unk_1EE5827A0 = xmmword_19FFB3660;
          qword_1EE5827B0 = 2;
          unk_1EE5827B8 = "positionScaleInfo";
          dword_1EE5827C0 = 3;
          qword_1EE5827C8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantPositionScaleInfoBinding(void)::reflection;
          *(_OWORD *)algn_1EE5827D0 = xmmword_19FFB3040;
          qword_1EE5827E0 = 3;
          unk_1EE5827E8 = "tileClipping";
          dword_1EE5827F0 = 3;
          qword_1EE5827F8 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantTileClippingBinding(void)::reflection;
          unk_1EE582800 = 2;
        }
        qword_1EE581B18 = (uint64_t)&ggl::DaVinci::pipelineStateGroundDepthPipelineConstantStructBinding(void)::ref;
        unk_1EE581B20 = 4;
      }
    }
    v81 = v184;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v189 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v189[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::GroundDepthPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v187;
    *(_OWORD *)&v78[12].__shared_owners_ = v188;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v189[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v189;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v185 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v185;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v183;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC670;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC163B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::LinearDepthShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  char v183;
  int64x2_t v184;
  int64x2_t v185;
  __int128 v187;
  __int128 v188;
  _BYTE v189[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v183 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v184 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B28;
    v187 = *(_OWORD *)(a2 + 16);
    v188 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v179 & 1) == 0
            {
              if ((v182 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1ECE30C98 = 1;
            }
            ggl::DaVinci::LinearDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            if ((v180 & 1) == 0
            {
              ggl::DaVinci::pipelineDataLinearDepthPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              unk_1EE581F00 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1EE581B38 = (uint64_t)&ggl::DaVinci::pipelineDataLinearDepthPipelineDeviceStructs(void)::ref;
            unk_1EE581B40 = 2;
            if ((v181 & 1) == 0
            {
              ggl::DaVinci::pipelineDataLinearDepthPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(_QWORD *)algn_1EE581F38 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE581F40 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1EE581F48 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1EE581F50 = (uint64_t)ggl::Tile::LinearDepth::reflection(void)::reflection;
              unk_1EE581F58 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1EE581B48 = (uint64_t)&ggl::DaVinci::pipelineDataLinearDepthPipelineConstantStructs(void)::ref;
            unk_1EE581B50 = xmmword_19FFB48B0;
          }
        }
        ggl::DaVinci::LinearDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::LinearDepthPipelineSetup::typedReflection(void)::ref;
        ggl::LinearDepthShader::typedReflection(v174);
        qword_1EE581B70 = (uint64_t)&ggl::LinearDepthShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStateLinearDepthPipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE582A68 = 0;
          qword_1EE582A70 = (uint64_t)"";
          dword_1EE582A78 = 0;
          qword_1EE582A80 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineAttributeBinding_0(void)::attr;
          unk_1EE582A88 = 2;
        }
        qword_1EE581B78 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineAttributeStructBinding(void)::attr;
        unk_1EE581B80 = 1;
        qword_1EE581B88 = 0;
        unk_1EE581B90 = 0;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceStructBinding(void)::ref = 0;
          unk_1EE5826C0 = 0;
          qword_1EE5826C8 = (uint64_t)"instanceTransform";
          dword_1EE5826D0 = 2;
          qword_1EE5826D8 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1EE5826E0 = xmmword_19FFB2E40;
          qword_1EE5826F0 = 1;
          unk_1EE5826F8 = "elevations";
          dword_1EE582700 = 2;
          qword_1EE582708 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceElevationsBinding(void)::reflection;
          unk_1EE582710 = 0;
        }
        qword_1EE581B98 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineDeviceStructBinding(void)::ref;
        unk_1EE581BA0 = 2;
        if ((v178 & 1) == 0
        {
          ggl::DaVinci::pipelineStateLinearDepthPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE582818 = 0;
          qword_1EE582820 = (uint64_t)"view";
          dword_1EE582828 = 3;
          qword_1EE582830 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantViewBinding(void)::reflection;
          unk_1EE582838 = xmmword_19FFB35A0;
          qword_1EE582848 = 1;
          unk_1EE582850 = "transform";
          dword_1EE582858 = 3;
          qword_1EE582860 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantTransformBinding(void)::reflection;
          unk_1EE582868 = xmmword_19FFB3660;
          qword_1EE582878 = 2;
          unk_1EE582880 = "shadow";
          dword_1EE582888 = 3;
          qword_1EE582890 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantShadowBinding(void)::reflection;
          unk_1EE582898 = xmmword_19FFB3040;
          qword_1EE5828A8 = 3;
          unk_1EE5828B0 = "positionScaleInfo";
          dword_1EE5828B8 = 3;
          qword_1EE5828C0 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantPositionScaleInfoBinding(void)::reflection;
          unk_1EE5828C8 = xmmword_19FFB3050;
          qword_1EE5828D8 = 4;
          unk_1EE5828E0 = "linearDepth";
          dword_1EE5828E8 = 3;
          qword_1EE5828F0 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantLinearDepthBinding(void)::reflection;
          unk_1EE5828F8 = xmmword_19FFB4860;
          qword_1EE582908 = 5;
          unk_1EE582910 = "tileClipping";
          dword_1EE582918 = 3;
          qword_1EE582920 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantTileClippingBinding(void)::reflection;
          unk_1EE582928 = 2;
        }
        qword_1EE581BA8 = (uint64_t)&ggl::DaVinci::pipelineStateLinearDepthPipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1EE581BB0 = 6;
      }
    }
    v81 = v184;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v189 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v189[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::LinearDepthPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v187;
    *(_OWORD *)&v78[12].__shared_owners_ = v188;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v189[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v189;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v185 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v185;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v183;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC6C0;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC172F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::DaVinciRenderStateCache::~DaVinciRenderStateCache(md::DaVinciRenderStateCache *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  malloc_zone_t *zone;
  void (***v6)(_QWORD, uint64_t);
  unsigned __int8 v7;
  uint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(_QWORD *)this;
    if (v3 != v2)
    {
      do
      {
        v6 = *(void (****)(_QWORD, uint64_t))(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v6)
        {
          (**v6)(v6, v4);
          {
            v11 = v2;
            v8 = operator new();
            *(_QWORD *)(v8 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v8 + 24) = "VectorKitLabels";
            *(_OWORD *)(v8 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v8 = &off_1E42B5668;
            *(_QWORD *)(v8 + 8) = "VectorKitLabels";
            *(_OWORD *)(v8 + 72) = 0u;
            *(_OWORD *)(v8 + 88) = 0u;
            *(_OWORD *)(v8 + 104) = 0u;
            *(_OWORD *)(v8 + 120) = 0u;
            *(_OWORD *)(v8 + 136) = 0u;
            *(_OWORD *)(v8 + 152) = 0u;
            *(_OWORD *)(v8 + 168) = 0u;
            *(_OWORD *)(v8 + 184) = 0u;
            *(_OWORD *)(v8 + 200) = 0u;
            *(_OWORD *)(v8 + 216) = 0u;
            *(_OWORD *)(v8 + 232) = 0u;
            *(_QWORD *)(v8 + 248) = 0;
            *(_OWORD *)(v8 + 56) = 0u;
            v9 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v8 + 56), 0);
            if ((_DWORD)v9)
              geo::read_write_lock::logFailure(v9, (uint64_t)"initialization", v10);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v8 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v8 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v8;
            v2 = v11;
          }
          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v6, 216);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(_QWORD *)this;
    }
    *((_QWORD *)this + 1) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v4, *((_QWORD *)this + 2) - v4);
  }
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E27B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DownscaleTextureComputeShaderState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DownscaleTextureComputeShaderState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18GradientParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18GradientParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6980;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AF08;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AF08;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE56DF20, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::GradientParameters::reflection(void)::reflection;
  *result = &off_1E42B9C90;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci21ColorCorrectionFactorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci21ColorCorrectionFactorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6AA0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AEC0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AEC0;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE571C08, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::ColorCorrectionFactor::reflection(void)::reflection;
  *result = &off_1E42B9D50;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci14ElevatedStrokeEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci14ElevatedStrokeEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D68F0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AE78;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AE78;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE5548B0, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::ElevatedStroke::reflection(void)::reflection;
  *result = &off_1E42B9BB0;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci5StyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci5StyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6AE8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AE30;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AE30;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A448, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::Style::reflection(void)::reflection;
  *result = &off_1E42B9D90;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci13MaterialStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci13MaterialStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D68A8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427ADE8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427ADE8;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A3C8, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::MaterialStyle::reflection(void)::reflection;
  *result = &off_1E42B9B70;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci11RibbonStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci11RibbonStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6860;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427ADA0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427ADA0;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE551768, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::RibbonStyle::reflection(void)::reflection;
  *result = &off_1E42B9AF0;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci16PlanarParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci16PlanarParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6938;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AD58;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AD58;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE56CA38, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::PlanarParameters::reflection(void)::reflection;
  *result = &off_1E42B9C10;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile8ClippingEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile8ClippingEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D350;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile8ClippingEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D350;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AD10;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AD10;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54AE40, 2, 1, 6, 1);
  result[25] = ggl::Tile::Clipping::reflection(void)::reflection;
  *result = &off_1E42B97D0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci17LandCoverSettingsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci17LandCoverSettingsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427D398;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci17LandCoverSettingsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427D398;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427ACC8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427ACC8;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE554618, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::LandCoverSettings::reflection(void)::reflection;
  *result = &off_1E42B9C70;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3568;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci10StyleColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci10StyleColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6818;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3520;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci9StyleSSAOEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci9StyleSSAOEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6B30;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D34D8;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A6E8, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::StyleSSAO::reflection(void)::reflection;
  *result = &off_1E42B9DD0;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleEmissiveColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleEmissiveColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D69C8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3490;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A588, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::StyleEmissiveColor::reflection(void)::reflection;
  *result = &off_1E42B9CB0;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleRouteLineMaskEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleRouteLineMaskEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6A10;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3448;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A548, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
  *result = &off_1E42B9CD0;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci20StyleGroundOcclusionEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci20StyleGroundOcclusionEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6A58;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3400;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A4C8, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::StyleGroundOcclusion::reflection(void)::reflection;
  *result = &off_1E42B9D30;
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci18DecalPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci18DecalPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7790;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D33B8;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::DecalPipelineState,std::shared_ptr<ggl::DaVinciDecalShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 720, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v13, 0);
  }
  *v2 = &off_1E42BC490;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FC191FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::DecalPipelineState,std::shared_ptr<ggl::DaVinciDecalShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::DaVinciDecalShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  char v183;
  int64x2_t v184;
  int64x2_t v185;
  __int128 v187;
  __int128 v188;
  _BYTE v189[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v183 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v184 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E49A0;
    v187 = *(_OWORD *)(a2 + 16);
    v188 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v179 & 1) == 0
            {
              if ((v182 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1ECE30C98 = 1;
            }
            ggl::DaVinci::DecalPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            if ((v180 & 1) == 0
            {
              ggl::DaVinci::pipelineDataDecalPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::UVs::reflection(void)::reflection;
            }
            qword_1EE588840 = (uint64_t)&ggl::DaVinci::pipelineDataDecalPipelineDeviceStructs(void)::ref;
            *(_QWORD *)algn_1EE588848 = 1;
            if ((v181 & 1) == 0
            {
              ggl::DaVinci::pipelineDataDecalPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE588AD0 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE588AD8 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1EE588AE0 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1EE588AE8 = (uint64_t)ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
              unk_1EE588AF0 = ggl::DaVinci::Style::reflection(void)::reflection;
              qword_1EE588AF8 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
              unk_1EE588B00 = ggl::DaVinci::StyleColor::reflection(void)::reflection;
              qword_1EE588B08 = (uint64_t)ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
            }
            qword_1EE588850 = (uint64_t)&ggl::DaVinci::pipelineDataDecalPipelineConstantStructs(void)::ref;
            unk_1EE588858 = xmmword_19FFB5CD0;
          }
        }
        ggl::DaVinci::DecalPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::DecalPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciDecalShader::typedReflection(v174);
        qword_1EE5887E8 = (uint64_t)&ggl::DaVinciDecalShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStateDecalPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE588890 = 0;
          qword_1EE588898 = (uint64_t)"";
          dword_1EE5888A0 = 0;
          qword_1EE5888A8 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineAttributeBinding_0(void)::attr;
          unk_1EE5888B0 = 2;
        }
        qword_1EE5887F0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE5887F8 = 1;
        qword_1EE588800 = 0;
        unk_1EE588808 = 4;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStateDecalPipelineDeviceStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE5888C8 = 0;
          qword_1EE5888D0 = (uint64_t)"uvs";
          dword_1EE5888D8 = 2;
          qword_1EE5888E0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineDeviceUvsBinding(void)::reflection;
          unk_1EE5888E8 = 0;
        }
        qword_1EE588810 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineDeviceStructBinding(void)::ref;
        *(_QWORD *)algn_1EE588818 = 1;
        if ((v178 & 1) == 0
        {
          ggl::DaVinci::pipelineStateDecalPipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE588908 = 0;
          qword_1EE588910 = (uint64_t)"view";
          dword_1EE588918 = 3;
          qword_1EE588920 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantViewBinding(void)::reflection;
          unk_1EE588928 = xmmword_19FFB35A0;
          qword_1EE588938 = 1;
          unk_1EE588940 = "transform";
          dword_1EE588948 = 3;
          qword_1EE588950 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantTransformBinding(void)::reflection;
          unk_1EE588958 = xmmword_19FFB3660;
          qword_1EE588968 = 2;
          unk_1EE588970 = "shadow";
          dword_1EE588978 = 3;
          qword_1EE588980 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantShadowBinding(void)::reflection;
          unk_1EE588988 = xmmword_19FFB3040;
          qword_1EE588998 = 3;
          unk_1EE5889A0 = "positionScaleInfo";
          dword_1EE5889A8 = 3;
          qword_1EE5889B0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantPositionScaleInfoBinding(void)::reflection;
          unk_1EE5889B8 = xmmword_19FFB3050;
          qword_1EE5889C8 = 4;
          unk_1EE5889D0 = "lightConfigAmbient";
          dword_1EE5889D8 = 3;
          qword_1EE5889E0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantLightConfigAmbientBinding(void)::reflection;
          unk_1EE5889E8 = xmmword_19FFB4860;
          qword_1EE5889F8 = 5;
          unk_1EE588A00 = "style";
          dword_1EE588A08 = 3;
          qword_1EE588A10 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantStyleBinding(void)::reflection;
          xmmword_1EE588A18 = xmmword_19FFB5B60;
          qword_1EE588A28 = 6;
          unk_1EE588A30 = "shadowStyle";
          dword_1EE588A38 = 3;
          qword_1EE588A40 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantShadowStyleBinding(void)::reflection;
          xmmword_1EE588A48 = xmmword_19FFB5CE0;
          qword_1EE588A58 = 7;
          unk_1EE588A60 = "styleColor";
          dword_1EE588A68 = 3;
          qword_1EE588A70 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantStyleColorBinding(void)::reflection;
          xmmword_1EE588A78 = xmmword_19FFB5B70;
          qword_1EE588A88 = 8;
          unk_1EE588A90 = "routeLineMaskStyle";
          dword_1EE588A98 = 3;
          qword_1EE588AA0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
          unk_1EE588AA8 = 1;
        }
        qword_1EE588820 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1EE588828 = 9;
      }
    }
    v81 = v184;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v189 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v189[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::DecalPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v187;
    *(_OWORD *)&v78[12].__shared_owners_ = v188;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v189[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v189;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v185 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v185;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v183;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC4C0;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC1A1BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::DaVinci::DecalPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E49A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::DecalPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E49A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::DecalPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci19RibbonPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci19RibbonPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D77D8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3370;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::RibbonPipelineState,std::shared_ptr<ggl::DaVinciRibbonShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 600, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v13, 0);
  }
  *v2 = &off_1E42BC530;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FC1A3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::RibbonPipelineState,std::shared_ptr<ggl::DaVinciRibbonShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::DaVinciRibbonShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  char v181;
  int64x2_t v182;
  int64x2_t v183;
  __int128 v185;
  __int128 v186;
  _BYTE v187[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v181 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v182 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A10;
    v185 = *(_OWORD *)(a2 + 16);
    v186 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v178 & 1) == 0
            {
              if ((v180 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::ribbonVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::attributesReflection(void)::r;
              unk_1ECE2FD28 = 1;
            }
            ggl::DaVinci::RibbonPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::typedReflection(void)::r;
            *(_QWORD *)algn_1EE576C58 = &ggl::DaVinci::pipelineDataRibbonPipelineDeviceStructs(void)::ref;
            qword_1EE576C60 = 0;
            if ((v179 & 1) == 0
            {
              ggl::DaVinci::pipelineDataRibbonPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE576CE0 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE576CE8 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1EE576CF0 = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
              qword_1EE576CF8 = (uint64_t)ggl::DaVinci::Style::reflection(void)::reflection;
              unk_1EE576D00 = ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
              qword_1EE576D08 = (uint64_t)ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              unk_1EE576D10 = ggl::DaVinci::RibbonStyle::reflection(void)::reflection;
              qword_1EE576D18 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
              unk_1EE576D20 = ggl::DaVinci::StyleColor::reflection(void)::reflection;
              qword_1EE576D28 = (uint64_t)ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
            }
            qword_1EE576C68 = (uint64_t)&ggl::DaVinci::pipelineDataRibbonPipelineConstantStructs(void)::ref;
            unk_1EE576C70 = xmmword_19FFB5CF0;
          }
        }
        ggl::DaVinci::RibbonPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::RibbonPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciRibbonShader::typedReflection(v174);
        qword_1EE576C90 = (uint64_t)&ggl::DaVinciRibbonShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStateRibbonPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE576F50 = 0;
          qword_1EE576F58 = (uint64_t)"";
          dword_1EE576F60 = 0;
          qword_1EE576F68 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineAttributeBinding_0(void)::attr;
          unk_1EE576F70 = 4;
        }
        qword_1EE576C98 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineAttributeStructBinding(void)::attr;
        unk_1EE576CA0 = 1;
        qword_1EE576CA8 = 0;
        unk_1EE576CB0 = 4;
        qword_1EE576CB8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineDeviceStructBinding(void)::ref;
        unk_1EE576CC0 = 0;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStateRibbonPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE576D40 = 0;
          qword_1EE576D48 = (uint64_t)"view";
          dword_1EE576D50 = 3;
          qword_1EE576D58 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantViewBinding(void)::reflection;
          unk_1EE576D60 = xmmword_19FFB35A0;
          qword_1EE576D70 = 1;
          unk_1EE576D78 = "transform";
          dword_1EE576D80 = 3;
          qword_1EE576D88 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantTransformBinding(void)::reflection;
          *(_OWORD *)algn_1EE576D90 = xmmword_19FFB3660;
          qword_1EE576DA0 = 2;
          unk_1EE576DA8 = "shadow";
          dword_1EE576DB0 = 3;
          qword_1EE576DB8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantShadowBinding(void)::reflection;
          unk_1EE576DC0 = xmmword_19FFB3040;
          qword_1EE576DD0 = 3;
          unk_1EE576DD8 = "lightConfigAmbient";
          dword_1EE576DE0 = 3;
          qword_1EE576DE8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantLightConfigAmbientBinding(void)::reflection;
          *(_OWORD *)algn_1EE576DF0 = xmmword_19FFB3CD0;
          qword_1EE576E00 = 4;
          unk_1EE576E08 = "style";
          dword_1EE576E10 = 3;
          qword_1EE576E18 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantStyleBinding(void)::reflection;
          unk_1EE576E20 = xmmword_19FFB3670;
          qword_1EE576E30 = 5;
          unk_1EE576E38 = "sunMatrix";
          dword_1EE576E40 = 3;
          qword_1EE576E48 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantSunMatrixBinding(void)::reflection;
          xmmword_1EE576E50 = xmmword_19FFB5B60;
          qword_1EE576E60 = 6;
          unk_1EE576E68 = "positionScaleInfo";
          dword_1EE576E70 = 3;
          qword_1EE576E78 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantPositionScaleInfoBinding(void)::reflection;
          xmmword_1EE576E80 = xmmword_19FFB4840;
          qword_1EE576E90 = 7;
          unk_1EE576E98 = "ribbonStyle";
          dword_1EE576EA0 = 3;
          qword_1EE576EA8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantRibbonStyleBinding(void)::reflection;
          xmmword_1EE576EB0 = xmmword_19FFB3090;
          qword_1EE576EC0 = 8;
          unk_1EE576EC8 = "shadowStyle";
          dword_1EE576ED0 = 3;
          qword_1EE576ED8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantShadowStyleBinding(void)::reflection;
          xmmword_1EE576EE0 = xmmword_19FFB5D00;
          qword_1EE576EF0 = 9;
          unk_1EE576EF8 = "styleColor";
          dword_1EE576F00 = 3;
          qword_1EE576F08 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantStyleColorBinding(void)::reflection;
          xmmword_1EE576F10 = xmmword_19FFB5B90;
          qword_1EE576F20 = 10;
          unk_1EE576F28 = "routeLineMaskStyle";
          dword_1EE576F30 = 3;
          qword_1EE576F38 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
          qword_1EE576F40 = 1;
        }
        qword_1EE576CC8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantStructBinding(void)::ref;
        unk_1EE576CD0 = 11;
      }
    }
    v81 = v182;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v187 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v187[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::RibbonPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v185;
    *(_OWORD *)&v78[12].__shared_owners_ = v186;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v187[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v187;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v183 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v183;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v181;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC560;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC1B364(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::RibbonPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3328;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D32E0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::PackedLinearDepthPipelineState,std::shared_ptr<ggl::PackedLinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 960, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v13, 0);
  }
  *v2 = &off_1E42BC810;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FC1B58C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::PackedLinearDepthPipelineState,std::shared_ptr<ggl::PackedLinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int64x2_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unsigned __int8 v80;
  int64x2_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  int8x16_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int8x16_t v142;
  int32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int8x16_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int32x4_t v156;
  int8x16_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t **v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  ggl::PackedLinearDepthShader *v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  char v183;
  int64x2_t v184;
  int64x2_t v185;
  __int128 v187;
  __int128 v188;
  _BYTE v189[28];

  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i16[6] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  v183 = a5 | a6;
  v31.i8[8] = a5 | a6;
  v31.i8[9] = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30D0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB2DB0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30C0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30B0);
  v37 = vceqzq_s8(v31);
  v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  v39 = vmovl_high_s16(v38);
  v40 = vmovl_high_s8(v37);
  v41 = vmovl_high_s16(v40);
  v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3150, (int8x16_t)v32);
  v45 = vceqzq_s8((int8x16_t)v30);
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3160, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3170, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  v52 = vmovl_high_s16(v46);
  v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_19FFB3140, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3180, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  v55 = vmovl_high_s16(v48);
  v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_19FFB3130, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3190, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_19FFB3120, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB30A0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31A0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_19FFB3110, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3090);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31B0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_19FFB3100, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3080);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31C0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_19FFB30F0, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_19FFB3070);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31D0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_19FFB30E0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  v71 = v70.i64[0];
  v73 = (uint64_t **)(a2 + 104);
  v72 = *(_QWORD **)(a2 + 104);
  if (!v72)
    goto LABEL_12;
  v74 = (uint64_t **)(a2 + 104);
  do
  {
    v75 = v72[4];
    v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0])
      v77 = v72;
    else
      v77 = v72 + 1;
    if (v76)
      v74 = (uint64_t **)v72;
    v72 = (_QWORD *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    v171 = v74[6];
    a1[1] = (std::__shared_weak_count *)v171;
    if (v171)
    {
      v172 = (unint64_t *)(v171 + 1);
      do
        v173 = __ldxr(v172);
      while (__stxr(v173 + 1, v172));
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    v184 = v70;
    v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C40;
    v187 = *(_OWORD *)(a2 + 16);
    v188 = *(_OWORD *)(a2 + 32);
    if ((v80 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        if ((v175 & 1) == 0)
        {
          if ((_DWORD)v174)
          {
            if ((v179 & 1) == 0
            {
              if ((v182 & 1) == 0
              {
                ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::packedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r;
              *(_QWORD *)algn_1ECE30C70 = 1;
            }
            ggl::DaVinci::PackedLinearDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r;
            if ((v180 & 1) == 0
            {
              ggl::DaVinci::pipelineDataPackedLinearDepthPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              *(_QWORD *)algn_1EE587528 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1EE587288 = (uint64_t)&ggl::DaVinci::pipelineDataPackedLinearDepthPipelineDeviceStructs(void)::ref;
            unk_1EE587290 = 2;
            if ((v181 & 1) == 0
            {
              ggl::DaVinci::pipelineDataPackedLinearDepthPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EE587540 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE587548 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1EE587550 = ggl::Tile::LinearDepth::reflection(void)::reflection;
              qword_1EE587558 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1EE587298 = (uint64_t)&ggl::DaVinci::pipelineDataPackedLinearDepthPipelineConstantStructs(void)::ref;
            unk_1EE5872A0 = xmmword_19FFB4BF0;
          }
        }
        ggl::DaVinci::PackedLinearDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::PackedLinearDepthPipelineSetup::typedReflection(void)::ref;
        ggl::PackedLinearDepthShader::typedReflection(v174);
        qword_1EE587230 = (uint64_t)&ggl::PackedLinearDepthShader::typedReflection(void)::ref;
        if ((v176 & 1) == 0
        {
          ggl::DaVinci::pipelineStatePackedLinearDepthPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE587380 = 0;
          qword_1EE587388 = (uint64_t)"";
          dword_1EE587390 = 0;
          qword_1EE587398 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineAttributeBinding_0(void)::attr;
          unk_1EE5873A0 = 1;
        }
        qword_1EE587238 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineAttributeStructBinding(void)::attr;
        unk_1EE587240 = 1;
        qword_1EE587248 = 0;
        unk_1EE587250 = 0;
        if ((v177 & 1) == 0
        {
          ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE5873B8 = 0;
          qword_1EE5873C0 = (uint64_t)"instanceTransform";
          dword_1EE5873C8 = 2;
          qword_1EE5873D0 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1EE5873D8 = xmmword_19FFB2E40;
          qword_1EE5873E8 = 1;
          unk_1EE5873F0 = "elevations";
          dword_1EE5873F8 = 2;
          qword_1EE587400 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceElevationsBinding(void)::reflection;
          unk_1EE587408 = 0;
        }
        qword_1EE587258 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceStructBinding(void)::ref;
        unk_1EE587260 = 2;
        if ((v178 & 1) == 0
        {
          ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE587430 = 0;
          qword_1EE587438 = (uint64_t)"view";
          dword_1EE587440 = 3;
          qword_1EE587448 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1EE587450 = xmmword_19FFB35A0;
          qword_1EE587460 = 1;
          unk_1EE587468 = "transform";
          dword_1EE587470 = 3;
          qword_1EE587478 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantTransformBinding(void)::reflection;
          unk_1EE587480 = xmmword_19FFB3660;
          qword_1EE587490 = 2;
          unk_1EE587498 = "shadow";
          dword_1EE5874A0 = 3;
          qword_1EE5874A8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantShadowBinding(void)::reflection;
          *(_OWORD *)algn_1EE5874B0 = xmmword_19FFB3040;
          qword_1EE5874C0 = 3;
          unk_1EE5874C8 = "linearDepth";
          dword_1EE5874D0 = 3;
          qword_1EE5874D8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantLinearDepthBinding(void)::reflection;
          unk_1EE5874E0 = xmmword_19FFB3CD0;
          qword_1EE5874F0 = 4;
          unk_1EE5874F8 = "tileClipping";
          dword_1EE587500 = 3;
          qword_1EE587508 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantTileClippingBinding(void)::reflection;
          unk_1EE587510 = 2;
        }
        qword_1EE587268 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantStructBinding(void)::ref;
        unk_1EE587270 = 5;
      }
    }
    v81 = v184;
    v81.i8[13] = a13;
    v82 = *(std::__shared_weak_count_vtbl **)a2;
    v83 = *(std::__shared_weak_count **)(a2 + 8);
    if (v83)
    {
      v84 = (unint64_t *)&v83->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v81.i8[14] = a14;
    v86 = v78 + 1;
    *(_OWORD *)v189 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v189[12] = *(_OWORD *)(a2 + 60);
    v87 = *(_OWORD *)(a2 + 76);
    v88 = *(_BYTE *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::PackedLinearDepthPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v82;
    v78[3].__shared_owners_ = (uint64_t)v83;
    if (v83)
    {
      v89 = (unint64_t *)&v83->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v81.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v187;
    *(_OWORD *)&v78[12].__shared_owners_ = v188;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v189[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v189;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v87;
    BYTE4(v78[5].__shared_owners_) = v88;
    if (v83)
    {
      v91 = (unint64_t *)&v83->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        v185 = v81;
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v81 = v185;
      }
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v81;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v183;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    v93 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    v94 = vmovl_high_s8(v93);
    v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    v97 = v96;
    v98 = vmovl_s8(*(int8x8_t *)v93.i8);
    v99 = vmovl_s16(*(int16x4_t *)v98.i8);
    v96.i64[0] = v99.u32[0];
    v96.i64[1] = v99.u32[1];
    v100 = v96;
    v101 = vmovl_high_s16(v94);
    v102 = vmovl_high_s16(v98);
    v96.i64[0] = v102.u32[2];
    v96.i64[1] = v102.u32[3];
    v103 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v96);
    v96.i64[0] = v101.u32[0];
    v96.i64[1] = v101.u32[1];
    v104 = v96;
    v96.i64[0] = v102.u32[0];
    v96.i64[1] = v102.u32[1];
    v105 = v96;
    v96.i64[0] = v95.u32[2];
    v96.i64[1] = v95.u32[3];
    v106 = v96;
    v96.i64[0] = v99.u32[2];
    v96.i64[1] = v99.u32[3];
    v107 = v96;
    v96.i64[0] = v101.u32[2];
    v96.i64[1] = v101.u32[3];
    v108 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v96);
    v109 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v107);
    v110 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v104);
    v111 = vceqzq_s8(*(int8x16_t *)&v78[14].__shared_owners_);
    v112 = vmovl_high_s8(v111);
    v113 = vmovl_s16(*(int16x4_t *)v112.i8);
    v96.i64[0] = v113.u32[0];
    v96.i64[1] = v113.u32[1];
    v114 = v96;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BC840;
    v115 = vmovl_s8(*(int8x8_t *)v111.i8);
    LOBYTE(v78[15].__vftable) = a24;
    v116 = vmovl_s16(*(int16x4_t *)v115.i8);
    v96.i64[0] = v116.u32[0];
    v96.i64[1] = v116.u32[1];
    v117 = v96;
    BYTE1(v78[15].__vftable) = a25;
    v118 = vmovl_high_s16(v112);
    BYTE2(v78[15].__vftable) = a26;
    v96.i64[0] = v118.u32[0];
    v96.i64[1] = v118.u32[1];
    v119 = v96;
    v120 = vmovl_high_s16(v115);
    BYTE3(v78[15].__vftable) = a27;
    v96.i64[0] = v120.u32[0];
    v96.i64[1] = v120.u32[1];
    v121 = v96;
    WORD2(v78[15].__vftable) = a28;
    v96.i64[0] = v113.u32[2];
    v96.i64[1] = v113.u32[3];
    v122 = v96;
    v96.i64[0] = v116.u32[2];
    v96.i64[1] = v116.u32[3];
    v123 = v96;
    v96.i64[0] = v118.u32[2];
    v96.i64[1] = v118.u32[3];
    v124 = v96;
    HIWORD(v78[15].__vftable) = a29;
    v96.i64[0] = v120.u32[2];
    v96.i64[1] = v120.u32[3];
    v125 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v124);
    v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v114), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v97));
    v127 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v117), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v100));
    v128 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v119), v110);
    v129 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v121), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v105));
    v130 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v122), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v106));
    v131 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v123), v109);
    v132 = vorrq_s8(v125, v108);
    v133 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v96), v103);
    v134 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    v135 = vmovl_s8(*(int8x8_t *)v134.i8);
    v136 = vmovl_high_s16(v135);
    v96.i64[0] = v136.i32[2];
    v96.i64[1] = v136.i32[3];
    v137 = v96;
    v138 = vmovl_high_s8(v134);
    v139 = vmovl_high_s16(v138);
    v96.i64[0] = v139.i32[2];
    v96.i64[1] = v139.i32[3];
    v140 = v96;
    v141 = vmovl_s16(*(int16x4_t *)v135.i8);
    v96.i64[0] = v141.i32[2];
    v96.i64[1] = v141.i32[3];
    v142 = v96;
    v143 = vmovl_s16(*(int16x4_t *)v138.i8);
    v96.i64[0] = v143.i32[2];
    v96.i64[1] = v143.i32[3];
    v144 = v96;
    v96.i64[0] = v136.i32[0];
    v96.i64[1] = v136.i32[1];
    v145 = v96;
    v96.i64[0] = v139.i32[0];
    v96.i64[1] = v139.i32[1];
    v146 = v96;
    v96.i64[0] = v141.i32[0];
    v96.i64[1] = v141.i32[1];
    v147 = v96;
    v96.i64[0] = v143.i32[0];
    v96.i64[1] = v143.i32[1];
    v148 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v96);
    v149 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    v150 = vmovl_high_s8(v149);
    v151 = vmovl_s16(*(int16x4_t *)v150.i8);
    v96.i64[0] = v151.i32[0];
    v96.i64[1] = v151.i32[1];
    v152 = v96;
    v153 = vmovl_s8(*(int8x8_t *)v149.i8);
    v154 = vmovl_s16(*(int16x4_t *)v153.i8);
    v96.i64[0] = v154.i32[0];
    v96.i64[1] = v154.i32[1];
    v155 = v96;
    v156 = vmovl_high_s16(v150);
    v96.i64[0] = v156.i32[0];
    v96.i64[1] = v156.i32[1];
    v157 = v96;
    v158 = vmovl_high_s16(v153);
    v96.i64[0] = v158.i32[0];
    v96.i64[1] = v158.i32[1];
    v159 = v96;
    v96.i64[0] = v151.i32[2];
    v96.i64[1] = v151.i32[3];
    v160 = v96;
    v96.i64[0] = v154.i32[2];
    v96.i64[1] = v154.i32[3];
    v161 = v96;
    v96.i64[0] = v156.i32[2];
    v96.i64[1] = v156.i32[3];
    v162 = v96;
    v96.i64[0] = v158.i32[2];
    v96.i64[1] = v158.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v155), vbicq_s8((int8x16_t)xmmword_19FFB3170, v147)), v127), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v152), v148), v126)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v159), vbicq_s8((int8x16_t)xmmword_19FFB3190, v145)), v129), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v157),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v146)),
                                                    v128))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v161), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v142)), v131), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v160), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v144)), v130)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v96), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v137)), v133), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v162),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v140)),
                                                    v132)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v86;
    a1[1] = v78;
    do
      v163 = __ldxr(p_shared_owners);
    while (__stxr(v163 + 1, p_shared_owners));
    v164 = *v73;
    v165 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          v165 = (uint64_t **)v164;
          v166 = v164[4];
          if (v71 >= v166)
            break;
          v164 = *v165;
          v73 = v165;
          if (!*v165)
            goto LABEL_33;
        }
        if (v166 >= v71)
          break;
        v164 = v165[1];
        if (!v164)
        {
          v73 = v165 + 1;
          goto LABEL_33;
        }
      }
      v169 = (unint64_t *)&v78->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_33:
      v167 = (uint64_t *)operator new(0x38uLL);
      v167[4] = v71;
      v167[5] = (uint64_t)v86;
      v167[6] = (uint64_t)v78;
      *v167 = 0;
      v167[1] = 0;
      v167[2] = (uint64_t)v165;
      *v73 = v167;
      v168 = **(_QWORD **)(a2 + 96);
      if (v168)
      {
        *(_QWORD *)(a2 + 96) = v168;
        v167 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v167);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19FC1C49C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::DaVinci::PackedLinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::PackedLinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::PackedLinearDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3298;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3250;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::LinearDepthPipelineState,std::shared_ptr<ggl::LinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 840, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x100u,
    0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v13, 0);
  }
  *v2 = &off_1E42BC690;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FC1C6C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::DaVinci::GroundShadowMapPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::DaVinci::GroundShadowMapPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3208;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D31C0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundShadowMapPipelineState,std::shared_ptr<ggl::DaVinciGroundShadowMapShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 480, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v13, 0);
  }
  *v2 = &off_1E42BC730;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FC1C8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3178;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3130;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundDepthPipelineState,std::shared_ptr<ggl::DaVinciGroundDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v13, v1 + 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v3 = v13;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v13, 0);
  }
  *v2 = &off_1E42BC640;
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v2;
}

void sub_19FC1CA7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D30E8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D30A0;
  result[1] = v3;
  return result;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundNonCompressedPipelineState,std::shared_ptr<ggl::DaVinciGroundNotCompressedShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v22, v1 + 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v3 = v22;
  v4 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v22, 0);
  }
  *v2 = &off_1E42BC8F0;
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v2[8];
  *(_QWORD *)(v12 + 136) = 0;
  v13 = *(_QWORD *)(v1 + 1184);
  *(_QWORD *)(v12 + 128) = v13;
  v14 = v2[20];
  v15 = *(_QWORD *)(v1 + 1192);
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(std::__shared_weak_count **)(v14 + 136);
  *(_QWORD *)(v14 + 128) = v13;
  *(_QWORD *)(v14 + 136) = v15;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v2;
}

void sub_19FC1CCCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::DaVinci::GroundPipelineSetup *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::DaVinci::GroundPipelineSetup *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D3058;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3010;
  result[1] = v3;
  return result;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DaVinci::LinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::LinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundNonCompressedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundNonCompressedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E49D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E49D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::SamplerState *,std::shared_ptr<ggl::SamplerState>::__shared_ptr_default_delete<ggl::SamplerState,ggl::SamplerState>,std::allocator<ggl::SamplerState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::DaVinciGroundRenderResources::prunePools(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD **v25;
  uint64_t v26;
  _QWORD **v27;
  _QWORD **v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  uint64_t v35;
  _QWORD **v36;
  _QWORD **v37;
  uint64_t v38;
  _QWORD **v39;
  _QWORD **v40;
  uint64_t v41;
  _QWORD **v42;
  _QWORD **v43;
  uint64_t v44;
  _QWORD **v45;
  _QWORD **v46;
  uint64_t v47;
  _QWORD **v48;
  _QWORD **v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD **v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD **v55;
  uint64_t v56;
  _QWORD **v57;
  _QWORD **v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD **v61;
  uint64_t v62;
  _QWORD **v63;
  _QWORD **v64;
  uint64_t v65;
  _QWORD **v66;
  _QWORD **v67;
  uint64_t v68;
  _QWORD **v69;
  _QWORD **v70;

  v1 = this;
  v2 = this[135];
  v4 = *(_QWORD ***)v2;
  v3 = *(_QWORD ***)(v2 + 8);
  if (*(_QWORD ***)v2 != v3)
  {
    do
    {
      this = *v4;
      if (*v4)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v3 = *(_QWORD ***)(v2 + 8);
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = *(_QWORD ***)v2;
  }
  *(_QWORD *)(v2 + 8) = v4;
  v5 = v1[179];
  v7 = *(_QWORD ***)v5;
  v6 = *(_QWORD ***)(v5 + 8);
  if (*(_QWORD ***)v5 != v6)
  {
    do
    {
      this = *v7;
      if (*v7)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v6 = *(_QWORD ***)(v5 + 8);
      }
      ++v7;
    }
    while (v7 != v6);
    v7 = *(_QWORD ***)v5;
  }
  *(_QWORD *)(v5 + 8) = v7;
  v8 = v1[180];
  v10 = *(_QWORD ***)v8;
  v9 = *(_QWORD ***)(v8 + 8);
  if (*(_QWORD ***)v8 != v9)
  {
    do
    {
      this = *v10;
      if (*v10)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v9 = *(_QWORD ***)(v8 + 8);
      }
      ++v10;
    }
    while (v10 != v9);
    v10 = *(_QWORD ***)v8;
  }
  *(_QWORD *)(v8 + 8) = v10;
  v11 = v1[139];
  v13 = *(_QWORD ***)v11;
  v12 = *(_QWORD ***)(v11 + 8);
  if (*(_QWORD ***)v11 != v12)
  {
    do
    {
      this = *v13;
      if (*v13)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v12 = *(_QWORD ***)(v11 + 8);
      }
      ++v13;
    }
    while (v13 != v12);
    v13 = *(_QWORD ***)v11;
  }
  *(_QWORD *)(v11 + 8) = v13;
  v14 = v1[140];
  v16 = *(_QWORD ***)v14;
  v15 = *(_QWORD ***)(v14 + 8);
  if (*(_QWORD ***)v14 != v15)
  {
    do
    {
      this = *v16;
      if (*v16)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v15 = *(_QWORD ***)(v14 + 8);
      }
      ++v16;
    }
    while (v16 != v15);
    v16 = *(_QWORD ***)v14;
  }
  *(_QWORD *)(v14 + 8) = v16;
  v17 = v1[141];
  v19 = *(_QWORD ***)v17;
  v18 = *(_QWORD ***)(v17 + 8);
  if (*(_QWORD ***)v17 != v18)
  {
    do
    {
      this = *v19;
      if (*v19)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v18 = *(_QWORD ***)(v17 + 8);
      }
      ++v19;
    }
    while (v19 != v18);
    v19 = *(_QWORD ***)v17;
  }
  *(_QWORD *)(v17 + 8) = v19;
  v20 = v1[138];
  v22 = *(_QWORD ***)v20;
  v21 = *(_QWORD ***)(v20 + 8);
  if (*(_QWORD ***)v20 != v21)
  {
    do
    {
      this = *v22;
      if (*v22)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v21 = *(_QWORD ***)(v20 + 8);
      }
      ++v22;
    }
    while (v22 != v21);
    v22 = *(_QWORD ***)v20;
  }
  *(_QWORD *)(v20 + 8) = v22;
  v23 = v1[142];
  v25 = *(_QWORD ***)v23;
  v24 = *(_QWORD ***)(v23 + 8);
  if (*(_QWORD ***)v23 != v24)
  {
    do
    {
      this = *v25;
      if (*v25)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v24 = *(_QWORD ***)(v23 + 8);
      }
      ++v25;
    }
    while (v25 != v24);
    v25 = *(_QWORD ***)v23;
  }
  *(_QWORD *)(v23 + 8) = v25;
  v26 = v1[143];
  v28 = *(_QWORD ***)v26;
  v27 = *(_QWORD ***)(v26 + 8);
  if (*(_QWORD ***)v26 != v27)
  {
    do
    {
      this = *v28;
      if (*v28)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v27 = *(_QWORD ***)(v26 + 8);
      }
      ++v28;
    }
    while (v28 != v27);
    v28 = *(_QWORD ***)v26;
  }
  *(_QWORD *)(v26 + 8) = v28;
  v29 = v1[144];
  v31 = *(_QWORD ***)v29;
  v30 = *(_QWORD ***)(v29 + 8);
  if (*(_QWORD ***)v29 != v30)
  {
    do
    {
      this = *v31;
      if (*v31)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v30 = *(_QWORD ***)(v29 + 8);
      }
      ++v31;
    }
    while (v31 != v30);
    v31 = *(_QWORD ***)v29;
  }
  *(_QWORD *)(v29 + 8) = v31;
  v32 = v1[145];
  v34 = *(_QWORD ***)v32;
  v33 = *(_QWORD ***)(v32 + 8);
  if (*(_QWORD ***)v32 != v33)
  {
    do
    {
      this = *v34;
      if (*v34)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v33 = *(_QWORD ***)(v32 + 8);
      }
      ++v34;
    }
    while (v34 != v33);
    v34 = *(_QWORD ***)v32;
  }
  *(_QWORD *)(v32 + 8) = v34;
  v35 = v1[168];
  v37 = *(_QWORD ***)v35;
  v36 = *(_QWORD ***)(v35 + 8);
  if (*(_QWORD ***)v35 != v36)
  {
    do
    {
      this = *v37;
      if (*v37)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v36 = *(_QWORD ***)(v35 + 8);
      }
      ++v37;
    }
    while (v37 != v36);
    v37 = *(_QWORD ***)v35;
  }
  *(_QWORD *)(v35 + 8) = v37;
  v38 = v1[169];
  v40 = *(_QWORD ***)v38;
  v39 = *(_QWORD ***)(v38 + 8);
  if (*(_QWORD ***)v38 != v39)
  {
    do
    {
      this = *v40;
      if (*v40)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v39 = *(_QWORD ***)(v38 + 8);
      }
      ++v40;
    }
    while (v40 != v39);
    v40 = *(_QWORD ***)v38;
  }
  *(_QWORD *)(v38 + 8) = v40;
  v41 = v1[170];
  v43 = *(_QWORD ***)v41;
  v42 = *(_QWORD ***)(v41 + 8);
  if (*(_QWORD ***)v41 != v42)
  {
    do
    {
      this = *v43;
      if (*v43)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v42 = *(_QWORD ***)(v41 + 8);
      }
      ++v43;
    }
    while (v43 != v42);
    v43 = *(_QWORD ***)v41;
  }
  *(_QWORD *)(v41 + 8) = v43;
  v44 = v1[171];
  v46 = *(_QWORD ***)v44;
  v45 = *(_QWORD ***)(v44 + 8);
  if (*(_QWORD ***)v44 != v45)
  {
    do
    {
      this = *v46;
      if (*v46)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v45 = *(_QWORD ***)(v44 + 8);
      }
      ++v46;
    }
    while (v46 != v45);
    v46 = *(_QWORD ***)v44;
  }
  *(_QWORD *)(v44 + 8) = v46;
  v47 = v1[174];
  v49 = *(_QWORD ***)v47;
  v48 = *(_QWORD ***)(v47 + 8);
  if (*(_QWORD ***)v47 != v48)
  {
    do
    {
      this = *v49;
      if (*v49)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v48 = *(_QWORD ***)(v47 + 8);
      }
      ++v49;
    }
    while (v49 != v48);
    v49 = *(_QWORD ***)v47;
  }
  *(_QWORD *)(v47 + 8) = v49;
  v50 = v1[176];
  v52 = *(_QWORD ***)v50;
  v51 = *(_QWORD ***)(v50 + 8);
  if (*(_QWORD ***)v50 != v51)
  {
    do
    {
      this = *v52;
      if (*v52)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v51 = *(_QWORD ***)(v50 + 8);
      }
      ++v52;
    }
    while (v52 != v51);
    v52 = *(_QWORD ***)v50;
  }
  *(_QWORD *)(v50 + 8) = v52;
  v53 = v1[173];
  v55 = *(_QWORD ***)v53;
  v54 = *(_QWORD ***)(v53 + 8);
  if (*(_QWORD ***)v53 != v54)
  {
    do
    {
      this = *v55;
      if (*v55)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v54 = *(_QWORD ***)(v53 + 8);
      }
      ++v55;
    }
    while (v55 != v54);
    v55 = *(_QWORD ***)v53;
  }
  *(_QWORD *)(v53 + 8) = v55;
  v56 = v1[175];
  v58 = *(_QWORD ***)v56;
  v57 = *(_QWORD ***)(v56 + 8);
  if (*(_QWORD ***)v56 != v57)
  {
    do
    {
      this = *v58;
      if (*v58)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v57 = *(_QWORD ***)(v56 + 8);
      }
      ++v58;
    }
    while (v58 != v57);
    v58 = *(_QWORD ***)v56;
  }
  *(_QWORD *)(v56 + 8) = v58;
  v59 = v1[137];
  v61 = *(_QWORD ***)v59;
  v60 = *(_QWORD ***)(v59 + 8);
  if (*(_QWORD ***)v59 != v60)
  {
    do
    {
      this = *v61;
      if (*v61)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v60 = *(_QWORD ***)(v59 + 8);
      }
      ++v61;
    }
    while (v61 != v60);
    v61 = *(_QWORD ***)v59;
  }
  *(_QWORD *)(v59 + 8) = v61;
  v62 = v1[172];
  v64 = *(_QWORD ***)v62;
  v63 = *(_QWORD ***)(v62 + 8);
  if (*(_QWORD ***)v62 != v63)
  {
    do
    {
      this = *v64;
      if (*v64)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v63 = *(_QWORD ***)(v62 + 8);
      }
      ++v64;
    }
    while (v64 != v63);
    v64 = *(_QWORD ***)v62;
  }
  *(_QWORD *)(v62 + 8) = v64;
  v65 = v1[177];
  v67 = *(_QWORD ***)v65;
  v66 = *(_QWORD ***)(v65 + 8);
  if (*(_QWORD ***)v65 != v66)
  {
    do
    {
      this = *v67;
      if (*v67)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v66 = *(_QWORD ***)(v65 + 8);
      }
      ++v67;
    }
    while (v67 != v66);
    v67 = *(_QWORD ***)v65;
  }
  *(_QWORD *)(v65 + 8) = v67;
  v68 = v1[178];
  v70 = *(_QWORD ***)v68;
  v69 = *(_QWORD ***)(v68 + 8);
  if (*(_QWORD ***)v68 != v69)
  {
    do
    {
      this = *v70;
      if (*v70)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v69 = *(_QWORD ***)(v68 + 8);
      }
      ++v70;
    }
    while (v70 != v69);
    v70 = *(_QWORD ***)v68;
  }
  *(_QWORD *)(v68 + 8) = v70;
  return this;
}

uint64_t md::DaVinciGroundRenderResources::debugTextureForAttribute(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *i;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t *p_shared_owners;
  unint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 2640);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)(a1 + 2632) + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                goto LABEL_103;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              goto LABEL_103;
          }
          else
          {
            if (v12 >= v6)
              v12 %= v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)operator new(0x78uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAEF8;
  v14[1].__shared_owners_ = 0;
  v14[1].__shared_weak_owners_ = 0;
  v15 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  *(_OWORD *)&v15->~__shared_weak_count = 0u;
  *(_OWORD *)&v15->__on_zero_shared = 0u;
  *(_OWORD *)&v15->__on_zero_shared_weak = 0u;
  *(_OWORD *)&v15[1].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v15[1].__get_deleter = 0u;
  *(_OWORD *)&v15[2].~__shared_weak_count = 0u;
  *(_OWORD *)&v15[2].__on_zero_shared = 0u;
  *(_OWORD *)&v15[2].__on_zero_shared_weak = 0u;
  v14[1].__vftable = v15;
  v14[1].__shared_owners_ = (uint64_t)&v15[3].~__shared_weak_count_0;
  v14[1].__shared_weak_owners_ = (uint64_t)&v15[3].~__shared_weak_count_0;
  v14[2].__vftable = 0;
  LOBYTE(v14[2].__shared_owners_) = 1;
  *(_OWORD *)&v14[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v14[3].__shared_owners_ = 0u;
  v14[4].std::__shared_count = 0u;
  v14[4].__shared_weak_owners_ = 0;
  if ((v16 & 1) == 0
  {
    md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
  }
  v17 = md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel;
  v18 = (v17 + 3) / v17;
  v14[3].__vftable = (std::__shared_weak_count_vtbl *)v18;
  v14[3].__shared_owners_ = 8;
  v14[4].__vftable = (std::__shared_weak_count_vtbl *)1;
  v14[4].__shared_owners_ = v18;
  v14[3].__shared_weak_owners_ = v18 * v17;
  *(float *)&v14[4].__shared_weak_owners_ = 1.0 / (float)v18;
  *(_QWORD *)&v63 = v14 + 1;
  *((_QWORD *)&v63 + 1) = v14;
  v19 = *(_QWORD *)(a1 + 2640);
  if (!v19)
    goto LABEL_43;
  v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    v2 = v5;
    if (v19 <= v5)
      v2 = v5 % v19;
  }
  else
  {
    v2 = ((_DWORD)v19 - 1) & v5;
  }
  v21 = *(void ***)(*(_QWORD *)(a1 + 2632) + 8 * v2);
  if (!v21 || (v10 = *v21) == 0)
  {
LABEL_43:
    v10 = operator new(0x28uLL);
    v24 = (_QWORD *)(a1 + 2648);
    *v10 = 0;
    v10[1] = v5;
    *((_DWORD *)v10 + 4) = a2;
    *(_OWORD *)(v10 + 3) = v63;
    v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 2656) + 1);
    v26 = *(float *)(a1 + 2664);
    if (v19 && (float)(v26 * (float)v19) >= v25)
    {
      v5 = v2;
      goto LABEL_93;
    }
    v27 = 1;
    if (v19 >= 3)
      v27 = (v19 & (v19 - 1)) != 0;
    v28 = v27 | (2 * v19);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v19 = *(_QWORD *)(a1 + 2640);
    }
    if (prime <= v19)
    {
      if (prime >= v19)
        goto LABEL_81;
      v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2656) / *(float *)(a1 + 2664));
      if (v19 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v19)
      {
        v19 = *(_QWORD *)(a1 + 2640);
LABEL_81:
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v19 <= v5)
            v5 %= v19;
        }
        else
        {
          v5 = ((_DWORD)v19 - 1) & v5;
        }
LABEL_93:
        v49 = *(_QWORD *)(a1 + 2632);
        v50 = *(_QWORD **)(v49 + 8 * v5);
        if (v50)
        {
          *v10 = *v50;
        }
        else
        {
          *v10 = *v24;
          *v24 = v10;
          *(_QWORD *)(v49 + 8 * v5) = v24;
          if (!*v10)
          {
LABEL_102:
            ++*(_QWORD *)(a1 + 2656);
            goto LABEL_103;
          }
          v51 = *(_QWORD *)(*v10 + 8);
          if ((v19 & (v19 - 1)) != 0)
          {
            if (v51 >= v19)
              v51 %= v19;
          }
          else
          {
            v51 &= v19 - 1;
          }
          v50 = (_QWORD *)(*(_QWORD *)(a1 + 2632) + 8 * v51);
        }
        *v50 = v10;
        goto LABEL_102;
      }
      if (!prime)
      {
        v62 = *(void **)(a1 + 2632);
        *(_QWORD *)(a1 + 2632) = 0;
        if (v62)
          operator delete(v62);
        v19 = 0;
        *(_QWORD *)(a1 + 2640) = 0;
        goto LABEL_81;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v31 = operator new(8 * prime);
    v32 = *(void **)(a1 + 2632);
    *(_QWORD *)(a1 + 2632) = v31;
    if (v32)
      operator delete(v32);
    v33 = 0;
    *(_QWORD *)(a1 + 2640) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 2632) + 8 * v33++) = 0;
    while (prime != v33);
    v34 = (_QWORD *)*v24;
    if (!*v24)
    {
LABEL_80:
      v19 = prime;
      goto LABEL_81;
    }
    v35 = v34[1];
    v36 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v37 = v35 & v36;
      *(_QWORD *)(*(_QWORD *)(a1 + 2632) + 8 * v37) = v24;
      for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
      {
        v39 = i[1] & v36;
        if (v39 == v37)
        {
          v34 = i;
        }
        else
        {
          v40 = *(_QWORD *)(a1 + 2632);
          if (*(_QWORD *)(v40 + 8 * v39))
          {
            *v34 = *i;
            v41 = 8 * v39;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 2632) + v41);
            **(_QWORD **)(*(_QWORD *)(a1 + 2632) + v41) = i;
          }
          else
          {
            *(_QWORD *)(v40 + 8 * v39) = v34;
            v34 = i;
            v37 = v39;
          }
        }
      }
      goto LABEL_80;
    }
    if (v35 >= prime)
      v35 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 2632) + 8 * v35) = v24;
    v45 = (_QWORD *)*v34;
    if (!*v34)
      goto LABEL_80;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v35)
      {
        v48 = *(_QWORD *)(a1 + 2632);
        if (!*(_QWORD *)(v48 + 8 * v47))
        {
          *(_QWORD *)(v48 + 8 * v47) = v34;
          goto LABEL_85;
        }
        *v34 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)(a1 + 2632) + v46);
        **(_QWORD **)(*(_QWORD *)(a1 + 2632) + v46) = v45;
        v45 = v34;
      }
      v47 = v35;
LABEL_85:
      v34 = v45;
      v45 = (_QWORD *)*v45;
      v35 = v47;
      if (!v45)
        goto LABEL_80;
    }
  }
  if (v20.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v10[1];
      if (v23 == v5)
      {
        if (*((_DWORD *)v10 + 4) == a2)
          goto LABEL_114;
      }
      else if ((v23 & (v19 - 1)) != v2)
      {
        goto LABEL_43;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v22 = v10[1];
    if (v22 == v5)
      break;
    if (v22 >= v19)
      v22 %= v19;
    if (v22 != v2)
      goto LABEL_43;
LABEL_33:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_43;
  }
  if (*((_DWORD *)v10 + 4) != a2)
    goto LABEL_33;
LABEL_114:
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v61 = __ldaxr(p_shared_owners);
  while (__stlxr(v61 - 1, p_shared_owners));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_103:
  v52 = v10[3];
  v53 = *(_QWORD *)v52;
  v54 = *(_QWORD *)(v52 + 8);
  v55 = v54 - *(_QWORD *)v52;
  if (v54 != *(_QWORD *)v52)
  {
    v56 = 0;
    v57 = v55 >> 4;
    if (v57 <= 1)
      v57 = 1;
    do
    {
      *(float *)&v64 = (float)v56 * 0.125;
      HIDWORD(v64) = 1065353216;
      if (*(_QWORD *)v53)
        v58 = 0;
      else
        v58 = v64 == *(_QWORD *)(v53 + 8);
      if (!v58)
      {
        *(_BYTE *)(v52 + 32) = 1;
        *(_QWORD *)v53 = 0;
        *(float *)(v53 + 8) = (float)v56 * 0.125;
        *(_DWORD *)(v53 + 12) = 1065353216;
      }
      ++v56;
      v53 += 16;
    }
    while (v57 != v56);
  }
  md::StyleTexture<md::LowZoomStyle>::_processStylePixelsIfNecessary(v52);
  return *(_QWORD *)(v52 + 24);
}

void sub_19FC1DF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FC1DF24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderResources::buildShadowPlane(md::DaVinciGroundRenderResources *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  BOOL v51;
  __int16 *v52;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  __int128 v59;
  char *v60;
  char *v61;
  const float *v62;
  __int16 *v63;
  uint64_t v64;
  __int128 v65;
  int32x4_t v66;
  __int128 v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  char *v75;
  float v76;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  uint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  int16x8_t *v86;
  int16x8_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int16x8_t *p_on_zero_shared;
  int16x8_t *v92;
  uint64_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  _WORD *v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t shared_weak_owners;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  char *v115;
  __int128 v116;
  unint64_t v117;
  __int16 *v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  int16x8_t *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125[3];
  char *v126;
  char *v127;
  uint64_t v128;
  float32x4x2_t v129;

  v126 = 0;
  v127 = 0;
  v128 = 0;
  memset(v125, 0, sizeof(v125));
  v122 = 0;
  v123 = 0;
  v124 = 0;
  md::GeometryLogic::createXYPlane(&v126, v125, (unint64_t *)&v122, 0.5, 0.5);
  v3 = (char *)v122;
  v2 = v123;
  v5 = v126;
  v4 = v127;
  v6 = operator new(0xA8uLL);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42E4A80;
  *((_QWORD *)this + 339) = ggl::DaVinci::TexturedCompressedMesh::TexturedCompressedMesh((ggl::DaVinci::TexturedCompressedMesh *)(v6 + 3), "/DVGround/ShadowPlane");
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = **(_QWORD **)(*((_QWORD *)this + 339) + 64);
  v12 = *(_QWORD *)(v11 + 8) * v7;
  v13 = *(_QWORD *)(v11 + 72);
  v14 = *(_QWORD *)(v11 + 80) - v13;
  if (v12 != v14)
  {
    if (v12 <= v14)
    {
      if (v12 < v14)
        *(_QWORD *)(v11 + 80) = v13 + v12;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v11 + 72, v12 - v14);
    }
    v15 = *(std::__shared_weak_count **)(v11 + 32);
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    *(_QWORD *)(v11 + 120) = 0;
    *(_DWORD *)(v11 + 112) = 0;
    v18 = *(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72);
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = v18;
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = v18;
  }
  v19 = operator new(0xE0uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_1E42DF488;
  v20 = ggl::BufferData::BufferData((uint64_t)(v19 + 3), qword_1EE5517E8, 3, 0, 6, v7);
  v19[3] = &off_1E42B6F28;
  *((_QWORD *)this + 343) = v20;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = v19;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = operator new(0xE0uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_1E42DF4C0;
  v25 = ggl::BufferData::BufferData((uint64_t)(v24 + 3), qword_1EE5517A8, 3, 0, 6, v7);
  v24[3] = &off_1E42B6F48;
  *((_QWORD *)this + 341) = v25;
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = v24;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = **(_QWORD **)(*((_QWORD *)this + 339) + 64);
  v30 = *(_QWORD *)(v29 + 8) * v7;
  *(_QWORD *)&v31 = 0;
  *(_QWORD *)&v32 = 0;
  if (v30)
    v33 = *(_QWORD *)(v29 + 72);
  else
    v33 = 0;
  *((_QWORD *)&v32 + 1) = **(_QWORD **)(*((_QWORD *)this + 339) + 64);
  v119 = v32;
  v120 = v30;
  v121 = v33;
  v34 = *((_QWORD *)this + 343);
  v35 = *(_QWORD *)(v34 + 8) * v7;
  if (v35)
    v36 = *(__int16 **)(v34 + 72);
  else
    v36 = 0;
  *((_QWORD *)&v31 + 1) = *((_QWORD *)this + 343);
  v116 = v31;
  v117 = v35;
  v118 = v36;
  v37 = *((_QWORD *)this + 341);
  *(_QWORD *)&v38 = 0;
  if (*(_QWORD *)(v37 + 8) * v7)
    v39 = *(char **)(v37 + 72);
  else
    v39 = 0;
  *((_QWORD *)&v38 + 1) = *((_QWORD *)this + 341);
  v113 = v38;
  v114 = *(_QWORD *)(v37 + 8) * v7;
  v115 = v39;
  v40 = v126;
  v41 = v127;
  if (v126 != v127)
  {
    v42 = v125[0];
    v43 = v127 - v126 - 12;
    if (v43 > 0x53)
    {
      v44 = 0;
      v45 = v43 / 0xC;
      v46 = 8 * v45 + 8;
      v47 = v33 + v46;
      v48 = 4 * v45 + 4;
      v49 = (char *)v36 + v48;
      v51 = v33 + 4 < v125[0] + v46 && v125[0] < v47;
      v52 = (__int16 *)&v39[v48];
      v54 = v39 < v49 && v36 < v52;
      v55 = (unint64_t)v126 >= v47 || v33 + 4 >= (unint64_t)&v126[12 * v45 + 12];
      if (v55 && !v51 && !v54)
      {
        v56 = v45 + 1;
        v44 = v56 & 0x3FFFFFFFFFFFFFFCLL;
        v57 = v33 + 16;
        v58 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
        *(_QWORD *)&v59 = 0x3800380038003800;
        *((_QWORD *)&v59 + 1) = 0x3800380038003800;
        v60 = v126;
        v61 = v39;
        v62 = (const float *)v125[0];
        v63 = v36;
        v64 = v56 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v66 = *((int32x4_t *)v60 + 1);
          v65 = *((_OWORD *)v60 + 2);
          v67 = *(_OWORD *)v60;
          v60 += 48;
          v68.i64[0] = __PAIR64__(HIDWORD(v67), v67);
          v69 = (float32x4_t)vrev64q_s32(v66);
          v69.i32[0] = DWORD1(v67);
          *(_DWORD *)(v57 - 12) = DWORD2(v67);
          v68.i64[1] = __PAIR64__(DWORD1(v65), v66.u32[2]);
          v69.i32[3] = DWORD2(v65);
          *(int16x4_t *)v68.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v68, v58)));
          *(int16x4_t *)v69.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v69, v58)));
          *(_WORD *)(v57 - 8) = v68.i16[1];
          *(_WORD *)(v57 - 16) = v68.i16[0];
          *(_WORD *)v57 = v68.i16[2];
          *(_WORD *)(v57 + 8) = v68.i16[3];
          *(_WORD *)(v57 - 6) = v69.i16[1];
          *(_WORD *)(v57 + 2) = v69.i16[2];
          *(_WORD *)(v57 - 14) = v69.i16[0];
          *(_WORD *)(v57 + 10) = v69.i16[3];
          *(_DWORD *)(v57 - 4) = v66.i32[1];
          *(_DWORD *)(v57 + 4) = v65;
          *(_DWORD *)(v57 + 12) = HIDWORD(v65);
          *(_OWORD *)v61 = v59;
          v61 += 16;
          v129 = vld2q_f32(v62);
          v62 += 8;
          *(float16x4_t *)v68.f32 = vcvt_f16_f32(v129.val[0]);
          *(float16x4_t *)v69.f32 = vcvt_f16_f32(v129.val[1]);
          vst2_s16(v63, (int16x4x2_t)v68);
          v63 += 8;
          v57 += 32;
          v64 -= 4;
        }
        while (v64);
        if (v56 == v44)
          goto LABEL_64;
        v40 += 12 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      }
    }
    else
    {
      v44 = 0;
    }
    v70 = (4 * v44) | 2;
    v71 = (__int16 *)((char *)v36 + v70);
    v72 = 8 * v44;
    v73 = v72 + v33 + 2;
    v74 = (int *)(v72 + v42 + 4);
    v75 = &v39[v70];
    do
    {
      v76 = *((float *)v40 + 1);
      *(_WORD *)(v73 - 2) = (int)(float)(*(float *)v40 * 32767.0);
      *(_WORD *)v73 = (int)(float)(v76 * 32767.0);
      *(_DWORD *)(v73 + 2) = *((_DWORD *)v40 + 2);
      *(_DWORD *)(v75 - 2) = 939538432;
      _S0 = *(v74 - 1);
      _S1 = *v74;
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      *(v71 - 1) = _S0;
      *v71 = _S1;
      v71 += 2;
      v73 += 8;
      v74 += 2;
      v75 += 4;
      v40 += 12;
    }
    while (v40 != v41);
  }
LABEL_64:
  v82 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v82->__shared_owners_ = 0;
  v83 = (unint64_t *)&v82->__shared_owners_;
  v82->__shared_weak_owners_ = 0;
  v82->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  v84 = ggl::BufferData::BufferData((uint64_t)&v82[1], 2, 1, 0, 6, (v2 - v3) >> 2);
  LODWORD(v82[10].__vftable) = 0;
  v82[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v82[1].__shared_owners_ = 2;
  v82[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v82[9].__shared_weak_owners_ = (uint64_t)"/DVGround/ShadowPlane/IndexData";
  if (v2 == v3)
    v85 = 0;
  else
    v85 = v82[4].__vftable;
  v86 = v122;
  v87 = (int16x8_t *)v123;
  if (v122 != (int16x8_t *)v123)
  {
    v88 = v123 - (char *)v122 - 4;
    if (v88 <= 0x3B)
    {
      v89 = 0;
      goto LABEL_74;
    }
    v90 = (v88 >> 2) + 1;
    v89 = v90 & 0x7FFFFFFFFFFFFFF0;
    p_on_zero_shared = (int16x8_t *)&v85->__on_zero_shared;
    v92 = v122 + 2;
    v93 = v90 & 0x7FFFFFFFFFFFFFF0;
    do
    {
      v95 = v92[-2];
      v94 = v92[-1];
      v97 = *v92;
      v96 = v92[1];
      v92 += 4;
      p_on_zero_shared[-1] = vuzp1q_s16(v95, v94);
      *p_on_zero_shared = vuzp1q_s16(v97, v96);
      p_on_zero_shared += 2;
      v93 -= 16;
    }
    while (v93);
    if (v90 != v89)
    {
      v86 = (int16x8_t *)((char *)v86 + 4 * (v90 & 0x7FFFFFFFFFFFFFF0));
LABEL_74:
      v98 = (_WORD *)((char *)v85 + 2 * v89);
      do
      {
        v99 = v86->i32[0];
        v86 = (int16x8_t *)((char *)v86 + 4);
        *v98++ = v99;
      }
      while (v86 != v87);
    }
  }
  v100 = *((_QWORD *)this + 339);
  do
    v101 = __ldxr(v83);
  while (__stxr(v101 + 1, v83));
  v102 = *(std::__shared_weak_count **)(v100 + 104);
  *(_QWORD *)(v100 + 96) = v84;
  *(_QWORD *)(v100 + 104) = v82;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (v85 && v2 != v3)
  {
    shared_weak_owners = v82[3].__shared_weak_owners_;
    if (shared_weak_owners <= (v2 - v3) >> 1)
      shared_weak_owners = (v2 - v3) >> 1;
    v82[3].__shared_owners_ = 0;
    v82[3].__shared_weak_owners_ = shared_weak_owners;
  }
  do
    v106 = __ldaxr(v83);
  while (__stlxr(v106 - 1, v83));
  if (!v106)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
  }
  if (v115 && v114)
  {
    if ((_QWORD)v113 && *(_BYTE *)(*((_QWORD *)&v113 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v113 + 64))();
    v108 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 56);
    v107 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 64);
    if (v107 == v108)
      v108 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v113 + 1) + 72);
    if (v108)
      v108 = 0;
    if (v107 <= v114)
      v107 = v114;
    if (v107 == v108)
      v107 = v108 + *(_QWORD *)(*((_QWORD *)&v113 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v113 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v113 + 1) + 56) = v108;
    *(_QWORD *)(*((_QWORD *)&v113 + 1) + 64) = v107;
  }
  if (v118 && v117)
  {
    if ((_QWORD)v116 && *(_BYTE *)(*((_QWORD *)&v116 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v116 + 64))();
    v110 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 56);
    v109 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 64);
    if (v109 == v110)
      v110 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v116 + 1) + 72);
    if (v110)
      v110 = 0;
    if (v109 <= v117)
      v109 = v117;
    if (v109 == v110)
      v109 = v110 + *(_QWORD *)(*((_QWORD *)&v116 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v116 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v116 + 1) + 56) = v110;
    *(_QWORD *)(*((_QWORD *)&v116 + 1) + 64) = v109;
  }
  if (v121 && v120)
  {
    if ((_QWORD)v119 && *(_BYTE *)(*((_QWORD *)&v119 + 1) + 17) != 2)
      (*(void (**)(void))(*(_QWORD *)v119 + 64))();
    v112 = *(_QWORD *)(*((_QWORD *)&v119 + 1) + 56);
    v111 = *(_QWORD *)(*((_QWORD *)&v119 + 1) + 64);
    if (v111 == v112)
      v112 = *(_QWORD *)(*((_QWORD *)&v119 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v119 + 1) + 72);
    if (v112)
      v112 = 0;
    if (v111 <= v120)
      v111 = v120;
    if (v111 == v112)
      v111 = v112 + *(_QWORD *)(*((_QWORD *)&v119 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v119 + 1) + 72);
    *(_QWORD *)(*((_QWORD *)&v119 + 1) + 56) = v112;
    *(_QWORD *)(*((_QWORD *)&v119 + 1) + 64) = v111;
  }
  if (v122)
    operator delete(v122);
  if (v125[0])
    operator delete((void *)v125[0]);
  if (v126)
    operator delete(v126);
}

void sub_19FC1E824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void *v23;
  void *v24;
  void *v25;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a9);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a15);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a21);
  v23 = *(void **)(v21 - 136);
  if (v23)
  {
    operator delete(v23);
    v24 = *(void **)(v21 - 112);
    if (!v24)
    {
LABEL_3:
      v25 = *(void **)(v21 - 88);
      if (!v25)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v24 = *(void **)(v21 - 112);
    if (!v24)
      goto LABEL_3;
  }
  operator delete(v24);
  v25 = *(void **)(v21 - 88);
  if (!v25)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v25);
  _Unwind_Resume(a1);
}

void md::ARWalkingContinueLabelFeature::~ARWalkingContinueLabelFeature(md::ARWalkingContinueLabelFeature *this)
{
  md::ARWalkingContinueLabelFeature::~ARWalkingContinueLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_QWORD *)this = &off_1E42A64D0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 45));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 42));
  v5 = (_QWORD *)*((_QWORD *)this + 38);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v7)
    operator delete(v7);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  geo::Pool<md::ARWalkingContinueLabelFeature::Placement>::disposeElements((uint64_t)this + 216);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 28));
  *((_QWORD *)this + 24) = &off_1E42B51B0;

  md::LabelFeature::~LabelFeature(this);
}

uint64_t md::ARWalkingContinueLabelFeature::labelTypeAtPosition()
{
  return 1;
}

uint64_t md::ARWalkingContinueLabelFeature::newRootPart(uint64_t a1, md::LabelManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  float *v19;
  unsigned __int8 v20;
  size_t v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  int v27;
  uint64_t Part;
  uint64_t v29;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  int v35;
  _QWORD __dst[2];
  unint64_t v37;
  uint64_t v38;

  v8 = *(_QWORD *)(a1 + 272);
  if (!v8)
    goto LABEL_15;
  v9 = *(_DWORD *)(a3 + 48);
  v10 = a1 + 272;
  do
  {
    v11 = *(_DWORD *)(v8 + 32);
    v12 = v11 >= v9;
    if (v11 >= v9)
      v13 = (uint64_t *)v8;
    else
      v13 = (uint64_t *)(v8 + 8);
    if (v12)
      v10 = v8;
    v8 = *v13;
  }
  while (*v13);
  if (v10 != a1 + 272 && v9 >= *(_DWORD *)(v10 + 32) && (v14 = *(_QWORD *)(v10 + 40)) != 0)
  {
    v15 = *(_DWORD *)(v14 + 164) == v9;
    v16 = *(void **)(a1 + 200);
    if (!v16)
    {
LABEL_14:
      v35 = 0;
      v17 = "";
      goto LABEL_19;
    }
  }
  else
  {
LABEL_15:
    v15 = 0;
    v16 = *(void **)(a1 + 200);
    if (!v16)
      goto LABEL_14;
  }
  objc_msgSend(v16, "displayText");
  v18 = objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    v32 = *(id *)(a1 + 200);
    v33 = (void *)v18;
    objc_msgSend(v32, "displayText");
    v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v17 = (const char *)objc_msgSend(v34, "UTF8String");
    v35 = 1;
  }
  else
  {
    v33 = 0;
    v35 = 0;
    v17 = "";
  }
LABEL_19:
  v19 = (float *)a3;
  {
    v31 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v31, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v38 = mdm::Allocator::instance(void)::alloc;
  v21 = strlen(v17);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, v24 + 1, 1);
    __dst[1] = v22;
    v37 = v25 | 0x8000000000000000;
    __dst[0] = v23;
    goto LABEL_27;
  }
  HIBYTE(v37) = v21;
  v23 = __dst;
  if (v21)
LABEL_27:
    memmove(v23, v17, v22);
  *((_BYTE *)v23 + v22) = 0;
  if (v35)
  {

  }
  if (v16)
  {

  }
  v26 = (__int128 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
  v27 = (*(unsigned __int8 *)(a4 + 250) >> 4) & 1;
  if (v15)
    Part = md::ARWalkingPerpendicularManeuverLabelPart::createPart(a2, v19, a4, (uint64_t)__dst, v27, v26);
  else
    Part = md::ARWalkingFaceAlignedManeuverLabelPart::createPart(a2, v19, a4, (uint64_t)__dst, v27, v26);
  v29 = Part;
  if (SHIBYTE(v37) < 0)
    (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v38 + 40))(v38, __dst[0], v37 & 0x7FFFFFFFFFFFFFFFLL);
  return v29;
}

void sub_19FC1EB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FC1EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (SHIBYTE(a15) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a16 + 40))(a16, a13, a15 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume(a1);
}

BOOL md::ARWalkingContinueLabelFeature::updateDynamicStyling(md::ARWalkingContinueLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t **v4;
  char *v5;
  unsigned int v6;
  uint64_t **v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  _BOOL8 v12;
  char v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = (uint64_t **)((char *)this + 360);
  v5 = (char *)*((_QWORD *)this + 45);
  if (v5)
  {
    v6 = *((_DWORD *)a3 + 12);
    v7 = (uint64_t **)((char *)this + 360);
    v8 = (char *)*((_QWORD *)this + 45);
    do
    {
      v9 = *((_DWORD *)v8 + 7);
      v10 = v9 >= v6;
      if (v9 >= v6)
        v11 = (char **)v8;
      else
        v11 = (char **)(v8 + 8);
      if (v10)
        v7 = (uint64_t **)v8;
      v8 = *v11;
    }
    while (*v11);
    v12 = v7 != v4 && v6 >= *((_DWORD *)v7 + 7) && *((unsigned __int8 *)v7 + 32) != *((unsigned __int8 *)this + 418);
    v13 = *((_BYTE *)this + 418);
    do
    {
      while (1)
      {
        v14 = v5;
        v15 = *((_DWORD *)v5 + 7);
        if (v6 < v15)
          break;
        if (v15 >= v6)
          goto LABEL_25;
        v5 = (char *)*((_QWORD *)v14 + 1);
        if (!v5)
        {
          v4 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
      v5 = *(char **)v14;
    }
    while (*(_QWORD *)v14);
    v4 = (uint64_t **)v14;
  }
  else
  {
    v12 = 0;
    v13 = *((_BYTE *)this + 418);
    v6 = *((_DWORD *)a3 + 12);
    v14 = (char *)this + 360;
  }
LABEL_22:
  v16 = v14;
  v14 = (char *)operator new(0x28uLL);
  *((_DWORD *)v14 + 7) = v6;
  v14[32] = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = v16;
  *v4 = (uint64_t *)v14;
  v17 = **((_QWORD **)this + 44);
  v18 = (uint64_t *)v14;
  if (v17)
  {
    *((_QWORD *)this + 44) = v17;
    v18 = *v4;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 45), v18);
  ++*((_QWORD *)this + 46);
LABEL_25:
  v14[32] = v13;
  return v12;
}

__int128 *md::ARWalkingContinueLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v10;

  v2 = *(_QWORD *)(a1 + 272);
  if (v2)
  {
    v3 = *a2;
    v4 = a1 + 272;
    do
    {
      v5 = *(_DWORD *)(v2 + 32);
      v6 = v5 >= v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 272 && v3 >= *(_DWORD *)(v4 + 32))
    {
      v8 = *(_QWORD *)(v4 + 40);
      if (v8)
        return (__int128 *)(v8 + 48);
    }
  }
  if ((v10 & 1) != 0)
    return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
  {
    qword_1ECE2FD68 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1ECE2FD58 = 0u;
    dword_1ECE2FD70 = 2139095039;
    word_1ECE2FD74 = 256;
    byte_1ECE2FD76 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

uint64_t md::ARWalkingContinueLabelFeature::facingVector(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 272);
  if (v2)
  {
    v3 = *a2;
    v4 = result + 272;
    do
    {
      v5 = *(_DWORD *)(v2 + 32);
      v6 = v5 >= v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 272 && v3 >= *(_DWORD *)(v4 + 32))
    {
      v8 = *(_QWORD *)(v4 + 40);
      if (v8)
        return *(_QWORD *)(v8 + 96);
    }
  }
  return result;
}

unint64_t md::ARWalkingContinueLabelFeature::skewOffsettingVector(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 272);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 272;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 272 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  v8 = *(_QWORD *)(v4 + 40);
  if (!v8)
    return 0;
  if (*(_DWORD *)(v8 + 164) == v3)
    return 0;
  return *(_QWORD *)(v8 + 108) | *(_QWORD *)(v8 + 108) & 0xFFFFFFFFFFFFFF00;
}

uint64_t md::ARWalkingContinueLabelFeature::skewOffsettingLimits@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 272);
  v4 = 0;
  if (v3)
  {
    v5 = *a2;
    v6 = result + 272;
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != result + 272 && v5 >= *(_DWORD *)(v6 + 32))
    {
      v10 = *(_QWORD *)(v6 + 40);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 164) != v5)
          v4 = *(_QWORD *)(v10 + 120);
      }
    }
  }
  *a3 = v4;
  return result;
}

id md::ARWalkingContinueLabelFeature::arWalkingFeature(id *this)
{
  return this[25];
}

uint64_t md::ARWalkingContinueLabelFeature::labelFeatureType(md::ARWalkingContinueLabelFeature *this)
{
  return 26;
}

uint64_t md::ARWalkingContinueLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 392);
  *a2 = *(_QWORD *)(this + 384);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

unint64_t md::ARWalkingContinueLabelFeature::routeCoordinate(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 272);
  if (!v2)
    return 0xBF80000000000000;
  v3 = *a2;
  v4 = a1 + 272;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 != a1 + 272 && v3 >= *(_DWORD *)(v4 + 32) && (v8 = *(_QWORD *)(v4 + 40)) != 0)
    return *(_QWORD *)(v8 + 128);
  else
    return 0xBF80000000000000;
}

uint64_t md::ARWalkingContinueLabelFeature::isRouteFeature(md::ARWalkingContinueLabelFeature *this)
{
  return 1;
}

void md::ARWalkingContinueLabelFeature::populateDebugNode(id *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  char *v5;
  char *ChildNode;
  id v7;
  void *v8;
  const std::string::value_type *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  _QWORD *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  float v25;
  float v26;
  float v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void **v34;
  void **v35;
  void *v36;
  void **v37;
  void **v38;
  void *v39;
  void **v40;
  void **v41;
  void *v42;
  void **v43;
  unsigned int v44;
  char *v45;
  uint64_t i;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  uint64_t j;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  float v56;
  char *v57;
  char *v58;
  float v59;
  char *v60;
  float v61;
  char *v62;
  float v63;
  float v64;
  float v65;
  void *v66;
  char *v67;
  void *v68;
  char v69[16];
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75[16];
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81[16];
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87[16];
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  char v93[16];
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  char v99[16];
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char v105[8];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD v111[7];
  int v112;
  _QWORD v113[4];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  _BYTE v118[32];
  std::string v119;
  int v120;
  std::string v121;
  void *v122;
  char v123;
  void **v124;
  void *__p;
  void **v126;
  _QWORD v127[7];
  int v128;
  char v129[16];
  std::string::size_type v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char v135[16];
  std::string::size_type v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char v141[16];
  std::string::size_type v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char v147[16];
  std::string::size_type v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  char v153[16];
  std::string::size_type size;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159[16];
  std::string::size_type v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  std::string v165;
  char v166[16];
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  char v172[16];
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  char v178[16];
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  char v184[16];
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  char v190[16];
  double v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  char v196[8];
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  char v202[16];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  char v208[16];
  id v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  char v214[16];
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  char v220[32];
  std::string v221;
  int v222;

  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  v5 = (char *)operator new(0x20uLL);
  v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB34A0;
  strcpy(v5, "ARWalkingContinueLabelFeature");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)&v121);
  operator delete(v5);
  v7 = this[25];
  objc_msgSend(v7, "description");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    *((_BYTE *)&v121.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v121, "VKARWalkingFeature");
    v9 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
    memset(&v221, 0, sizeof(v221));
    v222 = 4;
    if (v9)
    {
      std::string::__assign_external(&v221, v9);
    }
    else
    {
      *((_BYTE *)&v221.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v221, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v220);
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v221.__r_.__value_.__l.__data_);
  }
  v10 = this[48];
  if (v10)
  {
    strcpy((char *)&v121, "DedupingGroupThreshold");
    *((_BYTE *)&v121.__r_.__value_.__s + 23) = 22;
    v11 = v10[35];
    v217 = 0;
    v218 = 0;
    v216 = 0;
    v219 = 2;
    v215 = v11;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v214);
  }
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v121, "BestPlacementOffset");
  v12 = this[51];
  v212 = 0;
  v210 = 0;
  v211 = 0;
  v213 = 2;
  v209 = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v208);
  v13 = this[25];
  objc_msgSend(v13, "route");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "range");
  v66 = v8;
  objc_msgSend(v13, "range");
  objc_msgSend(v68, "distanceFromPoint:toPoint:", v14, v15);
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v121, "RangeLength");
  v206 = 0;
  v204 = 0;
  v205 = 0;
  v207 = 2;
  v203 = v16;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v202);
  strcpy((char *)&v121, "InitialRouteCoordinate");
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 22;
  v17 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)&v121);
  v18 = *((unsigned int *)this + 105);
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v121, "index");
  v200 = 0;
  v199 = 0;
  v201 = 1;
  v198 = 0;
  v197 = v18;
  gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)&v121, (uint64_t)v196);
  v19 = *((float *)this + 106);
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v121, "offset");
  v194 = 0;
  v192 = 0;
  v193 = 0;
  v195 = 2;
  v191 = v19;
  gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)&v121, (uint64_t)v190);
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v121, "Placements");
  v67 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (__int128 *)&v121);
  v20 = this[38];
  if (v20)
  {
    while (1)
    {
      v21 = *(_DWORD *)(v20[2] + 160);
      if (v21)
      {
        std::to_string(&v121, v21);
      }
      else
      {
        *((_BYTE *)&v121.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v121, "UNKNOWN");
      }
      v22 = gdc::DebugTreeNode::createChildNode((uint64_t)v67, (__int128 *)&v121);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v121, "Bearing");
      objc_msgSend(v68, "courseAtRouteCoordinateIndex:", *(unsigned int *)(v20[2] + 128));
      v186 = 0;
      v187 = 0;
      v188 = 0;
      v189 = 2;
      v185 = v23;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v184);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v121, "FaceVector");
      v24 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (__int128 *)&v121);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 120;
      v25 = *(float *)(v20[2] + 96);
      v181 = 0;
      v182 = 0;
      v180 = 0;
      v183 = 2;
      v179 = v25;
      gdc::DebugTreeNode::addProperty((uint64_t)v24, (uint64_t)&v121, (uint64_t)v178);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 121;
      v26 = *(float *)(v20[2] + 100);
      v175 = 0;
      v176 = 0;
      v174 = 0;
      v177 = 2;
      v173 = v26;
      gdc::DebugTreeNode::addProperty((uint64_t)v24, (uint64_t)&v121, (uint64_t)v172);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 122;
      v27 = *(float *)(v20[2] + 104);
      v169 = 0;
      v170 = 0;
      v168 = 0;
      v171 = 2;
      v167 = v27;
      gdc::DebugTreeNode::addProperty((uint64_t)v24, (uint64_t)&v121, (uint64_t)v166);
      md::LabelPoint::coordinate((md::LabelPoint *)&v121, v20[2] + 48);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&v165, "Resolved Coordinate");
      v28 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (__int128 *)&v165);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7627116;
      v162 = 0;
      v163 = 0;
      v161 = 0;
      v164 = 2;
      v160 = v121.__r_.__value_.__r.__words[0];
      gdc::DebugTreeNode::addProperty((uint64_t)v28, (uint64_t)&v165, (uint64_t)v159);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 6778476;
      v156 = 0;
      v157 = 0;
      v155 = 0;
      v158 = 2;
      size = v121.__r_.__value_.__l.__size_;
      gdc::DebugTreeNode::addProperty((uint64_t)v28, (uint64_t)&v165, (uint64_t)v153);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7629921;
      v150 = 0;
      v151 = 0;
      v149 = 0;
      v152 = 2;
      v148 = v121.__r_.__value_.__r.__words[2];
      gdc::DebugTreeNode::addProperty((uint64_t)v28, (uint64_t)&v165, (uint64_t)v147);
      md::LabelPoint::coordinate((md::LabelPoint *)&v121, v20[2]);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 15;
      strcpy((char *)&v165, "Base Coordinate");
      v29 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (__int128 *)&v165);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7627116;
      v144 = 0;
      v145 = 0;
      v143 = 0;
      v146 = 2;
      v142 = v121.__r_.__value_.__r.__words[0];
      gdc::DebugTreeNode::addProperty((uint64_t)v29, (uint64_t)&v165, (uint64_t)v141);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 6778476;
      v138 = 0;
      v139 = 0;
      v137 = 0;
      v140 = 2;
      v136 = v121.__r_.__value_.__l.__size_;
      gdc::DebugTreeNode::addProperty((uint64_t)v29, (uint64_t)&v165, (uint64_t)v135);
      *((_BYTE *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7629921;
      v132 = 0;
      v133 = 0;
      v131 = 0;
      v134 = 2;
      v130 = v121.__r_.__value_.__r.__words[2];
      gdc::DebugTreeNode::addProperty((uint64_t)v29, (uint64_t)&v165, (uint64_t)v129);
      v30 = (char *)operator new(0x28uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB3840;
      strcpy(v30, "HighPrecisionAltitudeRequestIsSet");
      v31 = *(unsigned __int8 *)(v20[2] + 136);
      memset(&v127[4], 0, 24);
      v128 = 0;
      v127[0] = v31;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v127);
      operator delete(v30);
      v32 = v20[2];
      v33 = *(uint64_t **)(v32 + 144);
      if (v33)
        break;
LABEL_44:
      v44 = *(_DWORD *)(v32 + 160);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v121, "Identifier");
      if (v44)
      {
        std::to_string(&v165, v44);
        memset(&v119, 0, sizeof(v119));
        v120 = 4;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__assign_no_alias<true>(&v119, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
          goto LABEL_49;
        }
      }
      else
      {
        *((_BYTE *)&v165.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v165, "UNKNOWN");
        memset(&v119, 0, sizeof(v119));
        v120 = 4;
      }
      v119 = v165;
LABEL_49:
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v118);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v119.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_51;
      }
      else if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_51;
      }
      operator delete(v165.__r_.__value_.__l.__data_);
LABEL_51:
      v45 = (char *)operator new(0x20uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
      strcpy(v45, "FallbackOcclusionStyling");
      for (i = (uint64_t)this[45]; i; i = *(_QWORD *)i)
      {
        v47 = *(_DWORD *)(i + 28);
        if (v44 >= v47)
        {
          if (v47 >= v44)
          {
            i = 1;
            break;
          }
          i += 8;
        }
      }
      v114 = 0;
      v115 = 0;
      v117 = 0;
      v116 = 0;
      v113[0] = i;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v113);
      operator delete(v45);
      v48 = *(_DWORD *)(v32 + 164);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v121, "Identifier");
      if (v48)
      {
        std::to_string(&v165, v48);
        memset(&v119, 0, sizeof(v119));
        v120 = 4;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__assign_no_alias<true>(&v119, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
          goto LABEL_65;
        }
      }
      else
      {
        *((_BYTE *)&v165.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v165, "UNKNOWN");
        memset(&v119, 0, sizeof(v119));
        v120 = 4;
      }
      v119 = v165;
LABEL_65:
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v118);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v119.__r_.__value_.__l.__data_);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
LABEL_74:
          operator delete(v165.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_74;
      }
      v49 = (char *)operator new(0x20uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
      strcpy(v49, "FallbackOcclusionStyling");
      for (j = (uint64_t)this[45]; j; j = *(_QWORD *)j)
      {
        v51 = *(_DWORD *)(j + 28);
        if (v48 >= v51)
        {
          if (v51 >= v48)
          {
            j = 1;
            break;
          }
          j += 8;
        }
      }
      v114 = 0;
      v115 = 0;
      v117 = 0;
      v116 = 0;
      v113[0] = j;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v113);
      operator delete(v49);
      v52 = (char *)operator new(0x28uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB3DF0;
      strcpy(v52, "DidContainUserOnPlacementConstruction");
      v53 = *((unsigned __int8 *)this + 416);
      memset(&v111[4], 0, 24);
      v112 = 0;
      v111[0] = v53;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v111);
      operator delete(v52);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v121, "RouteOffset");
      v54 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (__int128 *)&v121);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v121, "index");
      v55 = *(unsigned int *)(v20[2] + 128);
      v108 = 0;
      v109 = 0;
      v107 = 0;
      v110 = 1;
      v106 = v55;
      gdc::DebugTreeNode::addProperty((uint64_t)v54, (uint64_t)&v121, (uint64_t)v105);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v121, "offset");
      v56 = *(float *)(v20[2] + 132);
      v102 = 0;
      v103 = 0;
      v101 = 0;
      v104 = 2;
      v100 = v56;
      gdc::DebugTreeNode::addProperty((uint64_t)v54, (uint64_t)&v121, (uint64_t)v99);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v121, "SkewOffsetting");
      v57 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (__int128 *)&v121);
      v58 = (char *)operator new(0x19uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB3490;
      strcpy(v58, "PositiveOffsettingLimit");
      v59 = *(float *)(v20[2] + 120);
      v96 = 0;
      v97 = 0;
      v95 = 0;
      v98 = 2;
      v94 = v59;
      gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)&v121, (uint64_t)v93);
      operator delete(v58);
      v60 = (char *)operator new(0x19uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_19FFB3490;
      strcpy(v60, "NegativeOffsettingLimit");
      v61 = *(float *)(v20[2] + 124);
      v90 = 0;
      v91 = 0;
      v89 = 0;
      v92 = 2;
      v88 = v61;
      gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)&v121, (uint64_t)v87);
      operator delete(v60);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v121, "Direction");
      v62 = gdc::DebugTreeNode::createChildNode((uint64_t)v57, (__int128 *)&v121);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 120;
      v63 = *(float *)(v20[2] + 108);
      v84 = 0;
      v85 = 0;
      v83 = 0;
      v86 = 2;
      v82 = v63;
      gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v121, (uint64_t)v81);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 121;
      v64 = *(float *)(v20[2] + 112);
      v78 = 0;
      v79 = 0;
      v77 = 0;
      v80 = 2;
      v76 = v64;
      gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v121, (uint64_t)v75);
      *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 122;
      v65 = *(float *)(v20[2] + 116);
      v72 = 0;
      v73 = 0;
      v71 = 0;
      v74 = 2;
      v70 = v65;
      gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v121, (uint64_t)v69);
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_79;
    }
    md::HighPrecisionAltitudeRequest::createDebugNode((md::HighPrecisionAltitudeRequest *)&v121, v33);
    gdc::DebugTreeNode::addChildNode(v22, (__int128 *)&v121);
    v34 = (void **)__p;
    if (__p)
    {
      v35 = v126;
      v36 = __p;
      if (v126 != __p)
      {
        do
        {
          v37 = (void **)*(v35 - 3);
          if (v37)
          {
            v38 = (void **)*(v35 - 2);
            v39 = *(v35 - 3);
            if (v38 != v37)
            {
              do
              {
                if (*((char *)v38 - 1) < 0)
                  operator delete(*(v38 - 3));
                v38 -= 3;
              }
              while (v38 != v37);
              v39 = *(v35 - 3);
            }
            *(v35 - 2) = v37;
            operator delete(v39);
          }
          v40 = (void **)*(v35 - 6);
          if (v40)
          {
            v41 = (void **)*(v35 - 5);
            v42 = *(v35 - 6);
            if (v41 != v40)
            {
              do
              {
                if (*((char *)v41 - 9) < 0)
                  operator delete(*(v41 - 4));
                v41 -= 8;
              }
              while (v41 != v40);
              v42 = *(v35 - 6);
            }
            *(v35 - 5) = v40;
            operator delete(v42);
          }
          v43 = v35 - 10;
          if (*((char *)v35 - 57) < 0)
            operator delete(*v43);
          v35 -= 10;
        }
        while (v43 != v34);
        v36 = __p;
      }
      v126 = v34;
      operator delete(v36);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v124);
    if (v123 < 0)
    {
      operator delete(v122);
      if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
    }
    else if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      v32 = v20[2];
      goto LABEL_44;
    }
    operator delete(v121.__r_.__value_.__l.__data_);
    goto LABEL_43;
  }
LABEL_79:

}

void sub_19FC20014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingContinueLabelFeature::style(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = a1[34];
  if (!v2)
    goto LABEL_12;
  v3 = a1 + 34;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (v5)
      v3 = (_QWORD *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != a1 + 34 && *((_DWORD *)v3 + 8) <= a2)
  {
    v7 = v3[5];
    if (v7)
    {
      v8 = 0;
      LODWORD(v7) = *(_DWORD *)(v7 + 164) == a2;
      v9 = a1[45];
      if (v9)
        goto LABEL_14;
LABEL_24:
      v14 = 0;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v7) = 0;
  }
  v8 = 1;
  v9 = a1[45];
  if (!v9)
    goto LABEL_24;
LABEL_14:
  v10 = a1 + 45;
  do
  {
    v11 = *(_DWORD *)(v9 + 28);
    v12 = v11 >= a2;
    if (v11 >= a2)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (v12)
      v10 = (_QWORD *)v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 45 || *((_DWORD *)v10 + 7) > a2)
    goto LABEL_24;
  v14 = *((unsigned __int8 *)v10 + 32);
LABEL_25:
  if ((_DWORD)v7)
    v15 = v8;
  else
    v15 = 1;
  v16 = (v7 + 1);
  v17 = v8 == 0;
  v18 = 2;
  if (v17)
    v18 = v16;
  if (v15)
    v18 = 0;
  return a1[12] + 16 * (v14 + v18);
}

void md::ARWalkingContinueLabelFeature::populateStyleQueries(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  int64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unsigned __int8 v80;
  size_t v81;
  _QWORD *v82;
  uint64_t v83;
  int *v84;
  int v85;
  uint64_t v86;
  int *v87;
  int v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  _OWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  int *v104;
  int v105;
  unsigned __int8 v106;
  int *v107;
  int v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  _OWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  __int128 v138;
  __int16 v139;
  char *v140;
  std::__shared_weak_count *v141;
  _QWORD *v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v146 = 0;
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v146 = (_QWORD *)v6;
  }
  v142 = 0;
  v143 = 0;
  v144 = 0;
  {
    v134 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v134, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v145 = mdm::Allocator::instance(void)::alloc;
  v10 = (char *)operator new(0x40uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E42DAB40;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_DWORD *)(v10 + 55) = 0;
  v11 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v10 + 3) = v11;
  if (v11)
  {
    *(_QWORD *)&v12 = -1;
    *((_QWORD *)&v12 + 1) = -1;
    v11[14] = v12;
    v11[15] = v12;
    v11[12] = v12;
    v11[13] = v12;
    v11[10] = v12;
    v11[11] = v12;
    v11[8] = v12;
    v11[9] = v12;
    v11[6] = v12;
    v11[7] = v12;
    v11[4] = v12;
    v11[5] = v12;
    v11[2] = v12;
    v11[3] = v12;
    *v11 = v12;
    v11[1] = v12;
  }
  v13 = 0;
  v14 = 0;
  v140 = v10 + 24;
  v141 = (std::__shared_weak_count *)v10;
  v139 = 256;
  do
  {
    v15 = v13;
    v16 = *((unsigned __int8 *)&v139 + v14);
    if (a1[417])
      v17 = 0;
    else
      v17 = (_DWORD)v16 == 1;
    if (v17)
      goto LABEL_11;
    v18 = v142;
    v143 = v142;
    if ((unint64_t)v142 < v144)
    {
      if (v142)
        *v142 = 0x200010060;
      v19 = v18 + 1;
      goto LABEL_41;
    }
    v20 = (uint64_t)(v144 - (_QWORD)v142) >> 2;
    if (v20 <= 1)
      v20 = 1;
    if (v144 - (unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, 8 * v21, 4);
    if (v22)
    {
      *v22 = 0x200010060;
      v23 = v22;
    }
    else
    {
      v23 = 0;
    }
    v25 = v142;
    v24 = v143;
    v26 = (char *)v143 - (char *)v142;
    if (v143 == v142)
    {
      v28 = v23;
      goto LABEL_39;
    }
    v27 = v26 - 8;
    if ((unint64_t)(v26 - 8) < 0x38)
    {
      v28 = v23;
    }
    else
    {
      v28 = v23;
      if ((unint64_t)((char *)v143 - (char *)v23) >= 0x20)
      {
        v29 = (v27 >> 3) + 1;
        v30 = v23 - 2;
        v31 = (__int128 *)(v143 - 2);
        v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *v31;
          *(v30 - 1) = *(v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 2;
          v32 -= 4;
        }
        while (v32);
        v28 = &v23[-(v29 & 0x3FFFFFFFFFFFFFFCLL)];
        v24 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
      }
    }
    do
    {
      v34 = *--v24;
      *--v28 = v34;
    }
    while (v24 != v25);
LABEL_38:
    v24 = v142;
LABEL_39:
    v35 = &v22[v21];
    v19 = v23 + 1;
    v142 = v28;
    v143 = v23 + 1;
    v36 = v144;
    v144 = (unint64_t)v35;
    if (v24)
      (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v145 + 40))(v145, v24, v36 - (_QWORD)v24);
LABEL_41:
    v143 = v19;
    if ((unint64_t)v19 < v144)
    {
      *v19 = 65594;
      v37 = v19 + 1;
      goto LABEL_66;
    }
    v38 = v19 - v142;
    if ((unint64_t)(v38 + 1) >> 61)
      goto LABEL_183;
    v39 = (uint64_t)(v144 - (_QWORD)v142) >> 2;
    if (v39 <= v38 + 1)
      v39 = v38 + 1;
    if (v144 - (unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
    {
      v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, 8 * v40, 4);
      v42 = (_QWORD *)(v41 + 8 * v38);
      v43 = v41 + 8 * v40;
      if (v41)
        *v42 = 65594;
    }
    else
    {
      v43 = 0;
      v42 = (_QWORD *)(8 * v38);
    }
    v45 = v142;
    v44 = v143;
    v46 = (char *)v143 - (char *)v142;
    if (v143 == v142)
    {
      v48 = v42;
      goto LABEL_64;
    }
    v47 = v46 - 8;
    if ((unint64_t)(v46 - 8) < 0x38)
    {
      v48 = v42;
    }
    else
    {
      v48 = v42;
      if ((unint64_t)((char *)v143 - (char *)v42) >= 0x20)
      {
        v49 = (v47 >> 3) + 1;
        v50 = v42 - 2;
        v51 = (__int128 *)(v143 - 2);
        v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = *v51;
          *(v50 - 1) = *(v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 2;
          v52 -= 4;
        }
        while (v52);
        v48 = &v42[-(v49 & 0x3FFFFFFFFFFFFFFCLL)];
        v44 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_63;
      }
    }
    do
    {
      v54 = *--v44;
      *--v48 = v54;
    }
    while (v44 != v45);
LABEL_63:
    v44 = v142;
LABEL_64:
    v37 = v42 + 1;
    v142 = v48;
    v143 = v42 + 1;
    v55 = v144;
    v144 = v43;
    if (v44)
      (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v145 + 40))(v145, v44, v55 - (_QWORD)v44);
LABEL_66:
    v143 = v37;
    if ((unint64_t)v37 < v144)
    {
      *v37 = ((v16 << 32) | 0x1003A) + 51;
      v56 = v37 + 1;
      goto LABEL_91;
    }
    v57 = v37 - v142;
    if ((unint64_t)(v57 + 1) >> 61)
LABEL_183:
      abort();
    v58 = (uint64_t)(v144 - (_QWORD)v142) >> 2;
    if (v58 <= v57 + 1)
      v58 = v57 + 1;
    if (v144 - (unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
    {
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, 8 * v59, 4);
      v61 = (_QWORD *)(v60 + 8 * v57);
      v62 = v60 + 8 * v59;
      if (v60)
        *v61 = ((v16 << 32) | 0x1003A) + 51;
    }
    else
    {
      v62 = 0;
      v61 = (_QWORD *)(8 * v57);
    }
    v64 = v142;
    v63 = v143;
    v65 = (char *)v143 - (char *)v142;
    if (v143 == v142)
    {
      v67 = v61;
      goto LABEL_89;
    }
    v66 = v65 - 8;
    if ((unint64_t)(v65 - 8) < 0x38)
    {
      v67 = v61;
    }
    else
    {
      v67 = v61;
      if ((unint64_t)((char *)v143 - (char *)v61) >= 0x20)
      {
        v68 = (v66 >> 3) + 1;
        v69 = v61 - 2;
        v70 = (__int128 *)(v143 - 2);
        v71 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v72 = *v70;
          *(v69 - 1) = *(v70 - 1);
          *v69 = v72;
          v69 -= 2;
          v70 -= 2;
          v71 -= 4;
        }
        while (v71);
        v67 = &v61[-(v68 & 0x3FFFFFFFFFFFFFFCLL)];
        v63 -= v68 & 0x3FFFFFFFFFFFFFFCLL;
        if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_88;
      }
    }
    do
    {
      v73 = *--v63;
      *--v67 = v73;
    }
    while (v63 != v64);
LABEL_88:
    v63 = v142;
LABEL_89:
    v56 = v61 + 1;
    v142 = v67;
    v143 = v61 + 1;
    v74 = v144;
    v144 = v62;
    if (v63)
      (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v145 + 40))(v145, v63, v74 - (_QWORD)v63);
LABEL_91:
    v143 = v56;
    (*(void (**)(_BYTE *, _QWORD **))(*(_QWORD *)a1 + 544))(a1, &v142);
    v75 = v140;
    v76 = v142;
    if ((((char *)v143 - (char *)v142) & 0x7FFFFFFF8) != 0)
    {
      v77 = 0;
      v78 = 0;
      v79 = ((unint64_t)((char *)v143 - (char *)v142) >> 3);
      v80 = v140[33];
      while (1)
      {
        v81 = v80;
        v82 = *(_QWORD **)v75;
        if (v80)
          break;
LABEL_93:
        v82[v81] = v76[v77];
        v80 = v75[33] + 1;
        v75[33] = v80;
        ++v77;
        v78 = 1;
        if (v77 == v79)
        {
          v82 = *(_QWORD **)v75;
          v81 = v80;
LABEL_110:
          qsort(v82, v81, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_111;
        }
      }
      if (v80 > 0x1Fu)
      {
        do
        {
          v86 = 0;
          v87 = (int *)v82;
          while (1)
          {
            v88 = *v87;
            v87 += 2;
            if (v88 == LODWORD(v76[v77]))
              break;
            if (v81 == ++v86)
              goto LABEL_104;
          }
          HIDWORD(v82[v86]) = HIDWORD(v76[v77]);
LABEL_104:
          ++v77;
        }
        while (v77 != v79);
      }
      else
      {
        do
        {
          v83 = 0;
          v84 = (int *)v82;
          while (1)
          {
            v85 = *v84;
            v84 += 2;
            if (v85 == LODWORD(v76[v77]))
              break;
            if (v81 == ++v83)
              goto LABEL_93;
          }
          HIDWORD(v82[v83]) = HIDWORD(v76[v77++]);
        }
        while (v77 != v79);
      }
      if ((v78 & 1) != 0)
        goto LABEL_110;
    }
LABEL_111:
    v89 = v141;
    *(_QWORD *)&v137 = v75;
    *((_QWORD *)&v137 + 1) = v141;
    if (v141)
    {
      p_shared_owners = (unint64_t *)&v141->__shared_owners_;
      do
        v91 = __ldxr(p_shared_owners);
      while (__stxr(v91 + 1, p_shared_owners));
    }
    v92 = v146;
    md::createFeatureAttributeSet((gss::Allocator *)&v147, (uint64_t *)&v137);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v138, a3, &v147, v92);
    if (v147)
    {
      v148 = v147;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v150 + 40))(v150, v147, v149 - v147);
    }
    if (v89)
    {
      v93 = (unint64_t *)&v89->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v95 = *(_QWORD **)(a2 + 8);
    if ((unint64_t)v95 >= *(_QWORD *)(a2 + 16))
    {
      v99 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v138);
    }
    else
    {
      if (v95)
      {
        *v95 = v138;
        v96 = *((_QWORD *)&v138 + 1);
        v95[1] = *((_QWORD *)&v138 + 1);
        if (v96)
        {
          v97 = (unint64_t *)(v96 + 8);
          do
            v98 = __ldxr(v97);
          while (__stxr(v98 + 1, v97));
        }
      }
      v99 = v95 + 2;
    }
    *(_QWORD *)(a2 + 8) = v99;
    v100 = (uint64_t)v140;
    v101 = v140[33];
    v102 = *(_DWORD **)v140;
    if (v140[33])
    {
      if (v101 >= 0x20)
      {
        v103 = 0;
        v107 = *(int **)v140;
        while (1)
        {
          v108 = *v107;
          v107 += 2;
          if (v108 == 65594)
            break;
          if (v101 == ++v103)
            goto LABEL_139;
        }
      }
      else
      {
        v103 = 0;
        v104 = *(int **)v140;
        while (1)
        {
          v105 = *v104;
          v104 += 2;
          if (v105 == 65594)
            break;
          if (v101 == ++v103)
            goto LABEL_133;
        }
      }
      v102[2 * v103 + 1] = 1;
    }
    else
    {
LABEL_133:
      *(_QWORD *)&v102[2 * v101] = 0x10001003ALL;
      v106 = *(_BYTE *)(v100 + 33) + 1;
      *(_BYTE *)(v100 + 33) = v106;
      qsort(*(void **)v100, v106, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_139:
    v135 = v100;
    v136 = v141;
    if (v141)
    {
      v109 = (unint64_t *)&v141->__shared_owners_;
      do
        v110 = __ldxr(v109);
      while (__stxr(v110 + 1, v109));
    }
    v111 = v146;
    md::createFeatureAttributeSet((gss::Allocator *)&v147, &v135);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v137, a3, &v147, v111);
    if (v147)
    {
      v148 = v147;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v150 + 40))(v150, v147, v149 - v147);
    }
    v112 = v137;
    v137 = 0uLL;
    v113 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    v138 = v112;
    if (!v113)
      goto LABEL_148;
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
      v116 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      if (*((_QWORD *)&v137 + 1))
      {
LABEL_149:
        v117 = (unint64_t *)&v116->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
    }
    else
    {
LABEL_148:
      v116 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
      if (*((_QWORD *)&v137 + 1))
        goto LABEL_149;
    }
    v119 = v136;
    if (v136)
    {
      v120 = (unint64_t *)&v136->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    v122 = *(_QWORD **)(a2 + 8);
    if ((unint64_t)v122 >= *(_QWORD *)(a2 + 16))
    {
      v126 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v138);
    }
    else
    {
      if (v122)
      {
        *v122 = v138;
        v123 = *((_QWORD *)&v138 + 1);
        v122[1] = *((_QWORD *)&v138 + 1);
        if (v123)
        {
          v124 = (unint64_t *)(v123 + 8);
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }
      }
      v126 = v122 + 2;
    }
    *(_QWORD *)(a2 + 8) = v126;
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
    if (*((_QWORD *)&v138 + 1))
    {
      v128 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
LABEL_11:
    v13 = 1;
    v14 = 1;
  }
  while ((v15 & 1) == 0);
  v130 = v141;
  if (v141)
  {
    v131 = (unint64_t *)&v141->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  if (v142)
  {
    v143 = v142;
    (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v145 + 40))(v145, v142, v144 - (_QWORD)v142);
  }
  v133 = v146;
  if (v146)
  {
    if (*((char *)v146 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v146[3] + 40))(v146[3], *v146, v146[2] & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v133, 0x1032C402ED93987);
  }
}

void sub_19FC20C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  MEMORY[0x1A1AF4E00](v14, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19FC20E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 224));
  _Unwind_Resume(a1);
}

void geo::Pool<md::ARWalkingContinueLabelFeature::Placement>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  v31 = &v32;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v32;
      v5 = &v32;
      if (v32)
      {
        v6 = v32;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v31)
        {
          v31 = (uint64_t **)*v31;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v32, v8);
        v3 = ++v33;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_50;
    goto LABEL_52;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = v16 + 168 * v15;
        v18 = v32;
        if (!v32)
          goto LABEL_38;
        v19 = &v32;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v32)
          goto LABEL_38;
        if (v22 < v17)
          v20 = (uint64_t *)v21;
        if (v17 < v20[4])
        {
LABEL_38:
          v24 = *(std::__shared_weak_count **)(v17 + 152);
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        ++v15;
        v14 = *(_QWORD *)(a1 + 24);
      }
      while (v15 < v14);
    }
    v27 = (_QWORD *)v10[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v10[2];
        v12 = *v28 == (_QWORD)v10;
        v10 = v28;
      }
      while (!v12);
    }
    v10 = v28;
  }
  while (v28 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_52:
      free((void *)v10[4]);
      v29 = (_QWORD *)v10[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v10[2];
          v12 = *v30 == (_QWORD)v10;
          v10 = v30;
        }
        while (!v12);
      }
      v10 = v30;
    }
    while (v30 != v11);
  }
LABEL_50:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v32);
}

void sub_19FC21110(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKARWalkingContinueFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B51B0;

  return a1;
}

void geo::_retain_ptr<VKARWalkingContinueFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B51B0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<md::ARWalkingContinueFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,md::ARWalkingContinueFeatureDedupingGroup>,std::allocator<md::ARWalkingContinueFeatureDedupingGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::ARWalkingContinueFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,md::ARWalkingContinueFeatureDedupingGroup>,std::allocator<md::ARWalkingContinueFeatureDedupingGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void md::ARWalkingContinueLabelFeature::prepareCandidatePlacements(geo::PolylineCoordinate const&)::$_0::operator()(id **a1, unsigned int *a2, uint64_t *a3)
{
  id *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  float v17;
  __float2 v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  void *v34;
  uint64_t *v35;
  NSObject *v36;
  std::string *v37;
  void *v38;
  unsigned int v39;
  double v40;
  uint64_t v41;
  char *v42;
  unint64_t *v43;
  uint64_t **v49;
  unint64_t v50;
  unsigned int **v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  void *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  unsigned int v59;
  uint64_t *v60;
  void *v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  float v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t prime;
  void *v80;
  id v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  size_t v85;
  size_t v86;
  size_t v87;
  _QWORD *i;
  size_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  size_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  NSObject *v102;
  std::string *v103;
  id v104;
  uint64_t v105;
  unsigned int v106;
  double v107;
  id v108;
  uint64_t *v109;
  std::string v110;
  uint8_t buf[4];
  std::string *v112;
  __int16 v113;
  id v114;
  __int16 v115;
  _BYTE v116[14];
  __int16 v117;
  double v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v6 = a1[3];
  objc_msgSend(**a1, "range");
  objc_msgSend(**a1, "range");
  if ((GEOPolylineCoordinateWithinRange() & 1) == 0)
  {
    if (GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken, &__block_literal_global_26170);
    v36 = GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v37 = (std::string *)**a1;
      v38 = (void *)*a3;
      v39 = *a2;
      v40 = *((float *)a2 + 1);
      *(_DWORD *)buf = 138413058;
      v112 = v37;
      v113 = 2048;
      v114 = v38;
      v115 = 1024;
      *(_DWORD *)v116 = v39;
      *(_WORD *)&v116[4] = 2048;
      *(double *)&v116[6] = v40;
      _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_INFO, "Failed to add placement for %@ - distanceFromStart:%f routeCoordinate:(%d,%f)", buf, 0x26u);
    }
    return;
  }
  v109 = a3;
  objc_msgSend(*a1[1], "pointWithAltitudeCorrectionAtRouteCoordinate:", *(_QWORD *)a2);
  v8 = v7;
  v10 = v9;
  v12 = tan(v11 * 0.00872664626 + 0.785398163);
  v13 = v8 * 0.00277777778 + 0.5;
  v14 = log(v12) * 0.159154943 + 0.5;
  objc_msgSend(*a1[1], "courseAtRouteCoordinateIndex:", *a2);
  v16 = fmod(360.0 - v15, 360.0);
  v17 = fmod(v16 + 360.0, 360.0) * 0.0174532925;
  v18 = __sincosf_stret(v17);
  v19 = 1.0 / sqrtf((float)(v18.__cosval * v18.__cosval) + (float)(v18.__sinval * v18.__sinval));
  v20 = v19 * v18.__cosval;
  v21 = v19 * v18.__sinval;
  v22 = a1[2];
  v23 = *(unsigned int *)v22;
  v24 = (v23 + 1);
  *(_DWORD *)v22 = v23 + 2;
  v25 = v10;
  v26 = (unint64_t)v6[32];
  if (!v26)
  {
    v27 = (unint64_t *)malloc_type_malloc((size_t)v6[31], 0x160B39uLL);
    v28 = v27;
    v30 = (uint64_t **)(v6 + 28);
    v29 = (uint64_t *)v6[28];
    if (v29)
    {
      while (1)
      {
        while (1)
        {
          v31 = (uint64_t **)v29;
          v32 = v29[4];
          if ((unint64_t)v27 >= v32)
            break;
          v29 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_10;
        }
        if (v32 >= (unint64_t)v27)
          break;
        v29 = v31[1];
        if (!v29)
        {
          v30 = v31 + 1;
          goto LABEL_10;
        }
      }
    }
    else
    {
      v31 = (uint64_t **)(v6 + 28);
LABEL_10:
      v33 = (uint64_t *)operator new(0x28uLL);
      v33[4] = (uint64_t)v28;
      *v33 = 0;
      v33[1] = 0;
      v33[2] = (uint64_t)v31;
      *v30 = v33;
      v34 = *(void **)v6[27];
      if (v34)
      {
        v6[27] = v34;
        v35 = *v30;
      }
      else
      {
        v35 = v33;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[28], v35);
      v6[29] = (char *)v6[29] + 1;
    }
    v26 = (unint64_t)v6[32];
    v41 = 168 * (_QWORD)v6[30] - 168;
    if ((v41 & 0x8000000000000000) == 0)
    {
      v42 = (char *)v28 + v41;
      v43 = (unint64_t *)((char *)v28 + v41);
      do
      {
        *v43 = v26;
        v43 -= 21;
        v26 = (unint64_t)v42;
        v42 = (char *)v43;
      }
      while (v43 >= v28);
      v26 = (unint64_t)(v43 + 21);
    }
    v6[32] = (id)v26;
  }
  v6[32] = *(id *)v26;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)v26 = 0;
  *(double *)(v26 + 24) = v13;
  *(double *)(v26 + 32) = v14;
  *(float *)(v26 + 40) = v25;
  *(_WORD *)(v26 + 44) = 256;
  *(_BYTE *)(v26 + 46) = 1;
  *(_QWORD *)(v26 + 56) = 0;
  *(_QWORD *)(v26 + 64) = 0;
  *(_QWORD *)(v26 + 48) = 0;
  *(double *)(v26 + 72) = v13;
  *(double *)(v26 + 80) = v14;
  *(float *)(v26 + 88) = v25;
  *(_WORD *)(v26 + 92) = 256;
  *(_BYTE *)(v26 + 94) = 1;
  *(float *)(v26 + 96) = -v18.__sinval;
  *(float *)(v26 + 100) = v18.__cosval;
  *(_DWORD *)(v26 + 104) = 0;
  *(float *)(v26 + 108) = v20;
  *(float *)(v26 + 112) = v21;
  __asm { FMOV            V0.2D, #2.0 }
  *(_QWORD *)(v26 + 116) = _Q0;
  *(_DWORD *)(v26 + 124) = 0x40000000;
  *(_QWORD *)(v26 + 128) = *(_QWORD *)a2;
  *(_BYTE *)(v26 + 136) = 0;
  *(_QWORD *)(v26 + 144) = 0;
  *(_QWORD *)(v26 + 152) = 0;
  *(_QWORD *)(v26 + 160) = v23 | (v24 << 32);
  v49 = (uint64_t **)(v6 + 34);
  v50 = (unint64_t)(v6 + 34);
  v51 = (unsigned int **)(v6 + 34);
  v52 = (unsigned int *)v6[34];
  if (v52)
  {
    while (1)
    {
      while (1)
      {
        v51 = (unsigned int **)v52;
        v53 = v52[8];
        if (v23 >= v53)
          break;
        v52 = *v51;
        v50 = (unint64_t)v51;
        if (!*v51)
          goto LABEL_30;
      }
      if (v53 >= v23)
        break;
      v52 = v51[1];
      if (!v52)
      {
        v50 = (unint64_t)(v51 + 1);
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    v54 = (unsigned int *)v51;
    v51 = (unsigned int **)operator new(0x30uLL);
    *((_DWORD *)v51 + 8) = v23;
    v51[5] = 0;
    *v51 = 0;
    v51[1] = 0;
    v51[2] = v54;
    *(_QWORD *)v50 = v51;
    v55 = *(void **)v6[33];
    v56 = (uint64_t *)v51;
    if (v55)
    {
      v6[33] = v55;
      v56 = *(uint64_t **)v50;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[34], v56);
    v6[35] = (char *)v6[35] + 1;
  }
  v51[5] = (unsigned int *)v26;
  if (*((_BYTE *)v6 + 417))
  {
    v57 = *v49;
    v58 = (uint64_t **)(v6 + 34);
    if (*v49)
    {
      while (1)
      {
        while (1)
        {
          v58 = (uint64_t **)v57;
          v59 = *((_DWORD *)v57 + 8);
          if (v24 >= v59)
            break;
          v57 = *v58;
          v49 = v58;
          if (!*v58)
            goto LABEL_41;
        }
        if (v59 >= v24)
          break;
        v57 = v58[1];
        if (!v57)
        {
          v49 = v58 + 1;
          goto LABEL_41;
        }
      }
    }
    else
    {
LABEL_41:
      v60 = (uint64_t *)v58;
      v58 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v58 + 8) = v24;
      v58[5] = 0;
      *v58 = 0;
      v58[1] = 0;
      v58[2] = v60;
      *v49 = (uint64_t *)v58;
      v61 = *(void **)v6[33];
      v62 = (uint64_t *)v58;
      if (v61)
      {
        v6[33] = v61;
        v62 = *v49;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[34], v62);
      v6[35] = (char *)v6[35] + 1;
    }
    v58[5] = (uint64_t *)v26;
  }
  v63 = 0x9DDFEA08EB382D69 * (((8 * v26) + 8) ^ HIDWORD(v26));
  v64 = 0x9DDFEA08EB382D69 * (HIDWORD(v26) ^ (v63 >> 47) ^ v63);
  v65 = v64 ^ (v64 >> 47);
  v66 = 0x9DDFEA08EB382D69 * v65;
  v67 = (unint64_t)v6[37];
  if (v67)
  {
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      v50 = 0x9DDFEA08EB382D69 * v65;
      if (v66 >= v67)
        v50 = v66 % v67;
    }
    else
    {
      v50 = v66 & (v67 - 1);
    }
    v69 = (_QWORD *)*((_QWORD *)v6[36] + v50);
    if (v69)
    {
      v70 = (_QWORD *)*v69;
      if (v70)
      {
        if (v68.u32[0] < 2uLL)
        {
          while (1)
          {
            v72 = v70[1];
            if (v72 == v66)
            {
              if (v70[2] == v26)
                goto LABEL_126;
            }
            else if ((v72 & (v67 - 1)) != v50)
            {
              goto LABEL_66;
            }
            v70 = (_QWORD *)*v70;
            if (!v70)
              goto LABEL_66;
          }
        }
        do
        {
          v71 = v70[1];
          if (v71 == v66)
          {
            if (v70[2] == v26)
              goto LABEL_126;
          }
          else
          {
            if (v71 >= v67)
              v71 %= v67;
            if (v71 != v50)
              break;
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
    }
  }
LABEL_66:
  v73 = operator new(0x18uLL);
  *v73 = 0;
  v73[1] = v66;
  v73[2] = v26;
  v74 = (float)((unint64_t)v6[39] + 1);
  v75 = *((float *)v6 + 80);
  if (!v67 || (float)(v75 * (float)v67) < v74)
  {
    v76 = 1;
    if (v67 >= 3)
      v76 = (v67 & (v67 - 1)) != 0;
    v77 = v76 | (2 * v67);
    v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78)
      prime = v78;
    else
      prime = v77;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v67 = (unint64_t)v6[37];
    }
    if (prime <= v67)
    {
      if (prime >= v67)
        goto LABEL_103;
      v92 = vcvtps_u32_f32((float)(unint64_t)v6[39] / *((float *)v6 + 80));
      if (v67 < 3 || (v93 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
      {
        v92 = std::__next_prime(v92);
      }
      else
      {
        v94 = 1 << -(char)__clz(v92 - 1);
        if (v92 >= 2)
          v92 = v94;
      }
      if (prime <= v92)
        prime = v92;
      if (prime >= v67)
      {
        v67 = (unint64_t)v6[37];
LABEL_103:
        if ((v67 & (v67 - 1)) != 0)
        {
          if (v66 >= v67)
            v50 = v66 % v67;
          else
            v50 = v66;
        }
        else
        {
          v50 = (v67 - 1) & v66;
        }
        goto LABEL_116;
      }
      if (!prime)
      {
        v108 = v6[36];
        v6[36] = 0;
        if (v108)
          operator delete(v108);
        v67 = 0;
        v6[37] = 0;
        goto LABEL_103;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v80 = operator new(8 * prime);
    v81 = v6[36];
    v6[36] = v80;
    if (v81)
      operator delete(v81);
    v82 = 0;
    v6[37] = (id)prime;
    do
      *((_QWORD *)v6[36] + v82++) = 0;
    while (prime != v82);
    v83 = v6[38];
    if (!v83)
    {
LABEL_102:
      v67 = prime;
      goto LABEL_103;
    }
    v84 = v6 + 38;
    v85 = v83[1];
    v86 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v87 = v85 & v86;
      *((_QWORD *)v6[36] + v87) = v84;
      for (i = (_QWORD *)*v83; *v83; i = (_QWORD *)*v83)
      {
        v89 = i[1] & v86;
        if (v89 == v87)
        {
          v83 = i;
        }
        else
        {
          v90 = v6[36];
          if (v90[v89])
          {
            *v83 = *i;
            v91 = 8 * v89;
            *i = **(_QWORD **)((char *)v6[36] + v91);
            **(_QWORD **)((char *)v6[36] + v91) = i;
          }
          else
          {
            v90[v89] = v83;
            v83 = i;
            v87 = v89;
          }
        }
      }
      goto LABEL_102;
    }
    if (v85 >= prime)
      v85 %= prime;
    *((_QWORD *)v6[36] + v85) = v84;
    v95 = (_QWORD *)*v83;
    if (!*v83)
      goto LABEL_102;
    while (1)
    {
      v97 = v95[1];
      if (v97 >= prime)
        v97 %= prime;
      if (v97 != v85)
      {
        v98 = v6[36];
        if (!v98[v97])
        {
          v98[v97] = v83;
          goto LABEL_107;
        }
        *v83 = *v95;
        v96 = 8 * v97;
        *v95 = **(_QWORD **)((char *)v6[36] + v96);
        **(_QWORD **)((char *)v6[36] + v96) = v95;
        v95 = v83;
      }
      v97 = v85;
LABEL_107:
      v83 = v95;
      v95 = (_QWORD *)*v95;
      v85 = v97;
      if (!v95)
        goto LABEL_102;
    }
  }
LABEL_116:
  v99 = v6[36];
  v100 = (_QWORD *)v99[v50];
  if (v100)
  {
    *v73 = *v100;
  }
  else
  {
    *v73 = v6[38];
    v6[38] = v73;
    v99[v50] = v6 + 38;
    if (!*v73)
      goto LABEL_125;
    v101 = *(_QWORD *)(*v73 + 8);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v101 >= v67)
        v101 %= v67;
    }
    else
    {
      v101 &= v67 - 1;
    }
    v100 = (char *)v6[36] + 8 * v101;
  }
  *v100 = v73;
LABEL_125:
  v6[39] = (char *)v6[39] + 1;
LABEL_126:
  if (GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken, &__block_literal_global_26170);
  v102 = (id)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
  {
    if ((_DWORD)v23)
    {
      std::to_string(&v110, v23);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v103 = &v110;
      else
        v103 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v110.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v110, "UNKNOWN");
      v103 = &v110;
    }
    v104 = **a1;
    v105 = *v109;
    v106 = *a2;
    v107 = *((float *)a2 + 1);
    *(_DWORD *)buf = 136316162;
    v112 = v103;
    v113 = 2112;
    v114 = v104;
    v115 = 2048;
    *(_QWORD *)v116 = v105;
    *(_WORD *)&v116[8] = 1024;
    *(_DWORD *)&v116[10] = v106;
    v117 = 2048;
    v118 = v107;
    _os_log_impl(&dword_19F029000, v102, OS_LOG_TYPE_INFO, "Added placement (%s) for %@ - distanceFromStart:%f routeCoordinate:(%d,%f)", buf, 0x30u);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
  }

}

void sub_19FC21C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL47GEOGetVectorKitARWalkingContinueLabelFeatureLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARWalkingContinueLabelFeature");
  v1 = (void *)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
  GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log = (uint64_t)v0;

}

void md::ARWalkingContinueLabelFeature::setHighPrecisionAltitudeForPlacement(uint64_t a1, unsigned int a2, uint64_t *a3, char a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  md::HighPrecisionAltitudeRequest *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t **v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t **v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;

  v5 = *(_QWORD *)(a1 + 272);
  if (!v5)
    return;
  v9 = a1 + 272;
  do
  {
    v10 = *(_DWORD *)(v5 + 32);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v5;
    else
      v12 = (uint64_t *)(v5 + 8);
    if (v11)
      v9 = v5;
    v5 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 272)
    return;
  if (*(_DWORD *)(v9 + 32) > a2)
    return;
  v13 = *(_QWORD *)(v9 + 40);
  if (!v13)
    return;
  v14 = a5;
  if (a4)
    v15 = v14;
  else
    v15 = 0.0;
  if (!*(_QWORD *)(v13 + 144))
  {
    if (!*a3)
    {
      v16 = 0;
      goto LABEL_21;
    }
    if (md::HighPrecisionAltitudeRequest::resolveResults((md::HighPrecisionAltitudeRequest *)*a3))
    {
      v16 = (md::HighPrecisionAltitudeRequest *)*a3;
LABEL_21:
      *(_BYTE *)(v13 + 136) = 1;
      v17 = a3[1];
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(v13 + 152);
      *(_QWORD *)(v13 + 144) = v16;
      *(_QWORD *)(v13 + 152) = v17;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)(v13 + 48) = *(_OWORD *)v13;
      *(_OWORD *)(v13 + 64) = v23;
      *(_QWORD *)(v13 + 80) = *(_QWORD *)(v13 + 32);
      *(_DWORD *)(v13 + 88) = *(_DWORD *)(v13 + 40);
      *(_DWORD *)(v13 + 91) = *(_DWORD *)(v13 + 43);
      if (a4)
        *(float *)(v13 + 88) = v15;
    }
  }
  v24 = (uint64_t **)(a1 + 336);
  v25 = *(_DWORD *)(v13 + 160);
  v26 = *(uint64_t **)(a1 + 336);
  v27 = (uint64_t **)(a1 + 336);
  v28 = (uint64_t **)(a1 + 336);
  if (v26)
  {
    while (1)
    {
      while (1)
      {
        v28 = (uint64_t **)v26;
        v29 = *((_DWORD *)v26 + 8);
        if (v25 >= v29)
          break;
        v26 = *v28;
        v27 = v28;
        if (!*v28)
          goto LABEL_38;
      }
      if (v29 >= v25)
        break;
      v26 = v28[1];
      if (!v26)
      {
        v27 = v28 + 1;
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    v30 = (uint64_t *)v28;
    v28 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v28 + 8) = v25;
    v28[5] = 0;
    *v28 = 0;
    v28[1] = 0;
    v28[2] = v30;
    *v27 = (uint64_t *)v28;
    v31 = **(_QWORD **)(a1 + 328);
    v32 = (uint64_t *)v28;
    if (v31)
    {
      *(_QWORD *)(a1 + 328) = v31;
      v32 = *v27;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 336), v32);
    ++*(_QWORD *)(a1 + 344);
  }
  v28[5] = (uint64_t *)v13;
  v33 = *(_DWORD *)(v13 + 164);
  v34 = *v24;
  v35 = (uint64_t **)(a1 + 336);
  if (*v24)
  {
    while (1)
    {
      while (1)
      {
        v35 = (uint64_t **)v34;
        v36 = *((_DWORD *)v34 + 8);
        if (v33 >= v36)
          break;
        v34 = *v35;
        v24 = v35;
        if (!*v35)
          goto LABEL_48;
      }
      if (v36 >= v33)
        break;
      v34 = v35[1];
      if (!v34)
      {
        v24 = v35 + 1;
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    v37 = (uint64_t *)v35;
    v35 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v35 + 8) = v33;
    v35[5] = 0;
    *v35 = 0;
    v35[1] = 0;
    v35[2] = v37;
    *v24 = (uint64_t *)v35;
    v38 = **(_QWORD **)(a1 + 328);
    v39 = (uint64_t *)v35;
    if (v38)
    {
      *(_QWORD *)(a1 + 328) = v38;
      v39 = *v24;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 336), v39);
    ++*(_QWORD *)(a1 + 344);
  }
  v35[5] = (uint64_t *)v13;
}

void md::RealisticMapEngineMode::~RealisticMapEngineMode(md::RealisticMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::RealisticMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = *(uint64_t **)(a2 + 1128);
  v4 = *v3;
  v5 = v3[1];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = v4;
    while (*(_BYTE *)v6 != 2)
    {
      v6 += 16;
      if (v6 == v5)
        goto LABEL_31;
    }
  }
  if (v6 != v5)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = (int8x8_t)a3[1];
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v9 = 3;
          if (*(_QWORD *)&v7 <= 3uLL)
            v9 = 3u % a3[1];
        }
        else
        {
          v9 = (v7.i8[0] - 1) & 3;
        }
        v10 = *(uint64_t ***)(*a3 + 8 * v9);
        if (v10)
        {
          v11 = *v10;
          if (v11)
          {
            if (v8.u32[0] < 2uLL)
            {
              v12 = *(_QWORD *)&v7 - 1;
              while (1)
              {
                v14 = v11[1];
                if (v14 == 3)
                {
                  if (*((_BYTE *)v11 + 16) == 3)
                    goto LABEL_29;
                }
                else if ((v14 & v12) != v9)
                {
                  goto LABEL_31;
                }
                v11 = (uint64_t *)*v11;
                if (!v11)
                  goto LABEL_31;
              }
            }
            do
            {
              v13 = v11[1];
              if (v13 == 3)
              {
                if (*((_BYTE *)v11 + 16) == 3)
                {
LABEL_29:
                  if (*((_BYTE *)v11 + 17) == 2)
                    *((_BYTE *)v11 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v13 >= *(_QWORD *)&v7)
                  v13 %= *(_QWORD *)&v7;
                if (v13 != v9)
                  break;
              }
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
    }
  }
LABEL_31:
  v15 = v4;
  if (v4 != v5)
  {
    v15 = v4;
    while (*(_BYTE *)v15 != 5)
    {
      v15 += 16;
      if (v15 == v5)
        goto LABEL_61;
    }
  }
  if (v15 != v5)
  {
    if (*(_QWORD *)(v15 + 8))
    {
      v16 = (int8x8_t)a3[1];
      if (v16)
      {
        v17 = (uint8x8_t)vcnt_s8(v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v18 = 6;
          if (*(_QWORD *)&v16 <= 6uLL)
            v18 = 6u % a3[1];
        }
        else
        {
          v18 = (v16.i8[0] - 1) & 6;
        }
        v19 = *(uint64_t ***)(*a3 + 8 * v18);
        if (v19)
        {
          v20 = *v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              v21 = *(_QWORD *)&v16 - 1;
              while (1)
              {
                v23 = v20[1];
                if (v23 == 6)
                {
                  if (*((_BYTE *)v20 + 16) == 6)
                    goto LABEL_59;
                }
                else if ((v23 & v21) != v18)
                {
                  goto LABEL_61;
                }
                v20 = (uint64_t *)*v20;
                if (!v20)
                  goto LABEL_61;
              }
            }
            do
            {
              v22 = v20[1];
              if (v22 == 6)
              {
                if (*((_BYTE *)v20 + 16) == 6)
                {
LABEL_59:
                  if (*((_BYTE *)v20 + 17) == 2)
                    *((_BYTE *)v20 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v22 >= *(_QWORD *)&v16)
                  v22 %= *(_QWORD *)&v16;
                if (v22 != v18)
                  break;
              }
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
      }
    }
  }
LABEL_61:
  if (v4 != v5)
  {
    while (*(_BYTE *)v4 != 8)
    {
      v4 += 16;
      if (v4 == v5)
        return;
    }
  }
  if (v4 != v5)
  {
    if (*(_QWORD *)(v4 + 8))
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 2u);
  }
}

void md::RealisticMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;

  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (!*(_QWORD *)&v3)
    return;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v3 <= 0x2FED70A4459DFCA1uLL)
      v5 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  v6 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v5);
  if (!v6)
    return;
  v7 = (_QWORD *)*v6;
  if (!v7)
    return;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == 0x2FED70A4459DFCA1)
      {
        if (v7[2] == 0x2FED70A4459DFCA1)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == 0x2FED70A4459DFCA1)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      return;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return;
  }
  if (v7[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
LABEL_22:
  v11 = v7[5];
  if (v11)
  {
    v12 = *(uint64_t **)(a2 + 1128);
    v13 = *v12;
    v14 = v12[1];
    if (v13 != v14)
    {
      while (*(_BYTE *)v13 != 21)
      {
        v13 += 16;
        if (v13 == v14)
          goto LABEL_31;
      }
    }
    if (v13 == v14)
LABEL_31:
      v15 = 0;
    else
      v15 = *(_QWORD *)(v13 + 8) != 0;
    md::StyleLogic::setGroundMode(v11, v15);
  }
}

void ggl::TexturedDrapedSRGBBlendShader::typedReflection(ggl::TexturedDrapedSRGBBlendShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TexturedDrapedSRGBBlendShader::typedReflection(void)::ref = (uint64_t)"TexturedDrapedSRGBBlendShader";
      ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(v2);
      qword_1EE577F60 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
      dword_1EE577F68 = (int)v3;
      ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(v3);
      qword_1EE577F70 = (uint64_t)&ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE577F78 = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
      qword_1EE577F80 = (uint64_t)ggl::texturedDrapedSRGBBlendShaderShaderConstants(void)::ref;
      unk_1EE577F88 = 5;
      qword_1EE577F90 = (uint64_t)ggl::texturedDrapedSRGBBlendShaderShaderTextures(void)::ref;
      unk_1EE577F98 = 1;
      qword_1EE577FA0 = (uint64_t)ggl::texturedDrapedSRGBBlendShaderShaderSamplers(void)::ref;
      unk_1EE577FA8 = 1;
    }
  }
}

void ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedDrapedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<36ul>("TexturedDrapedSRGBBlendShaderVertex");
      *(_DWORD *)algn_1EE5784FC = 0;
      qword_1EE578500 = (uint64_t)"TexturedDrapedSRGBBlendShader";
      unk_1EE578508 = ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE578510 = 1;
      unk_1EE578518 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE578520 = 3;
      unk_1EE578528 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE578530 = 0;
      unk_1EE578538 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE578540 = 0;
      unk_1EE578548 = &ggl::texturedDrapedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE578558 = 0;
      unk_1EE578560 = 0;
      qword_1EE578550 = 0;
    }
  }
}

void ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedDrapedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<38ul>("TexturedDrapedSRGBBlendShaderFragment");
      *(_DWORD *)algn_1EE578574 = 1;
      qword_1EE578578 = (uint64_t)"TexturedDrapedSRGBBlendShader";
      unk_1EE578580 = 0;
      qword_1EE578588 = 0;
      unk_1EE578590 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE578598 = 2;
      unk_1EE5785A0 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE5785A8 = 0;
      unk_1EE5785B0 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE5785B8 = 1;
      unk_1EE5785C0 = &ggl::texturedDrapedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE5785D0 = 0;
      unk_1EE5785D8 = 0;
      qword_1EE5785C8 = 1;
    }
  }
}

void ggl::PoleTexturedBlendShader::typedReflection(ggl::PoleTexturedBlendShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PoleTexturedBlendShader::typedReflection(void)::ref = (uint64_t)"PoleTexturedBlendShader";
      ggl::poleTexturedBlendShaderVertexFunctionDescriptor(v2);
      qword_1EE577F00 = (uint64_t)&ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
      dword_1EE577F08 = (int)v3;
      ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(v3);
      qword_1EE577F10 = (uint64_t)&ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE577F18 = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
      qword_1EE577F20 = (uint64_t)ggl::poleTexturedBlendShaderShaderConstants(void)::ref;
      unk_1EE577F28 = 4;
      qword_1EE577F30 = (uint64_t)ggl::poleTexturedBlendShaderShaderTextures(void)::ref;
      unk_1EE577F38 = 1;
      qword_1EE577F40 = (uint64_t)&ggl::poleTexturedBlendShaderShaderSamplers(void)::ref;
      unk_1EE577F48 = 1;
    }
  }
}

void ggl::poleTexturedBlendShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::poleTexturedBlendShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PoleTexturedBlendShaderVertex");
      *(_DWORD *)algn_1EE57839C = 0;
      qword_1EE5783A0 = (uint64_t)"PoleTexturedBlendShader";
      unk_1EE5783A8 = ggl::poleTexturedBlendShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE5783B0 = 1;
      unk_1EE5783B8 = &ggl::poleTexturedBlendShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE5783C0 = 3;
      unk_1EE5783C8 = &ggl::poleTexturedBlendShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE5783D0 = 0;
      unk_1EE5783D8 = &ggl::poleTexturedBlendShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE5783E0 = 0;
      unk_1EE5783E8 = &ggl::poleTexturedBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE5783F8 = 0;
      unk_1EE578400 = 0;
      qword_1EE5783F0 = 0;
    }
  }
}

void ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::poleTexturedBlendShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("PoleTexturedBlendShaderFragment");
      *(_DWORD *)algn_1EE578484 = 1;
      qword_1EE578488 = (uint64_t)"PoleTexturedBlendShader";
      unk_1EE578490 = 0;
      qword_1EE578498 = 0;
      unk_1EE5784A0 = &ggl::poleTexturedBlendShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE5784A8 = 1;
      unk_1EE5784B0 = &ggl::poleTexturedBlendShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE5784B8 = 0;
      unk_1EE5784C0 = &ggl::poleTexturedBlendShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE5784C8 = 1;
      unk_1EE5784D0 = &ggl::poleTexturedBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE5784E0 = 0;
      unk_1EE5784E8 = 0;
      qword_1EE5784D8 = 1;
    }
  }
}

uint64_t ggl::VertexDataTyped<ggl::Textured::PoleTextured>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Textured::PoleTextured>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Textured::PoleTextured>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::Textured::PoleTexturedMesh::~PoleTexturedMesh(ggl::Textured::PoleTexturedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Textured::PoleTexturedMesh::~PoleTexturedMesh(ggl::Textured::PoleTexturedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Textured::PoleTexturedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Textured::PoleTexturedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Textured::PoleTextured>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Textured::PoleTextured>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Textured::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::Textured::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  if (a2 < 2)
    return 1;
  if (a2 == 2)
    return *(_BYTE *)(*((_QWORD *)this + 2) + 306) != 0;
  return 0;
}

BOOL ggl::Textured::Pos2DUVPipelineSetup::textureIsEnabled(ggl::Textured::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Textured::SRGBBlendPos4DUVPipelineState::~SRGBBlendPos4DUVPipelineState(ggl::Textured::SRGBBlendPos4DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Textured::SRGBBlendPos4DUVPipelineState::SRGBBlendPos4DUVPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  _OWORD *v90;
  ggl::TexturedDrapedSRGBBlendShader *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];

  if ((v7 & 1) == 0)
  {
    v90 = a4;
    v98 = a2;
    v99 = a3;
    a2 = v98;
    a3 = v99;
    a4 = v90;
    if ((_DWORD)v91)
    {
      if ((v92 & 1) == 0)
      {
        if ((_DWORD)v91)
        {
          if ((v95 & 1) == 0
          {
            if ((v97 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::Textured::SRGBBlendPos4DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE577FB8 = &ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineDeviceStructs(void)::ref;
          qword_1EE577FC0 = 0;
          if ((v96 & 1) == 0
          {
            ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE578020 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE578028 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
            unk_1EE578030 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
            qword_1EE578038 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1EE577FC8 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendPos4DUVPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE577FD0 = xmmword_19FFB3030;
        }
      }
      ggl::Textured::SRGBBlendPos4DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::SRGBBlendPos4DUVPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedDrapedSRGBBlendShader::typedReflection(v91);
      qword_1EE583FD0 = (uint64_t)&ggl::TexturedDrapedSRGBBlendShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5845F0 = 0;
        qword_1EE5845F8 = (uint64_t)"";
        dword_1EE584600 = 0;
        qword_1EE584608 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE584610 = 2;
      }
      qword_1EE583FD8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineAttributeStructBinding(void)::attr;
      unk_1EE583FE0 = 1;
      qword_1EE583FE8 = 0;
      unk_1EE583FF0 = 1;
      qword_1EE583FF8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineDeviceStructBinding(void)::ref;
      unk_1EE584000 = 0;
      if ((v94 & 1) == 0
      {
        ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584400 = 0;
        qword_1EE584408 = (uint64_t)"view";
        dword_1EE584410 = 3;
        qword_1EE584418 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantViewBinding(void)::reflection;
        unk_1EE584420 = xmmword_19FFB35A0;
        qword_1EE584430 = 1;
        unk_1EE584438 = "transform";
        dword_1EE584440 = 3;
        qword_1EE584448 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE584450 = xmmword_19FFB3660;
        qword_1EE584460 = 2;
        unk_1EE584468 = "tileScalar";
        dword_1EE584470 = 3;
        qword_1EE584478 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantTileScalarBinding(void)::reflection;
        unk_1EE584480 = xmmword_19FFB3730;
        qword_1EE584490 = 3;
        unk_1EE584498 = "style";
        dword_1EE5844A0 = 3;
        qword_1EE5844A8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE5844B0 = xmmword_19FFB3440;
        qword_1EE5844C0 = 4;
        unk_1EE5844C8 = "alphaTint";
        dword_1EE5844D0 = 3;
        qword_1EE5844D8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE5844E0 = 1;
      }
      qword_1EE584008 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos4DUVPipelineConstantStructBinding(void)::ref;
      unk_1EE584010 = 5;
      a4 = v90;
      a2 = v98;
      a3 = v99;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v102 = *(_OWORD *)a3;
  *(_OWORD *)&v102[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v100 = *a4;
  v101 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Textured::SRGBBlendPos4DUVPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v100;
  *(_OWORD *)(a1 + 272) = v101;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v102;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v102[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_WORD *)(a1 + 305) = 256;
  *(_BYTE *)(a1 + 307) = 1;
  v18 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v19 = vmovl_high_s8(v18);
  v20 = vmovl_s16(*(int16x4_t *)v19.i8);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  v22 = v21;
  v23 = vmovl_s8(*(int8x8_t *)v18.i8);
  v24 = vmovl_s16(*(int16x4_t *)v23.i8);
  v21.i64[0] = v24.u32[0];
  v21.i64[1] = v24.u32[1];
  v25 = v21;
  v26 = vmovl_high_s16(v19);
  v21.i64[0] = v26.u32[0];
  v21.i64[1] = v26.u32[1];
  v27 = v21;
  v28 = vmovl_high_s16(v23);
  v21.i64[0] = v28.u32[0];
  v21.i64[1] = v28.u32[1];
  v29 = v21;
  v21.i64[0] = v20.u32[2];
  v21.i64[1] = v20.u32[3];
  v30 = v21;
  v21.i64[0] = v24.u32[2];
  v21.i64[1] = v24.u32[3];
  v31 = v21;
  v21.i64[0] = v26.u32[2];
  v21.i64[1] = v26.u32[3];
  v32 = v21;
  v21.i64[0] = v28.u32[2];
  v21.i64[1] = v28.u32[3];
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v21);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v32);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v31);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v27);
  v37 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v38 = vmovl_high_s8(v37);
  v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v21.i64[0] = v39.u32[0];
  v21.i64[1] = v39.u32[1];
  v40 = v21;
  *(_QWORD *)a1 = &off_1E4274908;
  v41 = vmovl_s8(*(int8x8_t *)v37.i8);
  v42 = vmovl_s16(*(int16x4_t *)v41.i8);
  v21.i64[0] = v42.u32[0];
  v21.i64[1] = v42.u32[1];
  v43 = v21;
  v44 = vmovl_high_s16(v38);
  v21.i64[0] = v44.u32[0];
  v21.i64[1] = v44.u32[1];
  v45 = v21;
  v46 = vmovl_high_s16(v41);
  v21.i64[0] = v46.u32[0];
  v21.i64[1] = v46.u32[1];
  v47 = v21;
  v21.i64[0] = v39.u32[2];
  v21.i64[1] = v39.u32[3];
  v48 = v21;
  v21.i64[0] = v42.u32[2];
  v21.i64[1] = v42.u32[3];
  v49 = v21;
  v21.i64[0] = v44.u32[2];
  v21.i64[1] = v44.u32[3];
  v50 = v21;
  v21.i64[0] = v46.u32[2];
  v21.i64[1] = v46.u32[3];
  v51 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v50);
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v40), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v22));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v43), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v25));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v45), v36);
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v47), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v48), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v49), v35);
  v58 = vorrq_s8(v51, v34);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v21), v33);
  v60 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v61 = vmovl_s8(*(int8x8_t *)v60.i8);
  v62 = vmovl_high_s16(v61);
  v21.i64[0] = v62.i32[2];
  v21.i64[1] = v62.i32[3];
  v63 = v21;
  v64 = vmovl_high_s8(v60);
  v65 = vmovl_high_s16(v64);
  v21.i64[0] = v65.i32[2];
  v21.i64[1] = v65.i32[3];
  v66 = v21;
  v67 = vmovl_s16(*(int16x4_t *)v61.i8);
  v21.i64[0] = v67.i32[2];
  v21.i64[1] = v67.i32[3];
  v68 = v21;
  v69 = vmovl_s16(*(int16x4_t *)v64.i8);
  v21.i64[0] = v69.i32[2];
  v21.i64[1] = v69.i32[3];
  v70 = v21;
  v21.i64[0] = v62.i32[0];
  v21.i64[1] = v62.i32[1];
  v71 = v21;
  v21.i64[0] = v65.i32[0];
  v21.i64[1] = v65.i32[1];
  v72 = v21;
  v21.i64[0] = v67.i32[0];
  v21.i64[1] = v67.i32[1];
  v73 = v21;
  v21.i64[0] = v69.i32[0];
  v21.i64[1] = v69.i32[1];
  v74 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v21);
  v75 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v76 = vmovl_high_s8(v75);
  v77 = vmovl_s16(*(int16x4_t *)v76.i8);
  v21.i64[0] = v77.i32[0];
  v21.i64[1] = v77.i32[1];
  v78 = v21;
  v79 = vmovl_s8(*(int8x8_t *)v75.i8);
  v80 = vmovl_s16(*(int16x4_t *)v79.i8);
  v21.i64[0] = v80.i32[0];
  v21.i64[1] = v80.i32[1];
  v81 = v21;
  v82 = vmovl_high_s16(v76);
  v21.i64[0] = v82.i32[0];
  v21.i64[1] = v82.i32[1];
  v83 = v21;
  v84 = vmovl_high_s16(v79);
  v21.i64[0] = v84.i32[0];
  v21.i64[1] = v84.i32[1];
  v85 = v21;
  v21.i64[0] = v77.i32[2];
  v21.i64[1] = v77.i32[3];
  v86 = v21;
  v21.i64[0] = v80.i32[2];
  v21.i64[1] = v80.i32[3];
  v87 = v21;
  v21.i64[0] = v82.i32[2];
  v21.i64[1] = v82.i32[3];
  v88 = v21;
  v21.i64[0] = v84.i32[2];
  v21.i64[1] = v84.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v81), vbicq_s8((int8x16_t)xmmword_19FFB3170, v73)), v53), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v78), v74), v52)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v85), vbicq_s8((int8x16_t)xmmword_19FFB3190, v71)), v55), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v83), vbicq_s8((int8x16_t)xmmword_19FFB3180, v72)),
                                               v54))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v87), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v68)), v57), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v86), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v70)), v56)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v21), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v63)), v59), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v88),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v66)),
                                               v58)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Textured::SRGBBlendPos4DUVPipelineSetup::~SRGBBlendPos4DUVPipelineSetup(ggl::Textured::SRGBBlendPos4DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::SRGBBlendPos4DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::SRGBBlendPos4DUVPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 306);
      goto LABEL_5;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::Textured::SRGBBlendPos4DUVPipelineSetup::textureIsEnabled(ggl::Textured::SRGBBlendPos4DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Textured::SRGBBlendPos4DUVPipelineSetup::setTileScalarConstantData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = *(std::__shared_weak_count **)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::Textured::SRGBBlendPos4DUVPipelineSetup::setAlphaTintConstantData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  v3 = *(std::__shared_weak_count **)(a2 + 72);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t ggl::Textured::SRGBBlendPos2DUVPipelineState::SRGBBlendPos2DUVPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7)
{
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  _OWORD *v94;
  ggl::TexturedSRGBBlendShader *v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  _QWORD *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[28];

  if ((v11 & 1) == 0)
  {
    v94 = a4;
    v102 = a2;
    v103 = a3;
    a2 = v102;
    a3 = v103;
    a4 = v94;
    if ((_DWORD)v95)
    {
      if ((v96 & 1) == 0)
      {
        if ((_DWORD)v95)
        {
          if ((v99 & 1) == 0
          {
            if ((v101 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::Textured::SRGBBlendPos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE3C048 = &ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineDeviceStructs(void)::ref;
          qword_1ECE3C050 = 0;
          if ((v100 & 1) == 0
          {
            ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE3C080 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE3C088 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
            unk_1ECE3C090 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
            qword_1ECE3C098 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1ECE3C058 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendPos2DUVPipelineConstantStructs(void)::ref;
          unk_1ECE3C060 = xmmword_19FFB3030;
        }
      }
      ggl::Textured::SRGBBlendPos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::SRGBBlendPos2DUVPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedSRGBBlendShader::typedReflection(v95);
      qword_1ECE2F730 = (uint64_t)&ggl::TexturedSRGBBlendShader::typedReflection(void)::ref;
      if ((v97 & 1) == 0
      {
        ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5845C0 = 0;
        qword_1EE5845C8 = (uint64_t)"";
        dword_1EE5845D0 = 0;
        qword_1EE5845D8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE5845E0 = 2;
      }
      qword_1ECE2F738 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2F740 = 1;
      qword_1ECE2F748 = 0;
      unk_1ECE2F750 = 1;
      qword_1ECE2F758 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2F760 = 0;
      if ((v98 & 1) == 0
      {
        ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584310 = 0;
        qword_1EE584318 = (uint64_t)"view";
        dword_1EE584320 = 3;
        qword_1EE584328 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE584330 = xmmword_19FFB35A0;
        qword_1EE584340 = 1;
        unk_1EE584348 = "transform";
        dword_1EE584350 = 3;
        qword_1EE584358 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantTransformBinding(void)::reflection;
        unk_1EE584360 = xmmword_19FFB3660;
        qword_1EE584370 = 2;
        unk_1EE584378 = "tileScalar";
        dword_1EE584380 = 3;
        qword_1EE584388 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantTileScalarBinding(void)::reflection;
        *(_OWORD *)algn_1EE584390 = xmmword_19FFB3730;
        qword_1EE5843A0 = 3;
        unk_1EE5843A8 = "style";
        dword_1EE5843B0 = 3;
        qword_1EE5843B8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5843C0 = xmmword_19FFB3440;
        qword_1EE5843D0 = 4;
        unk_1EE5843D8 = "alphaTint";
        dword_1EE5843E0 = 3;
        qword_1EE5843E8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE5843F0 = 1;
      }
      qword_1ECE2F768 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendPos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1ECE2F770 = 5;
      a4 = v94;
      a2 = v102;
      a3 = v103;
    }
  }
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  *(_OWORD *)v106 = *(_OWORD *)a3;
  *(_OWORD *)&v106[12] = *(_OWORD *)(a3 + 12);
  v16 = *(_OWORD *)(a3 + 28);
  v17 = *(_BYTE *)(a3 + 44);
  v104 = *a4;
  v105 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Textured::SRGBBlendPos2DUVPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v104;
  *(_OWORD *)(a1 + 272) = v105;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v106;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v106[12];
  *(_OWORD *)(a1 + 92) = v16;
  *(_BYTE *)(a1 + 108) = v17;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 306) = a6;
  *(_BYTE *)(a1 + 307) = a7;
  v22 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v23 = vmovl_high_s8(v22);
  v24 = vmovl_s16(*(int16x4_t *)v23.i8);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v26 = v25;
  v27 = vmovl_s8(*(int8x8_t *)v22.i8);
  v28 = vmovl_s16(*(int16x4_t *)v27.i8);
  v25.i64[0] = v28.u32[0];
  v25.i64[1] = v28.u32[1];
  v29 = v25;
  v30 = vmovl_high_s16(v23);
  v25.i64[0] = v30.u32[0];
  v25.i64[1] = v30.u32[1];
  v31 = v25;
  v32 = vmovl_high_s16(v27);
  v25.i64[0] = v32.u32[0];
  v25.i64[1] = v32.u32[1];
  v33 = v25;
  v25.i64[0] = v24.u32[2];
  v25.i64[1] = v24.u32[3];
  v34 = v25;
  v25.i64[0] = v28.u32[2];
  v25.i64[1] = v28.u32[3];
  v35 = v25;
  v25.i64[0] = v30.u32[2];
  v25.i64[1] = v30.u32[3];
  v36 = v25;
  v25.i64[0] = v32.u32[2];
  v25.i64[1] = v32.u32[3];
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v25);
  v38 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v36);
  v39 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v35);
  v40 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v31);
  v41 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v42 = vmovl_high_s8(v41);
  *(_QWORD *)a1 = &off_1E42BCEB8;
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v25.i64[0] = v43.u32[0];
  v25.i64[1] = v43.u32[1];
  v44 = v25;
  v45 = vmovl_s8(*(int8x8_t *)v41.i8);
  v46 = vmovl_s16(*(int16x4_t *)v45.i8);
  v25.i64[0] = v46.u32[0];
  v25.i64[1] = v46.u32[1];
  v47 = v25;
  v48 = vmovl_high_s16(v42);
  v25.i64[0] = v48.u32[0];
  v25.i64[1] = v48.u32[1];
  v49 = v25;
  v50 = vmovl_high_s16(v45);
  v25.i64[0] = v50.u32[0];
  v25.i64[1] = v50.u32[1];
  v51 = v25;
  v25.i64[0] = v43.u32[2];
  v25.i64[1] = v43.u32[3];
  v52 = v25;
  v25.i64[0] = v46.u32[2];
  v25.i64[1] = v46.u32[3];
  v53 = v25;
  v25.i64[0] = v48.u32[2];
  v25.i64[1] = v48.u32[3];
  v54 = v25;
  v25.i64[0] = v50.u32[2];
  v25.i64[1] = v50.u32[3];
  v55 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v54);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v44), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v26));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v47), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v29));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v49), v40);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v51), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v33));
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v52), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v34));
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v53), v39);
  v62 = vorrq_s8(v55, v38);
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v25), v37);
  v64 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v65 = vmovl_s8(*(int8x8_t *)v64.i8);
  v66 = vmovl_high_s16(v65);
  v25.i64[0] = v66.i32[2];
  v25.i64[1] = v66.i32[3];
  v67 = v25;
  v68 = vmovl_high_s8(v64);
  v69 = vmovl_high_s16(v68);
  v25.i64[0] = v69.i32[2];
  v25.i64[1] = v69.i32[3];
  v70 = v25;
  v71 = vmovl_s16(*(int16x4_t *)v65.i8);
  v25.i64[0] = v71.i32[2];
  v25.i64[1] = v71.i32[3];
  v72 = v25;
  v73 = vmovl_s16(*(int16x4_t *)v68.i8);
  v25.i64[0] = v73.i32[2];
  v25.i64[1] = v73.i32[3];
  v74 = v25;
  v25.i64[0] = v66.i32[0];
  v25.i64[1] = v66.i32[1];
  v75 = v25;
  v25.i64[0] = v69.i32[0];
  v25.i64[1] = v69.i32[1];
  v76 = v25;
  v25.i64[0] = v71.i32[0];
  v25.i64[1] = v71.i32[1];
  v77 = v25;
  v25.i64[0] = v73.i32[0];
  v25.i64[1] = v73.i32[1];
  v78 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v25);
  v79 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v80 = vmovl_high_s8(v79);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v25.i64[0] = v81.i32[0];
  v25.i64[1] = v81.i32[1];
  v82 = v25;
  v83 = vmovl_s8(*(int8x8_t *)v79.i8);
  v84 = vmovl_s16(*(int16x4_t *)v83.i8);
  v25.i64[0] = v84.i32[0];
  v25.i64[1] = v84.i32[1];
  v85 = v25;
  v86 = vmovl_high_s16(v80);
  v25.i64[0] = v86.i32[0];
  v25.i64[1] = v86.i32[1];
  v87 = v25;
  v88 = vmovl_high_s16(v83);
  v25.i64[0] = v88.i32[0];
  v25.i64[1] = v88.i32[1];
  v89 = v25;
  v25.i64[0] = v81.i32[2];
  v25.i64[1] = v81.i32[3];
  v90 = v25;
  v25.i64[0] = v84.i32[2];
  v25.i64[1] = v84.i32[3];
  v91 = v25;
  v25.i64[0] = v86.i32[2];
  v25.i64[1] = v86.i32[3];
  v92 = v25;
  v25.i64[0] = v88.i32[2];
  v25.i64[1] = v88.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v85), vbicq_s8((int8x16_t)xmmword_19FFB3170, v77)), v57), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v82), v78), v56)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v89), vbicq_s8((int8x16_t)xmmword_19FFB3190, v75)), v59), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v87), vbicq_s8((int8x16_t)xmmword_19FFB3180, v76)),
                                               v58))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v91), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v72)), v61), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v90), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v74)), v60)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v25), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v67)), v63), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v92),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v70)),
                                               v62)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Textured::SRGBBlendPos2DUVPipelineSetup::~SRGBBlendPos2DUVPipelineSetup(ggl::Textured::SRGBBlendPos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::SRGBBlendPos2DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::SRGBBlendPos2DUVPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 306);
      goto LABEL_5;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::Textured::SRGBBlendPos2DUVPipelineSetup::textureIsEnabled(ggl::Textured::SRGBBlendPos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::SRGBBlendColormappedPos2DUVPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7)
{
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  _OWORD *v94;
  int v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  _QWORD *v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[28];

  if ((v11 & 1) == 0)
  {
    v94 = a4;
    v105 = a2;
    v106 = a3;
    a2 = v105;
    a3 = v106;
    a4 = v94;
    if (v95)
    {
      if ((v96 & 1) == 0
      {
        if ((v100 & 1) == 0
        {
          if ((v104 & 1) == 0
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1ECE43AC8 = 1;
        }
        ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        *(_QWORD *)algn_1ECE32CF8 = &ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineDeviceStructs(void)::ref;
        qword_1ECE32D00 = 0;
        if ((v101 & 1) == 0
        {
          ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1ECE32D30 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1ECE32D38 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
          unk_1ECE32D40 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
          qword_1ECE32D48 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
        }
        qword_1ECE32D08 = (uint64_t)&ggl::Textured::pipelineDataSRGBBlendColormappedPos2DUVPipelineConstantStructs(void)::ref;
        unk_1ECE32D10 = xmmword_19FFB3020;
      }
      ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::typedReflection(void)::ref;
      if ((v97 & 1) == 0
      {
        ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref = (uint64_t)"TexturedColormappedSRGBTexturedShader";
        if ((v102 & 1) == 0
        {
          qword_1ECE33590 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1ECE33598 = ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE335A0 = 1;
          unk_1ECE335A8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE335B0 = 3;
          unk_1ECE335B8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE335C0 = 0;
          unk_1ECE335C8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref = 103723494;
          qword_1ECE335D0 = 0;
          unk_1ECE335D8 = &ggl::texturedColormappedSRGBTexturedShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE335E8 = 0;
          unk_1ECE335F0 = 0;
          qword_1ECE335E0 = 0;
        }
        qword_1ECE32BB0 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE32BB8 = 103723494;
        if ((v103 & 1) == 0
        {
          qword_1ECE33618 = 0;
          unk_1ECE33620 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE33628 = 2;
          unk_1ECE33630 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref = 0x1F407266DLL;
          qword_1ECE33638 = 0;
          unk_1ECE33640 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE33608 = (uint64_t)"TexturedColormappedSRGBTexturedShader";
          unk_1ECE33610 = 0;
          qword_1ECE33648 = 2;
          unk_1ECE33650 = &ggl::texturedColormappedSRGBTexturedShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE33660 = 0;
          unk_1ECE33668 = 0;
          qword_1ECE33658 = 2;
        }
        qword_1ECE32BC0 = (uint64_t)&ggl::texturedColormappedSRGBTexturedShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE32BC8 = -200858003;
        qword_1ECE32BD0 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderConstants(void)::ref;
        unk_1ECE32BD8 = 5;
        qword_1ECE32BE0 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderTextures(void)::ref;
        unk_1ECE32BE8 = 2;
        qword_1ECE32BF0 = (uint64_t)ggl::texturedColormappedSRGBTexturedShaderShaderSamplers(void)::ref;
        unk_1ECE32BF8 = 2;
      }
      qword_1EE584100 = (uint64_t)&ggl::TexturedColormappedSRGBTexturedShader::typedReflection(void)::ref;
      if ((v98 & 1) == 0
      {
        ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5847B0 = 0;
        qword_1EE5847B8 = (uint64_t)"";
        dword_1EE5847C0 = 0;
        qword_1EE5847C8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineAttributeBinding_0(void)::attr;
        unk_1EE5847D0 = 2;
      }
      qword_1EE584108 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineAttributeStructBinding(void)::attr;
      unk_1EE584110 = 1;
      qword_1EE584118 = 0;
      unk_1EE584120 = 2;
      qword_1EE584128 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineDeviceStructBinding(void)::ref;
      unk_1EE584130 = 0;
      if ((v99 & 1) == 0
      {
        ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE5846C0 = 0;
        qword_1EE5846C8 = (uint64_t)"view";
        dword_1EE5846D0 = 3;
        qword_1EE5846D8 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantViewBinding(void)::reflection;
        unk_1EE5846E0 = xmmword_19FFB35A0;
        qword_1EE5846F0 = 1;
        unk_1EE5846F8 = "transform";
        dword_1EE584700 = 3;
        qword_1EE584708 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE584710 = xmmword_19FFB3660;
        qword_1EE584720 = 2;
        unk_1EE584728 = "tileScalar";
        dword_1EE584730 = 3;
        qword_1EE584738 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantTileScalarBinding(void)::reflection;
        unk_1EE584740 = xmmword_19FFB3730;
        qword_1EE584750 = 3;
        unk_1EE584758 = "style";
        dword_1EE584760 = 3;
        qword_1EE584768 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE584770 = xmmword_19FFB3440;
        qword_1EE584780 = 4;
        unk_1EE584788 = "alphaTint";
        dword_1EE584790 = 3;
        qword_1EE584798 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE5847A0 = 1;
      }
      qword_1EE584138 = (uint64_t)&ggl::Textured::pipelineStateSRGBBlendColormappedPos2DUVPipelineConstantStructBinding(void)::ref;
      unk_1EE584140 = 5;
      a4 = v94;
      a2 = v105;
      a3 = v106;
    }
  }
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  *(_OWORD *)v109 = *(_OWORD *)a3;
  *(_OWORD *)&v109[12] = *(_OWORD *)(a3 + 12);
  v16 = *(_OWORD *)(a3 + 28);
  v17 = *(_BYTE *)(a3 + 44);
  v107 = *a4;
  v108 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v107;
  *(_OWORD *)(a1 + 272) = v108;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v109;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v109[12];
  *(_OWORD *)(a1 + 92) = v16;
  *(_BYTE *)(a1 + 108) = v17;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 306) = a6;
  *(_BYTE *)(a1 + 307) = a7;
  v22 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v23 = vmovl_high_s8(v22);
  v24 = vmovl_s16(*(int16x4_t *)v23.i8);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v26 = v25;
  v27 = vmovl_s8(*(int8x8_t *)v22.i8);
  v28 = vmovl_s16(*(int16x4_t *)v27.i8);
  v25.i64[0] = v28.u32[0];
  v25.i64[1] = v28.u32[1];
  v29 = v25;
  v30 = vmovl_high_s16(v23);
  v25.i64[0] = v30.u32[0];
  v25.i64[1] = v30.u32[1];
  v31 = v25;
  v32 = vmovl_high_s16(v27);
  v25.i64[0] = v32.u32[0];
  v25.i64[1] = v32.u32[1];
  v33 = v25;
  v25.i64[0] = v24.u32[2];
  v25.i64[1] = v24.u32[3];
  v34 = v25;
  v25.i64[0] = v28.u32[2];
  v25.i64[1] = v28.u32[3];
  v35 = v25;
  v25.i64[0] = v30.u32[2];
  v25.i64[1] = v30.u32[3];
  v36 = v25;
  v25.i64[0] = v32.u32[2];
  v25.i64[1] = v32.u32[3];
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v25);
  v38 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v36);
  v39 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v35);
  v40 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v31);
  v41 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v42 = vmovl_high_s8(v41);
  *(_QWORD *)a1 = &off_1E42BCF58;
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v25.i64[0] = v43.u32[0];
  v25.i64[1] = v43.u32[1];
  v44 = v25;
  v45 = vmovl_s8(*(int8x8_t *)v41.i8);
  v46 = vmovl_s16(*(int16x4_t *)v45.i8);
  v25.i64[0] = v46.u32[0];
  v25.i64[1] = v46.u32[1];
  v47 = v25;
  v48 = vmovl_high_s16(v42);
  v25.i64[0] = v48.u32[0];
  v25.i64[1] = v48.u32[1];
  v49 = v25;
  v50 = vmovl_high_s16(v45);
  v25.i64[0] = v50.u32[0];
  v25.i64[1] = v50.u32[1];
  v51 = v25;
  v25.i64[0] = v43.u32[2];
  v25.i64[1] = v43.u32[3];
  v52 = v25;
  v25.i64[0] = v46.u32[2];
  v25.i64[1] = v46.u32[3];
  v53 = v25;
  v25.i64[0] = v48.u32[2];
  v25.i64[1] = v48.u32[3];
  v54 = v25;
  v25.i64[0] = v50.u32[2];
  v25.i64[1] = v50.u32[3];
  v55 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v54);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v44), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v26));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v47), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v29));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v49), v40);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v51), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v33));
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v52), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v34));
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v53), v39);
  v62 = vorrq_s8(v55, v38);
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v25), v37);
  v64 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v65 = vmovl_s8(*(int8x8_t *)v64.i8);
  v66 = vmovl_high_s16(v65);
  v25.i64[0] = v66.i32[2];
  v25.i64[1] = v66.i32[3];
  v67 = v25;
  v68 = vmovl_high_s8(v64);
  v69 = vmovl_high_s16(v68);
  v25.i64[0] = v69.i32[2];
  v25.i64[1] = v69.i32[3];
  v70 = v25;
  v71 = vmovl_s16(*(int16x4_t *)v65.i8);
  v25.i64[0] = v71.i32[2];
  v25.i64[1] = v71.i32[3];
  v72 = v25;
  v73 = vmovl_s16(*(int16x4_t *)v68.i8);
  v25.i64[0] = v73.i32[2];
  v25.i64[1] = v73.i32[3];
  v74 = v25;
  v25.i64[0] = v66.i32[0];
  v25.i64[1] = v66.i32[1];
  v75 = v25;
  v25.i64[0] = v69.i32[0];
  v25.i64[1] = v69.i32[1];
  v76 = v25;
  v25.i64[0] = v71.i32[0];
  v25.i64[1] = v71.i32[1];
  v77 = v25;
  v25.i64[0] = v73.i32[0];
  v25.i64[1] = v73.i32[1];
  v78 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v25);
  v79 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v80 = vmovl_high_s8(v79);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v25.i64[0] = v81.i32[0];
  v25.i64[1] = v81.i32[1];
  v82 = v25;
  v83 = vmovl_s8(*(int8x8_t *)v79.i8);
  v84 = vmovl_s16(*(int16x4_t *)v83.i8);
  v25.i64[0] = v84.i32[0];
  v25.i64[1] = v84.i32[1];
  v85 = v25;
  v86 = vmovl_high_s16(v80);
  v25.i64[0] = v86.i32[0];
  v25.i64[1] = v86.i32[1];
  v87 = v25;
  v88 = vmovl_high_s16(v83);
  v25.i64[0] = v88.i32[0];
  v25.i64[1] = v88.i32[1];
  v89 = v25;
  v25.i64[0] = v81.i32[2];
  v25.i64[1] = v81.i32[3];
  v90 = v25;
  v25.i64[0] = v84.i32[2];
  v25.i64[1] = v84.i32[3];
  v91 = v25;
  v25.i64[0] = v86.i32[2];
  v25.i64[1] = v86.i32[3];
  v92 = v25;
  v25.i64[0] = v88.i32[2];
  v25.i64[1] = v88.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v85), vbicq_s8((int8x16_t)xmmword_19FFB3170, v77)), v57), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v82), v78), v56)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v89), vbicq_s8((int8x16_t)xmmword_19FFB3190, v75)), v59), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v87), vbicq_s8((int8x16_t)xmmword_19FFB3180, v76)),
                                               v58))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v91), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v72)), v61), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v90), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v74)), v60)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v25), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v67)), v63), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v92),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v70)),
                                               v62)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::~SRGBBlendColormappedPos2DUVPipelineSetup(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 306);
      goto LABEL_5;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::textureIsEnabled(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::Textured::Pos2DUVExtendedPipelineState::Pos2DUVExtendedPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  _OWORD *v90;
  ggl::TexturedExtendedShader *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];

  if ((v7 & 1) == 0)
  {
    v90 = a4;
    v98 = a2;
    v99 = a3;
    a2 = v98;
    a3 = v99;
    a4 = v90;
    if ((_DWORD)v91)
    {
      if ((v92 & 1) == 0)
      {
        if ((_DWORD)v91)
        {
          if ((v95 & 1) == 0
          {
            if ((v97 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1ECE44448 = &ggl::Textured::pipelineDataPos2DUVExtendedPipelineDeviceStructs(void)::ref;
          qword_1ECE44450 = 0;
          if ((v96 & 1) == 0
          {
            ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1ECE44480 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1ECE44488 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
            unk_1ECE44490 = ggl::Textured::Style::reflection(void)::reflection;
          }
          qword_1ECE44458 = (uint64_t)&ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref;
          unk_1ECE44460 = xmmword_19FFB48D0;
        }
      }
      ggl::Textured::Pos2DUVExtendedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref;
      ggl::TexturedExtendedShader::typedReflection(v91);
      qword_1ECE2FC10 = (uint64_t)&ggl::TexturedExtendedShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::Textured::pipelineStatePos2DUVExtendedPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE5842E0 = 0;
        qword_1EE5842E8 = (uint64_t)"";
        dword_1EE5842F0 = 0;
        qword_1EE5842F8 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineAttributeBinding_0(void)::attr;
        unk_1EE584300 = 2;
      }
      qword_1ECE2FC18 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineAttributeStructBinding(void)::attr;
      unk_1ECE2FC20 = 1;
      qword_1ECE2FC28 = 0;
      unk_1ECE2FC30 = 1;
      qword_1ECE2FC38 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineDeviceStructBinding(void)::ref;
      unk_1ECE2FC40 = 0;
      if ((v94 & 1) == 0
      {
        ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE584220 = 0;
        qword_1EE584228 = (uint64_t)"view";
        dword_1EE584230 = 3;
        qword_1EE584238 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantViewBinding(void)::reflection;
        unk_1EE584240 = xmmword_19FFB35A0;
        qword_1EE584250 = 1;
        unk_1EE584258 = "transform";
        dword_1EE584260 = 3;
        qword_1EE584268 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE584270 = xmmword_19FFB3660;
        qword_1EE584280 = 2;
        unk_1EE584288 = "tileScalar";
        dword_1EE584290 = 3;
        qword_1EE584298 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantTileScalarBinding(void)::reflection;
        unk_1EE5842A0 = xmmword_19FFB3730;
        qword_1EE5842B0 = 3;
        unk_1EE5842B8 = "style";
        dword_1EE5842C0 = 3;
        qword_1EE5842C8 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5842D0 = 1;
      }
      qword_1ECE2FC48 = (uint64_t)&ggl::Textured::pipelineStatePos2DUVExtendedPipelineConstantStructBinding(void)::ref;
      unk_1ECE2FC50 = 4;
      a4 = v90;
      a2 = v98;
      a3 = v99;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v102 = *(_OWORD *)a3;
  *(_OWORD *)&v102[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v100 = *a4;
  v101 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Textured::Pos2DUVExtendedPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v100;
  *(_OWORD *)(a1 + 272) = v101;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v102;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v102[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_WORD *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 307) = 0;
  v18 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v19 = vmovl_high_s8(v18);
  v20 = vmovl_s16(*(int16x4_t *)v19.i8);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  v22 = v21;
  v23 = vmovl_s8(*(int8x8_t *)v18.i8);
  v24 = vmovl_s16(*(int16x4_t *)v23.i8);
  v21.i64[0] = v24.u32[0];
  v21.i64[1] = v24.u32[1];
  v25 = v21;
  v26 = vmovl_high_s16(v19);
  v21.i64[0] = v26.u32[0];
  v21.i64[1] = v26.u32[1];
  v27 = v21;
  v28 = vmovl_high_s16(v23);
  v21.i64[0] = v28.u32[0];
  v21.i64[1] = v28.u32[1];
  v29 = v21;
  v21.i64[0] = v20.u32[2];
  v21.i64[1] = v20.u32[3];
  v30 = v21;
  v21.i64[0] = v24.u32[2];
  v21.i64[1] = v24.u32[3];
  v31 = v21;
  v21.i64[0] = v26.u32[2];
  v21.i64[1] = v26.u32[3];
  v32 = v21;
  v21.i64[0] = v28.u32[2];
  v21.i64[1] = v28.u32[3];
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v21);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v32);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v31);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v27);
  v37 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v38 = vmovl_high_s8(v37);
  *(_QWORD *)a1 = &off_1E42BCE68;
  v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v21.i64[0] = v39.u32[0];
  v21.i64[1] = v39.u32[1];
  v40 = v21;
  v41 = vmovl_s8(*(int8x8_t *)v37.i8);
  v42 = vmovl_s16(*(int16x4_t *)v41.i8);
  v21.i64[0] = v42.u32[0];
  v21.i64[1] = v42.u32[1];
  v43 = v21;
  v44 = vmovl_high_s16(v38);
  v21.i64[0] = v44.u32[0];
  v21.i64[1] = v44.u32[1];
  v45 = v21;
  v46 = vmovl_high_s16(v41);
  v21.i64[0] = v46.u32[0];
  v21.i64[1] = v46.u32[1];
  v47 = v21;
  v21.i64[0] = v39.u32[2];
  v21.i64[1] = v39.u32[3];
  v48 = v21;
  v21.i64[0] = v42.u32[2];
  v21.i64[1] = v42.u32[3];
  v49 = v21;
  v21.i64[0] = v44.u32[2];
  v21.i64[1] = v44.u32[3];
  v50 = v21;
  v21.i64[0] = v46.u32[2];
  v21.i64[1] = v46.u32[3];
  v51 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v50);
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v40), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v22));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v43), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v25));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v45), v36);
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v47), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v48), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v49), v35);
  v58 = vorrq_s8(v51, v34);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v21), v33);
  v60 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v61 = vmovl_s8(*(int8x8_t *)v60.i8);
  v62 = vmovl_high_s16(v61);
  v21.i64[0] = v62.i32[2];
  v21.i64[1] = v62.i32[3];
  v63 = v21;
  v64 = vmovl_high_s8(v60);
  v65 = vmovl_high_s16(v64);
  v21.i64[0] = v65.i32[2];
  v21.i64[1] = v65.i32[3];
  v66 = v21;
  v67 = vmovl_s16(*(int16x4_t *)v61.i8);
  v21.i64[0] = v67.i32[2];
  v21.i64[1] = v67.i32[3];
  v68 = v21;
  v69 = vmovl_s16(*(int16x4_t *)v64.i8);
  v21.i64[0] = v69.i32[2];
  v21.i64[1] = v69.i32[3];
  v70 = v21;
  v21.i64[0] = v62.i32[0];
  v21.i64[1] = v62.i32[1];
  v71 = v21;
  v21.i64[0] = v65.i32[0];
  v21.i64[1] = v65.i32[1];
  v72 = v21;
  v21.i64[0] = v67.i32[0];
  v21.i64[1] = v67.i32[1];
  v73 = v21;
  v21.i64[0] = v69.i32[0];
  v21.i64[1] = v69.i32[1];
  v74 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v21);
  v75 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v76 = vmovl_high_s8(v75);
  v77 = vmovl_s16(*(int16x4_t *)v76.i8);
  v21.i64[0] = v77.i32[0];
  v21.i64[1] = v77.i32[1];
  v78 = v21;
  v79 = vmovl_s8(*(int8x8_t *)v75.i8);
  v80 = vmovl_s16(*(int16x4_t *)v79.i8);
  v21.i64[0] = v80.i32[0];
  v21.i64[1] = v80.i32[1];
  v81 = v21;
  v82 = vmovl_high_s16(v76);
  v21.i64[0] = v82.i32[0];
  v21.i64[1] = v82.i32[1];
  v83 = v21;
  v84 = vmovl_high_s16(v79);
  v21.i64[0] = v84.i32[0];
  v21.i64[1] = v84.i32[1];
  v85 = v21;
  v21.i64[0] = v77.i32[2];
  v21.i64[1] = v77.i32[3];
  v86 = v21;
  v21.i64[0] = v80.i32[2];
  v21.i64[1] = v80.i32[3];
  v87 = v21;
  v21.i64[0] = v82.i32[2];
  v21.i64[1] = v82.i32[3];
  v88 = v21;
  v21.i64[0] = v84.i32[2];
  v21.i64[1] = v84.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v81), vbicq_s8((int8x16_t)xmmword_19FFB3170, v73)), v53), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v78), v74), v52)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v85), vbicq_s8((int8x16_t)xmmword_19FFB3190, v71)), v55), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v83), vbicq_s8((int8x16_t)xmmword_19FFB3180, v72)),
                                               v54))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v87), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v68)), v57), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v86), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v70)), v56)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v21), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v63)), v59), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v88),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v66)),
                                               v58)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Textured::Pos2DUVExtendedPipelineSetup::~Pos2DUVExtendedPipelineSetup(ggl::Textured::Pos2DUVExtendedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::Pos2DUVExtendedPipelineSetup::constantDataIsEnabled(ggl::Textured::Pos2DUVExtendedPipelineSetup *this, unint64_t a2)
{
  _BOOL8 result;

  result = 1;
  if (a2 >= 2 && a2 != 3)
    return a2 == 2 && *(_BYTE *)(*((_QWORD *)this + 2) + 306) != 0;
  return result;
}

BOOL ggl::Textured::Pos2DUVExtendedPipelineSetup::textureIsEnabled(ggl::Textured::Pos2DUVExtendedPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::Textured::Pos2DUVExtendedPipelineSetup::Pos2DUVExtendedPipelineSetup(ggl::Textured::Pos2DUVExtendedPipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
      unk_1ECE43AC8 = 1;
    }
    ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE44448 = &ggl::Textured::pipelineDataPos2DUVExtendedPipelineDeviceStructs(void)::ref;
    qword_1ECE44450 = 0;
    if ((v5 & 1) == 0
    {
      ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE44480 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE44488 = (uint64_t)ggl::Textured::TileScalar::reflection(void)::reflection;
      unk_1ECE44490 = ggl::Textured::Style::reflection(void)::reflection;
    }
    qword_1ECE44458 = (uint64_t)&ggl::Textured::pipelineDataPos2DUVExtendedPipelineConstantStructs(void)::ref;
    unk_1ECE44460 = xmmword_19FFB48D0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::Textured::Pos2DUVExtendedPipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42BCE38;
  return result;
}

void ggl::Textured::ScreenTexturedQuadPipelineSetup::~ScreenTexturedQuadPipelineSetup(ggl::Textured::ScreenTexturedQuadPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::ScreenTexturedQuadPipelineSetup::constantDataIsEnabled(ggl::Textured::ScreenTexturedQuadPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::ScreenTexturedQuadPipelineSetup::textureIsEnabled(ggl::Textured::ScreenTexturedQuadPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Textured::PoleTexturedBlendPipelineState::~PoleTexturedBlendPipelineState(ggl::Textured::PoleTexturedBlendPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::Textured::PoleTexturedBlendPipelineState::PoleTexturedBlendPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  _OWORD *v90;
  ggl::PoleTexturedBlendShader *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[28];

  if ((v7 & 1) == 0)
  {
    v90 = a4;
    v98 = a2;
    v99 = a3;
    a2 = v98;
    a3 = v99;
    a4 = v90;
    if ((_DWORD)v91)
    {
      if ((v92 & 1) == 0)
      {
        if ((_DWORD)v91)
        {
          if ((v95 & 1) == 0
          {
            if ((v97 & 1) == 0
            {
              ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r = (uint64_t)&ggl::Textured::poleTexturedReflection;
            }
            ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::attributesReflection(void)::r;
            unk_1EE578660 = 1;
          }
          ggl::Textured::PoleTexturedBlendPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Textured::PoleTextured>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE577FE8 = &ggl::Textured::pipelineDataPoleTexturedBlendPipelineDeviceStructs(void)::ref;
          qword_1EE577FF0 = 0;
          if ((v96 & 1) == 0
          {
            ggl::Textured::pipelineDataPoleTexturedBlendPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            *(_QWORD *)algn_1EE578048 = ggl::FlyoverCommon::S2Transform::reflection(void)::reflection;
            qword_1EE578050 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1EE578058 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
          }
          qword_1EE577FF8 = (uint64_t)&ggl::Textured::pipelineDataPoleTexturedBlendPipelineConstantStructs(void)::ref;
          unk_1EE578000 = xmmword_19FFB48D0;
        }
      }
      ggl::Textured::PoleTexturedBlendPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Textured::PoleTexturedBlendPipelineSetup::typedReflection(void)::ref;
      ggl::PoleTexturedBlendShader::typedReflection(v91);
      qword_1EE584020 = (uint64_t)&ggl::PoleTexturedBlendShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::Textured::pipelineStatePoleTexturedBlendPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE584628 = 0;
        qword_1EE584630 = (uint64_t)"";
        dword_1EE584638 = 0;
        qword_1EE584640 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineAttributeBinding_0(void)::attr;
        unk_1EE584648 = 1;
      }
      qword_1EE584028 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineAttributeStructBinding(void)::attr;
      unk_1EE584030 = 1;
      qword_1EE584038 = 0;
      unk_1EE584040 = 1;
      qword_1EE584048 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineDeviceStructBinding(void)::ref;
      unk_1EE584050 = 0;
      if ((v94 & 1) == 0
      {
        ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE5844F8 = 0;
        qword_1EE584500 = (uint64_t)"sharedConstants";
        dword_1EE584508 = 3;
        qword_1EE584510 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE584518 = xmmword_19FFB3030;
        qword_1EE584528 = 1;
        unk_1EE584530 = "s2Transform";
        dword_1EE584538 = 3;
        qword_1EE584540 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantS2TransformBinding(void)::reflection;
        unk_1EE584548 = xmmword_19FFB3C60;
        qword_1EE584558 = 2;
        unk_1EE584560 = "clip";
        dword_1EE584568 = 3;
        qword_1EE584570 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantClipBinding(void)::reflection;
        unk_1EE584578 = xmmword_19FFB3040;
        qword_1EE584588 = 3;
        unk_1EE584590 = "style";
        dword_1EE584598 = 3;
        qword_1EE5845A0 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5845A8 = 3;
      }
      qword_1EE584058 = (uint64_t)&ggl::Textured::pipelineStatePoleTexturedBlendPipelineConstantStructBinding(void)::ref;
      unk_1EE584060 = 4;
      a4 = v90;
      a2 = v98;
      a3 = v99;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v102 = *(_OWORD *)a3;
  *(_OWORD *)&v102[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v100 = *a4;
  v101 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::Textured::PoleTexturedBlendPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v100;
  *(_OWORD *)(a1 + 272) = v101;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v102;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v102[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_WORD *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 307) = 0;
  v18 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v19 = vmovl_high_s8(v18);
  v20 = vmovl_s16(*(int16x4_t *)v19.i8);
  v21.i64[0] = v20.u32[0];
  v21.i64[1] = v20.u32[1];
  v22 = v21;
  v23 = vmovl_s8(*(int8x8_t *)v18.i8);
  v24 = vmovl_s16(*(int16x4_t *)v23.i8);
  v21.i64[0] = v24.u32[0];
  v21.i64[1] = v24.u32[1];
  v25 = v21;
  v26 = vmovl_high_s16(v19);
  v21.i64[0] = v26.u32[0];
  v21.i64[1] = v26.u32[1];
  v27 = v21;
  v28 = vmovl_high_s16(v23);
  v21.i64[0] = v28.u32[0];
  v21.i64[1] = v28.u32[1];
  v29 = v21;
  v21.i64[0] = v20.u32[2];
  v21.i64[1] = v20.u32[3];
  v30 = v21;
  v21.i64[0] = v24.u32[2];
  v21.i64[1] = v24.u32[3];
  v31 = v21;
  v21.i64[0] = v26.u32[2];
  v21.i64[1] = v26.u32[3];
  v32 = v21;
  v21.i64[0] = v28.u32[2];
  v21.i64[1] = v28.u32[3];
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v21);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v32);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v31);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v27);
  v37 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v38 = vmovl_high_s8(v37);
  *(_QWORD *)a1 = &off_1E4274958;
  v39 = vmovl_s16(*(int16x4_t *)v38.i8);
  v21.i64[0] = v39.u32[0];
  v21.i64[1] = v39.u32[1];
  v40 = v21;
  v41 = vmovl_s8(*(int8x8_t *)v37.i8);
  v42 = vmovl_s16(*(int16x4_t *)v41.i8);
  v21.i64[0] = v42.u32[0];
  v21.i64[1] = v42.u32[1];
  v43 = v21;
  v44 = vmovl_high_s16(v38);
  v21.i64[0] = v44.u32[0];
  v21.i64[1] = v44.u32[1];
  v45 = v21;
  v46 = vmovl_high_s16(v41);
  v21.i64[0] = v46.u32[0];
  v21.i64[1] = v46.u32[1];
  v47 = v21;
  v21.i64[0] = v39.u32[2];
  v21.i64[1] = v39.u32[3];
  v48 = v21;
  v21.i64[0] = v42.u32[2];
  v21.i64[1] = v42.u32[3];
  v49 = v21;
  v21.i64[0] = v44.u32[2];
  v21.i64[1] = v44.u32[3];
  v50 = v21;
  v21.i64[0] = v46.u32[2];
  v21.i64[1] = v46.u32[3];
  v51 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v50);
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v40), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v22));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v43), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v25));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v45), v36);
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v47), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v48), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v49), v35);
  v58 = vorrq_s8(v51, v34);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v21), v33);
  v60 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v61 = vmovl_s8(*(int8x8_t *)v60.i8);
  v62 = vmovl_high_s16(v61);
  v21.i64[0] = v62.i32[2];
  v21.i64[1] = v62.i32[3];
  v63 = v21;
  v64 = vmovl_high_s8(v60);
  v65 = vmovl_high_s16(v64);
  v21.i64[0] = v65.i32[2];
  v21.i64[1] = v65.i32[3];
  v66 = v21;
  v67 = vmovl_s16(*(int16x4_t *)v61.i8);
  v21.i64[0] = v67.i32[2];
  v21.i64[1] = v67.i32[3];
  v68 = v21;
  v69 = vmovl_s16(*(int16x4_t *)v64.i8);
  v21.i64[0] = v69.i32[2];
  v21.i64[1] = v69.i32[3];
  v70 = v21;
  v21.i64[0] = v62.i32[0];
  v21.i64[1] = v62.i32[1];
  v71 = v21;
  v21.i64[0] = v65.i32[0];
  v21.i64[1] = v65.i32[1];
  v72 = v21;
  v21.i64[0] = v67.i32[0];
  v21.i64[1] = v67.i32[1];
  v73 = v21;
  v21.i64[0] = v69.i32[0];
  v21.i64[1] = v69.i32[1];
  v74 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v21);
  v75 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v76 = vmovl_high_s8(v75);
  v77 = vmovl_s16(*(int16x4_t *)v76.i8);
  v21.i64[0] = v77.i32[0];
  v21.i64[1] = v77.i32[1];
  v78 = v21;
  v79 = vmovl_s8(*(int8x8_t *)v75.i8);
  v80 = vmovl_s16(*(int16x4_t *)v79.i8);
  v21.i64[0] = v80.i32[0];
  v21.i64[1] = v80.i32[1];
  v81 = v21;
  v82 = vmovl_high_s16(v76);
  v21.i64[0] = v82.i32[0];
  v21.i64[1] = v82.i32[1];
  v83 = v21;
  v84 = vmovl_high_s16(v79);
  v21.i64[0] = v84.i32[0];
  v21.i64[1] = v84.i32[1];
  v85 = v21;
  v21.i64[0] = v77.i32[2];
  v21.i64[1] = v77.i32[3];
  v86 = v21;
  v21.i64[0] = v80.i32[2];
  v21.i64[1] = v80.i32[3];
  v87 = v21;
  v21.i64[0] = v82.i32[2];
  v21.i64[1] = v82.i32[3];
  v88 = v21;
  v21.i64[0] = v84.i32[2];
  v21.i64[1] = v84.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v81), vbicq_s8((int8x16_t)xmmword_19FFB3170, v73)), v53), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v78), v74), v52)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v85), vbicq_s8((int8x16_t)xmmword_19FFB3190, v71)), v55), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v83), vbicq_s8((int8x16_t)xmmword_19FFB3180, v72)),
                                               v54))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v87), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v68)), v57), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v86), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v70)), v56)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v21), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v63)), v59), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v88),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v66)),
                                               v58)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::Textured::PoleTexturedBlendPipelineSetup::~PoleTexturedBlendPipelineSetup(ggl::Textured::PoleTexturedBlendPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Textured::PoleTexturedBlendPipelineSetup::constantDataIsEnabled(ggl::Textured::PoleTexturedBlendPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::Textured::PoleTexturedBlendPipelineSetup::textureIsEnabled(ggl::Textured::PoleTexturedBlendPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void sub_19FC261F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FC262F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FC263C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FC2647C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FC2660C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19FC26680()
{
  JUMPOUT(0x19FC26668);
}

void ggl::OptimizedTraffic::BaseMesh::~BaseMesh(ggl::OptimizedTraffic::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::OptimizedTraffic::BaseMesh::~BaseMesh(ggl::OptimizedTraffic::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::OptimizedTraffic::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::OptimizedTraffic::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::OptimizedTraffic::BasePipelineState::~BasePipelineState(ggl::OptimizedTraffic::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::OptimizedTraffic::BasePipelineSetup::~BasePipelineSetup(ggl::OptimizedTraffic::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::OptimizedTraffic::BasePipelineSetup::constantDataIsEnabled(ggl::OptimizedTraffic::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::OptimizedTraffic::BasePipelineSetup::textureIsEnabled(ggl::OptimizedTraffic::BasePipelineSetup *this)
{
  return 0;
}

void md::SandboxHybridMapEngineMode::~SandboxHybridMapEngineMode(md::SandboxHybridMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SandboxHybridMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  md::SandboxBaseMapEngineMode::applyRenderLayerSettings(a1, a2, a3);
  v5 = *(uint64_t **)(a2 + 1128);
  v6 = *v5;
  v7 = v5[1];
  v8 = v6;
  if (v6 != v7)
  {
    v8 = v6;
    while (*(_BYTE *)v8 != 2)
    {
      v8 += 16;
      if (v8 == v7)
        goto LABEL_8;
    }
  }
  if (v8 == v7 || !*(_QWORD *)(v8 + 8))
  {
LABEL_8:
    if (v6 != v7)
    {
      while (*(_BYTE *)v6 != 4)
      {
        v6 += 16;
        if (v6 == v7)
          return;
      }
    }
    if (v6 == v7 || !*(_QWORD *)(v6 + 8))
      return;
  }
  v9 = (int8x8_t)a3[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = 47;
      if (*(_QWORD *)&v9 <= 0x2FuLL)
        v11 = 0x2Fu % a3[1];
    }
    else
    {
      v11 = (v9.i32[0] - 1) & 0x2FLL;
    }
    v12 = *(uint64_t ***)(*a3 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == 47)
            {
              if (*((_BYTE *)v13 + 16) == 47)
                goto LABEL_35;
            }
            else if ((v16 & v14) != v11)
            {
              return;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              return;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == 47)
          {
            if (*((_BYTE *)v13 + 16) == 47)
            {
LABEL_35:
              if (*((_BYTE *)v13 + 17) == 2)
                *((_BYTE *)v13 + 17) = 1;
              return;
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v9)
              v15 %= *(_QWORD *)&v9;
            if (v15 != v11)
              return;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
}

md::SandboxHybridMapEngineMode *md::SandboxHybridMapEngineMode::SandboxHybridMapEngineMode(md::SandboxHybridMapEngineMode *this, int a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int16 v18;
  __int16 v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2)
    v4 = 9;
  else
    v4 = 7;
  v5 = (_QWORD *)md::SandboxBaseMapEngineMode::SandboxBaseMapEngineMode((uint64_t)this, v4, a2);
  *v5 = &off_1E42A3550;
  v6 = (uint64_t)(v5 + 10);
  if (a2)
  {
    v18 = 45;
    v19 = a2;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(v5 + 10), 0x2Du, &v18)+ 18) = 0x10000;
    v18 = 21;
    v19 = a2;
    v20 = 76;
    v21 = a2;
    v22 = 77;
    v23 = a2;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x15u, &v18)+ 18) = (a2 << 16) | 1;
    v7 = v21;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v20, &v20)+ 18) = (v7 << 16) | 1;
    v8 = v23;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v22, &v22)+ 18) = (v8 << 16) | 1;
    LOBYTE(v18) = 35;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x23u, &v18)+ 17) = 0;
    LOBYTE(v18) = 47;
    v9 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Fu, &v18);
  }
  else
  {
    v18 = 2;
    v19 = 0;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(v5 + 10), 2u, &v18)+ 18) = 0;
    LOBYTE(v18) = 21;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x15u, &v18)+ 17) = 0;
    v18 = 18;
    v19 = 0;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x12u, &v18)+ 18) = 1;
    LOBYTE(v18) = 43;
    v9 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Bu, &v18);
  }
  *((_BYTE *)v9 + 17) = 2;
  v18 = 19;
  v19 = a2;
  v10 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x13u, &v18);
  if (a2)
    v11 = 65537;
  else
    v11 = 1;
  *(_DWORD *)((char *)v10 + 18) = v11;
  LOBYTE(v18) = 44;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Cu, &v18)+ 17) = 1;
  LOBYTE(v18) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x28u, &v18)+ 17) = 1;
  v18 = 53;
  v19 = a2;
  v20 = 20;
  v21 = a2;
  v22 = 24;
  v23 = a2;
  v24 = 26;
  v25 = a2;
  v26 = 69;
  v27 = a2;
  v28 = 74;
  v29 = a2;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x35u, &v18)+ 18) = (a2 << 16) | 2;
  v12 = v21;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v20, &v20)+ 18) = (v12 << 16) | 2;
  v13 = v23;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v22, &v22)+ 18) = (v13 << 16) | 2;
  v14 = v25;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v24, &v24)+ 18) = (v14 << 16) | 2;
  v15 = v27;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v26, &v26)+ 18) = (v15 << 16) | 2;
  v16 = v29;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v28, &v28)+ 18) = (v16 << 16) | 2;
  return this;
}

void sub_19FC26F64(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  *(_QWORD *)v1 = &off_1E42A1BF8;
  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void altitude::UserViewNode::~UserViewNode(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::UserViewNode::computeView(altitude::UserViewNode *this, const karo::Item *a2, int a3)
{
  uint64_t v3;
  _DWORD *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  double v29[3];
  double v30[4];
  __int128 v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v5 = (_DWORD *)*((_QWORD *)this + 4);
    if (v5[22] != *((_DWORD *)this + 27))
      goto LABEL_6;
    if (a3 == -1)
      a3 = *((_DWORD *)this + 26);
    if (*(_DWORD *)(v3 + 112) != a3)
    {
LABEL_6:
      v6 = *(double **)(*(_QWORD *)v5 + 72);
      v7 = v6[46];
      v8 = v6[47];
      if (v8 * v7 > 0.0)
      {
        v9 = v6[57];
        if (v8 < v7)
        {
          v10 = tan(v9 * 0.5);
          v11 = atan(v8 * v10 / v7);
          v9 = v11 + v11;
        }
        v12 = v6[59];
        v13 = v6[60];
        v14 = v7 / v8;
        v15 = tan(v9 * 0.5);
        *(double *)(v3 + 1000) = v9;
        *(double *)(v3 + 992) = v14;
        *(double *)(v3 + 944) = v12;
        *(_QWORD *)(v3 + 952) = 0x3FF0000000000000;
        *(long double *)(v3 + 976) = -(v15 * v14);
        *(long double *)(v3 + 984) = v15 * v14;
        *(long double *)(v3 + 968) = -v15;
        *(long double *)(v3 + 960) = v15;
        *(double *)(v3 + 1008) = v13;
        *(_BYTE *)(v3 + 1016) = 0;
        v16 = v14 * (v15 + v15);
        v17 = -(v12 - v13 * v12);
        *(long double *)(v3 + 376) = 2.0 / v16;
        *(_OWORD *)(v3 + 384) = 0u;
        *(_OWORD *)(v3 + 400) = 0u;
        *(long double *)(v3 + 416) = 1.0 / v15;
        *(_OWORD *)(v3 + 424) = 0u;
        *(_OWORD *)(v3 + 440) = 0u;
        *(double *)(v3 + 456) = (v13 - v12) / (v12 + -1.0);
        *(_QWORD *)(v3 + 472) = 0;
        *(_QWORD *)(v3 + 480) = 0;
        *(_QWORD *)(v3 + 464) = 0xBFF0000000000000;
        *(double *)(v3 + 488) = v17 / (v12 + -1.0);
        *(_QWORD *)(v3 + 496) = 0;
        *(long double *)(v3 + 1160) = v16 * 0.5;
        *(_OWORD *)(v3 + 1168) = 0u;
        *(_OWORD *)(v3 + 1184) = 0u;
        *(long double *)(v3 + 1200) = v15;
        *(_OWORD *)(v3 + 1208) = 0u;
        *(_OWORD *)(v3 + 1224) = 0u;
        *(_QWORD *)(v3 + 1240) = 0;
        *(double *)(v3 + 1248) = (v12 + -1.0) / v17;
        *(_QWORD *)(v3 + 1256) = 0;
        *(_QWORD *)(v3 + 1264) = 0;
        *(_QWORD *)(v3 + 1272) = 0xBFF0000000000000;
        *(double *)(v3 + 1280) = (v13 - v12) / v17;
        karo::graphics::View::projectionUpdate((karo::graphics::View *)v3, 1);
        gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)&v31, (double *)this + 6);
        v18 = *((double *)this + 7);
        v19 = *((double *)this + 8);
        v20 = __sincos_stret(*((double *)this + 6));
        v21 = 6378137.0 / sqrt(v20.__sinval * v20.__sinval * -0.00669437999 + 1.0);
        v22 = (v21 + v19) * v20.__cosval;
        v23 = __sincos_stret(v18);
        v29[1] = v22 * v23.__sinval;
        v29[2] = (v19 + v21 * 0.99330562) * v20.__sinval;
        v27 = v31;
        v24 = v33;
        v28 = v32;
        v29[0] = v22 * v23.__cosval;
        v30[0] = (v24 + v24) * v34 + v36 * (v35 * -2.0);
        v30[1] = -((v24 + v24) * v24 - (v35 * -2.0 * v35 + 1.0));
        v30[2] = -(v35 * -2.0 * v34 - (v24 + v24) * v36);
        karo::graphics::View::lookAt(*((double **)this + 5), (double *)&v27, v29, v30);
        altitude::View::updatePoints(*((_QWORD *)this + 5), (double *)this + 6);
        v25 = *((_QWORD *)this + 4);
        v3 = *((_QWORD *)this + 5);
        *((_DWORD *)this + 26) = *(_DWORD *)(v3 + 112);
        *((_DWORD *)this + 27) = *(_DWORD *)(v25 + 88);
      }
    }
  }
  return v3;
}

void altitude::ProcessC3b::~ProcessC3b(altitude::ProcessC3b *this)
{
  altitude::ProcessC3b::~ProcessC3b(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  *(_QWORD *)this = &off_1E42C3900;
  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v3 = *((_QWORD *)this + 37);
    v4 = (void *)*((_QWORD *)this + 36);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 37) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(*((_QWORD **)this + 34));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
LABEL_16:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v11)
      goto LABEL_22;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_22:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v14)
    goto LABEL_26;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (void **)*((_QWORD *)this + 22);
    if (!v17)
      goto LABEL_43;
  }
  else
  {
LABEL_26:
    v17 = (void **)*((_QWORD *)this + 22);
    if (!v17)
      goto LABEL_43;
  }
  v18 = (void **)*((_QWORD *)this + 23);
  v19 = v17;
  if (v18 != v17)
  {
    v20 = (void **)*((_QWORD *)this + 23);
    do
    {
      v23 = (char *)*(v20 - 3);
      v20 -= 3;
      v22 = v23;
      if (v23)
      {
        v24 = (char *)*(v18 - 2);
        v21 = v22;
        if (v24 != v22)
        {
          do
          {
            v25 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
            if (v25)
            {
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v24 -= 16;
          }
          while (v24 != v22);
          v21 = *v20;
        }
        *(v18 - 2) = v22;
        operator delete(v21);
      }
      v18 = v20;
    }
    while (v20 != v17);
    v19 = (void **)*((_QWORD *)this + 22);
  }
  *((_QWORD *)this + 23) = v17;
  operator delete(v19);
LABEL_43:
  karo::Job::~Job(this);
}

uint64_t altitude::ProcessC3b::jobStep(altitude::ProcessC3b *this, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  altitude::ProcessC3b *v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const unsigned __int8 *v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t v14;
  const unsigned __int8 *v15;
  unsigned int v16;
  BOOL v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  altitude::ProcessC3b *v34;
  void **v35;
  void **v36;
  uint64_t result;
  void *v38;
  char *v39;
  char *v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void *v47;
  char *v48;
  char *v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  size_t v54;
  void **v55;
  uint64_t v56;
  void **v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  char *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  __n128 *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __n128 v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  __n128 *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  char *v119;
  __int128 v120;
  _QWORD *v121;
  unint64_t *v122;
  _QWORD *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  __int128 v137;
  char *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  __n128 v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  __n128 *v183;
  unint64_t *v184;
  unint64_t v185;
  __n128 *v186;
  _QWORD *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t **v206;
  uint64_t *v207;
  int v208;
  uint64_t **v209;
  int v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  BOOL v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  BOOL v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  pwin_jpg *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unsigned int v271;
  BOOL v272;
  int v273;
  uint64_t v275;
  _QWORD *v276;
  std::__shared_weak_count *v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  __n128 v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  __n128 *v293;
  unint64_t *v294;
  unint64_t v295;
  __n128 *v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  __n128 v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  _QWORD *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  __n128 *v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  __n128 v335;
  unint64_t *v336;
  unint64_t v337;
  char *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  __n128 *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t *v346;
  char *v347;
  __int128 v348;
  _QWORD *v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t **v352;
  int v353;
  int v354;
  _DWORD *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  unint64_t v367;
  char *v368;
  uint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  _QWORD *v372;
  char *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  char *v379;
  uint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  char *v383;
  __int128 v384;
  char *v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  _QWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t **v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t *v418;
  int v419;
  uint64_t **v420;
  uint64_t **v421;
  int v422;
  _DWORD *v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  _BYTE *v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t *v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t *v441;
  std::__shared_weak_count *v442;
  uint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  uint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  pwin_jpg *v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  uint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t *v469;
  unint64_t v470;
  uint64_t v471;
  std::__shared_weak_count *v472;
  pwin_jpg *v473;
  unint64_t *v474;
  unint64_t v475;
  unsigned __int8 *v476;
  char v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  uint64_t v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t v486;
  _QWORD *v487;
  int v488;
  unsigned int v490;
  unsigned __int8 *v491;
  unint64_t *v492;
  unint64_t v493;
  unint64_t *v494;
  uint64_t v495;
  opaqueCMSampleBuffer *v496;
  const void *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  uint64_t v505;
  std::__shared_weak_count *v506;
  void *v507;
  unint64_t *v508;
  unint64_t v509;
  void *v510;
  opaqueCMFormatDescription *v511;
  void (__cdecl *v512)(std::__shared_weak_count *__hidden);
  unint64_t *v513;
  unint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count_vtbl *v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  int Width;
  int v521;
  _DWORD *v522;
  size_t BytesPerRow;
  uint64_t v524;
  std::__shared_weak_count *v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  _QWORD *v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  _QWORD *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  _QWORD *v541;
  _QWORD *v542;
  NSObject *v543;
  _QWORD *v544;
  _QWORD *v545;
  int64x2_t v546;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v558;
  float64x2_t v559;
  _QWORD *v560;
  _QWORD *v561;
  uint64_t *v562;
  uint64_t *v563;
  uint64_t *v564;
  unsigned int v565;
  uint64_t v566;
  int64x2_t v567;
  int64x2_t v568;
  uint64x2_t v569;
  float64x2_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64x2_t v573;
  uint64x2_t v574;
  uint64x2_t v575;
  uint64x2_t v576;
  uint64x2_t v577;
  uint64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  uint64x2_t v581;
  uint64x2_t v582;
  uint64x2_t v583;
  uint64x2_t v584;
  int64x2_t v585;
  unint64_t v586;
  uint64x2_t v587;
  uint64x2_t v588;
  uint64x2_t v589;
  uint64_t v590;
  uint64_t *v592;
  uint64_t **v593;
  uint64_t **v594;
  int v595;
  _DWORD *v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t i;
  _DWORD *v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  int64x2_t v611;
  int64x2_t v612;
  float64x2_t v613;
  char v614;
  std::__shared_weak_count *v615;
  std::__shared_weak_count *v616;
  float64x2_t v617;
  const void *pixelBuffer;
  __CVBuffer *pixelBuffera;
  __n128 v620;
  __n128 v621;
  __n128 v622;
  __n128 v623;
  uint64_t v624;
  void *BaseAddress;
  float64x2_t v626;
  uint64_t v627;
  _QWORD *v628;
  uint64_t v629;
  size_t Height;
  __n128 v631;
  __n128 v632;
  uint64_t v633;
  uint64_t **v634;
  opaqueCMSampleBuffer *v635;
  std::__shared_weak_count *v636;
  float64x2_t v637;
  uint64_t v638;
  _QWORD *v639;
  int64x2_t v640;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  intptr_t (*v645)(uint64_t, uint64_t, int);
  void *v646;
  __int128 *v647;
  uint8_t *v648;
  uint8_t buf[8];
  uint8_t *v650;
  uint64_t v651;
  uint64_t (*v652)(uint64_t, uint64_t);
  void (*v653)(uint64_t);
  dispatch_semaphore_t v654;
  __int128 v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  uint64_t v664;
  int v665;
  uint64_t v666;

  v5 = this;
  v666 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 78);
  if (v6 != 1)
  {
    if (v6)
      goto LABEL_825;
    v7 = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
    *((double *)v5 + 41) = v7;
    *((double *)v5 + 43) = (v7 - *((double *)v5 + 40)) * 1000.0;
    v8 = *((_QWORD *)v5 + 27);
    if (v8 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8))
      return (*(uint64_t (**)(altitude::ProcessC3b *))(*(_QWORD *)v5 + 16))(v5);
    v9 = *((_QWORD *)v5 + 29);
    if (v9)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9))
        return (*(uint64_t (**)(altitude::ProcessC3b *))(*(_QWORD *)v5 + 16))(v5);
      v10 = *((_QWORD *)v5 + 29);
      LODWORD(v658) = *(_DWORD *)(*((_QWORD *)v5 + 1) + 44);
      BYTE4(v658) = 1;
      if (v10)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10))
        {
          v11 = (const unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 29) + 56))(*((_QWORD *)v5 + 29));
          v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 29) + 48))(*((_QWORD *)v5 + 29));
          v13 = karo::media::C3bLoader::loadFromChunk((karo::media::C3bLoader *)&v658, v11, v12, *((karo::media::C3bModel **)v5 + 31));
          v5 = this;
          if (!v13)
            return (*(uint64_t (**)(altitude::ProcessC3b *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      LODWORD(v658) = *(_DWORD *)(*((_QWORD *)v5 + 1) + 44);
      BYTE4(v658) = 1;
    }
    v14 = *((_QWORD *)v5 + 27);
    if (v14)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
      {
        v15 = (const unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 27) + 56))(*((_QWORD *)v5 + 27));
        v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 27) + 48))(*((_QWORD *)v5 + 27));
        v17 = karo::media::C3bLoader::loadFromChunk((karo::media::C3bLoader *)&v658, v15, v16, *((karo::media::C3bModel **)v5 + 31));
        v5 = this;
        if (!v17)
          return (*(uint64_t (**)(altitude::ProcessC3b *))(*(_QWORD *)v5 + 16))(v5);
      }
    }
    *((double *)v5 + 45) = (*((double *)v5 + 41) + (double)std::chrono::steady_clock::now().__d_.__rep_ * -0.000000001)
                         * -1000.0;
    v19 = *((_QWORD *)v5 + 1);
    v20 = 0x6DB6DB6DB6DB6DB7
        * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 184) - *(_QWORD *)(*((_QWORD *)v5 + 31) + 176)) >> 3);
    v21 = (_QWORD *)*((_QWORD *)v5 + 22);
    v22 = (void **)*((_QWORD *)v5 + 23);
    v23 = 0xAAAAAAAAAAAAAAABLL * (v22 - (void **)v21);
    v24 = v20 - v23;
    if (v20 <= v23)
    {
      if (v20 >= v23)
      {
        v45 = (void **)*((_QWORD *)v5 + 23);
      }
      else
      {
        v45 = (void **)&v21[0x924924924924925
                          * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 184)
                                     - *(_QWORD *)(*((_QWORD *)v5 + 31) + 176)) >> 3)];
        if (v22 != v45)
        {
          v46 = (void **)*((_QWORD *)v5 + 23);
          do
          {
            v49 = (char *)*(v46 - 3);
            v46 -= 3;
            v48 = v49;
            if (v49)
            {
              v50 = (char *)*(v22 - 2);
              v47 = v48;
              if (v50 != v48)
              {
                do
                {
                  v51 = (std::__shared_weak_count *)*((_QWORD *)v50 - 1);
                  if (v51)
                  {
                    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(p_shared_owners);
                    while (__stlxr(v53 - 1, p_shared_owners));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v50 -= 16;
                }
                while (v50 != v48);
                v47 = *v46;
              }
              *(v22 - 2) = v48;
              operator delete(v47);
            }
            v22 = v46;
          }
          while (v46 != v45);
        }
        v5 = this;
        *((_QWORD *)this + 23) = v45;
      }
      goto LABEL_64;
    }
    v25 = *((_QWORD *)v5 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v22) >> 3) >= v24)
    {
      v54 = 24 * ((24 * v24 - 24) / 0x18) + 24;
      bzero(*((void **)v5 + 23), v54);
      *((_QWORD *)v5 + 23) = (char *)v22 + v54;
      v45 = (void **)((char *)v22 + v54);
LABEL_64:
      v55 = (void **)*((_QWORD *)v5 + 22);
      v638 = v19;
      if (v45 != v55)
      {
        v56 = 0;
        while (1)
        {
          v57 = &v55[3 * v56];
          v58 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 16)
                         - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8)) >> 3);
          v59 = v57[1];
          v60 = (v59 - (_BYTE *)*v57) >> 4;
          v61 = v58 - v60;
          if (v58 <= v60)
          {
            if (v58 < v60)
            {
              v62 = (uint64_t)*v57
                  - 0x5555555555555550
                  * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 16)
                             - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8)) >> 3);
              while (v59 != (_BYTE *)v62)
              {
                v63 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *, unint64_t))v63->__on_zero_shared)(v63, v61);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v59 -= 16;
              }
              v57[1] = (void *)v62;
            }
          }
          else
          {
            std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)v57, v61);
          }
          v55 = (void **)*((_QWORD *)v5 + 22);
          if (v55[3 * v56 + 1] != v55[3 * v56]
            && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56) == 11)
          {
            break;
          }
LABEL_66:
          if (++v56 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 23) - (_QWORD)v55) >> 3))
            goto LABEL_264;
        }
        v66 = 0;
        while (1)
        {
          v67 = *(_QWORD *)(*((_QWORD *)v5 + 31) + 176);
          if (*(_BYTE *)(v67 + 56 * v56) == 11
            && *(_BYTE *)(v19 + 68)
            && *(_DWORD *)(*(_QWORD *)(v67 + 56 * v56 + 8) + 24 * v66) == 7)
          {
            break;
          }
LABEL_83:
          if (++v66 >= (unint64_t)(((_BYTE *)v55[3 * v56 + 1] - (_BYTE *)v55[3 * v56]) >> 4))
            goto LABEL_66;
        }
        v68 = operator new();
        *(_QWORD *)v68 = &off_1E42C39D0;
        *(_DWORD *)(v68 + 8) = 29;
        *(_QWORD *)(v68 + 16) = 0;
        *(_QWORD *)(v68 + 24) = 0;
        *(_OWORD *)(v68 + 40) = 0u;
        *(_OWORD *)(v68 + 56) = 0u;
        *(_OWORD *)(v68 + 72) = 0u;
        *(_OWORD *)(v68 + 81) = 0u;
        v658 = v68;
        v69 = (_QWORD *)operator new();
        *v69 = &off_1E42E8520;
        v69[1] = 0;
        v69[2] = 0;
        v69[3] = v68;
        *(_QWORD *)&v659 = v69;
        v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8) + 24 * v66 + 8);
        v71 = *(_QWORD *)(v70 + 24);
        v72 = *(std::__shared_weak_count **)(v70 + 32);
        if (!v72)
          goto LABEL_92;
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
        do
          v75 = __ldaxr(v73);
        while (__stlxr(v75 - 1, v73));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
          if (v71)
            goto LABEL_93;
        }
        else
        {
LABEL_92:
          if (v71)
          {
LABEL_93:
            v76 = v658;
            v77 = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8)
                                        + 24 * v66
                                        + 8)
                            + 24);
            v631 = v77;
            v78 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176)
                                                                       + 56 * v56
                                                                       + 8)
                                                           + 24 * v66
                                                           + 8)
                                               + 32);
            if (v77.n128_u64[1])
            {
              v79 = (unint64_t *)(v77.n128_u64[1] + 8);
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
            }
            v81 = (char *)operator new(0x38uLL);
            *((_QWORD *)v81 + 1) = 0;
            *((_QWORD *)v81 + 2) = 0;
            *(_QWORD *)v81 = &off_1E42E6338;
            *(_OWORD *)(v81 + 40) = 0u;
            *(_OWORD *)(v81 + 24) = 0u;
            v82 = *(std::__shared_weak_count **)(v76 + 48);
            *(_QWORD *)(v76 + 40) = v81 + 24;
            *(_QWORD *)(v76 + 48) = v81;
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = *(_QWORD *)(v76 + 40);
            v86 = *(__n128 **)(v85 + 16);
            if ((unint64_t)v86 < *(_QWORD *)(v85 + 24))
            {
              *v86 = v631;
              if (v78)
              {
                v87 = (unint64_t *)&v78->__shared_owners_;
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
              }
              *(_QWORD *)(v85 + 16) = v86 + 1;
              if (!v78)
                goto LABEL_137;
              goto LABEL_108;
            }
            *(_QWORD *)(v85 + 16) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v85 + 8, v631);
            if (v78)
            {
LABEL_108:
              v89 = (unint64_t *)&v78->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              goto LABEL_135;
            }
LABEL_137:
            *(_DWORD *)(v658 + 8) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176)
                                                                      + 56 * v56
                                                                      + 8)
                                                          + 24 * v66
                                                          + 8)
                                              + 16);
            goto LABEL_138;
          }
        }
        v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8) + 24 * v66 + 8);
        v92 = *(_QWORD *)(v91 + 56);
        v93 = *(std::__shared_weak_count **)(v91 + 64);
        if (!v93)
          goto LABEL_117;
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
        do
          v96 = __ldaxr(v94);
        while (__stlxr(v96 - 1, v94));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
          if (v92)
          {
LABEL_118:
            v97 = v658;
            v98 = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8)
                                        + 24 * v66
                                        + 8)
                            + 56);
            v632 = v98;
            v78 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176)
                                                                       + 56 * v56
                                                                       + 8)
                                                           + 24 * v66
                                                           + 8)
                                               + 64);
            if (v98.n128_u64[1])
            {
              v99 = (unint64_t *)(v98.n128_u64[1] + 8);
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            v101 = operator new(0x38uLL);
            v101[1] = 0;
            v101[2] = 0;
            *v101 = &off_1E42E6338;
            v101[3] = 0x200000000;
            v101[5] = 0;
            v101[6] = 0;
            v101[4] = 0;
            v102 = *(std::__shared_weak_count **)(v97 + 48);
            *(_QWORD *)(v97 + 40) = v101 + 3;
            *(_QWORD *)(v97 + 48) = v101;
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = *(_QWORD *)(v97 + 40);
            v106 = *(__n128 **)(v105 + 16);
            if ((unint64_t)v106 >= *(_QWORD *)(v105 + 24))
            {
              *(_QWORD *)(v105 + 16) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v105 + 8, v632);
              if (!v78)
                goto LABEL_137;
            }
            else
            {
              *v106 = v632;
              if (v78)
              {
                v107 = (unint64_t *)&v78->__shared_owners_;
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              *(_QWORD *)(v105 + 16) = v106 + 1;
              if (!v78)
                goto LABEL_137;
            }
            v109 = (unint64_t *)&v78->__shared_owners_;
            do
              v90 = __ldaxr(v109);
            while (__stlxr(v90 - 1, v109));
LABEL_135:
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
            goto LABEL_137;
          }
        }
        else
        {
LABEL_117:
          if (v92)
            goto LABEL_118;
        }
        v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8) + 24 * v66 + 8);
        v161 = *(_QWORD *)(v160 + 40);
        v162 = *(std::__shared_weak_count **)(v160 + 48);
        if (v162)
        {
          v163 = (unint64_t *)&v162->__shared_owners_;
          do
            v164 = __ldxr(v163);
          while (__stxr(v164 + 1, v163));
          do
            v165 = __ldaxr(v163);
          while (__stlxr(v165 - 1, v163));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
        if (v161)
        {
          v166 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8) + 24 * v66 + 8);
          v167 = *(__n128 *)(v166 + 40);
          v620 = v167;
          v168 = *(std::__shared_weak_count **)(v166 + 48);
          if (v167.n128_u64[1])
          {
            v169 = (unint64_t *)(v167.n128_u64[1] + 8);
            do
              v170 = __ldxr(v169);
            while (__stxr(v170 + 1, v169));
            v166 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 31) + 176) + 56 * v56 + 8) + 24 * v66 + 8);
          }
          v171 = *(std::__shared_weak_count **)(v166 + 80);
          v627 = *(_QWORD *)(v166 + 72);
          if (v171)
          {
            v172 = (unint64_t *)&v171->__shared_owners_;
            do
              v173 = __ldxr(v172);
            while (__stxr(v173 + 1, v172));
          }
          v174 = *(std::__shared_weak_count **)(v166 + 96);
          v633 = *(_QWORD *)(v166 + 88);
          if (v174)
          {
            v175 = (unint64_t *)&v174->__shared_owners_;
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          v177 = v658;
          v178 = operator new(0x38uLL);
          v178[1] = 0;
          v178[2] = 0;
          *v178 = &off_1E42E6338;
          v178[3] = 0x100000000;
          v178[5] = 0;
          v178[6] = 0;
          v178[4] = 0;
          v179 = *(std::__shared_weak_count **)(v177 + 48);
          *(_QWORD *)(v177 + 40) = v178 + 3;
          *(_QWORD *)(v177 + 48) = v178;
          if (v179)
          {
            v180 = (unint64_t *)&v179->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          v182 = *(_QWORD *)(v177 + 40);
          v183 = *(__n128 **)(v182 + 16);
          if ((unint64_t)v183 >= *(_QWORD *)(v182 + 24))
          {
            v186 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v182 + 8, v620);
          }
          else
          {
            *v183 = v620;
            if (v168)
            {
              v184 = (unint64_t *)&v168->__shared_owners_;
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            v186 = v183 + 1;
          }
          *(_QWORD *)(v182 + 16) = v186;
          v187 = (_QWORD *)v658;
          if (v171)
          {
            v188 = (unint64_t *)&v171->__shared_owners_;
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
          }
          v190 = (std::__shared_weak_count *)v187[8];
          v187[7] = v627;
          v187[8] = v171;
          if (v190)
          {
            v191 = (unint64_t *)&v190->__shared_owners_;
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
          if (v174)
          {
            v193 = (unint64_t *)&v174->__shared_owners_;
            do
              v194 = __ldxr(v193);
            while (__stxr(v194 + 1, v193));
          }
          v195 = (std::__shared_weak_count *)v187[10];
          v187[9] = v633;
          v187[10] = v174;
          if (v195)
          {
            v196 = (unint64_t *)&v195->__shared_owners_;
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          v5 = this;
          *(_DWORD *)(v658 + 8) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 176)
                                                                    + 56 * v56
                                                                    + 8)
                                                        + 24 * v66
                                                        + 8)
                                            + 16);
          if (v174)
          {
            v198 = (unint64_t *)&v174->__shared_owners_;
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
          if (v171)
          {
            v200 = (unint64_t *)&v171->__shared_owners_;
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          if (v168)
          {
            v202 = (unint64_t *)&v168->__shared_owners_;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
        }
LABEL_138:
        v110 = *(_QWORD *)(*((_QWORD *)v5 + 22) + 24 * v56);
        v112 = v658;
        v111 = v659;
        if ((_QWORD)v659)
        {
          v113 = (unint64_t *)(v659 + 8);
          do
            v114 = __ldxr(v113);
          while (__stxr(v114 + 1, v113));
        }
        v115 = (uint64_t *)(v110 + 16 * v66);
        v116 = (std::__shared_weak_count *)v115[1];
        *v115 = v112;
        v115[1] = v111;
        if (v116)
        {
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v119 = (char *)operator new(0x58uLL);
        *((_QWORD *)v119 + 1) = 0;
        *((_QWORD *)v119 + 2) = 0;
        *(_QWORD *)v119 = &off_1E42DED18;
        *((_QWORD *)v119 + 5) = 0;
        *((_QWORD *)v119 + 6) = 0;
        *((_QWORD *)v119 + 4) = 0;
        *((_QWORD *)v119 + 3) = &off_1E42B63B0;
        *((_DWORD *)v119 + 14) = 0;
        *(_QWORD *)&v120 = 0x100000001;
        *((_QWORD *)&v120 + 1) = 0x100000001;
        *(_OWORD *)(v119 + 60) = v120;
        *(_QWORD *)(v119 + 76) = 0x100000001;
        *((_DWORD *)v119 + 21) = 0;
        *(_QWORD *)buf = v119 + 24;
        v650 = (uint8_t *)v119;
        v121 = operator new(0x180uLL);
        v121[1] = 0;
        v122 = v121 + 1;
        v121[2] = 0;
        *v121 = &off_1E42E6290;
        v123 = v121 + 3;
        altitude::TextureMapLoadJob::TextureMapLoadJob((uint64_t)(v121 + 3), v19, &v658, *((_BYTE *)v5 + 208), buf);
        *(_QWORD *)&v644 = v121 + 3;
        *((_QWORD *)&v644 + 1) = v121;
        v125 = (char *)*((_QWORD *)v5 + 37);
        v124 = *((_QWORD *)v5 + 38);
        if ((unint64_t)v125 >= v124)
        {
          v128 = (char *)*((_QWORD *)v5 + 36);
          v129 = (v125 - v128) >> 4;
          v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 60)
            abort();
          v131 = v124 - (_QWORD)v128;
          if (v131 >> 3 > v130)
            v130 = v131 >> 3;
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0)
            v132 = 0xFFFFFFFFFFFFFFFLL;
          else
            v132 = v130;
          if (v132 >> 60)
            goto LABEL_827;
          v133 = (char *)operator new(16 * v132);
          v134 = &v133[16 * v129];
          v135 = &v133[16 * v132];
          *(_QWORD *)v134 = v123;
          *((_QWORD *)v134 + 1) = v121;
          do
            v136 = __ldxr(v122);
          while (__stxr(v136 + 1, v122));
          v127 = v134 + 16;
          v19 = v638;
          if (v125 == v128)
          {
            v5 = this;
            *((_QWORD *)this + 36) = v134;
            *((_QWORD *)this + 37) = v127;
            *((_QWORD *)this + 38) = v135;
          }
          else
          {
            do
            {
              v137 = *((_OWORD *)v125 - 1);
              v125 -= 16;
              *((_OWORD *)v134 - 1) = v137;
              v134 -= 16;
              *(_QWORD *)v125 = 0;
              *((_QWORD *)v125 + 1) = 0;
            }
            while (v125 != v128);
            v5 = this;
            v125 = (char *)*((_QWORD *)this + 36);
            v138 = (char *)*((_QWORD *)this + 37);
            *((_QWORD *)this + 36) = v134;
            *((_QWORD *)this + 37) = v127;
            *((_QWORD *)this + 38) = v135;
            while (v138 != v125)
            {
              v139 = (std::__shared_weak_count *)*((_QWORD *)v138 - 1);
              if (v139)
              {
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              v138 -= 16;
            }
          }
          if (v125)
            operator delete(v125);
        }
        else
        {
          *(_QWORD *)v125 = v123;
          *((_QWORD *)v125 + 1) = v121;
          do
            v126 = __ldxr(v122);
          while (__stxr(v126 + 1, v122));
          v127 = v125 + 16;
        }
        *((_QWORD *)v5 + 37) = v127;
        v142 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
        v655 = v644;
        if (*((_QWORD *)&v644 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
          do
            v144 = __ldxr(v143);
          while (__stxr(v144 + 1, v143));
          karo::Job::addBlockingSubJob((uint64_t *)v5, &v655, -1, 1);
          do
            v145 = __ldaxr(v143);
          while (__stlxr(v145 - 1, v143));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        else
        {
          karo::Job::addBlockingSubJob((uint64_t *)v5, &v655, -1, 1);
        }
        v146 = *((_QWORD *)v5 + 25);
        v147 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
        v643 = v644;
        if (*((_QWORD *)&v644 + 1))
        {
          v148 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 1, v148));
          karo::JobManager::queueJob(v146, &v643);
          do
            v150 = __ldaxr(v148);
          while (__stlxr(v150 - 1, v148));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
          v151 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
          if (!*((_QWORD *)&v644 + 1))
            goto LABEL_193;
        }
        else
        {
          karo::JobManager::queueJob(v146, &v643);
          v151 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
          if (!*((_QWORD *)&v644 + 1))
            goto LABEL_193;
        }
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
          v154 = (std::__shared_weak_count *)v650;
          if (v650)
            goto LABEL_194;
          goto LABEL_199;
        }
LABEL_193:
        v154 = (std::__shared_weak_count *)v650;
        if (v650)
        {
LABEL_194:
          v155 = (unint64_t *)&v154->__shared_owners_;
          do
            v156 = __ldaxr(v155);
          while (__stlxr(v156 - 1, v155));
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
LABEL_199:
        v157 = (std::__shared_weak_count *)v659;
        if ((_QWORD)v659)
        {
          v158 = (unint64_t *)(v659 + 8);
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v55 = (void **)*((_QWORD *)v5 + 22);
        goto LABEL_83;
      }
LABEL_264:
      v204 = *((_QWORD *)v5 + 31);
      v205 = *(_QWORD **)(v204 + 200);
      v628 = (_QWORD *)(v204 + 208);
      if (v205 != (_QWORD *)(v204 + 208))
      {
        v634 = (uint64_t **)((char *)v5 + 272);
        while (1)
        {
          v206 = v634;
          v207 = *v634;
          v208 = *((_DWORD *)v205 + 8);
LABEL_269:
          v209 = v206;
          if (v207)
          {
            do
            {
              v206 = (uint64_t **)v207;
              v210 = *((_DWORD *)v207 + 8);
              if (v208 < v210)
              {
                v207 = *v206;
                goto LABEL_269;
              }
              if (v210 >= v208)
                goto LABEL_277;
              v207 = v206[1];
            }
            while (v207);
            v209 = v206 + 1;
          }
          v211 = (uint64_t *)v206;
          v206 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v206 + 8) = v208;
          v206[6] = 0;
          v206[7] = 0;
          v206[5] = 0;
          *v206 = 0;
          v206[1] = 0;
          v206[2] = v211;
          *v209 = (uint64_t *)v206;
          v212 = **((_QWORD **)v5 + 33);
          v213 = (uint64_t *)v206;
          if (v212)
          {
            *((_QWORD *)v5 + 33) = v212;
            v213 = *v209;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v5 + 34), v213);
          ++*((_QWORD *)v5 + 35);
          v19 = v638;
LABEL_277:
          v214 = v206[5];
          v215 = v206[6];
          v216 = (uint64_t)(v205[6] - v205[5]) >> 4;
          v217 = ((char *)v215 - (char *)v214) >> 4;
          v218 = v216 - v217;
          if (v216 <= v217)
          {
            if (v216 < v217)
            {
              v219 = &v214[2 * v216];
              while (v215 != v219)
              {
                v220 = (std::__shared_weak_count *)*(v215 - 1);
                if (v220)
                {
                  v221 = (unint64_t *)&v220->__shared_owners_;
                  do
                    v222 = __ldaxr(v221);
                  while (__stlxr(v222 - 1, v221));
                  if (!v222)
                  {
                    ((void (*)(std::__shared_weak_count *, unint64_t))v220->__on_zero_shared)(v220, v218);
                    std::__shared_weak_count::__release_weak(v220);
                  }
                }
                v215 -= 2;
              }
              v206[6] = v219;
            }
          }
          else
          {
            std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)(v206 + 5), v218);
          }
          v223 = v205[5];
          if (v205[6] != v223)
            break;
LABEL_539:
          v407 = (_QWORD *)v205[1];
          if (v407)
          {
            do
            {
              v408 = v407;
              v407 = (_QWORD *)*v407;
            }
            while (v407);
          }
          else
          {
            do
            {
              v408 = (_QWORD *)v205[2];
              _ZF = *v408 == (_QWORD)v205;
              v205 = v408;
            }
            while (!_ZF);
          }
          v205 = v408;
          v5 = this;
          if (v408 == v628)
            goto LABEL_545;
        }
        v224 = 0;
        v225 = 0;
        while (1)
        {
          v226 = (uint64_t *)(v223 + 16 * v224);
          v227 = *(_QWORD *)(*v226 + 24);
          v228 = *(std::__shared_weak_count **)(*v226 + 32);
          if (v228)
          {
            v229 = (unint64_t *)&v228->__shared_owners_;
            do
              v230 = __ldxr(v229);
            while (__stxr(v230 + 1, v229));
          }
          if (v227)
          {
            v231 = 0;
          }
          else
          {
            v243 = *(_QWORD *)(*v226 + 40);
            v244 = *(std::__shared_weak_count **)(*v226 + 48);
            if (v244)
            {
              v245 = (unint64_t *)&v244->__shared_owners_;
              do
                v246 = __ldxr(v245);
              while (__stxr(v246 + 1, v245));
            }
            if (v243)
            {
              v231 = 0;
            }
            else
            {
              v249 = *(_QWORD *)(*v226 + 56);
              v250 = *(std::__shared_weak_count **)(*v226 + 64);
              if (v250)
              {
                v251 = (unint64_t *)&v250->__shared_owners_;
                do
                  v252 = __ldxr(v251);
                while (__stxr(v252 + 1, v251));
                v231 = v249 == 0;
                do
                  v253 = __ldaxr(v251);
                while (__stlxr(v253 - 1, v251));
                if (!v253)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
              }
              else
              {
                v231 = v249 == 0;
              }
            }
            if (v244)
            {
              v247 = (unint64_t *)&v244->__shared_owners_;
              do
                v248 = __ldaxr(v247);
              while (__stlxr(v248 - 1, v247));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
              }
            }
          }
          if (!v228)
            goto LABEL_301;
          v232 = (unint64_t *)&v228->__shared_owners_;
          do
            v233 = __ldaxr(v232);
          while (__stlxr(v233 - 1, v232));
          if (!v233)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
            if (v231)
              goto LABEL_291;
          }
          else
          {
LABEL_301:
            if (v231)
              goto LABEL_291;
          }
          if (!*(_BYTE *)(v19 + 68))
            goto LABEL_291;
          v234 = *v226;
          v235 = *((unsigned __int8 *)this + 208);
          v236 = *(_QWORD *)(*v226 + 40);
          v237 = *(std::__shared_weak_count **)(*v226 + 48);
          if (v237)
          {
            v238 = (unint64_t *)&v237->__shared_owners_;
            do
              v239 = __ldxr(v238);
            while (__stxr(v239 + 1, v238));
          }
          if (v236)
          {
            v240 = 1;
          }
          else
          {
            v254 = *(_QWORD *)(v234 + 56);
            v255 = *(std::__shared_weak_count **)(v234 + 64);
            if (v255)
            {
              v256 = (unint64_t *)&v255->__shared_owners_;
              do
                v257 = __ldxr(v256);
              while (__stxr(v257 + 1, v256));
              v240 = v254 != 0;
              do
                v258 = __ldaxr(v256);
              while (__stlxr(v258 - 1, v256));
              if (!v258)
              {
                ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                std::__shared_weak_count::__release_weak(v255);
              }
            }
            else
            {
              v240 = v254 != 0;
            }
          }
          if (!v237)
            goto LABEL_312;
          v241 = (unint64_t *)&v237->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
            if (!v240)
            {
LABEL_342:
              LODWORD(v658) = 0;
              *(_DWORD *)buf = 0;
              v259 = *(_QWORD *)(v234 + 24);
              v260 = *(std::__shared_weak_count **)(v234 + 32);
              if (v260)
              {
                v261 = (unint64_t *)&v260->__shared_owners_;
                do
                  v262 = __ldxr(v261);
                while (__stxr(v262 + 1, v261));
                v263 = *(_QWORD *)(v234 + 24);
                v264 = *(std::__shared_weak_count **)(v234 + 32);
                v265 = *(pwin_jpg **)(v259 + 8);
                if (v264)
                {
                  v266 = (unint64_t *)&v264->__shared_owners_;
                  do
                    v267 = __ldxr(v266);
                  while (__stxr(v267 + 1, v266));
                  pwin_jpg::p_info_mem_jpg(v265, (unsigned __int8 *)*(unsigned int *)(v263 + 16), (int *)&v658, (int *)buf, v18);
                  do
                    v268 = __ldaxr(v266);
                  while (__stlxr(v268 - 1, v266));
                  v19 = v638;
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                    std::__shared_weak_count::__release_weak(v264);
                  }
                }
                else
                {
                  pwin_jpg::p_info_mem_jpg(v265, (unsigned __int8 *)*(unsigned int *)(v263 + 16), (int *)&v658, (int *)buf, v18);
                }
                v269 = (unint64_t *)&v260->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                  std::__shared_weak_count::__release_weak(v260);
                }
              }
              else
              {
                pwin_jpg::p_info_mem_jpg(*(pwin_jpg **)(v259 + 8), (unsigned __int8 *)*(unsigned int *)(v259 + 16), (int *)&v658, (int *)buf, v18);
              }
              if (*(_DWORD *)(v234 + 16) != 14)
                goto LABEL_291;
              if (v235)
              {
                if ((_DWORD)v658 != 512 || *(_DWORD *)buf != 512)
                  goto LABEL_291;
              }
              else if ((int)v658 < 9 || *(int *)buf <= 8)
              {
                goto LABEL_291;
              }
              goto LABEL_367;
            }
          }
          else
          {
LABEL_312:
            if (!v240)
              goto LABEL_342;
          }
          if (*(_DWORD *)(v234 + 16) != 14)
            goto LABEL_291;
LABEL_367:
          v271 = *((_DWORD *)v205 + 8);
          v272 = v271 > 7;
          v273 = (1 << v271) & 0xE2;
          _ZF = v272 || v273 == 0;
          if (!_ZF)
            goto LABEL_291;
          v275 = operator new();
          *(_QWORD *)v275 = &off_1E42C39D0;
          *(_DWORD *)(v275 + 8) = 29;
          *(_QWORD *)(v275 + 16) = 0;
          *(_QWORD *)(v275 + 24) = 0;
          *(_OWORD *)(v275 + 40) = 0u;
          *(_OWORD *)(v275 + 56) = 0u;
          *(_OWORD *)(v275 + 72) = 0u;
          *(_OWORD *)(v275 + 81) = 0u;
          v658 = v275;
          v276 = (_QWORD *)operator new();
          *v276 = &off_1E42E8520;
          v276[1] = 0;
          v276[2] = 0;
          v276[3] = v275;
          *(_QWORD *)&v659 = v276;
          v278 = *(_QWORD *)(*v226 + 40);
          v277 = *(std::__shared_weak_count **)(*v226 + 48);
          if (!v277)
            goto LABEL_377;
          v279 = (unint64_t *)&v277->__shared_owners_;
          do
            v280 = __ldxr(v279);
          while (__stxr(v280 + 1, v279));
          do
            v281 = __ldaxr(v279);
          while (__stlxr(v281 - 1, v279));
          if (!v281)
          {
            ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
            std::__shared_weak_count::__release_weak(v277);
            if (v278)
            {
LABEL_378:
              v282 = (_QWORD *)*v226;
              v283 = *(__n128 *)(*v226 + 40);
              v621 = v283;
              v284 = *(std::__shared_weak_count **)(*v226 + 48);
              if (v283.n128_u64[1])
              {
                v285 = (unint64_t *)(v283.n128_u64[1] + 8);
                do
                  v286 = __ldxr(v285);
                while (__stxr(v286 + 1, v285));
                v282 = (_QWORD *)*v226;
              }
              v287 = v658;
              v288 = operator new(0x38uLL);
              v288[1] = 0;
              v288[2] = 0;
              *v288 = &off_1E42E6338;
              v288[3] = 0x100000000;
              v288[5] = 0;
              v288[6] = 0;
              v288[4] = 0;
              v289 = *(std::__shared_weak_count **)(v287 + 48);
              *(_QWORD *)(v287 + 40) = v288 + 3;
              *(_QWORD *)(v287 + 48) = v288;
              if (v289)
              {
                v290 = (unint64_t *)&v289->__shared_owners_;
                do
                  v291 = __ldaxr(v290);
                while (__stlxr(v291 - 1, v290));
                if (!v291)
                {
                  ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                  std::__shared_weak_count::__release_weak(v289);
                }
              }
              v292 = *(_QWORD *)(v287 + 40);
              v293 = *(__n128 **)(v292 + 16);
              if ((unint64_t)v293 >= *(_QWORD *)(v292 + 24))
              {
                v296 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v292 + 8, v621);
              }
              else
              {
                *v293 = v621;
                if (v284)
                {
                  v294 = (unint64_t *)&v284->__shared_owners_;
                  do
                    v295 = __ldxr(v294);
                  while (__stxr(v295 + 1, v294));
                }
                v296 = v293 + 1;
              }
              *(_QWORD *)(v292 + 16) = v296;
              v297 = (_QWORD *)v658;
              v299 = v282[9];
              v298 = v282[10];
              if (v298)
              {
                v300 = (unint64_t *)(v298 + 8);
                do
                  v301 = __ldxr(v300);
                while (__stxr(v301 + 1, v300));
              }
              v302 = (std::__shared_weak_count *)v297[8];
              v297[7] = v299;
              v297[8] = v298;
              if (v302)
              {
                v303 = (unint64_t *)&v302->__shared_owners_;
                do
                  v304 = __ldaxr(v303);
                while (__stlxr(v304 - 1, v303));
                if (!v304)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v302);
                }
              }
              v306 = v282[11];
              v305 = v282[12];
              if (v305)
              {
                v307 = (unint64_t *)(v305 + 8);
                do
                  v308 = __ldxr(v307);
                while (__stxr(v308 + 1, v307));
              }
              v309 = (std::__shared_weak_count *)v297[10];
              v297[9] = v306;
              v297[10] = v305;
              if (v309)
              {
                v310 = (unint64_t *)&v309->__shared_owners_;
                do
                  v311 = __ldaxr(v310);
                while (__stlxr(v311 - 1, v310));
                if (!v311)
                {
                  ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                  std::__shared_weak_count::__release_weak(v309);
                }
              }
              *(_DWORD *)(v658 + 8) = *(_DWORD *)(*v226 + 16);
              if (v284)
              {
                v312 = (unint64_t *)&v284->__shared_owners_;
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                  std::__shared_weak_count::__release_weak(v284);
                }
              }
              goto LABEL_460;
            }
          }
          else
          {
LABEL_377:
            if (v278)
              goto LABEL_378;
          }
          v315 = *(_QWORD *)(*v226 + 56);
          v314 = *(std::__shared_weak_count **)(*v226 + 64);
          if (!v314)
            goto LABEL_420;
          v316 = (unint64_t *)&v314->__shared_owners_;
          do
            v317 = __ldxr(v316);
          while (__stxr(v317 + 1, v316));
          do
            v318 = __ldaxr(v316);
          while (__stlxr(v318 - 1, v316));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
            std::__shared_weak_count::__release_weak(v314);
            if (v315)
            {
LABEL_421:
              v319 = v658;
              v320 = *(__n128 *)(*v226 + 56);
              v622 = v320;
              v321 = *(std::__shared_weak_count **)(*v226 + 64);
              if (v320.n128_u64[1])
              {
                v322 = (unint64_t *)(v320.n128_u64[1] + 8);
                do
                  v323 = __ldxr(v322);
                while (__stxr(v323 + 1, v322));
              }
              v324 = operator new(0x38uLL);
              v324[1] = 0;
              v324[2] = 0;
              *v324 = &off_1E42E6338;
              v324[3] = 0x200000000;
              v324[5] = 0;
              v324[6] = 0;
              v324[4] = 0;
              v325 = *(std::__shared_weak_count **)(v319 + 48);
              *(_QWORD *)(v319 + 40) = v324 + 3;
              *(_QWORD *)(v319 + 48) = v324;
              if (v325)
              {
                v326 = (unint64_t *)&v325->__shared_owners_;
                do
                  v327 = __ldaxr(v326);
                while (__stlxr(v327 - 1, v326));
                if (!v327)
                {
                  ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                  std::__shared_weak_count::__release_weak(v325);
                }
              }
              v328 = *(_QWORD *)(v319 + 40);
              v329 = *(__n128 **)(v328 + 16);
              if ((unint64_t)v329 < *(_QWORD *)(v328 + 24))
              {
                *v329 = v622;
                if (v321)
                {
                  v330 = (unint64_t *)&v321->__shared_owners_;
                  do
                    v331 = __ldxr(v330);
                  while (__stxr(v331 + 1, v330));
                }
                *(_QWORD *)(v328 + 16) = v329 + 1;
                if (!v321)
                  goto LABEL_459;
LABEL_436:
                v332 = (unint64_t *)&v321->__shared_owners_;
                do
                  v333 = __ldaxr(v332);
                while (__stlxr(v333 - 1, v332));
                goto LABEL_457;
              }
              *(_QWORD *)(v328 + 16) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v328 + 8, v622);
              if (v321)
                goto LABEL_436;
              goto LABEL_459;
            }
          }
          else
          {
LABEL_420:
            if (v315)
              goto LABEL_421;
          }
          v334 = v658;
          v335 = *(__n128 *)(*v226 + 24);
          v623 = v335;
          v321 = *(std::__shared_weak_count **)(*v226 + 32);
          if (v335.n128_u64[1])
          {
            v336 = (unint64_t *)(v335.n128_u64[1] + 8);
            do
              v337 = __ldxr(v336);
            while (__stxr(v337 + 1, v336));
          }
          v338 = (char *)operator new(0x38uLL);
          *((_QWORD *)v338 + 1) = 0;
          *((_QWORD *)v338 + 2) = 0;
          *(_QWORD *)v338 = &off_1E42E6338;
          *(_OWORD *)(v338 + 40) = 0u;
          *(_OWORD *)(v338 + 24) = 0u;
          v339 = *(std::__shared_weak_count **)(v334 + 48);
          *(_QWORD *)(v334 + 40) = v338 + 24;
          *(_QWORD *)(v334 + 48) = v338;
          if (v339)
          {
            v340 = (unint64_t *)&v339->__shared_owners_;
            do
              v341 = __ldaxr(v340);
            while (__stlxr(v341 - 1, v340));
            if (!v341)
            {
              ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
              std::__shared_weak_count::__release_weak(v339);
            }
          }
          v342 = *(_QWORD *)(v334 + 40);
          v343 = *(__n128 **)(v342 + 16);
          if ((unint64_t)v343 < *(_QWORD *)(v342 + 24))
          {
            *v343 = v623;
            if (v321)
            {
              v344 = (unint64_t *)&v321->__shared_owners_;
              do
                v345 = __ldxr(v344);
              while (__stxr(v345 + 1, v344));
            }
            *(_QWORD *)(v342 + 16) = v343 + 1;
            if (!v321)
              goto LABEL_459;
LABEL_455:
            v346 = (unint64_t *)&v321->__shared_owners_;
            do
              v333 = __ldaxr(v346);
            while (__stlxr(v333 - 1, v346));
LABEL_457:
            if (!v333)
            {
              ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
              std::__shared_weak_count::__release_weak(v321);
            }
            goto LABEL_459;
          }
          *(_QWORD *)(v342 + 16) = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v342 + 8, v623);
          if (v321)
            goto LABEL_455;
LABEL_459:
          *(_DWORD *)(v658 + 8) = *(_DWORD *)(*v226 + 16);
LABEL_460:
          v347 = (char *)operator new(0x58uLL);
          *((_QWORD *)v347 + 1) = 0;
          *((_QWORD *)v347 + 2) = 0;
          *(_QWORD *)v347 = &off_1E42DED18;
          *((_QWORD *)v347 + 5) = 0;
          *((_QWORD *)v347 + 6) = 0;
          *((_QWORD *)v347 + 4) = 0;
          *((_QWORD *)v347 + 3) = &off_1E42B63B0;
          *((_DWORD *)v347 + 14) = 0;
          *(_QWORD *)&v348 = 0x100000001;
          *((_QWORD *)&v348 + 1) = 0x100000001;
          *(_OWORD *)(v347 + 60) = v348;
          *(_QWORD *)(v347 + 76) = 0x100000001;
          *((_DWORD *)v347 + 21) = 0;
          *(_QWORD *)buf = v347 + 24;
          v650 = (uint8_t *)v347;
          v349 = operator new(0x180uLL);
          v349[1] = 0;
          v349[2] = 0;
          *v349 = &off_1E42E6290;
          *(_QWORD *)&v644 = altitude::TextureMapLoadJob::TextureMapLoadJob((uint64_t)(v349 + 3), v19, &v658, *((_BYTE *)this + 208), buf);
          *((_QWORD *)&v644 + 1) = v349;
          v350 = v634;
          v351 = *v634;
          v352 = v634;
          v353 = *((_DWORD *)v205 + 8);
          if (*v634)
          {
            while (1)
            {
              while (1)
              {
                v350 = (uint64_t **)v351;
                v354 = *((_DWORD *)v351 + 8);
                if (v353 >= v354)
                  break;
                v351 = *v350;
                v352 = v350;
                if (!*v350)
                  goto LABEL_467;
              }
              if (v354 >= v353)
                break;
              v351 = v350[1];
              if (!v351)
              {
                v352 = v350 + 1;
                goto LABEL_467;
              }
            }
            v355 = v350;
          }
          else
          {
LABEL_467:
            v355 = operator new(0x40uLL);
            v355[8] = v353;
            *((_QWORD *)v355 + 6) = 0;
            *((_QWORD *)v355 + 7) = 0;
            *((_QWORD *)v355 + 5) = 0;
            *(_QWORD *)v355 = 0;
            *((_QWORD *)v355 + 1) = 0;
            *((_QWORD *)v355 + 2) = v350;
            *v352 = (uint64_t *)v355;
            v356 = **((_QWORD **)this + 33);
            v357 = (uint64_t *)v355;
            if (v356)
            {
              *((_QWORD *)this + 33) = v356;
              v357 = *v352;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 34), v357);
            ++*((_QWORD *)this + 35);
            v19 = v638;
          }
          v358 = *((_QWORD *)v355 + 5);
          v360 = v658;
          v359 = v659;
          if ((_QWORD)v659)
          {
            v361 = (unint64_t *)(v659 + 8);
            do
              v362 = __ldxr(v361);
            while (__stxr(v362 + 1, v361));
          }
          v363 = (uint64_t *)(v358 + 16 * v224);
          v364 = (std::__shared_weak_count *)v363[1];
          *v363 = v360;
          v363[1] = v359;
          if (v364)
          {
            v365 = (unint64_t *)&v364->__shared_owners_;
            do
              v366 = __ldaxr(v365);
            while (__stlxr(v366 - 1, v365));
            if (!v366)
            {
              ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
              std::__shared_weak_count::__release_weak(v364);
            }
          }
          v368 = (char *)*((_QWORD *)this + 37);
          v367 = *((_QWORD *)this + 38);
          if ((unint64_t)v368 >= v367)
          {
            v373 = (char *)*((_QWORD *)this + 36);
            v374 = (v368 - v373) >> 4;
            v375 = v374 + 1;
            if ((unint64_t)(v374 + 1) >> 60)
              abort();
            v376 = v367 - (_QWORD)v373;
            if (v376 >> 3 > v375)
              v375 = v376 >> 3;
            if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF0)
              v377 = 0xFFFFFFFFFFFFFFFLL;
            else
              v377 = v375;
            if (v377 >> 60)
              goto LABEL_827;
            v378 = (char *)operator new(16 * v377);
            v379 = &v378[16 * v374];
            v380 = *((_QWORD *)&v644 + 1);
            *(_OWORD *)v379 = v644;
            if (v380)
            {
              v381 = (unint64_t *)(v380 + 8);
              do
                v382 = __ldxr(v381);
              while (__stxr(v382 + 1, v381));
              v373 = (char *)*((_QWORD *)this + 36);
              v368 = (char *)*((_QWORD *)this + 37);
            }
            v19 = v638;
            v383 = &v378[16 * v377];
            v372 = v379 + 16;
            if (v368 == v373)
            {
              *((_QWORD *)this + 36) = v379;
              *((_QWORD *)this + 37) = v372;
              *((_QWORD *)this + 38) = v383;
            }
            else
            {
              do
              {
                v384 = *((_OWORD *)v368 - 1);
                v368 -= 16;
                *((_OWORD *)v379 - 1) = v384;
                v379 -= 16;
                *(_QWORD *)v368 = 0;
                *((_QWORD *)v368 + 1) = 0;
              }
              while (v368 != v373);
              v373 = (char *)*((_QWORD *)this + 36);
              v385 = (char *)*((_QWORD *)this + 37);
              *((_QWORD *)this + 36) = v379;
              *((_QWORD *)this + 37) = v372;
              *((_QWORD *)this + 38) = v383;
              while (v385 != v373)
              {
                v386 = (std::__shared_weak_count *)*((_QWORD *)v385 - 1);
                if (v386)
                {
                  v387 = (unint64_t *)&v386->__shared_owners_;
                  do
                    v388 = __ldaxr(v387);
                  while (__stlxr(v388 - 1, v387));
                  if (!v388)
                  {
                    ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                    std::__shared_weak_count::__release_weak(v386);
                  }
                }
                v385 -= 16;
              }
            }
            if (v373)
              operator delete(v373);
          }
          else
          {
            *(_QWORD *)v368 = v644;
            v369 = *((_QWORD *)&v644 + 1);
            *((_QWORD *)v368 + 1) = *((_QWORD *)&v644 + 1);
            if (v369)
            {
              v370 = (unint64_t *)(v369 + 8);
              do
                v371 = __ldxr(v370);
              while (__stxr(v371 + 1, v370));
            }
            v372 = v368 + 16;
          }
          *((_QWORD *)this + 37) = v372;
          v389 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
          v643 = v644;
          if (*((_QWORD *)&v644 + 1))
          {
            v390 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
            do
              v391 = __ldxr(v390);
            while (__stxr(v391 + 1, v390));
            karo::Job::addBlockingSubJob((uint64_t *)this, &v643, -1, 1);
            do
              v392 = __ldaxr(v390);
            while (__stlxr(v392 - 1, v390));
            if (!v392)
            {
              ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
              std::__shared_weak_count::__release_weak(v389);
            }
          }
          else
          {
            karo::Job::addBlockingSubJob((uint64_t *)this, &v643, -1, 1);
          }
          v393 = *((_QWORD *)this + 25);
          v394 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
          v642 = v644;
          if (*((_QWORD *)&v644 + 1))
          {
            v395 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
            do
              v396 = __ldxr(v395);
            while (__stxr(v396 + 1, v395));
            karo::JobManager::queueJob(v393, &v642);
            do
              v397 = __ldaxr(v395);
            while (__stlxr(v397 - 1, v395));
            if (!v397)
            {
              ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
              std::__shared_weak_count::__release_weak(v394);
            }
          }
          else
          {
            karo::JobManager::queueJob(v393, &v642);
          }
          v398 = (std::__shared_weak_count *)*((_QWORD *)&v644 + 1);
          if (*((_QWORD *)&v644 + 1))
          {
            v399 = (unint64_t *)(*((_QWORD *)&v644 + 1) + 8);
            do
              v400 = __ldaxr(v399);
            while (__stlxr(v400 - 1, v399));
            if (!v400)
            {
              ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
              std::__shared_weak_count::__release_weak(v398);
            }
          }
          v401 = (std::__shared_weak_count *)v650;
          if (v650)
          {
            v402 = (unint64_t *)(v650 + 8);
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 - 1, v402));
            if (!v403)
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
          }
          v404 = (std::__shared_weak_count *)v659;
          if ((_QWORD)v659)
          {
            v405 = (unint64_t *)(v659 + 8);
            do
              v406 = __ldaxr(v405);
            while (__stlxr(v406 - 1, v405));
            if (!v406)
            {
              ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
              std::__shared_weak_count::__release_weak(v404);
            }
          }
LABEL_291:
          v223 = v205[5];
          v224 = ++v225;
          if (v225 >= (unint64_t)((v205[6] - v223) >> 4))
            goto LABEL_539;
        }
      }
LABEL_545:
      ++*((_DWORD *)v5 + 78);
      pthread_mutex_lock(*((pthread_mutex_t **)v5 + 11));
      v409 = *((_QWORD *)v5 + 8);
      v410 = *((_QWORD *)v5 + 9);
      result = pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 11));
      if (v409 != v410)
        return result;
      pthread_mutex_lock(*((pthread_mutex_t **)v5 + 19));
      v411 = *((_DWORD *)v5 + 40);
      result = pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 19));
      if ((v411 & 2) != 0)
        return result;
      goto LABEL_547;
    }
    if (v20 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v26 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v21) >> 3);
    if (2 * v26 > v20)
      v20 = 2 * v26;
    if (v26 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    if (v20 > 0xAAAAAAAAAAAAAAALL)
LABEL_827:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = 24 * v20;
    v28 = (char *)operator new(24 * v20);
    v29 = &v28[8 * (v22 - (void **)v21)];
    v30 = &v28[v27];
    bzero(v29, 24 * ((24 * v24 - 24) / 0x18) + 24);
    v31 = &v29[24 * ((24 * v24 - 24) / 0x18) + 24];
    if (v22 == v21)
    {
      v34 = this;
      *((_QWORD *)this + 22) = v29;
      *((_QWORD *)this + 23) = v31;
      *((_QWORD *)this + 24) = v30;
    }
    else
    {
      do
      {
        v32 = v29;
        *((_QWORD *)v29 - 2) = 0;
        *((_QWORD *)v29 - 1) = 0;
        v33 = *(_OWORD *)(v22 - 3);
        v22 -= 3;
        *(_OWORD *)(v29 - 24) = v33;
        v29 -= 24;
        *((_QWORD *)v32 - 1) = v22[2];
        *v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
      }
      while (v22 != v21);
      v34 = this;
      v22 = (void **)*((_QWORD *)this + 22);
      v35 = (void **)*((_QWORD *)this + 23);
      *((_QWORD *)this + 22) = v29;
      *((_QWORD *)this + 23) = v31;
      *((_QWORD *)this + 24) = v30;
      if (v35 != v22)
      {
        v36 = v35;
        do
        {
          v40 = (char *)*(v36 - 3);
          v36 -= 3;
          v39 = v40;
          if (v40)
          {
            v41 = (char *)*(v35 - 2);
            v38 = v39;
            if (v41 != v39)
            {
              do
              {
                v42 = (std::__shared_weak_count *)*((_QWORD *)v41 - 1);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                v41 -= 16;
              }
              while (v41 != v39);
              v38 = *v36;
            }
            *(v35 - 2) = v39;
            operator delete(v38);
          }
          v35 = v36;
        }
        while (v36 != v22);
        v5 = this;
        goto LABEL_61;
      }
    }
    v5 = v34;
LABEL_61:
    if (v22)
      operator delete(v22);
    v45 = (void **)*((_QWORD *)v5 + 23);
    goto LABEL_64;
  }
LABEL_547:
  v412 = *((_QWORD *)v5 + 31);
  v413 = *(_QWORD **)(v412 + 200);
  v639 = (_QWORD *)(v412 + 208);
  if (v413 == (_QWORD *)(v412 + 208))
    goto LABEL_740;
  v414 = (uint64_t **)((char *)v5 + 272);
  while (1)
  {
    v415 = v413[5];
    if (v413[6] != v415)
      break;
LABEL_727:
    v541 = (_QWORD *)v413[1];
    if (v541)
    {
      do
      {
        v542 = v541;
        v541 = (_QWORD *)*v541;
      }
      while (v541);
    }
    else
    {
      do
      {
        v542 = (_QWORD *)v413[2];
        _ZF = *v542 == (_QWORD)v413;
        v413 = v542;
      }
      while (!_ZF);
    }
    v413 = v542;
    if (v542 == v639)
      goto LABEL_740;
  }
  v416 = 0;
  v417 = 0;
  while (1)
  {
    v418 = *v414;
    v419 = *((_DWORD *)v413 + 8);
    v420 = v414;
    v421 = v414;
    if (*v414)
    {
      while (1)
      {
        while (1)
        {
          v421 = (uint64_t **)v418;
          v422 = *((_DWORD *)v418 + 8);
          if (v419 >= v422)
            break;
          v418 = *v421;
          v420 = v421;
          if (!*v421)
            goto LABEL_561;
        }
        if (v422 >= v419)
          break;
        v418 = v421[1];
        if (!v418)
        {
          v420 = v421 + 1;
          goto LABEL_561;
        }
      }
      v423 = v421;
      v5 = this;
    }
    else
    {
LABEL_561:
      v423 = operator new(0x40uLL);
      v423[8] = v419;
      *((_QWORD *)v423 + 6) = 0;
      *((_QWORD *)v423 + 7) = 0;
      *((_QWORD *)v423 + 5) = 0;
      *(_QWORD *)v423 = 0;
      *((_QWORD *)v423 + 1) = 0;
      *((_QWORD *)v423 + 2) = v421;
      *v420 = (uint64_t *)v423;
      v5 = this;
      v424 = **((_QWORD **)this + 33);
      v425 = (uint64_t *)v423;
      if (v424)
      {
        *((_QWORD *)this + 33) = v424;
        v425 = *v420;
      }
      v426 = *v414;
      _ZF = v425 == *v414;
      *((_BYTE *)v425 + 24) = _ZF;
      if (!_ZF)
      {
        do
        {
          v427 = v425[2];
          if (*(_BYTE *)(v427 + 24))
            break;
          v428 = *(uint64_t **)(v427 + 16);
          v429 = *v428;
          if (*v428 == v427)
          {
            v432 = v428[1];
            if (!v432 || (v433 = *(unsigned __int8 *)(v432 + 24), v430 = (_BYTE *)(v432 + 24), v433))
            {
              if (*(uint64_t **)v427 == v425)
              {
                v434 = (uint64_t *)v425[2];
              }
              else
              {
                v434 = *(uint64_t **)(v427 + 8);
                v435 = *v434;
                *(_QWORD *)(v427 + 8) = *v434;
                if (v435)
                {
                  *(_QWORD *)(v435 + 16) = v427;
                  v428 = *(uint64_t **)(v427 + 16);
                }
                v434[2] = (uint64_t)v428;
                *(_QWORD *)(*(_QWORD *)(v427 + 16) + 8 * (**(_QWORD **)(v427 + 16) != v427)) = v434;
                *v434 = v427;
                *(_QWORD *)(v427 + 16) = v434;
                v428 = (uint64_t *)v434[2];
                v427 = *v428;
              }
              *((_BYTE *)v434 + 24) = 1;
              *((_BYTE *)v428 + 24) = 0;
              v438 = *(_QWORD *)(v427 + 8);
              *v428 = v438;
              if (v438)
                *(_QWORD *)(v438 + 16) = v428;
              *(_QWORD *)(v427 + 16) = v428[2];
              *(_QWORD *)(v428[2] + 8 * (*(_QWORD *)v428[2] != (_QWORD)v428)) = v427;
              *(_QWORD *)(v427 + 8) = v428;
              goto LABEL_591;
            }
          }
          else if (!v429 || (v431 = *(unsigned __int8 *)(v429 + 24), v430 = (_BYTE *)(v429 + 24), v431))
          {
            if (*(uint64_t **)v427 == v425)
            {
              v436 = v425[1];
              *(_QWORD *)v427 = v436;
              if (v436)
              {
                *(_QWORD *)(v436 + 16) = v427;
                v428 = *(uint64_t **)(v427 + 16);
              }
              v425[2] = (uint64_t)v428;
              *(_QWORD *)(*(_QWORD *)(v427 + 16) + 8 * (**(_QWORD **)(v427 + 16) != v427)) = v425;
              v425[1] = v427;
              *(_QWORD *)(v427 + 16) = v425;
              v428 = (uint64_t *)v425[2];
            }
            else
            {
              v425 = (uint64_t *)v425[2];
            }
            *((_BYTE *)v425 + 24) = 1;
            *((_BYTE *)v428 + 24) = 0;
            v427 = v428[1];
            v437 = *(uint64_t **)v427;
            v428[1] = *(_QWORD *)v427;
            if (v437)
              v437[2] = (uint64_t)v428;
            *(_QWORD *)(v427 + 16) = v428[2];
            *(_QWORD *)(v428[2] + 8 * (*(_QWORD *)v428[2] != (_QWORD)v428)) = v427;
            *(_QWORD *)v427 = v428;
LABEL_591:
            v428[2] = v427;
            break;
          }
          *(_BYTE *)(v427 + 24) = 1;
          v425 = v428;
          *((_BYTE *)v428 + 24) = v428 == v426;
          *v430 = 1;
        }
        while (v428 != v426);
      }
      ++*((_QWORD *)this + 35);
    }
    if (*(_QWORD *)(*((_QWORD *)v423 + 5) + 16 * v416))
      goto LABEL_553;
    v439 = (uint64_t *)(v415 + 16 * v416);
    v440 = *(_QWORD *)(*v439 + 8);
    if (v440)
    {
      v441 = *(uint64_t **)(v440 + 16);
      v443 = *v441;
      v442 = (std::__shared_weak_count *)v441[1];
      if (!v442)
        goto LABEL_600;
      v444 = (unint64_t *)&v442->__shared_owners_;
      do
        v445 = __ldxr(v444);
      while (__stxr(v445 + 1, v444));
      do
        v446 = __ldaxr(v444);
      while (__stlxr(v446 - 1, v444));
      if (!v446)
      {
        ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
        std::__shared_weak_count::__release_weak(v442);
        if (v443)
          goto LABEL_553;
      }
      else
      {
LABEL_600:
        if (v443)
          goto LABEL_553;
      }
    }
    v448 = *(_QWORD *)(*v439 + 24);
    v447 = *(std::__shared_weak_count **)(*v439 + 32);
    if (v447)
    {
      v449 = (unint64_t *)&v447->__shared_owners_;
      do
        v450 = __ldxr(v449);
      while (__stxr(v450 + 1, v449));
      do
        v451 = __ldaxr(v449);
      while (__stlxr(v451 - 1, v449));
      if (!v451)
      {
        ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
        std::__shared_weak_count::__release_weak(v447);
        if (!v448)
          goto LABEL_618;
LABEL_607:
        v452 = *v439;
        LODWORD(v658) = *(_DWORD *)(*v439 + 16);
        v453 = *(_QWORD *)(v452 + 24);
        v454 = *(std::__shared_weak_count **)(v452 + 32);
        if (v454)
        {
          v455 = (unint64_t *)&v454->__shared_owners_;
          do
            v456 = __ldxr(v455);
          while (__stxr(v456 + 1, v455));
          v452 = *v439;
          v457 = *(_QWORD *)(*v439 + 24);
          v458 = *(std::__shared_weak_count **)(*v439 + 32);
          v459 = *(pwin_jpg **)(v453 + 8);
          if (v458)
          {
            v460 = (unint64_t *)&v458->__shared_owners_;
            do
              v461 = __ldxr(v460);
            while (__stxr(v461 + 1, v460));
            v452 = *v439;
          }
          v453 = v457;
        }
        else
        {
          v458 = 0;
          v459 = *(pwin_jpg **)(v453 + 8);
        }
        v476 = (unsigned __int8 *)*(unsigned int *)(v453 + 16);
        if ((karo::media::JpegLoaderFig::loadFromChunk((int *)&v658, v459, v476, v452, a5) & 1) != 0)
        {
          v477 = 1;
          if (!v458)
            goto LABEL_640;
        }
        else
        {
          v477 = karo::media::JpegLoaderPwin::loadFromChunk((int *)&v658, v459, v476, v452, a5);
          if (!v458)
            goto LABEL_640;
        }
        v478 = (unint64_t *)&v458->__shared_owners_;
        do
          v479 = __ldaxr(v478);
        while (__stlxr(v479 - 1, v478));
        if (!v479)
        {
          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
          std::__shared_weak_count::__release_weak(v458);
          if (!v454)
            goto LABEL_552;
          goto LABEL_641;
        }
LABEL_640:
        if (!v454)
          goto LABEL_552;
LABEL_641:
        v480 = (unint64_t *)&v454->__shared_owners_;
        do
          v481 = __ldaxr(v480);
        while (__stlxr(v481 - 1, v480));
        goto LABEL_673;
      }
    }
    if (v448)
      goto LABEL_607;
LABEL_618:
    v463 = *(_QWORD *)(*v439 + 56);
    v462 = *(std::__shared_weak_count **)(*v439 + 64);
    if (v462)
    {
      v464 = (unint64_t *)&v462->__shared_owners_;
      do
        v465 = __ldxr(v464);
      while (__stxr(v465 + 1, v464));
      do
        v466 = __ldaxr(v464);
      while (__stlxr(v466 - 1, v464));
      if (!v466)
        break;
    }
    if (!v463)
      goto LABEL_647;
LABEL_624:
    v467 = *v439;
    *(_DWORD *)buf = *(_DWORD *)(*v439 + 16);
    v468 = *(_QWORD *)(v467 + 56);
    v454 = *(std::__shared_weak_count **)(v467 + 64);
    if (v454)
    {
      v469 = (unint64_t *)&v454->__shared_owners_;
      do
        v470 = __ldxr(v469);
      while (__stxr(v470 + 1, v469));
      v467 = *v439;
      v471 = *(_QWORD *)(*v439 + 56);
      v472 = *(std::__shared_weak_count **)(*v439 + 64);
      v473 = *(pwin_jpg **)(v468 + 8);
      if (v472)
      {
        v474 = (unint64_t *)&v472->__shared_owners_;
        do
          v475 = __ldxr(v474);
        while (__stxr(v475 + 1, v474));
        v467 = *v439;
      }
      v468 = v471;
    }
    else
    {
      v472 = 0;
      v473 = *(pwin_jpg **)(v468 + 8);
    }
    v491 = (unsigned __int8 *)*(unsigned int *)(v468 + 16);
    HIBYTE(v659) = 0;
    LOBYTE(v658) = 0;
    v477 = karo::media::ImageLoader::loadFromChunk((int *)buf, v473, v491, (unsigned __int16 *)&v658, v467);
    if (v472)
    {
      v492 = (unint64_t *)&v472->__shared_owners_;
      do
        v493 = __ldaxr(v492);
      while (__stlxr(v493 - 1, v492));
      if (!v493)
      {
        ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
        std::__shared_weak_count::__release_weak(v472);
      }
    }
    if (v454)
    {
      v494 = (unint64_t *)&v454->__shared_owners_;
      do
        v481 = __ldaxr(v494);
      while (__stlxr(v481 - 1, v494));
LABEL_673:
      if (!v481)
      {
        ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
        std::__shared_weak_count::__release_weak(v454);
      }
    }
LABEL_552:
    v5 = this;
    if ((v477 & 1) == 0)
      goto LABEL_739;
LABEL_553:
    v415 = v413[5];
    v416 = ++v417;
    if (v417 >= (unint64_t)((v413[6] - v415) >> 4))
      goto LABEL_727;
  }
  ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
  std::__shared_weak_count::__release_weak(v462);
  if (v463)
    goto LABEL_624;
LABEL_647:
  v483 = *(_QWORD *)(*v439 + 40);
  v482 = *(std::__shared_weak_count **)(*v439 + 48);
  if (v482)
  {
    v484 = (unint64_t *)&v482->__shared_owners_;
    do
      v485 = __ldxr(v484);
    while (__stxr(v485 + 1, v484));
    do
      v486 = __ldaxr(v484);
    while (__stlxr(v486 - 1, v484));
    if (!v486)
    {
      ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
      std::__shared_weak_count::__release_weak(v482);
    }
  }
  if (!v483)
    goto LABEL_553;
  v658 = 850045863;
  v659 = 0u;
  v660 = 0u;
  v661 = 0u;
  v662 = 0u;
  v663 = 0u;
  v664 = 0;
  v665 = 1065353216;
  if (LoadVideoToolbox(void)::loadPredicate != -1)
    dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_15551);
  if (LoadCoreMedia(void)::loadPredicate != -1)
    dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_5);
  v487 = (_QWORD *)*v439;
  v488 = *(_DWORD *)(*v439 + 16);
  if (v488 == 4 || v488 == 6)
  {
    v490 = 2;
  }
  else
  {
    if (v488 != 14)
      goto LABEL_738;
    v490 = 0;
  }
  v495 = v487[9];
  v497 = *(const void **)(v495 + 8);
  v496 = *(opaqueCMSampleBuffer **)(v495 + 16);
  v498 = v487[11];
  v499 = *(_QWORD *)(v498 + 8);
  v500 = *(_QWORD *)(v498 + 16);
  v501 = v487[5];
  v502 = (std::__shared_weak_count *)v487[6];
  v615 = v502;
  v635 = v496;
  v629 = v499;
  v624 = v500;
  pixelBuffer = v497;
  if (v502)
  {
    v503 = (unint64_t *)&v502->__shared_owners_;
    do
      v504 = __ldxr(v503);
    while (__stxr(v504 + 1, v503));
    v505 = *(_QWORD *)(*v439 + 40);
    v506 = *(std::__shared_weak_count **)(*v439 + 48);
    v507 = *(void **)(v501 + 8);
    if (v506)
    {
      v508 = (unint64_t *)&v506->__shared_owners_;
      do
        v509 = __ldxr(v508);
      while (__stxr(v509 + 1, v508));
      v616 = v506;
      v614 = 0;
    }
    else
    {
      v616 = 0;
      v614 = 1;
    }
    v501 = v505;
    v510 = v507;
  }
  else
  {
    v616 = 0;
    v510 = *(void **)(v501 + 8);
    v614 = 1;
  }
  v511 = *(opaqueCMFormatDescription **)(v501 + 16);
  *(_QWORD *)&v655 = 0;
  *((_QWORD *)&v655 + 1) = &v655;
  v656 = 0x2020000000;
  v657 = 0;
  *(_QWORD *)buf = 0;
  v650 = buf;
  v651 = 0x3032000000;
  v652 = __Block_byref_object_copy__15563;
  v653 = __Block_byref_object_dispose__15564;
  v654 = dispatch_semaphore_create(1);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)v650 + 5), 0xFFFFFFFFFFFFFFFFLL);
  *(_QWORD *)&v644 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v644 + 1) = 3221225472;
  v645 = ___ZN2md28HardwareVideoDecodingSession10decodeSyncENS_19HardwareVideoOutputEPKhmS3_miPhm_block_invoke;
  v646 = &unk_1E42F2D00;
  v647 = &v655;
  v648 = buf;
  md::HardwareVideoDecodingSession::decode((uint64_t)&v658, v490, pixelBuffer, v635, v629, v624, v510, v511, 0, &v644);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)v650 + 5), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)v650 + 5));
  v512 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))(*((_QWORD *)&v655 + 1) + 24);
  _Block_object_dispose(buf, 8);

  _Block_object_dispose(&v655, 8);
  if ((v614 & 1) == 0)
  {
    v513 = (unint64_t *)&v616->__shared_owners_;
    do
      v514 = __ldaxr(v513);
    while (__stlxr(v514 - 1, v513));
    if (!v514)
    {
      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
      std::__shared_weak_count::__release_weak(v616);
    }
  }
  if (v615)
  {
    v515 = (unint64_t *)&v615->__shared_owners_;
    do
      v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
      std::__shared_weak_count::__release_weak(v615);
    }
  }
  if (v512)
  {
    v517 = (std::__shared_weak_count_vtbl *)operator new();
    v517->~__shared_weak_count = v512;
    CFRetain(v512);
    v518 = (std::__shared_weak_count *)operator new();
    v518->__shared_owners_ = 0;
    v519 = (unint64_t *)&v518->__shared_owners_;
    v518->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8788;
    v518->__shared_weak_owners_ = 0;
    v518[1].__vftable = v517;
    v636 = v518;
    Width = CVPixelBufferGetWidth((CVPixelBufferRef)v512);
    Height = CVPixelBufferGetHeight((CVPixelBufferRef)v512);
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)v512, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress((CVPixelBufferRef)v512);
    if (*(_DWORD *)(*v439 + 16) == 6)
      v521 = 4;
    else
      v521 = *(_DWORD *)(*v439 + 16);
    karo::media::Image::setFormat(*v439, v521);
    v522 = *(_DWORD **)(*v439 + 8);
    if (v522)
    {
      *v522 = Width;
      v522[1] = Height;
    }
    BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)v512);
    pixelBuffera = (__CVBuffer *)v512;
    v524 = *v439;
    v525 = (std::__shared_weak_count *)operator new(0x40uLL);
    v526 = v525;
    v525->__shared_owners_ = 0;
    v527 = (unint64_t *)&v525->__shared_owners_;
    v525->__shared_weak_owners_ = 0;
    v525->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6028;
    v528 = &v525[1].__vftable;
    do
      v529 = __ldxr(v519);
    while (__stxr(v529 + 1, v519));
    v525[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C4128;
    v525[1].__shared_owners_ = 0;
    v525[1].__shared_weak_owners_ = 0;
    v525[2].__vftable = v517;
    v525[2].__shared_owners_ = (uint64_t)v636;
    do
      v530 = __ldxr(v519);
    while (__stxr(v530 + 1, v519));
    v525[1].__shared_owners_ = (uint64_t)BaseAddress;
    v525[1].__shared_weak_owners_ = BytesPerRow * Height;
    do
      v531 = __ldaxr(v519);
    while (__stlxr(v531 - 1, v519));
    if (!v531)
    {
      v532 = &v525[1].__vftable;
      ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
      std::__shared_weak_count::__release_weak(v636);
      v528 = v532;
    }
    v533 = *(_QWORD *)(v524 + 8);
    if (v533)
    {
      v534 = *(_QWORD **)(v533 + 16);
      do
        v535 = __ldxr(v527);
      while (__stxr(v535 + 1, v527));
      v536 = (std::__shared_weak_count *)v534[1];
      *v534 = v528;
      v534[1] = v526;
      if (v536)
      {
        v537 = (unint64_t *)&v536->__shared_owners_;
        do
          v538 = __ldaxr(v537);
        while (__stlxr(v538 - 1, v537));
        if (!v538)
        {
          ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
          std::__shared_weak_count::__release_weak(v536);
        }
      }
    }
    do
      v539 = __ldaxr(v527);
    while (__stlxr(v539 - 1, v527));
    if (!v539)
    {
      ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
      std::__shared_weak_count::__release_weak(v526);
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffera, 1uLL);
    CVPixelBufferRelease(pixelBuffera);
    v5 = this;
    do
      v540 = __ldaxr(v519);
    while (__stlxr(v540 - 1, v519));
    if (!v540)
    {
      ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
      std::__shared_weak_count::__release_weak(v636);
    }
    md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession((std::mutex *)&v658);
    goto LABEL_553;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v543 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v543, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19F029000, v543, OS_LOG_TYPE_ERROR, "Failed to decode H264 image with hardware decoder.", buf, 2u);
  }

  v5 = this;
LABEL_738:
  md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession((std::mutex *)&v658);
LABEL_739:
  (*(void (**)(altitude::ProcessC3b *))(*(_QWORD *)v5 + 16))(v5);
  v5 = this;
LABEL_740:
  *((double *)v5 + 44) = (*((double *)v5 + 41) + (double)std::chrono::steady_clock::now().__d_.__rep_ * -0.000000001)
                       * -1000.0;
  v544 = (_QWORD *)*((_QWORD *)v5 + 31);
  if (*((_BYTE *)v5 + 208))
  {
    v545 = (_QWORD *)v544[25];
    if (v545 != v544 + 26)
    {
      v546 = vdupq_n_s64(3uLL);
      __asm { FMOV            V3.2D, #0.25 }
      v551 = (float64x2_t)xmmword_19FFB2F20;
      v552 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
      v553 = (float64x2_t)xmmword_19FFB2F10;
      v612 = vdupq_n_s64(0x3FB999999999999AuLL);
      v611 = vdupq_n_s64(0x3FB5555555555555uLL);
      v554 = (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL);
      v555 = (float64x2_t)xmmword_19FFB2EE0;
      v556 = (float64x2_t)xmmword_19FFB2ED0;
      __asm { FMOV            V18.2D, #0.125 }
      v558 = (float64x2_t)xmmword_19FFB2EC0;
      v559 = (float64x2_t)xmmword_19FFB2EB0;
      v637 = _Q3;
      v640 = v546;
      v626 = v552;
      v617 = v554;
      v613 = _Q18;
      do
      {
        if ((*((_DWORD *)v545 + 8) | 4) != 5)
        {
          v562 = (uint64_t *)v545[5];
          v563 = (uint64_t *)v545[6];
          while (v562 != v563)
          {
            v564 = *(uint64_t **)(*v562 + 8);
            if (v564)
            {
              v565 = *((_DWORD *)v564 + 2);
              v566 = *v564;
              v567.i64[0] = *v564;
              v567.i64[1] = HIDWORD(*v564);
              v568 = v567;
              switch(v565)
              {
                case 1u:
                case 2u:
                case 0x19u:
                  v571 = v568.u32[2] * (unint64_t)v568.u32[0];
                  goto LABEL_785;
                case 3u:
                case 4u:
                case 6u:
                case 0x13u:
                case 0x18u:
                case 0x1Bu:
                  v571 = 2 * v568.u32[2] * (unint64_t)v568.u32[0];
                  goto LABEL_785;
                case 5u:
                case 7u:
                case 8u:
                case 0xCu:
                case 0xDu:
                case 0xEu:
                case 0xFu:
                case 0x14u:
                case 0x15u:
                case 0x1Au:
                  v571 = 4 * v568.u32[2] * (unint64_t)v568.u32[0];
                  goto LABEL_785;
                case 9u:
                case 0x10u:
                case 0x11u:
                  v572 = v568.u32[2] * (unint64_t)v568.u32[0];
                  goto LABEL_776;
                case 0xAu:
                case 0xBu:
                  v571 = 3 * v568.u32[2] * (unint64_t)v568.u32[0];
                  goto LABEL_785;
                case 0x12u:
                  v586 = v568.u32[2] * (unint64_t)v568.u32[0];
                  goto LABEL_784;
                case 0x16u:
                  v585 = vsubq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v568, 2uLL), vtstq_s64(v568, v546));
                  v572 = v585.i32[0] * (uint64_t)v585.i32[2];
                  goto LABEL_776;
                case 0x1Cu:
                case 0x2Cu:
                  v582.i64[0] = v566;
                  v582.i64[1] = HIDWORD(v566);
                  v570 = vmulq_f64(vcvtq_f64_u64(v582), _Q3);
                  goto LABEL_782;
                case 0x1Du:
                case 0x2Du:
                  v584.i64[0] = v566;
                  v584.i64[1] = HIDWORD(v566);
                  v570 = vmulq_f64(vcvtq_f64_u64(v584), v551);
                  goto LABEL_782;
                case 0x1Eu:
                case 0x2Eu:
                  v583.i64[0] = v566;
                  v583.i64[1] = HIDWORD(v566);
                  v570 = vmulq_f64(vcvtq_f64_u64(v583), v552);
                  goto LABEL_782;
                case 0x1Fu:
                case 0x2Fu:
                  v581.i64[0] = v566;
                  v581.i64[1] = HIDWORD(v566);
                  v570 = vmulq_f64(vcvtq_f64_u64(v581), v553);
                  goto LABEL_782;
                case 0x20u:
                case 0x21u:
                case 0x22u:
                case 0x23u:
                case 0x24u:
                case 0x25u:
                case 0x26u:
                case 0x27u:
                case 0x28u:
                case 0x29u:
                case 0x30u:
                case 0x31u:
                case 0x32u:
                case 0x33u:
                case 0x34u:
                case 0x35u:
                case 0x36u:
                case 0x37u:
                case 0x38u:
                case 0x39u:
                  switch(v565 & 0xFFFFFFEF)
                  {
                    case ' ':
                      v569.i64[0] = v566;
                      v569.i64[1] = HIDWORD(v566);
                      v570 = vmulq_f64(vcvtq_f64_u64(v569), v554);
                      break;
                    case '!':
                      v576.i64[0] = v566;
                      v576.i64[1] = HIDWORD(v566);
                      v570 = vmulq_f64(vcvtq_f64_u64(v576), v555);
                      break;
                    case '"':
                      v574.i64[0] = v566;
                      v574.i64[1] = HIDWORD(v566);
                      v570 = vmulq_f64(vcvtq_f64_u64(v574), v556);
                      break;
                    case '#':
                      v575.i64[0] = v566;
                      v575.i64[1] = HIDWORD(v566);
                      v570 = vmulq_f64(vcvtq_f64_u64(v575), _Q18);
                      break;
                    case '$':
                      v573.i64[0] = v566;
                      v573.i64[1] = HIDWORD(v566);
                      v570 = vmulq_f64(vcvtq_f64_u64(v573), v558);
                      break;
                    case '%':
                      v577.i64[0] = v566;
                      v577.i64[1] = HIDWORD(v566);
                      v570 = vmulq_f64(vcvtq_f64_u64(v577), v559);
                      break;
                    default:
                      switch(v565 & 0xFFFFFFEF)
                      {
                        case '&':
                          v578.i64[0] = v566;
                          v578.i64[1] = HIDWORD(v566);
                          v579 = vcvtq_f64_u64(v578);
                          v580 = (float64x2_t)xmmword_19FFB2F00;
                          goto LABEL_781;
                        case '\'':
                          v589.i64[0] = v566;
                          v589.i64[1] = HIDWORD(v566);
                          v579 = vcvtq_f64_u64(v589);
                          v580 = (float64x2_t)v612;
                          goto LABEL_781;
                        case '(':
                          v587.i64[0] = v566;
                          v587.i64[1] = HIDWORD(v566);
                          v579 = vcvtq_f64_u64(v587);
                          v580 = (float64x2_t)xmmword_19FFB2EF0;
                          goto LABEL_781;
                        case ')':
                          v588.i64[0] = v566;
                          v588.i64[1] = HIDWORD(v566);
                          v579 = vcvtq_f64_u64(v588);
                          v580 = (float64x2_t)v611;
LABEL_781:
                          v570 = vmulq_f64(v579, v580);
                          goto LABEL_782;
                        default:
                          goto LABEL_783;
                      }
                  }
LABEL_782:
                  v568 = (int64x2_t)vcvtq_u64_f64(vrndpq_f64(v570));
LABEL_783:
                  v586 = v568.i64[0] * v568.i64[1];
LABEL_784:
                  v571 = 16 * v586;
                  goto LABEL_785;
                case 0x2Au:
                case 0x2Bu:
                  v572 = 3 * v568.u32[2] * (unint64_t)v568.u32[0];
LABEL_776:
                  v571 = 8 * v572;
LABEL_785:
                  if (v571)
                    goto LABEL_786;
                  break;
                case 0x3Au:
LABEL_786:
                  if (v564[3] - v564[2] == 16)
                  {
                    v272 = v565 > 0x39;
                    v590 = (1 << v565) & 0x3FFF3FFF0400000;
                    if (v272 || v590 == 0)
                    {
                      karo::media::Image::mipmapAndCompress(*v562, *(_DWORD *)(*v562 + 16));
                      v559 = (float64x2_t)xmmword_19FFB2EB0;
                      v558 = (float64x2_t)xmmword_19FFB2EC0;
                      _Q18 = v613;
                      v556 = (float64x2_t)xmmword_19FFB2ED0;
                      v555 = (float64x2_t)xmmword_19FFB2EE0;
                      v554 = v617;
                      v553 = (float64x2_t)xmmword_19FFB2F10;
                      v552 = v626;
                      v551 = (float64x2_t)xmmword_19FFB2F20;
                      _Q3 = v637;
                      v546 = v640;
                    }
                  }
                  break;
                default:
                  break;
              }
            }
            v562 += 2;
          }
        }
        v560 = (_QWORD *)v545[1];
        if (v560)
        {
          do
          {
            v561 = v560;
            v560 = (_QWORD *)*v560;
          }
          while (v560);
        }
        else
        {
          do
          {
            v561 = (_QWORD *)v545[2];
            _ZF = *v561 == (_QWORD)v545;
            v545 = v561;
          }
          while (!_ZF);
        }
        v545 = v561;
      }
      while (v561 != v544 + 26);
      v5 = this;
      v544 = (_QWORD *)*((_QWORD *)this + 31);
    }
  }
  v593 = (uint64_t **)(v544 + 26);
  v592 = (uint64_t *)v544[26];
  if (v592)
  {
    while (1)
    {
      while (1)
      {
        v594 = (uint64_t **)v592;
        v595 = *((_DWORD *)v592 + 8);
        if (v595 < 2)
          break;
        v592 = *v594;
        v593 = v594;
        if (!*v594)
          goto LABEL_801;
      }
      if (v595 == 1)
        break;
      v592 = v594[1];
      if (!v592)
      {
        v593 = v594 + 1;
        goto LABEL_801;
      }
    }
    v596 = v594;
  }
  else
  {
    v594 = (uint64_t **)(v544 + 26);
LABEL_801:
    v596 = operator new(0x40uLL);
    v596[8] = 1;
    *((_QWORD *)v596 + 6) = 0;
    *((_QWORD *)v596 + 7) = 0;
    *((_QWORD *)v596 + 5) = 0;
    *(_QWORD *)v596 = 0;
    *((_QWORD *)v596 + 1) = 0;
    *((_QWORD *)v596 + 2) = v594;
    *v593 = (uint64_t *)v596;
    v597 = *(_QWORD *)v544[25];
    v598 = (uint64_t *)v596;
    if (v597)
    {
      v544[25] = v597;
      v598 = *v593;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v544[26], v598);
    ++v544[27];
    v5 = this;
  }
  v599 = *((_QWORD *)v596 + 5);
  for (i = *((_QWORD *)v596 + 6); v599 != i; v599 += 16)
  {
    v601 = *(_DWORD **)(*(_QWORD *)v599 + 8);
    if (v601)
    {
      *v601 *= v601[1];
      v601[1] = 1;
    }
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8)
                                                                           + 112)
                                                               + 8)
                                                 + 24))(&v644);
  v5 = this;
  v658 = (uint64_t)&off_1E42D84C8;
  *(_QWORD *)&v659 = this;
  *(_QWORD *)&v660 = &v658;
  *(_QWORD *)buf = 0;
  v650 = 0;
  (*(void (**)(_QWORD, uint64_t *, uint8_t *))(*(_QWORD *)v644 + 16))(v644, &v658, buf);
  v602 = (std::__shared_weak_count *)v650;
  if (v650)
  {
    v603 = (unint64_t *)(v650 + 8);
    do
      v604 = __ldaxr(v603);
    while (__stlxr(v604 - 1, v603));
    if (!v604)
    {
      ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
      std::__shared_weak_count::__release_weak(v602);
    }
  }
  v605 = (uint64_t *)v660;
  if ((uint64_t *)v660 == &v658)
  {
    v606 = 4;
    v605 = &v658;
LABEL_819:
    (*(void (**)(void))(*v605 + 8 * v606))();
  }
  else if ((_QWORD)v660)
  {
    v606 = 5;
    goto LABEL_819;
  }
  if ((_QWORD)v644)
  {
    v607 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v644 + 24))(v644);
    v608 = v644;
    *(_QWORD *)&v644 = 0;
    v658 = v608;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v607 + 48))(v607, &v658);
    v609 = v658;
    v658 = 0;
    if (v609)
      (*(void (**)(uint64_t))(*(_QWORD *)v609 + 8))(v609);
    v610 = v644;
    *(_QWORD *)&v644 = 0;
    if (v610)
      (*(void (**)(uint64_t))(*(_QWORD *)v610 + 8))(v610);
  }
LABEL_825:
  pthread_mutex_lock(*((pthread_mutex_t **)v5 + 19));
  *((_DWORD *)v5 + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 19));
}

void sub_19FC2A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  unint64_t *v37;
  uint64_t v38;
  unint64_t v40;

  do
    v40 = __ldaxr(v37);
  while (__stlxr(v40 - 1, v37));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))a37->__on_zero_shared)(a37);
    std::__shared_weak_count::__release_weak(a37);
  }
  md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession((std::mutex *)(v38 - 232));
  _Unwind_Resume(a1);
}

void sub_19FC2A608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](&a47);
  JUMPOUT(0x19FC2A658);
}

void sub_19FC2A61C()
{
  JUMPOUT(0x19FC2A624);
}

void sub_19FC2A64C()
{
  JUMPOUT(0x19FC2A660);
}

void std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D84C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D84C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
  uint64_t v2;
  altitude::TextureMapLoadJob **v3;
  altitude::TextureMapLoadJob **v4;
  altitude::TextureMapLoadJob *v5;
  int v6;
  altitude::TextureMapLoadJob *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t **v17;
  uint64_t **v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t **v46;
  uint64_t **v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  unsigned int v100;
  ResourceAccessor *v101;
  uint64_t v102;
  char *v103;
  std::__shared_weak_count *v104;

  v2 = *(_QWORD *)(a1 + 8);
  v101 = *a2;
  v3 = *(altitude::TextureMapLoadJob ***)(v2 + 288);
  v4 = *(altitude::TextureMapLoadJob ***)(v2 + 296);
  while (v3 != v4)
  {
    v5 = *v3;
    pthread_mutex_lock(*((pthread_mutex_t **)*v3 + 19));
    v6 = *((_DWORD *)v5 + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 19));
    if ((v6 & 1) != 0)
    {
      v7 = *v3;
      pthread_mutex_lock(*((pthread_mutex_t **)*v3 + 19));
      v8 = *((_DWORD *)v7 + 40);
      pthread_mutex_unlock(*((pthread_mutex_t **)v7 + 19));
      if ((v8 & 2) == 0)
        altitude::TextureMapLoadJob::uploadTextures(*v3, v101, *(_BYTE *)(v2 + 209) == 0);
    }
    v3 += 2;
  }
  v9 = *(_QWORD **)(v2 + 248);
  v10 = (_QWORD *)v9[25];
  v99 = v9 + 26;
  v102 = v2;
  if (v10 != v9 + 26)
  {
    v11 = (uint64_t **)(v2 + 272);
    while (1)
    {
      if (*((_DWORD *)v10 + 8) != 5)
      {
        v12 = v10[5];
        if (v10[6] != v12)
          break;
      }
LABEL_110:
      v75 = (_QWORD *)v10[1];
      if (v75)
      {
        do
        {
          v76 = v75;
          v75 = (_QWORD *)*v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (_QWORD *)v10[2];
          v24 = *v76 == (_QWORD)v10;
          v10 = v76;
        }
        while (!v24);
      }
      v10 = v76;
      if (v76 == v99)
      {
        v9 = *(_QWORD **)(v2 + 248);
        goto LABEL_117;
      }
    }
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = *v11;
      v16 = *((_DWORD *)v10 + 8);
      v17 = v11;
      v18 = v11;
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            v18 = (uint64_t **)v15;
            v19 = *((_DWORD *)v15 + 8);
            if (v16 >= v19)
              break;
            v15 = *v18;
            v17 = v18;
            if (!*v18)
              goto LABEL_21;
          }
          if (v19 >= v16)
            break;
          v15 = v18[1];
          if (!v15)
          {
            v17 = v18 + 1;
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        v20 = (uint64_t *)v18;
        v18 = (uint64_t **)operator new(0x40uLL);
        *((_DWORD *)v18 + 8) = v16;
        v18[6] = 0;
        v18[7] = 0;
        v18[5] = 0;
        *v18 = 0;
        v18[1] = 0;
        v18[2] = v20;
        *v17 = (uint64_t *)v18;
        v21 = **(_QWORD **)(v2 + 264);
        v22 = (uint64_t *)v18;
        if (v21)
        {
          *(_QWORD *)(v2 + 264) = v21;
          v22 = *v17;
        }
        v23 = *v11;
        v24 = v22 == *v11;
        *((_BYTE *)v22 + 24) = v24;
        if (!v24)
        {
          do
          {
            v25 = v22[2];
            if (*(_BYTE *)(v25 + 24))
              break;
            v26 = *(uint64_t **)(v25 + 16);
            v27 = *v26;
            if (*v26 == v25)
            {
              v30 = v26[1];
              if (!v30 || (v31 = *(unsigned __int8 *)(v30 + 24), v28 = (_BYTE *)(v30 + 24), v31))
              {
                if (*(uint64_t **)v25 == v22)
                {
                  v32 = (uint64_t *)v22[2];
                }
                else
                {
                  v32 = *(uint64_t **)(v25 + 8);
                  v33 = *v32;
                  *(_QWORD *)(v25 + 8) = *v32;
                  if (v33)
                  {
                    *(_QWORD *)(v33 + 16) = v25;
                    v26 = *(uint64_t **)(v25 + 16);
                  }
                  v32[2] = (uint64_t)v26;
                  *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v32;
                  *v32 = v25;
                  *(_QWORD *)(v25 + 16) = v32;
                  v26 = (uint64_t *)v32[2];
                  v25 = *v26;
                }
                *((_BYTE *)v32 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v36 = *(_QWORD *)(v25 + 8);
                *v26 = v36;
                if (v36)
                  *(_QWORD *)(v36 + 16) = v26;
                *(_QWORD *)(v25 + 16) = v26[2];
                *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
                *(_QWORD *)(v25 + 8) = v26;
                goto LABEL_50;
              }
            }
            else if (!v27 || (v29 = *(unsigned __int8 *)(v27 + 24), v28 = (_BYTE *)(v27 + 24), v29))
            {
              if (*(uint64_t **)v25 == v22)
              {
                v34 = v22[1];
                *(_QWORD *)v25 = v34;
                if (v34)
                {
                  *(_QWORD *)(v34 + 16) = v25;
                  v26 = *(uint64_t **)(v25 + 16);
                }
                v22[2] = (uint64_t)v26;
                *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v22;
                v22[1] = v25;
                *(_QWORD *)(v25 + 16) = v22;
                v26 = (uint64_t *)v22[2];
              }
              else
              {
                v22 = (uint64_t *)v22[2];
              }
              *((_BYTE *)v22 + 24) = 1;
              *((_BYTE *)v26 + 24) = 0;
              v25 = v26[1];
              v35 = *(uint64_t **)v25;
              v26[1] = *(_QWORD *)v25;
              if (v35)
                v35[2] = (uint64_t)v26;
              *(_QWORD *)(v25 + 16) = v26[2];
              *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
              *(_QWORD *)v25 = v26;
LABEL_50:
              v26[2] = v25;
              break;
            }
            *(_BYTE *)(v25 + 24) = 1;
            v22 = v26;
            *((_BYTE *)v26 + 24) = v26 == v23;
            *v28 = 1;
          }
          while (v26 != v23);
        }
        ++*(_QWORD *)(v2 + 280);
      }
      if (v18[5][2 * v13])
        goto LABEL_13;
      v37 = operator new();
      *(_QWORD *)v37 = &off_1E42C39D0;
      *(_DWORD *)(v37 + 8) = 29;
      *(_QWORD *)(v37 + 16) = 0;
      *(_QWORD *)(v37 + 24) = 0;
      *(_OWORD *)(v37 + 40) = 0u;
      *(_OWORD *)(v37 + 56) = 0u;
      *(_OWORD *)(v37 + 72) = 0u;
      *(_OWORD *)(v37 + 81) = 0u;
      v38 = (std::__shared_weak_count *)operator new();
      v38->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      v38->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8520;
      v38->__shared_weak_owners_ = 0;
      v38[1].__vftable = (std::__shared_weak_count_vtbl *)v37;
      v103 = 0;
      v104 = 0;
      v100 = v14;
      if (*((_DWORD *)v10 + 8) == 1)
      {
        v40 = (char *)operator new(0x58uLL);
        *((_QWORD *)v40 + 2) = 0;
        v41 = v40 + 24;
        v42 = xmmword_19FFB3C50;
        v43 = 0x100000000;
      }
      else
      {
        v40 = (char *)operator new(0x58uLL);
        *((_QWORD *)v40 + 2) = 0;
        v41 = v40 + 24;
        v43 = 0x100000001;
        *(_QWORD *)&v42 = 0x100000001;
        *((_QWORD *)&v42 + 1) = 0x100000001;
      }
      *(_QWORD *)v40 = &off_1E42DED18;
      *((_QWORD *)v40 + 1) = 0;
      *((_DWORD *)v40 + 14) = 0;
      *((_QWORD *)v40 + 5) = 0;
      *((_QWORD *)v40 + 6) = 0;
      *((_QWORD *)v40 + 3) = &off_1E42B63B0;
      *((_QWORD *)v40 + 4) = 0;
      *(_OWORD *)(v40 + 60) = v42;
      *(_QWORD *)(v40 + 76) = v43;
      *((_DWORD *)v40 + 21) = 0;
      v103 = v41;
      v104 = (std::__shared_weak_count *)v40;
      altitude::TextureMap::loadImage(v37, *(_QWORD *)(v12 + 16 * v13), &v103, (uint64_t)v101);
      v44 = *v11;
      v45 = *((_DWORD *)v10 + 8);
      v46 = v11;
      v47 = v11;
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            v46 = (uint64_t **)v44;
            v48 = *((_DWORD *)v44 + 8);
            if (v45 >= v48)
              break;
            v44 = *v46;
            v11 = v46;
            if (!*v46)
              goto LABEL_63;
          }
          if (v48 >= v45)
            break;
          v44 = v46[1];
          if (!v44)
          {
            v11 = v46 + 1;
            goto LABEL_63;
          }
        }
        v49 = v46;
        v2 = v102;
        v11 = v47;
        v14 = v100;
      }
      else
      {
LABEL_63:
        v49 = operator new(0x40uLL);
        v49[8] = v45;
        *((_QWORD *)v49 + 6) = 0;
        *((_QWORD *)v49 + 7) = 0;
        *((_QWORD *)v49 + 5) = 0;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
        *((_QWORD *)v49 + 2) = v46;
        *v11 = (uint64_t *)v49;
        v2 = v102;
        v50 = **(_QWORD **)(v102 + 264);
        v51 = (uint64_t *)v49;
        if (v50)
        {
          *(_QWORD *)(v102 + 264) = v50;
          v51 = *v11;
        }
        v11 = v47;
        v52 = *v47;
        v24 = v51 == *v47;
        *((_BYTE *)v51 + 24) = v24;
        v14 = v100;
        if (!v24)
        {
          do
          {
            v53 = v51[2];
            if (*(_BYTE *)(v53 + 24))
              break;
            v54 = *(uint64_t **)(v53 + 16);
            v55 = *v54;
            if (*v54 == v53)
            {
              v58 = v54[1];
              if (!v58 || (v59 = *(unsigned __int8 *)(v58 + 24), v56 = (_BYTE *)(v58 + 24), v59))
              {
                if (*(uint64_t **)v53 == v51)
                {
                  v60 = (uint64_t *)v51[2];
                }
                else
                {
                  v60 = *(uint64_t **)(v53 + 8);
                  v61 = *v60;
                  *(_QWORD *)(v53 + 8) = *v60;
                  if (v61)
                  {
                    *(_QWORD *)(v61 + 16) = v53;
                    v54 = *(uint64_t **)(v53 + 16);
                  }
                  v60[2] = (uint64_t)v54;
                  *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8 * (**(_QWORD **)(v53 + 16) != v53)) = v60;
                  *v60 = v53;
                  *(_QWORD *)(v53 + 16) = v60;
                  v54 = (uint64_t *)v60[2];
                  v53 = *v54;
                }
                *((_BYTE *)v60 + 24) = 1;
                *((_BYTE *)v54 + 24) = 0;
                v64 = *(_QWORD *)(v53 + 8);
                *v54 = v64;
                if (v64)
                  *(_QWORD *)(v64 + 16) = v54;
                *(_QWORD *)(v53 + 16) = v54[2];
                *(_QWORD *)(v54[2] + 8 * (*(_QWORD *)v54[2] != (_QWORD)v54)) = v53;
                *(_QWORD *)(v53 + 8) = v54;
                goto LABEL_93;
              }
            }
            else if (!v55 || (v57 = *(unsigned __int8 *)(v55 + 24), v56 = (_BYTE *)(v55 + 24), v57))
            {
              if (*(uint64_t **)v53 == v51)
              {
                v62 = v51[1];
                *(_QWORD *)v53 = v62;
                if (v62)
                {
                  *(_QWORD *)(v62 + 16) = v53;
                  v54 = *(uint64_t **)(v53 + 16);
                }
                v51[2] = (uint64_t)v54;
                *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8 * (**(_QWORD **)(v53 + 16) != v53)) = v51;
                v51[1] = v53;
                *(_QWORD *)(v53 + 16) = v51;
                v54 = (uint64_t *)v51[2];
              }
              else
              {
                v51 = (uint64_t *)v51[2];
              }
              *((_BYTE *)v51 + 24) = 1;
              *((_BYTE *)v54 + 24) = 0;
              v53 = v54[1];
              v63 = *(uint64_t **)v53;
              v54[1] = *(_QWORD *)v53;
              if (v63)
                v63[2] = (uint64_t)v54;
              *(_QWORD *)(v53 + 16) = v54[2];
              *(_QWORD *)(v54[2] + 8 * (*(_QWORD *)v54[2] != (_QWORD)v54)) = v53;
              *(_QWORD *)v53 = v54;
LABEL_93:
              v54[2] = v53;
              break;
            }
            *(_BYTE *)(v53 + 24) = 1;
            v51 = v54;
            *((_BYTE *)v54 + 24) = v54 == v52;
            *v56 = 1;
          }
          while (v54 != v52);
        }
        ++*(_QWORD *)(v102 + 280);
      }
      v65 = *((_QWORD *)v49 + 5);
      do
        v66 = __ldxr(p_shared_owners);
      while (__stxr(v66 + 1, p_shared_owners));
      *(_QWORD *)(v65 + 16 * v13) = v37;
      v67 = v65 + 16 * v13;
      v68 = *(std::__shared_weak_count **)(v67 + 8);
      *(_QWORD *)(v67 + 8) = v38;
      if (!v68)
        goto LABEL_101;
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
        v71 = v104;
        if (v104)
        {
LABEL_102:
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
          goto LABEL_107;
        }
      }
      else
      {
LABEL_101:
        v71 = v104;
        if (v104)
          goto LABEL_102;
      }
      do
LABEL_107:
        v74 = __ldaxr(p_shared_owners);
      while (__stlxr(v74 - 1, p_shared_owners));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
LABEL_13:
      v12 = v10[5];
      v13 = ++v14;
      if (v14 >= (unint64_t)((v10[6] - v12) >> 4))
        goto LABEL_110;
    }
  }
LABEL_117:
  v77 = v9[22];
  if (v9[23] != v77)
  {
    v78 = 0;
    while (1)
    {
      if (*(_BYTE *)(v77 + 56 * v78) == 11)
      {
        v79 = v77 + 56 * v78;
        v80 = *(_QWORD *)(v79 + 8);
        if (*(_QWORD *)(v79 + 16) != v80)
          break;
      }
LABEL_119:
      ++v78;
      v77 = v9[22];
      if (v78 >= 0x6DB6DB6DB6DB6DB7 * ((v9[23] - v77) >> 3))
        return;
    }
    v81 = 0;
    v82 = 0;
    while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 + 176) + 24 * v78) + 16 * v81))
    {
LABEL_124:
      v83 = v9[22] + 56 * v78;
      v80 = *(_QWORD *)(v83 + 8);
      v81 = ++v82;
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v83 + 16) - v80) >> 3) <= v82)
        goto LABEL_119;
    }
    v84 = operator new();
    *(_QWORD *)v84 = &off_1E42C39D0;
    *(_DWORD *)(v84 + 8) = 29;
    *(_QWORD *)(v84 + 16) = 0;
    *(_QWORD *)(v84 + 24) = 0;
    *(_OWORD *)(v84 + 40) = 0u;
    *(_OWORD *)(v84 + 56) = 0u;
    *(_OWORD *)(v84 + 72) = 0u;
    *(_OWORD *)(v84 + 81) = 0u;
    v85 = (std::__shared_weak_count *)operator new();
    v85->__shared_owners_ = 0;
    v86 = (unint64_t *)&v85->__shared_owners_;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8520;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = (std::__shared_weak_count_vtbl *)v84;
    v87 = (char *)operator new(0x58uLL);
    *((_QWORD *)v87 + 1) = 0;
    *((_QWORD *)v87 + 2) = 0;
    *(_QWORD *)v87 = &off_1E42DED18;
    *((_QWORD *)v87 + 5) = 0;
    *((_QWORD *)v87 + 6) = 0;
    *((_QWORD *)v87 + 4) = 0;
    *((_DWORD *)v87 + 14) = 0;
    *((_QWORD *)v87 + 3) = &off_1E42B63B0;
    *(_QWORD *)&v88 = 0x100000001;
    *((_QWORD *)&v88 + 1) = 0x100000001;
    *(_OWORD *)(v87 + 60) = v88;
    *(_QWORD *)(v87 + 76) = 0x100000001;
    *((_DWORD *)v87 + 21) = 0;
    v103 = v87 + 24;
    v104 = (std::__shared_weak_count *)v87;
    altitude::TextureMap::loadImage(v84, *(_QWORD *)(v80 + 24 * v81 + 8), &v103, (uint64_t)v101);
    v89 = *(_QWORD *)(*(_QWORD *)(v102 + 176) + 24 * v78);
    do
      v90 = __ldxr(v86);
    while (__stxr(v90 + 1, v86));
    *(_QWORD *)(v89 + 16 * v81) = v84;
    v91 = v89 + 16 * v81;
    v92 = *(std::__shared_weak_count **)(v91 + 8);
    *(_QWORD *)(v91 + 8) = v85;
    if (!v92)
      goto LABEL_132;
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      v95 = v104;
      if (v104)
        goto LABEL_133;
    }
    else
    {
LABEL_132:
      v95 = v104;
      if (v104)
      {
LABEL_133:
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
        goto LABEL_138;
      }
    }
    do
LABEL_138:
      v98 = __ldaxr(v86);
    while (__stlxr(v98 - 1, v86));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
    v9 = *(_QWORD **)(v102 + 248);
    goto LABEL_124;
  }
}

void sub_19FC2B238(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FC2B2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<altitude::TextureMap *,std::shared_ptr<altitude::TextureMap>::__shared_ptr_default_delete<altitude::TextureMap,altitude::TextureMap>,std::allocator<altitude::TextureMap>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::TextureMap *,std::shared_ptr<altitude::TextureMap>::__shared_ptr_default_delete<altitude::TextureMap,altitude::TextureMap>,std::allocator<altitude::TextureMap>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(*a1);
    std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void altitude::C3bLoadJob::~C3bLoadJob(void **this)
{
  altitude::C3bLoadJob::~C3bLoadJob(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *this = &off_1E42C3830;
  if ((*((char *)this + 495) & 0x80000000) == 0)
  {
    if ((*((char *)this + 463) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_14:
    operator delete(this[55]);
    if ((*((char *)this + 439) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_15:
    operator delete(this[52]);
    goto LABEL_4;
  }
  operator delete(this[59]);
  if (*((char *)this + 463) < 0)
    goto LABEL_14;
LABEL_3:
  if (*((char *)this + 439) < 0)
    goto LABEL_15;
LABEL_4:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[47]);
  v2 = (std::__shared_weak_count *)this[45];
  if (!v2)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)this[43];
    if (!v5)
      goto LABEL_17;
  }
  else
  {
LABEL_8:
    v5 = (std::__shared_weak_count *)this[43];
    if (!v5)
      goto LABEL_17;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  v8 = (std::__shared_weak_count *)this[41];
  if (!v8)
    goto LABEL_21;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (char *)this[37];
    if (!v11)
      goto LABEL_32;
  }
  else
  {
LABEL_21:
    v11 = (char *)this[37];
    if (!v11)
      goto LABEL_32;
  }
  v12 = (char *)this[38];
  v13 = v11;
  if (v12 != v11)
  {
    do
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v12 -= 16;
    }
    while (v12 != v11);
    v13 = (char *)this[37];
  }
  this[38] = v11;
  operator delete(v13);
LABEL_32:
  v17 = (std::__shared_weak_count *)this[36];
  if (!v17)
    goto LABEL_36;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)this[34];
    if (!v20)
      goto LABEL_44;
  }
  else
  {
LABEL_36:
    v20 = (std::__shared_weak_count *)this[34];
    if (!v20)
      goto LABEL_44;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_44:
  v23 = (std::__shared_weak_count *)this[28];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  karo::Job::~Job((karo::Job *)this);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep altitude::C3bLoadJob::jobStep(altitude::C3bLoadJob *this)
{
  int v2;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  pthread_mutex_t *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  int v38;
  int v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  __int16 *v51;
  __int16 *v52;
  size_t v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 *v64;
  unint64_t v65;
  __int128 v66;
  __int16 v67;
  __int16 *v68;
  _WORD *v69;
  __int16 v70;
  _QWORD *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _WORD *v81;
  unint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  unint64_t v86;
  __int128 v87;
  __int16 v88;
  __int128 v89;
  __int128 v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  BOOL v128;
  BOOL v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  uint64_t **InternalTextures;
  NSObject *v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  BOOL v164;
  __int16 *__p;
  __int16 *v166;
  uint64_t v167;
  QuadTile v168;
  uint8_t v169[4];
  int v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  uint8_t buf[16];
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  int v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  double v184;
  __int16 v185;
  int v186;
  int v187;
  char v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 125);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      *((double *)this + 68) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      v4 = *((_QWORD *)this + 42);
      v5 = *(_QWORD *)(v4 + 136);
      v6 = *(_QWORD *)(v4 + 144);
      if (v6 != v5)
      {
        v7 = 0;
        v8 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - v5) >> 3);
        v9 = 1;
        while (1)
        {
          v10 = *(unsigned __int8 *)(v5 + 120 * v7);
          v128 = v10 > 6;
          v11 = (1 << v10) & 0x5E;
          if (!v128 && v11 != 0)
            break;
          v7 = v9++;
          if (v8 <= v7)
            goto LABEL_27;
        }
        altitude::C3bLoadJob::loadDtm(this);
        v23 = *((_QWORD *)this + 42);
        v5 = *(_QWORD *)(v23 + 136);
        v6 = *(_QWORD *)(v23 + 144);
        v8 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - v5) >> 3);
LABEL_27:
        if (v6 != v5)
        {
          v24 = 0;
          v25 = 1;
          while (*(unsigned __int8 *)(v5 + 120 * v24) - 1 > 5)
          {
            v24 = v25++;
            if (v8 <= v24)
              goto LABEL_46;
          }
          altitude::C3bLoadJob::loadMaps(this, 0);
        }
      }
LABEL_46:
      *((double *)this + 71) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      ++*((_DWORD *)this + 125);
      pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
      v22 = (pthread_mutex_t *)*((_QWORD *)this + 11);
    }
    else
    {
      if (!v2)
      {
        *((double *)this + 65) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
        *((double *)this + 67) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
        altitude::C3bLoadJob::loadC3b(this);
        if (*((_BYTE *)this + 468))
        {
          altitude::C3bLoadJob::loadDtm(this);
          altitude::C3bLoadJob::loadMaps(this, 0);
        }
        result = std::chrono::steady_clock::now().__d_.__rep_;
        *((double *)this + 70) = (double)result * 0.000000001;
        ++*((_DWORD *)this + 125);
        return result;
      }
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      *((_DWORD *)this + 40) |= 1u;
      v22 = (pthread_mutex_t *)*((_QWORD *)this + 19);
    }
    return pthread_mutex_unlock(v22);
  }
  *((double *)this + 69) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  if (!altitude::C3bLoadJob::loadC3b(this))
    goto LABEL_167;
  v13 = *((_QWORD *)this + 42);
  v14 = *(_QWORD *)(v13 + 136);
  v15 = *(_QWORD *)(v13 + 144) - v14;
  if (!v15)
  {
LABEL_34:
    v26 = *(_BYTE **)(v13 + 136);
    if (*(_QWORD *)(v13 + 144) - (_QWORD)v26 != 120 || *v26 != 6)
    {
LABEL_118:
      memset(&v168, 0, sizeof(v168));
      v106 = *(_QWORD *)(v13 + 136);
      v107 = *(_QWORD *)(v13 + 144) - v106;
      if (v107)
      {
        v108 = 0;
        v109 = 0xEEEEEEEEEEEEEEEFLL * (v107 >> 3);
        v110 = 1;
        while (*(unsigned __int8 *)(v106 + 120 * v108) - 1 > 5)
        {
          v108 = v110++;
          if (v109 <= v108)
            goto LABEL_124;
        }
        altitude::C3bLoadJob::loadMaps(this, (char **)&v168);
      }
LABEL_124:
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      v111 = *((_DWORD *)this + 40);
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      if ((v111 & 2) == 0)
      {
        v112 = *((_QWORD *)this + 42);
        v114 = *(double *)(v112 + 8);
        v113 = *(double *)(v112 + 16);
        v115 = *(double *)(v112 + 40);
        v116 = *(double *)(v112 + 48);
        v117 = *(double *)(v112 + 72);
        v118 = *(double *)(v112 + 80);
        v119 = *(double *)(v112 + 24);
        v120 = *(double *)(v112 + 56);
        v121 = *(double *)(v112 + 88);
        v122 = v121 + v116 + v114;
        if (v122 <= 0.0)
        {
          v128 = v114 <= v116 || v114 <= v121;
          if (v128)
          {
            v129 = v116 <= v121;
            v130 = sqrt(1.0 - (v116 + v114) + v121);
            v131 = 1.0 / (v130 + v130);
            v132 = (v119 + v117) * v131;
            v133 = v120 + v118;
            v134 = v133 * v131;
            v135 = v130 * 0.5;
            v136 = (v113 - v115) * v131;
            v137 = sqrt(v116 + 1.0 - (v114 + v121));
            v138 = v113 + v115;
            v139 = 1.0 / (v137 + v137);
            v140 = v138 * v139;
            v125 = v137 * 0.5;
            v141 = v133 * v139;
            v127 = (v117 - v119) * v139;
            if (v129)
              v124 = v132;
            else
              v124 = v140;
            if (v129)
            {
              v125 = v134;
              v126 = v135;
            }
            else
            {
              v126 = v141;
            }
            if (v129)
              v127 = v136;
          }
          else
          {
            v142 = sqrt(v114 + 1.0 - (v116 + v121));
            v143 = v142 + v142;
            v124 = v142 * 0.5;
            v144 = v113 + v115;
            v145 = 1.0 / v143;
            v125 = v144 * (1.0 / v143);
            v126 = (v119 + v117) * v145;
            v127 = (v120 - v118) * v145;
          }
        }
        else
        {
          v123 = 0.5 / sqrt(v122 + 1.0);
          v124 = v123 * (v120 - v118);
          v125 = v123 * (v117 - v119);
          v126 = v123 * (v113 - v115);
          v127 = 0.25 / v123;
        }
        *(_OWORD *)buf = *(_OWORD *)(v112 + 104);
        v176 = *(_QWORD *)(v112 + 120);
        *(double *)&v177 = v124;
        *((double *)&v177 + 1) = v125;
        *(double *)&v178 = v126;
        *((double *)&v178 + 1) = v127;
        if (*((_BYTE *)this + 466) && !*((_BYTE *)this + 465))
        {
          InternalTextures = (uint64_t **)altitude::ProcessC3b::getInternalTextures(*((altitude::ProcessC3b **)this + 40));
          if ((uint64_t **)((char *)this + 296) != InternalTextures)
            std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)this + 296, *InternalTextures, InternalTextures[1], ((char *)InternalTextures[1] - (char *)*InternalTextures) >> 4);
        }
        else
        {
          altitude::C3bLoadJob::createElement((uint64_t)this, v112, (double *)buf, (uint64_t *)&v168);
          v147 = v146;
          v148 = (_QWORD *)operator new();
          *v148 = &off_1E42E87C0;
          v148[1] = 0;
          v148[2] = 0;
          v148[3] = v147;
          v149 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
          *((_QWORD *)this + 35) = v147;
          *((_QWORD *)this + 36) = v148;
          if (v149)
          {
            p_shared_owners = (unint64_t *)&v149->__shared_owners_;
            do
              v151 = __ldaxr(p_shared_owners);
            while (__stlxr(v151 - 1, p_shared_owners));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
        }
        if (!*((_QWORD *)this + 35) && *((_QWORD *)this + 37) == *((_QWORD *)this + 38))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v153 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
          {
            v154 = *((_DWORD *)this + 99);
            v155 = *((_DWORD *)this + 100);
            v156 = *((_DWORD *)this + 98);
            *(_DWORD *)v169 = 67109632;
            v170 = v154;
            v171 = 1024;
            v172 = v155;
            v173 = 1024;
            v174 = v156;
            _os_log_impl(&dword_19F029000, v153, OS_LOG_TYPE_ERROR, "Failed to create node for %u %u %u", v169, 0x14u);
          }

        }
      }
      v157 = *(_QWORD *)&v168._type;
      if (*(_QWORD *)&v168._type)
      {
        v158 = *(_QWORD *)&v168._xIdx;
        v159 = *(void **)&v168._type;
        if (*(_QWORD *)&v168._xIdx != *(_QWORD *)&v168._type)
        {
          do
          {
            v160 = *(std::__shared_weak_count **)(v158 - 8);
            if (v160)
            {
              v161 = (unint64_t *)&v160->__shared_owners_;
              do
                v162 = __ldaxr(v161);
              while (__stlxr(v162 - 1, v161));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                std::__shared_weak_count::__release_weak(v160);
              }
            }
            v158 -= 16;
          }
          while (v158 != v157);
          v159 = *(void **)&v168._type;
        }
        *(_QWORD *)&v168._xIdx = v157;
        operator delete(v159);
      }
LABEL_167:
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      v163 = *((_DWORD *)this + 40);
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      if ((v163 & 2) != 0)
      {
        v164 = 0;
      }
      else if (*((_QWORD *)this + 35))
      {
        v164 = 1;
      }
      else
      {
        v164 = *((_QWORD *)this + 37) != *((_QWORD *)this + 38);
      }
      *((_BYTE *)this + 496) = v164;
      *((double *)this + 72) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      *((double *)this + 66) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      *((_DWORD *)this + 40) |= 1u;
      return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    }
    v27 = *((_DWORD *)this + 98);
    if (v27 >= 0x1F)
      v28 = 31;
    else
      v28 = *((_DWORD *)this + 98);
    v29 = ~(-1 << v28) - *((_DWORD *)this + 99);
    v30 = *((_DWORD *)this + 100);
    v168._type = -1;
    v168._level = v27;
    v168._yIdx = v29;
    v168._xIdx = v30;
    v31 = *((_QWORD *)this + 44);
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      *(_QWORD *)buf = v31;
      *(_QWORD *)&buf[8] = v32;
      v35 = (unint64_t *)&v32->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    else
    {
      *(_QWORD *)buf = *((_QWORD *)this + 44);
      *(_QWORD *)&buf[8] = 0;
    }
    v179 = 0;
    v178 = 0u;
    v177 = 0u;
    v180 = -1;
    v181 = 0u;
    v182 = 0u;
    v183 = 0u;
    v184 = 1.0;
    v185 = 255;
    v187 = 0;
    v186 = 0;
    v188 = 0;
    if (v32)
    {
      v41 = (unint64_t *)&v32->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)buf, &v168, 0x10u, 1u, 0.0);
    v43 = v177;
    if (*((_QWORD *)&v177 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = *(_QWORD *)(v13 + 136);
    v47 = *(std::__shared_weak_count **)(v46 + 48);
    *(_OWORD *)(v46 + 40) = v43;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = *(_QWORD **)(v13 + 136);
    v52 = (__int16 *)*((_QWORD *)&v178 + 1);
    v51 = (__int16 *)v178;
    v53 = *((_QWORD *)&v178 + 1) - v178;
    v54 = (uint64_t)(*((_QWORD *)&v178 + 1) - v178) >> 1;
    v55 = (_BYTE *)v50[10];
    if (v54 <= (uint64_t)(v50[12] - (_QWORD)v55) >> 1)
    {
LABEL_79:
      __p = v51;
      if (v51 != v52)
      {
        v68 = v51;
        v166 = v52;
        v167 = v13;
        do
        {
          v70 = *v68;
          v71 = *(_QWORD **)(v13 + 136);
          v73 = (char *)v71[11];
          v72 = v71[12];
          if ((unint64_t)v73 < v72)
          {
            *(_WORD *)v73 = v70;
            v69 = v73 + 2;
          }
          else
          {
            v74 = (char *)v71[10];
            v75 = v73 - v74;
            if (v73 - v74 <= -3)
              abort();
            v76 = v75 >> 1;
            v77 = v72 - (_QWORD)v74;
            if (v77 <= (v75 >> 1) + 1)
              v78 = v76 + 1;
            else
              v78 = v77;
            if (v77 >= 0x7FFFFFFFFFFFFFFELL)
              v79 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v79 = v78;
            if (v79)
            {
              if (v79 < 0)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v80 = operator new(2 * v79);
            }
            else
            {
              v80 = 0;
            }
            v81 = &v80[2 * v76];
            *v81 = v70;
            v69 = v81 + 1;
            if (v73 != v74)
            {
              v82 = v73 - 2 - v74;
              if (v82 < 0x1E)
                goto LABEL_178;
              if ((unint64_t)(v73 - &v80[v75 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
                goto LABEL_178;
              v83 = (v82 >> 1) + 1;
              v84 = &v80[2 * v76 - 16];
              v85 = v73 - 16;
              v86 = v83 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v87 = *(_OWORD *)v85;
                *(v84 - 1) = *((_OWORD *)v85 - 1);
                *v84 = v87;
                v84 -= 2;
                v85 -= 32;
                v86 -= 16;
              }
              while (v86);
              v81 -= v83 & 0xFFFFFFFFFFFFFFF0;
              v73 -= 2 * (v83 & 0xFFFFFFFFFFFFFFF0);
              if (v83 != (v83 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_178:
                do
                {
                  v88 = *((_WORD *)v73 - 1);
                  v73 -= 2;
                  *--v81 = v88;
                }
                while (v73 != v74);
              }
            }
            v71[10] = v81;
            v71[11] = v69;
            v71[12] = &v80[2 * v79];
            if (v74)
              operator delete(v74);
            v52 = v166;
            v13 = v167;
          }
          v71[11] = v69;
          ++v68;
        }
        while (v68 != v52);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 136) + 104) = v180;
      v89 = v182;
      v90 = v183;
      v91 = (*(double *)&v90 + *(double *)&v90) * *(double *)&v90;
      v92 = (*((double *)&v183 + 1) + *((double *)&v183 + 1)) * *((double *)&v183 + 1);
      v93 = (*((double *)&v182 + 1) + *((double *)&v182 + 1)) * *(double *)&v183;
      v94 = (*((double *)&v183 + 1) + *((double *)&v183 + 1)) * v184;
      v95 = *((double *)&v183 + 1) * (*((double *)&v182 + 1) + *((double *)&v182 + 1));
      v96 = v184 * (*(double *)&v90 + *(double *)&v90);
      v97 = 1.0 - (*((double *)&v182 + 1) + *((double *)&v182 + 1)) * *((double *)&v182 + 1);
      v98 = (*(double *)&v90 + *(double *)&v90) * *((double *)&v183 + 1);
      v99 = v184 * (*((double *)&v182 + 1) + *((double *)&v182 + 1));
      *(double *)(v13 + 8) = 1.0 - (v91 + v92);
      *(double *)(v13 + 16) = v94 + v93;
      *(double *)(v13 + 24) = v95 - v96;
      *(_QWORD *)(v13 + 32) = 0;
      *(double *)(v13 + 40) = v93 - v94;
      *(double *)(v13 + 48) = v97 - v92;
      *(double *)(v13 + 56) = v99 + v98;
      *(_QWORD *)(v13 + 64) = 0;
      *(double *)(v13 + 72) = v96 + v95;
      *(double *)(v13 + 80) = v98 - v99;
      *(double *)(v13 + 88) = v97 - v91;
      *(_QWORD *)(v13 + 96) = 0;
      *(_OWORD *)(v13 + 104) = v181;
      *(_QWORD *)(v13 + 120) = v89;
      *(_QWORD *)(v13 + 128) = 0x3FF0000000000000;
      if (__p)
      {
        *((_QWORD *)&v178 + 1) = __p;
        operator delete(__p);
      }
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
      if (*((_QWORD *)&v177 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v104 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v13 = *((_QWORD *)this + 42);
      goto LABEL_118;
    }
    if ((v53 & 0x8000000000000000) != 0)
      abort();
    v56 = (_BYTE *)v50[11];
    v57 = (char *)operator new(v53);
    v58 = v56 - v55;
    v59 = &v57[(v56 - v55) & 0xFFFFFFFFFFFFFFFELL];
    v60 = v59;
    if (v56 != v55)
    {
      if ((unint64_t)(v58 - 2) < 0x1E)
      {
        v60 = &v57[(v56 - v55) & 0xFFFFFFFFFFFFFFFELL];
        do
        {
LABEL_76:
          v67 = *((_WORD *)v56 - 1);
          v56 -= 2;
          *((_WORD *)v60 - 1) = v67;
          v60 -= 2;
        }
        while (v56 != v55);
        goto LABEL_77;
      }
      v60 = &v57[(v56 - v55) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(v56 - &v57[v58 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
        goto LABEL_76;
      v61 = v58 >> 1;
      v62 = ((unint64_t)(v58 - 2) >> 1) + 1;
      v63 = &v57[2 * v61 - 16];
      v64 = (__int128 *)(v56 - 16);
      v65 = v62 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v66 = *v64;
        *((_OWORD *)v63 - 1) = *(v64 - 1);
        *(_OWORD *)v63 = v66;
        v63 -= 32;
        v64 -= 2;
        v65 -= 16;
      }
      while (v65);
      v60 = &v59[-2 * (v62 & 0xFFFFFFFFFFFFFFF0)];
      v56 -= 2 * (v62 & 0xFFFFFFFFFFFFFFF0);
      if (v62 != (v62 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_76;
    }
LABEL_77:
    v50[10] = v60;
    v50[11] = v59;
    v50[12] = &v57[2 * v54];
    if (v55)
      operator delete(v55);
    goto LABEL_79;
  }
  v16 = 0;
  v17 = 0xEEEEEEEEEEEEEEEFLL * (v15 >> 3);
  v18 = 1;
  while (1)
  {
    v19 = *(unsigned __int8 *)(v14 + 120 * v16);
    v128 = v19 > 6;
    v20 = (1 << v19) & 0x5E;
    if (!v128 && v20 != 0)
      break;
    v16 = v18++;
    if (v17 <= v16)
      goto LABEL_34;
  }
  altitude::C3bLoadJob::loadDtm(this);
  if (*((_QWORD *)this + 44))
  {
    v13 = *((_QWORD *)this + 42);
    goto LABEL_34;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v37 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    v38 = *((_DWORD *)this + 99);
    v39 = *((_DWORD *)this + 100);
    v40 = *((_DWORD *)this + 98);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v38;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v39;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v176) = v40;
    _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "C3bLoadJob: Failed to load DTM for %u %u %u", buf, 0x14u);
  }

  return (*(uint64_t (**)(altitude::C3bLoadJob *))(*(_QWORD *)this + 16))(this);
}

void sub_19FC2C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va);
  _Unwind_Resume(a1);
}

void sub_19FC2C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  altitude::HeightMeshBuilder::~HeightMeshBuilder((altitude::HeightMeshBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t altitude::C3bLoadJob::succeeded(altitude::C3bLoadJob *this)
{
  return *((unsigned __int8 *)this + 496);
}

uint64_t altitude::C3bLoadJob::getC3bElement@<X0>(altitude::C3bLoadJob *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = (*(uint64_t (**)(altitude::C3bLoadJob *))(*(_QWORD *)this + 40))(this);
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 36);
    *a2 = *((_QWORD *)this + 35);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t altitude::C3bLoadJob::loadC3b(altitude::C3bLoadJob *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  char **v17;
  uint64_t v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t LoaderForFile;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  char **v43;
  uint64_t v44;
  int v45;
  char *v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  void **v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  NSObject *v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  _QWORD **v72;
  uint64_t *v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD **v79;
  int v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  char *v84;
  void *v85;
  _QWORD *v86;
  uint64_t *v87;
  altitude::C3bLoadJob *v88;
  altitude::C3bLoadJob *v89;
  altitude::C3bLoadJob *v90;
  int v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  char *v95;
  void *v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  _QWORD v151[2];
  __int128 v152;
  __int128 v153;
  void *__p[2];
  __int128 v155;
  __int128 buf;
  uint8_t v157[16];
  __int128 v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 40);
  if (!v2)
  {
    v8 = operator new();
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_QWORD *)(v8 + 200) = v8 + 208;
    *(_QWORD *)(v8 + 232) = 0;
    *(_QWORD *)(v8 + 240) = 0;
    *(_QWORD *)(v8 + 224) = 0;
    v9 = (_QWORD *)operator new();
    *v9 = &off_1E42E8398;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = v8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 42) = v8;
    *((_QWORD *)this + 43) = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (__int128 *)((char *)this + 392);
    v14 = 41;
    if (*((_DWORD *)this + 98) == 63)
      v14 = 42;
    v15 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + v14);
    v16 = atomic_load((unsigned __int8 *)this + 504);
    v17 = (char **)((char *)this + 440);
    v18 = *((unsigned __int8 *)this + 463);
    v19 = (char)v18;
    if ((v18 & 0x80u) != 0)
      v18 = *((_QWORD *)this + 56);
    if (v18 != 5
      || (v19 >= 0 ? (v20 = (char *)this + 440) : (v20 = *v17),
          (v21 = *(_DWORD *)v20, v22 = v20[4], v21 == 1819308129) ? (v23 = v22 == 101) : (v23 = 0),
          !v23))
    {
      v158 = *v13;
      v24 = *((_DWORD *)this + 102);
      v25 = *((_DWORD *)this + 103);
      *(_DWORD *)&v157[8] = 0;
      *(_DWORD *)&v157[12] = v25;
      *(_DWORD *)v157 = 15;
      *(_DWORD *)&v157[4] = v24;
      altitude::TileKey::toUrlString(__p, v157, (uint64_t)this + 416, (uint64_t)v17, *((unsigned __int8 *)this + 464));
      LoaderForFile = altitude::ProtocolLoader::getLoaderForFile(*((_QWORD *)this + 24), (char **)__p);
      if (LoaderForFile)
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)LoaderForFile + 144))(&buf, LoaderForFile, __p);
        v27 = *((_QWORD *)this + 1);
        v153 = 0uLL;
        v28 = operator new(0x188uLL);
        v28[1] = 0;
        v28[2] = 0;
        *v28 = &off_1E42E5F10;
        v29 = altitude::ProcessC3b::ProcessC3b((uint64_t)(v28 + 3), v27, *((_QWORD *)this + 30), v15 != 0, v16 & 1, &buf, &v153, (_QWORD *)this + 42);
        v30 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 40) = v29;
        *((_QWORD *)this + 41) = v28;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
        if (*((_QWORD *)&v153 + 1))
        {
          v34 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v53 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          v54 = __p;
          if (SBYTE7(v155) < 0)
            v54 = (void **)__p[0];
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v54;
          _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_ERROR, "File loader not available for %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (SBYTE7(v155) < 0)
        operator delete(__p[0]);
LABEL_68:
      if (*((_QWORD *)this + 40))
      {
        v55 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        v151[0] = *((_QWORD *)this + 40);
        v151[1] = v55;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          karo::Job::addBlockingSubJob((uint64_t *)this, v151, 0, 1);
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        else
        {
          karo::Job::addBlockingSubJob((uint64_t *)this, v151, 0, 1);
        }
        v63 = *((_QWORD *)this + 30);
        v64 = *((_QWORD *)this + 40);
        v65 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        *(_QWORD *)v157 = v64;
        *(_QWORD *)&v157[8] = v65;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          karo::JobManager::queueJob(v63, v157);
          do
            v68 = __ldaxr(v66);
          while (__stlxr(v68 - 1, v66));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        else
        {
          karo::JobManager::queueJob(v63, v157);
        }
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v59 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v60 = *((_DWORD *)this + 99);
          v61 = *((_DWORD *)this + 100);
          v62 = *((_DWORD *)this + 98);
          *(_DWORD *)v157 = 67109632;
          *(_DWORD *)&v157[4] = v60;
          *(_WORD *)&v157[8] = 1024;
          *(_DWORD *)&v157[10] = v61;
          *(_WORD *)&v157[14] = 1024;
          LODWORD(v158) = v62;
          _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_ERROR, "Error creating processing subjob for %u %u %u", v157, 0x14u);
        }

        (*(void (**)(altitude::C3bLoadJob *))(*(_QWORD *)this + 16))(this);
      }
      return 0;
    }
    if (!*((_BYTE *)this + 465))
    {
      v79 = (_QWORD **)((char *)this + 368);
      if (*((_BYTE *)this + 466))
      {
        v158 = *v13;
        v80 = *((_DWORD *)this + 102);
        v81 = *((_DWORD *)this + 103);
        *(_DWORD *)&v157[8] = 0;
        *(_DWORD *)&v157[12] = v81;
        *(_DWORD *)v157 = 43;
        *(_DWORD *)&v157[4] = v80;
        v82 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 368, __p, (unsigned int *)v157);
        if (!*v82)
        {
          v83 = v82;
          v84 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v84 + 28) = *(_OWORD *)v157;
          *(_OWORD *)(v84 + 44) = v158;
          v85 = __p[0];
          *(_QWORD *)v84 = 0;
          *((_QWORD *)v84 + 1) = 0;
          *((_QWORD *)v84 + 2) = v85;
          *v83 = (uint64_t)v84;
          v86 = (_QWORD *)**v79;
          if (v86)
          {
            *v79 = v86;
            v87 = (uint64_t *)*v83;
          }
          else
          {
            v87 = (uint64_t *)v84;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 47), v87);
          ++*((_QWORD *)this + 48);
        }
        v127 = *((_QWORD *)this + 25);
        v128 = atomic_load((unsigned int *)this + 4);
        (*(void (**)(void **__return_ptr, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v127 + 112))(__p, v127, v157, v128);
        v129 = *((_QWORD *)this + 1);
        buf = 0uLL;
        v130 = operator new(0x188uLL);
        v130[1] = 0;
        v130[2] = 0;
        *v130 = &off_1E42E5F10;
        v131 = altitude::ProcessC3b::ProcessC3b((uint64_t)(v130 + 3), v129, *((_QWORD *)this + 30), v15 != 0, v16 & 1, &buf, __p, (_QWORD *)this + 42);
        v132 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 40) = v131;
        *((_QWORD *)this + 41) = v130;
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v135 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v136 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v124 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_68;
        v138 = (unint64_t *)((char *)__p[1] + 8);
        do
          v126 = __ldaxr(v138);
        while (__stlxr(v126 - 1, v138));
      }
      else
      {
        v158 = *v13;
        v91 = *((_DWORD *)this + 102);
        v92 = *((_DWORD *)this + 103);
        *(_DWORD *)&v157[8] = 0;
        *(_DWORD *)&v157[12] = v92;
        *(_DWORD *)v157 = 15;
        *(_DWORD *)&v157[4] = v91;
        v93 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 368, __p, (unsigned int *)v157);
        if (!*v93)
        {
          v94 = v93;
          v95 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v95 + 28) = *(_OWORD *)v157;
          *(_OWORD *)(v95 + 44) = v158;
          v96 = __p[0];
          *(_QWORD *)v95 = 0;
          *((_QWORD *)v95 + 1) = 0;
          *((_QWORD *)v95 + 2) = v96;
          *v94 = (uint64_t)v95;
          v97 = (_QWORD *)**v79;
          if (v97)
          {
            *v79 = v97;
            v98 = (uint64_t *)*v94;
          }
          else
          {
            v98 = (uint64_t *)v95;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 47), v98);
          ++*((_QWORD *)this + 48);
        }
        v139 = *((_QWORD *)this + 25);
        v140 = atomic_load((unsigned int *)this + 4);
        (*(void (**)(void **__return_ptr, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v139 + 112))(__p, v139, v157, v140);
        v141 = *((_QWORD *)this + 1);
        buf = 0uLL;
        v142 = operator new(0x188uLL);
        v142[1] = 0;
        v142[2] = 0;
        *v142 = &off_1E42E5F10;
        v143 = altitude::ProcessC3b::ProcessC3b((uint64_t)(v142 + 3), v141, *((_QWORD *)this + 30), v15 != 0, v16 & 1, __p, &buf, (_QWORD *)this + 42);
        v144 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 40) = v143;
        *((_QWORD *)this + 41) = v142;
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v147 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v148 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v124 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_68;
        v150 = (unint64_t *)((char *)__p[1] + 8);
        do
          v126 = __ldaxr(v150);
        while (__stlxr(v126 - 1, v150));
      }
LABEL_180:
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
      goto LABEL_68;
    }
    v158 = *v13;
    v69 = *((_DWORD *)this + 102);
    v70 = *((_DWORD *)this + 103);
    *(_DWORD *)&v157[8] = 0;
    *(_DWORD *)&v157[12] = v70;
    *(_DWORD *)v157 = 42;
    *(_DWORD *)&v157[4] = v69;
    __p[0] = 0;
    v155 = *v13;
    HIDWORD(__p[0]) = v69;
    LODWORD(__p[1]) = 0;
    HIDWORD(__p[1]) = v70;
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 64) && *((_BYTE *)this + 467))
    {
      v71 = 44;
    }
    else
    {
      if (!*((_BYTE *)this + 466))
      {
LABEL_98:
        v72 = (_QWORD **)((char *)this + 368);
        v73 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 368, &buf, (unsigned int *)v157);
        if (!*v73)
        {
          v74 = v73;
          v75 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v75 + 28) = *(_OWORD *)v157;
          *(_OWORD *)(v75 + 44) = v158;
          v76 = buf;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v75 + 1) = 0;
          *((_QWORD *)v75 + 2) = v76;
          *v74 = (uint64_t)v75;
          v77 = (_QWORD *)**v72;
          if (v77)
          {
            *v72 = v77;
            v78 = (uint64_t *)*v74;
          }
          else
          {
            v78 = (uint64_t *)v75;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 47), v78);
          ++*((_QWORD *)this + 48);
        }
        v99 = *((_QWORD *)this + 25);
        v100 = atomic_load((unsigned int *)this + 4);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v99 + 112))(&buf, v99, v157, v100);
        v153 = 0uLL;
        v101 = *((_QWORD *)this + 1);
        if (!*(_BYTE *)(v101 + 66))
        {
          v102 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 368, &v152, (unsigned int *)__p);
          if (!*v102)
          {
            v103 = v102;
            v104 = (char *)operator new(0x40uLL);
            *(_OWORD *)(v104 + 28) = *(_OWORD *)__p;
            *(_OWORD *)(v104 + 44) = v155;
            v105 = v152;
            *(_QWORD *)v104 = 0;
            *((_QWORD *)v104 + 1) = 0;
            *((_QWORD *)v104 + 2) = v105;
            *v103 = (uint64_t)v104;
            v106 = (_QWORD *)**v72;
            if (v106)
            {
              *v72 = v106;
              v104 = (char *)*v103;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 47), (uint64_t *)v104);
            ++*((_QWORD *)this + 48);
          }
          v107 = *((_QWORD *)this + 25);
          v108 = atomic_load((unsigned int *)this + 4);
          (*(void (**)(__int128 *__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v107 + 112))(&v152, v107, __p, v108);
          v109 = v152;
          v152 = 0uLL;
          v110 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
          v153 = v109;
          if (v110)
          {
            v111 = (unint64_t *)&v110->__shared_owners_;
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          v113 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
          if (*((_QWORD *)&v152 + 1))
          {
            v114 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v101 = *((_QWORD *)this + 1);
        }
        v116 = operator new(0x188uLL);
        v116[1] = 0;
        v116[2] = 0;
        *v116 = &off_1E42E5F10;
        v117 = altitude::ProcessC3b::ProcessC3b((uint64_t)(v116 + 3), v101, *((_QWORD *)this + 30), v15 != 0, v16 & 1, &buf, &v153, (_QWORD *)this + 42);
        v118 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
        *((_QWORD *)this + 40) = v117;
        *((_QWORD *)this + 41) = v116;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
        if (*((_QWORD *)&v153 + 1))
        {
          v122 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v124 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (!*((_QWORD *)&buf + 1))
          goto LABEL_68;
        v125 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        goto LABEL_180;
      }
      v71 = 43;
    }
    LODWORD(__p[0]) = v71;
    goto LABEL_98;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 152));
  v3 = *(_DWORD *)(v2 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 152));
  if ((v3 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 40);
    pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 152));
    v5 = *(_DWORD *)(v4 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 152));
    v6 = *((_QWORD *)this + 40);
    if ((v5 & 2) == 0)
    {
      *(_OWORD *)((char *)this + 584) = *(_OWORD *)(v6 + 352);
      *((_QWORD *)this + 75) = *(_QWORD *)(v6 + 344);
      return 1;
    }
    v39 = *(_QWORD *)(v6 + 216);
    if (!v39
      || (pthread_mutex_lock(*(pthread_mutex_t **)(v39 + 152)),
          v40 = *(_DWORD *)(v39 + 160),
          pthread_mutex_unlock(*(pthread_mutex_t **)(v39 + 152)),
          (v40 & 1) == 0)
      || (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 216) + 56))(*(_QWORD *)(v6 + 216)))
    {
      v41 = *(_QWORD *)(v6 + 232);
      if (!v41
        || (pthread_mutex_lock(*(pthread_mutex_t **)(v41 + 152)),
            v42 = *(_DWORD *)(v41 + 160),
            pthread_mutex_unlock(*(pthread_mutex_t **)(v41 + 152)),
            (v42 & 1) == 0)
        || (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 232) + 56))(*(_QWORD *)(v6 + 232)))
      {
        v43 = (char **)((char *)this + 440);
        v44 = *((unsigned __int8 *)this + 463);
        v45 = (char)v44;
        if ((v44 & 0x80u) != 0)
          v44 = *((_QWORD *)this + 56);
        if (v44 == 5
          && (v45 >= 0 ? (v46 = (char *)this + 440) : (v46 = *v43),
              (v47 = *(_DWORD *)v46, v48 = v46[4], v47 == 1819308129) ? (v49 = v48 == 101) : (v49 = 0),
              v49))
        {
          v88 = (altitude::C3bLoadJob *)*((_QWORD *)this + 46);
          if (v88 != (altitude::C3bLoadJob *)((char *)this + 376))
          {
            do
            {
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 25) + 120))(*((_QWORD *)this + 25), (uint64_t)v88 + 28);
              v89 = (altitude::C3bLoadJob *)*((_QWORD *)v88 + 1);
              if (v89)
              {
                do
                {
                  v90 = v89;
                  v89 = *(altitude::C3bLoadJob **)v89;
                }
                while (v89);
              }
              else
              {
                do
                {
                  v90 = (altitude::C3bLoadJob *)*((_QWORD *)v88 + 2);
                  v23 = *(_QWORD *)v90 == (_QWORD)v88;
                  v88 = v90;
                }
                while (!v23);
              }
              v88 = v90;
            }
            while (v90 != (altitude::C3bLoadJob *)((char *)this + 376));
          }
        }
        else
        {
          v158 = *(_OWORD *)((char *)this + 392);
          v50 = *((_DWORD *)this + 102);
          v51 = *((_DWORD *)this + 103);
          *(_DWORD *)&v157[8] = 0;
          *(_DWORD *)&v157[12] = v51;
          *(_DWORD *)v157 = 15;
          *(_DWORD *)&v157[4] = v50;
          altitude::TileKey::toUrlString(__p, v157, (uint64_t)this + 416, (uint64_t)v43, *((unsigned __int8 *)this + 464));
          v52 = altitude::ProtocolLoader::getLoaderForFile(*((_QWORD *)this + 24), (char **)__p);
          if (v52)
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v52 + 120))(v52, __p);
          if (SBYTE7(v155) < 0)
            operator delete(__p[0]);
        }
      }
    }
    (*(void (**)(altitude::C3bLoadJob *))(*(_QWORD *)this + 16))(this);
  }
  return 0;
}

void sub_19FC2D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19FC2D160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void altitude::C3bLoadJob::loadDtm(altitude::C3bLoadJob *this)
{
  _OWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unsigned int *v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  std::__shared_weak_count *v38;
  void (**v39)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v40;
  std::__shared_weak_count *v41;
  int v42;
  uint64_t v43;
  int v44;
  __int128 v45;

  v44 = 0;
  v43 = 0;
  v1 = (_OWORD *)((char *)this + 392);
  v45 = *(_OWORD *)((char *)this + 392);
  v42 = 17;
  if (*((_QWORD *)this + 44)
    || !(*(unsigned int (**)(_QWORD, int *))(**((_QWORD **)this + 29) + 112))(*((_QWORD *)this + 29), &v42))
  {
    return;
  }
  v3 = *((_QWORD *)this + 29);
  v4 = atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)v3 + 104))(&v37, v3, &v42, 0, v4);
  v5 = v37;
  if (v37)
  {
    v6 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    *((_QWORD *)this + 44) = v5;
    *((_QWORD *)this + 45) = v6;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    goto LABEL_35;
  }
  if (!*(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 1))
  {
    v21 = v41;
    v36[0] = v40;
    v36[1] = v41;
    if (v41)
    {
      v22 = (unint64_t *)&v41->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      karo::Job::addBlockingSubJob((uint64_t *)this, v36, 1, 0);
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v36, 1, 0);
    }
  }
  v12 = v40;
  pthread_mutex_lock(*(pthread_mutex_t **)(v40 + 152));
  v13 = *(_DWORD *)(v12 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v12 + 152));
  if ((v13 & 1) == 0)
    goto LABEL_35;
  v14 = v37;
  if (v37)
  {
    v15 = v38;
    if (v38)
    {
      v16 = (unint64_t *)&v38->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    *((_QWORD *)this + 44) = v14;
    *((_QWORD *)this + 45) = v15;
    if (!v18)
      goto LABEL_34;
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_32;
  }
  v25 = operator new();
  *(_QWORD *)v25 = &off_1E42C3548;
  *(_QWORD *)(v25 + 8) = &off_1E42C3568;
  *(_QWORD *)(v25 + 16) = 0;
  *(_DWORD *)(v25 + 24) = 29;
  *(_BYTE *)(v25 + 28) = 0;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_BYTE *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 120) = 0x3E800000C47A0000;
  *(_QWORD *)(v25 + 128) = 0x1000000000;
  *(_OWORD *)(v25 + 136) = *v1;
  *(_DWORD *)(v25 + 152) = 0;
  *(_BYTE *)(v25 + 156) = 0;
  *(_QWORD *)(v25 + 160) = 0;
  *(_QWORD *)(v25 + 168) = 0;
  v26 = (_QWORD *)operator new();
  *v26 = &off_1E42E8210;
  v26[1] = 0;
  v26[2] = 0;
  v26[3] = v25;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 44) = v25;
  *((_QWORD *)this + 45) = v26;
  if (v18)
  {
    v27 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v27);
    while (__stlxr(v20 - 1, v27));
LABEL_32:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_34:
  karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
LABEL_35:
  v39 = &off_1E42C2D08;
  if (v40)
  {
    v28 = (unsigned int *)(v40 + 128);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
  }
  v30 = v41;
  if (v41)
  {
    v31 = (unint64_t *)&v41->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v38;
  if (v38)
  {
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_19FC2D548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void altitude::C3bLoadJob::loadMaps(karo::Job *this, char **a2)
{
  karo::Job *v2;
  int v3;
  char *SubJob;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char **v59;
  char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  uint64_t *i;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  karo::Job *v91;
  unsigned int v92;
  char v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t TileIdWithDataForTileId;
  unint64_t v112;
  int v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v118;
  uint64_t v121;
  unsigned int v122;
  _QWORD v123[2];
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int128 v126;

  v2 = this;
  if (a2)
  {
    v3 = 2;
    do
    {
      SubJob = karo::Job::getSubJob((pthread_mutex_t **)v2, v3);
      v5 = *(_QWORD *)SubJob;
      v6 = (std::__shared_weak_count *)*((_QWORD *)SubJob + 1);
      v124 = *(_QWORD *)SubJob;
      v125 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (v5)
      {
        v122 = v3;
        v121 = v5;
        v10 = *(char **)(v5 + 240);
        v9 = *(char **)(v5 + 248);
        if (v9 - v10 >= 1)
        {
          v11 = (v9 - v10) >> 4;
          v13 = (uint64_t *)a2[1];
          v12 = a2[2];
          if (v11 <= (v12 - (char *)v13) >> 4)
          {
            if (v11 <= 0)
            {
              v28 = &v10[16 * v11];
              v29 = (uint64_t *)a2[1];
              v64 = 2 * v11;
              v65 = &v29[-2 * v11];
              v66 = a2[1];
              for (i = v65; i < v13; v66 += 16)
              {
                *(_QWORD *)v66 = 0;
                *((_QWORD *)v66 + 1) = 0;
                v84 = *i;
                v85 = i[1];
                if (v85)
                {
                  v86 = (unint64_t *)(v85 + 8);
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                  v88 = (std::__shared_weak_count *)*((_QWORD *)v66 + 1);
                  *(_QWORD *)v66 = v84;
                  *((_QWORD *)v66 + 1) = v85;
                  if (v88)
                  {
                    v89 = (unint64_t *)&v88->__shared_owners_;
                    do
                      v90 = __ldaxr(v89);
                    while (__stlxr(v90 - 1, v89));
                    if (!v90)
                    {
                      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                      std::__shared_weak_count::__release_weak(v88);
                    }
                  }
                }
                else
                {
                  *(_QWORD *)v66 = v84;
                  *((_QWORD *)v66 + 1) = 0;
                }
                i += 2;
              }
              a2[1] = v66;
              v2 = this;
              if (v29 != &v13[v64])
              {
                do
                {
                  v71 = *(v65 - 2);
                  v70 = *(v65 - 1);
                  v65 -= 2;
                  if (v70)
                  {
                    v72 = (unint64_t *)(v70 + 8);
                    do
                      v73 = __ldxr(v72);
                    while (__stxr(v73 + 1, v72));
                  }
                  v74 = (std::__shared_weak_count *)*(v29 - 1);
                  *(v29 - 2) = v71;
                  *(v29 - 1) = v70;
                  if (v74)
                  {
                    v75 = (unint64_t *)&v74->__shared_owners_;
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                  }
                  v29 -= 2;
                }
                while (v65 != v13);
              }
              for (; v10 != v28; v13 += 2)
              {
                v78 = *(_QWORD *)v10;
                v77 = *((_QWORD *)v10 + 1);
                if (v77)
                {
                  v79 = (unint64_t *)(v77 + 8);
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
                v81 = (std::__shared_weak_count *)v13[1];
                *v13 = v78;
                v13[1] = v77;
                if (v81)
                {
                  v82 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                v10 += 16;
              }
            }
            else
            {
              if (v10 == v9)
              {
                v20 = a2[1];
              }
              else
              {
                v19 = v10;
                v20 = a2[1];
                do
                {
                  *(_QWORD *)v20 = 0;
                  *((_QWORD *)v20 + 1) = 0;
                  v21 = *(_QWORD *)v19;
                  v22 = *((_QWORD *)v19 + 1);
                  if (v22)
                  {
                    v23 = (unint64_t *)(v22 + 8);
                    do
                      v24 = __ldxr(v23);
                    while (__stxr(v24 + 1, v23));
                    v25 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
                    *(_QWORD *)v20 = v21;
                    *((_QWORD *)v20 + 1) = v22;
                    if (v25)
                    {
                      v26 = (unint64_t *)&v25->__shared_owners_;
                      do
                        v27 = __ldaxr(v26);
                      while (__stlxr(v27 - 1, v26));
                      if (!v27)
                      {
                        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                        std::__shared_weak_count::__release_weak(v25);
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)v20 = v21;
                    *((_QWORD *)v20 + 1) = 0;
                  }
                  v19 += 16;
                  v20 += 16;
                }
                while (v19 != v9);
              }
              a2[1] = v20;
              v2 = this;
            }
          }
          else
          {
            v14 = ((char *)v13 - *a2) >> 4;
            if ((unint64_t)(v14 + v11) >> 60)
              abort();
            v15 = v12 - *a2;
            v16 = v15 >> 3;
            if (v15 >> 3 <= (unint64_t)(v14 + v11))
              v16 = v14 + v11;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
              v17 = 0xFFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
            {
              if (v17 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v18 = (char *)operator new(16 * v17);
            }
            else
            {
              v18 = 0;
            }
            v118 = v18;
            v30 = &v18[16 * v14];
            v31 = &v30[16 * v11];
            v32 = v30;
            do
            {
              *(_QWORD *)v32 = 0;
              *((_QWORD *)v32 + 1) = 0;
              v33 = *(_QWORD *)v10;
              v34 = *((_QWORD *)v10 + 1);
              if (v34)
              {
                v35 = (unint64_t *)(v34 + 8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
                v37 = (std::__shared_weak_count *)*((_QWORD *)v32 + 1);
                *(_QWORD *)v32 = v33;
                *((_QWORD *)v32 + 1) = v34;
                if (v37)
                {
                  v38 = (unint64_t *)&v37->__shared_owners_;
                  do
                    v39 = __ldaxr(v38);
                  while (__stlxr(v39 - 1, v38));
                  if (!v39)
                  {
                    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                    std::__shared_weak_count::__release_weak(v37);
                  }
                }
              }
              else
              {
                *(_QWORD *)v32 = v33;
                *((_QWORD *)v32 + 1) = 0;
              }
              v32 += 16;
              v10 += 16;
            }
            while (v32 != v31);
            v40 = *a2;
            if (*a2 == (char *)v13)
            {
              v42 = v30;
            }
            else
            {
              v41 = (char *)v13;
              v42 = v30;
              do
              {
                *((_QWORD *)v42 - 2) = 0;
                *((_QWORD *)v42 - 1) = 0;
                v42 -= 16;
                v43 = *((_QWORD *)v41 - 2);
                v44 = *((_QWORD *)v41 - 1);
                v41 -= 16;
                if (v44)
                {
                  v45 = (unint64_t *)(v44 + 8);
                  do
                    v46 = __ldxr(v45);
                  while (__stxr(v46 + 1, v45));
                  v47 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
                  *((_QWORD *)v30 - 2) = v43;
                  *((_QWORD *)v30 - 1) = v44;
                  if (v47)
                  {
                    v48 = (unint64_t *)&v47->__shared_owners_;
                    do
                      v49 = __ldaxr(v48);
                    while (__stlxr(v49 - 1, v48));
                    if (!v49)
                    {
                      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                      std::__shared_weak_count::__release_weak(v47);
                    }
                  }
                }
                else
                {
                  *((_QWORD *)v30 - 2) = v43;
                  *((_QWORD *)v30 - 1) = 0;
                }
                v30 = v42;
              }
              while (v41 != v40);
            }
            v50 = (uint64_t *)a2[1];
            if (v50 == v13)
            {
              v2 = this;
              v59 = a2;
              v51 = v118;
            }
            else
            {
              v51 = v118;
              v2 = this;
              do
              {
                *(_QWORD *)v31 = 0;
                *((_QWORD *)v31 + 1) = 0;
                v52 = *v13;
                v53 = v13[1];
                if (v53)
                {
                  v54 = (unint64_t *)(v53 + 8);
                  do
                    v55 = __ldxr(v54);
                  while (__stxr(v55 + 1, v54));
                  v56 = (std::__shared_weak_count *)*((_QWORD *)v31 + 1);
                  *(_QWORD *)v31 = v52;
                  *((_QWORD *)v31 + 1) = v53;
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                }
                else
                {
                  *(_QWORD *)v31 = v52;
                  *((_QWORD *)v31 + 1) = 0;
                }
                v13 += 2;
                v31 += 16;
              }
              while (v13 != v50);
              v59 = a2;
              v13 = (uint64_t *)a2[1];
            }
            v60 = *v59;
            *v59 = v42;
            v59[1] = v31;
            v59[2] = &v51[16 * v17];
            while (v13 != (uint64_t *)v60)
            {
              v61 = (std::__shared_weak_count *)*(v13 - 1);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              v13 -= 2;
            }
            if (v60)
              operator delete(v60);
          }
        }
        karo::Job::removeSubJob((pthread_mutex_t **)v2, v122);
        v3 = v122 + 1;
        v5 = v121;
      }
      if (v6)
      {
        v68 = (unint64_t *)&v6->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    while (v5);
  }
  else if (!*(_QWORD *)karo::Job::getSubJob((pthread_mutex_t **)this, 2))
  {
    v91 = v2;
    v92 = *((_DWORD *)v2 + 98);
    if (v92 >= 0x1F)
      v93 = 31;
    else
      v93 = v92;
    v94 = ~(-1 << v93) - *((_DWORD *)v91 + 99);
    v95 = *((_DWORD *)v91 + 100);
    LOBYTE(v124) = -1;
    BYTE1(v124) = v92;
    HIDWORD(v124) = v94;
    LODWORD(v125) = v95;
    if (!*((_QWORD *)v91 + 33))
    {
      v107 = operator new();
      *(_QWORD *)v107 = &off_1E42C5838;
      v108 = (_BYTE *)*((_QWORD *)v91 + 1);
      *(_BYTE *)(v107 + 28) = v108[40];
      v109 = *((_QWORD *)v91 + 31);
      *(_QWORD *)(v107 + 8) = *((_QWORD *)v91 + 26);
      *(_QWORD *)(v107 + 16) = v109;
      if (!v108[64])
        goto LABEL_143;
      v110 = *((_QWORD *)v91 + 32);
      LODWORD(v126) = v92;
      DWORD1(v126) = ~(-1 << v92) - v94;
      *((_QWORD *)&v126 + 1) = v95;
      TileIdWithDataForTileId = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(_QWORD *)(v110 + 32), &v126, 45);
      if (TileIdWithDataForTileId < 0xFFFFFFFF00000000
        || (_DWORD)TileIdWithDataForTileId
        || v112 != 0xFFFFFFFFLL
        || v112 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        *(_DWORD *)(v107 + 24) = 32;
        *(_BYTE *)(v107 + 28) = 0;
      }
      else
      {
LABEL_143:
        v113 = v108[65] ? 64 : 2;
        *(_DWORD *)(v107 + 24) = v113;
      }
      v91 = this;
      v114 = (_QWORD *)operator new();
      *v114 = &off_1E42E8590;
      v114[1] = 0;
      v114[2] = 0;
      v114[3] = v107;
      v115 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
      *((_QWORD *)this + 33) = v107;
      *((_QWORD *)this + 34) = v114;
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        v91 = this;
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
    }
    v96 = *((_QWORD *)v91 + 33);
    v97 = *((_QWORD *)v91 + 1);
    v98 = atomic_load((unsigned int *)v91 + 4);
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v96 + 16))(v96, v97, (uint64_t)v91 + 264, &v124, v98);
    *(_QWORD *)&v126 = v99;
    v100 = (std::__shared_weak_count *)operator new();
    v100->__shared_owners_ = 0;
    v101 = (unint64_t *)&v100->__shared_owners_;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8558;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
    *((_QWORD *)&v126 + 1) = v100;
    v123[0] = v99;
    v123[1] = v100;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    karo::Job::addBlockingSubJob((uint64_t *)this, v123, 2, 1);
    do
      v103 = __ldaxr(v101);
    while (__stlxr(v103 - 1, v101));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
    karo::JobManager::queueJob(*((_QWORD *)this + 30), &v126);
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
    if (*((_QWORD *)&v126 + 1))
    {
      v105 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
}

void sub_19FC2DDD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19FC2DE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<karo::Job>::~shared_ptr[abi:nn180100]((uint64_t)va);
  JUMPOUT(0x19FC2DE1CLL);
}

char *altitude::ProcessC3b::getInternalTextures(altitude::ProcessC3b *this)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = (char *)*((_QWORD *)this + 34);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v4 = (uint64_t **)v2;
        v5 = *((_DWORD *)v2 + 8);
        if (v5 < 1)
          break;
        v2 = (char *)*v4;
        v3 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      if ((v5 & 0x80000000) == 0)
        break;
      v2 = (char *)v4[1];
      if (!v2)
      {
        v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v3 = (uint64_t **)((char *)this + 272);
    v4 = (uint64_t **)((char *)this + 272);
LABEL_8:
    v6 = (char *)v4;
    v4 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v4 + 8) = 0;
    v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *v3 = (uint64_t *)v4;
    v7 = **((_QWORD **)this + 33);
    v8 = (uint64_t *)v4;
    if (v7)
    {
      *((_QWORD *)this + 33) = v7;
      v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 34), v8);
    ++*((_QWORD *)this + 35);
  }
  return (char *)(v4 + 5);
}

void altitude::C3bLoadJob::createElement(uint64_t a1, uint64_t a2, double *a3, uint64_t *a4)
{
  int v6;
  size_t v7;
  unint64_t v8;
  __n128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  altitude::SceneGraph *v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t **v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v30;
  karo::media::C3mMesh *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  size_t v35;
  unint64_t v36;
  void *v37;
  int v38;
  size_t v39;
  unint64_t v40;
  void *p_p;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  altitude::SceneGraph *v45;
  unsigned int v46;
  char v47;
  int v48;
  int v49;
  float *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  long double v65;
  long double v66;
  long double v67;
  double v68;
  double v69;
  long double v70;
  __double2 v71;
  int ExternalTexture;
  uint64_t v73;
  int v74;
  unsigned int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t InnerCityBorderRenderable;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t **v92;
  int v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  size_t v98;
  unint64_t v99;
  __n128 *v100;
  NSObject *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  altitude::SceneGraph *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _DWORD *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  BOOL v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  altitude::SceneGraph *v161;
  void *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t **v169;
  int v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t *v173;
  int v174;
  size_t v175;
  unint64_t v176;
  void *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  altitude::SceneGraph *v181;
  unsigned int v182;
  char v183;
  int v184;
  int v185;
  float *v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  long double v201;
  long double v202;
  long double v203;
  double v204;
  double v205;
  long double v206;
  __double2 v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  BOOL v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  int v232;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  uint64_t v238;
  void *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  int v243;
  size_t v244;
  unint64_t v245;
  __n128 *v246;
  uint64_t v247;
  uint64_t v248;
  altitude::SceneGraph *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t v262;
  unint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  _DWORD *v276;
  uint64_t v277;
  int v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  __int128 v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  char *v294;
  std::__shared_weak_count **v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  unint64_t *v300;
  unint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t *v304;
  unint64_t *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  __n128 v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t **v330;
  _QWORD *v331;
  int v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t *v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  char *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  void *v382;
  void *v383;
  void *v384;
  _QWORD *v385;
  id v386;
  void *v387;
  unint64_t v388;
  __n128 *v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  __n128 *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  __n128 *v399;
  __n128 *v400;
  char *v401;
  __n128 v402;
  __n128 *v403;
  std::__shared_weak_count *v404;
  unint64_t *p_shared_owners;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  NSObject *v410;
  unint64_t v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  _QWORD *v418;
  __n128 *v419;
  unint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  __n128 *v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t *v437;
  uint64_t **v438;
  uint64_t **v439;
  int v440;
  void *v441;
  uint64_t v442;
  uint64_t *v443;
  __int128 *i;
  __int128 *v445;
  uint64_t v446;
  char **v447;
  uint64_t **v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v453;
  altitude::SceneGraph *v454;
  altitude::SceneGraph *v455;
  uint64_t v457;
  uint64_t v458;
  altitude::util *v459;
  altitude::util *v460;
  uint64_t v461;
  uint64_t v462[2];
  uint64_t v463[2];
  void *v464[2];
  unint64_t v465;
  _QWORD *v466;
  std::__shared_weak_count *v467;
  __int128 v468;
  __int128 v469;
  long double v470;
  long double v471;
  void *__p;
  std::__shared_weak_count *v473;
  unint64_t v474;
  __int128 v475;
  uint64_t v476;
  uint64_t v477;
  float v478[3];
  char v479;
  __n128 *v480;
  __n128 __dst;
  unint64_t v482;
  uint64_t v483;

  v483 = *MEMORY[0x1E0C80C00];
  v458 = operator new();
  v6 = *(char *)(a1 + 495);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 495);
  else
    v7 = *(_QWORD *)(a1 + 480);
  v8 = v7 + 8;
  if (v7 + 8 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v461 = a1;
  v454 = (altitude::SceneGraph *)(a1 + 472);
  v457 = a2;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (__n128 *)operator new(v10 + 1);
    __dst.n128_u64[1] = v7 + 8;
    v482 = v11 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    a2 = v457;
  }
  else
  {
    v482 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v482) = v7 + 8;
    if (!v7)
      goto LABEL_15;
  }
  if (v6 >= 0)
    v12 = (altitude::SceneGraph *)(a1 + 472);
  else
    v12 = *(altitude::SceneGraph **)v454;
  memmove(p_dst, v12, v7);
LABEL_15:
  strcpy((char *)p_dst + v7, "/Element");
  *(_QWORD *)v458 = off_1E42BE278;
  v13 = (std::string *)(v458 + 8);
  v14 = SHIBYTE(v482);
  if (SHIBYTE(v482) < 0)
  {
    std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)__dst.n128_u64[0], __dst.n128_u64[1]);
  }
  else
  {
    *(__n128 *)&v13->__r_.__value_.__l.__data_ = __dst;
    *(_QWORD *)(v458 + 24) = v482;
  }
  v15 = a1;
  *(_QWORD *)v458 = &off_1E42C4580;
  *(_QWORD *)(v458 + 32) = 0;
  *(_BYTE *)(v458 + 40) = 1;
  *(_OWORD *)(v458 + 48) = 0u;
  *(_OWORD *)(v458 + 64) = 0u;
  *(_OWORD *)(v458 + 80) = 0u;
  *(_OWORD *)(v458 + 96) = 0u;
  *(_QWORD *)(v458 + 112) = 0;
  *(_BYTE *)(v458 + 120) = 1;
  *(_QWORD *)(v458 + 128) = 0;
  v16 = v458 + 128;
  *(_QWORD *)(v458 + 136) = 0;
  if (v14 < 0)
    operator delete((void *)__dst.n128_u64[0]);
  v17 = *(_QWORD *)(a2 + 160);
  if (*(_DWORD *)(v461 + 392) == 63 && v17)
  {
    v450 = *(_QWORD *)(v461 + 8);
    v18 = *(_QWORD *)(v461 + 320);
    v19 = *(int **)(v18 + 272);
    if (v19)
    {
      v20 = *(int **)(v18 + 272);
      while (1)
      {
        while (1)
        {
          v22 = v20;
          v23 = v20[8];
          if (v23 < 1)
            break;
          v20 = (int *)*v22;
          v21 = (uint64_t **)v22;
          if (!*v22)
            goto LABEL_408;
        }
        if ((v23 & 0x80000000) == 0)
          break;
        v20 = (int *)v22[1];
        if (!v20)
        {
          v21 = (uint64_t **)(v22 + 1);
          goto LABEL_408;
        }
      }
    }
    else
    {
      v21 = (uint64_t **)(v18 + 272);
      v22 = (_QWORD *)(v18 + 272);
LABEL_408:
      v327 = v22;
      v22 = operator new(0x40uLL);
      *((_DWORD *)v22 + 8) = 0;
      v22[6] = 0;
      v22[7] = 0;
      v22[5] = 0;
      *v22 = 0;
      v22[1] = 0;
      v22[2] = v327;
      *v21 = v22;
      v328 = **(_QWORD **)(v18 + 264);
      v329 = v22;
      if (v328)
      {
        *(_QWORD *)(v18 + 264) = v328;
        v329 = *v21;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v18 + 272), v329);
      ++*(_QWORD *)(v18 + 280);
      v18 = *(_QWORD *)(v461 + 320);
      v19 = *(int **)(v18 + 272);
    }
    v449 = v22;
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          v331 = v19;
          v332 = v19[8];
          if (v332 < 3)
            break;
          v19 = (int *)*v331;
          v330 = (uint64_t **)v331;
          if (!*v331)
            goto LABEL_418;
        }
        if (v332 == 2)
          break;
        v19 = (int *)v331[1];
        if (!v19)
        {
          v330 = (uint64_t **)(v331 + 1);
          goto LABEL_418;
        }
      }
    }
    else
    {
      v330 = (uint64_t **)(v18 + 272);
      v331 = (_QWORD *)(v18 + 272);
LABEL_418:
      v333 = v331;
      v331 = operator new(0x40uLL);
      *((_DWORD *)v331 + 8) = 2;
      v331[6] = 0;
      v331[7] = 0;
      v331[5] = 0;
      *v331 = 0;
      v331[1] = 0;
      v331[2] = v333;
      *v330 = v331;
      v334 = **(_QWORD **)(v18 + 264);
      v335 = v331;
      if (v334)
      {
        *(_QWORD *)(v18 + 264) = v334;
        v335 = *v330;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v18 + 272), v335);
      ++*(_QWORD *)(v18 + 280);
    }
    v337 = *(double *)(a2 + 8);
    v336 = *(double *)(a2 + 16);
    v338 = *(double *)(a2 + 40);
    v339 = *(double *)(a2 + 48);
    v340 = *(double *)(a2 + 72);
    v341 = *(double *)(a2 + 80);
    v342 = *(double *)(a2 + 24);
    v343 = *(double *)(a2 + 56);
    v344 = *(double *)(a2 + 88);
    v345 = *(_QWORD *)(a2 + 104);
    v346 = *(_QWORD *)(a2 + 112);
    v347 = *(_QWORD *)(a2 + 120);
    v348 = v344 + v339 + v337;
    if (v348 <= 0.0)
    {
      if (v337 <= v339 || v337 <= v344)
      {
        v355 = sqrt(1.0 - (v339 + v337) + v344);
        v356 = 1.0 / (v355 + v355);
        v357 = (v342 + v340) * v356;
        v358 = v343 + v341;
        v359 = v358 * v356;
        v360 = v355 * 0.5;
        v361 = (v336 - v338) * v356;
        v362 = sqrt(v339 + 1.0 - (v337 + v344));
        v363 = v336 + v338;
        v364 = 1.0 / (v362 + v362);
        v365 = v363 * v364;
        v366 = v362 * 0.5;
        v367 = v358 * v364;
        v368 = (v340 - v342) * v364;
        if (v339 > v344)
          v350 = v365;
        else
          v350 = v357;
        if (v339 > v344)
          v351 = v366;
        else
          v351 = v359;
        if (v339 > v344)
          v352 = v367;
        else
          v352 = v360;
        if (v339 > v344)
          v353 = v368;
        else
          v353 = v361;
      }
      else
      {
        v369 = sqrt(v337 + 1.0 - (v339 + v344));
        v350 = v369 * 0.5;
        v370 = v336 + v338;
        v371 = 1.0 / (v369 + v369);
        v351 = v370 * v371;
        v352 = (v342 + v340) * v371;
        v353 = (v343 - v341) * v371;
      }
    }
    else
    {
      v349 = 0.5 / sqrt(v348 + 1.0);
      v350 = v349 * (v343 - v341);
      v351 = v349 * (v340 - v342);
      v352 = v349 * (v336 - v338);
      v353 = 0.25 / v349;
    }
    v372 = (char *)operator new(0x90uLL);
    *((_QWORD *)v372 + 3) = 0;
    *((_QWORD *)v372 + 1) = 0;
    *((_QWORD *)v372 + 2) = 0;
    *(_QWORD *)v372 = &off_1E42E5F48;
    *((_QWORD *)v372 + 4) = 0;
    *((_QWORD *)v372 + 5) = 0;
    *(_OWORD *)(v372 + 104) = 0u;
    v460 = (altitude::util *)(v372 + 104);
    *(_OWORD *)(v372 + 120) = 0u;
    *((_QWORD *)v372 + 17) = 0;
    v453 = v331;
    v455 = (altitude::SceneGraph *)(v372 + 24);
    __p = v372 + 24;
    v473 = (std::__shared_weak_count *)v372;
    *((double *)v372 + 10) = v351;
    *((double *)v372 + 11) = v352;
    *((double *)v372 + 12) = v353;
    *((_QWORD *)v372 + 6) = v345;
    *((_QWORD *)v372 + 7) = v346;
    *((_QWORD *)v372 + 8) = v347;
    *((double *)v372 + 9) = v350;
    v373 = *(unint64_t **)(v457 + 160);
    v375 = *v373;
    v374 = v373[1];
    if (v374 != *v373)
    {
      v376 = v374 - *v373;
      v377 = 0xAAAAAAAAAAAAAAABLL * (v376 >> 3);
      if (v377 >> 60)
        abort();
      v378 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * (v376 >> 3));
      *((_QWORD *)v372 + 13) = v378;
      *((_QWORD *)v372 + 14) = v378;
      *((_QWORD *)v372 + 15) = &v378[16 * v377];
      v375 = *v373;
      v374 = v373[1];
    }
    if (v375 != v374)
    {
      v379 = 0x1E0C99000uLL;
      v380 = 0x1E0CB3000uLL;
      do
      {
        v381 = v375;
        if (*(char *)(v375 + 23) < 0)
          v381 = *(_QWORD *)v375;
        v382 = *(void **)(v379 + 3712);
        objc_msgSend(*(id *)(v380 + 2368), "stringWithUTF8String:", v381);
        v383 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v382, "timeZoneWithName:", v383);
        v384 = (void *)objc_claimAutoreleasedReturnValue();

        v385 = operator new(0x28uLL);
        v385[1] = 0;
        v385[2] = 0;
        *v385 = &off_1E42E6098;
        v386 = v384;
        v387 = v386;
        v385[3] = v386;
        v385[4] = 0;
        __dst.n128_u64[0] = (unint64_t)(v385 + 3);
        __dst.n128_u64[1] = (unint64_t)v385;
        v389 = (__n128 *)*((_QWORD *)v372 + 14);
        v388 = *((_QWORD *)v372 + 15);
        if ((unint64_t)v389 >= v388)
        {
          v390 = v380;
          v391 = v374;
          v392 = v379;
          v393 = *(__n128 **)v460;
          v394 = ((uint64_t)v389 - *(_QWORD *)v460) >> 4;
          v395 = v394 + 1;
          if ((unint64_t)(v394 + 1) >> 60)
            abort();
          v396 = v388 - (_QWORD)v393;
          if (v396 >> 3 > v395)
            v395 = v396 >> 3;
          if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF0)
            v397 = 0xFFFFFFFFFFFFFFFLL;
          else
            v397 = v395;
          if (v397 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v398 = (char *)operator new(16 * v397);
          v399 = (__n128 *)&v398[16 * v394];
          *v399 = __dst;
          v400 = v399 + 1;
          v401 = &v398[16 * v397];
          __dst = 0uLL;
          if (v389 == v393)
          {
            *((_QWORD *)v372 + 13) = v399;
            *((_QWORD *)v372 + 14) = v400;
            *((_QWORD *)v372 + 15) = v401;
          }
          else
          {
            do
            {
              v402 = v389[-1];
              --v389;
              v399[-1] = v402;
              --v399;
              v389->n128_u64[0] = 0;
              v389->n128_u64[1] = 0;
            }
            while (v389 != v393);
            v389 = (__n128 *)*((_QWORD *)v372 + 13);
            v403 = (__n128 *)*((_QWORD *)v372 + 14);
            *((_QWORD *)v372 + 13) = v399;
            *((_QWORD *)v372 + 14) = v400;
            *((_QWORD *)v372 + 15) = v401;
            while (v403 != v389)
            {
              v404 = (std::__shared_weak_count *)v403[-1].n128_u64[1];
              if (v404)
              {
                p_shared_owners = (unint64_t *)&v404->__shared_owners_;
                do
                  v406 = __ldaxr(p_shared_owners);
                while (__stlxr(v406 - 1, p_shared_owners));
                if (!v406)
                {
                  ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                  std::__shared_weak_count::__release_weak(v404);
                }
              }
              --v403;
            }
          }
          if (v389)
            operator delete(v389);
          v407 = (std::__shared_weak_count *)__dst.n128_u64[1];
          *((_QWORD *)v372 + 14) = v400;
          v379 = v392;
          v374 = v391;
          v380 = v390;
          if (!v407)
            goto LABEL_474;
          v408 = (unint64_t *)&v407->__shared_owners_;
          do
            v409 = __ldaxr(v408);
          while (__stlxr(v409 - 1, v408));
          if (!v409)
          {
            ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
            std::__shared_weak_count::__release_weak(v407);
            if (!v387)
            {
LABEL_475:
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
              v410 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v410, OS_LOG_TYPE_ERROR))
              {
                v411 = v375;
                if (*(char *)(v375 + 23) < 0)
                  v411 = *(_QWORD *)v375;
                __dst.n128_u32[0] = 136315138;
                *(unint64_t *)((char *)__dst.n128_u64 + 4) = v411;
                _os_log_impl(&dword_19F029000, v410, OS_LOG_TYPE_ERROR, "Failed to create time zone: %s", (uint8_t *)&__dst, 0xCu);
              }

            }
          }
          else
          {
LABEL_474:
            if (!v387)
              goto LABEL_475;
          }
        }
        else
        {
          v389->n128_u64[0] = (unint64_t)(v385 + 3);
          v389->n128_u64[1] = (unint64_t)v385;
          *((_QWORD *)v372 + 14) = v389 + 1;
          if (!v386)
            goto LABEL_475;
        }

        v375 += 24;
      }
      while (v375 != v374);
    }
    altitude::SceneGraph::updateTime(v455);
    a2 = v457;
    v412 = *(_QWORD *)(*(_QWORD *)(v457 + 160) + 24);
    v413 = *(std::__shared_weak_count **)(v412 + 8);
    v464[0] = *(void **)v412;
    v464[1] = v413;
    if (v413)
    {
      v414 = (unint64_t *)&v413->__shared_owners_;
      do
        v415 = __ldxr(v414);
      while (__stxr(v415 + 1, v414));
    }
    altitude::loadSceneGraphNode(&__dst, v450, (_QWORD *)v457, v458, (int **)v464, v449 + 5, v453 + 5, (uint64_t)v455);
    v15 = v461;
    if (v413)
    {
      v416 = (unint64_t *)&v413->__shared_owners_;
      do
        v417 = __ldaxr(v416);
      while (__stlxr(v417 - 1, v416));
      if (!v417)
      {
        ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
        std::__shared_weak_count::__release_weak(v413);
      }
    }
    v418 = __p;
    v419 = (__n128 *)*((_QWORD *)__p + 1);
    if ((unint64_t)v419 >= *((_QWORD *)__p + 2))
    {
      v423 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)__p, __dst);
    }
    else
    {
      v419->n128_u64[0] = __dst.n128_u64[0];
      v420 = __dst.n128_u64[1];
      v419->n128_u64[1] = __dst.n128_u64[1];
      if (v420)
      {
        v421 = (unint64_t *)(v420 + 8);
        do
          v422 = __ldxr(v421);
        while (__stxr(v422 + 1, v421));
      }
      v423 = v419 + 1;
    }
    v418[1] = v423;
    v424 = v473;
    if (v473)
    {
      v425 = (unint64_t *)&v473->__shared_owners_;
      do
        v426 = __ldxr(v425);
      while (__stxr(v426 + 1, v425));
    }
    v427 = *(std::__shared_weak_count **)(v458 + 136);
    *(_QWORD *)(v458 + 128) = v418;
    *(_QWORD *)(v458 + 136) = v424;
    if (v427)
    {
      v428 = (unint64_t *)&v427->__shared_owners_;
      do
        v429 = __ldaxr(v428);
      while (__stlxr(v429 - 1, v428));
      if (!v429)
      {
        ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
        std::__shared_weak_count::__release_weak(v427);
      }
    }
    v430 = (std::__shared_weak_count *)__dst.n128_u64[1];
    if (__dst.n128_u64[1])
    {
      v431 = (unint64_t *)(__dst.n128_u64[1] + 8);
      do
        v432 = __ldaxr(v431);
      while (__stlxr(v432 - 1, v431));
      if (!v432)
      {
        ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
        std::__shared_weak_count::__release_weak(v430);
      }
    }
    v433 = v473;
    if (v473)
    {
      v434 = (unint64_t *)&v473->__shared_owners_;
      do
        v435 = __ldaxr(v434);
      while (__stlxr(v435 - 1, v434));
      if (!v435)
      {
        ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
        std::__shared_weak_count::__release_weak(v433);
      }
    }
    v436 = *(_QWORD *)(v461 + 320);
    v437 = *(uint64_t **)(v436 + 272);
    if (v437)
    {
      while (1)
      {
        while (1)
        {
          v439 = (uint64_t **)v437;
          v440 = *((_DWORD *)v437 + 8);
          if (v440 < 1)
            break;
          v437 = *v439;
          v438 = v439;
          if (!*v439)
            goto LABEL_525;
        }
        if ((v440 & 0x80000000) == 0)
          break;
        v437 = v439[1];
        if (!v437)
        {
          v438 = v439 + 1;
          goto LABEL_525;
        }
      }
      v441 = v439;
    }
    else
    {
      v438 = (uint64_t **)(v436 + 272);
      v439 = (uint64_t **)(v436 + 272);
LABEL_525:
      v441 = operator new(0x40uLL);
      *((_DWORD *)v441 + 8) = 0;
      *((_QWORD *)v441 + 6) = 0;
      *((_QWORD *)v441 + 7) = 0;
      *((_QWORD *)v441 + 5) = 0;
      *(_QWORD *)v441 = 0;
      *((_QWORD *)v441 + 1) = 0;
      *((_QWORD *)v441 + 2) = v439;
      *v438 = (uint64_t *)v441;
      v442 = **(_QWORD **)(v436 + 264);
      v443 = (uint64_t *)v441;
      if (v442)
      {
        *(_QWORD *)(v436 + 264) = v442;
        v443 = *v438;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v436 + 272), v443);
      ++*(_QWORD *)(v436 + 280);
      v15 = v461;
      a2 = v457;
    }
    v445 = (__int128 *)*((_QWORD *)v441 + 5);
    for (i = (__int128 *)*((_QWORD *)v441 + 6); v445 != i; ++v445)
      altitude::RenderableGroup::takeOwnership((_QWORD *)v458, v445);
LABEL_530:
    *(_WORD *)(v15 + 506) = *(unsigned __int8 *)(a2 + 3);
    *(_WORD *)(v15 + 508) = *(unsigned __int8 *)(a2 + 4);
    return;
  }
  if (*(_QWORD *)(a2 + 144) == *(_QWORD *)(a2 + 136))
  {
LABEL_384:
    if (v17)
    {
      v311 = (char *)operator new(0x90uLL);
      *((_QWORD *)v311 + 1) = 0;
      *((_QWORD *)v311 + 2) = 0;
      *(_QWORD *)v311 = &off_1E42E5F48;
      *(_OWORD *)(v311 + 40) = 0u;
      *(_OWORD *)(v311 + 56) = 0u;
      *(_OWORD *)(v311 + 72) = 0u;
      *(_OWORD *)(v311 + 24) = 0u;
      *((_QWORD *)v311 + 11) = 0;
      *((_QWORD *)v311 + 12) = 0x3FF0000000000000;
      *(_OWORD *)(v311 + 104) = 0u;
      *(_OWORD *)(v311 + 120) = 0u;
      *((_QWORD *)v311 + 17) = 0;
      __dst.n128_u64[0] = (unint64_t)(v311 + 24);
      __dst.n128_u64[1] = (unint64_t)v311;
      v312 = *(_QWORD *)(v17 + 24);
      v313 = *(std::__shared_weak_count **)(v312 + 8);
      __p = *(void **)v312;
      v473 = v313;
      if (v313)
      {
        v314 = (unint64_t *)&v313->__shared_owners_;
        do
          v315 = __ldxr(v314);
        while (__stxr(v315 + 1, v314));
      }
      a2 = v457;
      altitude::loadSceneGraphPlaceHolderNodes(v457, v458, &__p, (uint64_t *)&__dst);
      v15 = v461;
      if (v313)
      {
        v316 = (unint64_t *)&v313->__shared_owners_;
        do
          v317 = __ldaxr(v316);
        while (__stlxr(v317 - 1, v316));
        if (!v317)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      v318 = __dst;
      if (__dst.n128_u64[1])
      {
        v319 = (unint64_t *)(__dst.n128_u64[1] + 8);
        do
          v320 = __ldxr(v319);
        while (__stxr(v320 + 1, v319));
      }
      v321 = *(std::__shared_weak_count **)(v458 + 136);
      *(__n128 *)(v458 + 128) = v318;
      if (v321)
      {
        v322 = (unint64_t *)&v321->__shared_owners_;
        do
          v323 = __ldaxr(v322);
        while (__stlxr(v323 - 1, v322));
        if (!v323)
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
        }
      }
      v324 = (std::__shared_weak_count *)__dst.n128_u64[1];
      if (__dst.n128_u64[1])
      {
        v325 = (unint64_t *)(__dst.n128_u64[1] + 8);
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
      }
      *(_QWORD *)(*(_QWORD *)v16 + 112) = *(_QWORD *)(v461 + 408);
    }
    goto LABEL_530;
  }
  v24 = 0;
  v25 = 0;
  v451 = v461 + 368;
  v447 = (char **)(v458 + 96);
  v448 = (uint64_t **)(a2 + 208);
  __asm { FMOV            V12.2S, #1.0 }
  while (1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(v15 + 152));
    v30 = *(_DWORD *)(v15 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v15 + 152));
    if ((v30 & 2) != 0)
    {
LABEL_383:
      v17 = *(_QWORD *)(a2 + 160);
      goto LABEL_384;
    }
    v32 = *(_QWORD *)(a2 + 136);
    v459 = (altitude::util *)(v32 + 120 * v24);
    v33 = (uint64_t *)((char *)v459 + 40);
    if (*((_QWORD *)v459 + 5))
    {
      if (*(_QWORD *)(v32 + 120 * v24 + 80) != *(_QWORD *)(v32 + 120 * v24 + 88)
        || *(_QWORD *)(*(_QWORD *)(v32 + 120 * v24 + 64) + 8) <= *(_QWORD *)(*(_QWORD *)(v32 + 120 * v24 + 64) + 48)
                                                                 - *(_QWORD *)(*(_QWORD *)(v32 + 120 * v24 + 64) + 40))
      {
        break;
      }
    }
LABEL_33:
    a2 = v457;
    v24 = ++v25;
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(v457 + 144) - *(_QWORD *)(v457 + 136)) >> 3) <= v25)
      goto LABEL_383;
  }
  altitude::util::createMeshIndexData(v459, v31);
  v15 = v461;
  switch(*(_BYTE *)v459)
  {
    case 0:
    case 8:
      v38 = *(char *)(v461 + 495);
      if (v38 >= 0)
        v39 = *(unsigned __int8 *)(v461 + 495);
      else
        v39 = *(_QWORD *)(v461 + 480);
      v40 = v39 + 11;
      if (v39 + 11 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v40 >= 0x17)
      {
        v102 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
        v103 = v40 | 7;
        if (v103 == 23)
          v103 = v102;
        v104 = v103 + 1;
        p_p = operator new(v103 + 1);
        v474 = v104 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v473 = 0;
        v474 = 0;
        __p = 0;
        p_p = &__p;
        HIBYTE(v474) = v39 + 11;
        if (!v39)
          goto LABEL_108;
      }
      if (v38 >= 0)
        v105 = v454;
      else
        v105 = *(altitude::SceneGraph **)v454;
      memmove(p_p, v105, v39);
LABEL_108:
      strcpy((char *)p_p + v39, "/Renderable");
      v106 = *(_QWORD *)(v461 + 320);
      v107 = *(_QWORD *)(v106 + 272);
      if (!v107)
        goto LABEL_145;
      v108 = v32 + 120 * v24;
      v111 = *(_DWORD *)(v108 + 32);
      v110 = (_DWORD *)(v108 + 32);
      v109 = v111;
      v112 = v106 + 272;
      v113 = v106 + 272;
      do
      {
        v114 = *(_DWORD *)(v107 + 32);
        v115 = v114 < 0;
        if (v114 >= 0)
          v116 = (uint64_t *)v107;
        else
          v116 = (uint64_t *)(v107 + 8);
        if (!v115)
          v113 = v107;
        v107 = *v116;
      }
      while (*v116);
      if (v113 == v112
        || *(int *)(v113 + 32) > 0
        || (v118 = v113 + 40, v117 = *(_QWORD *)(v113 + 40), v109 >= (*(_QWORD *)(v118 + 8) - v117) >> 4))
      {
LABEL_145:
        v464[0] = 0;
        v464[1] = 0;
        v475 = 0uLL;
      }
      else
      {
        v119 = *(_OWORD *)(v117 + 16 * v109);
        *(_OWORD *)v464 = v119;
        if (*((_QWORD *)&v119 + 1))
        {
          v120 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 1, v120));
        }
        v475 = 0uLL;
        if ((_QWORD)v119)
        {
          v122 = (unint64_t *)(v32 + 120 * v24 + 64);
          altitude::util::computeBounds((uint64_t)&__dst, v33, v122);
          if (*(_DWORD *)(v461 + 392) > 7u || !*(_BYTE *)(*(_QWORD *)(v461 + 8) + 48))
            goto LABEL_144;
          v123 = *(_QWORD *)(v461 + 320);
          v124 = *(_QWORD *)(v123 + 272);
          v125 = 0uLL;
          if (v124)
          {
            v126 = *v110;
            v127 = v123 + 272;
            v128 = v123 + 272;
            do
            {
              v129 = *(_DWORD *)(v124 + 32);
              v130 = v129 < 2;
              if (v129 >= 2)
                v131 = (uint64_t *)v124;
              else
                v131 = (uint64_t *)(v124 + 8);
              if (!v130)
                v128 = v124;
              v124 = *v131;
            }
            while (*v131);
            if (v128 != v127 && *(int *)(v128 + 32) <= 2)
            {
              v133 = v128 + 40;
              v132 = *(_QWORD *)(v128 + 40);
              if (v126 < (*(_QWORD *)(v133 + 8) - v132) >> 4)
              {
                v125 = *(_OWORD *)(v132 + 16 * v126);
                v134 = *(_QWORD *)(v132 + 16 * v126 + 8);
                if (v134)
                {
                  v135 = (unint64_t *)(v134 + 8);
                  do
                    v136 = __ldxr(v135);
                  while (__stxr(v136 + 1, v135));
                  v137 = (std::__shared_weak_count *)*((_QWORD *)&v475 + 1);
                  v475 = v125;
                  if (v137)
                  {
                    v138 = (unint64_t *)&v137->__shared_owners_;
                    do
                      v139 = __ldaxr(v138);
                    while (__stlxr(v139 - 1, v138));
                    if (!v139)
                    {
                      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                      std::__shared_weak_count::__release_weak(v137);
                    }
LABEL_144:
                    v140 = v475;
LABEL_352:
                    v295 = (std::__shared_weak_count **)(v32 + 120 * v24 + 48);
                    if (v140)
                    {
                      v470 = *(double *)v33;
                      v296 = *v295;
                      v471 = *(double *)&v296;
                      if (*(double *)&v296 != 0.0)
                      {
                        v297 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v298 = __ldxr(v297);
                        while (__stxr(v298 + 1, v297));
                      }
                      InnerCityBorderRenderable = operator new();
                      v299 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v461 + 8) + 8) + 40) + 8)
                                         + 216);
                      *(_QWORD *)&v469 = _D12;
                      *(_QWORD *)&v468 = 0;
                      altitude::FlyoverNightRenderable::FlyoverNightRenderable(InnerCityBorderRenderable, v299, (uint64_t)a3, (uint64_t)&__dst, (uint64_t)&v470, (uint64_t *)v122, (uint64_t)v464[0], v140, &v469, &v468);
                      if (*(double *)&v296 != 0.0)
                      {
                        v300 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v301 = __ldaxr(v300);
                        while (__stlxr(v301 - 1, v300));
LABEL_366:
                        if (!v301)
                        {
                          ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                          std::__shared_weak_count::__release_weak(v296);
                        }
                      }
                    }
                    else
                    {
                      v470 = *(double *)v33;
                      v296 = *v295;
                      v471 = *(double *)&v296;
                      if (*(double *)&v296 != 0.0)
                      {
                        v302 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v303 = __ldxr(v302);
                        while (__stxr(v303 + 1, v302));
                      }
                      InnerCityBorderRenderable = operator new();
                      v304 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v461 + 8) + 8) + 40) + 8)
                                         + 216);
                      *(_QWORD *)&v469 = _D12;
                      *(_QWORD *)&v468 = 0;
                      altitude::FlyoverRenderable::FlyoverRenderable(InnerCityBorderRenderable, v304, (uint64_t)a3, (uint64_t)&__dst, (uint64_t)&v470, (uint64_t *)v122, (uint64_t)v464[0], &v469, &v468);
                      if (*(double *)&v296 != 0.0)
                      {
                        v305 = (unint64_t *)&v296->__shared_owners_;
                        do
                          v301 = __ldaxr(v305);
                        while (__stlxr(v301 - 1, v305));
                        goto LABEL_366;
                      }
                    }
                    *(_DWORD *)(InnerCityBorderRenderable + 164) = *(_DWORD *)(v32 + 120 * v24 + 104);
                    *(_BYTE *)(InnerCityBorderRenderable + 168) = 1;
                    *(_DWORD *)(InnerCityBorderRenderable + 176) = *v110;
                    v81 = v458;
                    altitude::RenderableGroup::takeOwnership((_QWORD *)v458, (__int128 *)v464);
                    altitude::RenderableGroup::takeOwnership((_QWORD *)v458, &v475);
LABEL_159:
                    v15 = v461;
                    v152 = (std::__shared_weak_count *)*((_QWORD *)&v475 + 1);
                    if (*((_QWORD *)&v475 + 1))
                    {
                      v153 = (unint64_t *)(*((_QWORD *)&v475 + 1) + 8);
                      do
                        v154 = __ldaxr(v153);
                      while (__stlxr(v154 - 1, v153));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                        std::__shared_weak_count::__release_weak(v152);
                        v155 = (std::__shared_weak_count *)v464[1];
                        if (v464[1])
                          goto LABEL_164;
                        goto LABEL_167;
                      }
                    }
                    v155 = (std::__shared_weak_count *)v464[1];
                    if (!v464[1])
                      goto LABEL_167;
LABEL_164:
                    v156 = (unint64_t *)&v155->__shared_owners_;
                    do
                      v157 = __ldaxr(v156);
                    while (__stlxr(v157 - 1, v156));
                    if (v157)
                    {
LABEL_167:
                      if (SHIBYTE(v474) < 0)
                        goto LABEL_168;
                    }
                    else
                    {
                      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                      std::__shared_weak_count::__release_weak(v155);
                      if (SHIBYTE(v474) < 0)
LABEL_168:
                        operator delete(__p);
                    }
LABEL_310:
                    *(_DWORD *)(InnerCityBorderRenderable + 172) = *(_DWORD *)(v32 + 120 * v24 + 4);
                    if (*(_BYTE *)v459 != 7)
                    {
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, InnerCityBorderRenderable);
LABEL_32:
                      v15 = v461;
                    }
                    goto LABEL_33;
                  }
LABEL_351:
                  v140 = v125;
                  goto LABEL_352;
                }
                *((_QWORD *)&v125 + 1) = 0;
              }
            }
          }
          v475 = v125;
          goto LABEL_351;
        }
      }
      altitude::util::computeBounds((uint64_t)&__dst, v33, (unint64_t *)(v32 + 120 * v24 + 64));
      v141 = **(_QWORD **)(v461 + 8);
      v142 = atomic_load((unint64_t *)(v141 + 1032));
      if (v142)
        goto LABEL_151;
      std::mutex::lock((std::mutex *)(v141 + 968));
      v142 = atomic_load((unint64_t *)(v141 + 1032));
      if (v142)
        goto LABEL_150;
      v143 = *(_QWORD *)(v141 + 1064);
      if (v143)
      {
        v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 48))(v143);
        atomic_store(v142, (unint64_t *)(v141 + 1032));
LABEL_150:
        std::mutex::unlock((std::mutex *)(v141 + 968));
LABEL_151:
        v470 = *(double *)v33;
        v144 = *(double *)(v32 + 120 * v24 + 48);
        v471 = v144;
        if (v144 != 0.0)
        {
          v145 = (unint64_t *)(*(_QWORD *)&v144 + 8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        InnerCityBorderRenderable = operator new();
        v147 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v461 + 8) + 8) + 40) + 8) + 216);
        *(_QWORD *)&v469 = _D12;
        *(_QWORD *)&v468 = 0;
        v148 = altitude::FlyoverRenderable::FlyoverRenderable(InnerCityBorderRenderable, v147, (uint64_t)a3, (uint64_t)&__dst, (uint64_t)&v470, (uint64_t *)(v32 + 120 * v24 + 64), v142, &v469, &v468);
        *(_DWORD *)(v148 + 164) = *(_DWORD *)(v32 + 120 * v24 + 104);
        *(_BYTE *)(v148 + 168) = 1;
        v149 = *(std::__shared_weak_count **)&v471;
        v81 = v458;
        if (v471 != 0.0)
        {
          v150 = (unint64_t *)(*(_QWORD *)&v471 + 8);
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        goto LABEL_159;
      }
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    case 1:
    case 2:
    case 3:
      v34 = *(char *)(v461 + 495);
      if (v34 >= 0)
        v35 = *(unsigned __int8 *)(v461 + 495);
      else
        v35 = *(_QWORD *)(v461 + 480);
      v36 = v35 + 11;
      if (v35 + 11 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v36 >= 0x17)
      {
        v42 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        v43 = v36 | 7;
        if (v43 == 23)
          v43 = v42;
        v44 = v43 + 1;
        v37 = operator new(v43 + 1);
        v465 = v44 | 0x8000000000000000;
        v464[0] = v37;
      }
      else
      {
        v464[1] = 0;
        v465 = 0;
        v464[0] = 0;
        v37 = v464;
        HIBYTE(v465) = v35 + 11;
        if (!v35)
          goto LABEL_60;
      }
      if (v34 >= 0)
        v45 = v454;
      else
        v45 = *(altitude::SceneGraph **)v454;
      memmove(v37, v45, v35);
LABEL_60:
      strcpy((char *)v37 + v35, "/Renderable");
      v466 = _D12;
      v480 = 0;
      *(_QWORD *)v478 = 0;
      v475 = 0uLL;
      v46 = *(_DWORD *)(v461 + 392);
      if (v46 >= 0x1F)
        v47 = 31;
      else
        v47 = *(_DWORD *)(v461 + 392);
      v48 = ~(-1 << v47) - *(_DWORD *)(v461 + 396);
      v49 = *(_DWORD *)(v461 + 400);
      LOBYTE(__p) = -1;
      BYTE1(__p) = v46;
      HIDWORD(__p) = v48;
      LODWORD(v473) = v49;
      v50 = (float *)(v32 + 120 * v24);
      v51 = v50[27];
      v52 = v50[28];
      v53 = v50[29];
      v54 = a3[4];
      v55 = a3[5];
      v56 = a3[6];
      v57 = a3[3];
      v58 = -(v57 * v53 - v55 * v51);
      v59 = *a3 + v51;
      v60 = -(v54 * v51 - v57 * v52);
      v61 = a3[1] + v52;
      v62 = -(v55 * v52 - v54 * v53) - (v55 * v52 - v54 * v53);
      v63 = v58 + v58;
      v64 = v60 + v60;
      v65 = v59 + v64 * v54 + v62 * v56 - v63 * v55;
      v66 = v61 - v64 * v57 + v62 * v55 + v63 * v56;
      v67 = v53 + v64 * v56 + a3[2] + v63 * v57 - v62 * v54;
      v68 = sqrt(v65 * v65 + v66 * v66);
      v69 = atan2(v67, v68 * 0.996647189);
      v70 = atan2(v66, v65);
      v71 = __sincos_stret(v69);
      v470 = atan2(v67 + v71.__sinval * v71.__sinval * 42841.3115 * v71.__sinval, v68 + v71.__cosval * v71.__cosval * -42697.6727 * v71.__cosval);
      v471 = v70;
      v73 = *(_QWORD *)v478;
      if (*(_QWORD *)v478)
        v74 = ExternalTexture;
      else
        v74 = 0;
      if (v74 != 1)
      {
        InnerCityBorderRenderable = 0;
        v81 = v458;
        v15 = v461;
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v475 + 1);
        if (!*((_QWORD *)&v475 + 1))
          goto LABEL_271;
        goto LABEL_191;
      }
      v75 = *(_DWORD *)(v32 + 120 * v24 + 56);
      v469 = 0uLL;
      altitude::C3bLoadJob::updateHeightsFromDtm(v461, v33, v75, a3, 0, 0, 0.0);
      altitude::util::computeBounds((uint64_t)&__dst, v33, (unint64_t *)(v32 + 120 * v24 + 64));
      *(_QWORD *)&v468 = *v33;
      v76 = *(std::__shared_weak_count **)(v32 + 120 * v24 + 48);
      *((_QWORD *)&v468 + 1) = v76;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      InnerCityBorderRenderable = operator new();
      v80 = altitude::FlyoverRenderable::FlyoverRenderable(InnerCityBorderRenderable, *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v461 + 8) + 8) + 40) + 8) + 216), (uint64_t)a3, (uint64_t)&__dst, (uint64_t)&v468, (uint64_t *)(v32 + 120 * v24 + 64), v73, &v466, &v480);
      *(_DWORD *)(v80 + 164) = *(_DWORD *)(v32 + 120 * v24 + 104);
      *(_BYTE *)(v80 + 168) = 1;
      v81 = v458;
      v82 = *(_QWORD **)(v458 + 104);
      if ((unint64_t)v82 >= *(_QWORD *)(v458 + 112))
      {
        v15 = v461;
        *(_QWORD *)(v458 + 104) = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>(v447, v475, *((uint64_t *)&v475 + 1));
        if (!v76)
          goto LABEL_190;
LABEL_186:
        v163 = (unint64_t *)&v76->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
        goto LABEL_190;
      }
      *v82 = 0;
      v82[1] = 0;
      v83 = v475;
      v15 = v461;
      if (*((_QWORD *)&v475 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v475 + 1) + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
        v86 = (std::__shared_weak_count *)v82[1];
        *(_OWORD *)v82 = v83;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
      }
      else
      {
        *(_OWORD *)v82 = (unint64_t)v475;
      }
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
      *(_QWORD *)(v458 + 104) = v82 + 2;
      if (v76)
        goto LABEL_186;
LABEL_190:
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v475 + 1);
      if (!*((_QWORD *)&v475 + 1))
        goto LABEL_271;
LABEL_191:
      v165 = (unint64_t *)&v89->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
LABEL_270:
      if (v166)
        goto LABEL_271;
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      if (SHIBYTE(v465) < 0)
        goto LABEL_272;
      goto LABEL_309;
    case 4:
      v90 = v448;
      while (1)
      {
        v91 = *v90;
        v92 = v90;
        if (!*v90)
          break;
        while (1)
        {
          v90 = (uint64_t **)v91;
          v93 = *((_DWORD *)v91 + 8);
          if (v93 >= 6)
            break;
          if (v93 == 5)
          {
            v94 = v90;
            goto LABEL_195;
          }
          v91 = v90[1];
          if (!v91)
          {
            v92 = v90 + 1;
            goto LABEL_87;
          }
        }
      }
LABEL_87:
      v94 = operator new(0x40uLL);
      v94[8] = 5;
      *((_QWORD *)v94 + 6) = 0;
      *((_QWORD *)v94 + 7) = 0;
      *((_QWORD *)v94 + 5) = 0;
      *(_QWORD *)v94 = 0;
      *((_QWORD *)v94 + 1) = 0;
      *((_QWORD *)v94 + 2) = v90;
      *v92 = (uint64_t *)v94;
      v95 = **(_QWORD **)(v457 + 200);
      v96 = (uint64_t *)v94;
      if (v95)
      {
        *(_QWORD *)(v457 + 200) = v95;
        v96 = *v92;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v457 + 208), v96);
      ++*(_QWORD *)(v457 + 216);
      v15 = v461;
LABEL_195:
      if (*((_QWORD *)v94 + 6) - *((_QWORD *)v94 + 5) == 16)
      {
        v167 = v448;
        while (1)
        {
          v168 = *v167;
          v169 = v167;
          if (!*v167)
            break;
          while (1)
          {
            v167 = (uint64_t **)v168;
            v170 = *((_DWORD *)v168 + 8);
            if (v170 >= 6)
              break;
            if (v170 == 5)
            {
              v171 = v167;
              goto LABEL_277;
            }
            v168 = v167[1];
            if (!v168)
            {
              v169 = v167 + 1;
              goto LABEL_202;
            }
          }
        }
LABEL_202:
        v171 = operator new(0x40uLL);
        v171[8] = 5;
        *((_QWORD *)v171 + 6) = 0;
        *((_QWORD *)v171 + 7) = 0;
        *((_QWORD *)v171 + 5) = 0;
        *(_QWORD *)v171 = 0;
        *((_QWORD *)v171 + 1) = 0;
        *((_QWORD *)v171 + 2) = v167;
        *v169 = (uint64_t *)v171;
        v172 = **(_QWORD **)(v457 + 200);
        v173 = (uint64_t *)v171;
        if (v172)
        {
          *(_QWORD *)(v457 + 200) = v172;
          v173 = *v169;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v457 + 208), v173);
        ++*(_QWORD *)(v457 + 216);
        v15 = v461;
LABEL_277:
        v446 = v16;
        v238 = *((_QWORD *)v171 + 5);
        v239 = *(void **)v238;
        v240 = *(std::__shared_weak_count **)(v238 + 8);
        __p = *(void **)v238;
        v473 = v240;
        if (v240)
        {
          v241 = (unint64_t *)&v240->__shared_owners_;
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
        }
        v243 = *(char *)(v15 + 495);
        if (v243 >= 0)
          v244 = *(unsigned __int8 *)(v15 + 495);
        else
          v244 = *(_QWORD *)(v15 + 480);
        v245 = v244 + 11;
        if (v244 + 11 > 0x7FFFFFFFFFFFFFF7)
          abort();
        if (v245 >= 0x17)
        {
          v247 = (v245 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v245 | 7) != 0x17)
            v247 = v245 | 7;
          v248 = v247 + 1;
          v246 = (__n128 *)operator new(v247 + 1);
          __dst.n128_u64[1] = v244 + 11;
          v482 = v248 | 0x8000000000000000;
          __dst.n128_u64[0] = (unint64_t)v246;
        }
        else
        {
          v482 = 0;
          __dst = 0uLL;
          v246 = &__dst;
          HIBYTE(v482) = v244 + 11;
          if (!v244)
          {
LABEL_294:
            v16 = v446;
            strcpy((char *)v246 + v244, "/Renderable");
            v463[0] = (uint64_t)v239;
            v463[1] = (uint64_t)v240;
            if (v240)
            {
              v250 = (unint64_t *)&v240->__shared_owners_;
              do
                v251 = __ldxr(v250);
              while (__stxr(v251 + 1, v250));
            }
            v15 = v461;
            v81 = v458;
            InnerCityBorderRenderable = altitude::C3bLoadJob::createInnerCityBorderRenderable(v461, v458, a3, (uint64_t)v459, a4, v463);
            if (v240)
            {
              v252 = (unint64_t *)&v240->__shared_owners_;
              do
                v253 = __ldaxr(v252);
              while (__stlxr(v253 - 1, v252));
              if (!v253)
              {
                ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                std::__shared_weak_count::__release_weak(v240);
              }
            }
            if (SHIBYTE(v482) < 0)
              operator delete((void *)__dst.n128_u64[0]);
            v254 = v473;
            if (v473)
            {
              v255 = (unint64_t *)&v473->__shared_owners_;
              do
                v256 = __ldaxr(v255);
              while (__stlxr(v256 - 1, v255));
              if (!v256)
              {
                ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                std::__shared_weak_count::__release_weak(v254);
              }
            }
            goto LABEL_309;
          }
        }
        if (v243 >= 0)
          v249 = v454;
        else
          v249 = *(altitude::SceneGraph **)v454;
        memmove(v246, v249, v244);
        goto LABEL_294;
      }
LABEL_205:
      v174 = *(char *)(v15 + 495);
      if (v174 >= 0)
        v175 = *(unsigned __int8 *)(v15 + 495);
      else
        v175 = *(_QWORD *)(v15 + 480);
      v176 = v175 + 11;
      if (v175 + 11 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v176 >= 0x17)
      {
        v178 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
        v179 = v176 | 7;
        if (v179 == 23)
          v179 = v178;
        v180 = v179 + 1;
        v177 = operator new(v179 + 1);
        v465 = v180 | 0x8000000000000000;
        v464[0] = v177;
      }
      else
      {
        v464[1] = 0;
        v465 = 0;
        v464[0] = 0;
        v177 = v464;
        HIBYTE(v465) = v175 + 11;
        if (!v175)
          goto LABEL_219;
      }
      if (v174 >= 0)
        v181 = v454;
      else
        v181 = *(altitude::SceneGraph **)v454;
      memmove(v177, v181, v175);
LABEL_219:
      strcpy((char *)v177 + v175, "/Renderable");
      *(_QWORD *)v478 = _D12;
      v476 = 0;
      v477 = 0;
      v475 = 0uLL;
      v15 = v461;
      v182 = *(_DWORD *)(v461 + 392);
      if (v182 >= 0x1F)
        v183 = 31;
      else
        v183 = *(_DWORD *)(v461 + 392);
      v184 = ~(-1 << v183) - *(_DWORD *)(v461 + 396);
      v185 = *(_DWORD *)(v461 + 400);
      LOBYTE(__p) = -1;
      BYTE1(__p) = v182;
      HIDWORD(__p) = v184;
      LODWORD(v473) = v185;
      v186 = (float *)(v32 + 120 * v24);
      v187 = v186[27];
      v188 = v186[28];
      v189 = v186[29];
      v190 = a3[4];
      v191 = a3[5];
      v192 = a3[6];
      v193 = a3[3];
      v194 = -(v193 * v189 - v191 * v187);
      v195 = *a3 + v187;
      v196 = -(v190 * v187 - v193 * v188);
      v197 = a3[1] + v188;
      v198 = -(v191 * v188 - v190 * v189) - (v191 * v188 - v190 * v189);
      v199 = v194 + v194;
      v200 = v196 + v196;
      v201 = v195 + v200 * v190 + v198 * v192 - v199 * v191;
      v202 = v197 - v200 * v193 + v198 * v191 + v199 * v192;
      v203 = v189 + v200 * v192 + a3[2] + v199 * v193 - v198 * v190;
      v204 = sqrt(v201 * v201 + v202 * v202);
      v205 = atan2(v203, v204 * 0.996647189);
      v206 = atan2(v202, v201);
      v207 = __sincos_stret(v205);
      v470 = atan2(v203 + v207.__sinval * v207.__sinval * 42841.3115 * v207.__sinval, v204 + v207.__cosval * v207.__cosval * -42697.6727 * v207.__cosval);
      v471 = v206;
      v209 = *(_QWORD *)(v461 + 320);
      v210 = *(_QWORD *)(v209 + 272);
      v81 = v458;
      if (!v210)
        goto LABEL_237;
      v211 = v209 + 272;
      v212 = *(_QWORD *)(v209 + 272);
      do
      {
        v213 = *(_DWORD *)(v212 + 32);
        v214 = v213 < 3;
        if (v213 >= 3)
          v215 = (uint64_t *)v212;
        else
          v215 = (uint64_t *)(v212 + 8);
        if (!v214)
          v211 = v212;
        v212 = *v215;
      }
      while (*v215);
      if (v211 == v209 + 272
        || *(int *)(v211 + 32) > 3
        || (v216 = *(uint64_t **)(v211 + 40), *(uint64_t **)(v211 + 48) == v216))
      {
LABEL_237:
        v217 = 0;
        v469 = 0uLL;
      }
      else
      {
        v217 = *v216;
        v218 = v216[1];
        *(_QWORD *)&v469 = v217;
        *((_QWORD *)&v469 + 1) = v218;
        if (v218)
        {
          v219 = (unint64_t *)(v218 + 8);
          do
            v220 = __ldxr(v219);
          while (__stxr(v220 + 1, v219));
          v209 = *(_QWORD *)(v461 + 320);
          v210 = *(_QWORD *)(v209 + 272);
        }
      }
      if (!v210)
        goto LABEL_261;
      v221 = v209 + 272;
      v222 = v209 + 272;
      do
      {
        v223 = *(_DWORD *)(v210 + 32);
        v224 = v223 < 4;
        if (v223 >= 4)
          v225 = (uint64_t *)v210;
        else
          v225 = (uint64_t *)(v210 + 8);
        if (!v224)
          v222 = v210;
        v210 = *v225;
      }
      while (*v225);
      if (v222 == v221
        || *(int *)(v222 + 32) > 4
        || (v227 = v222 + 40, v226 = *(uint64_t **)(v222 + 40), *(uint64_t **)(v227 + 8) == v226))
      {
LABEL_261:
        InnerCityBorderRenderable = 0;
        v468 = 0uLL;
      }
      else
      {
        v228 = *v226;
        v229 = (std::__shared_weak_count *)v226[1];
        *(_QWORD *)&v468 = *v226;
        *((_QWORD *)&v468 + 1) = v229;
        if (v229)
        {
          v230 = (unint64_t *)&v229->__shared_owners_;
          do
            v231 = __ldxr(v230);
          while (__stxr(v231 + 1, v230));
        }
        if (v217)
          v232 = v208;
        else
          v232 = 0;
        if (v232 != 1 || v228 == 0)
        {
          InnerCityBorderRenderable = 0;
        }
        else
        {
          v257 = v16;
          v259 = *(_QWORD *)(*v33 + 40);
          v258 = *(_QWORD *)(*v33 + 48);
          v260 = *(_QWORD *)(*v33 + 8);
          v261 = (std::__shared_weak_count *)operator new(0xF8uLL);
          v262 = v258 - v259;
          v261->__shared_owners_ = 0;
          v261->__shared_weak_owners_ = 0;
          v261->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFC68;
          v263 = v262 / v260;
          v264 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)&v261[1], 32, 0, 0, 7, v262 / v260);
          v261[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B78A0;
          v261[9].__shared_weak_owners_ = (uint64_t)"/render/flyoverborder/vertexdata";
          v261[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverBorder::vertexReflection;
          v261[9].__shared_owners_ = (uint64_t)&unk_1E42B78C0;
          v466 = v264;
          v467 = v261;
          v265 = *v33;
          v266 = *(_QWORD *)(*v33 + 8);
          if ((*(_BYTE *)(*v33 + 16) & 2) == 0)
          {
            v267 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
            if (v267 != -1)
            {
              __dst.n128_u64[0] = (unint64_t)&v479;
              v480 = &__dst;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v480, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
          }
          if (v266 * v263)
            v268 = *(_QWORD *)(v265 + 72);
          else
            v268 = 0;
          v16 = v257;
          v269 = v466;
          v270 = v466[6] - v466[5];
          v271 = v270 / v466[1] * v466[1];
          v272 = v270 % v466[1];
          if (v270 == v272)
            v273 = 0;
          else
            v273 = v466[9];
          if (v260 <= v262)
          {
            if (v263 <= 1)
              v274 = 1;
            else
              v274 = v262 / v260;
            v275 = (_DWORD *)(v268 + 20);
            v276 = (_DWORD *)(v273 + 16);
            do
            {
              v277 = *(_QWORD *)(v275 - 5);
              *(v276 - 2) = *(v275 - 3);
              *((_QWORD *)v276 - 2) = v277;
              *(v276 - 1) = 1065353216;
              *v276 = *(v275 - 1);
              v276[1] = *v275;
              v276[2] = *(v275 - 1);
              v278 = *v275;
              v275 += 8;
              v276[3] = v278;
              v276 += 8;
              --v274;
            }
            while (v274);
          }
          if (v273 && v270 != v272)
          {
            if (v269[8] > v271)
              v271 = v269[8];
            v269[7] = 0;
            v269[8] = v271;
          }
          v279 = v467;
          v81 = v458;
          v15 = v461;
          if (v467)
          {
            v280 = (unint64_t *)&v467->__shared_owners_;
            do
              v281 = __ldxr(v280);
            while (__stxr(v281 + 1, v280));
          }
          *v33 = (uint64_t)v269;
          v282 = v32 + 120 * v24;
          v283 = *(std::__shared_weak_count **)(v282 + 48);
          *(_QWORD *)(v282 + 48) = v279;
          if (v283)
          {
            v284 = (unint64_t *)&v283->__shared_owners_;
            do
              v285 = __ldaxr(v284);
            while (__stlxr(v285 - 1, v284));
            if (!v285)
            {
              ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
              std::__shared_weak_count::__release_weak(v283);
            }
          }
          altitude::util::computeBounds((uint64_t)&__dst, v33, (unint64_t *)(v32 + 120 * v24 + 64));
          InnerCityBorderRenderable = operator new();
          v286 = altitude::FlyoverBorderRenderable::FlyoverBorderRenderable(InnerCityBorderRenderable, *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v461 + 8) + 8) + 40) + 8) + 216), (uint64_t)a3, (uint64_t)&__dst, (uint64_t *)&v466, (std::__shared_weak_count_vtbl **)(v32 + 120 * v24 + 64), v476, v469, v468, v478, &v477);
          *(_DWORD *)(v286 + 164) = *(_DWORD *)(v32 + 120 * v24 + 104);
          *(_BYTE *)(v286 + 168) = 1;
          v287 = *(_QWORD **)(v458 + 104);
          if ((unint64_t)v287 >= *(_QWORD *)(v458 + 112))
          {
            v294 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>(v447, v475, *((uint64_t *)&v475 + 1));
          }
          else
          {
            *v287 = 0;
            v287[1] = 0;
            v288 = v475;
            if (*((_QWORD *)&v475 + 1))
            {
              v289 = (unint64_t *)(*((_QWORD *)&v475 + 1) + 8);
              do
                v290 = __ldxr(v289);
              while (__stxr(v290 + 1, v289));
              v291 = (std::__shared_weak_count *)v287[1];
              *(_OWORD *)v287 = v288;
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
            }
            else
            {
              *(_OWORD *)v287 = (unint64_t)v475;
            }
            v294 = (char *)(v287 + 2);
          }
          *(_QWORD *)(v458 + 104) = v294;
          altitude::RenderableGroup::takeOwnership((_QWORD *)v458, &v469);
          altitude::RenderableGroup::takeOwnership((_QWORD *)v458, &v468);
          v306 = v467;
          if (v467)
          {
            v307 = (unint64_t *)&v467->__shared_owners_;
            do
              v308 = __ldaxr(v307);
            while (__stlxr(v308 - 1, v307));
            if (!v308)
            {
              ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
              std::__shared_weak_count::__release_weak(v306);
            }
          }
          v229 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
        }
        if (v229)
        {
          v309 = (unint64_t *)&v229->__shared_owners_;
          do
            v310 = __ldaxr(v309);
          while (__stlxr(v310 - 1, v309));
          if (!v310)
          {
            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
            std::__shared_weak_count::__release_weak(v229);
          }
        }
      }
      v234 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
      if (*((_QWORD *)&v469 + 1))
      {
        v235 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        if (!v236)
        {
          ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
          std::__shared_weak_count::__release_weak(v234);
        }
      }
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v475 + 1);
      if (*((_QWORD *)&v475 + 1))
      {
        v237 = (unint64_t *)(*((_QWORD *)&v475 + 1) + 8);
        do
          v166 = __ldaxr(v237);
        while (__stlxr(v166 - 1, v237));
        goto LABEL_270;
      }
LABEL_271:
      if (SHIBYTE(v465) < 0)
      {
LABEL_272:
        v162 = v464[0];
LABEL_273:
        operator delete(v162);
      }
LABEL_309:
      if (InnerCityBorderRenderable)
        goto LABEL_310;
      goto LABEL_33;
    case 5:
      goto LABEL_205;
    case 6:
      v97 = *(char *)(v461 + 495);
      if (v97 >= 0)
        v98 = *(unsigned __int8 *)(v461 + 495);
      else
        v98 = *(_QWORD *)(v461 + 480);
      v99 = v98 + 11;
      if (v98 + 11 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v99 >= 0x17)
      {
        v158 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
        v159 = v99 | 7;
        if (v159 == 23)
          v159 = v158;
        v160 = v159 + 1;
        v100 = (__n128 *)operator new(v159 + 1);
        v482 = v160 | 0x8000000000000000;
        __dst.n128_u64[0] = (unint64_t)v100;
      }
      else
      {
        v482 = 0;
        __dst = 0uLL;
        v100 = &__dst;
        HIBYTE(v482) = v98 + 11;
        if (!v98)
          goto LABEL_178;
      }
      if (v97 >= 0)
        v161 = v454;
      else
        v161 = *(altitude::SceneGraph **)v454;
      memmove(v100, v161, v98);
LABEL_178:
      strcpy((char *)v100 + v98, "/Renderable");
      v462[0] = 0;
      v462[1] = 0;
      v15 = v461;
      v81 = v458;
      InnerCityBorderRenderable = altitude::C3bLoadJob::createInnerCityBorderRenderable(v461, v458, a3, (uint64_t)v459, a4, v462);
      if ((SHIBYTE(v482) & 0x80000000) == 0)
        goto LABEL_309;
      v162 = (void *)__dst.n128_u64[0];
      goto LABEL_273;
    case 7:
      goto LABEL_33;
    default:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v101 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        __dst.n128_u16[0] = 0;
        _os_log_impl(&dword_19F029000, v101, OS_LOG_TYPE_ERROR, "Unknown mesh type.", (uint8_t *)&__dst, 2u);
      }

      goto LABEL_32;
  }
}

void sub_19FC301D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a48 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t altitude::C3bLoadJob::createInnerCityBorderRenderable(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unsigned int v17;
  char v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  long double v36;
  long double v37;
  double v38;
  double v39;
  long double v40;
  __double2 v41;
  int ExternalTexture;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  _QWORD *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  long double v78;
  long double v79;
  double v80;
  long double v81;
  double v82;
  __double2 v83;
  __double2 v84;
  long double v85;
  double v86;
  long double v87;
  double v88;
  __double2 v89;
  double sinval;
  double cosval;
  __n128 v92;
  __n128 v93;
  __double2 v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  double v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  float v139;
  double v140;
  float *v141;
  float *v142;
  unsigned int v143;
  float v144;
  float v145;
  float v146;
  float v147;
  std::__shared_weak_count *v148;
  unint64_t *p_shared_owners;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  float v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  char *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  double v190;
  uint64_t v191;
  uint64_t *v192;
  int v193;
  _QWORD v194[8];
  _QWORD *v195;
  std::__shared_weak_count *v196;
  __int128 v197;
  __int128 v198;
  double v199[2];
  _BYTE v200[4];
  int v201;
  int v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  _QWORD *v209;

  v207 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v206 = _D0;
  v204 = 0;
  v205 = 0;
  v203 = 0;
  v17 = *(_DWORD *)(a1 + 392);
  if (v17 >= 0x1F)
    v18 = 31;
  else
    v18 = *(_DWORD *)(a1 + 392);
  v19 = ~(-1 << v18) - *(_DWORD *)(a1 + 396);
  v20 = *(_DWORD *)(a1 + 400);
  v200[0] = -1;
  v200[1] = v17;
  v201 = v19;
  v202 = v20;
  v21 = *(float *)(a4 + 108);
  v22 = *(float *)(a4 + 112);
  v23 = *(float *)(a4 + 116);
  v24 = a3[4];
  v25 = a3[5];
  v26 = a3[6];
  v27 = a3[3];
  v28 = -(v27 * v23 - v25 * v21);
  v29 = *a3 + v21;
  v30 = -(v24 * v21 - v27 * v22);
  v31 = a3[1] + v22;
  v32 = -(v25 * v22 - v24 * v23) - (v25 * v22 - v24 * v23);
  v33 = v28 + v28;
  v34 = v30 + v30;
  v35 = v29 + v34 * v24 + v32 * v26 - v33 * v25;
  v36 = v31 - v34 * v27 + v32 * v25 + v33 * v26;
  v37 = v23 + v34 * v26 + a3[2] + v33 * v27 - v32 * v24;
  v38 = sqrt(v35 * v35 + v36 * v36);
  v39 = atan2(v37, v38 * 0.996647189);
  v40 = atan2(v36, v35);
  v41 = __sincos_stret(v39);
  v199[0] = atan2(v37 + v41.__sinval * v41.__sinval * 42841.3115 * v41.__sinval, v38 + v41.__cosval * v41.__cosval * -42697.6727 * v41.__cosval);
  v199[1] = v40;
  v43 = *(_QWORD *)(a1 + 320);
  v44 = *(_QWORD *)(v43 + 272);
  if (!v44)
    goto LABEL_19;
  v45 = v43 + 272;
  v46 = *(_QWORD *)(v43 + 272);
  do
  {
    v47 = *(_DWORD *)(v46 + 32);
    v48 = v47 < 3;
    if (v47 >= 3)
      v49 = (uint64_t *)v46;
    else
      v49 = (uint64_t *)(v46 + 8);
    if (!v48)
      v45 = v46;
    v46 = *v49;
  }
  while (*v49);
  if (v45 == v43 + 272
    || *(int *)(v45 + 32) > 3
    || (v51 = v45 + 40, v50 = *(uint64_t **)(v45 + 40), *(uint64_t **)(v51 + 8) == v50))
  {
LABEL_19:
    v198 = 0uLL;
  }
  else
  {
    v53 = *v50;
    v52 = v50[1];
    *(_QWORD *)&v198 = v53;
    *((_QWORD *)&v198 + 1) = v52;
    if (v52)
    {
      v54 = (unint64_t *)(v52 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v43 = *(_QWORD *)(a1 + 320);
      v44 = *(_QWORD *)(v43 + 272);
    }
  }
  v191 = a2;
  v192 = a6;
  v193 = ExternalTexture;
  if (!v44)
    goto LABEL_35;
  v56 = v43 + 272;
  v57 = v43 + 272;
  do
  {
    v58 = *(_DWORD *)(v44 + 32);
    v59 = v58 < 4;
    if (v58 >= 4)
      v60 = (uint64_t *)v44;
    else
      v60 = (uint64_t *)(v44 + 8);
    if (!v59)
      v57 = v44;
    v44 = *v60;
  }
  while (*v60);
  if (v57 == v56 || *(int *)(v57 + 32) > 4 || (v61 = *(uint64_t **)(v57 + 40), *(uint64_t **)(v57 + 48) == v61))
  {
LABEL_35:
    v197 = 0uLL;
  }
  else
  {
    v63 = *v61;
    v62 = v61[1];
    *(_QWORD *)&v197 = v63;
    *((_QWORD *)&v197 + 1) = v62;
    if (v62)
    {
      v64 = (unint64_t *)(v62 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
  }
  v66 = *(_QWORD **)(a4 + 40);
  v68 = v66[5];
  v67 = v66[6];
  v69 = v66[1];
  v70 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v71 = v67 - v68;
  v70->__shared_owners_ = 0;
  v70->__shared_weak_owners_ = 0;
  v70->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFC68;
  v72 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)&v70[1], 32, 0, 0, 7, v71 / v69);
  v70[9].__shared_weak_owners_ = (uint64_t)"/render/flyoverborder/vertexdata";
  v70[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverBorder::vertexReflection;
  v70[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B78A0;
  v70[9].__shared_owners_ = (uint64_t)&unk_1E42B78C0;
  v195 = v72;
  v196 = v70;
  v73 = 1.0 / (double)(1 << v17);
  v74 = v73 * (double)v20;
  v75 = v73 * (double)((1 << v17) + ~v19);
  v76 = v74 + v73;
  v77 = v75 + v73;
  v78 = v74 * 6.28318531;
  v79 = exp(v75 * 6.28318531 + -3.14159265);
  v80 = atan(v79) * 2.0 + -1.57079633;
  v81 = fmod(v78, 6.28318531);
  v82 = fmod(v81 + 6.28318531, 6.28318531) + -3.14159265;
  v83 = __sincos_stret(v80);
  v84 = __sincos_stret(v82);
  v85 = exp(v77 * 6.28318531 + -3.14159265);
  v86 = atan(v85) * 2.0 + -1.57079633;
  v87 = fmod(v76 * 6.28318531, 6.28318531);
  v88 = fmod(v87 + 6.28318531, 6.28318531) + -3.14159265;
  v89 = __sincos_stret(v86);
  sinval = v89.__sinval;
  cosval = v89.__cosval;
  v94 = __sincos_stret(v88);
  v93.n128_f64[0] = v94.__cosval;
  v92.n128_f64[0] = v94.__sinval;
  v96 = a3[4];
  v95 = a3[5];
  v97 = a3[6];
  v99 = a3[2];
  v98 = a3[3];
  v100 = *a3;
  v101 = a3[1];
  v102 = *(_QWORD *)(a4 + 40);
  v103 = *(_QWORD *)(v102 + 8) * (v71 / v69);
  if ((*(_BYTE *)(v102 + 16) & 2) == 0)
  {
    v104 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v104 != -1)
    {
      v194[0] = &v208;
      v209 = v194;
      v105 = v101;
      v190 = v100;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v209, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      v101 = v105;
      v93.n128_u64[0] = *(_QWORD *)&v94.__cosval;
      v92.n128_u64[0] = *(_QWORD *)&v94.__sinval;
      v100 = v190;
      sinval = v89.__sinval;
      cosval = v89.__cosval;
    }
  }
  if (v103)
    v106 = *(_QWORD *)(v102 + 72);
  else
    v106 = 0;
  v107 = v195;
  v108 = v195[6] - v195[5];
  v109 = v108 / v195[1] * v195[1];
  v110 = v108 % v195[1];
  if (v108 == v110)
  {
    v111 = 0;
    if (v69 > v71)
      goto LABEL_48;
  }
  else
  {
    v111 = v195[9];
    if (v69 > v71)
      goto LABEL_48;
  }
  v112 = sqrt(1.0 - v83.__sinval * v83.__sinval * 0.00669437999);
  v113 = -(v100 * v95 - v99 * v98);
  v114 = -(v101 * v98 - v100 * v96);
  v115 = -(v99 * v96 - v101 * v95) - (v99 * v96 - v101 * v95);
  v116 = 6378137.0 / v112 * v83.__cosval * v84.__cosval;
  v117 = v83.__sinval * 0.99330562 * (6378137.0 / v112);
  v118 = 6378137.0 / sqrt(1.0 - sinval * sinval * 0.00669437999);
  v119 = v113 + v113;
  v120 = v114 + v114;
  v121 = v101 - v115 * v95;
  v122 = 6378137.0 / v112 * v83.__cosval * v84.__sinval;
  v123 = v99 + v115 * v96 + v120 * v97;
  v124 = v118 * cosval * v93.n128_f64[0];
  v125 = sinval * 0.99330562 * v118;
  v126 = v121 + v119 * v97 + v120 * v98;
  v127 = -(v123 - v119 * v98);
  v128 = v118 * cosval * v92.n128_f64[0];
  v129 = -(v117 * v96 - v122 * v95) - (v117 * v96 - v122 * v95);
  v130 = -(v116 * v95 - v117 * v98) - (v116 * v95 - v117 * v98);
  v131 = -(v122 * v98 - v116 * v96) - (v122 * v98 - v116 * v96);
  v132 = v122 - v126 + v130 * v97 + v131 * v98;
  v133 = v127 + v117 + v129 * v96 + v131 * v97;
  v134 = -(v125 * v96 - v128 * v95) - (v125 * v96 - v128 * v95);
  v135 = -(v124 * v95 - v125 * v98) - (v124 * v95 - v125 * v98);
  v136 = v127 + v125;
  v92.n128_f64[0] = v132 - v129 * v95;
  v93.n128_f64[0] = v133 - v130 * v98;
  v137 = -(v128 * v98 - v124 * v96) - (v128 * v98 - v124 * v96);
  v138 = v136 + v134 * v96 + v137 * v97 - (v93.n128_f64[0] + v135 * v98);
  *(float *)&v137 = v128 - v126 + v135 * v97 + v137 * v98 - (v92.n128_f64[0] + v134 * v95);
  v139 = v138;
  v140 = 1.0 / *(float *)&v137;
  v141 = (float *)(v106 + 16);
  v142 = (float *)(v111 + 16);
  v143 = 1;
  do
  {
    v144 = *(v141 - 3);
    v145 = fmin(fmax((v144 - v92.n128_f64[0]) * v140, 0.0), 1.0);
    v146 = *(v141 - 2);
    v147 = fmin(fmax((v146 - v93.n128_f64[0]) * (1.0 / v139), 0.0), 1.0);
    *(v142 - 4) = *(v141 - 4);
    *(v142 - 3) = v144;
    *(v142 - 2) = v146;
    *(v142 - 1) = 1.0;
    *v142 = v145;
    v142[1] = v147;
    v142[2] = *v141;
    v142[3] = v141[1];
    v48 = v71 / v69 > v143++;
    v141 += 8;
    v142 += 8;
  }
  while (v48);
LABEL_48:
  if (v111 && v108 != v110)
  {
    if (v107[8] > v109)
      v109 = v107[8];
    v107[7] = 0;
    v107[8] = v109;
  }
  v148 = v196;
  if (v196)
  {
    p_shared_owners = (unint64_t *)&v196->__shared_owners_;
    do
      v150 = __ldxr(p_shared_owners);
    while (__stxr(v150 + 1, p_shared_owners));
  }
  v151 = *(std::__shared_weak_count **)(a4 + 48);
  *(_QWORD *)(a4 + 40) = v107;
  *(_QWORD *)(a4 + 48) = v148;
  if (v151)
  {
    v152 = (unint64_t *)&v151->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v151->__on_zero_shared)(v151, v92, v93);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  if (*(_BYTE *)a4 != 6)
  {
    v154 = *(_DWORD *)(a4 + 56);
    v155 = *v192;
    v156 = (std::__shared_weak_count *)v192[1];
    v157 = 1000000.0 / (float)(1 << *(_DWORD *)(a1 + 392));
    v194[6] = *v192;
    v194[7] = v156;
    if (v156)
    {
      v158 = (unint64_t *)&v156->__shared_owners_;
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
    }
    altitude::C3bLoadJob::updateHeightsFromDtm(a1, (uint64_t *)(a4 + 40), v154, a3, v155, v156, v157);
    if (v156)
    {
      v160 = (unint64_t *)&v156->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
  }
  v162 = v197;
  if ((_QWORD)v197)
    v163 = v193;
  else
    v163 = 0;
  if (v163 != 1)
  {
    v166 = 0;
    v176 = v196;
    if (!v196)
      goto LABEL_96;
    goto LABEL_92;
  }
  v164 = v207;
  if ((_QWORD)v198)
    v165 = v198;
  else
    v165 = v207;
  altitude::util::computeBounds((uint64_t)v194, (uint64_t *)(a4 + 40), (unint64_t *)(a4 + 64));
  v166 = operator new();
  v167 = altitude::FlyoverBorderRenderable::FlyoverBorderRenderable(v166, *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 40) + 8) + 216), (uint64_t)a3, (uint64_t)v194, (uint64_t *)&v195, (std::__shared_weak_count_vtbl **)(a4 + 64), v164, v165, v162, &v206, &v205);
  *(_DWORD *)(v167 + 164) = *(_DWORD *)(a4 + 104);
  *(_BYTE *)(v167 + 168) = 1;
  v168 = *(uint64_t **)(v191 + 104);
  if ((unint64_t)v168 >= *(_QWORD *)(v191 + 112))
  {
    v177 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)(v191 + 96), v203, (uint64_t)v204);
  }
  else
  {
    *v168 = 0;
    v168[1] = 0;
    v169 = v203;
    v170 = (uint64_t)v204;
    if (v204)
    {
      v171 = (unint64_t *)&v204->__shared_owners_;
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 1, v171));
      v173 = (std::__shared_weak_count *)v168[1];
      *v168 = v169;
      v168[1] = v170;
      if (v173)
      {
        v174 = (unint64_t *)&v173->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
    }
    else
    {
      *v168 = v203;
      v168[1] = 0;
    }
    v177 = (char *)(v168 + 2);
  }
  *(_QWORD *)(v191 + 104) = v177;
  altitude::RenderableGroup::takeOwnership((_QWORD *)v191, &v198);
  altitude::RenderableGroup::takeOwnership((_QWORD *)v191, &v197);
  v176 = v196;
  if (v196)
  {
LABEL_92:
    v178 = (unint64_t *)&v176->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
LABEL_96:
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  if (*((_QWORD *)&v197 + 1))
  {
    v181 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v184 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v204;
  if (v204)
  {
    v187 = (unint64_t *)&v204->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  return v166;
}

void sub_19FC30E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v36 - 208);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getExternalTexture(uint64_t a1, double *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, float *a6, float *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  int v23;
  double v24;
  long double v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  float v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _BYTE v70[32];
  _QWORD v71[4];

  v71[2] = *MEMORY[0x1E0C80C00];
  v68 = 0;
  v69 = 0;
  v9 = *a3;
  if (a3[1] == *a3)
  {
LABEL_42:
    v50 = 0;
    v51 = v69;
    if (v69)
      goto LABEL_50;
    return v50;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(v9 + 16 * v15);
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(std::__shared_weak_count **)(v17 + 16);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    LOBYTE(v22) = 1;
    if (!v18 || *(unsigned __int8 *)(v18 + 24) != 255)
      goto LABEL_29;
    v23 = 1 << *(_BYTE *)(v18 + 25);
    v24 = a2[1];
    v25 = tan(*a2 * 0.5 + 0.785398163);
    if (v23 + ~vcvtmd_s64_f64((log(v25) * 0.159154943 + 0.5) * (double)v23) != *(_DWORD *)(v18 + 28))
    {
      LOBYTE(v22) = 1;
LABEL_29:
      if (!v19)
        goto LABEL_34;
LABEL_30:
      v38 = (unint64_t *)&v19->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      goto LABEL_34;
    }
    if (*(_DWORD *)(v18 + 32) != vcvtmd_s64_f64((v24 * 0.159154943 + 0.5) * (double)v23))
    {
      LOBYTE(v22) = 1;
      if (!v19)
        goto LABEL_34;
      goto LABEL_30;
    }
    if (v19)
    {
      v26 = (unint64_t *)&v19->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v69;
    v68 = v18;
    v69 = v19;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = (uint64_t *)(*a3 + 16 * v15);
    v33 = *v31;
    v32 = v31[1];
    if (v32)
    {
      v34 = (unint64_t *)(v32 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v22 = (std::__shared_weak_count *)a5[1];
    *a5 = v33;
    a5[1] = v32;
    if (!v22)
      goto LABEL_29;
    v36 = (unint64_t *)&v22->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    LOBYTE(v22) = 0;
    if (v19)
      goto LABEL_30;
LABEL_34:
    if ((v22 & 1) == 0)
      break;
    v9 = *a3;
    v15 = ++v16;
  }
  while (v16 < (unint64_t)((a3[1] - *a3) >> 4));
  v40 = v68;
  if (!v68)
    goto LABEL_42;
  *a4 = *(_QWORD *)(v68 + 48);
  v41 = *(unsigned __int8 *)(a1 + 1);
  v42 = *(unsigned __int8 *)(v40 + 25);
  v43 = v41 - v42;
  if (v41 <= v42)
  {
    v48 = *(_DWORD *)(v40 + 28);
    v47 = *(_DWORD *)(v40 + 32);
    v46 = -1 << v42;
  }
  else
  {
    v44 = *(_DWORD *)(a1 + 8);
    v45 = ~(-1 << v41) - *(_DWORD *)(a1 + 4);
    v46 = -1 << v42;
    v48 = *(_DWORD *)(v40 + 28);
    v47 = *(_DWORD *)(v40 + 32);
    v49 = 1.0 / (float)(1 << v43);
    *a6 = v49;
    a6[1] = v49;
    *a7 = v49 * (float)(v44 - (v47 << v43));
    a7[1] = v49 * (float)(v45 + ((v48 + (-1 << v42) + 1) << v43));
  }
  *(_DWORD *)v70 = 7;
  memset(&v70[4], 0, 28);
  v71[0] = altitude::TileKey::getGEOTileKey((unsigned int *)v70, a9);
  v71[1] = v52;
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(v53, "versionForTileKey:", v71);

  *(_QWORD *)&v66 = 7;
  DWORD2(v66) = 0;
  HIDWORD(v66) = v54;
  LODWORD(v67) = v42;
  DWORD1(v67) = ~v46 - v48;
  *((_QWORD *)&v67 + 1) = v47;
  v55 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(a8, v70, (unsigned int *)&v66);
  if (!*v55)
  {
    v56 = v55;
    v57 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v57 + 28) = v66;
    *(_OWORD *)(v57 + 44) = v67;
    v58 = *(_QWORD *)v70;
    *(_QWORD *)v57 = 0;
    *((_QWORD *)v57 + 1) = 0;
    *((_QWORD *)v57 + 2) = v58;
    *v56 = (uint64_t)v57;
    v59 = **(_QWORD **)a8;
    if (v59)
    {
      *(_QWORD *)a8 = v59;
      v57 = (char *)*v56;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a8 + 8), (uint64_t *)v57);
    ++*(_QWORD *)(a8 + 16);
  }
  v50 = 1;
  v51 = v69;
  if (v69)
  {
LABEL_50:
    v60 = (unint64_t *)&v51->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return v50;
}

void sub_19FC3129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *altitude::C3bLoadJob::updateHeightsFromDtm(uint64_t a1, uint64_t *a2, unsigned int a3, double *a4, uint64_t a5, std::__shared_weak_count *a6, float a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  long double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;
  __double2 v28;
  float32x4_t v29;
  float32x4_t v30;
  double v31;
  __double2 v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  long double v40;
  double v41;
  double v42;
  __double2 v43;
  double v44;
  __double2 v45;
  __double2 v46;
  float32x4_t v47;
  float32x4_t v48;
  double v49;
  __double2 v50;
  uint64_t v51;
  _DWORD *v52;
  double v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double v62;
  unsigned int v63;
  float32x4_t v64;
  double v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float *v83;
  float v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  int v89;
  double v90;
  double v91;
  NSObject *v92;
  int v93;
  float v95;
  float v96;
  uint64_t *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int *v104;
  int v105;
  float v106;
  float v107;
  int v108;
  int v109;
  float v110;
  BOOL v111;
  int v112;
  float v113;
  int v114;
  int v116;
  int v117;
  _DWORD *v118;
  __int32 *v119;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  double v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  double v140;
  unsigned int v141;
  float32x4_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float v147;
  uint64_t v148;
  float v149;
  float v150;
  int v151;
  NSObject *v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  float *v169;
  float v170;
  float v171;
  uint64_t v172;
  float v173;
  float v174;
  int v175;
  double v176;
  double v177;
  NSObject *v178;
  int v179;
  float v181;
  float v182;
  uint64_t *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int *v190;
  int v191;
  float v192;
  float v193;
  int v194;
  int v195;
  float v196;
  BOOL v197;
  int v198;
  float v199;
  int v200;
  int v202;
  int v203;
  _DWORD *v204;
  __int32 *v205;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  int v218;
  _QWORD **v219;
  uint64_t *result;
  uint64_t *v221;
  char *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  float v227;
  uint64_t v228;
  float v229;
  float v230;
  int v231;
  NSObject *v232;
  float v233;
  float v234;
  unsigned int v236;
  unsigned int v237;
  __double2 v238;
  __double2 v239;
  __double2 v240;
  __double2 v241;
  _BYTE v247[32];
  __int16 v248;
  uint64_t v249;
  char v250;
  uint8_t buf[16];
  _QWORD v252[4];

  v8 = a1;
  v252[2] = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v10 = **(_QWORD **)(*a2 + 216);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v11 == 2;
  v13 = v11 == 3;
  if (v11)
  {
    v14 = 0;
    do
    {
      if (v12
        && (v15 = *(_QWORD *)(v10 + 8) + v14 * 8,
            *(unsigned __int8 *)(v15 + 8) == LOBYTE((&ggl::CommonMesh::bufferPos4UVFieldsReflection)[v14 + 1]))
        && *(char **)(v15 + 24) == (&ggl::CommonMesh::bufferPos4UVFieldsReflection)[v14 + 3])
      {
        v12 = 1;
        if (!v13)
          goto LABEL_3;
      }
      else
      {
        v12 = 0;
        if (!v13)
          goto LABEL_3;
      }
      v16 = *(_QWORD *)(v10 + 8) + v14 * 8;
      if (*(unsigned __int8 *)(v16 + 8) == LOBYTE((&ggl::TileBaseSurface::p3T2T2BufferFieldsReflection)[v14 + 1])
        && *(char **)(v16 + 24) == (&ggl::TileBaseSurface::p3T2T2BufferFieldsReflection)[v14 + 3])
      {
        v13 = 1;
        goto LABEL_4;
      }
LABEL_3:
      v13 = 0;
LABEL_4:
      v14 += 4;
      --v11;
    }
    while (v11);
  }
  if (v12)
  {
    v17 = *(_QWORD *)(a1 + 392);
    v18 = *(_QWORD *)(a1 + 400);
    if (a6)
    {
      p_shared_owners = (unint64_t *)&a6->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v9 = *a2;
    }
    v21 = HIDWORD(v17);
    v22 = a4[2];
    v23 = sqrt(*a4 * *a4 + a4[1] * a4[1]);
    v24 = atan2(v22, v23 * 0.996647189);
    v25 = __sincos_stret(v24);
    v26 = atan2(v22 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v23 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
    v32 = __sincos_stret(v26);
    v33 = *(_QWORD *)(a1 + 352);
    v34 = *(_DWORD **)(v33 + 16);
    v236 = a3;
    if (v34)
      v233 = (float)(*v34 - 1);
    else
      v233 = 4295000000.0;
    v53 = sqrt(v32.__sinval * v32.__sinval * -0.00669437999 + 1.0);
    v54 = v17 - *(_DWORD *)(v33 + 136);
    v55 = 1 << (v17 - *(_BYTE *)(v33 + 136));
    v56 = *(_DWORD *)(v33 + 144) << (v17 - *(_BYTE *)(v33 + 136));
    v57 = *(_DWORD *)(v33 + 140) << v54;
    v58 = *(_QWORD *)(v9 + 48) - *(_QWORD *)(v9 + 40);
    v59 = *(_QWORD *)(v9 + 8);
    v60 = v58 / v59;
    v249 = 0;
    *(_OWORD *)v247 = 0uLL;
    if ((*(_BYTE *)(v9 + 16) & 2) == 0)
    {
      v61 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v61 != -1)
      {
        v252[0] = &v250;
        *(_QWORD *)buf = v252;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v62 = -6378137.0 / v53;
    v63 = v18 - v56;
    v64.i64[0] = 0;
    v65 = v23 / v32.__cosval;
    if (v59 * (v58 / v59))
      v66 = *(_QWORD *)(v9 + 72);
    else
      v66 = 0;
    v64.i64[1] = v9;
    v67 = 1.0 / (float)v55;
    v68 = v65 + v62;
    v69 = v67 * (float)v63;
    v70 = v67 * (float)(v21 - v57);
    *(float32x4_t *)v247 = v64;
    *(_QWORD *)&v247[16] = 0;
    *(_QWORD *)&v247[24] = v59 * (v58 / v59);
    v249 = v66;
    v248 = 2;
    if (a5)
    {
      v71 = v233;
      if (v59 <= v58)
      {
        v72 = 0;
        v73 = v236;
        if (v60 <= 1)
          v74 = 1;
        else
          v74 = v60;
        v75 = a7;
        while (1)
        {
          v81 = v66 + 32 * v72;
          v28.__sinval = *(double *)(v81 + 4);
          LODWORD(v28.__cosval) = *(_DWORD *)(v81 + 12);
          v82 = *(float *)v81;
          LODWORD(v252[0]) = 0;
          v84 = *(float *)(v81 + 16);
          v85 = *(float *)(v81 + 20);
          v83 = (float *)(v81 + 16);
          v86 = *(_QWORD *)(a1 + 352);
          v87 = (float)(v69 + (float)(v84 * v67)) * v71;
          LODWORD(v62) = LODWORD(v32.__cosval);
          v88 = (float)(v70 + (float)(v85 * v67)) * *(float *)&v32.__cosval;
          v89 = *(_DWORD *)(v86 + 132);
          v238 = v28;
          if (v89 == 16)
          {
            karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v86, (float *)v252, v87, v88, v62, v28.__sinval, *(double *)v64.i64, *(double *)v29.i64, *(double *)v30.i64, v31);
          }
          else if (v89 == 8)
          {
            karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v86, (float *)v252, v87, v88, v62, v28.__sinval, *(double *)v64.i64, *(double *)v29.i64, *(double *)v30.i64, v31);
          }
          else
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v92 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19F029000, v92, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
            }

          }
          v93 = *(_DWORD *)(a5 + 16);
          if (v93 == 1 || v93 == 4)
            break;
          v106 = 0.0;
          if (v93 == 6)
            v106 = karo::media::Image::sample<float,unsigned char,float>(a5, *v83, v83[1], v90, v91, *(double *)v64.i64, v29.f32[0], v30.f32[0])* 0.0039216;
          LODWORD(v31) = 0;
LABEL_42:
          HIDWORD(v28.__cosval) = HIDWORD(v238.__cosval);
          HIDWORD(v62) = 1072672276;
          v76 = v106 * 0.99 + 0.01;
          v77 = 1.0 - v76;
          v78 = (float)(v82 * v76) + (float)((float)(1.0 - v76) * (float)(*(float *)v252 - v68));
          v79 = v77 * v75;
          if (v72 < v73)
            v79 = 0.0;
          v80 = v66 + 32 * v72;
          *(float *)v80 = v78 - v79;
          *(double *)(v80 + 4) = v238.__sinval;
          *(_DWORD *)(v80 + 12) = LODWORD(v238.__cosval);
          if (++v72 == v74)
            goto LABEL_88;
        }
        v95 = *v83;
        v96 = v83[1];
        v97 = *(uint64_t **)(*(_QWORD *)(a5 + 8) + 16);
        v98 = *v97;
        v99 = (std::__shared_weak_count *)v97[1];
        LODWORD(v31) = 0;
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
          v102 = *(_QWORD *)(v98 + 8);
          do
            v103 = __ldaxr(v100);
          while (__stlxr(v103 - 1, v100));
          if (v103)
          {
            v104 = *(int **)(a5 + 8);
            if (v104)
            {
LABEL_66:
              v105 = *v104;
              LODWORD(v104) = v104[1];
LABEL_71:
              v107 = v95 * (float)(v105 - 1);
              v108 = (int)v107;
              v109 = v105 - 2;
              v110 = v107 - (float)(int)v107;
              if (v108 < 0)
                v110 = 0.0;
              v111 = v109 < v108;
              if (v109 >= v108)
                v112 = v108 & ~(v108 >> 31);
              else
                v112 = v105 - 2;
              if (v111)
                v110 = 1.0;
              v113 = v96 * (float)((int)v104 - 1);
              v114 = (int)v113;
              _S1 = v113 - truncf(v113);
              v116 = (_DWORD)v104 - 2;
              if (v114 < 0)
                _S1 = 0.0;
              if (v116 < v114)
                _S1 = 1.0;
              else
                v116 = v114 & ~(v114 >> 31);
              v117 = v105 - v116;
              v118 = (_DWORD *)(v102 + 4 * (v112 + (uint64_t)((v117 - 1) * v105)));
              v119 = (__int32 *)(v102 + 4 * (v112 + (uint64_t)((v117 - 2) * v105)));
              LODWORD(v91) = *v118;
              v64.i32[0] = v118[1];
              v64 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v64.f32)));
              v29.i32[0] = *v119;
              v30.i32[0] = v119[1];
              v29 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v29.f32)));
              v30 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v30.f32)));
              _Q2 = vsubq_f32(vmlaq_n_f32(vmulq_n_f32(v29, 1.0 - v110), v30, v110), vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v91))), 1.0 - v110), v64, v110));
              __asm { FMLA            S0, S1, V2.S[2] }
              v106 = _S0 * 0.0039216;
              v66 = v249;
              v71 = v233;
              v75 = a7;
              goto LABEL_42;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
            LODWORD(v31) = 0;
            v104 = *(int **)(a5 + 8);
            if (v104)
              goto LABEL_66;
          }
        }
        else
        {
          v102 = *(_QWORD *)(v98 + 8);
          v104 = *(int **)(a5 + 8);
          if (v104)
            goto LABEL_66;
        }
        v105 = 0;
        goto LABEL_71;
      }
    }
    else if (v59 <= v58)
    {
      if (v60 <= 1)
        v145 = 1;
      else
        v145 = v58 / v59;
      v146 = v66;
      do
      {
        v147 = *(float *)v146;
        v27.__sinval = *(double *)(v146 + 4);
        LODWORD(v27.__cosval) = *(_DWORD *)(v146 + 12);
        v239 = v27;
        LODWORD(v252[0]) = 0;
        v148 = *(_QWORD *)(a1 + 352);
        v149 = (float)(v69 + (float)(*(float *)(v146 + 16) * v67)) * v233;
        LODWORD(v62) = LODWORD(v32.__cosval);
        v150 = (float)(v70 + (float)(*(float *)(v146 + 20) * v67)) * *(float *)&v32.__cosval;
        v151 = *(_DWORD *)(v148 + 132);
        if (v151 == 16)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v148, (float *)v252, v149, v150, v62, v65, *(double *)v64.i64, *(double *)v29.i64, *(double *)v30.i64, v31);
        }
        else if (v151 == 8)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v148, (float *)v252, v149, v150, v62, v65, *(double *)v64.i64, *(double *)v29.i64, *(double *)v30.i64, v31);
        }
        else
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v152 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19F029000, v152, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
          }

        }
        *(float *)v146 = (float)(v147 - v68) + *(float *)v252;
        HIDWORD(v27.__cosval) = HIDWORD(v239.__cosval);
        *(_DWORD *)(v146 + 12) = LODWORD(v239.__cosval);
        *(double *)(v146 + 4) = v239.__sinval;
        v146 += 32;
        --v145;
      }
      while (v145);
      goto LABEL_88;
    }
    if (!v66)
    {
LABEL_103:
      v128 = a6;
      v8 = a1;
      if (!a6)
        goto LABEL_201;
      v129 = (unint64_t *)&a6->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      goto LABEL_199;
    }
LABEL_88:
    if (*(_QWORD *)&v247[24] != *(_QWORD *)&v247[16])
    {
      v125 = *(_QWORD *)&v247[8];
      if (*(_QWORD *)v247 && *(_BYTE *)(*(_QWORD *)&v247[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v247 + 64))();
      if ((_BYTE)v248 && !HIBYTE(v248))
      {
        v127 = *(_QWORD *)(*(_QWORD *)&v247[8] + 56);
        v126 = *(_QWORD *)(*(_QWORD *)&v247[8] + 64);
        if (v126 == v127)
          v127 = *(_QWORD *)(*(_QWORD *)&v247[8] + 80) - *(_QWORD *)(*(_QWORD *)&v247[8] + 72);
        if (*(_QWORD *)&v247[16] < v127)
          v127 = *(_QWORD *)&v247[16];
        if (v126 <= *(_QWORD *)&v247[24])
          v126 = *(_QWORD *)&v247[24];
        if (v126 == v127)
          v126 = v127 + *(_QWORD *)(*(_QWORD *)&v247[8] + 80) - *(_QWORD *)(*(_QWORD *)&v247[8] + 72);
        *(_QWORD *)(*(_QWORD *)&v247[8] + 56) = v127;
        *(_QWORD *)(v125 + 64) = v126;
      }
    }
    goto LABEL_103;
  }
  if (!v13)
    goto LABEL_201;
  v35 = *(_QWORD *)(a1 + 392);
  v36 = *(_QWORD *)(a1 + 400);
  if (a6)
  {
    v37 = (unint64_t *)&a6->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v9 = *a2;
  }
  v39 = HIDWORD(v35);
  v40 = a4[2];
  v41 = sqrt(*a4 * *a4 + a4[1] * a4[1]);
  v42 = atan2(v40, v41 * 0.996647189);
  v43 = __sincos_stret(v42);
  v44 = atan2(v40 + v43.__sinval * v43.__sinval * 42841.3115 * v43.__sinval, v41 + v43.__cosval * v43.__cosval * -42697.6727 * v43.__cosval);
  v50 = __sincos_stret(v44);
  v51 = *(_QWORD *)(a1 + 352);
  v52 = *(_DWORD **)(v51 + 16);
  v237 = a3;
  if (v52)
    v234 = (float)(*v52 - 1);
  else
    v234 = 4295000000.0;
  v131 = sqrt(v50.__sinval * v50.__sinval * -0.00669437999 + 1.0);
  v132 = v35 - *(_DWORD *)(v51 + 136);
  v133 = 1 << (v35 - *(_BYTE *)(v51 + 136));
  v134 = *(_DWORD *)(v51 + 144) << (v35 - *(_BYTE *)(v51 + 136));
  v135 = *(_DWORD *)(v51 + 140) << v132;
  v136 = *(_QWORD *)(v9 + 48) - *(_QWORD *)(v9 + 40);
  v137 = *(_QWORD *)(v9 + 8);
  v138 = v136 / v137;
  v249 = 0;
  *(_OWORD *)v247 = 0uLL;
  if ((*(_BYTE *)(v9 + 16) & 2) == 0)
  {
    v139 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v139 != -1)
    {
      v252[0] = &v250;
      *(_QWORD *)buf = v252;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v140 = -6378137.0 / v131;
  v141 = v36 - v134;
  v142.i64[0] = 0;
  v143 = v41 / v50.__cosval;
  if (v137 * (v136 / v137))
    v144 = *(_QWORD *)(v9 + 72);
  else
    v144 = 0;
  v142.i64[1] = v9;
  v153 = 1.0 / (float)v133;
  v154 = v143 + v140;
  v155 = v153 * (float)v141;
  v156 = v153 * (float)(v39 - v135);
  *(float32x4_t *)v247 = v142;
  *(_QWORD *)&v247[16] = 0;
  *(_QWORD *)&v247[24] = v137 * (v136 / v137);
  v249 = v144;
  v248 = 2;
  if (a5)
  {
    v157 = v234;
    if (v137 <= v136)
    {
      v158 = 0;
      v159 = v237;
      if (v138 <= 1)
        v160 = 1;
      else
        v160 = v138;
      v161 = a7;
      while (1)
      {
        v167 = v144 + 32 * v158;
        v46.__sinval = *(double *)(v167 + 4);
        LODWORD(v46.__cosval) = *(_DWORD *)(v167 + 12);
        v168 = *(float *)v167;
        LODWORD(v252[0]) = 0;
        v170 = *(float *)(v167 + 16);
        v171 = *(float *)(v167 + 20);
        v169 = (float *)(v167 + 16);
        v172 = *(_QWORD *)(a1 + 352);
        v173 = (float)(v155 + (float)(v170 * v153)) * v157;
        LODWORD(v140) = LODWORD(v50.__cosval);
        v174 = (float)(v156 + (float)(v171 * v153)) * *(float *)&v50.__cosval;
        v175 = *(_DWORD *)(v172 + 132);
        v240 = v46;
        if (v175 == 16)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v172, (float *)v252, v173, v174, v140, v46.__sinval, *(double *)v142.i64, *(double *)v47.i64, *(double *)v48.i64, v49);
        }
        else if (v175 == 8)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v172, (float *)v252, v173, v174, v140, v46.__sinval, *(double *)v142.i64, *(double *)v47.i64, *(double *)v48.i64, v49);
        }
        else
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v178 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19F029000, v178, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
          }

        }
        v179 = *(_DWORD *)(a5 + 16);
        if (v179 == 1 || v179 == 4)
          break;
        v192 = 0.0;
        if (v179 == 6)
          v192 = karo::media::Image::sample<float,unsigned char,float>(a5, *v169, v169[1], v176, v177, *(double *)v142.i64, v47.f32[0], v48.f32[0])* 0.0039216;
        LODWORD(v49) = 0;
LABEL_135:
        HIDWORD(v46.__cosval) = HIDWORD(v240.__cosval);
        HIDWORD(v140) = 1072672276;
        v162 = v192 * 0.99 + 0.01;
        v163 = 1.0 - v162;
        v164 = (float)(v168 * v162) + (float)((float)(1.0 - v162) * (float)(*(float *)v252 - v154));
        v165 = v163 * v161;
        if (v158 < v159)
          v165 = 0.0;
        v166 = v144 + 32 * v158;
        *(float *)v166 = v164 - v165;
        *(double *)(v166 + 4) = v240.__sinval;
        *(_DWORD *)(v166 + 12) = LODWORD(v240.__cosval);
        if (++v158 == v160)
          goto LABEL_181;
      }
      v181 = *v169;
      v182 = v169[1];
      v183 = *(uint64_t **)(*(_QWORD *)(a5 + 8) + 16);
      v184 = *v183;
      v185 = (std::__shared_weak_count *)v183[1];
      LODWORD(v49) = 0;
      if (v185)
      {
        v186 = (unint64_t *)&v185->__shared_owners_;
        do
          v187 = __ldxr(v186);
        while (__stxr(v187 + 1, v186));
        v188 = *(_QWORD *)(v184 + 8);
        do
          v189 = __ldaxr(v186);
        while (__stlxr(v189 - 1, v186));
        if (v189)
        {
          v190 = *(int **)(a5 + 8);
          if (v190)
          {
LABEL_159:
            v191 = *v190;
            LODWORD(v190) = v190[1];
LABEL_164:
            v193 = v181 * (float)(v191 - 1);
            v194 = (int)v193;
            v195 = v191 - 2;
            v196 = v193 - (float)(int)v193;
            if (v194 < 0)
              v196 = 0.0;
            v197 = v195 < v194;
            if (v195 >= v194)
              v198 = v194 & ~(v194 >> 31);
            else
              v198 = v191 - 2;
            if (v197)
              v196 = 1.0;
            v199 = v182 * (float)((int)v190 - 1);
            v200 = (int)v199;
            _S1 = v199 - truncf(v199);
            v202 = (_DWORD)v190 - 2;
            if (v200 < 0)
              _S1 = 0.0;
            if (v202 < v200)
              _S1 = 1.0;
            else
              v202 = v200 & ~(v200 >> 31);
            v203 = v191 - v202;
            v204 = (_DWORD *)(v188 + 4 * (v198 + (uint64_t)((v203 - 1) * v191)));
            v205 = (__int32 *)(v188 + 4 * (v198 + (uint64_t)((v203 - 2) * v191)));
            LODWORD(v177) = *v204;
            v142.i32[0] = v204[1];
            v142 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v142.f32)));
            v47.i32[0] = *v205;
            v48.i32[0] = v205[1];
            v47 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v47.f32)));
            v48 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v48.f32)));
            _Q2 = vsubq_f32(vmlaq_n_f32(vmulq_n_f32(v47, 1.0 - v196), v48, v196), vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v177))), 1.0 - v196), v142, v196));
            __asm { FMLA            S0, S1, V2.S[2] }
            v192 = _S0 * 0.0039216;
            v144 = v249;
            v157 = v234;
            v161 = a7;
            goto LABEL_135;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
          LODWORD(v49) = 0;
          v190 = *(int **)(a5 + 8);
          if (v190)
            goto LABEL_159;
        }
      }
      else
      {
        v188 = *(_QWORD *)(v184 + 8);
        v190 = *(int **)(a5 + 8);
        if (v190)
          goto LABEL_159;
      }
      v191 = 0;
      goto LABEL_164;
    }
  }
  else if (v137 <= v136)
  {
    if (v138 <= 1)
      v225 = 1;
    else
      v225 = v136 / v137;
    v226 = v144;
    do
    {
      v227 = *(float *)v226;
      v45.__sinval = *(double *)(v226 + 4);
      LODWORD(v45.__cosval) = *(_DWORD *)(v226 + 12);
      v241 = v45;
      LODWORD(v252[0]) = 0;
      v228 = *(_QWORD *)(a1 + 352);
      v229 = (float)(v155 + (float)(*(float *)(v226 + 16) * v153)) * v234;
      LODWORD(v140) = LODWORD(v50.__cosval);
      v230 = (float)(v156 + (float)(*(float *)(v226 + 20) * v153)) * *(float *)&v50.__cosval;
      v231 = *(_DWORD *)(v228 + 132);
      if (v231 == 16)
      {
        karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v228, (float *)v252, v229, v230, v140, v143, *(double *)v142.i64, *(double *)v47.i64, *(double *)v48.i64, v49);
      }
      else if (v231 == 8)
      {
        karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v228, (float *)v252, v229, v230, v140, v143, *(double *)v142.i64, *(double *)v47.i64, *(double *)v48.i64, v49);
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v232 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19F029000, v232, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
        }

      }
      *(float *)v226 = (float)(v227 - v154) + *(float *)v252;
      HIDWORD(v45.__cosval) = HIDWORD(v241.__cosval);
      *(_DWORD *)(v226 + 12) = LODWORD(v241.__cosval);
      *(double *)(v226 + 4) = v241.__sinval;
      v226 += 32;
      --v225;
    }
    while (v225);
    goto LABEL_181;
  }
  if (v144)
  {
LABEL_181:
    if (*(_QWORD *)&v247[24] != *(_QWORD *)&v247[16])
    {
      v208 = *(_QWORD *)&v247[8];
      if (*(_QWORD *)v247 && *(_BYTE *)(*(_QWORD *)&v247[8] + 17) != 2)
        (*(void (**)(void))(**(_QWORD **)v247 + 64))();
      if ((_BYTE)v248 && !HIBYTE(v248))
      {
        v210 = *(_QWORD *)(*(_QWORD *)&v247[8] + 56);
        v209 = *(_QWORD *)(*(_QWORD *)&v247[8] + 64);
        if (v209 == v210)
          v210 = *(_QWORD *)(*(_QWORD *)&v247[8] + 80) - *(_QWORD *)(*(_QWORD *)&v247[8] + 72);
        if (*(_QWORD *)&v247[16] < v210)
          v210 = *(_QWORD *)&v247[16];
        if (v209 <= *(_QWORD *)&v247[24])
          v209 = *(_QWORD *)&v247[24];
        if (v209 == v210)
          v209 = v210 + *(_QWORD *)(*(_QWORD *)&v247[8] + 80) - *(_QWORD *)(*(_QWORD *)&v247[8] + 72);
        *(_QWORD *)(*(_QWORD *)&v247[8] + 56) = v210;
        *(_QWORD *)(v208 + 64) = v209;
      }
    }
  }
  v128 = a6;
  v8 = a1;
  if (!a6)
    goto LABEL_201;
  v211 = (unint64_t *)&a6->__shared_owners_;
  do
    v130 = __ldaxr(v211);
  while (__stlxr(v130 - 1, v211));
LABEL_199:
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
LABEL_201:
  v212 = *(_QWORD *)(v8 + 352);
  v213 = *(_QWORD *)(v212 + 136);
  v214 = *(_QWORD *)(v212 + 144);
  v215 = *(_QWORD *)(v8 + 8);
  *(_DWORD *)v247 = 17;
  memset(&v247[4], 0, 28);
  v252[0] = altitude::TileKey::getGEOTileKey((unsigned int *)v247, v215);
  v252[1] = v216;
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v217 = (void *)objc_claimAutoreleasedReturnValue();
  v218 = objc_msgSend(v217, "versionForTileKey:", v252);

  v219 = (_QWORD **)(a1 + 368);
  *(_QWORD *)v247 = 17;
  *(_DWORD *)&v247[8] = 0;
  *(_DWORD *)&v247[12] = v218;
  *(_QWORD *)&v247[16] = v213;
  *(_QWORD *)&v247[24] = v214;
  result = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(a1 + 368, v252, (unsigned int *)v247);
  if (!*result)
  {
    v221 = result;
    v222 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v222 + 28) = *(_OWORD *)v247;
    *(_OWORD *)(v222 + 44) = *(_OWORD *)&v247[16];
    v223 = v252[0];
    *(_QWORD *)v222 = 0;
    *((_QWORD *)v222 + 1) = 0;
    *((_QWORD *)v222 + 2) = v223;
    *v221 = (uint64_t)v222;
    v224 = (_QWORD *)**v219;
    if (v224)
    {
      *v219 = v224;
      v222 = (char *)*v221;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), (uint64_t *)v222);
    ++*(_QWORD *)(a1 + 384);
  }
  return result;
}

