void sub_19F126B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v20 = a18;
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = a16;
  if (a16)
  {
    v24 = (unint64_t *)&a16->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v18 - 160));
  _Unwind_Resume(a1);
}

_QWORD *md::StandardLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14[0] = &off_1E42CBAC8;
  v14[1] = a2;
  v15 = v14;
  v12[0] = &off_1E42CBB10;
  v12[1] = a2;
  v13 = v12;
  v17 = v16;
  v16[0] = &off_1E42CBB10;
  v16[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEEclEv((uint64_t)v14);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  *a4 = *(_QWORD *)(a1 + 120);
  if (!v17)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v17 + 48))(v17);
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_19F126E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a13;
  if (a13 == &a10)
  {
    v26 = 4;
    v25 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *md::LightingLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *result;
  uint64_t v42;
  float64x2_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v52[0] = &off_1E42CAF88;
  v52[1] = a2;
  v53 = v52;
  v50[0] = &off_1E42CAFD0;
  v50[1] = a2;
  v51 = v50;
  v55 = v54;
  v54[0] = &off_1E42CAFD0;
  v54[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEEclEv((uint64_t)v52);
  v8 = v51;
  if (v51 == v50)
  {
    v9 = 4;
    v8 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v53;
  if (v53 == v52)
  {
    v11 = 4;
    v10 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = *a3;
  v13 = a3[1];
  v14 = (uint64_t *)a3[2];
  v15 = a3[3];
  v16 = *(std::__shared_weak_count **)(v13 + 24);
  v46 = *(_QWORD *)(v13 + 16);
  v47 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = *(std::__shared_weak_count **)(v13 + 8);
  v44 = *(_QWORD *)v13;
  v45 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (*(_BYTE *)(v13 + 82))
  {
    v22 = operator new(0x20uLL);
    *v22 = &off_1E42CB018;
    v22[1] = a1;
    v22[2] = &v46;
    v22[3] = &v44;
    v49 = v22;
    v24 = *(_BYTE **)(v13 + 48);
    v23 = *(_BYTE **)(v13 + 56);
    if (v24 != v23)
    {
      do
      {
        LOBYTE(v43.f64[0]) = *v24;
        if (!v49)
          goto LABEL_51;
        (*(void (**)(_BYTE *, float64x2_t *))(*(_QWORD *)v49 + 48))(v49, &v43);
        ++v24;
      }
      while (v24 != v23);
      v22 = v49;
      if (v49 == v48)
      {
        v25 = 4;
        v22 = v48;
        goto LABEL_25;
      }
      if (!v49)
        goto LABEL_26;
    }
    v25 = 5;
LABEL_25:
    (*(void (**)(void))(*v22 + 8 * v25))();
  }
LABEL_26:
  v43 = vmulq_f64(*(float64x2_t *)(v12 + 8), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  v26 = *(_QWORD *)(a2 + 32);
  v27 = *(std::__shared_weak_count **)(a2 + 40);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  md::LightingLogic::writeLogicContext(a1, v12, v15, v14, &v46, v43.f64, a4, v26);
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v32 = v45;
  if (v45)
  {
    v33 = (unint64_t *)&v45->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v47;
  if (v47)
  {
    v36 = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (!v55)
  {
LABEL_51:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v55 + 48))(v55);
  result = v55;
  if (v55 == v54)
  {
    v42 = 4;
    result = v54;
  }
  else
  {
    if (!v55)
      return result;
    v42 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v42))(result, v38, v39, v40);
}

void sub_19F127280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v6 - 120));
  _Unwind_Resume(a1);
}

void md::GeometryLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  __int128 v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  __int128 v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  float v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _WORD *v108;
  __int16 v109;
  __int16 v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  __int16 v118;
  __int16 v119;
  __int16 v120;
  __int16 v121;
  __int16 v122;
  __int16 v123;
  __int16 v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  __int16 v131;
  __int16 v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  unint64_t v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t shared_weak_owners;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  __int128 v176;
  std::__shared_weak_count_vtbl *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  float v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  _WORD *v186;
  __int16 v187;
  __int16 v188;
  __int16 v189;
  __int16 v190;
  __int16 v191;
  __int16 v192;
  __int16 v193;
  __int16 v194;
  __int16 v195;
  __int16 v196;
  __int16 v197;
  __int16 v198;
  __int16 v199;
  __int16 v200;
  __int16 v201;
  __int16 v202;
  __int16 v203;
  __int16 v204;
  __int16 v205;
  __int16 v206;
  __int16 v207;
  __int16 v208;
  __int16 v209;
  __int16 v210;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  unint64_t v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  __int128 v223;
  _QWORD *v224;
  int v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  _OWORD *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  __int128 v247;
  unint64_t v248;
  std::__shared_weak_count_vtbl *v249;
  __int128 v250;
  __int128 v251;
  __int16 v252;
  std::__shared_weak_count_vtbl *v253;
  uint64_t v254[2];
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;

  v6 = a4 + 160;
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::purge((_QWORD *)(a4 + 160));
  *(_QWORD *)(a4 + 224) = v6;
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::purge((_QWORD *)(a4 + 240));
  *(_QWORD *)(a4 + 304) = a4 + 240;
  if (!*(_QWORD *)(a4 + 128))
  {
    v8 = operator new(0xA8uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E42DE8F0;
    ggl::PolygonBase::MeshMesh::MeshMesh((ggl::PolygonBase::MeshMesh *)(v8 + 3), "/SharedPolygonUnitMesh");
    v9 = *(_QWORD *)v8[11];
    v10 = 6 * *(_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = *(_QWORD *)(v9 + 80) - v11;
    v13 = v10 - v12;
    if (v10 != v12)
    {
      if (v10 <= v12)
      {
        if (v10 < v12)
          *(_QWORD *)(v9 + 80) = v11 + v10;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v9 + 72, v13);
      }
      v86 = *(std::__shared_weak_count **)(v9 + 32);
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(p_shared_owners);
        while (__stlxr(v88 - 1, p_shared_owners));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      *(_QWORD *)(v9 + 120) = 0;
      *(_DWORD *)(v9 + 112) = 0;
      v89 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = v89;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = v89;
      v9 = *(_QWORD *)v8[11];
      v10 = 6 * *(_QWORD *)(v9 + 8);
    }
    v90 = *(_OWORD **)(v9 + 72);
    *v90 = xmmword_19FFB3910;
    v90[1] = xmmword_19FFB3920;
    v90[2] = xmmword_19FFB3930;
    v90[3] = xmmword_19FFB3910;
    v90[4] = xmmword_19FFB3930;
    v90[5] = xmmword_19FFB3940;
    if (*(_QWORD *)(v9 + 64) > v10)
      v10 = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = v10;
    v91 = *(std::__shared_weak_count **)(a4 + 136);
    *(_QWORD *)(a4 + 128) = v8 + 3;
    *(_QWORD *)(a4 + 136) = v8;
    if (v91)
    {
      v92 = (unint64_t *)&v91->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v91->__on_zero_shared)(v91, v13);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 144))
  {
    v14 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = &off_1E42DE8F0;
    ggl::PolygonBase::MeshMesh::MeshMesh((ggl::PolygonBase::MeshMesh *)(v14 + 24), "/SharedPolygonUnitMeshSubdiv");
    v15 = **((_QWORD **)v14 + 11);
    v16 = *(_QWORD *)(v15 + 8) << 8;
    v17 = *(_QWORD *)(v15 + 72);
    v18 = *(_QWORD *)(v15 + 80) - v17;
    if (v16 != v18)
    {
      if (v16 <= v18)
      {
        if (v16 < v18)
          *(_QWORD *)(v15 + 80) = v17 + v16;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v15 + 72, v16 - v18);
      }
      v94 = *(std::__shared_weak_count **)(v15 + 32);
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      *(_QWORD *)(v15 + 120) = 0;
      *(_DWORD *)(v15 + 112) = 0;
      v97 = *(_QWORD *)(v15 + 80) - *(_QWORD *)(v15 + 72);
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = v97;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 64) = v97;
      v15 = **((_QWORD **)v14 + 11);
      v16 = *(_QWORD *)(v15 + 8) << 8;
    }
    v250 = 0uLL;
    *(_QWORD *)&v98 = 0;
    *((_QWORD *)&v98 + 1) = v15;
    if (v16)
      v99 = *(std::__shared_weak_count_vtbl **)(v15 + 72);
    else
      v99 = 0;
    v100 = 0;
    v101 = 0;
    v250 = v98;
    *(_QWORD *)&v251 = 0;
    *((_QWORD *)&v251 + 1) = v16;
    v253 = v99;
    v252 = 1;
    do
    {
      v102 = (uint64_t)v99 + v100;
      *(_DWORD *)v102 = 0;
      v103 = (double)v101 * 0.0666666667;
      *(float *)(v102 + 4) = v103;
      *(_DWORD *)(v102 + 16) = 1032358025;
      *(_QWORD *)(v102 + 8) = 0x3F8000003F000000;
      *(float *)(v102 + 20) = v103;
      *(_DWORD *)(v102 + 32) = 1040746633;
      *(_QWORD *)(v102 + 24) = 0x3F8000003F000000;
      *(float *)(v102 + 36) = v103;
      *(_DWORD *)(v102 + 48) = 1045220557;
      *(_QWORD *)(v102 + 40) = 0x3F8000003F000000;
      *(float *)(v102 + 52) = v103;
      *(_DWORD *)(v102 + 64) = 1049135241;
      *(_QWORD *)(v102 + 56) = 0x3F8000003F000000;
      *(float *)(v102 + 68) = v103;
      *(_DWORD *)(v102 + 80) = 1051372203;
      *(_QWORD *)(v102 + 72) = 0x3F8000003F000000;
      *(float *)(v102 + 84) = v103;
      *(_DWORD *)(v102 + 96) = 1053609165;
      *(_QWORD *)(v102 + 88) = 0x3F8000003F000000;
      *(float *)(v102 + 100) = v103;
      *(_DWORD *)(v102 + 112) = 1055846127;
      *(_QWORD *)(v102 + 104) = 0x3F8000003F000000;
      *(float *)(v102 + 116) = v103;
      *(_DWORD *)(v102 + 128) = 1057523849;
      *(_QWORD *)(v102 + 120) = 0x3F8000003F000000;
      *(float *)(v102 + 132) = v103;
      *(_DWORD *)(v102 + 144) = 1058642330;
      *(_QWORD *)(v102 + 136) = 0x3F8000003F000000;
      *(float *)(v102 + 148) = v103;
      *(_DWORD *)(v102 + 160) = 1059760811;
      *(_QWORD *)(v102 + 152) = 0x3F8000003F000000;
      *(float *)(v102 + 164) = v103;
      *(_DWORD *)(v102 + 176) = 1060879292;
      *(_QWORD *)(v102 + 168) = 0x3F8000003F000000;
      *(float *)(v102 + 180) = v103;
      *(_DWORD *)(v102 + 192) = 1061997773;
      *(_QWORD *)(v102 + 184) = 0x3F8000003F000000;
      *(float *)(v102 + 196) = v103;
      *(_DWORD *)(v102 + 208) = 1063116254;
      *(_QWORD *)(v102 + 200) = 0x3F8000003F000000;
      *(float *)(v102 + 212) = v103;
      *(_DWORD *)(v102 + 224) = 1064234735;
      *(_QWORD *)(v102 + 216) = 0x3F8000003F000000;
      *(float *)(v102 + 228) = v103;
      *(_DWORD *)(v102 + 240) = 1065353216;
      *(_QWORD *)(v102 + 232) = 0x3F8000003F000000;
      *(float *)(v102 + 244) = v103;
      ++v101;
      v100 += 256;
      *(_QWORD *)(v102 + 248) = 0x3F8000003F000000;
    }
    while (v100 != 4096);
    v104 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v104->__shared_owners_ = 0;
    v105 = (unint64_t *)&v104->__shared_owners_;
    v104->__shared_weak_owners_ = 0;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    v106 = ggl::BufferData::BufferData((uint64_t)&v104[1], 2, 1, 0, 6, 1350);
    v107 = 0;
    LODWORD(v104[10].__vftable) = 0;
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v104[1].__shared_owners_ = 2;
    v104[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v104[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
    v108 = (_WORD *)&v104[4].__vftable[2].~__shared_weak_count_0 + 1;
    do
    {
      v109 = 16 * v107 + 16;
      *(v108 - 45) = v109;
      v110 = (16 * v107) | 1;
      *(v108 - 44) = v110;
      v111 = 16 * v107 + 17;
      *(v108 - 43) = v111;
      *(v108 - 42) = v109;
      *(v108 - 41) = 16 * v107;
      *(v108 - 40) = v110;
      v112 = 16 * v107 + 18;
      v113 = (16 * v107) | 2;
      *(v108 - 39) = v111;
      *(v108 - 38) = v113;
      *(v108 - 37) = v112;
      *(v108 - 36) = v111;
      *(v108 - 35) = v110;
      *(v108 - 34) = v113;
      v114 = 16 * v107 + 19;
      v115 = (16 * v107) | 3;
      *(v108 - 33) = v112;
      *(v108 - 32) = v115;
      *(v108 - 31) = v114;
      *(v108 - 30) = v112;
      *(v108 - 29) = v113;
      *(v108 - 28) = v115;
      v116 = 16 * v107 + 20;
      v117 = (16 * v107) | 4;
      *(v108 - 27) = v114;
      *(v108 - 26) = v117;
      *(v108 - 25) = v116;
      *(v108 - 24) = v114;
      *(v108 - 23) = v115;
      *(v108 - 22) = v117;
      v118 = 16 * v107 + 21;
      v119 = (16 * v107) | 5;
      *(v108 - 21) = v116;
      *(v108 - 20) = v119;
      *(v108 - 19) = v118;
      *(v108 - 18) = v116;
      *(v108 - 17) = v117;
      *(v108 - 16) = v119;
      v120 = 16 * v107 + 22;
      v121 = (16 * v107) | 6;
      *(v108 - 15) = v118;
      *(v108 - 14) = v121;
      *(v108 - 13) = v120;
      *(v108 - 12) = v118;
      *(v108 - 11) = v119;
      *(v108 - 10) = v121;
      v122 = 16 * v107 + 23;
      v123 = (16 * v107) | 7;
      *(v108 - 9) = v120;
      *(v108 - 8) = v123;
      *(v108 - 7) = v122;
      *(v108 - 6) = v120;
      *(v108 - 5) = v121;
      *(v108 - 4) = v123;
      v124 = 16 * v107 + 24;
      v125 = (16 * v107) | 8;
      *(v108 - 3) = v122;
      *(v108 - 2) = v125;
      *(v108 - 1) = v124;
      *v108 = v122;
      v108[1] = v123;
      v108[2] = v125;
      v126 = 16 * v107 + 25;
      v127 = (16 * v107) | 9;
      v108[3] = v124;
      v108[4] = v127;
      v108[5] = v126;
      v108[6] = v124;
      v108[7] = v125;
      v108[8] = v127;
      v128 = 16 * v107 + 26;
      v129 = (16 * v107) | 0xA;
      v108[9] = v126;
      v108[10] = v129;
      v108[11] = v128;
      v108[12] = v126;
      v108[13] = v127;
      v108[14] = v129;
      v130 = 16 * v107 + 27;
      v131 = (16 * v107) | 0xB;
      v108[15] = v128;
      v108[16] = v131;
      v108[17] = v130;
      v108[18] = v128;
      v108[19] = v129;
      v108[20] = v131;
      v132 = 16 * v107 + 28;
      v133 = (16 * v107) | 0xC;
      v108[21] = v130;
      v108[22] = v133;
      v108[23] = v132;
      v108[24] = v130;
      v108[25] = v131;
      v108[26] = v133;
      v134 = 16 * v107 + 29;
      v108[27] = v132;
      v108[28] = (16 * v107) | 0xD;
      v108[29] = v134;
      v108[30] = v132;
      v108[31] = v133;
      v108[32] = (16 * v107) | 0xD;
      v135 = (16 * v107) | 0xE;
      v108[33] = v134;
      v108[34] = v135;
      v108[35] = 16 * v107 + 30;
      v108[36] = v134;
      v108[37] = (16 * v107) | 0xD;
      v108[38] = v135;
      v136 = (16 * v107) | 0xF;
      v108[39] = 16 * v107 + 30;
      v108[40] = v136;
      v108[41] = 16 * v107 + 31;
      v108[42] = 16 * v107++ + 30;
      v108[43] = v135;
      v108[44] = v136;
      v108 += 90;
    }
    while (v107 != 15);
    do
      v137 = __ldxr(v105);
    while (__stxr(v137 + 1, v105));
    do
      v138 = __ldxr(v105);
    while (__stxr(v138 + 1, v105));
    v139 = (std::__shared_weak_count *)*((_QWORD *)v14 + 16);
    *((_QWORD *)v14 + 15) = v106;
    *((_QWORD *)v14 + 16) = v104;
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    do
      v142 = __ldaxr(v105);
    while (__stlxr(v142 - 1, v105));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
    shared_weak_owners = v104[3].__shared_weak_owners_;
    if (shared_weak_owners <= 0xA8C)
      shared_weak_owners = 2700;
    v104[3].__shared_owners_ = 0;
    v104[3].__shared_weak_owners_ = shared_weak_owners;
    do
      v144 = __ldaxr(v105);
    while (__stlxr(v144 - 1, v105));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
    if (v253 && *((_QWORD *)&v251 + 1) != (_QWORD)v251)
    {
      v145 = *((_QWORD *)&v250 + 1);
      if ((_QWORD)v250 && *(_BYTE *)(*((_QWORD *)&v250 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v250 + 64))();
      if ((_BYTE)v252 && !HIBYTE(v252))
      {
        v147 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 56);
        v146 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 64);
        if (v146 == v147)
          v147 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v250 + 1) + 72);
        if ((unint64_t)v251 < v147)
          v147 = v251;
        if (v146 <= *((_QWORD *)&v251 + 1))
          v146 = *((_QWORD *)&v251 + 1);
        if (v146 == v147)
          v146 = v147 + *(_QWORD *)(*((_QWORD *)&v250 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v250 + 1) + 72);
        *(_QWORD *)(*((_QWORD *)&v250 + 1) + 56) = v147;
        *(_QWORD *)(v145 + 64) = v146;
      }
    }
    v148 = *(std::__shared_weak_count **)(a4 + 152);
    *(_QWORD *)(a4 + 144) = v14 + 24;
    *(_QWORD *)(a4 + 152) = v14;
    if (v148)
    {
      v149 = (unint64_t *)&v148->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
  }
  if (!*(_QWORD *)a4)
  {
    v19 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v19->__shared_owners_ = 0;
    v20 = (unint64_t *)&v19->__shared_owners_;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    ggl::BufferData::BufferData((uint64_t)&v19[1], 2, 1, 0, 6, 6);
    LODWORD(v19[10].__vftable) = 0;
    v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v19[1].__shared_owners_ = 2;
    v19[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v19[9].__shared_weak_owners_ = (uint64_t)"circle index data";
    v250 = 0uLL;
    *(_QWORD *)&v21 = 0;
    *((_QWORD *)&v21 + 1) = v19 + 1;
    v22 = v19[4].__vftable;
    v250 = v21;
    v251 = xmmword_19FFB3400;
    v253 = v22;
    v252 = 1;
    v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x200010000;
    LODWORD(v22->~__shared_weak_count_0) = 196610;
    v23 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v23->__shared_owners_ = 0;
    v24 = (unint64_t *)&v23->__shared_owners_;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF840;
    ggl::BufferData::BufferData((uint64_t)&v23[1], 8, 0, 0, 6, 4);
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B74E0;
    v23[9].__shared_weak_owners_ = (uint64_t)"circle vertex data";
    v23[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
    v23[9].__shared_owners_ = (uint64_t)&unk_1E42B7500;
    *(_QWORD *)&v25 = 0;
    *((_QWORD *)&v25 + 1) = v23 + 1;
    v247 = v25;
    v248 = 4 * v23[1].__shared_owners_;
    v249 = v23[4].__vftable;
    *(_OWORD *)&v249->~__shared_weak_count = xmmword_19FFB3580;
    *(_OWORD *)&v249->__on_zero_shared = xmmword_19FFB3950;
    v26 = operator new(0xA8uLL);
    v26[1] = 0;
    v26[2] = 0;
    *v26 = &off_1E42DE5A8;
    v255 = v23 + 1;
    v256 = v23;
    do
      v27 = __ldxr(v24);
    while (__stxr(v27 + 1, v24));
    v254[0] = (uint64_t)&v19[1];
    v254[1] = (uint64_t)v19;
    do
      v28 = __ldxr(v20);
    while (__stxr(v28 + 1, v20));
    ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)(v26 + 3), (uint64_t)"CircleUnitQuad", (uint64_t *)&v255, v254);
    do
      v29 = __ldaxr(v20);
    while (__stlxr(v29 - 1, v20));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v30 = v256;
    if (v256)
    {
      v31 = (unint64_t *)&v256->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (v249 && v248)
    {
      if ((_QWORD)v247 && *(_BYTE *)(*((_QWORD *)&v247 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v247 + 64))();
      v34 = *(_QWORD *)(*((_QWORD *)&v247 + 1) + 56);
      v33 = *(_QWORD *)(*((_QWORD *)&v247 + 1) + 64);
      if (v33 == v34)
        v34 = *(_QWORD *)(*((_QWORD *)&v247 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v247 + 1) + 72);
      if (v34)
        v34 = 0;
      if (v33 <= v248)
        v33 = v248;
      if (v33 == v34)
        v33 = v34 + *(_QWORD *)(*((_QWORD *)&v247 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v247 + 1) + 72);
      *(_QWORD *)(*((_QWORD *)&v247 + 1) + 56) = v34;
      *(_QWORD *)(*((_QWORD *)&v247 + 1) + 64) = v33;
    }
    do
      v35 = __ldaxr(v24);
    while (__stlxr(v35 - 1, v24));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    if (v253 && *((_QWORD *)&v251 + 1) != (_QWORD)v251)
    {
      v36 = *((_QWORD *)&v250 + 1);
      if ((_QWORD)v250 && *(_BYTE *)(*((_QWORD *)&v250 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v250 + 64))();
      if ((_BYTE)v252 && !HIBYTE(v252))
      {
        v38 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 56);
        v37 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 64);
        if (v37 == v38)
          v38 = *(_QWORD *)(*((_QWORD *)&v250 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v250 + 1) + 72);
        if ((unint64_t)v251 < v38)
          v38 = v251;
        if (v37 <= *((_QWORD *)&v251 + 1))
          v37 = *((_QWORD *)&v251 + 1);
        if (v37 == v38)
          v37 = v38 + *(_QWORD *)(*((_QWORD *)&v250 + 1) + 80) - *(_QWORD *)(*((_QWORD *)&v250 + 1) + 72);
        *(_QWORD *)(*((_QWORD *)&v250 + 1) + 56) = v38;
        *(_QWORD *)(v36 + 64) = v37;
      }
    }
    do
      v39 = __ldaxr(v20);
    while (__stlxr(v39 - 1, v20));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v40 = *(std::__shared_weak_count **)(a4 + 8);
    *(_QWORD *)a4 = v26 + 3;
    *(_QWORD *)(a4 + 8) = v26;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 16))
  {
    v43 = operator new(0xA8uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E42DE538;
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v43 + 3), "/SharedUnitMesh");
    v44 = *(_QWORD *)v43[11];
    v45 = 6 * *(_QWORD *)(v44 + 8);
    v46 = *(_QWORD *)(v44 + 72);
    v47 = *(_QWORD *)(v44 + 80) - v46;
    v48 = v45 - v47;
    if (v45 != v47)
    {
      if (v45 <= v47)
      {
        if (v45 < v47)
          *(_QWORD *)(v44 + 80) = v46 + v45;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v44 + 72, v48);
      }
      v151 = *(std::__shared_weak_count **)(v44 + 32);
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0;
      if (v151)
      {
        v152 = (unint64_t *)&v151->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      *(_QWORD *)(v44 + 120) = 0;
      *(_DWORD *)(v44 + 112) = 0;
      v154 = *(_QWORD *)(v44 + 80) - *(_QWORD *)(v44 + 72);
      *(_QWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = v154;
      *(_QWORD *)(v44 + 56) = 0;
      *(_QWORD *)(v44 + 64) = v154;
      v44 = *(_QWORD *)v43[11];
      v45 = 6 * *(_QWORD *)(v44 + 8);
    }
    if (v45)
      v155 = *(_QWORD *)(v44 + 72);
    else
      v155 = 0;
    *(_QWORD *)v155 = 0;
    *(_QWORD *)(v155 + 8) = 0;
    __asm { FMOV            V1.4S, #1.0 }
    *(_OWORD *)(v155 + 16) = xmmword_19FFB3960;
    *(_OWORD *)(v155 + 32) = _Q1;
    *(_QWORD *)(v155 + 48) = 0;
    *(_QWORD *)(v155 + 56) = 0;
    *(_OWORD *)(v155 + 64) = _Q1;
    *(_OWORD *)(v155 + 80) = xmmword_19FFB3970;
    if (v155 && v45)
    {
      if (*(_QWORD *)(v44 + 64) > v45)
        v45 = *(_QWORD *)(v44 + 64);
      *(_QWORD *)(v44 + 56) = 0;
      *(_QWORD *)(v44 + 64) = v45;
    }
    v161 = *(std::__shared_weak_count **)(a4 + 24);
    *(_QWORD *)(a4 + 16) = v43 + 3;
    *(_QWORD *)(a4 + 24) = v43;
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v161->__on_zero_shared)(v161, v48);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 32))
  {
    v49 = v250;
    v250 = 0uLL;
    v50 = *(std::__shared_weak_count **)(a4 + 40);
    *(_OWORD *)(a4 + 32) = v49;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
    if (*((_QWORD *)&v250 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 48))
  {
    v56 = v250;
    v250 = 0uLL;
    v57 = *(std::__shared_weak_count **)(a4 + 56);
    *(_OWORD *)(a4 + 48) = v56;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
    if (*((_QWORD *)&v250 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 96))
  {
    v63 = operator new(0xA8uLL);
    v63[1] = 0;
    v63[2] = 0;
    *v63 = &off_1E42DE5E0;
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v63 + 3), "/SharedUnitMesh");
    v64 = *(_QWORD *)v63[11];
    v65 = 6 * *(_QWORD *)(v64 + 8);
    v66 = *(_QWORD *)(v64 + 72);
    v67 = *(_QWORD *)(v64 + 80) - v66;
    v68 = v65 - v67;
    if (v65 != v67)
    {
      if (v65 <= v67)
      {
        if (v65 < v67)
          *(_QWORD *)(v64 + 80) = v66 + v65;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v64 + 72, v68);
      }
      v164 = *(std::__shared_weak_count **)(v64 + 32);
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0;
      if (v164)
      {
        v165 = (unint64_t *)&v164->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      *(_QWORD *)(v64 + 120) = 0;
      *(_DWORD *)(v64 + 112) = 0;
      v167 = *(_QWORD *)(v64 + 80) - *(_QWORD *)(v64 + 72);
      *(_QWORD *)(v64 + 40) = 0;
      *(_QWORD *)(v64 + 48) = v167;
      *(_QWORD *)(v64 + 56) = 0;
      *(_QWORD *)(v64 + 64) = v167;
      v64 = *(_QWORD *)v63[11];
      v65 = 6 * *(_QWORD *)(v64 + 8);
    }
    v168 = *(_OWORD **)(v64 + 72);
    *v168 = xmmword_19FFB34C0;
    v168[1] = xmmword_19FFB2D90;
    v168[2] = xmmword_19FFB3950;
    v168[3] = xmmword_19FFB34C0;
    v168[4] = xmmword_19FFB3950;
    v168[5] = xmmword_19FFB3970;
    if (*(_QWORD *)(v64 + 64) > v65)
      v65 = *(_QWORD *)(v64 + 64);
    *(_QWORD *)(v64 + 56) = 0;
    *(_QWORD *)(v64 + 64) = v65;
    v169 = *(std::__shared_weak_count **)(a4 + 104);
    *(_QWORD *)(a4 + 96) = v63 + 3;
    *(_QWORD *)(a4 + 104) = v63;
    if (v169)
    {
      v170 = (unint64_t *)&v169->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v169->__on_zero_shared)(v169, v68);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 112))
  {
    v69 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v69 + 1) = 0;
    *((_QWORD *)v69 + 2) = 0;
    *(_QWORD *)v69 = &off_1E42DE5E0;
    ggl::CommonMesh::Pos4Mesh::Pos4Mesh((ggl::CommonMesh::Pos4Mesh *)(v69 + 24), "/SharedUnitMeshSubdiv");
    v70 = **((_QWORD **)v69 + 11);
    v71 = *(_QWORD *)(v70 + 8) << 8;
    v72 = *(_QWORD *)(v70 + 72);
    v73 = *(_QWORD *)(v70 + 80) - v72;
    if (v71 != v73)
    {
      if (v71 <= v73)
      {
        if (v71 < v73)
          *(_QWORD *)(v70 + 80) = v72 + v71;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v70 + 72, v71 - v73);
      }
      v172 = *(std::__shared_weak_count **)(v70 + 32);
      *(_QWORD *)(v70 + 24) = 0;
      *(_QWORD *)(v70 + 32) = 0;
      if (v172)
      {
        v173 = (unint64_t *)&v172->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      *(_QWORD *)(v70 + 120) = 0;
      *(_DWORD *)(v70 + 112) = 0;
      v175 = *(_QWORD *)(v70 + 80) - *(_QWORD *)(v70 + 72);
      *(_QWORD *)(v70 + 40) = 0;
      *(_QWORD *)(v70 + 48) = v175;
      *(_QWORD *)(v70 + 56) = 0;
      *(_QWORD *)(v70 + 64) = v175;
      v70 = **((_QWORD **)v69 + 11);
      v71 = *(_QWORD *)(v70 + 8) << 8;
    }
    v250 = 0uLL;
    *(_QWORD *)&v176 = 0;
    *((_QWORD *)&v176 + 1) = v70;
    if (v71)
      v177 = *(std::__shared_weak_count_vtbl **)(v70 + 72);
    else
      v177 = 0;
    v178 = 0;
    v179 = 0;
    v250 = v176;
    *(_QWORD *)&v251 = 0;
    *((_QWORD *)&v251 + 1) = v71;
    v253 = v177;
    v252 = 1;
    do
    {
      v180 = (uint64_t)v177 + v178;
      *(_DWORD *)v180 = 0;
      v181 = (double)v179 * 0.0666666667;
      *(float *)(v180 + 4) = v181;
      *(_DWORD *)(v180 + 16) = 1032358025;
      *(_QWORD *)(v180 + 8) = 0x3F80000000000000;
      *(float *)(v180 + 20) = v181;
      *(_DWORD *)(v180 + 32) = 1040746633;
      *(_QWORD *)(v180 + 24) = 0x3F80000000000000;
      *(float *)(v180 + 36) = v181;
      *(_DWORD *)(v180 + 48) = 1045220557;
      *(_QWORD *)(v180 + 40) = 0x3F80000000000000;
      *(float *)(v180 + 52) = v181;
      *(_DWORD *)(v180 + 64) = 1049135241;
      *(_QWORD *)(v180 + 56) = 0x3F80000000000000;
      *(float *)(v180 + 68) = v181;
      *(_DWORD *)(v180 + 80) = 1051372203;
      *(_QWORD *)(v180 + 72) = 0x3F80000000000000;
      *(float *)(v180 + 84) = v181;
      *(_DWORD *)(v180 + 96) = 1053609165;
      *(_QWORD *)(v180 + 88) = 0x3F80000000000000;
      *(float *)(v180 + 100) = v181;
      *(_DWORD *)(v180 + 112) = 1055846127;
      *(_QWORD *)(v180 + 104) = 0x3F80000000000000;
      *(float *)(v180 + 116) = v181;
      *(_DWORD *)(v180 + 128) = 1057523849;
      *(_QWORD *)(v180 + 120) = 0x3F80000000000000;
      *(float *)(v180 + 132) = v181;
      *(_DWORD *)(v180 + 144) = 1058642330;
      *(_QWORD *)(v180 + 136) = 0x3F80000000000000;
      *(float *)(v180 + 148) = v181;
      *(_DWORD *)(v180 + 160) = 1059760811;
      *(_QWORD *)(v180 + 152) = 0x3F80000000000000;
      *(float *)(v180 + 164) = v181;
      *(_DWORD *)(v180 + 176) = 1060879292;
      *(_QWORD *)(v180 + 168) = 0x3F80000000000000;
      *(float *)(v180 + 180) = v181;
      *(_DWORD *)(v180 + 192) = 1061997773;
      *(_QWORD *)(v180 + 184) = 0x3F80000000000000;
      *(float *)(v180 + 196) = v181;
      *(_DWORD *)(v180 + 208) = 1063116254;
      *(_QWORD *)(v180 + 200) = 0x3F80000000000000;
      *(float *)(v180 + 212) = v181;
      *(_DWORD *)(v180 + 224) = 1064234735;
      *(_QWORD *)(v180 + 216) = 0x3F80000000000000;
      *(float *)(v180 + 228) = v181;
      *(_DWORD *)(v180 + 240) = 1065353216;
      *(_QWORD *)(v180 + 232) = 0x3F80000000000000;
      *(float *)(v180 + 244) = v181;
      ++v179;
      v178 += 256;
      *(_QWORD *)(v180 + 248) = 0x3F80000000000000;
    }
    while (v178 != 4096);
    v182 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v182->__shared_owners_ = 0;
    v183 = (unint64_t *)&v182->__shared_owners_;
    v182->__shared_weak_owners_ = 0;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
    v184 = ggl::BufferData::BufferData((uint64_t)&v182[1], 2, 1, 0, 6, 1350);
    v185 = 0;
    LODWORD(v182[10].__vftable) = 0;
    v182[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
    v182[1].__shared_owners_ = 2;
    v182[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
    v182[9].__shared_weak_owners_ = (uint64_t)"/GridIndexData";
    v186 = (_WORD *)&v182[4].__vftable[2].~__shared_weak_count_0 + 1;
    do
    {
      v187 = 16 * v185 + 16;
      *(v186 - 45) = v187;
      v188 = 16 * v185 + 17;
      *(v186 - 44) = v188;
      v189 = (16 * v185) | 1;
      *(v186 - 43) = v189;
      *(v186 - 42) = v187;
      *(v186 - 41) = v189;
      *(v186 - 40) = 16 * v185;
      v190 = 16 * v185 + 18;
      v191 = (16 * v185) | 2;
      *(v186 - 39) = v188;
      *(v186 - 38) = v190;
      *(v186 - 37) = v191;
      *(v186 - 36) = v188;
      *(v186 - 35) = v191;
      *(v186 - 34) = v189;
      v192 = 16 * v185 + 19;
      v193 = (16 * v185) | 3;
      *(v186 - 33) = v190;
      *(v186 - 32) = v192;
      *(v186 - 31) = v193;
      *(v186 - 30) = v190;
      *(v186 - 29) = v193;
      *(v186 - 28) = v191;
      v194 = 16 * v185 + 20;
      v195 = (16 * v185) | 4;
      *(v186 - 27) = v192;
      *(v186 - 26) = v194;
      *(v186 - 25) = v195;
      *(v186 - 24) = v192;
      *(v186 - 23) = v195;
      *(v186 - 22) = v193;
      v196 = 16 * v185 + 21;
      v197 = (16 * v185) | 5;
      *(v186 - 21) = v194;
      *(v186 - 20) = v196;
      *(v186 - 19) = v197;
      *(v186 - 18) = v194;
      *(v186 - 17) = v197;
      *(v186 - 16) = v195;
      v198 = 16 * v185 + 22;
      v199 = (16 * v185) | 6;
      *(v186 - 15) = v196;
      *(v186 - 14) = v198;
      *(v186 - 13) = v199;
      *(v186 - 12) = v196;
      *(v186 - 11) = v199;
      *(v186 - 10) = v197;
      v200 = 16 * v185 + 23;
      v201 = (16 * v185) | 7;
      *(v186 - 9) = v198;
      *(v186 - 8) = v200;
      *(v186 - 7) = v201;
      *(v186 - 6) = v198;
      *(v186 - 5) = v201;
      *(v186 - 4) = v199;
      v202 = 16 * v185 + 24;
      v203 = (16 * v185) | 8;
      *(v186 - 3) = v200;
      *(v186 - 2) = v202;
      *(v186 - 1) = v203;
      *v186 = v200;
      v186[1] = v203;
      v186[2] = v201;
      v204 = 16 * v185 + 25;
      v205 = (16 * v185) | 9;
      v186[3] = v202;
      v186[4] = v204;
      v186[5] = v205;
      v186[6] = v202;
      v186[7] = v205;
      v186[8] = v203;
      v206 = 16 * v185 + 26;
      v207 = (16 * v185) | 0xA;
      v186[9] = v204;
      v186[10] = v206;
      v186[11] = v207;
      v186[12] = v204;
      v186[13] = v207;
      v186[14] = v205;
      v208 = 16 * v185 + 27;
      v209 = (16 * v185) | 0xB;
      v186[15] = v206;
      v186[16] = v208;
      v186[17] = v209;
      v186[18] = v206;
      v186[19] = v209;
      v186[20] = v207;
      v210 = 16 * v185 + 28;
      v211 = (16 * v185) | 0xC;
      v186[21] = v208;
      v186[22] = v210;
      v186[23] = v211;
      v186[24] = v208;
      v186[25] = v211;
      v186[26] = v209;
      v212 = 16 * v185 + 29;
      v186[27] = v210;
      v186[28] = v212;
      v186[29] = (16 * v185) | 0xD;
      v186[30] = v210;
      v186[31] = (16 * v185) | 0xD;
      v186[32] = v211;
      v213 = (16 * v185) | 0xE;
      v186[33] = v212;
      v186[34] = 16 * v185 + 30;
      v186[35] = v213;
      v186[36] = v212;
      v186[37] = v213;
      v186[38] = (16 * v185) | 0xD;
      v214 = (16 * v185) | 0xF;
      v186[39] = 16 * v185 + 30;
      v186[40] = 16 * v185 + 31;
      v186[41] = v214;
      v186[42] = 16 * v185++ + 30;
      v186[43] = v214;
      v186[44] = v213;
      v186 += 90;
    }
    while (v185 != 15);
    do
      v215 = __ldxr(v183);
    while (__stxr(v215 + 1, v183));
    do
      v216 = __ldxr(v183);
    while (__stxr(v216 + 1, v183));
    v217 = (std::__shared_weak_count *)*((_QWORD *)v69 + 16);
    *((_QWORD *)v69 + 15) = v184;
    *((_QWORD *)v69 + 16) = v182;
    if (v217)
    {
      v218 = (unint64_t *)&v217->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    do
      v220 = __ldaxr(v183);
    while (__stlxr(v220 - 1, v183));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
    v221 = v182[3].__shared_weak_owners_;
    if (v221 <= 0xA8C)
      v221 = 2700;
    v182[3].__shared_owners_ = 0;
    v182[3].__shared_weak_owners_ = v221;
    do
      v222 = __ldaxr(v183);
    while (__stlxr(v222 - 1, v183));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
    if (v253)
    {
      v223 = v251;
      if (*((_QWORD *)&v251 + 1) != (_QWORD)v251)
      {
        v224 = (_QWORD *)*((_QWORD *)&v250 + 1);
        v225 = v252;
        v226 = HIBYTE(v252);
        if ((_QWORD)v250 && *(_BYTE *)(*((_QWORD *)&v250 + 1) + 17) != 2)
          (*(void (**)(void))(*(_QWORD *)v250 + 64))();
        if (v225 && !v226)
        {
          v228 = v224[7];
          v227 = v224[8];
          if (v227 == v228)
            v228 = v224[10] - v224[9];
          if ((unint64_t)v223 < v228)
            v228 = v223;
          if (v227 <= *((_QWORD *)&v223 + 1))
            v227 = *((_QWORD *)&v223 + 1);
          if (v227 == v228)
            v227 = v228 + v224[10] - v224[9];
          v224[7] = v228;
          v224[8] = v227;
        }
      }
    }
    v229 = *(std::__shared_weak_count **)(a4 + 120);
    *(_QWORD *)(a4 + 112) = v69 + 24;
    *(_QWORD *)(a4 + 120) = v69;
    if (v229)
    {
      v230 = (unint64_t *)&v229->__shared_owners_;
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
        std::__shared_weak_count::__release_weak(v229);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 64))
  {
    v74 = operator new(0xA8uLL);
    v74[1] = 0;
    v74[2] = 0;
    *v74 = &off_1E42DE538;
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v74 + 3), "/SharedFullScreenQuad");
    v75 = *(_QWORD *)v74[11];
    v76 = 6 * *(_QWORD *)(v75 + 8);
    v77 = *(_QWORD *)(v75 + 72);
    v78 = *(_QWORD *)(v75 + 80) - v77;
    v79 = v76 - v78;
    if (v76 != v78)
    {
      if (v76 <= v78)
      {
        if (v76 < v78)
          *(_QWORD *)(v75 + 80) = v77 + v76;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v75 + 72, v79);
      }
      v232 = *(std::__shared_weak_count **)(v75 + 32);
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0;
      if (v232)
      {
        v233 = (unint64_t *)&v232->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      *(_QWORD *)(v75 + 120) = 0;
      *(_DWORD *)(v75 + 112) = 0;
      v235 = *(_QWORD *)(v75 + 80) - *(_QWORD *)(v75 + 72);
      *(_QWORD *)(v75 + 40) = 0;
      *(_QWORD *)(v75 + 48) = v235;
      *(_QWORD *)(v75 + 56) = 0;
      *(_QWORD *)(v75 + 64) = v235;
      v75 = *(_QWORD *)v74[11];
      v76 = 6 * *(_QWORD *)(v75 + 8);
    }
    v236 = *(_OWORD **)(v75 + 72);
    *v236 = xmmword_19FFB3990;
    v236[1] = xmmword_19FFB2F80;
    v236[2] = xmmword_19FFB39A0;
    v236[3] = xmmword_19FFB39A0;
    v236[4] = xmmword_19FFB2F80;
    v236[5] = xmmword_19FFB39B0;
    if (*(_QWORD *)(v75 + 64) > v76)
      v76 = *(_QWORD *)(v75 + 64);
    *(_QWORD *)(v75 + 56) = 0;
    *(_QWORD *)(v75 + 64) = v76;
    v237 = *(std::__shared_weak_count **)(a4 + 72);
    *(_QWORD *)(a4 + 64) = v74 + 3;
    *(_QWORD *)(a4 + 72) = v74;
    if (v237)
    {
      v238 = (unint64_t *)&v237->__shared_owners_;
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v237->__on_zero_shared)(v237, v79);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
  }
  if (!*(_QWORD *)(a4 + 80))
  {
    v80 = operator new(0xA8uLL);
    v80[1] = 0;
    v80[2] = 0;
    *v80 = &off_1E42DE538;
    ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v80 + 3), "/SharedSinglePointMesh");
    v81 = *(_QWORD *)v80[11];
    v82 = *(_QWORD *)(v81 + 8);
    v83 = *(_QWORD *)(v81 + 72);
    v84 = *(_QWORD *)(v81 + 80) - v83;
    v85 = v82 - v84;
    if (v82 != v84)
    {
      if (v82 <= v84)
      {
        if (v82 < v84)
          *(_QWORD *)(v81 + 80) = v83 + v82;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v81 + 72, v85);
      }
      v240 = *(std::__shared_weak_count **)(v81 + 32);
      *(_QWORD *)(v81 + 24) = 0;
      *(_QWORD *)(v81 + 32) = 0;
      if (v240)
      {
        v241 = (unint64_t *)&v240->__shared_owners_;
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      *(_QWORD *)(v81 + 120) = 0;
      *(_DWORD *)(v81 + 112) = 0;
      v243 = *(_QWORD *)(v81 + 80) - *(_QWORD *)(v81 + 72);
      *(_QWORD *)(v81 + 40) = 0;
      *(_QWORD *)(v81 + 48) = v243;
      *(_QWORD *)(v81 + 56) = 0;
      *(_QWORD *)(v81 + 64) = v243;
      v81 = *(_QWORD *)v80[11];
      v82 = *(_QWORD *)(v81 + 8);
    }
    *(_OWORD *)*(_QWORD *)(v81 + 72) = xmmword_19FFB3990;
    if (*(_QWORD *)(v81 + 64) > v82)
      v82 = *(_QWORD *)(v81 + 64);
    *(_QWORD *)(v81 + 56) = 0;
    *(_QWORD *)(v81 + 64) = v82;
    v244 = *(std::__shared_weak_count **)(a4 + 88);
    *(_QWORD *)(a4 + 80) = v80 + 3;
    *(_QWORD *)(a4 + 88) = v80;
    if (v244)
    {
      v245 = (unint64_t *)&v244->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v244->__on_zero_shared)(v244, v85);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
  }
  md::LayoutContext::frameState(a2);
  *(_BYTE *)(a4 + 320) = *(_BYTE *)(v7 + 128);
}

void sub_19F128DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 - 1, v7));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  do
    v11 = __ldaxr(v5);
  while (__stlxr(v11 - 1, v5));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  _Unwind_Resume(a1);
}

void geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::purge(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;

  v1 = a1[1];
  v2 = (uint64_t *)a1[8];
  if ((uint64_t *)v1 != v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a1[6];
    v7 = a1 + 3;
    v8 = a1 + 5;
    while (v5 != v6)
    {
      v9 = *(_QWORD *)(v1 + 56);
      v10 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(v7, (int *)(v1 + 16));
      if (v10)
      {
        v11 = (int8x8_t)a1[4];
        v12 = v10[1];
        v13 = (uint8x8_t)vcnt_s8(v11);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          if (v12 >= *(_QWORD *)&v11)
            v12 %= *(_QWORD *)&v11;
        }
        else
        {
          v12 &= *(_QWORD *)&v11 - 1;
        }
        v14 = *(uint64_t **)(*v7 + 8 * v12);
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14 != v10);
        if (v15 == v8)
          goto LABEL_24;
        v16 = v15[1];
        if (v13.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&v11)
            v16 %= *(_QWORD *)&v11;
        }
        else
        {
          v16 &= *(_QWORD *)&v11 - 1;
        }
        if (v16 != v12)
        {
LABEL_24:
          if (!*v10)
            goto LABEL_25;
          v17 = *(_QWORD *)(*v10 + 8);
          if (v13.u32[0] > 1uLL)
          {
            if (v17 >= *(_QWORD *)&v11)
              v17 %= *(_QWORD *)&v11;
          }
          else
          {
            v17 &= *(_QWORD *)&v11 - 1;
          }
          if (v17 != v12)
LABEL_25:
            *(_QWORD *)(*v7 + 8 * v12) = 0;
        }
        v18 = *v10;
        if (*v10)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v13.u32[0] > 1uLL)
          {
            if (v19 >= *(_QWORD *)&v11)
              v19 %= *(_QWORD *)&v11;
          }
          else
          {
            v19 &= *(_QWORD *)&v11 - 1;
          }
          if (v19 != v12)
          {
            *(_QWORD *)(*v7 + 8 * v19) = v15;
            v18 = *v10;
          }
        }
        *v15 = v18;
        --a1[6];
        operator delete(v10);
        v2 = (uint64_t *)a1[8];
      }
      v4 += v9;
      v1 = *(_QWORD *)(v1 + 8);
      ++v5;
      if ((uint64_t *)v1 == v2)
        goto LABEL_34;
    }
    v2 = (uint64_t *)v1;
LABEL_34:
    v20 = (uint64_t *)a1[1];
    if (v20 != v2)
    {
      v21 = *v2;
      v22 = *v20;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(*v2 + 8);
      **(_QWORD **)(v21 + 8) = v22;
      do
      {
        v23 = (uint64_t *)v20[1];
        --a1[2];
        v24 = (std::__shared_weak_count *)v20[6];
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        operator delete(v20);
        v20 = v23;
      }
      while (v23 != v2);
    }
    v27 = a1[9];
    v28 = v27 >= v4;
    v29 = v27 - v4;
    if (!v28)
      v29 = 0;
    a1[9] = v29;
  }
}

void ggl::BufferData::resize(ggl::BufferData *this, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;

  v5 = *((_QWORD *)this + 9);
  v3 = (char *)this + 72;
  v4 = v5;
  v6 = *((_QWORD *)v3 - 8) * a2;
  v7 = *((_QWORD *)v3 + 1) - v5;
  if (v6 != v7)
  {
    if (v6 <= v7)
    {
      if (v6 < v7)
        *((_QWORD *)this + 10) = v4 + v6;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)v3, v6 - v7);
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 28) = 0;
    v11 = *((_QWORD *)this + 10) - *((_QWORD *)this + 9);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = v11;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = v11;
  }
}

_QWORD *md::AnchorLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **i;
  uint64_t *v32;
  _QWORD *result;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v37[0] = &off_1E42C8B88;
  v37[1] = a2;
  v38 = v37;
  v35[0] = &off_1E42C8BD0;
  v35[1] = a2;
  v36 = v35;
  v40 = v39;
  v39[0] = &off_1E42C8BD0;
  v39[1] = a2;
  std::__function::__func<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0,std::allocator<md::AnchorLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::ResolvedDependencies const&,md::AnchorContext &)::$_0>,void ()(void)>::operator()((uint64_t)v37);
  v8 = v36;
  if (v36 == v35)
  {
    v9 = 4;
    v8 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v38;
  if (v38 == v37)
  {
    v11 = 4;
    v10 = v37;
    goto LABEL_10;
  }
  if (v38)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v13 = *(float **)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  v14 = *(unsigned __int8 *)(a1 + 136);
  md::LayoutContext::frameState(a2);
  if (v14 != *(unsigned __int8 *)(v15 + 116)
    || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)v13
    || (v16 = *(unsigned __int8 *)(a1 + 121),
        md::LayoutContext::frameState(a2),
        v16 != *(unsigned __int8 *)(v17 + 128) - 1 < 3))
  {
    md::LayoutContext::frameState(a2);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(v18 + 116);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)v13;
    md::LayoutContext::frameState(a2);
    *(_BYTE *)(a1 + 121) = *(unsigned __int8 *)(v19 + 128) - 1 < 3;
    md::AnchorLogic::_resetExternalAnchors(*(md::AnchorLogic **)(a1 + 192));
    v20 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    switch(*(_BYTE *)(a1 + 136))
    {
      case 0:
      case 5:
        if (*(_BYTE *)(a1 + 120))
          goto LABEL_18;
        v21 = (uint64_t *)(a1 + 152);
        goto LABEL_23;
      case 1:
        v22 = operator new();
        v24 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)v22 = &off_1E428D6E8;
        *(_BYTE *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = v24;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_OWORD *)(v22 + 40) = 0u;
        *(_QWORD *)(v22 + 56) = 0;
        goto LABEL_26;
      case 2:
      case 3:
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E428D6E8;
        *(_BYTE *)(v22 + 8) = 0;
        v23 = 0uLL;
        *(_OWORD *)(v22 + 16) = 0u;
        goto LABEL_25;
      case 4:
LABEL_18:
        md::AnchorLogic::createMercatorElevationCache((md::AnchorLogic *)a1);
        v21 = (uint64_t *)(a1 + 160);
LABEL_23:
        v27 = *v21;
        v22 = operator new();
        v28 = *(_BYTE *)(a1 + 121);
        *(_QWORD *)v22 = &off_1E428D6E8;
        *(_BYTE *)(v22 + 8) = v28 ^ 1;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = v27;
        goto LABEL_24;
      case 6:
        md::AnchorLogic::createMercatorElevationCache((md::AnchorLogic *)a1);
        v22 = operator new();
        v25 = *(_QWORD *)(a1 + 160);
        v26 = *(_BYTE *)(a1 + 121);
        *(_QWORD *)v22 = &off_1E428D6E8;
        *(_BYTE *)(v22 + 8) = v26 ^ 1;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)(v22 + 24) = v25;
LABEL_24:
        v23 = 0uLL;
LABEL_25:
        *(_OWORD *)(v22 + 32) = v23;
        *(_OWORD *)(v22 + 48) = v23;
LABEL_26:
        *(_DWORD *)(v22 + 64) = 1065353216;
        *(_QWORD *)(v22 + 72) = 1065353216;
        v29 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v22;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        break;
      default:
        break;
    }
  }
  v30 = *(_QWORD *)(a1 + 128);
  *a4 = v30;
  if (!v30)
  {
LABEL_32:
    i = *(uint64_t ***)(a1 + 192);
    if (i)
      goto LABEL_33;
    goto LABEL_34;
  }
  if (*(_BYTE *)(a1 + 120))
  {
    *(float *)(v30 + 72) = v13[5] * v13[4];
    if (v12)
      *(_DWORD *)(v30 + 76) = *(_DWORD *)(v12 + 88);
    goto LABEL_32;
  }
  *(float *)(v30 + 72) = v13[5];
  for (i = *(uint64_t ***)(a1 + 192); i; i = (uint64_t **)*i)
  {
LABEL_33:
    v32 = i[3];
    objc_msgSend(v32, "layoutWithContext:", a2);

  }
LABEL_34:
  if (!v40)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v40 + 48))(v40);
  result = v40;
  if (v40 == v39)
  {
    v34 = 4;
    result = v39;
  }
  else
  {
    if (!v40)
      return result;
    v34 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
}

void sub_19F129550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x1AF456233693CD46 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
      v6 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x88B81689974D86F3 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x12B1E486D3040E2CLL;
    if (*(_QWORD *)&v4 <= 0x12B1E486D3040E2CuLL)
      v6 = 0x12B1E486D3040E2CuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x12B1E486D3040E2CLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

_QWORD *md::SharedResourcesLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14[0] = &off_1E42D0748;
  v14[1] = a2;
  v15 = v14;
  v12[0] = &off_1E42D0790;
  v12[1] = a2;
  v13 = v12;
  v17 = v16;
  v16[0] = &off_1E42D0790;
  v16[1] = a2;
  _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEEclEv((uint64_t)v14);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  objc_storeStrong(a4, *(id *)(a1 + 128));
  if (!v17)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v17 + 48))(v17);
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_19F12A2FC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F12A308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a13;
  if (a13 == &a10)
  {
    v26 = 4;
    v25 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x9F2276D081C2CB20;
    if (*(_QWORD *)&v4 <= 0x9F2276D081C2CB20)
      v6 = 0x9F2276D081C2CB20 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x9F2276D081C2CB20)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

void gdc::LoadingStatusTracker::setSceneStatus(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  NSObject *v8;
  os_signpost_type_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(unsigned __int8 *)(a1 + 89) == a2)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 89) = a2;
  *(_BYTE *)(a1 + 90) = 1;
  if (a2 == 2)
  {
    if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
    v3 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
    if (!os_signpost_enabled(v3))
      goto LABEL_19;
    v13 = 0;
    v4 = "failed=no";
    v5 = (uint8_t *)&v13;
LABEL_15:
    v8 = v3;
    v9 = OS_SIGNPOST_INTERVAL_BEGIN;
    goto LABEL_18;
  }
  v6 = a2 - 3;
  if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
  v3 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
  v7 = os_signpost_enabled(v3);
  if (v6 <= 1)
  {
    if (!v7)
      goto LABEL_19;
    v12 = 0;
    v4 = "failed=yes";
    v5 = (uint8_t *)&v12;
    goto LABEL_15;
  }
  if (!v7)
    goto LABEL_19;
  v11 = 0;
  v4 = (const char *)&unk_1A0189141;
  v5 = (uint8_t *)&v11;
  v8 = v3;
  v9 = OS_SIGNPOST_INTERVAL_END;
LABEL_18:
  _os_signpost_emit_with_name_impl(&dword_19F029000, v8, v9, 0xEEEEB0B5B2B2EEEELL, "FullyLoaded", v4, v5, 2u);
LABEL_19:

  if (*(unsigned __int8 *)(a1 + 89) - 2 <= 2)
  {
    v10 = *(_QWORD *)(a1 + 184);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  }
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xE719E07499A88BEBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x90B6813830DCB581)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0xC81F81A7CB7767BBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x41E8D6E445F4145)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3070CB6B3C7F21D3)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0xA588623CD4116DAELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x63B6FE00C0848868)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x9F2276D081C2CB20;
    if (*(_QWORD *)&v4 <= 0x9F2276D081C2CB20)
      v6 = 0x9F2276D081C2CB20 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x9F2276D081C2CB20)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xD2404CDD1F9A6950)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x1B9039CBDAB12E5CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x1AF456233693CD46 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
      v6 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x8BD499FBD96FBB9ELL)
      {
        if (v8[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xE42D19AFCA302E68)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x88B81689974D86F3 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x12B1E486D3040E2CLL;
    if (*(_QWORD *)&v4 <= 0x12B1E486D3040E2CuLL)
      v6 = 0x12B1E486D3040E2CuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x12B1E486D3040E2CLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x12B1E486D3040E2CLL)
      {
        if (v8[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x12B1E486D3040E2CLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x12B1E486D3040E2CLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x12B1E486D3040E2CLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

_QWORD *md::PendingRegistryLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14[0] = &off_1E42D0628;
  v14[1] = a2;
  v15 = v14;
  v12[0] = &off_1E42D0670;
  v12[1] = a2;
  v13 = v12;
  v17 = v16;
  v16[0] = &off_1E42D0670;
  v16[1] = a2;
  _ZNSt3__110__function6__funcIZN2md20PendingRegistryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22PendingRegistryContextEE3__0NS_9allocatorISJ_EEFvvEEclEv((uint64_t)v14);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  md::RegistryManager::update(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 120) + 504, *a3, *(_QWORD *)(a2 + 80));
  if (!v17)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v17 + 48))(v17);
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_19F12BC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_19F12BC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a13;
  if (a13 == &a10)
  {
    v26 = 4;
    v25 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a17;
  if (a17 == &a14)
  {
    v28 = 4;
    v27 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xE719E07499A88BEBLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::GeometryContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x401D4CCE847AB1D1)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::SettingsContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::EntityDebugHighlightLogic,md::EntityDebugHighlightContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xE75FAB3171C16149)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::GeometryContext,md::MaterialContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x1DCE255EA309B4ADLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 128))(v5, a2, v7, v3);
    }
  }
  return result;
}

void md::ARExternalAssetDataRequestLogic::reset(gdc::LayerDataCollector **this)
{
  gdc::LayerDataCollector::clear(this[16]);
}

void md::ARRenderEntityGenerationLogic::reset(md::ARRenderEntityGenerationLogic *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v2 = *((_QWORD *)this + 15);
  if (v2 && *((_QWORD *)this + 16))
  {
    v3 = (_QWORD *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v2);
    v4 = (_QWORD *)gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(*((_QWORD *)this + 16));
    v5 = v3[7];
    v6 = v3[8];
    if (v5 != v6)
    {
      v7 = v3[10];
      do
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v9 = *(std::__shared_weak_count **)(v8 + 16);
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          if (v9)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          ++*(_DWORD *)(v8 + 32);
        }
        v7 += 24;
        v5 += 8;
      }
      while (v5 != v6);
    }
    v12 = v4[7];
    v13 = v4[8];
    if (v12 != v13)
    {
      v14 = v4[10];
      do
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15 && *(_QWORD *)(v15 + 24))
        {
          v16 = *(std::__shared_weak_count **)(v15 + 16);
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 24) = 0;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          ++*(_DWORD *)(v15 + 32);
        }
        v14 += 24;
        v12 += 8;
      }
      while (v12 != v13);
    }
  }
}

void md::ARAssetOcclusionMeshDataLogic::reset(gdc::LayerDataCollector **this)
{
  gdc::LayerDataCollector::clear(this[16]);
}

void md::IdentifiedResourceLogic::reset(gdc::LayerDataCollector **this)
{
  gdc::LayerDataCollector::clear(this[15]);
  gdc::LayerDataCollector::clear(this[16]);
}

void md::LayerDataLogic::reset(md::LayerDataLogic *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *((_QWORD *)this + 15);
  v2 = *(_QWORD *)(v1 + 8);
  for (i = *(_QWORD *)(v1 + 16); v2 != i; v2 += 24)
    gdc::LayerDataSource::cancelAllLayerDataRequests(*(gdc::LayerDataSource **)(v2 + 8));
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(v1 + 56));
}

void md::DrapingLogic::reset(md::DrapingTaskScheduler **this)
{
  md::DrapingTaskScheduler::reset(this[21]);
}

uint64_t md::Logic<md::HillshadeLogic,md::HillshadeContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::GeometryContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::HillshadeContext]";
  v4[3] = 20;
  v4[4] = result;
  *v4 = &off_1E42B0E10;
  v4[1] = 0xE719E07499A88BEBLL;
  *a2 = v4;
  return result;
}

void sub_19F12C23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  v4[2] = "md::PolygonContext]";
  v4[3] = 18;
  v4[4] = v5;
  *v4 = &off_1E42B0C58;
  v4[1] = 0x401D4CCE847AB1D1;
  *a2 = v4;
  return result;
}

void sub_19F12C320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::PolygonLogic,md::PolygonContext,md::LogicDependencies<gdc::TypeList<md::SettingsContext,md::SceneContext>,gdc::TypeList<>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t md::Logic<md::ElevatedOverlayLogic,md::ElevatedOverlayContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ElevatedOverlayContext]";
  v4[3] = 26;
  v4[4] = result;
  *v4 = &off_1E42B1180;
  v4[1] = 0x1DCE255EA309B4ADLL;
  *a2 = v4;
  return result;
}

void sub_19F12C3EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 80);
}

void *md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *result;
  _OWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  _BYTE v23[264];

  v4 = (_QWORD *)operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v9, a1);
  v5 = operator new();
  v6 = v9[1];
  *(_OWORD *)v5 = v9[0];
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 32) = v9[2];
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = v11;
  *(_OWORD *)(v5 + 72) = v12;
  *(_OWORD *)(v5 + 88) = v13;
  *(_OWORD *)(v5 + 104) = v14;
  v7 = v15;
  *(_WORD *)(v5 + 128) = v16;
  *(_QWORD *)(v5 + 120) = v7;
  *(_OWORD *)(v5 + 132) = v17;
  *(_OWORD *)(v5 + 148) = v18;
  *(_OWORD *)(v5 + 164) = v19;
  *(_OWORD *)(v5 + 180) = v20;
  *(_WORD *)(v5 + 204) = v22;
  *(_QWORD *)(v5 + 196) = v21;
  result = memcpy((void *)(v5 + 208), v23, 0x108uLL);
  v4[2] = "md::PuckContext]";
  v4[3] = 15;
  v4[4] = v5;
  *v4 = &off_1E42B0AC8;
  v4[1] = 0x9AEE7E062376E454;
  *a2 = v4;
  return result;
}

void sub_19F12C570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::PuckLocationAnimationTracingContext]";
  v4[3] = 39;
  v4[4] = result;
  *v4 = &off_1E42B1658;
  v4[1] = 0xA81ACD73F9C92AA1;
  *a2 = v4;
  return result;
}

void sub_19F12C630(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::MapZoomLevelStyleLogicContext]";
  v4[3] = 33;
  v4[4] = result;
  *v4 = &off_1E42B14A0;
  v4[1] = 0xF0AA2DB42EB710AFLL;
  *a2 = v4;
  return result;
}

void sub_19F12C6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

_QWORD *md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::SharedResourcesContext]";
  v4[3] = 26;
  v4[4] = result;
  *v4 = &off_1E42B11F8;
  v4[1] = 0xA60DDA5A69582425;
  *a2 = v4;
  return result;
}

void sub_19F12C7C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::PendingRegistryContext]";
  v4[3] = 26;
  v4[4] = result;
  *v4 = &off_1E42B11D0;
  v4[1] = 0xA8300AA8F44B09FFLL;
  *a2 = v4;
  return result;
}

void sub_19F12C898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::LoadingStatusContext]";
  v4[3] = 24;
  v4[4] = result;
  *v4 = &off_1E42B1018;
  v4[1] = 0x90B6813830DCB581;
  *a2 = v4;
  return result;
}

void sub_19F12C95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

__n128 md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __n128 result;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v31, a1);
  v5 = operator new();
  v6 = v32;
  *(_QWORD *)v5 = v31;
  *(_QWORD *)(v5 + 8) = v6;
  v7 = v5 + 8;
  v8 = v33;
  *(_QWORD *)(v5 + 16) = v33;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    *(_QWORD *)v5 = v7;
  }
  v10 = v34;
  v9 = v35;
  *(_QWORD *)(v5 + 32) = v35;
  v11 = v5 + 32;
  *(_QWORD *)(v5 + 24) = v10;
  v12 = v36;
  *(_QWORD *)(v5 + 40) = v36;
  if (v12)
  {
    *(_QWORD *)(v9 + 16) = v11;
    v34 = &v35;
    v35 = 0;
    v36 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 24) = v11;
  }
  v14 = v37;
  v13 = v38;
  *(_QWORD *)(v5 + 56) = v38;
  v15 = v5 + 56;
  *(_QWORD *)(v5 + 48) = v14;
  v16 = v39;
  *(_QWORD *)(v5 + 64) = v39;
  if (v16)
  {
    *(_QWORD *)(v13 + 16) = v15;
    v37 = &v38;
    v38 = 0;
    v39 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 48) = v15;
  }
  v17 = v43;
  v18 = v44;
  *(_QWORD *)(v5 + 112) = v43;
  v19 = v5 + 112;
  *(_QWORD *)(v5 + 88) = v41;
  *(_OWORD *)(v5 + 72) = v40;
  v20 = v42;
  v41 = 0;
  *(_QWORD *)&v42 = 0;
  v40 = 0uLL;
  *(_OWORD *)(v5 + 96) = v20;
  *(_QWORD *)(v5 + 120) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v19;
    *((_QWORD *)&v42 + 1) = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 104) = v19;
  }
  v22 = v45;
  v21 = v46;
  *(_QWORD *)(v5 + 136) = v46;
  v23 = v5 + 136;
  *(_QWORD *)(v5 + 128) = v22;
  v24 = v47;
  *(_QWORD *)(v5 + 144) = v47;
  if (v24)
  {
    *(_QWORD *)(v21 + 16) = v23;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 128) = v23;
  }
  v26 = v48;
  v25 = v49;
  *(_QWORD *)(v5 + 160) = v49;
  v27 = v5 + 160;
  *(_QWORD *)(v5 + 152) = v26;
  v28 = v50;
  *(_QWORD *)(v5 + 168) = v50;
  if (v28)
  {
    *(_QWORD *)(v25 + 16) = v27;
    v48 = &v49;
    v49 = 0;
    v50 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 152) = v27;
  }
  *(_BYTE *)(v5 + 176) = v51;
  v29 = v52;
  v52 = 0u;
  *(_OWORD *)(v5 + 184) = v29;
  *(_OWORD *)(v5 + 200) = v53;
  *(_QWORD *)(v5 + 216) = v54;
  v53 = 0u;
  v54 = 0;
  v4[2] = "md::RouteOverlayContext]";
  v4[3] = 23;
  v4[4] = v5;
  *v4 = &off_1E42B0FC8;
  v4[1] = 0x13043386C0978CC2;
  *a2 = v4;
  md::RouteOverlayContext::~RouteOverlayContext((md::RouteOverlayContext *)&v31);
  return result;
}

void sub_19F12CBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::RouteOverlayContext::~RouteOverlayContext((md::RouteOverlayContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return result;
}

void md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void *v14;
  _OWORD v15[2];
  char v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _OWORD v28[2];

  v4 = (_QWORD *)operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v15, a1);
  v5 = operator new();
  v6 = v15[1];
  *(_OWORD *)v5 = v15[0];
  *(_OWORD *)(v5 + 16) = v6;
  *(_BYTE *)(v5 + 32) = 0;
  if (v16)
  {
    *(_DWORD *)(v5 + 36) = v17;
    *(_BYTE *)(v5 + 32) = 1;
  }
  v7 = v18;
  v18 = 0u;
  *(_OWORD *)(v5 + 40) = v7;
  *(_DWORD *)(v5 + 56) = v19;
  *(_OWORD *)(v5 + 64) = v20;
  *(_QWORD *)(v5 + 80) = v21;
  *(_QWORD *)(v5 + 88) = v22;
  *(_QWORD *)(v5 + 96) = v23;
  v8 = __p[0];
  v9 = (unint64_t)__p[1];
  *(_OWORD *)__p = 0u;
  *(_QWORD *)(v5 + 104) = v8;
  *(_QWORD *)(v5 + 112) = v9;
  v10 = v25;
  v11 = v26;
  *(_QWORD *)(v5 + 120) = v25;
  *(_QWORD *)(v5 + 128) = v11;
  *(_DWORD *)(v5 + 136) = v27;
  if (v11)
  {
    v12 = v10[1];
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v12 >= v9)
        v12 %= v9;
    }
    else
    {
      v12 &= v9 - 1;
    }
    v10 = 0;
    v8[v12] = v5 + 120;
    v25 = 0;
    v26 = 0;
  }
  *(_OWORD *)(v5 + 144) = v28[0];
  *(_OWORD *)(v5 + 153) = *(_OWORD *)((char *)v28 + 9);
  v4[2] = "md::NavigationContext]";
  v4[3] = 21;
  v4[4] = v5;
  *v4 = &off_1E42B0E88;
  v4[1] = 0x1B8B241A8D896A1DLL;
  *a2 = v4;
  if (v10)
  {
    do
    {
      v13 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v13;
    }
    while (v13);
  }
  v14 = __p[0];
  __p[0] = 0;
  if (v14)
    operator delete(v14);

}

void sub_19F12CE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::NavigationContext::~NavigationContext((md::NavigationContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 8) = -1082130432;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 1072483533;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return result;
}

double md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  double *v5;
  double result;
  double v7;

  v4 = (_QWORD *)operator new();
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = (double *)operator new();
  result = v7;
  *v5 = v7;
  v4[2] = "md::LocalNorthLogicContext]";
  v4[3] = 26;
  v4[4] = v5;
  *v4 = &off_1E42B11A8;
  v4[1] = 0xC81F81A7CB7767BBLL;
  *a2 = v4;
  return result;
}

void sub_19F12CF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

_QWORD *md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::LayerDataLogicContext]";
  v4[3] = 25;
  v4[4] = result;
  *v4 = &off_1E42B1130;
  v4[1] = 0x7851AF310F49C988;
  *a2 = v4;
  return result;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

double md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  v4[2] = "md::ElevationContext]";
  v4[3] = 20;
  v4[4] = v5;
  *v4 = &off_1E42B0DE8;
  v4[1] = 0x8BD499FBD96FBB9ELL;
  *a2 = v4;
  return result;
}

void sub_19F12D104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  result = 0.0078125;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3B40;
  return result;
}

_QWORD *md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::StandardLogicContext]";
  v4[3] = 24;
  v4[4] = result;
  *v4 = &off_1E42B1068;
  v4[1] = 0xFFA06A69D924B0E8;
  *a2 = v4;
  return result;
}

void sub_19F12D1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

_QWORD *md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::RegistryContext]";
  v4[3] = 19;
  v4[4] = result;
  *v4 = &off_1E42B0D48;
  v4[1] = 0xFBD83FDA8879FF7ELL;
  *a2 = v4;
  return result;
}

void sub_19F12D2BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 v28;
  void *__p[2];
  uint64_t v30;
  _BYTE v31[300];

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v22, a1);
  v5 = operator new();
  v6 = v5;
  v7 = v22;
  v8 = v23;
  v22 = 0uLL;
  *(_OWORD *)v5 = v7;
  *(_OWORD *)(v5 + 16) = v8;
  v23 = 0uLL;
  v9 = v24;
  v10 = v25;
  v24 = 0uLL;
  *(_OWORD *)(v5 + 32) = v9;
  *(_OWORD *)(v5 + 48) = v10;
  v11 = v27;
  *(_OWORD *)(v5 + 64) = v26;
  *(_OWORD *)(v5 + 80) = v11;
  *(_BYTE *)(v5 + 96) = 0;
  v12 = v28;
  if (v28)
  {
    *(_OWORD *)(v5 + 104) = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 120) = v30;
    __p[1] = 0;
    v30 = 0;
    __p[0] = 0;
    *(_BYTE *)(v5 + 96) = 1;
  }
  memcpy((void *)(v5 + 128), v31, 0x12CuLL);
  v4[2] = "md::LightingLogicContext]";
  v4[3] = 24;
  v4[4] = v6;
  *v4 = &off_1E42B0FF0;
  v4[1] = 0x41E8D6E445F4145;
  *a2 = v4;
  if (v12)
  {
    if (SHIBYTE(v30) < 0)
    {
      operator delete(__p[0]);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      v28 = 0;
      if (*((_QWORD *)&v24 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
      v28 = 0;
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19F12D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  md::LightingLogicContext::~LightingLogicContext(&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::allocateContext@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v2 = operator new(0xE8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42E2C50;
  v3 = ggl::BufferData::BufferData((uint64_t)(v2 + 3), qword_1EE568628, 2, 1, 6, 1);
  v2[28] = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
  v2[3] = &off_1E42B9EB0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v2;
  v4 = operator new(0xE8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E42E2C88;
  v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), qword_1EE568528, 2, 1, 6, 1);
  v4[28] = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
  v4[3] = &off_1E42B9ED0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42E2CC0;
  result = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1EE568588, 2, 1, 6, 1);
  v6[28] = ggl::Lighting::LightSpecularConfiguration::reflection(void)::reflection;
  v6[3] = &off_1E42B9EF0;
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_QWORD *)(a1 + 192) = 0x3D4CCCCD3F800000;
  *(_DWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 228) = 0;
  return result;
}

void sub_19F12D648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

double md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  v4[2] = "md::DrapingContext]";
  v4[3] = 18;
  v4[4] = v5;
  *v4 = &off_1E42B0C30;
  v4[1] = 0x1B9039CBDAB12E5CLL;
  *a2 = v4;
  return result;
}

void sub_19F12D77C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

double md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
  v5 = operator new();
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v8;
  v4[2] = "md::LabelsContext]";
  v4[3] = 17;
  v4[4] = v5;
  *v4 = &off_1E42B0BB8;
  v4[1] = 0xA588623CD4116DAELL;
  *a2 = v4;
  return result;
}

void sub_19F12D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::Logic<md::LabelsLogic,md::LabelsContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::MeshRenderableContext>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

_QWORD *md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = (_QWORD *)operator new();
  *result = v5;
  v4[2] = "md::AnchorContext]";
  v4[3] = 17;
  v4[4] = result;
  *v4 = &off_1E42B0B40;
  v4[1] = 0x63B6FE00C0848868;
  *a2 = v4;
  return result;
}

void sub_19F12D950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::AnchorLogic,md::AnchorContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext>,gdc::TypeList<md::NavigationContext>>>::allocateContext()
{
  return 0;
}

void md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  _BYTE *v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v11, a1);
  v5 = operator new();
  v6 = v12;
  *(_OWORD *)v5 = v11;
  v11 = 0uLL;
  *(_OWORD *)(v5 + 16) = v6;
  v12 = 0uLL;
  *(_OWORD *)(v5 + 32) = v13;
  v13 = 0uLL;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  v7 = v14;
  v8 = v15 - v14;
  if (v15 != v14)
  {
    if ((v8 & 0x8000000000000000) != 0)
      abort();
    v9 = (char *)operator new(v15 - v14);
    *(_QWORD *)(v5 + 48) = v9;
    v10 = &v9[v8];
    *(_QWORD *)(v5 + 64) = &v9[v8];
    memcpy(v9, v7, v8);
    *(_QWORD *)(v5 + 56) = v10;
  }
  *(_OWORD *)(v5 + 72) = v16;
  *(_OWORD *)(v5 + 88) = v17[0];
  *(_OWORD *)(v5 + 97) = *(_OWORD *)((char *)v17 + 9);
  *(_OWORD *)(v5 + 120) = v18;
  *(_QWORD *)(v5 + 136) = v19;
  v18 = 0uLL;
  *(_OWORD *)(v5 + 144) = v20;
  *(_QWORD *)(v5 + 160) = v21;
  v19 = 0;
  v20 = 0uLL;
  v21 = 0;
  v4[2] = "md::StyleLogicContext]";
  v4[3] = 21;
  v4[4] = v5;
  *v4 = &off_1E42B0ED8;
  v4[1] = 0xE42D19AFCA302E68;
  *a2 = v4;
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)&v11);
}

void sub_19F12DAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x1010000000000;
  *(_WORD *)(a1 + 81) = 0;
  *(_BYTE *)(a1 + 83) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 1;
  *(_DWORD *)(a1 + 93) = 0;
  *(_BYTE *)(a1 + 97) = 0;
  *(_DWORD *)(a1 + 108) = 1065353216;
  *(_QWORD *)(a1 + 100) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 112) = 4;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t md::Logic<md::AssetLogic,md::AssetContext,md::LogicDependencies<gdc::TypeList<md::IdentifiedResourceContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::AssetContext]";
  v4[3] = 16;
  v4[4] = result;
  *v4 = &off_1E42B0AF0;
  v4[1] = 0x88B81689974D86F3;
  *a2 = v4;
  return result;
}

void sub_19F12DC58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::ResolvedSceneLogic::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::PendingSceneLogic::allocateContext(md::PendingSceneLogic *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *((_QWORD *)this + 49);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 50);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v4;
    a2[1] = 0;
  }
  a2[2] = (char *)this + 280;
}

BOOL md::LabelCollisionItem::outranksItem(md::LabelCollisionItem *this, const md::LabelCollisionItemBase *a2)
{
  unsigned int v2;

  v2 = *((unsigned __int8 *)a2 + 52);
  if (v2 == 4)
    return md::Label::collisionPriorityCmp(*((_QWORD *)this + 7), *((unsigned __int8 *)this + 64), *((_QWORD *)a2 + 7), *((unsigned __int8 *)a2 + 64), 1);
  else
    return *((unsigned __int8 *)this + 52) <= v2;
}

void std::__function::__func<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0,std::allocator<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  md::RenderLayer::clearCommandBuffers(v2, a1[3], a1[2]);
  if (*(_BYTE *)(v2 + 32))
  {
    v3 = *(_QWORD **)(a1[2] + 8);
    v4 = v3[1];
    if ((v4 & (v4 - 1)) != 0)
    {
      v6 = 0xE42D19AFCA302E68;
      if (v4 <= 0xE42D19AFCA302E68)
        v6 = 0xE42D19AFCA302E68 % v4;
      v5 = *(_QWORD **)(*v3 + 8 * v6);
      do
      {
        do
          v5 = (_QWORD *)*v5;
        while (v5[1] != 0xE42D19AFCA302E68);
      }
      while (v5[2] != 0xE42D19AFCA302E68);
    }
    else
    {
      v5 = *(_QWORD **)(*v3 + 8 * ((v4 - 1) & 0xE42D19AFCA302E68));
      do
      {
        do
          v5 = (_QWORD *)*v5;
        while (v5[1] != 0xE42D19AFCA302E68);
      }
      while (v5[2] != 0xE42D19AFCA302E68);
    }
    v7 = *(_QWORD *)(v5[5] + 32);
    if (*(_QWORD *)v7 && *(_BYTE *)(v7 + 82))
      v8 = 2;
    else
      v8 = 10;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8 * v8))(v2);
  }
  md::RenderLayer::unlock(v2, a1[3], a1[2]);
}

unint64_t *ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F12E2C4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10RenderItemEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D60C8;
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_QWORD *md::DaVinciCenterLineRoadsRenderLayer::layout(md::DaVinciCenterLineRoadsRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  float v47;
  float v48;
  void *v49;
  BOOL v50;
  float v51;
  BOOL v52;
  void *v53;
  void *v54;
  unsigned __int8 v55;
  void *v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  int8x8_t v60;
  uint8x8_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint8x8_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id *v80;
  id v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  uint64_t **v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  __n128 v109;
  __int128 *v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  __n128 v116;
  __int128 *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  __n128 v123;
  uint64_t (***v124)();
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  __n128 v129;
  uint64_t (***v130)();
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  __n128 v135;
  unint64_t v136;
  uint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *result;
  uint64_t v145;
  BOOL v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v150;
  int v151;
  char v152;
  _OWORD v153[3];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _QWORD v167[3];
  _QWORD *v168;
  _QWORD v169[3];
  _QWORD *v170;
  _QWORD v171[3];
  _QWORD *v172;
  uint64_t (**v173)();
  uint64_t v174;
  uint64_t (***v175)();
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v169[0] = &off_1E42D3C28;
  v169[1] = a2;
  v170 = v169;
  v167[0] = &off_1E42D3C70;
  v167[1] = a2;
  v168 = v167;
  v172 = v171;
  v171[0] = &off_1E42D3C70;
  v171[1] = a2;
  std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v169);
  v3 = v168;
  if (v168 == v167)
  {
    v4 = 4;
    v3 = v167;
  }
  else
  {
    if (!v168)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v170;
  if (v170 == v169)
  {
    v6 = 4;
    v5 = v169;
  }
  else
  {
    if (!v170)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  v8 = (unsigned __int8 *)*((_QWORD *)this + 51);
  v9 = *(_QWORD **)(v7 + 8);
  v10 = v9[3];
  v11 = v9[4];
  if (v11 == v10)
    goto LABEL_18;
  v12 = 0;
  while (1)
  {
    v13 = *(unsigned __int8 **)(v10 + 8 * v12);
    if (*v13 == *v8)
    {
      v14 = *((_QWORD *)v13 + 1);
      v15 = v9[15];
      if (v14 < (v9[16] - v15) >> 3)
        break;
    }
    if (++v12 >= (unint64_t)((v11 - v10) >> 3))
      goto LABEL_18;
  }
  v16 = *(_QWORD *)(v15 + 8 * v14);
  if (!v16)
LABEL_18:
    v148 = 0;
  else
    v148 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v8[1]);
  if ((*((_BYTE *)this + 34) & 0xFE) != 0x22)
    goto LABEL_28;
  v17 = *((_QWORD *)this + 52) - (_QWORD)v8;
  if (v17 < 5)
    goto LABEL_29;
  if (v11 == v10)
  {
LABEL_28:
    v23 = 0;
    goto LABEL_37;
  }
  v18 = 0;
  while (1)
  {
    v19 = *(unsigned __int8 **)(v10 + 8 * v18);
    if (*v19 == v8[4])
    {
      v20 = *((_QWORD *)v19 + 1);
      v21 = v9[15];
      if (v20 < (v9[16] - v21) >> 3)
        break;
    }
    if (++v18 >= (unint64_t)((v11 - v10) >> 3))
      goto LABEL_29;
  }
  v22 = *(_QWORD *)(v21 + 8 * v20);
  if (!v22)
  {
LABEL_29:
    v23 = 0;
    if (v17 < 3)
      goto LABEL_37;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 24) + 8 * v8[5]);
LABEL_30:
  v24 = v11 - v10;
  if (v11 != v10)
  {
    v25 = 0;
    v26 = v24 >> 3;
    while (1)
    {
      v27 = *(unsigned __int8 **)(v10 + 8 * v25);
      if (*v27 == v8[2])
      {
        v28 = *((_QWORD *)v27 + 1);
        v29 = v9[15];
        if (v28 < (v9[16] - v29) >> 3)
          break;
      }
      if (++v25 >= v26)
        goto LABEL_37;
    }
    v30 = *(_QWORD *)(v29 + 8 * v28);
    if (v30)
    {
      v150 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * v8[3]);
      goto LABEL_38;
    }
  }
LABEL_37:
  v150 = 0;
LABEL_38:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v152 = objc_msgSend(v31, "daVinciShowCenterLineRoads");

  v32 = (uint64_t *)*((_QWORD *)a2 + 1);
  v33 = (int8x8_t)v32[1];
  v34 = (uint8x8_t)vcnt_s8(v33);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v33;
    if (*(_QWORD *)&v33 > 0x8BD499FBD96FBB9ELL)
      v35 = 0x8BD499FBD96FBB9ELL;
  }
  else
  {
    v35 = (*(_QWORD *)&v33 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v36 = *v32;
  v37 = *(_QWORD **)(v36 + 8 * v35);
  if (!v37)
    goto LABEL_60;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_60;
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v38[1];
      if (v40 == 0x8BD499FBD96FBB9ELL)
      {
        if (v38[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_58;
      }
      else if ((v40 & (*(_QWORD *)&v33 - 1)) != v35)
      {
        goto LABEL_60;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_60;
    }
  }
  while (1)
  {
    v39 = v38[1];
    if (v39 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v39 >= *(_QWORD *)&v33)
      v39 %= *(_QWORD *)&v33;
    if (v39 != v35)
      goto LABEL_60;
LABEL_47:
    v38 = (_QWORD *)*v38;
    if (!v38)
      goto LABEL_60;
  }
  if (v38[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_47;
LABEL_58:
  v41 = v38[5];
  if (*(_QWORD *)(v41 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v42 = *(_QWORD *)(v41 + 32);
    goto LABEL_61;
  }
LABEL_60:
  v42 = 0;
LABEL_61:
  if (v34.u32[0] >= 2uLL)
  {
    v44 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v33 <= 0x1AF456233693CD46uLL)
      v44 = 0x1AF456233693CD46uLL % *(_QWORD *)&v33;
    v43 = *(_QWORD **)(v36 + 8 * v44);
    do
    {
      do
        v43 = (_QWORD *)*v43;
      while (v43[1] != 0x1AF456233693CD46);
    }
    while (v43[2] != 0x1AF456233693CD46);
  }
  else
  {
    v43 = *(_QWORD **)(v36 + 8 * ((*(_QWORD *)&v33 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v43 = (_QWORD *)*v43;
      while (v43[1] != 0x1AF456233693CD46);
    }
    while (v43[2] != 0x1AF456233693CD46);
  }
  v45 = *(_QWORD *)(v43[5] + 32);
  v46 = *(unsigned __int8 *)(v45 + 3776);
  v47 = *(float *)(v45 + 3076);
  v48 = *(float *)(v45 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "daVinciGlobeSplinedMaxZoom");
  v50 = (v46 - 1) < 3;
  v52 = fmaxf(v48 + v47, 1.0) <= (float)(v51 + 1.0);

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v151 = objc_msgSend(v53, "enableTileClipping");

  v147 = *(float *)(v42 + 16) <= 0.01 && *(_BYTE *)(v42 + 3) != 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v54, "daVinciEnableRibbonAntialiasing");

  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v153, a2);
  LODWORD(v158) = 1065353216;
  WORD2(v158) = 0;
  *((_QWORD *)&v158 + 1) = 0;
  BYTE8(v154) = 0;
  BYTE9(v157) = 1;
  *(_WORD *)((char *)&v157 + 11) = v55;
  BYTE10(v157) = v147;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "ribbonCrispness");
  DWORD1(v155) = v57;

  v146 = v52 && v50;
  BYTE8(v156) = v52 && v50;
  v58 = *((_QWORD *)this + 47);
  DWORD2(v155) = *(_DWORD *)(*(_QWORD *)(v58 + 120) + 8);
  *((_QWORD *)&v158 + 1) = v58;
  v59 = (_QWORD *)*((_QWORD *)a2 + 1);
  v60 = (int8x8_t)v59[1];
  if (!*(_QWORD *)&v60)
    goto LABEL_98;
  v61 = (uint8x8_t)vcnt_s8(v60);
  v61.i16[0] = vaddlv_u8(v61);
  if (v61.u32[0] > 1uLL)
  {
    v62 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v60 <= 0xDFC317497CF9A4BFLL)
      v62 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v60;
  }
  else
  {
    v62 = (*(_QWORD *)&v60 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v63 = *(_QWORD **)(*v59 + 8 * v62);
  if (!v63)
    goto LABEL_98;
  v64 = (_QWORD *)*v63;
  if (!v64)
    goto LABEL_98;
  if (v61.u32[0] < 2uLL)
  {
    while (1)
    {
      v66 = v64[1];
      if (v66 == 0xDFC317497CF9A4BFLL)
      {
        if (v64[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_95;
      }
      else if ((v66 & (*(_QWORD *)&v60 - 1)) != v62)
      {
        goto LABEL_98;
      }
      v64 = (_QWORD *)*v64;
      if (!v64)
        goto LABEL_98;
    }
  }
  while (1)
  {
    v65 = v64[1];
    if (v65 == 0xDFC317497CF9A4BFLL)
      break;
    if (v65 >= *(_QWORD *)&v60)
      v65 %= *(_QWORD *)&v60;
    if (v65 != v62)
      goto LABEL_98;
LABEL_84:
    v64 = (_QWORD *)*v64;
    if (!v64)
      goto LABEL_98;
  }
  if (v64[2] != 0xDFC317497CF9A4BFLL)
    goto LABEL_84;
LABEL_95:
  v67 = v64[5];
  if (*(_QWORD *)(v67 + 8) != 0xDFC317497CF9A4BFLL)
  {
LABEL_98:
    LOBYTE(v68) = 0;
    goto LABEL_99;
  }
  v68 = *(_QWORD *)(v67 + 32);
  if (v68)
    LOBYTE(v68) = *(_BYTE *)(v68 + 64) != 0;
LABEL_99:
  BYTE12(v155) = v68;
  v69 = *(_QWORD *)(v7 + 160);
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 32);
    v71 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 96);
    if (v70 < (*(_QWORD *)(*(_QWORD *)(v7 + 8) + 104) - v71) >> 3)
    {
      v69 = *(_QWORD *)(*(_QWORD *)(v71 + 8 * v70) + 16);
      goto LABEL_102;
    }
    v69 = 0;
    *(_QWORD *)&v156 = 0;
    if (!*(_QWORD *)&v60)
      goto LABEL_137;
  }
  else
  {
LABEL_102:
    *(_QWORD *)&v156 = v69;
    if (!*(_QWORD *)&v60)
      goto LABEL_137;
  }
  v72 = (uint8x8_t)vcnt_s8(v60);
  v72.i16[0] = vaddlv_u8(v72);
  if (v72.u32[0] > 1uLL)
  {
    v73 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v60 <= 0xA60DDA5A69582425)
      v73 = 0xA60DDA5A69582425 % *(_QWORD *)&v60;
  }
  else
  {
    v73 = (*(_QWORD *)&v60 - 1) & 0xA60DDA5A69582425;
  }
  v74 = *(_QWORD **)(*v59 + 8 * v73);
  if (v74)
  {
    v75 = (_QWORD *)*v74;
    if (v75)
    {
      if (v72.u32[0] < 2uLL)
      {
        v76 = *(_QWORD *)&v60 - 1;
        while (1)
        {
          v78 = v75[1];
          if (v78 == 0xA60DDA5A69582425)
          {
            if (v75[2] == 0xA60DDA5A69582425)
              goto LABEL_125;
          }
          else if ((v78 & v76) != v73)
          {
            goto LABEL_137;
          }
          v75 = (_QWORD *)*v75;
          if (!v75)
            goto LABEL_137;
        }
      }
      do
      {
        v77 = v75[1];
        if (v77 == 0xA60DDA5A69582425)
        {
          if (v75[2] == 0xA60DDA5A69582425)
          {
LABEL_125:
            v79 = v75[5];
            if (*(_QWORD *)(v79 + 8) == 0xA60DDA5A69582425)
            {
              v80 = *(id **)(v79 + 32);
              if (v80 && v69 == 0)
              {
                v82 = *v80;
                objc_msgSend(v82, "textureManager");
                v83 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
                *(_QWORD *)&v156 = *(_QWORD *)v159;
                if (*((_QWORD *)&v159 + 1))
                {
                  v84 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }

              }
            }
            break;
          }
        }
        else
        {
          if (v77 >= *(_QWORD *)&v60)
            v77 %= *(_QWORD *)&v60;
          if (v77 != v73)
            break;
        }
        v75 = (_QWORD *)*v75;
      }
      while (v75);
    }
  }
LABEL_137:
  v86 = (uint64_t *)*((_QWORD *)this + 50);
  v87 = *v86;
  v88 = v86[1];
  if (*v86 != v88)
  {
    do
    {
      md::RoadStyle::layout(*(unint64_t **)(v87 + 32), (uint64_t)v153);
      v87 += 48;
    }
    while (v87 != v88);
  }
  v89 = (uint64_t **)*((_QWORD *)this + 34);
  v90 = (uint64_t **)*((_QWORD *)this + 35);
  while (2)
  {
    if (v89 != v90)
    {
      v93 = *v89;
      v94 = (*v89)[48];
      v95 = v152;
      if (!*(_BYTE *)(v94 + 856))
        v95 = 1;
      if ((v95 & 1) != 0 || *((_BYTE *)this + 34) == 16)
      {
        v96 = v151 ? v93[31] : 0;
        v97 = *(_QWORD *)(v94 + 736);
        v98 = *(_QWORD *)(v94 + 744);
        v99 = *(_QWORD *)(v94 + 816);
        v100 = *(_QWORD *)(v94 + 720);
        v101 = *(_QWORD *)(v94 + 728);
        v102 = !v97 && v98 == 0;
        v103 = v102 && v99 == 0;
        v104 = v103 && v100 == 0;
        if (v104 && v101 == 0)
        {
          *(_QWORD *)&v157 = v96;
          BYTE8(v157) = *((_BYTE *)this + 34) == 35;
        }
        else
        {
          md::DaVinciCenterLineRoadsTileData::updateViewAndTransformConstantData(v94, v93[27], v93[29]);
          *(_QWORD *)&v157 = v96;
          BYTE8(v157) = *((_BYTE *)this + 34) == 35;
          if (v97)
          {
            v106 = *(_QWORD *)(v97 + 200);
            v107 = *((_QWORD *)this + 47);
            if (v106)
              v108 = v106 == v107;
            else
              v108 = 0;
            if (!v108)
              md::RoadLayer::setSharedResources((_QWORD *)v97, v107);
            md::RoadLayer::layout(v97, (uint64_t)v153);
            *(_QWORD *)&v159 = &off_1E42D43C0;
            *((_QWORD *)&v159 + 1) = v148;
            *((_QWORD *)&v160 + 1) = &v159;
            md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v97 + 8), *(_QWORD **)(v97 + 16), &v159, v109);
            v110 = (__int128 *)*((_QWORD *)&v160 + 1);
            if (*((__int128 **)&v160 + 1) == &v159)
            {
              v110 = &v159;
              v111 = 4;
LABEL_175:
              (*(void (**)(void))(*(_QWORD *)v110 + 8 * v111))();
            }
            else if (*((_QWORD *)&v160 + 1))
            {
              v111 = 5;
              goto LABEL_175;
            }
          }
          if (v98)
            v112 = v23 == 0;
          else
            v112 = 1;
          if (!v112)
          {
            v113 = *(_QWORD *)(v98 + 200);
            v114 = *((_QWORD *)this + 47);
            if (v113)
              v115 = v113 == v114;
            else
              v115 = 0;
            if (!v115)
              md::RoadLayer::setSharedResources((_QWORD *)v98, v114);
            md::RoadLayer::layout(v98, (uint64_t)v153);
            *(_QWORD *)&v159 = &off_1E42D43C0;
            *((_QWORD *)&v159 + 1) = v23;
            *((_QWORD *)&v160 + 1) = &v159;
            md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v98 + 8), *(_QWORD **)(v98 + 16), &v159, v116);
            v117 = (__int128 *)*((_QWORD *)&v160 + 1);
            if (*((__int128 **)&v160 + 1) == &v159)
            {
              v117 = &v159;
              v118 = 4;
LABEL_189:
              (*(void (**)(void))(*(_QWORD *)v117 + 8 * v118))();
            }
            else if (*((_QWORD *)&v160 + 1))
            {
              v118 = 5;
              goto LABEL_189;
            }
          }
          if (v99)
            v119 = v150 == 0;
          else
            v119 = 1;
          if (!v119)
          {
            v163 = v155;
            v164 = v156;
            v165 = v157;
            v166 = v158;
            v159 = v153[0];
            v160 = v153[1];
            v161 = v153[2];
            v162 = v154;
            v120 = *(_QWORD *)(v99 + 200);
            v121 = *((_QWORD *)this + 48);
            if (v120)
              v122 = v120 == v121;
            else
              v122 = 0;
            BYTE9(v165) = 0;
            if (!v122)
              md::RoadLayer::setSharedResources((_QWORD *)v99, v121);
            md::RoadLayer::layout(v99, (uint64_t)&v159);
            v173 = &off_1E42D43C0;
            v174 = v150;
            v175 = &v173;
            md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v99 + 8), *(_QWORD **)(v99 + 16), &v173, v123);
            v124 = v175;
            if (v175 == &v173)
            {
              v124 = &v173;
              v125 = 4;
LABEL_203:
              (*v124)[v125]();
            }
            else if (v175)
            {
              v125 = 5;
              goto LABEL_203;
            }
          }
        }
        if (v100 | v101)
        {
          md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)&v159, a2);
          HIDWORD(v165) = 1065353216;
          LOBYTE(v166) = 0;
          BYTE9(v165) = 1;
          BYTE10(v165) = v147;
          BYTE11(v165) = v146;
          *(_QWORD *)&v165 = v96;
          BYTE8(v165) = *((_BYTE *)this + 34) == 35;
          if (v100)
          {
            v126 = *(_QWORD *)(v100 + 192);
            v127 = *((_QWORD *)this + 46);
            if (v126)
              v128 = v126 == v127;
            else
              v128 = 0;
            if (!v128)
              *(_QWORD *)(v100 + 192) = v127;
            md::PatternedLayer::layout(v100, (uint64_t)&v159);
            v173 = &off_1E42D4408;
            v174 = v148;
            v175 = &v173;
            md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v100 + 8), *(_QWORD **)(v100 + 16), &v173, v129);
            v130 = v175;
            if (v175 == &v173)
            {
              v130 = &v173;
              v131 = 4;
LABEL_215:
              (*v130)[v131]();
            }
            else if (v175)
            {
              v131 = 5;
              goto LABEL_215;
            }
          }
          if (v101)
          {
            v132 = *(_QWORD *)(v101 + 192);
            v133 = *((_QWORD *)this + 46);
            if (v132)
              v134 = v132 == v133;
            else
              v134 = 0;
            if (!v134)
              *(_QWORD *)(v101 + 192) = v133;
            md::PatternedLayer::layout(v101, (uint64_t)&v159);
            v173 = &off_1E42D4408;
            v174 = v23;
            v175 = &v173;
            md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v101 + 8), *(_QWORD **)(v101 + 16), &v173, v135);
            v91 = v175;
            if (v175 == &v173)
            {
              v91 = &v173;
              v92 = 4;
              goto LABEL_141;
            }
            if (v175)
            {
              v92 = 5;
LABEL_141:
              (*v91)[v92]();
            }
          }
        }
      }
      ++v89;
      continue;
    }
    break;
  }
  v136 = *(_QWORD *)(v148 + 72);
  v137 = *(uint64_t **)(v148 + 80);
  v138 = 126 - 2 * __clz((uint64_t)((uint64_t)v137 - v136) >> 3);
  if (v137 == (uint64_t *)v136)
    v139 = 0;
  else
    v139 = v138;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v136, v137, v139, 1);
  if (v23)
  {
    v140 = *(_QWORD *)(v23 + 72);
    v141 = *(uint64_t **)(v23 + 80);
    v142 = 126 - 2 * __clz((uint64_t)((uint64_t)v141 - v140) >> 3);
    if (v141 == (uint64_t *)v140)
      v143 = 0;
    else
      v143 = v142;
    std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v140, v141, v143, 1);
  }
  if (!v172)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v172 + 48))(v172);
  result = v172;
  if (v172 == v171)
  {
    v145 = 4;
    result = v171;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v145))();
  }
  else if (v172)
  {
    v145 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v145))();
  }
  return result;
}

void sub_19F12F23C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 176));
  _Unwind_Resume(a1);
}

void md::RoadStyle::layout(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  float *v13;
  float v14;
  unsigned int v16;
  int hasValueForKeyAtZAtEnd;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  float v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  float v62;
  uint64_t v63;
  unsigned int v64;
  float *v65;
  float v66;
  BOOL v67;
  int v68;
  char v69;
  char v70;
  float v71;
  float v72;
  uint64_t v73;
  unsigned int v74;
  float *v75;
  float v76;
  BOOL v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  float *v81;
  float v82;
  BOOL v83;
  int v84;
  char v85;
  char v86;
  float32x4_t v87;
  float v88;
  _QWORD *v89;
  unint64_t v90;
  int v91;
  _QWORD *v92;
  unint64_t v93;
  __int8 v94;
  float v95;
  int v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  float v101;
  float v102;
  _QWORD *v103;
  unint64_t v104;
  float32x2_t *v105;
  float v106;
  float v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  float32x4_t *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  float v117;
  unsigned int v118;
  float32x4_t v119;
  float v120;
  unint64_t v121;
  unsigned int v122;
  float *v123;
  float v124;
  float v125;
  _BOOL4 v126;
  unsigned int v127;
  float v128;
  float v129;
  _BOOL4 v130;
  int v131;
  float32x4_t v132;
  _QWORD *v133;
  unint64_t v134;
  float32x4_t *v135;
  int v136;
  float v137;
  _QWORD *v138;
  unint64_t v139;
  float32x2_t *v140;
  _BOOL4 v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  float v145;
  __int32 v146;
  float32x4_t v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float32x4_t v160;
  float v162;
  BOOL v164;
  uint64_t v165;
  unsigned int v166;
  float *v167;
  float v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  float32x4_t v172;
  float v173;
  int v174;
  float32x4_t v176;
  uint64_t v178;
  unsigned int v179;
  float *v180;
  float v181;
  int v182;
  char v183;
  char v184;
  float v185;
  unsigned int v186;
  float32x4_t v187;
  float v188;
  unint64_t v189;
  unsigned int v190;
  float *v191;
  float v192;
  float v193;
  _BOOL4 v194;
  unsigned int v195;
  float v196;
  float v197;
  _BOOL4 v198;
  unsigned int v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float32x4_t v205;
  float v207;
  _BOOL4 v209;
  unint64_t v210;
  float v211;
  float *v212;
  float v213;
  unsigned int v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float32_t v219;
  unint64_t v220;
  float v221;
  float *v222;
  float v223;
  unsigned int v224;
  float v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  float v230;
  __int128 v231;
  float32x4_t v232;
  float32x4_t v233;
  float v234;
  float32x2_t v235[9];
  float32x4_t v236;
  uint64_t v237[2];
  unint64_t *v238;
  std::__shared_weak_count *v239;
  std::string v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  _QWORD v243[2];
  unsigned __int8 v244;

  v231 = xmmword_19FFB34C0;
  v232 = 0u;
  v233 = 0u;
  v234 = 1.0;
  memset(v235, 0, 69);
  a1[9] = 0;
  v4 = a1[7];
  v5 = (std::__shared_weak_count *)a1[8];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v242 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v242 = 0;
  }
  v243[0] = 0;
  v243[1] = 0;
  v241 = v4;
  v244 = 0;
  if (v4)
    LODWORD(v4) = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v243);
  v244 = v4;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    LODWORD(v4) = v244;
  }
  if (!(_DWORD)v4)
    goto LABEL_138;
  v11 = *(_QWORD *)(v241 + 24);
  if (*(unsigned __int8 *)(a2 + 12) >= 0x17u)
    v12 = 23;
  else
    v12 = *(unsigned __int8 *)(a2 + 12);
  v13 = *(float **)v11;
  if (*(_QWORD *)v11
    && (v14 = *v13, LODWORD(v13) = *v13 == 1.0, *(_BYTE *)(v11 + 10))
    && (v14 != 0.0 ? (_ZF = v14 == 1.0) : (_ZF = 1), !_ZF)
    || (v16 = *(unsigned __int8 *)(v11 + v13 + 11), v16 == 2))
  {
    hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v241 + 24), 0x88u, v12, 0);
    v16 = 1;
    if (hasValueForKeyAtZAtEnd)
    {
      *((_BYTE *)a1 + 73) = 1;
      goto LABEL_31;
    }
  }
  v18 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v11, 0x88u, v12, v16);
  *((_BYTE *)a1 + 73) = v18;
  if (v18)
  {
LABEL_31:
    v19 = *a1;
    if (*a1)
      goto LABEL_82;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<std::string>(&v240, v11, 0x88u, v12, 2);
    v20 = *(uint64_t **)(*(_QWORD *)(a2 + 120) + 152);
    v21 = *(float *)(a2 + 20);
    v22 = (std::__shared_weak_count *)operator new(0x58uLL);
    v22->__shared_owners_ = 0;
    v23 = (unint64_t *)&v22->__shared_owners_;
    v22->__shared_weak_owners_ = 0;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
    v22[1].__shared_weak_owners_ = 0;
    v22[2].__vftable = 0;
    v22[1].__shared_owners_ = 0;
    LODWORD(v22[2].__shared_owners_) = 0;
    v22[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
    *(_QWORD *)&v24 = 0x100000001;
    *((_QWORD *)&v24 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v22[2].__shared_owners_ + 4) = v24;
    *(std::__shared_weak_count_vtbl **)((char *)&v22[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v22[3].__shared_owners_) = 0;
    v237[0] = (uint64_t)&v22[1];
    v237[1] = (uint64_t)v22;
    md::TextureManager::texture(&v238, v20, (uint64_t)&v240, v237, 0, v21);
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (v25)
    {
      v26 = v238;
      if (v238)
        goto LABEL_36;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v26 = v238;
      if (v238)
      {
LABEL_36:
        v27 = v26[4];
        v26 = (unint64_t *)v26[5];
        if (v26)
        {
          v28 = v26 + 1;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
LABEL_49:
        v38 = (std::__shared_weak_count *)a1[1];
        *a1 = v27;
        a1[1] = (unint64_t)v26;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
          v27 = *a1;
        }
        if (v27)
        {
          v41 = (char *)operator new(0x58uLL);
          v42 = (std::__shared_weak_count *)v41;
          *((_QWORD *)v41 + 1) = 0;
          v43 = (unint64_t *)(v41 + 8);
          *((_QWORD *)v41 + 2) = 0;
          *(_QWORD *)v41 = &off_1E42DED18;
          *((_QWORD *)v41 + 3) = &off_1E42B63B0;
          *((_QWORD *)v41 + 5) = 0;
          *((_QWORD *)v41 + 6) = 0;
          *((_QWORD *)v41 + 4) = 0;
          *((_DWORD *)v41 + 14) = 0;
          *(_OWORD *)(v41 + 60) = xmmword_19FFB2E60;
          *(_QWORD *)(v41 + 76) = 0x100000001;
          *((_DWORD *)v41 + 21) = 0;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          v45 = *(std::__shared_weak_count **)(v27 + 144);
          *(_QWORD *)(v27 + 136) = v41 + 24;
          *(_QWORD *)(v27 + 144) = v41;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          *(_BYTE *)(v27 + 130) = 1;
          do
            v48 = __ldaxr(v43);
          while (__stlxr(v48 - 1, v43));
        }
        else
        {
          v49 = *(_QWORD *)(a2 + 120);
          v51 = *(_QWORD *)(v49 + 136);
          v50 = *(_QWORD *)(v49 + 144);
          if (v50)
          {
            v52 = (unint64_t *)(v50 + 8);
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
          v42 = (std::__shared_weak_count *)a1[1];
          *a1 = v51;
          a1[1] = v50;
          if (!v42)
            goto LABEL_74;
          v54 = (unint64_t *)&v42->__shared_owners_;
          do
            v48 = __ldaxr(v54);
          while (__stlxr(v48 - 1, v54));
        }
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
LABEL_74:
        v55 = v239;
        if (v239)
        {
          v56 = (unint64_t *)&v239->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v240.__r_.__value_.__l.__data_);
        v19 = *a1;
LABEL_82:
        v58 = a1[1];
        if (v58)
        {
          v59 = (unint64_t *)(v58 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v35 = (std::__shared_weak_count *)a1[3];
        a1[2] = v19;
        a1[3] = v58;
        if (v35)
        {
          v61 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v61);
          while (__stlxr(v37 - 1, v61));
          goto LABEL_88;
        }
        goto LABEL_90;
      }
    }
    v27 = 0;
    goto LABEL_49;
  }
  v30 = *(_QWORD *)(a2 + 120);
  v32 = *(_QWORD *)(v30 + 136);
  v31 = *(_QWORD *)(v30 + 144);
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (std::__shared_weak_count *)a1[3];
  a1[2] = v32;
  a1[3] = v31;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
LABEL_88:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_90:
  md::getRoadWidths((uint64_t)&v241, (float *)((unint64_t)&v231 | 0xC), (float *)&v231 + 2, (char *)a1 + 79, *(float *)(a2 + 8));
  *(_QWORD *)&v231 = *((_QWORD *)&v231 + 1);
  if (*(_BYTE *)(a2 + 107))
  {
    v62 = *(float *)(a2 + 72);
    *((float *)&v231 + 2) = v62 * *((float *)&v231 + 2);
    *((float *)&v231 + 3) = v62 * *((float *)&v231 + 3);
  }
  v63 = *(_QWORD *)(v241 + 24);
  if ((int)*(float *)(a2 + 8) >= 0x17)
    v64 = 23;
  else
    v64 = (int)*(float *)(a2 + 8);
  v65 = *(float **)v63;
  if (!*(_QWORD *)v63
    || (v66 = *v65, LODWORD(v65) = *v65 == 1.0, !*(_BYTE *)(v63 + 10))
    || (v66 != 0.0 ? (v67 = v66 == 1.0) : (v67 = 1), v67))
  {
    v68 = *(unsigned __int8 *)(v63 + v65 + 11);
    v66 = 0.0;
    if (v68 != 2)
    {
      if (*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v241 + 24), 0x5Bu, v64, v68, 0))goto LABEL_106;
LABEL_138:
      *((_BYTE *)a1 + 72) = 0;
      goto LABEL_139;
    }
  }
  v240.__r_.__value_.__s.__data_[0] = 1;
  LOBYTE(v238) = 1;
  v69 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v63, 0x5Bu, v64, 0, &v240);
  v70 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v63, 0x5Bu, v64, 1, &v238);
  if (v66 < 1.0)
    v70 = v69;
  if (!v70)
    goto LABEL_138;
LABEL_106:
  v71 = fmaxf(*((float *)&v231 + 2), *((float *)&v231 + 3));
  v72 = *(float *)(a2 + 60);
  *((_BYTE *)a1 + 72) = v71 >= v72;
  if (v71 < v72)
    goto LABEL_139;
  v73 = *(_QWORD *)(v241 + 24);
  if ((int)*(float *)(a2 + 8) >= 0x17)
    v74 = 23;
  else
    v74 = (int)*(float *)(a2 + 8);
  v75 = *(float **)v73;
  if (!*(_QWORD *)v73
    || (v76 = *v75, LODWORD(v75) = *v75 == 1.0, !*(_BYTE *)(v73 + 10))
    || (v76 != 0.0 ? (v77 = v76 == 1.0) : (v77 = 1), v77))
  {
    v78 = *(unsigned __int8 *)(v73 + v75 + 11);
    if (v78 != 2)
    {
LABEL_120:
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v73, 0x1A2u, v74, v78))
        goto LABEL_123;
      goto LABEL_121;
    }
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v241 + 24), 0x1A2u, v74, 0) & 1) == 0)
  {
    v78 = 1;
    goto LABEL_120;
  }
LABEL_121:
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, v73, 0x1A2u, v74, 2u, 0);
  v236 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v240.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  if (!v235[8].i8[4])
    v235[8].i8[4] = 1;
LABEL_123:
  v79 = *(_QWORD *)(v241 + 24);
  if ((int)*(float *)(a2 + 8) >= 0x17)
    v80 = 23;
  else
    v80 = (int)*(float *)(a2 + 8);
  v81 = *(float **)v79;
  if (*(_QWORD *)v79
    && (v82 = *v81, LODWORD(v81) = *v81 == 1.0, *(_BYTE *)(v79 + 10))
    && (v82 != 0.0 ? (v83 = v82 == 1.0) : (v83 = 1), !v83)
    || (v84 = *(unsigned __int8 *)(v79 + v81 + 11), v82 = 0.0, v84 == 2))
  {
    v240.__r_.__value_.__s.__data_[0] = 1;
    LOBYTE(v238) = 1;
    v85 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v79, 0x6Cu, v80, 0, &v240);
    v86 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v79, 0x6Cu, v80, 1, &v238);
    if (v82 < 1.0)
      v86 = v85;
  }
  else
  {
    v86 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v241 + 24), 0x6Cu, v80, v84, 0);
  }
  v117 = *(float *)(a2 + 8);
  if (v86)
  {
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x5Cu, 2u, fminf(fmaxf(v117, 0.0), 23.0));
  }
  else
  {
    if ((int)v117 >= 0x17)
      v118 = 23;
    else
      v118 = (int)v117;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x5Cu, v118, 2u, 0);
  }
  v119 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v240.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  v232 = v119;
  v120 = *(float *)(a2 + 8);
  v121 = *(_QWORD *)(v241 + 24);
  if ((int)v120 >= 0x17)
    v122 = 23;
  else
    v122 = (int)v120;
  v123 = *(float **)v121;
  v124 = v119.f32[3];
  if (!*(_QWORD *)v121)
  {
    v126 = 0;
    goto LABEL_188;
  }
  v125 = *v123;
  v126 = *v123 == 1.0;
  if (!*(_BYTE *)(v121 + 10) || v125 == 0.0 || v125 == 1.0)
  {
LABEL_188:
    v127 = *(unsigned __int8 *)(v121 + v126 + 11);
    if (v127 != 2)
      goto LABEL_191;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v241 + 24), 0x114u, v122, 0) & 1) != 0)
    goto LABEL_192;
  v127 = 1;
LABEL_191:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v121, 0x114u, v122, v127))
  {
    v131 = 0;
    goto LABEL_240;
  }
LABEL_192:
  if (v124 > 0.0)
  {
    v128 = fminf(fmaxf(v120, 0.0), 23.0);
    if (v123)
    {
      v129 = *v123;
      v130 = *v123 == 1.0;
      if (*(_BYTE *)(v121 + 10) && v129 != 0.0 && v129 != 1.0)
        goto LABEL_236;
    }
    else
    {
      v130 = 0;
    }
    v151 = *(unsigned __int8 *)(v121 + v130 + 11);
    v129 = 0.0;
    if (v151 != 2)
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v121, 0x114u, v151, 0, v128);
      goto LABEL_238;
    }
LABEL_236:
    v240.__r_.__value_.__s.__data_[0] = 1;
    LOBYTE(v238) = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v121, 0x114u, 0, (BOOL *)&v240, v128);
    v153 = v152;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v121, 0x114u, 1u, (BOOL *)&v238, v128);
    v155 = v153 + (float)((float)(v154 - v153) * v129);
LABEL_238:
    v234 = v155;
    __asm { FMOV            V2.4S, #-1.0 }
    v160 = vaddq_f32(v232, _Q2);
    __asm { FMOV            V2.4S, #1.0 }
    v232 = vmlaq_n_f32(_Q2, v160, v155);
    v124 = v232.f32[3];
  }
  v131 = 1;
LABEL_240:
  v162 = v124 * *(float *)(a2 + 112);
  v232.f32[3] = v162;
  if (*((_BYTE *)a1 + 79))
  {
    v164 = v162 > 0.0 || *(_BYTE *)(a2 + 116) == 0;
    *((_BYTE *)a1 + 72) &= v164;
    goto LABEL_139;
  }
  v165 = *(_QWORD *)(v241 + 24);
  if ((int)*(float *)(a2 + 8) >= 0x17)
    v166 = 23;
  else
    v166 = (int)*(float *)(a2 + 8);
  v167 = *(float **)v165;
  if (*(_QWORD *)v165
    && (v168 = *v167, LODWORD(v167) = *v167 == 1.0, *(_BYTE *)(v165 + 10))
    && v168 != 0.0
    && v168 != 1.0
    || (v169 = *(unsigned __int8 *)(v165 + v167 + 11), v168 = 0.0, v169 == 2))
  {
    v230 = v168;
    v240.__r_.__value_.__s.__data_[0] = 1;
    LOBYTE(v238) = 1;
    v229 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v165, v166, 0, &v240);
    v170 = (uint64_t)vmla_n_f32((float32x2_t)v229, vsub_f32(*(float32x2_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(v165, v166, 1u, &v238), (float32x2_t)v229), v230);
  }
  else
  {
    v170 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(*(_QWORD *)(v241 + 24), v166, v169, 0);
  }
  v235[0] = (float32x2_t)v170;
  if (*(float *)&v170 <= 0.0)
  {
    *((_BYTE *)a1 + 76) = *((float *)&v170 + 1) > 0.0;
    if (*((float *)&v170 + 1) <= 0.0)
      goto LABEL_270;
  }
  else
  {
    *((_BYTE *)a1 + 76) = 1;
  }
  if ((int)*(float *)(a2 + 8) >= 0x17)
    v171 = 23;
  else
    v171 = (int)*(float *)(a2 + 8);
  gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x93u, v171, 2u, 0);
  v172 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v240.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(float32x4_t *)v235[1].f32 = v172;
  v173 = v172.f32[3];
  if (v172.f32[3] > 0.0)
    v174 = v131;
  else
    v174 = 0;
  if (v174 == 1)
  {
    __asm { FMOV            V2.4S, #-1.0 }
    v176 = vaddq_f32(v172, _Q2);
    __asm { FMOV            V2.4S, #1.0 }
    *(float32x4_t *)v235[1].f32 = vmlaq_n_f32(_Q2, v176, v234);
    v173 = v235[2].f32[1];
  }
  v235[2].f32[1] = v173 * *(float *)(a2 + 112);
LABEL_270:
  v178 = *(_QWORD *)(v241 + 24);
  if ((int)*(float *)(a2 + 8) >= 0x17)
    v179 = 23;
  else
    v179 = (int)*(float *)(a2 + 8);
  v180 = *(float **)v178;
  if (*(_QWORD *)v178
    && (v181 = *v180, LODWORD(v180) = *v180 == 1.0, *(_BYTE *)(v178 + 10))
    && v181 != 0.0
    && v181 != 1.0
    || (v182 = *(unsigned __int8 *)(v178 + v180 + 11), v181 = 0.0, v182 == 2))
  {
    v240.__r_.__value_.__s.__data_[0] = 1;
    LOBYTE(v238) = 1;
    v183 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v178, 0x6Bu, v179, 0, &v240);
    v184 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v178, 0x6Bu, v179, 1, &v238);
    if (v181 < 1.0)
      v184 = v183;
  }
  else
  {
    v184 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v241 + 24), 0x6Bu, v179, v182, 0);
  }
  v185 = *(float *)(a2 + 8);
  if (v184)
  {
    gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x5Du, 2u, fminf(fmaxf(v185, 0.0), 23.0));
  }
  else
  {
    if ((int)v185 >= 0x17)
      v186 = 23;
    else
      v186 = (int)v185;
    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x5Du, v186, 2u, 0);
  }
  v187 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v240.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  v233 = v187;
  v188 = *(float *)(a2 + 8);
  v189 = *(_QWORD *)(v241 + 24);
  if ((int)v188 >= 0x17)
    v190 = 23;
  else
    v190 = (int)v188;
  v191 = *(float **)v189;
  v192 = v187.f32[3];
  if (*(_QWORD *)v189)
  {
    v193 = *v191;
    v194 = *v191 == 1.0;
    if (*(_BYTE *)(v189 + 10) && v193 != 0.0 && v193 != 1.0)
      goto LABEL_298;
  }
  else
  {
    v194 = 0;
  }
  v195 = *(unsigned __int8 *)(v189 + v194 + 11);
  if (v195 != 2)
    goto LABEL_300;
LABEL_298:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v241 + 24), 0x115u, v190, 0) & 1) == 0)
  {
    v195 = 1;
LABEL_300:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v189, 0x115u, v190, v195))
      goto LABEL_312;
  }
  if (v192 > 0.0)
  {
    v196 = fminf(fmaxf(v188, 0.0), 23.0);
    if (v191)
    {
      v197 = *v191;
      v198 = *v191 == 1.0;
      if (*(_BYTE *)(v189 + 10) && v197 != 0.0 && v197 != 1.0)
        goto LABEL_309;
    }
    else
    {
      v198 = 0;
    }
    v199 = *(unsigned __int8 *)(v189 + v198 + 11);
    v197 = 0.0;
    if (v199 != 2)
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v189, 0x115u, v199, 0, v196);
      goto LABEL_311;
    }
LABEL_309:
    v240.__r_.__value_.__s.__data_[0] = 1;
    LOBYTE(v238) = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v189, 0x115u, 0, (BOOL *)&v240, v196);
    v201 = v200;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v189, 0x115u, 1u, (BOOL *)&v238, v196);
    v203 = v201 + (float)((float)(v202 - v201) * v197);
LABEL_311:
    __asm { FMOV            V2.4S, #-1.0 }
    v205 = vaddq_f32(v233, _Q2);
    __asm { FMOV            V2.4S, #1.0 }
    v233 = vmlaq_n_f32(_Q2, v205, v203);
    v192 = v233.f32[3];
  }
LABEL_312:
  v207 = v192 * *(float *)(a2 + 112);
  v233.f32[3] = v207;
  v209 = v232.f32[3] > 0.0 || *(_BYTE *)(a2 + 116) == 0;
  if (v207 > 0.0)
    v209 = 1;
  if (!*((_BYTE *)a1 + 72))
    v209 = 0;
  *((_BYTE *)a1 + 72) = v209;
  if (v209)
  {
    v210 = *(_QWORD *)(v241 + 24);
    v211 = fminf(fmaxf(*(float *)(a2 + 8), 0.0), 23.0);
    v212 = *(float **)v210;
    if (*(_QWORD *)v210
      && (v213 = *v212, LODWORD(v212) = *v212 == 1.0, *(_BYTE *)(v210 + 10))
      && v213 != 0.0
      && v213 != 1.0
      || (v214 = *(unsigned __int8 *)(v210 + v212 + 11), v213 = 0.0, v214 == 2))
    {
      v240.__r_.__value_.__s.__data_[0] = 1;
      LOBYTE(v238) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v210, 0x129u, 0, (BOOL *)&v240, v211);
      v216 = v215;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v210, 0x129u, 1u, (BOOL *)&v238, v211);
      v218 = v216 + (float)((float)(v217 - v216) * v213);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v241 + 24), 0x129u, v214, 0, v211);
    }
    if (v218 > 0.0)
    {
      *((_BYTE *)a1 + 77) = 1;
      v219 = *(float *)&v231 + v218 * 2.0;
      v235[5].f32[0] = *(float *)(a2 + 72) * v219;
      v235[5].f32[1] = v219;
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x12Au, 2u, fminf(fmaxf(*(float *)(a2 + 8), 0.0), 23.0));
      *(float32x4_t *)&v235[6].i32[1] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v240.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
      v235[8].i32[0] = vmuls_lane_f32(*(float *)(a2 + 112), *(float32x4_t *)&v235[6].i32[1], 3);
    }
    v220 = *(_QWORD *)(v241 + 24);
    v221 = fminf(fmaxf(*(float *)(a2 + 8), 0.0), 23.0);
    v222 = *(float **)v220;
    if (*(_QWORD *)v220
      && (v223 = *v222, LODWORD(v222) = *v222 == 1.0, *(_BYTE *)(v220 + 10))
      && v223 != 0.0
      && v223 != 1.0
      || (v224 = *(unsigned __int8 *)(v220 + v222 + 11), v223 = 0.0, v224 == 2))
    {
      v240.__r_.__value_.__s.__data_[0] = 1;
      LOBYTE(v238) = 1;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v220, 0x127u, 0, (BOOL *)&v240, v221);
      v226 = v225;
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v220, 0x127u, 1u, (BOOL *)&v238, v221);
      v228 = v226 + (float)((float)(v227 - v226) * v223);
    }
    else
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v241 + 24), 0x127u, v224, 0, v221);
    }
    if (v228 > 0.0)
    {
      *((_BYTE *)a1 + 75) = 1;
      v235[6].f32[0] = v228;
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v240, *(_QWORD *)(v241 + 24), 0x128u, 2u, fminf(fmaxf(*(float *)(a2 + 8), 0.0), 23.0));
      *(float32x4_t *)v235[3].f32 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v240.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
      v235[4].i32[1] = vmuls_lane_f32(*(float *)(a2 + 112), *(float32x4_t *)v235[3].f32, 3);
    }
  }
LABEL_139:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v241);
  if (!*((_BYTE *)a1 + 72))
    return;
  *((_DWORD *)a1 + 66) = 0;
  *(_DWORD *)((char *)a1 + 267) = 0;
  v88 = *(float *)(a2 + 68);
  if (*((_BYTE *)a1 + 73) || *((_BYTE *)a1 + 75))
  {
    v89 = (_QWORD *)a1[24];
    v90 = v89[1];
    *(_OWORD *)v89[9] = xmmword_19FFB5E20;
    *((_BYTE *)a1 + 268) = 1;
    v91 = *((unsigned __int8 *)a1 + 75);
    *((_BYTE *)a1 + 269) = v91;
    if (v89[8] > v90)
      v90 = v89[8];
    v89[7] = 0;
    v89[8] = v90;
    if (*((_BYTE *)a1 + 79))
      goto LABEL_145;
LABEL_149:
    v95 = v88 * (float)**(unsigned int **)(*(_QWORD *)(a2 + 120) + 120);
    *((_BYTE *)a1 + 270) = 0;
    v96 = *((unsigned __int8 *)a1 + 76);
    *((_BYTE *)a1 + 264) = v96;
    if (v96)
    {
      v97 = *(_QWORD **)(*(_QWORD *)a2 + 8);
      v98 = v97[1];
      if ((v98 & (v98 - 1)) != 0)
      {
        v100 = 0x1AF456233693CD46;
        if (v98 <= 0x1AF456233693CD46)
          v100 = 0x1AF456233693CD46 % v98;
        v99 = *(_QWORD **)(*v97 + 8 * v100);
        do
        {
          do
            v99 = (_QWORD *)*v99;
          while (v99[1] != 0x1AF456233693CD46);
        }
        while (v99[2] != 0x1AF456233693CD46);
      }
      else
      {
        v99 = *(_QWORD **)(*v97 + 8 * ((v98 - 1) & 0x1AF456233693CD46));
        do
        {
          do
            v99 = (_QWORD *)*v99;
          while (v99[1] != 0x1AF456233693CD46);
        }
        while (v99[2] != 0x1AF456233693CD46);
      }
      v101 = *(double *)(*(_QWORD *)(v99[5] + 32) + 40);
      v102 = cosf(v101);
      v103 = (_QWORD *)a1[10];
      v104 = v103[1];
      v105 = (float32x2_t *)v103[9];
      v105[2] = vmul_n_f32(vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(v235[0]), (float64x2_t)xmmword_19FFB5E30), *(float64x2_t *)(a2 + 40))), v102);
      *v105 = v235[1];
      v105[1].i32[0] = v235[2].i32[0];
      v106 = *((float *)&v231 + 2);
      v105[1].i32[1] = v235[2].i32[1];
      v105[3].f32[0] = v106 * 0.5;
      v105[3].f32[1] = v95;
      if (v103[8] > v104)
        v104 = v103[8];
      v103[7] = 0;
      v103[8] = v104;
    }
    if (v91)
    {
      v107 = v235[6].f32[0] / (*((float *)&v231 + 1) * 0.5);
      v108 = (_QWORD *)a1[16];
      v109 = v108[1];
      v110 = v108[9];
      *(float *)v110 = 1.0 - v107;
      *(float *)(v110 + 4) = 1.0 / v107;
      *(_QWORD *)(v110 + 8) = 0xBF80000040000000;
      if (v108[8] > v109)
        v109 = v108[8];
      v108[7] = 0;
      v108[8] = v109;
      v111 = (_QWORD *)a1[14];
      v112 = v111[1];
      v113 = (float32x4_t *)v111[9];
      v113[1].i64[0] = 0;
      *v113 = v232;
      v113[1].f32[2] = *((float *)&v231 + 3) * 0.5;
      v113[1].f32[3] = v95;
      if (v111[8] > v112)
        v112 = v111[8];
      v111[7] = 0;
      v111[8] = v112;
    }
    v94 = v235[8].i8[4];
    if (v235[8].i8[4])
    {
      v114 = (_QWORD *)a1[12];
      v115 = v114[1];
      if (v115)
        v116 = v114[9];
      else
        v116 = 0;
      v132 = v236;
      v133 = (_QWORD *)a1[18];
      v134 = v133[1];
      if (v134)
        v135 = (float32x4_t *)v133[9];
      else
        v135 = 0;
      *(_DWORD *)(v116 + 32) = v236.i32[0];
      *(_DWORD *)(v116 + 36) = v132.i32[1];
      *(_QWORD *)(v116 + 40) = v132.i64[1];
      v135[2] = v132;
      if (v135 && v134)
      {
        if (v133[8] > v134)
          v134 = v133[8];
        v133[7] = 0;
        v133[8] = v134;
      }
      if (v116 && v115)
      {
        if (v114[8] > v115)
          v115 = v114[8];
        v114[7] = 0;
        v114[8] = v115;
      }
    }
    v136 = *((unsigned __int8 *)a1 + 77);
    *((_BYTE *)a1 + 265) = v136;
    if (v136)
    {
      v137 = INFINITY;
      if ((float)(*(float *)&v231 / v235[5].f32[1]) < 1.0)
        v137 = 1.0 / (float)(1.0 - (float)(*(float *)&v231 / v235[5].f32[1]));
      v138 = (_QWORD *)a1[20];
      v139 = v138[1];
      v140 = (float32x2_t *)v138[9];
      *v140 = *(float32x2_t *)((char *)&v235[6] + 4);
      v140[1].i32[0] = v235[7].i32[1];
      v140[1].i32[1] = v235[8].i32[0];
      v140[2].f32[0] = v235[5].f32[0] * 0.5;
      v140[2].f32[1] = v95;
      v140[3].f32[0] = v137;
      if (v138[8] > v139)
        v139 = v138[8];
      v138[7] = 0;
      v138[8] = v139;
    }
    v141 = v233.f32[3] > 0.0;
    if (*((float *)&v231 + 2) <= 0.0)
      v141 = 0;
    *((_BYTE *)a1 + 266) = v141;
    if (v141)
    {
      v142 = (_QWORD *)a1[18];
      v143 = v142[1];
      v144 = v142[9];
      *(_QWORD *)(v144 + 16) = 0;
      *(_QWORD *)v144 = v233.i64[0];
      *(_DWORD *)(v144 + 8) = v233.i32[2];
      v145 = *((float *)&v231 + 2);
      *(_DWORD *)(v144 + 12) = v233.i32[3];
      *(float *)(v144 + 24) = v145 * 0.5;
      *(float *)(v144 + 28) = v95;
      if (v142[8] > v143)
        v143 = v142[8];
      v142[7] = 0;
      v142[8] = v143;
    }
    v146 = v232.i32[3];
    if (v232.f32[3] <= 0.0)
    {
      *((_BYTE *)a1 + 267) = 0;
    }
    else
    {
      v147 = v232;
      if (v91)
      {
        *(float32x2_t *)v87.f32 = v235[3];
        v87.i32[2] = v235[4].i32[0];
        v147 = vmlaq_n_f32(v232, vsubq_f32(v87, v232), v235[4].f32[1]);
      }
      v148 = (_QWORD *)a1[12];
      v149 = v148[1];
      v150 = v148[9];
      *(_QWORD *)(v150 + 16) = 0;
      *(_QWORD *)v150 = v147.i64[0];
      *(_DWORD *)(v150 + 8) = v147.i32[2];
      *(_DWORD *)(v150 + 12) = v146;
      *(float *)(v150 + 24) = *((float *)&v231 + 3) * 0.5;
      *(float *)(v150 + 28) = v95;
      *((_BYTE *)a1 + 267) = (*((_BYTE *)a1 + 73) | v91) ^ 1;
      if (v148[8] > v149)
        v149 = v148[8];
      v148[7] = 0;
      v148[8] = v149;
    }
    goto LABEL_232;
  }
  v91 = 0;
  if (!*((_BYTE *)a1 + 79))
    goto LABEL_149;
LABEL_145:
  v92 = (_QWORD *)a1[22];
  v93 = v92[1];
  *(float32x4_t *)v92[9] = v232;
  if (v92[8] > v93)
    v93 = v92[8];
  v92[7] = 0;
  v92[8] = v93;
  *((_DWORD *)a1 + 66) = 0;
  *((_BYTE *)a1 + 270) = 1;
  v94 = v235[8].i8[4];
LABEL_232:
  *((_BYTE *)a1 + 48) = v94;
}

void sub_19F1309A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v1 - 152);
  _Unwind_Resume(a1);
}

void md::RoadLayer::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  double *v18;
  float v19;
  long double v20;
  double v21;
  double v22;
  __double2 v23;
  double v24;
  __double2 v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  _QWORD *v31;
  int8x8_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  float *v46;
  double v47;
  unint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  os_log_type_t v68;
  int v69;
  _BOOL4 v70;
  uint64_t **v71;
  void *v72;
  __int8 v73;
  int8x16_t v74;
  uint64_t *v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t **v94;
  uint64_t **v95;
  unint64_t v96;
  BOOL v97;
  _QWORD *v98;
  char *v99;
  unint64_t *v100;
  __int128 v101;
  unsigned __int8 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  char v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int32x4_t v122;
  int8x16_t v123;
  int32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int16x8_t v134;
  int32x4_t v135;
  int8x16_t v136;
  int16x8_t v137;
  int32x4_t v138;
  int8x16_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int8x16_t v163;
  int16x8_t v164;
  int32x4_t v165;
  int8x16_t v166;
  int32x4_t v167;
  int8x16_t v168;
  int32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int32x4_t v175;
  int8x16_t v176;
  int32x4_t v177;
  int8x16_t v178;
  int32x4_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t **v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  ggl::PipelineSetup *v194;
  ggl::PipelineSetup *v195;
  ggl::PipelineSetup *v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  _BOOL4 v213;
  uint64_t v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *p_shared_owners;
  unint64_t v222;
  int v223;
  std::__shared_weak_count *v224;
  uint64_t *v225;
  unint64_t v226;
  ggl::SolidRibbonShader *v227;
  unsigned __int8 v228;
  unsigned __int8 v229;
  unsigned __int8 v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  unsigned __int8 v233;
  uint64_t *v234;
  uint64_t v235;
  __int8 v236;
  __int8 v237;
  __int8 v238;
  __int8 v239;
  _BOOL4 v240;
  __int8 v241;
  uint64_t v242;
  char *v243;
  std::__shared_weak_count *v244;
  _BYTE v245[28];
  _BYTE buf[32];
  uint64_t v247;

  v2 = a2;
  v247 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 56))
  {
    v4 = *(_QWORD *)(a1 + 200);
    v5 = (uint64_t *)(v4 + 80);
    v6 = (uint64_t *)(v4 + 104);
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 200);
    v8 = v7 + 9;
    v9 = v7 + 12;
    v10 = v7 + 11;
    v11 = v7 + 14;
    if (*(_BYTE *)(a2 + 105))
      v6 = v11;
    else
      v6 = v9;
    if (*(_BYTE *)(a2 + 105))
      v5 = v10;
    else
      v5 = v8;
  }
  v12 = *v5;
  v13 = *v6;
  if (*(_BYTE *)(a2 + 104))
  {
    v14 = *(_QWORD **)(*(_QWORD *)a2 + 8);
    v15 = v14[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      v17 = 0x1AF456233693CD46;
      if (v15 <= 0x1AF456233693CD46)
        v17 = 0x1AF456233693CD46 % v15;
      v16 = *(_QWORD **)(*v14 + 8 * v17);
      do
      {
        do
          v16 = (_QWORD *)*v16;
        while (v16[1] != 0x1AF456233693CD46);
      }
      while (v16[2] != 0x1AF456233693CD46);
    }
    else
    {
      v16 = *(_QWORD **)(*v14 + 8 * ((v15 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          v16 = (_QWORD *)*v16;
        while (v16[1] != 0x1AF456233693CD46);
      }
      while (v16[2] != 0x1AF456233693CD46);
    }
    v18 = *(double **)(v16[5] + 32);
    v19 = *(float *)(a2 + 64);
    v20 = v18[64];
    v21 = sqrt(v18[62] * v18[62] + v18[63] * v18[63]);
    v22 = atan2(v20, v21 * 0.996647189);
    v23 = __sincos_stret(v22);
    v24 = atan2(v20 + v23.__sinval * v23.__sinval * 42841.3115 * v23.__sinval, v21 + v23.__cosval * v23.__cosval * -42697.6727 * v23.__cosval);
    v25 = __sincos_stret(v24);
    v26 = v21 / v25.__cosval + -6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
    v27 = fmaxf(fminf(fmaxf((float)(v26 * 0.00021053) + -0.10526, 0.0), 1.0) * fminf(fmaxf(v19, 0.2), 1.0), 0.0);
    v28 = (float)(v27 * -200000.0) + -5000.0;
    v29 = v27 <= 1.0;
    v30 = -205000.0;
    if (v29)
      v30 = v28;
    *(float *)(v12 + 40) = v30;
  }
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  v31 = *(_QWORD **)(*(_QWORD *)v2 + 8);
  v32 = (int8x8_t)v31[1];
  if (!*(_QWORD *)&v32)
    goto LABEL_52;
  v33 = (uint8x8_t)vcnt_s8(v32);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    v34 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v32 <= 0x1AF456233693CD46uLL)
      v34 = 0x1AF456233693CD46uLL % *(_QWORD *)&v32;
  }
  else
  {
    v34 = (*(_QWORD *)&v32 - 1) & 0x1AF456233693CD46;
  }
  v35 = *(_QWORD **)(*v31 + 8 * v34);
  if (!v35)
    goto LABEL_52;
  v36 = (_QWORD *)*v35;
  if (!v36)
    goto LABEL_52;
  if (v33.u32[0] < 2uLL)
  {
    while (1)
    {
      v38 = v36[1];
      if (v38 == 0x1AF456233693CD46)
      {
        if (v36[2] == 0x1AF456233693CD46)
          goto LABEL_45;
      }
      else if ((v38 & (*(_QWORD *)&v32 - 1)) != v34)
      {
        goto LABEL_52;
      }
      v36 = (_QWORD *)*v36;
      if (!v36)
        goto LABEL_52;
    }
  }
  while (1)
  {
    v37 = v36[1];
    if (v37 == 0x1AF456233693CD46)
      break;
    if (v37 >= *(_QWORD *)&v32)
      v37 %= *(_QWORD *)&v32;
    if (v37 != v34)
      goto LABEL_52;
LABEL_34:
    v36 = (_QWORD *)*v36;
    if (!v36)
      goto LABEL_52;
  }
  if (v36[2] != 0x1AF456233693CD46)
    goto LABEL_34;
LABEL_45:
  v39 = v36[5];
  if (*(_QWORD *)(v39 + 8) != 0x1AF456233693CD46)
  {
LABEL_52:
    v40 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_53;
LABEL_47:
    if ((*(_QWORD *)&v32 & (*(_QWORD *)&v32 - 1)) != 0)
    {
      v48 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v32 <= 0x8BD499FBD96FBB9ELL)
        v48 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v32;
      v41 = *(_QWORD **)(*v31 + 8 * v48);
      do
      {
        do
          v41 = (_QWORD *)*v41;
        while (v41[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v41[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v41 = *(_QWORD **)(*v31 + 8 * ((*(_QWORD *)&v32 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v41 = (_QWORD *)*v41;
        while (v41[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v41[2] != 0x8BD499FBD96FBB9ELL);
    }
    v49 = 0.0;
    if (**(_BYTE **)(v41[5] + 32) && *(_BYTE *)(a1 + 152))
      v49 = *(double *)(v40 + 24) * 0.0000000249532021 * (double)(1 << *(_BYTE *)(a1 + 129));
    v50 = *(_QWORD *)(a1 + 160);
    if ((*(_BYTE *)(v50 + 16) & 2) == 0)
    {
      v51 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v51 != -1)
      {
        *(_QWORD *)buf = &v243;
        *(_QWORD *)v245 = buf;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v245, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v46 = *(float **)(v50 + 72);
    v47 = v49;
    goto LABEL_71;
  }
  v40 = *(_QWORD *)(v39 + 32);
  if (!*(_BYTE *)(v40 + 3776))
    goto LABEL_47;
LABEL_53:
  v42 = *(_QWORD *)(a1 + 120);
  if (!v42)
  {
    v44 = *(_QWORD *)(a1 + 160);
    if ((*(_BYTE *)(v44 + 16) & 2) == 0)
    {
      v45 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v45 != -1)
      {
        *(_QWORD *)buf = &v243;
        *(_QWORD *)v245 = buf;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v245, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v46 = *(float **)(v44 + 72);
    v47 = 0.0;
LABEL_71:
    v43 = ggl::CullingGrid::intersectedCellsForView(v46, v47);
    goto LABEL_72;
  }
  v43 = gdc::GlobeTileGrid::intersectWithFrustum(v42, (const double *)(v40 + 984), *(double *)(v40 + 24));
LABEL_72:
  v52 = *(_QWORD *)(a1 + 8);
  v53 = *(_QWORD *)(a1 + 16);
  if (v52 != v53)
  {
    do
    {
      v55 = *(_BYTE **)v52;
      v56 = *(uint64_t **)(*(_QWORD *)v52 + 1016);
      v57 = *(uint64_t **)(*(_QWORD *)v52 + 1024);
      if (v56 == v57)
      {
        v54 = 0;
      }
      else
      {
        v54 = 0;
        do
        {
          v58 = *v56++;
          v59 = (*(_DWORD *)(v58 + 96) & v43) != 0;
          v54 |= v59;
          *(_BYTE *)(v58 + 48) = v59;
        }
        while (v56 != v57);
      }
      v55[136] = v54 & 1;
      v55[264] = v54 & 1;
      v55[392] = v54 & 1;
      v55[520] = v54 & 1;
      v55[648] = v54 & 1;
      v55[776] = v54 & 1;
      v55[904] = v54 & 1;
      v52 += 8;
      v55[1040] = v54 & 1;
    }
    while (v52 != v53);
    v61 = *(uint64_t **)(a1 + 8);
    v60 = *(uint64_t **)(a1 + 16);
    if (v61 != v60)
    {
      v234 = *(uint64_t **)(a1 + 16);
      v235 = v2;
      while (1)
      {
        v62 = *v61;
        if (!*(_BYTE *)(*v61 + 1040))
          goto LABEL_82;
        v63 = *(_QWORD *)(v62 + 1072);
        if (!v63)
          break;
LABEL_95:
        v69 = *(unsigned __int8 *)(v63 + 72);
        *(_BYTE *)(v62 + 136) = v69;
        *(_BYTE *)(v62 + 264) = v69;
        *(_BYTE *)(v62 + 392) = v69;
        *(_BYTE *)(v62 + 520) = v69;
        *(_BYTE *)(v62 + 648) = v69;
        *(_BYTE *)(v62 + 776) = v69;
        *(_BYTE *)(v62 + 904) = v69;
        *(_BYTE *)(v62 + 1040) = v69;
        if (v69)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 1120) + 96) + 8) = *(_QWORD *)(v63 + 16);
          **(_QWORD **)(*(_QWORD *)(v62 + 1128) + 96) = *(_QWORD *)(*(_QWORD *)(v62 + 1072) + 16);
          if (*(_BYTE *)(v2 + 76))
            v70 = *(_BYTE *)(*(_QWORD *)(v62 + 1072) + 48) != 0;
          else
            v70 = 0;
          v71 = *(uint64_t ***)(*(_QWORD *)(v62 + 8) + 200);
          v242 = *(_QWORD *)(v2 + 96);
          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          v241 = objc_msgSend(v72, "enableTileClippingDebug");

          v73 = *(_BYTE *)(v2 + 117);
          v74.i16[3] = 0;
          v74.i8[8] = 0;
          v74.i16[5] = 0;
          v74.i32[3] = 0;
          v239 = *(_BYTE *)(v2 + 88);
          v74.i8[0] = v239;
          v238 = *(_BYTE *)(v2 + 106);
          v74.i8[1] = v238;
          v237 = *(_BYTE *)(v2 + 107);
          v74.i8[2] = v237;
          v74.i8[3] = v70;
          v74.i8[4] = v242 != 0;
          v74.i8[5] = v241;
          v74.i8[9] = v73;
          v75 = *v71;
          v76 = vceqzq_s8(v74);
          v77 = vmovl_s8(*(int8x8_t *)v76.i8);
          v78 = vmovl_high_s16(v77);
          v79.i64[0] = v78.u32[2];
          v79.i64[1] = v78.u32[3];
          v80 = v79;
          v81 = vmovl_high_s8(v76);
          v82 = vmovl_high_s16(v81);
          v79.i64[0] = v82.u32[2];
          v79.i64[1] = v82.u32[3];
          v83 = v79;
          v84 = vmovl_s16(*(int16x4_t *)v77.i8);
          v79.i64[0] = v84.u32[2];
          v79.i64[1] = v84.u32[3];
          v85 = v79;
          v86 = vmovl_s16(*(int16x4_t *)v81.i8);
          v79.i64[0] = v86.u32[2];
          v79.i64[1] = v86.u32[3];
          v87 = v79;
          v79.i64[0] = v78.u32[0];
          v79.i64[1] = v78.u32[1];
          v88 = v79;
          v79.i64[0] = v82.u32[0];
          v79.i64[1] = v82.u32[1];
          v89 = v79;
          v79.i64[0] = v84.u32[0];
          v79.i64[1] = v84.u32[1];
          v90 = v79;
          v79.i64[0] = v86.u32[0];
          v79.i64[1] = v86.u32[1];
          v91 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v90), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v79)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v88), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v89))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v85), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v87)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v80), vbicq_s8((int8x16_t)xmmword_19FFB3080, v83)))));
          v92 = v91;
          v94 = (uint64_t **)(v75 + 13);
          v93 = (_QWORD *)v75[13];
          v240 = v70;
          if (!v93)
            goto LABEL_110;
          v95 = (uint64_t **)(v75 + 13);
          do
          {
            v96 = v93[4];
            v97 = v96 >= v91;
            if (v96 >= v91)
              v98 = v93;
            else
              v98 = v93 + 1;
            if (v97)
              v95 = (uint64_t **)v93;
            v93 = (_QWORD *)*v98;
          }
          while (*v98);
          if (v95 != v94 && v91 >= (unint64_t)v95[4])
          {
            v193 = (uint64_t)v95[5];
            v220 = (std::__shared_weak_count *)v95[6];
            v243 = (char *)v193;
            v244 = v220;
            if (v220)
            {
              p_shared_owners = (unint64_t *)&v220->__shared_owners_;
              do
                v222 = __ldxr(p_shared_owners);
              while (__stxr(v222 + 1, p_shared_owners));
            }
          }
          else
          {
LABEL_110:
            v99 = (char *)operator new(0x198uLL);
            v236 = v73;
            *((_QWORD *)v99 + 1) = 0;
            v100 = (unint64_t *)(v99 + 8);
            *((_QWORD *)v99 + 2) = 0;
            *(_QWORD *)v99 = &off_1E42DEA78;
            v101 = *((_OWORD *)v75 + 2);
            *(_OWORD *)buf = *((_OWORD *)v75 + 1);
            *(_OWORD *)&buf[16] = v101;
            if ((v102 & 1) == 0)
            {
              if ((_DWORD)v227)
              {
                if ((v228 & 1) == 0)
                {
                  if ((_DWORD)v227)
                  {
                    if ((v231 & 1) == 0
                    {
                      if ((v233 & 1) == 0
                      {
                        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
                      }
                      ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
                      unk_1ECE43DB8 = 1;
                    }
                    ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
                    *(_QWORD *)algn_1ECE38DC8 = &ggl::SolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
                    qword_1ECE38DD0 = 0;
                    if ((v232 & 1) == 0
                    {
                      ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
                      unk_1ECE38E00 = ggl::Tile::Transform::reflection(void)::reflection;
                      qword_1ECE38E08 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
                      unk_1ECE38E10 = ggl::Tile::Clipping::reflection(void)::reflection;
                    }
                    qword_1ECE38DD8 = (uint64_t)&ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
                    unk_1ECE38DE0 = xmmword_19FFB2F50;
                  }
                }
                ggl::SolidRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref;
                ggl::SolidRibbonShader::typedReflection(v227);
                qword_1ECE30F00 = (uint64_t)&ggl::SolidRibbonShader::typedReflection(void)::ref;
                if ((v229 & 1) == 0
                {
                  ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
                  unk_1EE57AE30 = 0;
                  qword_1EE57AE38 = (uint64_t)"";
                  dword_1EE57AE40 = 0;
                  qword_1EE57AE48 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
                  unk_1EE57AE50 = 4;
                }
                qword_1ECE30F08 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
                unk_1ECE30F10 = 1;
                qword_1ECE30F18 = 0;
                unk_1ECE30F20 = 2;
                qword_1ECE30F28 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
                unk_1ECE30F30 = 0;
                if ((v230 & 1) == 0
                {
                  ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
                  unk_1EE57AD70 = 0;
                  qword_1EE57AD78 = (uint64_t)"view";
                  dword_1EE57AD80 = 3;
                  qword_1EE57AD88 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
                  *(_OWORD *)algn_1EE57AD90 = xmmword_19FFB35A0;
                  qword_1EE57ADA0 = 1;
                  qword_1EE57ADA8 = (uint64_t)"transform";
                  dword_1EE57ADB0 = 3;
                  qword_1EE57ADB8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
                  unk_1EE57ADC0 = xmmword_19FFB3660;
                  qword_1EE57ADD0 = 2;
                  unk_1EE57ADD8 = "style";
                  dword_1EE57ADE0 = 3;
                  qword_1EE57ADE8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
                  *(_OWORD *)algn_1EE57ADF0 = xmmword_19FFB38C0;
                  qword_1EE57AE00 = 3;
                  unk_1EE57AE08 = "tileClipping";
                  dword_1EE57AE10 = 3;
                  qword_1EE57AE18 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTileClippingBinding(void)::reflection;
                  unk_1EE57AE20 = 2;
                }
                qword_1ECE30F38 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
                unk_1ECE30F40 = 4;
              }
            }
            v103 = *v75;
            v104 = (std::__shared_weak_count *)v75[1];
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            *(_OWORD *)v245 = *((_OWORD *)v75 + 3);
            *(_OWORD *)&v245[12] = *(_OWORD *)((char *)v75 + 60);
            v107 = *(_OWORD *)((char *)v75 + 76);
            v108 = *((_BYTE *)v75 + 92);
            *((_DWORD *)v99 + 14) = 0;
            *((_QWORD *)v99 + 5) = 0;
            *((_QWORD *)v99 + 6) = 0;
            *((_QWORD *)v99 + 3) = &off_1E42B6760;
            *((_QWORD *)v99 + 4) = 0;
            *((_QWORD *)v99 + 8) = &ggl::SolidRibbon::PipelineState::typedReflection(void)::ref;
            *((_QWORD *)v99 + 9) = v103;
            *((_QWORD *)v99 + 10) = v104;
            if (v104)
            {
              v109 = (unint64_t *)&v104->__shared_owners_;
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            v99[136] = 0;
            *(_OWORD *)(v99 + 140) = xmmword_19FFB3060;
            *(_QWORD *)(v99 + 156) = 0;
            *(_QWORD *)(v99 + 172) = 0;
            *(_QWORD *)(v99 + 164) = 0;
            v99[184] = 0;
            *(_OWORD *)(v99 + 188) = xmmword_19FFB3060;
            *(_QWORD *)(v99 + 204) = 0;
            *(_QWORD *)(v99 + 220) = 0;
            *(_QWORD *)(v99 + 212) = 0;
            v99[232] = 0;
            *(_OWORD *)(v99 + 236) = xmmword_19FFB3060;
            *(_QWORD *)(v99 + 252) = 0;
            *(_QWORD *)(v99 + 268) = 0;
            *(_QWORD *)(v99 + 260) = 0;
            v111 = *(_OWORD *)&buf[16];
            *(_OWORD *)(v99 + 280) = *(_OWORD *)buf;
            *(_OWORD *)(v99 + 296) = v111;
            v99[312] = 0;
            *((_QWORD *)v99 + 48) = 0;
            *((_OWORD *)v99 + 22) = 0u;
            *((_OWORD *)v99 + 23) = 0u;
            *((_OWORD *)v99 + 20) = 0u;
            *((_OWORD *)v99 + 21) = 0u;
            *((_QWORD *)v99 + 49) = 0x100000001;
            v99[400] = 0;
            *(_OWORD *)(v99 + 100) = *(_OWORD *)&v245[12];
            *(_OWORD *)(v99 + 88) = *(_OWORD *)v245;
            *(_OWORD *)(v99 + 116) = v107;
            v99[132] = v108;
            if (v104)
            {
              v112 = (unint64_t *)&v104->__shared_owners_;
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            v99[329] = v239;
            v99[330] = v238;
            v99[331] = v237;
            v99[332] = v240;
            v99[333] = v242 != 0;
            v99[334] = v241;
            *(_WORD *)(v99 + 335) = 0;
            v99[337] = 0;
            v99[338] = v236;
            v99[339] = 0;
            v114 = vceqzq_s8(*(int8x16_t *)(v99 + 328));
            v115 = vmovl_high_s8(v114);
            v116 = vmovl_s16(*(int16x4_t *)v115.i8);
            v117.i64[0] = v116.u32[0];
            v117.i64[1] = v116.u32[1];
            v118 = v117;
            v119 = vmovl_s8(*(int8x8_t *)v114.i8);
            v120 = vmovl_s16(*(int16x4_t *)v119.i8);
            v117.i64[0] = v120.u32[0];
            v117.i64[1] = v120.u32[1];
            v121 = v117;
            v122 = vmovl_high_s16(v115);
            v117.i64[0] = v122.u32[0];
            v117.i64[1] = v122.u32[1];
            v123 = v117;
            v124 = vmovl_high_s16(v119);
            v117.i64[0] = v124.u32[0];
            v117.i64[1] = v124.u32[1];
            v125 = v117;
            v117.i64[0] = v116.u32[2];
            v117.i64[1] = v116.u32[3];
            v126 = v117;
            v117.i64[0] = v120.u32[2];
            v117.i64[1] = v120.u32[3];
            v127 = v117;
            v117.i64[0] = v122.u32[2];
            v117.i64[1] = v122.u32[3];
            v128 = v117;
            v117.i64[0] = v124.u32[2];
            v117.i64[1] = v124.u32[3];
            v129 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v117);
            v130 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v128);
            v131 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v127);
            v132 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v123);
            v133 = vceqzq_s8(*(int8x16_t *)(v99 + 344));
            v134 = vmovl_high_s8(v133);
            v135 = vmovl_s16(*(int16x4_t *)v134.i8);
            v117.i64[0] = v135.u32[0];
            v117.i64[1] = v135.u32[1];
            v136 = v117;
            v137 = vmovl_s8(*(int8x8_t *)v133.i8);
            v138 = vmovl_s16(*(int16x4_t *)v137.i8);
            v117.i64[0] = v138.u32[0];
            v117.i64[1] = v138.u32[1];
            v139 = v117;
            v140 = vmovl_high_s16(v134);
            v117.i64[0] = v140.u32[0];
            v117.i64[1] = v140.u32[1];
            v141 = v117;
            v142 = vmovl_high_s16(v137);
            v117.i64[0] = v142.u32[0];
            v117.i64[1] = v142.u32[1];
            v143 = v117;
            v117.i64[0] = v135.u32[2];
            v117.i64[1] = v135.u32[3];
            v144 = v117;
            v117.i64[0] = v138.u32[2];
            v117.i64[1] = v138.u32[3];
            v145 = v117;
            v117.i64[0] = v140.u32[2];
            v117.i64[1] = v140.u32[3];
            v146 = v117;
            v117.i64[0] = v142.u32[2];
            v117.i64[1] = v142.u32[3];
            v147 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v146);
            v148 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v136), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v118));
            v149 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v139), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v121));
            v150 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v141), v132);
            v151 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v143), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v125));
            v152 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v144), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v126));
            v153 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v145), v131);
            v154 = vorrq_s8(v147, v130);
            v155 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v117), v129);
            v156 = vceqzq_s8(*(int8x16_t *)(v99 + 360));
            v157 = vmovl_s8(*(int8x8_t *)v156.i8);
            v158 = vmovl_high_s8(v156);
            v159 = vmovl_s16(*(int16x4_t *)v158.i8);
            v160 = vceqzq_s8(*(int8x16_t *)(v99 + 376));
            v161 = vmovl_high_s8(v160);
            v162 = vmovl_s16(*(int16x4_t *)v161.i8);
            v117.i64[0] = v162.i32[0];
            v117.i64[1] = v162.i32[1];
            v163 = v117;
            v164 = vmovl_s8(*(int8x8_t *)v160.i8);
            v165 = vmovl_s16(*(int16x4_t *)v164.i8);
            v117.i64[0] = v165.i32[0];
            v117.i64[1] = v165.i32[1];
            v166 = v117;
            v167 = vmovl_high_s16(v161);
            v117.i64[0] = v167.i32[0];
            v117.i64[1] = v167.i32[1];
            v168 = v117;
            v169 = vmovl_high_s16(v164);
            v117.i64[0] = v169.i32[0];
            v117.i64[1] = v169.i32[1];
            v170 = v117;
            v117.i64[0] = v162.i32[2];
            v117.i64[1] = v162.i32[3];
            v171 = v117;
            v117.i64[0] = v165.i32[2];
            v117.i64[1] = v165.i32[3];
            v172 = v117;
            v117.i64[0] = v167.i32[2];
            v117.i64[1] = v167.i32[3];
            v173 = v117;
            v117.i64[0] = v169.i32[2];
            v117.i64[1] = v169.i32[3];
            v174 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v117);
            v117.i64[0] = v159.i32[0];
            v117.i64[1] = v159.i32[1];
            v175 = vmovl_s16(*(int16x4_t *)v157.i8);
            v176 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v163), vbicq_s8((int8x16_t)xmmword_19FFB3160, v117)), v148);
            v117.i64[0] = v175.i32[0];
            v117.i64[1] = v175.i32[1];
            v177 = vmovl_high_s16(v158);
            v178 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v166), vbicq_s8((int8x16_t)xmmword_19FFB3170, v117)), v149);
            v117.i64[0] = v177.i32[0];
            v117.i64[1] = v177.i32[1];
            v179 = vmovl_high_s16(v157);
            v180 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v168), vbicq_s8((int8x16_t)xmmword_19FFB3180, v117)), v150);
            v117.i64[0] = v179.i32[0];
            v117.i64[1] = v179.i32[1];
            v181 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v170), vbicq_s8((int8x16_t)xmmword_19FFB3190, v117)), v151);
            v117.i64[0] = v159.i32[2];
            v117.i64[1] = v159.i32[3];
            v182 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v171), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v117)), v152);
            v117.i64[0] = v175.i32[2];
            v117.i64[1] = v175.i32[3];
            v183 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v172), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v117)), v153);
            v117.i64[0] = v177.i32[2];
            v117.i64[1] = v177.i32[3];
            v184 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v173), vbicq_s8((int8x16_t)xmmword_19FFB31C0, v117)), v154);
            v117.i64[0] = v179.i32[2];
            v117.i64[1] = v179.i32[3];
            *((_QWORD *)v99 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v178, v176), vorrq_s8(v181, v180)), (int64x2_t)vorrq_s8(vorrq_s8(v183, v182), vorrq_s8(vorrq_s8(vorrq_s8(v174, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v117)), v155), v184))));
            *((_QWORD *)v99 + 3) = &off_1E42B5E88;
            v99[312] = 1;
            v243 = v99 + 24;
            v244 = (std::__shared_weak_count *)v99;
            *(_QWORD *)buf = v92;
            *(_QWORD *)&buf[8] = v99 + 24;
            *(_QWORD *)&buf[16] = v99;
            do
              v185 = __ldxr(v100);
            while (__stxr(v185 + 1, v100));
            v186 = *v94;
            v187 = (uint64_t **)(v75 + 13);
            if (*v94)
            {
              while (1)
              {
                while (1)
                {
                  v187 = (uint64_t **)v186;
                  v188 = v186[4];
                  if (v92 >= v188)
                    break;
                  v186 = *v187;
                  v94 = v187;
                  if (!*v187)
                    goto LABEL_131;
                }
                if (v188 >= v92)
                  break;
                v186 = v187[1];
                if (!v186)
                {
                  v94 = v187 + 1;
                  goto LABEL_131;
                }
              }
LABEL_134:
              v191 = (unint64_t *)(v99 + 8);
              do
                v192 = __ldaxr(v191);
              while (__stlxr(v192 - 1, v191));
              if (!v192)
              {
                (*(void (**)(char *))(*(_QWORD *)v99 + 16))(v99);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v99);
              }
            }
            else
            {
LABEL_131:
              v189 = (uint64_t *)operator new(0x38uLL);
              v189[4] = v92;
              v189[5] = (uint64_t)(v99 + 24);
              v189[6] = (uint64_t)v99;
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)&buf[16] = 0;
              *v189 = 0;
              v189[1] = 0;
              v189[2] = (uint64_t)v187;
              *v94 = v189;
              v190 = *(_QWORD *)v75[12];
              if (v190)
              {
                v75[12] = v190;
                v189 = *v94;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v75[13], v189);
              ++v75[14];
              v99 = *(char **)&buf[16];
              if (*(_QWORD *)&buf[16])
                goto LABEL_134;
            }
            v193 = (uint64_t)v243;
          }
          v194 = *(ggl::PipelineSetup **)(v62 + 1112);
          v195 = *(ggl::PipelineSetup **)(v62 + 1104);
          v196 = *(ggl::PipelineSetup **)(v62 + 1088);
          ggl::Flyover::FlyoverPipelineSetup::setState(v194, v193, v244);
          ggl::Flyover::FlyoverPipelineSetup::setState(v195, (uint64_t)v243, v244);
          ggl::Flyover::FlyoverPipelineSetup::setState(v196, (uint64_t)v243, v244);
          v197 = *((_QWORD *)v194 + 8);
          *(_QWORD *)(v197 + 48) = v242;
          *(_QWORD *)(v197 + 56) = 0;
          v198 = *((_QWORD *)v194 + 20);
          v199 = *(std::__shared_weak_count **)(v198 + 56);
          *(_QWORD *)(v198 + 48) = 0;
          *(_QWORD *)(v198 + 56) = 0;
          if (v199)
          {
            v200 = (unint64_t *)&v199->__shared_owners_;
            do
              v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }
          }
          v202 = *((_QWORD *)v195 + 8);
          *(_QWORD *)(v202 + 48) = v242;
          *(_QWORD *)(v202 + 56) = 0;
          v203 = *((_QWORD *)v195 + 20);
          v204 = *(std::__shared_weak_count **)(v203 + 56);
          *(_QWORD *)(v203 + 48) = 0;
          *(_QWORD *)(v203 + 56) = 0;
          if (v204)
          {
            v205 = (unint64_t *)&v204->__shared_owners_;
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
          v207 = *((_QWORD *)v196 + 8);
          *(_QWORD *)(v207 + 48) = v242;
          *(_QWORD *)(v207 + 56) = 0;
          v208 = *((_QWORD *)v196 + 20);
          v209 = *(std::__shared_weak_count **)(v208 + 56);
          *(_QWORD *)(v208 + 48) = 0;
          *(_QWORD *)(v208 + 56) = 0;
          if (v209)
          {
            v210 = (unint64_t *)&v209->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          v212 = *((_QWORD *)v194 + 2);
          v213 = v240;
          if (!v212)
            v213 = 0;
          if (v213)
          {
            v214 = *((_QWORD *)v195 + 2);
            v215 = !*(_BYTE *)(v212 + 308) || v214 == 0;
            if (!v215 && *(_BYTE *)(v214 + 308))
            {
              v216 = *(_QWORD *)(v235 + 80);
              if (!v216)
                v216 = **(_QWORD **)(*(_QWORD *)(v235 + 120) + 152);
              *(_QWORD *)(*((_QWORD *)v194 + 12) + 8) = v216;
              v217 = *(_QWORD *)(v235 + 80);
              if (!v217)
                v217 = **(_QWORD **)(*(_QWORD *)(v235 + 120) + 152);
              *(_QWORD *)(*((_QWORD *)v195 + 12) + 8) = v217;
            }
          }
          v218 = *(_BYTE **)(v62 + 1072);
          *(_BYTE *)(v62 + 648) = v218[268];
          *(_BYTE *)(v62 + 776) = v218[269];
          *(_BYTE *)(v62 + 136) = v218[264];
          *(_BYTE *)(v62 + 264) = v218[265];
          *(_BYTE *)(v62 + 392) = v218[266];
          *(_BYTE *)(v62 + 520) = v218[267];
          *(_BYTE *)(v62 + 904) = v218[270];
          v60 = v234;
          v2 = v235;
          if (!v218[79])
          {
            if (v218[73])
            {
              v219 = 4;
            }
            else
            {
              v215 = v218[75] == 0;
              v219 = 3;
              if (!v215)
                v219 = 4;
            }
            md::RoadBatch::setRenderOrdersForStrokeAndFill(*(unsigned __int8 *)(v235 + 108), v62 + 144, v62 + 272, v62 + (v219 << 7) + 16, v62 + 656, 0, *(_DWORD *)(v62 + 1064), *(unsigned __int8 *)(v62 + 1068), *(_QWORD *)(v62 + 1048), *(std::__shared_weak_count **)(v62 + 1056), v235, *(_BYTE *)(v62 + 1144));
          }
          v223 = *(unsigned __int8 *)(v235 + 57);
          *(_DWORD *)(v62 + 56) = v223;
          *(_DWORD *)(v62 + 184) = v223;
          *(_DWORD *)(v62 + 312) = v223;
          *(_DWORD *)(v62 + 440) = v223;
          *(_DWORD *)(v62 + 568) = v223;
          *(_DWORD *)(v62 + 696) = v223;
          *(_DWORD *)(v62 + 824) = v223;
          v224 = v244;
          if (v244)
          {
            v225 = &v244->__shared_owners_;
            do
              v226 = __ldaxr((unint64_t *)v225);
            while (__stlxr(v226 - 1, (unint64_t *)v225));
            if (!v226)
            {
              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
              std::__shared_weak_count::__release_weak(v224);
            }
          }
        }
LABEL_82:
        if (++v61 == v60)
          return;
      }
      do
        v64 = __ldaxr(md::RoadBatch::layout(md::RoadLayoutContext const&)::FAULTED__VectorKit);
      while (__stlxr(1u, md::RoadBatch::layout(md::RoadLayoutContext const&)::FAULTED__VectorKit));
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v65 = (id)GEOGetVectorKitVKDefaultLog_log;
      v66 = v65;
      if ((v64 & 1) != 0)
      {
        if (!os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
          goto LABEL_94;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "_style != nullptr";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RoadFramework.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 610;
        v67 = v66;
        v68 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        if (!os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
          goto LABEL_94;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "_style != nullptr";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RoadFramework.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 610;
        v67 = v66;
        v68 = OS_LOG_TYPE_FAULT;
      }
      _os_log_impl(&dword_19F029000, v67, v68, "Null style detected: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
LABEL_94:

      v63 = *(_QWORD *)(v62 + 1072);
      if (!v63)
        goto LABEL_82;
      goto LABEL_95;
    }
  }
}

void sub_19F1320A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 208);
  _Unwind_Resume(a1);
}

void sub_19F1320C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double md::DaVinciCenterLineRoadsTileData::updateViewAndTransformConstantData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 *v15;
  _QWORD *v16;
  unint64_t v17;
  double result;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char **v22;
  char *v23;

  v6 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a2 + 16) & 2) == 0)
  {
    v7 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v7 != -1)
    {
      v23 = &v21;
      v22 = &v23;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v8 = *(_DWORD **)(a2 + 72);
  if (!v6)
    v8 = 0;
  v9 = *(_QWORD **)(a1 + 824);
  v10 = v9[1];
  v11 = (_DWORD *)v9[9];
  *v11 = *v8;
  v11[1] = v8[1];
  v11[2] = v8[2];
  v11[3] = v8[3];
  v11[4] = v8[4];
  v11[5] = v8[5];
  v11[6] = v8[6];
  v11[7] = v8[7];
  v11[8] = v8[8];
  v11[9] = v8[9];
  v11[10] = v8[10];
  v11[11] = v8[11];
  v11[12] = v8[12];
  v11[13] = v8[13];
  v11[14] = v8[14];
  v11[15] = v8[15];
  v11[16] = v8[16];
  v12 = v9[8];
  if (v12 <= v10)
    v12 = v10;
  v9[7] = 0;
  v9[8] = v12;
  v13 = *(_QWORD *)(a3 + 8);
  if ((*(_BYTE *)(a3 + 16) & 2) == 0)
  {
    v14 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v14 != -1)
    {
      v23 = &v21;
      v22 = &v23;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  if (v13)
    v15 = *(__n128 **)(a3 + 72);
  else
    v15 = 0;
  v16 = *(_QWORD **)(a1 + 840);
  v17 = v16[1];
  if (v17)
  {
    *(_QWORD *)&result = ggl::Tile::Transform::operator=((__n128 *)v16[9], v15).n128_u64[0];
    if (v19)
    {
      v20 = v16[8];
      if (v20 <= v17)
        v20 = v17;
      v16[7] = 0;
      v16[8] = v20;
    }
  }
  else
  {
    *(_QWORD *)&result = ggl::Tile::Transform::operator=(0, v15).n128_u64[0];
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

_WORD *commandBufferLocationsForRenderLayerType(_QWORD *a1, int a2, uint64_t a3)
{
  __int16 v4;
  _WORD *v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  _WORD *v9;
  _WORD *result;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  _WORD *v16;

  switch(a2)
  {
    case '!':
      v4 = *(_WORD *)(*(_QWORD *)(a3 + 8) + 98);
      goto LABEL_12;
    case '"':
      v5 = *(_WORD **)(a3 + 8);
      v6 = v5[53];
      v7 = v5[30];
      v8 = v5[75];
      goto LABEL_6;
    case '#':
      v9 = *(_WORD **)(a3 + 8);
      v6 = v9[54];
      v7 = v9[31];
      v8 = v9[76];
LABEL_6:
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      result = operator new(6uLL);
      a1[1] = result + 3;
      a1[2] = result + 3;
      *result = v6;
      result[1] = v7;
      result[2] = v8;
      *a1 = result;
      return result;
    case '$':
      v11 = *(_QWORD *)(a3 + 8);
      v12 = *(unsigned __int16 *)(v11 + 104);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v13 = *(unsigned __int16 *)(v11 + 110);
      goto LABEL_10;
    case '%':
      v4 = *(_WORD *)(*(_QWORD *)(a3 + 8) + 100);
      goto LABEL_12;
    case '&':
      v14 = *(_QWORD *)(a3 + 8);
      v12 = *(unsigned __int16 *)(v14 + 112);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v13 = *(unsigned __int16 *)(v14 + 116);
LABEL_10:
      v15 = operator new(4uLL);
      *a1 = v15;
      *v15 = v12 | (v13 << 16);
      result = v15 + 1;
      goto LABEL_13;
    case '\'':
      v4 = *(_WORD *)(*(_QWORD *)(a3 + 8) + 114);
      goto LABEL_12;
    default:
      v4 = *(_WORD *)(*(_QWORD *)(a3 + 8) + 106);
LABEL_12:
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v16 = operator new(2uLL);
      *a1 = v16;
      *v16 = v4;
      result = v16 + 1;
LABEL_13:
      a1[1] = result;
      a1[2] = result;
      return result;
  }
}

BOOL md::CameraContext::isSplinedEnabled(md::CameraContext *this, float a2)
{
  float v3;
  float v4;
  void *v5;
  float v6;
  _BOOL8 v7;

  v3 = *((float *)this + 769);
  v4 = *((float *)this + 770);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "daVinciGlobeSplinedMaxZoom");
  v7 = fmaxf(v4 + v3, 1.0) <= v6 && *((unsigned __int8 *)this + 3776) - 1 < 3;

  return v7;
}

void sub_19F132628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  char **v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char **v114;
  char **v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  char *v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v198;
  int v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  _QWORD v206[3];
  _QWORD *v207;
  _BYTE v208[24];
  _BYTE *v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v4 = a3;
    v5 = result;
    while (1)
    {
      v198 = v5;
      v8 = *v5;
      v9 = (_QWORD *)v4[3];
      if (v9)
      {
        if (v9 == v4)
        {
          v207 = v206;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v206);
        }
        else
        {
          v207 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
        }
      }
      else
      {
        v207 = 0;
      }
      if (!*(_BYTE *)(v8 + 912))
        goto LABEL_153;
      v10 = *(_QWORD *)(v8 + 816);
      v11 = *(_QWORD *)(v8 + 808);
      if (v10 != v11)
      {
        v12 = *(_QWORD *)(v8 + 816);
        do
        {
          v14 = *(void **)(v12 - 24);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *(_QWORD *)(v10 - 16) = v13;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != v11);
      }
      *(_QWORD *)(v8 + 816) = v11;
      *(_QWORD *)(v8 + 792) = *(_QWORD *)(v8 + 784);
      v15 = *(_QWORD **)(v8 + 864);
      if (v15)
      {
        do
        {
          if (v15[1])
          {
            v17 = 0;
            v18 = (void (***)(void))(v15 + 2);
            do
            {
              v19 = *v18;
              v18 += 15;
              (*v19)();
              ++v17;
            }
            while (v17 < v15[1]);
          }
          v15[1] = 0;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        v16 = *(_QWORD *)(v8 + 864);
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)(v8 + 872) = v16;
      v20 = (uint64_t)v207;
      if (!v207)
        goto LABEL_28;
      if (v207 != v206)
        break;
      v209 = v208;
      (*(void (**)(_QWORD *, _BYTE *))(v206[0] + 24))(v206, v208);
LABEL_30:
      if (*(_BYTE *)(v8 + 912))
      {
        if (*(_BYTE *)(v8 + 136))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 56);
          *(_QWORD *)(v8 + 40) = v21;
          v22 = *(unsigned __int8 *)(v21 + 58) == 1;
          if (*(_BYTE *)(v8 + 264))
          {
LABEL_33:
            v23 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 64);
            *(_QWORD *)(v8 + 168) = v23;
            if (*(_BYTE *)(v23 + 58) == 1)
              v22 = 1;
          }
        }
        else
        {
          v22 = 0;
          if (*(_BYTE *)(v8 + 264))
            goto LABEL_33;
        }
        if (*(_BYTE *)(v8 + 392))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 72);
          *(_QWORD *)(v8 + 296) = v24;
          if (*(_BYTE *)(v24 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 520))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 80);
          *(_QWORD *)(v8 + 424) = v25;
          if (*(_BYTE *)(v25 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 648))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 88);
          *(_QWORD *)(v8 + 552) = v26;
          if (*(_BYTE *)(v26 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 776))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 96);
          *(_QWORD *)(v8 + 680) = v27;
          if (*(_BYTE *)(v27 + 58) == 1)
            v22 = 1;
        }
        v28 = *(uint64_t **)(v8 + 888);
        v29 = *(uint64_t **)(v8 + 896);
        if (v28 != v29)
        {
          v30 = 0;
          while (1)
          {
            v31 = *v28;
            if (*(_BYTE *)(*v28 + 48))
            {
              if (*(_QWORD *)(v31 + 88) != v30)
              {
                if (v30)
                {
                  v32 = ggl::Batcher::commit((__int128 **)(v8 + 784), 0xC8u, a4);
                  if (v32[1] != *v32)
                  {
                    v33 = v32;
                    if (*(_BYTE *)(v8 + 136))
                    {
                      v35 = *(_QWORD *)(v8 + 24);
                      v34 = *(_QWORD *)(v8 + 32);
                      v36 = *(_OWORD *)(v8 + 88);
                      v202 = *(_OWORD *)(v8 + 72);
                      v203 = v36;
                      v37 = *(_OWORD *)(v8 + 120);
                      v204 = *(_OWORD *)(v8 + 104);
                      v205 = v37;
                      v38 = *(_OWORD *)(v8 + 56);
                      v200 = *(_OWORD *)(v8 + 40);
                      v201 = v38;
                      v39 = *(_QWORD **)(v8 + 872);
                      v40 = v39[1];
                      if (v40 == *(_QWORD *)(v8 + 880))
                      {
                        v39 = (_QWORD *)*v39;
                        if (!v39)
                        {
                          v39 = malloc_type_malloc(120 * v40 + 16, 0xB644C221uLL);
                          *v39 = 0;
                          v39[1] = 0;
                          **(_QWORD **)(v8 + 872) = v39;
                        }
                        *(_QWORD *)(v8 + 872) = v39;
                        v40 = v39[1];
                      }
                      v41 = &v39[15 * v40];
                      v39[1] = v40 + 1;
                      v41[2] = &off_1E42B59B0;
                      v41[3] = v35;
                      v41 += 2;
                      v41[2] = v34;
                      v42 = v204;
                      v43 = v205;
                      v44 = v203;
                      *(_OWORD *)(v41 + 7) = v202;
                      v45 = v200;
                      *(_OWORD *)(v41 + 5) = v201;
                      *(_OWORD *)(v41 + 3) = v45;
                      *(_OWORD *)(v41 + 13) = v43;
                      *(_OWORD *)(v41 + 11) = v42;
                      *(_OWORD *)(v41 + 9) = v44;
                      v41[8] = v30;
                      v46 = *v33;
                      v41[11] = *v33;
                      v41[12] = (v33[1] - v46) >> 4;
                      v199 = 0;
                      *(_QWORD *)&v200 = v41;
                      if (!v209)
                        goto LABEL_157;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
                    }
                    if (*(_BYTE *)(v8 + 264))
                    {
                      v47 = *(_QWORD *)(v8 + 152);
                      v48 = *(_QWORD *)(v8 + 160);
                      v49 = *(_OWORD *)(v8 + 216);
                      v202 = *(_OWORD *)(v8 + 200);
                      v203 = v49;
                      v50 = *(_OWORD *)(v8 + 248);
                      v204 = *(_OWORD *)(v8 + 232);
                      v205 = v50;
                      v51 = *(_OWORD *)(v8 + 184);
                      v200 = *(_OWORD *)(v8 + 168);
                      v201 = v51;
                      v52 = *(_QWORD **)(v8 + 872);
                      v53 = v52[1];
                      if (v53 == *(_QWORD *)(v8 + 880))
                      {
                        v52 = (_QWORD *)*v52;
                        if (!v52)
                        {
                          v52 = malloc_type_malloc(120 * v53 + 16, 0xB644C221uLL);
                          *v52 = 0;
                          v52[1] = 0;
                          **(_QWORD **)(v8 + 872) = v52;
                        }
                        *(_QWORD *)(v8 + 872) = v52;
                        v53 = v52[1];
                      }
                      v54 = &v52[15 * v53];
                      v52[1] = v53 + 1;
                      v54[2] = &off_1E42B59B0;
                      v54[3] = v47;
                      v54 += 2;
                      v54[2] = v48;
                      v55 = v204;
                      v56 = v205;
                      v57 = v203;
                      *(_OWORD *)(v54 + 7) = v202;
                      v58 = v200;
                      *(_OWORD *)(v54 + 5) = v201;
                      *(_OWORD *)(v54 + 3) = v58;
                      *(_OWORD *)(v54 + 13) = v56;
                      *(_OWORD *)(v54 + 11) = v55;
                      *(_OWORD *)(v54 + 9) = v57;
                      v54[8] = v30;
                      v59 = *v33;
                      v54[11] = *v33;
                      v54[12] = (v33[1] - v59) >> 4;
                      v199 = 1;
                      *(_QWORD *)&v200 = v54;
                      if (!v209)
                        goto LABEL_157;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
                    }
                    if (*(_BYTE *)(v8 + 392))
                    {
                      v60 = *(_QWORD *)(v8 + 280);
                      v61 = *(_QWORD *)(v8 + 288);
                      v62 = *(_OWORD *)(v8 + 344);
                      v202 = *(_OWORD *)(v8 + 328);
                      v203 = v62;
                      v63 = *(_OWORD *)(v8 + 376);
                      v204 = *(_OWORD *)(v8 + 360);
                      v205 = v63;
                      v64 = *(_OWORD *)(v8 + 312);
                      v200 = *(_OWORD *)(v8 + 296);
                      v201 = v64;
                      v65 = *(_QWORD **)(v8 + 872);
                      v66 = v65[1];
                      if (v66 == *(_QWORD *)(v8 + 880))
                      {
                        v65 = (_QWORD *)*v65;
                        if (!v65)
                        {
                          v65 = malloc_type_malloc(120 * v66 + 16, 0xB644C221uLL);
                          *v65 = 0;
                          v65[1] = 0;
                          **(_QWORD **)(v8 + 872) = v65;
                        }
                        *(_QWORD *)(v8 + 872) = v65;
                        v66 = v65[1];
                      }
                      v67 = &v65[15 * v66];
                      v65[1] = v66 + 1;
                      v67[2] = &off_1E42B59B0;
                      v67[3] = v60;
                      v67 += 2;
                      v67[2] = v61;
                      v68 = v204;
                      v69 = v205;
                      v70 = v203;
                      *(_OWORD *)(v67 + 7) = v202;
                      v71 = v200;
                      *(_OWORD *)(v67 + 5) = v201;
                      *(_OWORD *)(v67 + 3) = v71;
                      *(_OWORD *)(v67 + 13) = v69;
                      *(_OWORD *)(v67 + 11) = v68;
                      *(_OWORD *)(v67 + 9) = v70;
                      v67[8] = v30;
                      v72 = *v33;
                      v67[11] = *v33;
                      v67[12] = (v33[1] - v72) >> 4;
                      v199 = 2;
                      *(_QWORD *)&v200 = v67;
                      if (!v209)
                        goto LABEL_157;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
                    }
                    if (*(_BYTE *)(v8 + 520))
                    {
                      v73 = *(_QWORD *)(v8 + 408);
                      v74 = *(_QWORD *)(v8 + 416);
                      v75 = *(_OWORD *)(v8 + 472);
                      v202 = *(_OWORD *)(v8 + 456);
                      v203 = v75;
                      v76 = *(_OWORD *)(v8 + 504);
                      v204 = *(_OWORD *)(v8 + 488);
                      v205 = v76;
                      v77 = *(_OWORD *)(v8 + 440);
                      v200 = *(_OWORD *)(v8 + 424);
                      v201 = v77;
                      v78 = *(_QWORD **)(v8 + 872);
                      v79 = v78[1];
                      if (v79 == *(_QWORD *)(v8 + 880))
                      {
                        v78 = (_QWORD *)*v78;
                        if (!v78)
                        {
                          v78 = malloc_type_malloc(120 * v79 + 16, 0xB644C221uLL);
                          *v78 = 0;
                          v78[1] = 0;
                          **(_QWORD **)(v8 + 872) = v78;
                        }
                        *(_QWORD *)(v8 + 872) = v78;
                        v79 = v78[1];
                      }
                      v80 = &v78[15 * v79];
                      v78[1] = v79 + 1;
                      v80[2] = &off_1E42B59B0;
                      v80[3] = v73;
                      v80 += 2;
                      v80[2] = v74;
                      v81 = v204;
                      v82 = v205;
                      v83 = v203;
                      *(_OWORD *)(v80 + 7) = v202;
                      v84 = v200;
                      *(_OWORD *)(v80 + 5) = v201;
                      *(_OWORD *)(v80 + 3) = v84;
                      *(_OWORD *)(v80 + 13) = v82;
                      *(_OWORD *)(v80 + 11) = v81;
                      *(_OWORD *)(v80 + 9) = v83;
                      v80[8] = v30;
                      v85 = *v33;
                      v80[11] = *v33;
                      v80[12] = (v33[1] - v85) >> 4;
                      v199 = 3;
                      *(_QWORD *)&v200 = v80;
                      if (!v209)
                        goto LABEL_157;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
                    }
                    if (*(_BYTE *)(v8 + 648))
                    {
                      v86 = *(_QWORD *)(v8 + 536);
                      v87 = *(_QWORD *)(v8 + 544);
                      v88 = *(_OWORD *)(v8 + 600);
                      v202 = *(_OWORD *)(v8 + 584);
                      v203 = v88;
                      v89 = *(_OWORD *)(v8 + 632);
                      v204 = *(_OWORD *)(v8 + 616);
                      v205 = v89;
                      v90 = *(_OWORD *)(v8 + 568);
                      v200 = *(_OWORD *)(v8 + 552);
                      v201 = v90;
                      v91 = *(_QWORD **)(v8 + 872);
                      v92 = v91[1];
                      if (v92 == *(_QWORD *)(v8 + 880))
                      {
                        v91 = (_QWORD *)*v91;
                        if (!v91)
                        {
                          v91 = malloc_type_malloc(120 * v92 + 16, 0xB644C221uLL);
                          *v91 = 0;
                          v91[1] = 0;
                          **(_QWORD **)(v8 + 872) = v91;
                        }
                        *(_QWORD *)(v8 + 872) = v91;
                        v92 = v91[1];
                      }
                      v93 = &v91[15 * v92];
                      v91[1] = v92 + 1;
                      v93[2] = &off_1E42B59B0;
                      v93[3] = v86;
                      v93 += 2;
                      v93[2] = v87;
                      v94 = v204;
                      v95 = v205;
                      v96 = v203;
                      *(_OWORD *)(v93 + 7) = v202;
                      v97 = v200;
                      *(_OWORD *)(v93 + 5) = v201;
                      *(_OWORD *)(v93 + 3) = v97;
                      *(_OWORD *)(v93 + 13) = v95;
                      *(_OWORD *)(v93 + 11) = v94;
                      *(_OWORD *)(v93 + 9) = v96;
                      v93[8] = v30;
                      v98 = *v33;
                      v93[11] = *v33;
                      v93[12] = (v33[1] - v98) >> 4;
                      v199 = 4;
                      *(_QWORD *)&v200 = v93;
                      if (!v209)
                        goto LABEL_157;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
                    }
                    if (*(_BYTE *)(v8 + 776))
                    {
                      v99 = *(_QWORD *)(v8 + 664);
                      v100 = *(_QWORD *)(v8 + 672);
                      v101 = *(_OWORD *)(v8 + 728);
                      v202 = *(_OWORD *)(v8 + 712);
                      v203 = v101;
                      v102 = *(_OWORD *)(v8 + 760);
                      v204 = *(_OWORD *)(v8 + 744);
                      v205 = v102;
                      v103 = *(_OWORD *)(v8 + 696);
                      v200 = *(_OWORD *)(v8 + 680);
                      v201 = v103;
                      v104 = *(_QWORD **)(v8 + 872);
                      v105 = v104[1];
                      if (v105 == *(_QWORD *)(v8 + 880))
                      {
                        v104 = (_QWORD *)*v104;
                        if (!v104)
                        {
                          v104 = malloc_type_malloc(120 * v105 + 16, 0xB644C221uLL);
                          *v104 = 0;
                          v104[1] = 0;
                          **(_QWORD **)(v8 + 872) = v104;
                        }
                        *(_QWORD *)(v8 + 872) = v104;
                        v105 = v104[1];
                      }
                      v106 = &v104[15 * v105];
                      v104[1] = v105 + 1;
                      v106[2] = &off_1E42B59B0;
                      v106[3] = v99;
                      v106 += 2;
                      v106[2] = v100;
                      v107 = v204;
                      v108 = v205;
                      v109 = v203;
                      *(_OWORD *)(v106 + 7) = v202;
                      v110 = v200;
                      *(_OWORD *)(v106 + 5) = v201;
                      *(_OWORD *)(v106 + 3) = v110;
                      *(_OWORD *)(v106 + 13) = v108;
                      *(_OWORD *)(v106 + 11) = v107;
                      *(_OWORD *)(v106 + 9) = v109;
                      v106[8] = v30;
                      v111 = *v33;
                      v106[11] = *v33;
                      v106[12] = (v33[1] - v111) >> 4;
                      v199 = 5;
                      *(_QWORD *)&v200 = v106;
                      if (!v209)
                        goto LABEL_157;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
                    }
                  }
                }
                v31 = *v28;
                v30 = *(_QWORD *)(*v28 + 88);
              }
              v112 = 16;
              if (v22)
              {
                v112 = 32;
                v113 = v31 + 32;
              }
              else
              {
                v113 = v31 + 16;
              }
              if (*(_QWORD *)(v113 + 8) != *(_QWORD *)(v31 + v112))
                gm::MultiRange<unsigned long>::push_back((char **)(v8 + 784), (_OWORD *)v113);
            }
            if (++v28 == v29)
              goto LABEL_105;
          }
        }
        v30 = 0;
LABEL_105:
        v114 = ggl::Batcher::commit((__int128 **)(v8 + 784), 0xC8u, a4);
        if (v114[1] != *v114)
        {
          v115 = v114;
          if (*(_BYTE *)(v8 + 136))
          {
            v116 = *(_QWORD *)(v8 + 24);
            v117 = *(_QWORD *)(v8 + 32);
            v118 = *(_OWORD *)(v8 + 88);
            v202 = *(_OWORD *)(v8 + 72);
            v203 = v118;
            v119 = *(_OWORD *)(v8 + 120);
            v204 = *(_OWORD *)(v8 + 104);
            v205 = v119;
            v120 = *(_OWORD *)(v8 + 56);
            v200 = *(_OWORD *)(v8 + 40);
            v201 = v120;
            v121 = *(_QWORD **)(v8 + 872);
            v122 = v121[1];
            if (v122 == *(_QWORD *)(v8 + 880))
            {
              v121 = (_QWORD *)*v121;
              if (!v121)
              {
                v121 = malloc_type_malloc(120 * v122 + 16, 0xB644C221uLL);
                *v121 = 0;
                v121[1] = 0;
                **(_QWORD **)(v8 + 872) = v121;
              }
              *(_QWORD *)(v8 + 872) = v121;
              v122 = v121[1];
            }
            v123 = &v121[15 * v122];
            v121[1] = v122 + 1;
            v123[2] = &off_1E42B59B0;
            v123[3] = v116;
            v123 += 2;
            v123[2] = v117;
            v124 = v204;
            v125 = v205;
            v126 = v203;
            *(_OWORD *)(v123 + 7) = v202;
            v127 = v200;
            *(_OWORD *)(v123 + 5) = v201;
            *(_OWORD *)(v123 + 3) = v127;
            *(_OWORD *)(v123 + 13) = v125;
            *(_OWORD *)(v123 + 11) = v124;
            *(_OWORD *)(v123 + 9) = v126;
            v123[8] = v30;
            v128 = *v115;
            v123[11] = *v115;
            v123[12] = (v115[1] - v128) >> 4;
            v199 = 0;
            *(_QWORD *)&v200 = v123;
            if (!v209)
            {
LABEL_157:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
          }
          if (*(_BYTE *)(v8 + 264))
          {
            v129 = *(_QWORD *)(v8 + 152);
            v130 = *(_QWORD *)(v8 + 160);
            v131 = *(_OWORD *)(v8 + 216);
            v202 = *(_OWORD *)(v8 + 200);
            v203 = v131;
            v132 = *(_OWORD *)(v8 + 248);
            v204 = *(_OWORD *)(v8 + 232);
            v205 = v132;
            v133 = *(_OWORD *)(v8 + 184);
            v200 = *(_OWORD *)(v8 + 168);
            v201 = v133;
            v134 = *(_QWORD **)(v8 + 872);
            v135 = v134[1];
            if (v135 == *(_QWORD *)(v8 + 880))
            {
              v134 = (_QWORD *)*v134;
              if (!v134)
              {
                v134 = malloc_type_malloc(120 * v135 + 16, 0xB644C221uLL);
                *v134 = 0;
                v134[1] = 0;
                **(_QWORD **)(v8 + 872) = v134;
              }
              *(_QWORD *)(v8 + 872) = v134;
              v135 = v134[1];
            }
            v136 = &v134[15 * v135];
            v134[1] = v135 + 1;
            v136[2] = &off_1E42B59B0;
            v136[3] = v129;
            v136 += 2;
            v136[2] = v130;
            v137 = v204;
            v138 = v205;
            v139 = v203;
            *(_OWORD *)(v136 + 7) = v202;
            v140 = v200;
            *(_OWORD *)(v136 + 5) = v201;
            *(_OWORD *)(v136 + 3) = v140;
            *(_OWORD *)(v136 + 13) = v138;
            *(_OWORD *)(v136 + 11) = v137;
            *(_OWORD *)(v136 + 9) = v139;
            v136[8] = v30;
            v141 = *v115;
            v136[11] = *v115;
            v136[12] = (v115[1] - v141) >> 4;
            v199 = 1;
            *(_QWORD *)&v200 = v136;
            if (!v209)
              goto LABEL_157;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
          }
          if (*(_BYTE *)(v8 + 392))
          {
            v142 = *(_QWORD *)(v8 + 280);
            v143 = *(_QWORD *)(v8 + 288);
            v144 = *(_OWORD *)(v8 + 344);
            v202 = *(_OWORD *)(v8 + 328);
            v203 = v144;
            v145 = *(_OWORD *)(v8 + 376);
            v204 = *(_OWORD *)(v8 + 360);
            v205 = v145;
            v146 = *(_OWORD *)(v8 + 312);
            v200 = *(_OWORD *)(v8 + 296);
            v201 = v146;
            v147 = *(_QWORD **)(v8 + 872);
            v148 = v147[1];
            if (v148 == *(_QWORD *)(v8 + 880))
            {
              v147 = (_QWORD *)*v147;
              if (!v147)
              {
                v147 = malloc_type_malloc(120 * v148 + 16, 0xB644C221uLL);
                *v147 = 0;
                v147[1] = 0;
                **(_QWORD **)(v8 + 872) = v147;
              }
              *(_QWORD *)(v8 + 872) = v147;
              v148 = v147[1];
            }
            v149 = &v147[15 * v148];
            v147[1] = v148 + 1;
            v149[2] = &off_1E42B59B0;
            v149[3] = v142;
            v149 += 2;
            v149[2] = v143;
            v150 = v204;
            v151 = v205;
            v152 = v203;
            *(_OWORD *)(v149 + 7) = v202;
            v153 = v200;
            *(_OWORD *)(v149 + 5) = v201;
            *(_OWORD *)(v149 + 3) = v153;
            *(_OWORD *)(v149 + 13) = v151;
            *(_OWORD *)(v149 + 11) = v150;
            *(_OWORD *)(v149 + 9) = v152;
            v149[8] = v30;
            v154 = *v115;
            v149[11] = *v115;
            v149[12] = (v115[1] - v154) >> 4;
            v199 = 2;
            *(_QWORD *)&v200 = v149;
            if (!v209)
              goto LABEL_157;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
          }
          if (*(_BYTE *)(v8 + 520))
          {
            v155 = *(_QWORD *)(v8 + 408);
            v156 = *(_QWORD *)(v8 + 416);
            v157 = *(_OWORD *)(v8 + 472);
            v202 = *(_OWORD *)(v8 + 456);
            v203 = v157;
            v158 = *(_OWORD *)(v8 + 504);
            v204 = *(_OWORD *)(v8 + 488);
            v205 = v158;
            v159 = *(_OWORD *)(v8 + 440);
            v200 = *(_OWORD *)(v8 + 424);
            v201 = v159;
            v160 = *(_QWORD **)(v8 + 872);
            v161 = v160[1];
            if (v161 == *(_QWORD *)(v8 + 880))
            {
              v160 = (_QWORD *)*v160;
              if (!v160)
              {
                v160 = malloc_type_malloc(120 * v161 + 16, 0xB644C221uLL);
                *v160 = 0;
                v160[1] = 0;
                **(_QWORD **)(v8 + 872) = v160;
              }
              *(_QWORD *)(v8 + 872) = v160;
              v161 = v160[1];
            }
            v162 = &v160[15 * v161];
            v160[1] = v161 + 1;
            v162[2] = &off_1E42B59B0;
            v162[3] = v155;
            v162 += 2;
            v162[2] = v156;
            v163 = v204;
            v164 = v205;
            v165 = v203;
            *(_OWORD *)(v162 + 7) = v202;
            v166 = v200;
            *(_OWORD *)(v162 + 5) = v201;
            *(_OWORD *)(v162 + 3) = v166;
            *(_OWORD *)(v162 + 13) = v164;
            *(_OWORD *)(v162 + 11) = v163;
            *(_OWORD *)(v162 + 9) = v165;
            v162[8] = v30;
            v167 = *v115;
            v162[11] = *v115;
            v162[12] = (v115[1] - v167) >> 4;
            v199 = 3;
            *(_QWORD *)&v200 = v162;
            if (!v209)
              goto LABEL_157;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
          }
          if (*(_BYTE *)(v8 + 648))
          {
            v168 = *(_QWORD *)(v8 + 536);
            v169 = *(_QWORD *)(v8 + 544);
            v170 = *(_OWORD *)(v8 + 600);
            v202 = *(_OWORD *)(v8 + 584);
            v203 = v170;
            v171 = *(_OWORD *)(v8 + 632);
            v204 = *(_OWORD *)(v8 + 616);
            v205 = v171;
            v172 = *(_OWORD *)(v8 + 568);
            v200 = *(_OWORD *)(v8 + 552);
            v201 = v172;
            v173 = *(_QWORD **)(v8 + 872);
            v174 = v173[1];
            if (v174 == *(_QWORD *)(v8 + 880))
            {
              v173 = (_QWORD *)*v173;
              if (!v173)
              {
                v173 = malloc_type_malloc(120 * v174 + 16, 0xB644C221uLL);
                *v173 = 0;
                v173[1] = 0;
                **(_QWORD **)(v8 + 872) = v173;
              }
              *(_QWORD *)(v8 + 872) = v173;
              v174 = v173[1];
            }
            v175 = &v173[15 * v174];
            v173[1] = v174 + 1;
            v175[2] = &off_1E42B59B0;
            v175[3] = v168;
            v175 += 2;
            v175[2] = v169;
            v176 = v204;
            v177 = v205;
            v178 = v203;
            *(_OWORD *)(v175 + 7) = v202;
            v179 = v200;
            *(_OWORD *)(v175 + 5) = v201;
            *(_OWORD *)(v175 + 3) = v179;
            *(_OWORD *)(v175 + 13) = v177;
            *(_OWORD *)(v175 + 11) = v176;
            *(_OWORD *)(v175 + 9) = v178;
            v175[8] = v30;
            v180 = *v115;
            v175[11] = *v115;
            v175[12] = (v115[1] - v180) >> 4;
            v199 = 4;
            *(_QWORD *)&v200 = v175;
            if (!v209)
              goto LABEL_157;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
          }
          if (*(_BYTE *)(v8 + 776))
          {
            v181 = *(_QWORD *)(v8 + 664);
            v182 = *(_QWORD *)(v8 + 672);
            v183 = *(_OWORD *)(v8 + 728);
            v202 = *(_OWORD *)(v8 + 712);
            v203 = v183;
            v184 = *(_OWORD *)(v8 + 760);
            v204 = *(_OWORD *)(v8 + 744);
            v205 = v184;
            v185 = *(_OWORD *)(v8 + 696);
            v200 = *(_OWORD *)(v8 + 680);
            v201 = v185;
            v186 = *(_QWORD **)(v8 + 872);
            v187 = v186[1];
            if (v187 == *(_QWORD *)(v8 + 880))
            {
              v186 = (_QWORD *)*v186;
              if (!v186)
              {
                v186 = malloc_type_malloc(120 * v187 + 16, 0xB644C221uLL);
                *v186 = 0;
                v186[1] = 0;
                **(_QWORD **)(v8 + 872) = v186;
              }
              *(_QWORD *)(v8 + 872) = v186;
              v187 = v186[1];
            }
            v188 = &v186[15 * v187];
            v186[1] = v187 + 1;
            v188[2] = &off_1E42B59B0;
            v188[3] = v181;
            v188 += 2;
            v188[2] = v182;
            v189 = v204;
            v190 = v205;
            v191 = v203;
            *(_OWORD *)(v188 + 7) = v202;
            v192 = v200;
            *(_OWORD *)(v188 + 5) = v201;
            *(_OWORD *)(v188 + 3) = v192;
            *(_OWORD *)(v188 + 13) = v190;
            *(_OWORD *)(v188 + 11) = v189;
            *(_OWORD *)(v188 + 9) = v191;
            v188[8] = v30;
            v193 = *v115;
            v188[11] = *v115;
            v188[12] = (v115[1] - v193) >> 4;
            v199 = 5;
            *(_QWORD *)&v200 = v188;
            if (!v209)
              goto LABEL_157;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v209 + 48))(v209, &v199, &v200);
          }
        }
      }
      v194 = v209;
      if (v209 == v208)
      {
        v194 = v208;
        v195 = 4;
        v4 = a3;
      }
      else
      {
        v4 = a3;
        if (!v209)
          goto LABEL_153;
        v195 = 5;
      }
      (*(void (**)(void))(*v194 + 8 * v195))();
LABEL_153:
      result = v207;
      if (v207 == v206)
      {
        result = v206;
        v6 = 4;
        v7 = v198;
      }
      else
      {
        v7 = v198;
        if (!v207)
          goto LABEL_5;
        v6 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_5:
      v5 = v7 + 1;
      if (v5 == a2)
        return result;
    }
    v20 = (*(uint64_t (**)(_QWORD *))(*v207 + 16))(v207);
LABEL_28:
    v209 = (_BYTE *)v20;
    goto LABEL_30;
  }
  return result;
}

void sub_19F133648(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 24);
  if (v4 == (_QWORD *)(v2 - 168))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 168);
  }
  else
  {
    if (!v4)
      _Unwind_Resume(exception_object);
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4408;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PatternedRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  void (***v18)(void);
  void (**v19)(void);
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  char **v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char **v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  char *v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v225;
  int v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  _QWORD v233[3];
  _QWORD *v234;
  _BYTE v235[24];
  _BYTE *v236;
  uint64_t v237;

  v237 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v4 = a3;
    v5 = result;
    while (1)
    {
      v225 = v5;
      v8 = *v5;
      v9 = (_QWORD *)v4[3];
      if (v9)
      {
        if (v9 == v4)
        {
          v234 = v233;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v233);
        }
        else
        {
          v234 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
        }
      }
      else
      {
        v234 = 0;
      }
      if (!*(_BYTE *)(v8 + 1040))
        goto LABEL_170;
      v10 = *(_QWORD *)(v8 + 944);
      v11 = *(_QWORD *)(v8 + 936);
      if (v10 != v11)
      {
        v12 = *(_QWORD *)(v8 + 944);
        do
        {
          v14 = *(void **)(v12 - 24);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *(_QWORD *)(v10 - 16) = v13;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != v11);
      }
      *(_QWORD *)(v8 + 944) = v11;
      *(_QWORD *)(v8 + 920) = *(_QWORD *)(v8 + 912);
      v15 = *(_QWORD **)(v8 + 992);
      if (v15)
      {
        do
        {
          if (v15[1])
          {
            v17 = 0;
            v18 = (void (***)(void))(v15 + 2);
            do
            {
              v19 = *v18;
              v18 += 15;
              (*v19)();
              ++v17;
            }
            while (v17 < v15[1]);
          }
          v15[1] = 0;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
        v16 = *(_QWORD *)(v8 + 992);
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)(v8 + 1000) = v16;
      v20 = (uint64_t)v234;
      if (!v234)
        goto LABEL_28;
      if (v234 != v233)
        break;
      v236 = v235;
      (*(void (**)(_QWORD *, _BYTE *))(v233[0] + 24))(v233, v235);
LABEL_30:
      if (*(_BYTE *)(v8 + 1040))
      {
        if (*(_BYTE *)(v8 + 136))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 56);
          *(_QWORD *)(v8 + 40) = v21;
          v22 = *(unsigned __int8 *)(v21 + 58) == 1;
          if (*(_BYTE *)(v8 + 264))
          {
LABEL_33:
            v23 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 64);
            *(_QWORD *)(v8 + 168) = v23;
            if (*(_BYTE *)(v23 + 58) == 1)
              v22 = 1;
          }
        }
        else
        {
          v22 = 0;
          if (*(_BYTE *)(v8 + 264))
            goto LABEL_33;
        }
        if (*(_BYTE *)(v8 + 392))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 72);
          *(_QWORD *)(v8 + 296) = v24;
          if (*(_BYTE *)(v24 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 520))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 80);
          *(_QWORD *)(v8 + 424) = v25;
          if (*(_BYTE *)(v25 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 648))
        {
          v26 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 88);
          *(_QWORD *)(v8 + 552) = v26;
          if (*(_BYTE *)(v26 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 776))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 96);
          *(_QWORD *)(v8 + 680) = v27;
          if (*(_BYTE *)(v27 + 58) == 1)
            v22 = 1;
        }
        if (*(_BYTE *)(v8 + 904))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 104);
          *(_QWORD *)(v8 + 808) = v28;
          if (*(_BYTE *)(v28 + 58) == 1)
            v22 = 1;
        }
        v29 = *(uint64_t **)(v8 + 1016);
        v30 = *(uint64_t **)(v8 + 1024);
        if (v29 != v30)
        {
          v31 = 0;
          while (1)
          {
            v32 = *v29;
            if (*(_BYTE *)(*v29 + 48))
            {
              if (*(_QWORD *)(v32 + 88) != v31)
              {
                if (v31)
                {
                  v33 = ggl::Batcher::commit((__int128 **)(v8 + 912), 0xC8u, a4);
                  if (v33[1] != *v33)
                  {
                    v34 = v33;
                    if (*(_BYTE *)(v8 + 136))
                    {
                      v36 = *(_QWORD *)(v8 + 24);
                      v35 = *(_QWORD *)(v8 + 32);
                      v37 = *(_OWORD *)(v8 + 88);
                      v229 = *(_OWORD *)(v8 + 72);
                      v230 = v37;
                      v38 = *(_OWORD *)(v8 + 120);
                      v231 = *(_OWORD *)(v8 + 104);
                      v232 = v38;
                      v39 = *(_OWORD *)(v8 + 56);
                      v227 = *(_OWORD *)(v8 + 40);
                      v228 = v39;
                      v40 = *(_QWORD **)(v8 + 1000);
                      v41 = v40[1];
                      if (v41 == *(_QWORD *)(v8 + 1008))
                      {
                        v40 = (_QWORD *)*v40;
                        if (!v40)
                        {
                          v40 = malloc_type_malloc(120 * v41 + 16, 0xB644C221uLL);
                          *v40 = 0;
                          v40[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v40;
                        }
                        *(_QWORD *)(v8 + 1000) = v40;
                        v41 = v40[1];
                      }
                      v42 = &v40[15 * v41];
                      v40[1] = v41 + 1;
                      v42[2] = &off_1E42B59B0;
                      v42[3] = v36;
                      v42 += 2;
                      v42[2] = v35;
                      v43 = v231;
                      v44 = v232;
                      v45 = v230;
                      *(_OWORD *)(v42 + 7) = v229;
                      v46 = v227;
                      *(_OWORD *)(v42 + 5) = v228;
                      *(_OWORD *)(v42 + 3) = v46;
                      *(_OWORD *)(v42 + 13) = v44;
                      *(_OWORD *)(v42 + 11) = v43;
                      *(_OWORD *)(v42 + 9) = v45;
                      v42[8] = v31;
                      v47 = *v34;
                      v42[11] = *v34;
                      v42[12] = (v34[1] - v47) >> 4;
                      v226 = 0;
                      *(_QWORD *)&v227 = v42;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                    if (*(_BYTE *)(v8 + 264))
                    {
                      v48 = *(_QWORD *)(v8 + 152);
                      v49 = *(_QWORD *)(v8 + 160);
                      v50 = *(_OWORD *)(v8 + 216);
                      v229 = *(_OWORD *)(v8 + 200);
                      v230 = v50;
                      v51 = *(_OWORD *)(v8 + 248);
                      v231 = *(_OWORD *)(v8 + 232);
                      v232 = v51;
                      v52 = *(_OWORD *)(v8 + 184);
                      v227 = *(_OWORD *)(v8 + 168);
                      v228 = v52;
                      v53 = *(_QWORD **)(v8 + 1000);
                      v54 = v53[1];
                      if (v54 == *(_QWORD *)(v8 + 1008))
                      {
                        v53 = (_QWORD *)*v53;
                        if (!v53)
                        {
                          v53 = malloc_type_malloc(120 * v54 + 16, 0xB644C221uLL);
                          *v53 = 0;
                          v53[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v53;
                        }
                        *(_QWORD *)(v8 + 1000) = v53;
                        v54 = v53[1];
                      }
                      v55 = &v53[15 * v54];
                      v53[1] = v54 + 1;
                      v55[2] = &off_1E42B59B0;
                      v55[3] = v48;
                      v55 += 2;
                      v55[2] = v49;
                      v56 = v231;
                      v57 = v232;
                      v58 = v230;
                      *(_OWORD *)(v55 + 7) = v229;
                      v59 = v227;
                      *(_OWORD *)(v55 + 5) = v228;
                      *(_OWORD *)(v55 + 3) = v59;
                      *(_OWORD *)(v55 + 13) = v57;
                      *(_OWORD *)(v55 + 11) = v56;
                      *(_OWORD *)(v55 + 9) = v58;
                      v55[8] = v31;
                      v60 = *v34;
                      v55[11] = *v34;
                      v55[12] = (v34[1] - v60) >> 4;
                      v226 = 1;
                      *(_QWORD *)&v227 = v55;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                    if (*(_BYTE *)(v8 + 392))
                    {
                      v61 = *(_QWORD *)(v8 + 280);
                      v62 = *(_QWORD *)(v8 + 288);
                      v63 = *(_OWORD *)(v8 + 344);
                      v229 = *(_OWORD *)(v8 + 328);
                      v230 = v63;
                      v64 = *(_OWORD *)(v8 + 376);
                      v231 = *(_OWORD *)(v8 + 360);
                      v232 = v64;
                      v65 = *(_OWORD *)(v8 + 312);
                      v227 = *(_OWORD *)(v8 + 296);
                      v228 = v65;
                      v66 = *(_QWORD **)(v8 + 1000);
                      v67 = v66[1];
                      if (v67 == *(_QWORD *)(v8 + 1008))
                      {
                        v66 = (_QWORD *)*v66;
                        if (!v66)
                        {
                          v66 = malloc_type_malloc(120 * v67 + 16, 0xB644C221uLL);
                          *v66 = 0;
                          v66[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v66;
                        }
                        *(_QWORD *)(v8 + 1000) = v66;
                        v67 = v66[1];
                      }
                      v68 = &v66[15 * v67];
                      v66[1] = v67 + 1;
                      v68[2] = &off_1E42B59B0;
                      v68[3] = v61;
                      v68 += 2;
                      v68[2] = v62;
                      v69 = v231;
                      v70 = v232;
                      v71 = v230;
                      *(_OWORD *)(v68 + 7) = v229;
                      v72 = v227;
                      *(_OWORD *)(v68 + 5) = v228;
                      *(_OWORD *)(v68 + 3) = v72;
                      *(_OWORD *)(v68 + 13) = v70;
                      *(_OWORD *)(v68 + 11) = v69;
                      *(_OWORD *)(v68 + 9) = v71;
                      v68[8] = v31;
                      v73 = *v34;
                      v68[11] = *v34;
                      v68[12] = (v34[1] - v73) >> 4;
                      v226 = 2;
                      *(_QWORD *)&v227 = v68;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                    if (*(_BYTE *)(v8 + 520))
                    {
                      v74 = *(_QWORD *)(v8 + 408);
                      v75 = *(_QWORD *)(v8 + 416);
                      v76 = *(_OWORD *)(v8 + 472);
                      v229 = *(_OWORD *)(v8 + 456);
                      v230 = v76;
                      v77 = *(_OWORD *)(v8 + 504);
                      v231 = *(_OWORD *)(v8 + 488);
                      v232 = v77;
                      v78 = *(_OWORD *)(v8 + 440);
                      v227 = *(_OWORD *)(v8 + 424);
                      v228 = v78;
                      v79 = *(_QWORD **)(v8 + 1000);
                      v80 = v79[1];
                      if (v80 == *(_QWORD *)(v8 + 1008))
                      {
                        v79 = (_QWORD *)*v79;
                        if (!v79)
                        {
                          v79 = malloc_type_malloc(120 * v80 + 16, 0xB644C221uLL);
                          *v79 = 0;
                          v79[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v79;
                        }
                        *(_QWORD *)(v8 + 1000) = v79;
                        v80 = v79[1];
                      }
                      v81 = &v79[15 * v80];
                      v79[1] = v80 + 1;
                      v81[2] = &off_1E42B59B0;
                      v81[3] = v74;
                      v81 += 2;
                      v81[2] = v75;
                      v82 = v231;
                      v83 = v232;
                      v84 = v230;
                      *(_OWORD *)(v81 + 7) = v229;
                      v85 = v227;
                      *(_OWORD *)(v81 + 5) = v228;
                      *(_OWORD *)(v81 + 3) = v85;
                      *(_OWORD *)(v81 + 13) = v83;
                      *(_OWORD *)(v81 + 11) = v82;
                      *(_OWORD *)(v81 + 9) = v84;
                      v81[8] = v31;
                      v86 = *v34;
                      v81[11] = *v34;
                      v81[12] = (v34[1] - v86) >> 4;
                      v226 = 3;
                      *(_QWORD *)&v227 = v81;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                    if (*(_BYTE *)(v8 + 648))
                    {
                      v87 = *(_QWORD *)(v8 + 536);
                      v88 = *(_QWORD *)(v8 + 544);
                      v89 = *(_OWORD *)(v8 + 600);
                      v229 = *(_OWORD *)(v8 + 584);
                      v230 = v89;
                      v90 = *(_OWORD *)(v8 + 632);
                      v231 = *(_OWORD *)(v8 + 616);
                      v232 = v90;
                      v91 = *(_OWORD *)(v8 + 568);
                      v227 = *(_OWORD *)(v8 + 552);
                      v228 = v91;
                      v92 = *(_QWORD **)(v8 + 1000);
                      v93 = v92[1];
                      if (v93 == *(_QWORD *)(v8 + 1008))
                      {
                        v92 = (_QWORD *)*v92;
                        if (!v92)
                        {
                          v92 = malloc_type_malloc(120 * v93 + 16, 0xB644C221uLL);
                          *v92 = 0;
                          v92[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v92;
                        }
                        *(_QWORD *)(v8 + 1000) = v92;
                        v93 = v92[1];
                      }
                      v94 = &v92[15 * v93];
                      v92[1] = v93 + 1;
                      v94[2] = &off_1E42B59B0;
                      v94[3] = v87;
                      v94 += 2;
                      v94[2] = v88;
                      v95 = v231;
                      v96 = v232;
                      v97 = v230;
                      *(_OWORD *)(v94 + 7) = v229;
                      v98 = v227;
                      *(_OWORD *)(v94 + 5) = v228;
                      *(_OWORD *)(v94 + 3) = v98;
                      *(_OWORD *)(v94 + 13) = v96;
                      *(_OWORD *)(v94 + 11) = v95;
                      *(_OWORD *)(v94 + 9) = v97;
                      v94[8] = v31;
                      v99 = *v34;
                      v94[11] = *v34;
                      v94[12] = (v34[1] - v99) >> 4;
                      v226 = 4;
                      *(_QWORD *)&v227 = v94;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                    if (*(_BYTE *)(v8 + 776))
                    {
                      v100 = *(_QWORD *)(v8 + 664);
                      v101 = *(_QWORD *)(v8 + 672);
                      v102 = *(_OWORD *)(v8 + 728);
                      v229 = *(_OWORD *)(v8 + 712);
                      v230 = v102;
                      v103 = *(_OWORD *)(v8 + 760);
                      v231 = *(_OWORD *)(v8 + 744);
                      v232 = v103;
                      v104 = *(_OWORD *)(v8 + 696);
                      v227 = *(_OWORD *)(v8 + 680);
                      v228 = v104;
                      v105 = *(_QWORD **)(v8 + 1000);
                      v106 = v105[1];
                      if (v106 == *(_QWORD *)(v8 + 1008))
                      {
                        v105 = (_QWORD *)*v105;
                        if (!v105)
                        {
                          v105 = malloc_type_malloc(120 * v106 + 16, 0xB644C221uLL);
                          *v105 = 0;
                          v105[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v105;
                        }
                        *(_QWORD *)(v8 + 1000) = v105;
                        v106 = v105[1];
                      }
                      v107 = &v105[15 * v106];
                      v105[1] = v106 + 1;
                      v107[2] = &off_1E42B59B0;
                      v107[3] = v100;
                      v107 += 2;
                      v107[2] = v101;
                      v108 = v231;
                      v109 = v232;
                      v110 = v230;
                      *(_OWORD *)(v107 + 7) = v229;
                      v111 = v227;
                      *(_OWORD *)(v107 + 5) = v228;
                      *(_OWORD *)(v107 + 3) = v111;
                      *(_OWORD *)(v107 + 13) = v109;
                      *(_OWORD *)(v107 + 11) = v108;
                      *(_OWORD *)(v107 + 9) = v110;
                      v107[8] = v31;
                      v112 = *v34;
                      v107[11] = *v34;
                      v107[12] = (v34[1] - v112) >> 4;
                      v226 = 5;
                      *(_QWORD *)&v227 = v107;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                    if (*(_BYTE *)(v8 + 904))
                    {
                      v113 = *(_QWORD *)(v8 + 792);
                      v114 = *(_QWORD *)(v8 + 800);
                      v115 = *(_OWORD *)(v8 + 856);
                      v229 = *(_OWORD *)(v8 + 840);
                      v230 = v115;
                      v116 = *(_OWORD *)(v8 + 888);
                      v231 = *(_OWORD *)(v8 + 872);
                      v232 = v116;
                      v117 = *(_OWORD *)(v8 + 824);
                      v227 = *(_OWORD *)(v8 + 808);
                      v228 = v117;
                      v118 = *(_QWORD **)(v8 + 1000);
                      v119 = v118[1];
                      if (v119 == *(_QWORD *)(v8 + 1008))
                      {
                        v118 = (_QWORD *)*v118;
                        if (!v118)
                        {
                          v118 = malloc_type_malloc(120 * v119 + 16, 0xB644C221uLL);
                          *v118 = 0;
                          v118[1] = 0;
                          **(_QWORD **)(v8 + 1000) = v118;
                        }
                        *(_QWORD *)(v8 + 1000) = v118;
                        v119 = v118[1];
                      }
                      v120 = &v118[15 * v119];
                      v118[1] = v119 + 1;
                      v120[2] = &off_1E42B59B0;
                      v120[3] = v113;
                      v120 += 2;
                      v120[2] = v114;
                      v121 = v231;
                      v122 = v232;
                      v123 = v230;
                      *(_OWORD *)(v120 + 7) = v229;
                      v124 = v227;
                      *(_OWORD *)(v120 + 5) = v228;
                      *(_OWORD *)(v120 + 3) = v124;
                      *(_OWORD *)(v120 + 13) = v122;
                      *(_OWORD *)(v120 + 11) = v121;
                      *(_OWORD *)(v120 + 9) = v123;
                      v120[8] = v31;
                      v125 = *v34;
                      v120[11] = *v34;
                      v120[12] = (v34[1] - v125) >> 4;
                      v226 = 6;
                      *(_QWORD *)&v227 = v120;
                      if (!v236)
                        goto LABEL_174;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
                    }
                  }
                }
                v32 = *v29;
                v31 = *(_QWORD *)(*v29 + 88);
              }
              v126 = 16;
              if (v22)
              {
                v126 = 32;
                v127 = v32 + 32;
              }
              else
              {
                v127 = v32 + 16;
              }
              if (*(_QWORD *)(v127 + 8) != *(_QWORD *)(v32 + v126))
                gm::MultiRange<unsigned long>::push_back((char **)(v8 + 912), (_OWORD *)v127);
            }
            if (++v29 == v30)
              goto LABEL_115;
          }
        }
        v31 = 0;
LABEL_115:
        v128 = ggl::Batcher::commit((__int128 **)(v8 + 912), 0xC8u, a4);
        if (v128[1] != *v128)
        {
          v129 = v128;
          if (*(_BYTE *)(v8 + 136))
          {
            v130 = *(_QWORD *)(v8 + 24);
            v131 = *(_QWORD *)(v8 + 32);
            v132 = *(_OWORD *)(v8 + 88);
            v229 = *(_OWORD *)(v8 + 72);
            v230 = v132;
            v133 = *(_OWORD *)(v8 + 120);
            v231 = *(_OWORD *)(v8 + 104);
            v232 = v133;
            v134 = *(_OWORD *)(v8 + 56);
            v227 = *(_OWORD *)(v8 + 40);
            v228 = v134;
            v135 = *(_QWORD **)(v8 + 1000);
            v136 = v135[1];
            if (v136 == *(_QWORD *)(v8 + 1008))
            {
              v135 = (_QWORD *)*v135;
              if (!v135)
              {
                v135 = malloc_type_malloc(120 * v136 + 16, 0xB644C221uLL);
                *v135 = 0;
                v135[1] = 0;
                **(_QWORD **)(v8 + 1000) = v135;
              }
              *(_QWORD *)(v8 + 1000) = v135;
              v136 = v135[1];
            }
            v137 = &v135[15 * v136];
            v135[1] = v136 + 1;
            v137[2] = &off_1E42B59B0;
            v137[3] = v130;
            v137 += 2;
            v137[2] = v131;
            v138 = v231;
            v139 = v232;
            v140 = v230;
            *(_OWORD *)(v137 + 7) = v229;
            v141 = v227;
            *(_OWORD *)(v137 + 5) = v228;
            *(_OWORD *)(v137 + 3) = v141;
            *(_OWORD *)(v137 + 13) = v139;
            *(_OWORD *)(v137 + 11) = v138;
            *(_OWORD *)(v137 + 9) = v140;
            v137[8] = v31;
            v142 = *v129;
            v137[11] = *v129;
            v137[12] = (v129[1] - v142) >> 4;
            v226 = 0;
            *(_QWORD *)&v227 = v137;
            if (!v236)
            {
LABEL_174:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
          if (*(_BYTE *)(v8 + 264))
          {
            v143 = *(_QWORD *)(v8 + 152);
            v144 = *(_QWORD *)(v8 + 160);
            v145 = *(_OWORD *)(v8 + 216);
            v229 = *(_OWORD *)(v8 + 200);
            v230 = v145;
            v146 = *(_OWORD *)(v8 + 248);
            v231 = *(_OWORD *)(v8 + 232);
            v232 = v146;
            v147 = *(_OWORD *)(v8 + 184);
            v227 = *(_OWORD *)(v8 + 168);
            v228 = v147;
            v148 = *(_QWORD **)(v8 + 1000);
            v149 = v148[1];
            if (v149 == *(_QWORD *)(v8 + 1008))
            {
              v148 = (_QWORD *)*v148;
              if (!v148)
              {
                v148 = malloc_type_malloc(120 * v149 + 16, 0xB644C221uLL);
                *v148 = 0;
                v148[1] = 0;
                **(_QWORD **)(v8 + 1000) = v148;
              }
              *(_QWORD *)(v8 + 1000) = v148;
              v149 = v148[1];
            }
            v150 = &v148[15 * v149];
            v148[1] = v149 + 1;
            v150[2] = &off_1E42B59B0;
            v150[3] = v143;
            v150 += 2;
            v150[2] = v144;
            v151 = v231;
            v152 = v232;
            v153 = v230;
            *(_OWORD *)(v150 + 7) = v229;
            v154 = v227;
            *(_OWORD *)(v150 + 5) = v228;
            *(_OWORD *)(v150 + 3) = v154;
            *(_OWORD *)(v150 + 13) = v152;
            *(_OWORD *)(v150 + 11) = v151;
            *(_OWORD *)(v150 + 9) = v153;
            v150[8] = v31;
            v155 = *v129;
            v150[11] = *v129;
            v150[12] = (v129[1] - v155) >> 4;
            v226 = 1;
            *(_QWORD *)&v227 = v150;
            if (!v236)
              goto LABEL_174;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
          if (*(_BYTE *)(v8 + 392))
          {
            v156 = *(_QWORD *)(v8 + 280);
            v157 = *(_QWORD *)(v8 + 288);
            v158 = *(_OWORD *)(v8 + 344);
            v229 = *(_OWORD *)(v8 + 328);
            v230 = v158;
            v159 = *(_OWORD *)(v8 + 376);
            v231 = *(_OWORD *)(v8 + 360);
            v232 = v159;
            v160 = *(_OWORD *)(v8 + 312);
            v227 = *(_OWORD *)(v8 + 296);
            v228 = v160;
            v161 = *(_QWORD **)(v8 + 1000);
            v162 = v161[1];
            if (v162 == *(_QWORD *)(v8 + 1008))
            {
              v161 = (_QWORD *)*v161;
              if (!v161)
              {
                v161 = malloc_type_malloc(120 * v162 + 16, 0xB644C221uLL);
                *v161 = 0;
                v161[1] = 0;
                **(_QWORD **)(v8 + 1000) = v161;
              }
              *(_QWORD *)(v8 + 1000) = v161;
              v162 = v161[1];
            }
            v163 = &v161[15 * v162];
            v161[1] = v162 + 1;
            v163[2] = &off_1E42B59B0;
            v163[3] = v156;
            v163 += 2;
            v163[2] = v157;
            v164 = v231;
            v165 = v232;
            v166 = v230;
            *(_OWORD *)(v163 + 7) = v229;
            v167 = v227;
            *(_OWORD *)(v163 + 5) = v228;
            *(_OWORD *)(v163 + 3) = v167;
            *(_OWORD *)(v163 + 13) = v165;
            *(_OWORD *)(v163 + 11) = v164;
            *(_OWORD *)(v163 + 9) = v166;
            v163[8] = v31;
            v168 = *v129;
            v163[11] = *v129;
            v163[12] = (v129[1] - v168) >> 4;
            v226 = 2;
            *(_QWORD *)&v227 = v163;
            if (!v236)
              goto LABEL_174;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
          if (*(_BYTE *)(v8 + 520))
          {
            v169 = *(_QWORD *)(v8 + 408);
            v170 = *(_QWORD *)(v8 + 416);
            v171 = *(_OWORD *)(v8 + 472);
            v229 = *(_OWORD *)(v8 + 456);
            v230 = v171;
            v172 = *(_OWORD *)(v8 + 504);
            v231 = *(_OWORD *)(v8 + 488);
            v232 = v172;
            v173 = *(_OWORD *)(v8 + 440);
            v227 = *(_OWORD *)(v8 + 424);
            v228 = v173;
            v174 = *(_QWORD **)(v8 + 1000);
            v175 = v174[1];
            if (v175 == *(_QWORD *)(v8 + 1008))
            {
              v174 = (_QWORD *)*v174;
              if (!v174)
              {
                v174 = malloc_type_malloc(120 * v175 + 16, 0xB644C221uLL);
                *v174 = 0;
                v174[1] = 0;
                **(_QWORD **)(v8 + 1000) = v174;
              }
              *(_QWORD *)(v8 + 1000) = v174;
              v175 = v174[1];
            }
            v176 = &v174[15 * v175];
            v174[1] = v175 + 1;
            v176[2] = &off_1E42B59B0;
            v176[3] = v169;
            v176 += 2;
            v176[2] = v170;
            v177 = v231;
            v178 = v232;
            v179 = v230;
            *(_OWORD *)(v176 + 7) = v229;
            v180 = v227;
            *(_OWORD *)(v176 + 5) = v228;
            *(_OWORD *)(v176 + 3) = v180;
            *(_OWORD *)(v176 + 13) = v178;
            *(_OWORD *)(v176 + 11) = v177;
            *(_OWORD *)(v176 + 9) = v179;
            v176[8] = v31;
            v181 = *v129;
            v176[11] = *v129;
            v176[12] = (v129[1] - v181) >> 4;
            v226 = 3;
            *(_QWORD *)&v227 = v176;
            if (!v236)
              goto LABEL_174;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
          if (*(_BYTE *)(v8 + 648))
          {
            v182 = *(_QWORD *)(v8 + 536);
            v183 = *(_QWORD *)(v8 + 544);
            v184 = *(_OWORD *)(v8 + 600);
            v229 = *(_OWORD *)(v8 + 584);
            v230 = v184;
            v185 = *(_OWORD *)(v8 + 632);
            v231 = *(_OWORD *)(v8 + 616);
            v232 = v185;
            v186 = *(_OWORD *)(v8 + 568);
            v227 = *(_OWORD *)(v8 + 552);
            v228 = v186;
            v187 = *(_QWORD **)(v8 + 1000);
            v188 = v187[1];
            if (v188 == *(_QWORD *)(v8 + 1008))
            {
              v187 = (_QWORD *)*v187;
              if (!v187)
              {
                v187 = malloc_type_malloc(120 * v188 + 16, 0xB644C221uLL);
                *v187 = 0;
                v187[1] = 0;
                **(_QWORD **)(v8 + 1000) = v187;
              }
              *(_QWORD *)(v8 + 1000) = v187;
              v188 = v187[1];
            }
            v189 = &v187[15 * v188];
            v187[1] = v188 + 1;
            v189[2] = &off_1E42B59B0;
            v189[3] = v182;
            v189 += 2;
            v189[2] = v183;
            v190 = v231;
            v191 = v232;
            v192 = v230;
            *(_OWORD *)(v189 + 7) = v229;
            v193 = v227;
            *(_OWORD *)(v189 + 5) = v228;
            *(_OWORD *)(v189 + 3) = v193;
            *(_OWORD *)(v189 + 13) = v191;
            *(_OWORD *)(v189 + 11) = v190;
            *(_OWORD *)(v189 + 9) = v192;
            v189[8] = v31;
            v194 = *v129;
            v189[11] = *v129;
            v189[12] = (v129[1] - v194) >> 4;
            v226 = 4;
            *(_QWORD *)&v227 = v189;
            if (!v236)
              goto LABEL_174;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
          if (*(_BYTE *)(v8 + 776))
          {
            v195 = *(_QWORD *)(v8 + 664);
            v196 = *(_QWORD *)(v8 + 672);
            v197 = *(_OWORD *)(v8 + 728);
            v229 = *(_OWORD *)(v8 + 712);
            v230 = v197;
            v198 = *(_OWORD *)(v8 + 760);
            v231 = *(_OWORD *)(v8 + 744);
            v232 = v198;
            v199 = *(_OWORD *)(v8 + 696);
            v227 = *(_OWORD *)(v8 + 680);
            v228 = v199;
            v200 = *(_QWORD **)(v8 + 1000);
            v201 = v200[1];
            if (v201 == *(_QWORD *)(v8 + 1008))
            {
              v200 = (_QWORD *)*v200;
              if (!v200)
              {
                v200 = malloc_type_malloc(120 * v201 + 16, 0xB644C221uLL);
                *v200 = 0;
                v200[1] = 0;
                **(_QWORD **)(v8 + 1000) = v200;
              }
              *(_QWORD *)(v8 + 1000) = v200;
              v201 = v200[1];
            }
            v202 = &v200[15 * v201];
            v200[1] = v201 + 1;
            v202[2] = &off_1E42B59B0;
            v202[3] = v195;
            v202 += 2;
            v202[2] = v196;
            v203 = v231;
            v204 = v232;
            v205 = v230;
            *(_OWORD *)(v202 + 7) = v229;
            v206 = v227;
            *(_OWORD *)(v202 + 5) = v228;
            *(_OWORD *)(v202 + 3) = v206;
            *(_OWORD *)(v202 + 13) = v204;
            *(_OWORD *)(v202 + 11) = v203;
            *(_OWORD *)(v202 + 9) = v205;
            v202[8] = v31;
            v207 = *v129;
            v202[11] = *v129;
            v202[12] = (v129[1] - v207) >> 4;
            v226 = 5;
            *(_QWORD *)&v227 = v202;
            if (!v236)
              goto LABEL_174;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
          if (*(_BYTE *)(v8 + 904))
          {
            v208 = *(_QWORD *)(v8 + 792);
            v209 = *(_QWORD *)(v8 + 800);
            v210 = *(_OWORD *)(v8 + 856);
            v229 = *(_OWORD *)(v8 + 840);
            v230 = v210;
            v211 = *(_OWORD *)(v8 + 888);
            v231 = *(_OWORD *)(v8 + 872);
            v232 = v211;
            v212 = *(_OWORD *)(v8 + 824);
            v227 = *(_OWORD *)(v8 + 808);
            v228 = v212;
            v213 = *(_QWORD **)(v8 + 1000);
            v214 = v213[1];
            if (v214 == *(_QWORD *)(v8 + 1008))
            {
              v213 = (_QWORD *)*v213;
              if (!v213)
              {
                v213 = malloc_type_malloc(120 * v214 + 16, 0xB644C221uLL);
                *v213 = 0;
                v213[1] = 0;
                **(_QWORD **)(v8 + 1000) = v213;
              }
              *(_QWORD *)(v8 + 1000) = v213;
              v214 = v213[1];
            }
            v215 = &v213[15 * v214];
            v213[1] = v214 + 1;
            v215[2] = &off_1E42B59B0;
            v215[3] = v208;
            v215 += 2;
            v215[2] = v209;
            v216 = v231;
            v217 = v232;
            v218 = v230;
            *(_OWORD *)(v215 + 7) = v229;
            v219 = v227;
            *(_OWORD *)(v215 + 5) = v228;
            *(_OWORD *)(v215 + 3) = v219;
            *(_OWORD *)(v215 + 13) = v217;
            *(_OWORD *)(v215 + 11) = v216;
            *(_OWORD *)(v215 + 9) = v218;
            v215[8] = v31;
            v220 = *v129;
            v215[11] = *v129;
            v215[12] = (v129[1] - v220) >> 4;
            v226 = 6;
            *(_QWORD *)&v227 = v215;
            if (!v236)
              goto LABEL_174;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v236 + 48))(v236, &v226, &v227);
          }
        }
      }
      v221 = v236;
      if (v236 == v235)
      {
        v221 = v235;
        v222 = 4;
        v4 = a3;
      }
      else
      {
        v4 = a3;
        if (!v236)
          goto LABEL_170;
        v222 = 5;
      }
      (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_170:
      result = v234;
      if (v234 == v233)
      {
        result = v233;
        v6 = 4;
        v7 = v225;
      }
      else
      {
        v7 = v225;
        if (!v234)
          goto LABEL_5;
        v6 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_5:
      v5 = v7 + 1;
      if (v5 == a2)
        return result;
    }
    v20 = (*(uint64_t (**)(_QWORD *))(*v234 + 16))(v234);
LABEL_28:
    v236 = (_BYTE *)v20;
    goto LABEL_30;
  }
  return result;
}

void sub_19F134928(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 24);
  if (v4 == (_QWORD *)(v2 - 168))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 168);
  }
  else
  {
    if (!v4)
      _Unwind_Resume(exception_object);
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D43C0;
  a2[1] = v2;
  return result;
}

void ggl::RenderItem::~RenderItem(ggl::RenderItem *this)
{
  *(_QWORD *)this = &off_1E42B59B0;
  *((_QWORD *)this + 2) = 3131955885;
}

{
  *(_QWORD *)this = &off_1E42B59B0;
  *((_QWORD *)this + 2) = 3131955885;
  JUMPOUT(0x1A1AF4E00);
}

void gm::MultiRange<unsigned long>::push_back(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
}

uint64_t ggl::CommandBuffer::pushRenderItem(uint64_t this, ggl::RenderItem *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = this;
  v4 = *(_QWORD **)(this + 80);
  v5 = *(_QWORD *)(this + 88);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = *(_QWORD *)(this + 72);
  v8 = ((uint64_t)v4 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    abort();
  v10 = v5 - v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v11 = 8 * v9;
    this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(this + 96) + 16))(*(_QWORD *)(this + 96), 8 * v9, 8);
    v12 = (_QWORD *)(this + 8 * v8);
    v9 = this + v11;
    if (this)
      *v12 = a2;
  }
  else
  {
    v12 = (_QWORD *)(8 * v8);
  }
  v6 = v12 + 1;
  v14 = *(_QWORD *)(v3 + 72);
  v13 = *(_QWORD *)(v3 + 80);
  if (v13 != v14)
  {
    v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      v17 = *(_QWORD *)(v3 + 80);
    }
    else if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
    {
      v17 = *(_QWORD *)(v3 + 80);
    }
    else
    {
      v16 = (v15 >> 3) + 1;
      v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = v12 - 2;
      v19 = (__int128 *)(v13 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v22 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *--v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    v13 = *(_QWORD *)(v3 + 72);
  }
  *(_QWORD *)(v3 + 72) = v12;
  *(_QWORD *)(v3 + 80) = v6;
  v23 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v9;
  if (v13)
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 96) + 40))(*(_QWORD *)(v3 + 96), v13, v23 - v13);
LABEL_27:
  *(_QWORD *)(v3 + 80) = v6;
  return this;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RoadRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

char **ggl::Batcher::commit(__int128 **this, unsigned int a2, __n128 a3)
{
  __int128 *v5;
  unint64_t v6;
  __int128 *v7;
  char **v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __n128 v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  void *v23;
  void *v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *i;
  __int128 v34;

  if (this[1] == *this)
    return (char **)(this + 7);
  v5 = this[4];
  v6 = (unint64_t)this[5];
  if ((unint64_t)v5 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAALL;
    v10 = this[3];
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v10) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 < 0x555555555555555)
      v9 = v12;
    if (v9)
    {
      v14 = 24 * v9;
      v15 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)this[6] + 16))(this[6], 24 * v9, 8);
      v16 = v15 + 24 * v11;
      v9 = v15 + v14;
      if (v15)
      {
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
      }
    }
    else
    {
      v16 = 24 * v11;
    }
    v7 = (__int128 *)(v16 + 24);
    v17 = this[3];
    v18 = this[4];
    if (v18 == v17)
    {
      this[3] = (__int128 *)v16;
      this[4] = v7;
      v21 = this[5];
      this[5] = (__int128 *)v9;
    }
    else
    {
      do
      {
        *(_QWORD *)(v16 - 24) = 0;
        *(_QWORD *)(v16 - 16) = 0;
        v16 -= 24;
        *(_QWORD *)(v16 + 16) = 0;
        v19 = *(__n128 *)((char *)v18 - 24);
        v18 = (__int128 *)((char *)v18 - 24);
        a3 = v19;
        *(__n128 *)v16 = v19;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)v18 + 2);
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
      }
      while (v18 != v17);
      v18 = this[3];
      v20 = this[4];
      this[3] = (__int128 *)v16;
      this[4] = v7;
      v21 = this[5];
      this[5] = (__int128 *)v9;
      if (v20 != v18)
      {
        v22 = v20;
        do
        {
          v24 = (void *)*((_QWORD *)v22 - 3);
          v22 = (__int128 *)((char *)v22 - 24);
          v23 = v24;
          if (v24)
          {
            *((_QWORD *)v20 - 2) = v23;
            operator delete(v23);
          }
          v20 = v22;
        }
        while (v22 != v18);
      }
    }
    if (v18)
      (*(void (**)(__int128 *, __int128 *, int64_t))(*(_QWORD *)this[6] + 40))(this[6], v18, (char *)v21 - (char *)v18);
  }
  else
  {
    if (v5)
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
    }
    v7 = (__int128 *)((char *)v5 + 24);
  }
  v25 = (__n128 *)*this;
  v26 = (__n128 *)this[1];
  v27 = 126 - 2 * __clz(((char *)v26 - (char *)*this) >> 4);
  v28 = v26 == (__n128 *)*this;
  this[4] = v7;
  if (v28)
    v29 = 0;
  else
    v29 = v27;
  v8 = (char **)v7 - 3;
  std::__introsort<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *,false>(v25, v26, v29, 1, a3);
  v31 = *this;
  v30 = this[1];
  v34 = **this;
  for (i = v31 + 1; i != v30; ++i)
  {
    if (*((_QWORD *)&v34 + 1) + (unint64_t)a2 >= *(_QWORD *)i)
    {
      if (*((_QWORD *)&v34 + 1) < *((_QWORD *)i + 1))
        *((_QWORD *)&v34 + 1) = *((_QWORD *)i + 1);
    }
    else
    {
      if (*((_QWORD *)&v34 + 1) != (_QWORD)v34)
      {
        gm::MultiRange<unsigned long>::push_back(v8, &v34);
        v30 = this[1];
      }
      v34 = *i;
    }
  }
  if (*((_QWORD *)&v34 + 1) != (_QWORD)v34)
    gm::MultiRange<unsigned long>::push_back(v8, &v34);
  this[1] = *this;
  return v8;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,ggl::Batcher::commit(unsigned int)::$_0 &,gm::Range<unsigned long> *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 *v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  BOOL v52;
  __n128 v53;
  unint64_t v54;
  unint64_t n128_u64;
  __n128 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __n128 *v61;
  __n128 *v62;
  unint64_t v63;
  unint64_t v64;
  __n128 *v65;
  __n128 *v66;
  __n128 *v67;
  __n128 *v68;
  BOOL v70;
  uint64_t v71;
  __n128 *v72;
  __n128 *v73;
  __n128 *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  int64_t v80;
  BOOL v81;
  uint64_t v82;
  __n128 *v83;
  unint64_t v84;
  BOOL v85;
  __n128 *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __n128 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 *v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  __n128 *v101;
  unint64_t v102;
  unint64_t v103;
  __n128 *v104;
  __n128 *v105;
  unint64_t v106;
  unint64_t v107;
  __n128 *v108;
  unint64_t v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;

void md::PatternedLayer::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  long double v23;
  double v24;
  double v25;
  __double2 v26;
  double v27;
  __double2 v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  gss::Allocator *v44;
  uint64_t v45;
  unint64_t v46;
  float *v47;
  double v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  float *v73;
  float v74;
  BOOL v75;
  int v76;
  char v77;
  char v78;
  float v79;
  _BOOL4 v80;
  _BOOL4 v81;
  BOOL v82;
  _BOOL4 v83;
  BOOL v84;
  float v85;
  float v86;
  uint64_t v87;
  unsigned int v88;
  float *v89;
  float v90;
  BOOL v91;
  unsigned int v92;
  float v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  float *v100;
  float v101;
  unsigned int v102;
  float v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  float v109;
  float *v110;
  float v111;
  unsigned int v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  _BOOL4 v121;
  BOOL v123;
  float v124;
  uint64_t v125;
  unsigned int v126;
  float *v127;
  float v128;
  BOOL v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unsigned __int8 v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  float v163;
  char v164;
  _BOOL4 v165;
  float *v166;
  BOOL v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  int v174;
  int v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _BOOL4 v182;
  float32x4_t v183;
  int v184;
  float32x4_t v185;
  BOOL v186;
  float32x4_t v187;
  unint64_t v188;
  _BOOL4 v189;
  float32x4_t v190;
  float v191;
  _BOOL4 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  int v196;
  __int128 v197;
  _QWORD v198[2];
  unsigned __int8 v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  __int128 v207;
  uint64_t v208;
  gss::Allocator *v209;
  int v210;
  __int128 v211;
  uint64_t v212;
  gss::Allocator *v213;
  int v214;
  char v215;
  float v216[4];

  if (*(_BYTE *)(a2 + 56))
  {
    v4 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 24);
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 192);
    if (*(_BYTE *)(a2 + 105))
    {
      *(_QWORD *)(a1 + 64) = v5[2];
      *(_QWORD *)(a1 + 56) = v5[2];
      v6 = v5[2];
    }
    else
    {
      *(_QWORD *)(a1 + 64) = *v5;
      *(_QWORD *)(a1 + 56) = *v5;
      v6 = *v5;
    }
    *(_QWORD *)(a1 + 72) = v6;
  }
  v7 = *(_QWORD *)a2;
  if (!*(_BYTE *)(a2 + 104))
  {
    v9 = *(_QWORD **)(v7 + 8);
    v10 = (int8x8_t)v9[1];
    goto LABEL_43;
  }
  v8 = 0;
  v9 = *(_QWORD **)(v7 + 8);
  v10 = (int8x8_t)v9[1];
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = *(_QWORD *)&v10 - 1;
  v188 = v11.u32[0];
  if (v11.u32[0] >= 2uLL)
    v13 = 0x1AF456233693CD46;
  else
    v13 = v12 & 0x1AF456233693CD46;
  v191 = fminf(fmaxf(*(float *)(a2 + 64), 0.2), 1.0);
  v14 = *(_QWORD *)&v10 > 0x1AF456233693CD46uLL || v11.u32[0] < 2uLL;
  while (2)
  {
    if (!*(_QWORD *)&v10)
      goto LABEL_36;
    v15 = v13;
    if (!v14)
      v15 = 0x1AF456233693CD46uLL % *(_QWORD *)&v10;
    v16 = *(_QWORD **)(*v9 + 8 * v15);
    if (!v16)
      goto LABEL_36;
    v17 = (_QWORD *)*v16;
    if (!v17)
      goto LABEL_36;
    if (v188 < 2)
    {
      while (1)
      {
        v18 = v17[1];
        if (v18 == 0x1AF456233693CD46)
        {
          if (v17[2] == 0x1AF456233693CD46)
            goto LABEL_34;
        }
        else if ((v18 & v12) != v15)
        {
          goto LABEL_36;
        }
        v17 = (_QWORD *)*v17;
        if (!v17)
          goto LABEL_36;
      }
    }
    while (1)
    {
      v19 = v17[1];
      if (v19 == 0x1AF456233693CD46)
        break;
      if (v19 >= *(_QWORD *)&v10)
        v19 %= *(_QWORD *)&v10;
      if (v19 != v15)
        goto LABEL_36;
LABEL_28:
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_36;
    }
    if (v17[2] != 0x1AF456233693CD46)
      goto LABEL_28;
LABEL_34:
    v20 = v17[5];
    if (*(_QWORD *)(v20 + 8) == 0x1AF456233693CD46)
    {
      v21 = *(double **)(v20 + 32);
      goto LABEL_37;
    }
LABEL_36:
    v21 = 0;
LABEL_37:
    v22 = *(_QWORD *)(a1 + 8 * v8 + 56);
    if (v22)
    {
      v23 = v21[64];
      v24 = sqrt(v21[62] * v21[62] + v21[63] * v21[63]);
      v25 = atan2(v23, v24 * 0.996647189);
      v26 = __sincos_stret(v25);
      v27 = atan2(v23 + v26.__sinval * v26.__sinval * 42841.3115 * v26.__sinval, v24 + v26.__cosval * v26.__cosval * -42697.6727 * v26.__cosval);
      v28 = __sincos_stret(v27);
      v29 = v24 / v28.__cosval + -6378137.0 / sqrt(v28.__sinval * v28.__sinval * -0.00669437999 + 1.0);
      v30 = fmaxf(fminf(fmaxf((float)(v29 * 0.00021053) + -0.10526, 0.0), 1.0) * v191, 0.0);
      v31 = (float)(v30 * -200000.0) + -5000.0;
      v32 = v30 <= 1.0;
      v33 = -205000.0;
      if (v32)
        v33 = v31;
      *(float *)(v22 + 40) = v33;
    }
    if (++v8 != 6)
      continue;
    break;
  }
LABEL_43:
  if (!*(_QWORD *)&v10)
    goto LABEL_71;
  v34 = (uint8x8_t)vcnt_s8(v10);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    v35 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v10 <= 0x1AF456233693CD46uLL)
      v35 = 0x1AF456233693CD46uLL % *(_QWORD *)&v10;
  }
  else
  {
    v35 = (*(_QWORD *)&v10 - 1) & 0x1AF456233693CD46;
  }
  v36 = *(_QWORD **)(*v9 + 8 * v35);
  if (!v36)
    goto LABEL_71;
  v37 = (_QWORD *)*v36;
  if (!v37)
    goto LABEL_71;
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v39 = v37[1];
      if (v39 == 0x1AF456233693CD46)
      {
        if (v37[2] == 0x1AF456233693CD46)
          goto LABEL_64;
      }
      else if ((v39 & (*(_QWORD *)&v10 - 1)) != v35)
      {
        goto LABEL_71;
      }
      v37 = (_QWORD *)*v37;
      if (!v37)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v38 = v37[1];
    if (v38 == 0x1AF456233693CD46)
      break;
    if (v38 >= *(_QWORD *)&v10)
      v38 %= *(_QWORD *)&v10;
    if (v38 != v35)
      goto LABEL_71;
LABEL_53:
    v37 = (_QWORD *)*v37;
    if (!v37)
      goto LABEL_71;
  }
  if (v37[2] != 0x1AF456233693CD46)
    goto LABEL_53;
LABEL_64:
  v40 = v37[5];
  if (*(_QWORD *)(v40 + 8) != 0x1AF456233693CD46)
  {
LABEL_71:
    v41 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_72;
LABEL_66:
    if ((*(_QWORD *)&v10 & (*(_QWORD *)&v10 - 1)) != 0)
    {
      v49 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v10 <= 0x8BD499FBD96FBB9ELL)
        v49 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v10;
      v42 = *(_QWORD **)(*v9 + 8 * v49);
      do
      {
        do
          v42 = (_QWORD *)*v42;
        while (v42[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v42[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v42 = *(_QWORD **)(*v9 + 8 * ((*(_QWORD *)&v10 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v42 = (_QWORD *)*v42;
        while (v42[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v42[2] != 0x8BD499FBD96FBB9ELL);
    }
    v50 = 0.0;
    if (**(_BYTE **)(v42[5] + 32) && *(_BYTE *)(a1 + 144))
      v50 = *(double *)(v41 + 24) * 0.0000000249532021 * (double)(1 << *(_BYTE *)(a1 + 121));
    v51 = *(_QWORD *)(a1 + 152);
    if ((*(_BYTE *)(v51 + 16) & 2) == 0)
    {
      v52 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v52 != -1)
      {
        *(_QWORD *)&v211 = &v203;
        *(_QWORD *)&v207 = &v211;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v207, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v47 = *(float **)(v51 + 72);
    v48 = v50;
    goto LABEL_90;
  }
  v41 = *(_QWORD *)(v40 + 32);
  if (!*(_BYTE *)(v41 + 3776))
    goto LABEL_66;
LABEL_72:
  v43 = *(_QWORD *)(a1 + 112);
  if (!v43)
  {
    v45 = *(_QWORD *)(a1 + 152);
    if ((*(_BYTE *)(v45 + 16) & 2) == 0)
    {
      v46 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v46 != -1)
      {
        *(_QWORD *)&v211 = &v203;
        *(_QWORD *)&v207 = &v211;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v207, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v47 = *(float **)(v45 + 72);
    v48 = 0.0;
LABEL_90:
    v44 = (gss::Allocator *)ggl::CullingGrid::intersectedCellsForView(v47, v48);
    goto LABEL_91;
  }
  v44 = (gss::Allocator *)gdc::GlobeTileGrid::intersectWithFrustum(v43, (const double *)(v41 + 984), *(double *)(v41 + 24));
LABEL_91:
  v53 = *(_QWORD *)(a1 + 8);
  v54 = *(_QWORD *)(a1 + 16);
  if (v53 != v54)
  {
    do
    {
      v56 = *(_BYTE **)v53;
      v57 = *(uint64_t **)(*(_QWORD *)v53 + 888);
      v58 = *(uint64_t **)(*(_QWORD *)v53 + 896);
      if (v57 == v58)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        do
        {
          v59 = *v57++;
          v60 = (*(_DWORD *)(v59 + 96) & v44) != 0;
          v55 |= v60;
          *(_BYTE *)(v59 + 48) = v60;
        }
        while (v57 != v58);
      }
      v56[136] = v55 & 1;
      v56[264] = v55 & 1;
      v56[392] = v55 & 1;
      v56[520] = v55 & 1;
      v56[648] = v55 & 1;
      v56[776] = v55 & 1;
      v53 += 8;
      v56[912] = v55 & 1;
    }
    while (v53 != v54);
    v61 = *(uint64_t **)(a1 + 8);
    v62 = *(uint64_t **)(a1 + 16);
    if (v61 != v62)
    {
      v185 = (float32x4_t)vdupq_n_s32(0x37800080u);
      while (1)
      {
        v63 = *v61;
        if (*(_BYTE *)(*v61 + 912))
          break;
LABEL_101:
        if (++v61 == v62)
          return;
      }
      v211 = 0uLL;
      v212 = 0;
      v213 = (gss::Allocator *)gss::Allocator::instance(v44);
      v207 = 0uLL;
      v208 = 0;
      v209 = (gss::Allocator *)gss::Allocator::instance(v213);
      v203 = 0uLL;
      v204 = 0;
      v205 = gss::Allocator::instance(v209);
      v64 = *(_QWORD *)(v63 + 920);
      *(_QWORD *)&v194 = v64;
      v65 = *(std::__shared_weak_count **)(v63 + 928);
      *((_QWORD *)&v194 + 1) = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(p_shared_owners);
        while (__stxr(v67 + 1, p_shared_owners));
        *((_QWORD *)&v197 + 1) = v65;
        do
          v68 = __ldxr(p_shared_owners);
        while (__stxr(v68 + 1, p_shared_owners));
      }
      else
      {
        *((_QWORD *)&v197 + 1) = 0;
      }
      *(_QWORD *)&v197 = v64;
      *(_QWORD *)v216 = 0;
      v215 = 0;
      v198[0] = 0;
      v198[1] = 0;
      v199 = 0;
      if (v64)
        LODWORD(v64) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v64 + 48))(v64, v198);
      v199 = v64;
      if (v65)
      {
        v69 = (unint64_t *)&v65->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        LODWORD(v64) = v199;
      }
      if (!(_DWORD)v64)
      {
        *(_BYTE *)(v63 + 136) = 0;
        *(_BYTE *)(v63 + 264) = 0;
        *(_BYTE *)(v63 + 392) = 0;
        *(_BYTE *)(v63 + 520) = 0;
        *(_BYTE *)(v63 + 648) = 0;
        *(_BYTE *)(v63 + 776) = 0;
        *(_BYTE *)(v63 + 912) = 0;
        v44 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v197);
        goto LABEL_294;
      }
      md::getRoadWidths((uint64_t)&v197, &v216[1], v216, &v215, *(float *)(a2 + 8));
      v71 = *(_QWORD *)(v197 + 24);
      if ((int)*(float *)(a2 + 8) >= 0x17)
        v72 = 23;
      else
        v72 = (int)*(float *)(a2 + 8);
      v73 = *(float **)v71;
      if (*(_QWORD *)v71
        && (v74 = *v73, LODWORD(v73) = *v73 == 1.0, *(_BYTE *)(v71 + 10))
        && (v74 != 0.0 ? (v75 = v74 == 1.0) : (v75 = 1), !v75)
        || (v76 = *(unsigned __int8 *)(v71 + v73 + 11), v74 = 0.0, v76 == 2))
      {
        LOBYTE(v194) = 1;
        LOBYTE(v193) = 1;
        v77 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v71, 0x5Bu, v72, 0, &v194);
        v78 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v71, 0x5Bu, v72, 1, &v193);
        if (v74 < 1.0)
          v78 = v77;
      }
      else
      {
        v78 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v197 + 24), 0x5Bu, v72, v76, 0);
      }
      v79 = *(float *)(a2 + 60);
      v80 = v216[0] >= v79 && v216[0] > 0.0;
      v81 = v216[1] >= v79 && v216[1] > 0.0;
      v192 = v80;
      if (v78)
        v82 = !v80 && !v81;
      else
        v82 = 1;
      if (v82)
      {
        v189 = 0;
        v186 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0.0;
        v86 = 0.0;
      }
      else
      {
        v87 = *(_QWORD *)(v197 + 24);
        if (*(unsigned __int8 *)(a2 + 12) >= 0x17u)
          v88 = 23;
        else
          v88 = *(unsigned __int8 *)(a2 + 12);
        v89 = *(float **)v87;
        if (*(_QWORD *)v87
          && (v90 = *v89, LODWORD(v89) = *v89 == 1.0, *(_BYTE *)(v87 + 10))
          && (v90 != 0.0 ? (v91 = v90 == 1.0) : (v91 = 1), !v91)
          || (v92 = *(unsigned __int8 *)(v87 + v89 + 11), v90 = 0.0, v92 == 2))
        {
          LOBYTE(v194) = 1;
          LOBYTE(v193) = 1;
          v93 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v87, 0x1D1u, v88, 0, &v194);
          v94 = v93
              + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v87, 0x1D1u, v88, 1u, &v193)- v93)* v90);
        }
        else
        {
          v94 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v197 + 24), 0x1D1u, v88, v92, 0);
        }
        v83 = v94 >= 1.0;
        if ((int)*(float *)(a2 + 8) >= 0x17)
          v95 = 23;
        else
          v95 = (int)*(float *)(a2 + 8);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v194, *(_QWORD *)(v197 + 24), 0x12Du, v95, 2);
        if ((_QWORD)v211)
          (*(void (**)(gss::Allocator *, _QWORD, _QWORD))(*(_QWORD *)v213 + 40))(v213, v211, v212 - v211);
        v211 = v194;
        v212 = v195;
        v214 = v196;
        if ((int)*(float *)(a2 + 8) >= 0x17)
          v96 = 23;
        else
          v96 = (int)*(float *)(a2 + 8);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v194, *(_QWORD *)(v197 + 24), 0x5Du, v96, 2u, 0);
        v97 = (int)*(float *)(a2 + 8);
        v190 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v194)), v185);
        v202 = v190;
        v98 = *(_QWORD *)(v197 + 24);
        if (v97 >= 0x17)
          v99 = 23;
        else
          v99 = v97;
        v100 = *(float **)v98;
        if (*(_QWORD *)v98
          && (v101 = *v100, LODWORD(v100) = *v100 == 1.0, *(_BYTE *)(v98 + 10))
          && v101 != 0.0
          && v101 != 1.0
          || (v102 = *(unsigned __int8 *)(v98 + v100 + 11), v101 = 0.0, v102 == 2))
        {
          LOBYTE(v194) = 1;
          LOBYTE(v193) = 1;
          v103 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98, 0x134u, v99, 0, &v194);
          v85 = v103
              + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v98, 0x134u, v99, 1u, &v193)- v103)* v101);
        }
        else
        {
          v85 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v197 + 24), 0x134u, v99, v102, 0);
        }
        v84 = v85 > 0.0;
        if ((int)*(float *)(a2 + 8) >= 0x17)
          v104 = 23;
        else
          v104 = (int)*(float *)(a2 + 8);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v194, *(_QWORD *)(v197 + 24), 0x12Cu, v104, 2);
        if ((_QWORD)v207)
          (*(void (**)(gss::Allocator *, _QWORD, _QWORD))(*(_QWORD *)v209 + 40))(v209, v207, v208 - v207);
        v207 = v194;
        v208 = v195;
        v210 = v196;
        if ((int)*(float *)(a2 + 8) >= 0x17)
          v105 = 23;
        else
          v105 = (int)*(float *)(a2 + 8);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v194, *(_QWORD *)(v197 + 24), 0x5Cu, v105, 2u, 0);
        v187 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v194)), v185);
        v201 = v187;
        if ((int)*(float *)(a2 + 8) >= 0x17)
          v106 = 23;
        else
          v106 = (int)*(float *)(a2 + 8);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v194, *(_QWORD *)(v197 + 24), 0x12Cu, v106, 2);
        if ((_QWORD)v203)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v205 + 40))(v205, v203, v204 - v203);
        v203 = v194;
        v204 = v195;
        v206 = v196;
        if ((int)*(float *)(a2 + 8) >= 0x17)
          v107 = 23;
        else
          v107 = (int)*(float *)(a2 + 8);
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v194, *(_QWORD *)(v197 + 24), 0x193u, v107, 2u, 0);
        v183 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v194)), v185);
        v200 = v183;
        v108 = *(_QWORD *)(v197 + 24);
        v109 = fminf(fmaxf(*(float *)(a2 + 8), 0.0), 23.0);
        v110 = *(float **)v108;
        if (*(_QWORD *)v108
          && (v111 = *v110, LODWORD(v110) = *v110 == 1.0, *(_BYTE *)(v108 + 10))
          && v111 != 0.0
          && v111 != 1.0
          || (v112 = *(unsigned __int8 *)(v108 + v110 + 11), v111 = 0.0, v112 == 2))
        {
          LOBYTE(v194) = 1;
          LOBYTE(v193) = 1;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v108, 0x194u, 0, (BOOL *)&v194, v109);
          v114 = v113;
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v108, 0x194u, 1u, (BOOL *)&v193, v109);
          v86 = v114 + (float)((float)(v115 - v114) * v111);
        }
        else
        {
          gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(v197 + 24), 0x194u, v112, 0, v109);
          v86 = v116;
        }
        v117 = *(float *)(a2 + 108);
        v118 = v187.f32[3] * v117;
        v201.f32[3] = v187.f32[3] * v117;
        v119 = v190.f32[3] * v117;
        v202.f32[3] = v119;
        v120 = vmuls_lane_f32(v117, v183, 3);
        v200.f32[3] = v120;
        v121 = v192;
        if (v119 <= 0.0)
          v121 = 0;
        if (v118 <= 0.0)
          v81 = 0;
        v192 = v121;
        v189 = v120 > 0.0;
        if (v121 || v81)
        {
          v123 = v118 > 0.0 || *(_BYTE *)(a2 + 112) == 0;
          if (v119 > 0.0)
            v123 = 1;
          v186 = v123;
        }
        else
        {
          v186 = 0;
          v192 = 0;
        }
      }
      v124 = *(float *)(a2 + 8);
      v125 = *(_QWORD *)(v197 + 24);
      if ((int)v124 >= 0x17)
        v126 = 23;
      else
        v126 = (int)v124;
      v127 = *(float **)v125;
      if (*(_QWORD *)v125
        && (v128 = *v127, LODWORD(v127) = *v127 == 1.0, *(_BYTE *)(v125 + 10))
        && (v128 != 0.0 ? (v129 = v128 == 1.0) : (v129 = 1), !v129)
        || (v130 = *(unsigned __int8 *)(v125 + v127 + 11), v130 == 2))
      {
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v197 + 24), 0x1A2u, v126, 0) & 1) != 0)
          goto LABEL_231;
        v130 = 1;
      }
      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v125, 0x1A2u, v126, v130))
      {
LABEL_232:
        v182 = v81;
        v184 = v83;
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v197);
        v131 = *(_QWORD *)(*(_QWORD *)(v63 + 8) + 192);
        v132 = *(_QWORD *)(a2 + 96);
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        v134 = objc_msgSend(v133, "enableTileClippingDebug");

        v197 = 0uLL;
        v194 = 0uLL;
        md::PatternedPipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v193, *(_QWORD *)(v131 + 32), *(_BYTE *)(v63 + 1041), *(_BYTE *)(a2 + 107), *(_BYTE *)(a2 + 106), v132 != 0, v134, v84);
        v197 = v193;
        md::PatternedPipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v193, *(_QWORD *)(v131 + 32), *(_BYTE *)(v63 + 1041) != 0, *(_BYTE *)(a2 + 107) != 0, *(_BYTE *)(a2 + 106) != 0, v132 != 0, v134, 0);
        v135 = v193;
        v193 = 0uLL;
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
        v194 = v135;
        if (!v136)
          goto LABEL_236;
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
          v139 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
          if (!*((_QWORD *)&v193 + 1))
            goto LABEL_242;
        }
        else
        {
LABEL_236:
          v139 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
          if (!*((_QWORD *)&v193 + 1))
            goto LABEL_242;
        }
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
LABEL_242:
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v63 + 944), v197, *((std::__shared_weak_count **)&v197 + 1));
        v142 = v194;
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v63 + 952), v194, *((std::__shared_weak_count **)&v194 + 1));
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v63 + 960), v142, *((std::__shared_weak_count **)&v142 + 1));
        v144 = *(_QWORD *)(v63 + 944);
        v145 = *(_QWORD *)(v144 + 64);
        *(_QWORD *)(v145 + 48) = v132;
        *(_QWORD *)(v145 + 56) = 0;
        v146 = *(_QWORD *)(v144 + 160);
        v147 = *(std::__shared_weak_count **)(v146 + 56);
        *(_QWORD *)(v146 + 48) = 0;
        *(_QWORD *)(v146 + 56) = 0;
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v150 = *(_QWORD *)(v63 + 952);
        v151 = *(_QWORD *)(v150 + 64);
        *(_QWORD *)(v151 + 48) = v132;
        *(_QWORD *)(v151 + 56) = 0;
        v152 = *(_QWORD *)(v150 + 160);
        v153 = *(std::__shared_weak_count **)(v152 + 56);
        *(_QWORD *)(v152 + 48) = 0;
        *(_QWORD *)(v152 + 56) = 0;
        if (v153)
        {
          v154 = (unint64_t *)&v153->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        v156 = *(_QWORD *)(v63 + 960);
        v157 = *(_QWORD *)(v156 + 64);
        *(_QWORD *)(v157 + 48) = v132;
        *(_QWORD *)(v157 + 56) = 0;
        v158 = *(_QWORD *)(v156 + 160);
        v159 = *(std::__shared_weak_count **)(v158 + 56);
        *(_QWORD *)(v158 + 48) = 0;
        *(_QWORD *)(v158 + 56) = 0;
        if (!v159)
          goto LABEL_302;
        v160 = (unint64_t *)&v159->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
          if (*(_BYTE *)(v63 + 1041))
          {
LABEL_257:
            if (v186)
              goto LABEL_258;
            goto LABEL_284;
          }
        }
        else
        {
LABEL_302:
          if (*(_BYTE *)(v63 + 1041))
            goto LABEL_257;
        }
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v63 + 976), *(_QWORD *)(v131 + 40), *(std::__shared_weak_count **)(v131 + 48));
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v63 + 968), *(_QWORD *)(v131 + 40), *(std::__shared_weak_count **)(v131 + 48));
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v63 + 984), *(_QWORD *)(v131 + 40), *(std::__shared_weak_count **)(v131 + 48));
        if (v186)
        {
LABEL_258:
          v162 = *(_QWORD *)v216;
          v163 = *(float *)(a2 + 20);
          *(_BYTE *)(v63 + 136) = 1;
          *(_BYTE *)(v63 + 264) = 1;
          *(_BYTE *)(v63 + 392) = 1;
          *(_BYTE *)(v63 + 520) = 1;
          *(_BYTE *)(v63 + 648) = 1;
          *(_BYTE *)(v63 + 776) = 1;
          *(_BYTE *)(v63 + 912) = 1;
          if (*(_BYTE *)(v63 + 1041))
            v164 = 1;
          else
            v164 = v189;
          v165 = (v164 & 1) == 0 && *(_BYTE *)(a2 + 56) != 0;
          v166 = (float *)(*(_QWORD *)(*(_QWORD *)(v63 + 8) + 192) + 56);
          v167 = v192;
          if (v192)
          {
            v168 = *(_QWORD *)(v63 + 944);
            *(_QWORD *)(v63 + 48) = v168;
            v143.n128_f32[0] = v163;
            setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(v168, v166, (uint64_t)&v211, &v202, (_QWORD *)(v63 + 1008), v184, v143, *(float *)&v162 * v163, v163 * v85);
            v167 = v165;
          }
          else
          {
            *(_BYTE *)(v63 + 136) = 0;
          }
          *(_BYTE *)(v63 + 520) = v167;
          v169 = v182;
          if (v182)
          {
            v170 = *(_QWORD *)(v63 + 952);
            *(_QWORD *)(v63 + 176) = v170;
            v143.n128_u32[0] = *(_DWORD *)(a2 + 20);
            setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(v170, v166, (uint64_t)&v207, &v201, (_QWORD *)(v63 + 992), v184, v143, v163 * *((float *)&v162 + 1), 0.0);
            v169 = v165;
          }
          else
          {
            *(_BYTE *)(v63 + 264) = 0;
          }
          *(_BYTE *)(v63 + 648) = v169;
          v171 = a2;
          if (v189)
          {
            v172 = *(_QWORD *)(v63 + 960);
            *(_QWORD *)(v63 + 304) = v172;
            v143.n128_u32[0] = *(_DWORD *)(a2 + 20);
            setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(v172, v166, (uint64_t)&v203, &v200, (_QWORD *)(v63 + 1024), v184, v143, v163 * v86, 0.0);
            v173 = v165;
            v171 = a2;
          }
          else
          {
            v173 = 0;
            *(_BYTE *)(v63 + 392) = 0;
          }
          *(_BYTE *)(v63 + 776) = v173;
          v174 = *(unsigned __int8 *)(v171 + 57);
          *(_DWORD *)(v63 + 56) = v174;
          *(_DWORD *)(v63 + 184) = v174;
          *(_DWORD *)(v63 + 312) = v174;
          *(_DWORD *)(v63 + 440) = v174;
          *(_DWORD *)(v63 + 568) = v174;
          *(_DWORD *)(v63 + 696) = v174;
          if (*(_BYTE *)(v63 + 1041))
            v175 = 1;
          else
            v175 = v165;
          if (((v175 | v189) & 1) == 0)
          {
            *(_DWORD *)(v63 + 184) = v174 + 1;
            *(_DWORD *)(v63 + 312) = v174 + 2;
          }
          v44 = (gss::Allocator *)md::RoadBatch::setRenderOrdersForStrokeAndFill(0, 0, v63 + 16, v63 + 144, 0, 0, *(_DWORD *)(v63 + 936), 1, *(_QWORD *)(v63 + 920), *(std::__shared_weak_count **)(v63 + 928), v171, *(_BYTE *)(v63 + 1040) & 0xFE);
          if (v165)
            v44 = (gss::Allocator *)md::RoadBatch::setRenderOrdersForStrokeAndFill(0, 0, v63 + 400, v63 + 528, 0, 0, *(_DWORD *)(v63 + 936), 1, *(_QWORD *)(v63 + 920), *(std::__shared_weak_count **)(v63 + 928), a2, *(_BYTE *)(v63 + 1040) | 1u);
          v176 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
          if (!*((_QWORD *)&v194 + 1))
            goto LABEL_288;
          goto LABEL_285;
        }
LABEL_284:
        *(_BYTE *)(v63 + 136) = 0;
        *(_BYTE *)(v63 + 264) = 0;
        *(_BYTE *)(v63 + 392) = 0;
        *(_BYTE *)(v63 + 520) = 0;
        *(_BYTE *)(v63 + 648) = 0;
        *(_BYTE *)(v63 + 776) = 0;
        *(_BYTE *)(v63 + 912) = 0;
        v176 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
        if (!*((_QWORD *)&v194 + 1))
          goto LABEL_288;
LABEL_285:
        v177 = (unint64_t *)&v176->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
          v179 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
          if (*((_QWORD *)&v197 + 1))
            goto LABEL_289;
          goto LABEL_294;
        }
LABEL_288:
        v179 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
        if (*((_QWORD *)&v197 + 1))
        {
LABEL_289:
          v180 = (unint64_t *)&v179->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
LABEL_294:
        if ((_QWORD)v203)
          v44 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v205 + 40))(v205, v203, v204 - v203);
        if ((_QWORD)v207)
          v44 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, _QWORD, _QWORD))(*(_QWORD *)v209 + 40))(v209, v207, v208 - v207);
        if ((_QWORD)v211)
          v44 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, _QWORD, _QWORD))(*(_QWORD *)v213 + 40))(v213, v211, v212 - v211);
        goto LABEL_101;
      }
LABEL_231:
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v194, v125, 0x1A2u, 2u, fminf(fmaxf(v124, 0.0), 23.0));
      goto LABEL_232;
    }
  }
}

void sub_19F136D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a33);
  if (a45)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a48 + 40))(a48, a45, a47 - a45);
    v50 = *(_QWORD *)(v48 - 256);
    if (!v50)
    {
LABEL_3:
      v51 = *(_QWORD *)(v48 - 208);
      if (!v51)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v50 = *(_QWORD *)(v48 - 256);
    if (!v50)
      goto LABEL_3;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 - 232) + 40))(*(_QWORD *)(v48 - 232), v50, *(_QWORD *)(v48 - 240) - v50);
  v51 = *(_QWORD *)(v48 - 208);
  if (!v51)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 - 184) + 40))(*(_QWORD *)(v48 - 184), v51, *(_QWORD *)(v48 - 192) - v51);
  _Unwind_Resume(a1);
}

void md::ClearRenderLayer::layout(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned __int8 v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;

  if (!*(_BYTE *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v7 = *(_DWORD **)(a1 + 48);
      v7[1] = *(_DWORD *)(a1 + 60);
      v7[2] = *(_DWORD *)(a1 + 64);
      v7[3] = *(_DWORD *)(a1 + 68);
      v8 = *(_DWORD *)(a1 + 72);
LABEL_70:
      v7[4] = v8;
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&v59, a1);
      v26 = v59;
      v45 = v60;
      if (v59 == v60)
        goto LABEL_81;
      v46 = *(_QWORD *)(a1 + 40);
      v47 = v59;
      while (1)
      {
        v48 = *(_QWORD **)(*(_QWORD *)(v46 + 24) + 8);
        v49 = v48[3];
        v50 = v48[4];
        v51 = v50 - v49;
        if (v50 != v49)
        {
          v52 = 0;
          v53 = v51 >> 3;
          while (1)
          {
            v54 = *(unsigned __int8 **)(v49 + 8 * v52);
            if (*v54 == *v47)
            {
              v55 = *((_QWORD *)v54 + 1);
              v56 = v48[15];
              if (v55 < (v48[16] - v56) >> 3)
                break;
            }
            if (++v52 >= v53)
              goto LABEL_72;
          }
          v57 = *(_QWORD *)(v56 + 8 * v55);
          if (v57)
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v57 + 24) + 8 * v47[1]);
            if (v58)
              *(_QWORD *)(v58 + 32) = *(_QWORD *)(a1 + 48);
          }
        }
LABEL_72:
        v47 += 2;
        if (v47 == v45)
          goto LABEL_81;
      }
    }
    v14 = *(_QWORD **)(a2 + 8);
    v15 = (int8x8_t)v14[1];
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = 0x336A901A15BB7353;
        if (*(_QWORD *)&v15 <= 0x336A901A15BB7353uLL)
          v17 = 0x336A901A15BB7353uLL % *(_QWORD *)&v15;
      }
      else
      {
        v17 = (*(_QWORD *)&v15 - 1) & 0x336A901A15BB7353;
      }
      v18 = *(_QWORD **)(*v14 + 8 * v17);
      if (v18)
      {
        v19 = (_QWORD *)*v18;
        if (v19)
        {
          if (v16.u32[0] < 2uLL)
          {
            v20 = *(_QWORD *)&v15 - 1;
            while (1)
            {
              v22 = v19[1];
              if (v22 == 0x336A901A15BB7353)
              {
                if (v19[2] == 0x336A901A15BB7353)
                  goto LABEL_65;
              }
              else if ((v22 & v20) != v17)
              {
                goto LABEL_68;
              }
              v19 = (_QWORD *)*v19;
              if (!v19)
                goto LABEL_68;
            }
          }
          do
          {
            v21 = v19[1];
            if (v21 == 0x336A901A15BB7353)
            {
              if (v19[2] == 0x336A901A15BB7353)
              {
LABEL_65:
                v41 = v19[5];
                if (*(_QWORD *)(v41 + 8) == 0x336A901A15BB7353)
                {
                  v42 = *(_DWORD **)(v41 + 32);
                  if (v42)
                  {
                    v7 = *(_DWORD **)(a1 + 48);
                    v7[1] = *v42;
                    v7[2] = v42[1];
                    v7[3] = v42[2];
                    v8 = v42[3];
                    goto LABEL_70;
                  }
                }
                break;
              }
            }
            else
            {
              if (v21 >= *(_QWORD *)&v15)
                v21 %= *(_QWORD *)&v15;
              if (v21 != v17)
                break;
            }
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_68:
    if ((v43 & 1) == 0
    {
      md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_19FFB5E70;
    }
    v8 = HIDWORD(md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor);
    v44 = DWORD2(md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor);
    v7 = *(_DWORD **)(a1 + 48);
    *(_QWORD *)(v7 + 1) = md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor;
    v7[3] = v44;
    goto LABEL_70;
  }
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_48;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
      v6 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v9 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v9)
    goto LABEL_48;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_48;
  if (v5.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0x8BD499FBD96FBB9ELL)
      {
        if (v10[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v13 & v11) != v6)
      {
        goto LABEL_48;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_48;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v12 >= *(_QWORD *)&v4)
      v12 %= *(_QWORD *)&v4;
    if (v12 != v6)
      goto LABEL_48;
LABEL_14:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_48;
  }
  if (v10[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_14;
LABEL_46:
  v23 = v10[5];
  if (*(_QWORD *)(v23 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v24 = *(_QWORD *)(v23 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v24 = 0;
LABEL_49:
  v25 = *(float *)(v24 + 16) <= 0.01 && *(_BYTE *)v24 && *(_BYTE *)(v24 + 3);
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 20) = v25;
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(&v59, a1);
  v26 = v59;
  v27 = v60;
  if (v59 != v60)
  {
    v28 = *(_QWORD *)(a1 + 40);
    v29 = v59;
    do
    {
      v30 = *(_QWORD **)(*(_QWORD *)(v28 + 24) + 8);
      v31 = v30[3];
      v32 = v30[4];
      v33 = v32 - v31;
      if (v32 != v31)
      {
        v34 = 0;
        v35 = v33 >> 3;
        while (1)
        {
          v36 = *(unsigned __int8 **)(v31 + 8 * v34);
          if (*v36 == *v29)
          {
            v37 = *((_QWORD *)v36 + 1);
            v38 = v30[15];
            if (v37 < (v30[16] - v38) >> 3)
              break;
          }
          if (++v34 >= v35)
            goto LABEL_56;
        }
        v39 = *(_QWORD *)(v38 + 8 * v37);
        if (v39)
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v39 + 24) + 8 * v29[1]);
          if (v40)
            *(_QWORD *)(v40 + 32) = *(_QWORD *)(a1 + 48);
        }
      }
LABEL_56:
      v29 += 2;
    }
    while (v29 != v27);
  }
LABEL_81:
  if (v26)
  {
    v60 = v26;
    operator delete(v26);
  }
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::operator()(_QWORD *a1)
{
  std::recursive_mutex *v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t sig;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v2 = (std::recursive_mutex *)(a1[1] + 24);
  std::recursive_mutex::lock(v2);
  v3 = a1[3];
  if (*(_QWORD *)(v3 + 16))
  {
    atomic_store(1u, (unsigned __int8 *)(v3 + 143));
    atomic_store(1u, (unsigned __int8 *)(v3 + 144));
  }
  atomic_store(1u, (unsigned __int8 *)(v3 + 142));
  v4 = (std::mutex *)a1[5];
  std::mutex::lock(v4);
  sig = v4[1].__m_.__sig;
  if (sig)
  {
    v6 = (unsigned int *)(sig + 140);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    v8 = (unsigned int *)(sig + 136);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = atomic_load(v6);
    if (!v10 || (v11 = atomic_load(v8), v11 >= 0x14))
    {
      atomic_store(0, v8);
      v12 = a1[1];
      *(_BYTE *)(v12 + 3045) = 1;
      *(_BYTE *)(v12 + 3047) = 1;
      v13 = atomic_load((unsigned __int8 *)(v12 + 3058));
      if ((v13 & 1) != 0)
      {
        v14 = *(_QWORD *)(v12 + 136);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 56);
          if (v15)
          {
            v17 = v12;
            v16 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v15 + 48))(v15, &v17, &v16);
          }
        }
      }
    }
  }
  std::mutex::unlock(v4);
  std::recursive_mutex::unlock(v2);
}

void sub_19F137488(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *md::PuckRenderLayer::layout(md::PuckRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _QWORD *result;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  BOOL v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float32x4_t v79;
  int v80;
  uint64_t v81;
  float32x4_t v82;
  float64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float64_t v86;
  float32x4_t v87;
  float64_t v88;
  float32x4_t v89;
  uint64_t v90;
  ggl::RenderItem *v91;
  uint64_t v92;
  ggl::RenderItem *v93;
  uint64_t v94;
  uint64_t v95;
  float64_t v96;
  float32x4_t v97;
  int v98;
  uint64_t v99;
  float32x4_t v100;
  float64_t v101;
  float64_t v102;
  uint64_t v103;
  ggl::RenderItem *v104;
  ggl::RenderItem *v105;
  float32x4_t v106;
  float32x4_t v107;
  float64x2_t v108;
  float32x4_t v109;
  float64x2_t v110;
  float32x4_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float32x4_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float v121;
  float32x4_t v122;
  float v123;
  float64x2_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float64x2_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float32x4_t v132;
  float v133;
  float64x2_t v134;
  float64x2_t v135;
  float32x4_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _QWORD v165[3];
  _QWORD *v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v163[0] = &off_1E42CC7B8;
  v163[1] = a2;
  v164 = v163;
  v161[0] = &off_1E42CC800;
  v161[1] = a2;
  v162 = v161;
  v166 = v165;
  v165[0] = &off_1E42CC800;
  v165[1] = a2;
  std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v163);
  v4 = v162;
  if (v162 == v161)
  {
    v5 = 4;
    v4 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v164;
  if (v164 == v163)
  {
    v7 = 4;
    v6 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v9 = v8[3];
  v10 = v8[4];
  v11 = v10 - v9;
  if (v10 == v9)
    goto LABEL_18;
  v12 = 0;
  v13 = v11 >> 3;
  while (1)
  {
    v14 = *(unsigned __int8 **)(v9 + 8 * v12);
    if (*v14 == *((unsigned __int8 *)this + 56))
    {
      v15 = *((_QWORD *)v14 + 1);
      v16 = v8[15];
      if (v15 < (v8[16] - v16) >> 3)
        break;
    }
    if (++v12 >= v13)
      goto LABEL_18;
  }
  v17 = *(_QWORD *)(v16 + 8 * v15);
  if (!v17)
LABEL_18:
    v18 = 0;
  else
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * *((unsigned __int8 *)this + 57));
  v19 = *(_QWORD *)(v18 + 72);
  if (*(_QWORD *)(v18 + 80) != v19)
    *(_QWORD *)(v18 + 80) = v19;
  v20 = (uint64_t *)*((_QWORD *)a2 + 1);
  v21 = (int8x8_t)v20[1];
  if (!*(_QWORD *)&v21)
    goto LABEL_112;
  v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v21 <= 0xA60DDA5A69582425)
      v23 = 0xA60DDA5A69582425 % *(_QWORD *)&v21;
  }
  else
  {
    v23 = (*(_QWORD *)&v21 - 1) & 0xA60DDA5A69582425;
  }
  v24 = *v20;
  v25 = *(_QWORD **)(*v20 + 8 * v23);
  if (!v25)
    goto LABEL_112;
  v26 = (_QWORD *)*v25;
  if (!*v25)
    goto LABEL_112;
  v27 = *(_QWORD *)&v21 - 1;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v26[1];
      if (v28 == 0xA60DDA5A69582425)
      {
        if (v26[2] == 0xA60DDA5A69582425)
          goto LABEL_42;
      }
      else if ((v28 & v27) != v23)
      {
        goto LABEL_112;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_112;
    }
  }
  while (1)
  {
    v29 = v26[1];
    if (v29 == 0xA60DDA5A69582425)
      break;
    if (v29 >= *(_QWORD *)&v21)
      v29 %= *(_QWORD *)&v21;
    if (v29 != v23)
      goto LABEL_112;
LABEL_36:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_112;
  }
  if (v26[2] != 0xA60DDA5A69582425)
    goto LABEL_36;
LABEL_42:
  v30 = v26[5];
  if (*(_QWORD *)(v30 + 8) != 0xA60DDA5A69582425)
    goto LABEL_112;
  v31 = *(id **)(v30 + 32);
  if (!v31)
    goto LABEL_112;
  if (v22.u32[0] > 1uLL)
  {
    v32 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v21 <= 0x3070CB6B3C7F21D3uLL)
      v32 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v21;
  }
  else
  {
    v32 = v27 & 0x3070CB6B3C7F21D3;
  }
  v33 = *(_QWORD **)(v24 + 8 * v32);
  if (!v33)
    goto LABEL_112;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_112;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v35 = v34[1];
      if (v35 == 0x3070CB6B3C7F21D3)
      {
        if (v34[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_64;
      }
      else if ((v35 & v27) != v32)
      {
        goto LABEL_112;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_112;
    }
  }
  while (2)
  {
    v36 = v34[1];
    if (v36 != 0x3070CB6B3C7F21D3)
    {
      if (v36 >= *(_QWORD *)&v21)
        v36 %= *(_QWORD *)&v21;
      if (v36 != v32)
        goto LABEL_112;
      goto LABEL_58;
    }
    if (v34[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_58:
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_112;
      continue;
    }
    break;
  }
LABEL_64:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0x3070CB6B3C7F21D3)
    goto LABEL_112;
  v38 = *(_QWORD *)(v37 + 32);
  if (!v38)
    goto LABEL_112;
  if (v22.u32[0] > 1uLL)
  {
    v39 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v21 <= 0x1AF456233693CD46uLL)
      v39 = 0x1AF456233693CD46uLL % *(_QWORD *)&v21;
  }
  else
  {
    v39 = v27 & 0x1AF456233693CD46;
  }
  v40 = *(_QWORD **)(v24 + 8 * v39);
  if (!v40)
    goto LABEL_112;
  v41 = (_QWORD *)*v40;
  if (!v41)
    goto LABEL_112;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v42 = v41[1];
      if (v42 == 0x1AF456233693CD46)
      {
        if (v41[2] == 0x1AF456233693CD46)
          goto LABEL_86;
      }
      else if ((v42 & v27) != v39)
      {
        goto LABEL_112;
      }
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_112;
    }
  }
  while (2)
  {
    v43 = v41[1];
    if (v43 != 0x1AF456233693CD46)
    {
      if (v43 >= *(_QWORD *)&v21)
        v43 %= *(_QWORD *)&v21;
      if (v43 != v39)
        goto LABEL_112;
      goto LABEL_80;
    }
    if (v41[2] != 0x1AF456233693CD46)
    {
LABEL_80:
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_112;
      continue;
    }
    break;
  }
LABEL_86:
  v44 = v41[5];
  if (*(_QWORD *)(v44 + 8) != 0x1AF456233693CD46)
    goto LABEL_112;
  v45 = *(_QWORD *)(v44 + 32);
  if (!v45)
    goto LABEL_112;
  if (v22.u32[0] > 1uLL)
  {
    v46 = 0x9AEE7E062376E454;
    if (*(_QWORD *)&v21 <= 0x9AEE7E062376E454)
      v46 = 0x9AEE7E062376E454 % *(_QWORD *)&v21;
  }
  else
  {
    v46 = v27 & 0x9AEE7E062376E454;
  }
  v47 = *(_QWORD **)(v24 + 8 * v46);
  if (!v47)
    goto LABEL_112;
  v48 = (_QWORD *)*v47;
  if (!v48)
    goto LABEL_112;
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      v49 = v48[1];
      if (v49 == 0x9AEE7E062376E454)
      {
        if (v48[2] == 0x9AEE7E062376E454)
          goto LABEL_108;
      }
      else if ((v49 & v27) != v46)
      {
        goto LABEL_112;
      }
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_112;
    }
  }
  while (2)
  {
    v50 = v48[1];
    if (v50 != 0x9AEE7E062376E454)
    {
      if (v50 >= *(_QWORD *)&v21)
        v50 %= *(_QWORD *)&v21;
      if (v50 != v46)
        goto LABEL_112;
      goto LABEL_102;
    }
    if (v48[2] != 0x9AEE7E062376E454)
    {
LABEL_102:
      v48 = (_QWORD *)*v48;
      if (!v48)
        goto LABEL_112;
      continue;
    }
    break;
  }
LABEL_108:
  v51 = v48[5];
  if (*(_QWORD *)(v51 + 8) == 0x9AEE7E062376E454)
  {
    v52 = *(unsigned __int8 **)(v51 + 32);
    if (v52)
    {
      if (v52[208] && !v52[209])
      {
        if (v22.u32[0] > 1uLL)
        {
          v55 = 0x1B8B241A8D896A1DLL;
          if (*(_QWORD *)&v21 <= 0x1B8B241A8D896A1DuLL)
            v55 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v21;
        }
        else
        {
          v55 = v27 & 0x1B8B241A8D896A1DLL;
        }
        v56 = *(_QWORD **)(v24 + 8 * v55);
        if (v56)
        {
          v57 = (_QWORD *)*v56;
          if (v57)
          {
            if (v22.u32[0] < 2uLL)
            {
              while (1)
              {
                v58 = v57[1];
                if (v58 == 0x1B8B241A8D896A1DLL)
                {
                  if (v57[2] == 0x1B8B241A8D896A1DLL)
                    goto LABEL_140;
                }
                else if ((v58 & v27) != v55)
                {
                  goto LABEL_112;
                }
                v57 = (_QWORD *)*v57;
                if (!v57)
                  goto LABEL_112;
              }
            }
            do
            {
              v59 = v57[1];
              if (v59 == 0x1B8B241A8D896A1DLL)
              {
                if (v57[2] == 0x1B8B241A8D896A1DLL)
                {
LABEL_140:
                  v60 = v57[5];
                  if (*(_QWORD *)(v60 + 8) == 0x1B8B241A8D896A1DLL)
                  {
                    v61 = *(_QWORD *)(v60 + 32);
                    if (v61)
                    {
                      v62 = *(id *)(v61 + 48);
                      if (v62)
                      {
                        v63 = v62;
                        v64 = objc_msgSend(*(id *)(v61 + 48), "puck") == 0;

                        if (!v64)
                        {
                          v65 = *((_QWORD *)this + 6);
                          v66 = *v31;
                          v67 = *(id *)(v61 + 48);
                          v68 = objc_msgSend(v67, "puck");
                          v69 = *(id *)(*((_QWORD *)this + 5) + 104);
                          objc_msgSend(v69, "contentScale");
                          *(float *)&v70 = v70;
                          md::PuckRenderResources::update(v65, v66, v68, *v52, (uint64_t)(v52 + 56), *(float *)&v70);

                          v71 = *(float64x2_t *)(v52 + 232);
                          v153 = *(float64x2_t *)(v52 + 216);
                          v154 = v71;
                          v72 = *(float64x2_t *)(v52 + 248);
                          v73 = *(float64x2_t *)(v52 + 296);
                          v74 = *(float64x2_t *)(v52 + 264);
                          v157 = *(float64x2_t *)(v52 + 280);
                          v158 = v73;
                          v75 = *(float64x2_t *)(v52 + 296);
                          v76 = *(float64x2_t *)(v52 + 328);
                          v159 = *(float64x2_t *)(v52 + 312);
                          v160 = v76;
                          v77 = *(float64x2_t *)(v52 + 264);
                          v155 = v72;
                          v156 = v77;
                          v149 = v157;
                          v150 = v75;
                          v78 = *(float64x2_t *)(v52 + 328);
                          v151 = v159;
                          v152 = v78;
                          v79 = *(float32x4_t *)(v52 + 232);
                          v145 = *(float64x2_t *)(v52 + 216);
                          v146 = (float64x2_t)v79;
                          v79.i64[0] = *((_QWORD *)v52 + 11);
                          v79.i32[2] = *((_DWORD *)v52 + 24);
                          v147 = *(float64x2_t *)(v52 + 248);
                          v148 = v74;
                          v123 = *((float *)v52 + 17);
                          v126 = v79;
                          v80 = *((_DWORD *)v52 + 25);
                          v81 = *(_QWORD *)(*((_QWORD *)this + 6) + 32);
                          gm::operator*<double,4,4,4>(v137.f64, (double *)(v45 + 808), v145.f64);
                          v145 = v137;
                          v146 = v138;
                          v147 = v139;
                          v148 = v140;
                          v149 = v141;
                          v150 = v142;
                          v151 = v143;
                          v152 = v144;
                          v133 = *((float *)v52 + 16);
                          v129 = *(float32x4_t *)(v52 + 72);
                          ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, *(_QWORD *)(*(_QWORD *)(v81 + 64) + 48));
                          **(_OWORD **)&v139.f64[1] = vmulq_n_f32(v129, v133);
                          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                          v108 = v145;
                          v110 = v147;
                          v112 = v149;
                          v114 = v146;
                          v130 = v150;
                          v134 = v152;
                          v116 = v151;
                          v119 = v148;
                          ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, **(_QWORD **)(v81 + 64));
                          v82 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v108), v114);
                          v83 = v139.f64[1];
                          v109 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v110), v119);
                          v111 = v82;
                          **(_OWORD **)&v139.f64[1] = v82;
                          *(float32x4_t *)(*(_QWORD *)&v83 + 16) = v109;
                          v106 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v116), v134);
                          v107 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112), v130);
                          *(float32x4_t *)(*(_QWORD *)&v83 + 32) = v107;
                          *(float32x4_t *)(*(_QWORD *)&v83 + 48) = v106;
                          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                          ggl::DaVinci::GroundDepthPipelineSetup::setElevationsDeviceData(*(_QWORD *)(v81 + 64), *(_QWORD *)(v81 + 160), *(_QWORD *)(*((_QWORD *)this + 6) + 240));
                          v84 = *(_QWORD *)(*((_QWORD *)this + 6) + 48);
                          gm::operator*<double,4,4,4>(v137.f64, (double *)(v45 + 808), v153.f64);
                          v153 = v137;
                          v154 = v138;
                          v155 = v139;
                          v156 = v140;
                          v157 = v141;
                          v158 = v142;
                          v159 = v143;
                          v160 = v144;
                          ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, *(_QWORD *)(*(_QWORD *)(v84 + 64) + 16));
                          v85 = vmulq_n_f32(v126, v123);
                          v86 = v139.f64[1];
                          *(_DWORD *)(*(_QWORD *)&v139.f64[1] + 8) = v85.i32[2];
                          **(_QWORD **)&v86 = v85.i64[0];
                          *(_DWORD *)(*(_QWORD *)&v86 + 12) = v80;
                          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                          v113 = v153;
                          v115 = v155;
                          v127 = v156;
                          v131 = v158;
                          v117 = v157;
                          v120 = v154;
                          v135 = v160;
                          v124 = v159;
                          ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, **(_QWORD **)(v84 + 64));
                          v87 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v117), v131);
                          v88 = v139.f64[1];
                          v128 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v115), v127);
                          v132 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v113), v120);
                          **(_OWORD **)&v139.f64[1] = v132;
                          *(float32x4_t *)(*(_QWORD *)&v88 + 16) = v128;
                          v89 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v124), v135);
                          v136 = v87;
                          *(float32x4_t *)(*(_QWORD *)&v88 + 32) = v87;
                          *(float32x4_t *)(*(_QWORD *)&v88 + 48) = v89;
                          v125 = v89;
                          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                          v90 = *((_QWORD *)this + 6);
                          v91 = *(ggl::RenderItem **)(v90 + 144);
                          v92 = 16;
                          if (*(unsigned __int8 *)(v38 + 320) - 1 < 3)
                            v92 = 32;
                          v93 = *(ggl::RenderItem **)(v90 + 160);
                          v94 = *(_QWORD *)(v38 + v92);
                          *((_QWORD *)v93 + 8) = v94;
                          *((_QWORD *)v91 + 8) = v94;
                          ggl::CommandBuffer::pushRenderItem(v18, v93);
                          ggl::CommandBuffer::pushRenderItem(v18, v91);
                          if (!v52[129])
                          {
                            v95 = *(_QWORD *)(*((_QWORD *)this + 6) + 64);
                            v121 = *((float *)v52 + 35);
                            v118 = *(float32x4_t *)(v52 + 148);
                            ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, *(_QWORD *)(*(_QWORD *)(v95 + 64) + 48));
                            **(_OWORD **)&v139.f64[1] = vmulq_n_f32(v118, v121);
                            ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                            ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, **(_QWORD **)(v95 + 64));
                            v96 = v139.f64[1];
                            **(_OWORD **)&v139.f64[1] = v111;
                            *(float32x4_t *)(*(_QWORD *)&v96 + 16) = v109;
                            *(float32x4_t *)(*(_QWORD *)&v96 + 32) = v107;
                            *(float32x4_t *)(*(_QWORD *)&v96 + 48) = v106;
                            ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                            ggl::DaVinci::GroundDepthPipelineSetup::setElevationsDeviceData(*(_QWORD *)(v95 + 64), *(_QWORD *)(v95 + 160), *(_QWORD *)(*((_QWORD *)this + 6) + 240));
                            v97.i64[0] = *(_QWORD *)(v52 + 164);
                            v97.i32[2] = *((_DWORD *)v52 + 43);
                            v122 = v97;
                            v118.i32[0] = *((_DWORD *)v52 + 36);
                            v98 = *((_DWORD *)v52 + 44);
                            v99 = *(_QWORD *)(*((_QWORD *)this + 6) + 80);
                            ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, *(_QWORD *)(*(_QWORD *)(v99 + 64) + 16));
                            v100 = vmulq_n_f32(v122, v118.f32[0]);
                            v101 = v139.f64[1];
                            *(_DWORD *)(*(_QWORD *)&v139.f64[1] + 8) = v100.i32[2];
                            **(_QWORD **)&v101 = v100.i64[0];
                            *(_DWORD *)(*(_QWORD *)&v101 + 12) = v98;
                            ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                            ggl::ConstantDataTyped<ggl::Textured::Style>::write((uint64_t *)&v137, **(_QWORD **)(v99 + 64));
                            v102 = v139.f64[1];
                            **(_OWORD **)&v139.f64[1] = v132;
                            *(float32x4_t *)(*(_QWORD *)&v102 + 16) = v128;
                            *(float32x4_t *)(*(_QWORD *)&v102 + 32) = v136;
                            *(float32x4_t *)(*(_QWORD *)&v102 + 48) = v125;
                            ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v137);
                            v103 = *((_QWORD *)this + 6);
                            v104 = *(ggl::RenderItem **)(v103 + 192);
                            v105 = *(ggl::RenderItem **)(v103 + 176);
                            *((_QWORD *)v104 + 8) = v94;
                            *((_QWORD *)v105 + 8) = v94;
                            ggl::CommandBuffer::pushRenderItem(v18, v104);
                            ggl::CommandBuffer::pushRenderItem(v18, v105);
                          }
                        }
                      }
                    }
                  }
                  break;
                }
              }
              else
              {
                if (v59 >= *(_QWORD *)&v21)
                  v59 %= *(_QWORD *)&v21;
                if (v59 != v55)
                  break;
              }
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
        }
      }
    }
  }
LABEL_112:
  if (!v166)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v166 + 48))(v166);
  result = v166;
  if (v166 == v165)
  {
    v54 = 4;
    result = v165;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v54))();
  }
  else if (v166)
  {
    v54 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v54))();
  }
  return result;
}

void sub_19F137FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_19F138028()
{
  void *v0;

  JUMPOUT(0x19F138030);
}

void sub_19F13803C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F138048(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(v2 - 120);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 144);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v2 - 184);
  if (v6 == (_QWORD *)(v2 - 208))
  {
    v7 = 4;
    v6 = (_QWORD *)(v2 - 208);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(v2 - 152);
  if (v8 == (_QWORD *)(v2 - 176))
  {
    v9 = 4;
    v8 = (_QWORD *)(v2 - 176);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

_QWORD *md::VenueRenderLayer::layout(md::VenueRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int8x8_t *v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  int8x8_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int8x8_t v62;
  uint8x8_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  float v67;
  float v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  unsigned __int8 **v76;
  uint64_t v77;
  unsigned __int8 **v78;
  uint64_t v79;
  unsigned __int8 **v80;
  uint64_t v81;
  unsigned __int8 **v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *result;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _QWORD v94[3];
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  _QWORD v100[3];
  _QWORD *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 **v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v98[0] = &off_1E42CE2B8;
  v98[1] = a2;
  v99 = v98;
  v96[0] = &off_1E42CE300;
  v96[1] = a2;
  v97 = v96;
  v101 = v100;
  v100[0] = &off_1E42CE300;
  v100[1] = a2;
  std::__function::__func<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::VenueRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v98);
  v4 = v97;
  if (v97 == v96)
  {
    v5 = 4;
    v4 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v99;
  if (v99 == v98)
  {
    v7 = 4;
    v6 = v98;
    goto LABEL_10;
  }
  if (v99)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_176;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v9 <= 0x4927EB92E562CC46uLL)
      v11 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x4927EB92E562CC46;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_176;
  v13 = (_QWORD *)*v12;
  if (!*v12)
    goto LABEL_176;
  v14 = *(_QWORD *)&v9 - 1;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v15 = v13[1];
      if (v15 == 0x4927EB92E562CC46)
      {
        if (v13[2] == 0x4927EB92E562CC46)
          goto LABEL_32;
      }
      else if ((v15 & v14) != v11)
      {
        goto LABEL_176;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_176;
    }
  }
  while (1)
  {
    v16 = v13[1];
    if (v16 == 0x4927EB92E562CC46)
      break;
    if (v16 >= *(_QWORD *)&v9)
      v16 %= *(_QWORD *)&v9;
    if (v16 != v11)
      goto LABEL_176;
LABEL_26:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_176;
  }
  if (v13[2] != 0x4927EB92E562CC46)
    goto LABEL_26;
LABEL_32:
  v17 = v13[5];
  if (*(_QWORD *)(v17 + 8) != 0x4927EB92E562CC46)
    goto LABEL_176;
  v18 = *(_QWORD *)(v17 + 32);
  if (!v18)
    goto LABEL_176;
  v92 = *((_OWORD *)this + 17);
  if (v10.u32[0] >= 2uLL)
  {
    v20 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v9 <= 0xE42D19AFCA302E68)
      v20 = 0xE42D19AFCA302E68 % *(_QWORD *)&v9;
    v19 = *(_QWORD **)(*v8 + 8 * v20);
    do
    {
      do
        v19 = (_QWORD *)*v19;
      while (v19[1] != 0xE42D19AFCA302E68);
    }
    while (v19[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v19 = *(_QWORD **)(*v8 + 8 * (v14 & 0xE42D19AFCA302E68));
    do
    {
      do
        v19 = (_QWORD *)*v19;
      while (v19[1] != 0xE42D19AFCA302E68);
    }
    while (v19[2] != 0xE42D19AFCA302E68);
  }
  v21 = *(_QWORD *)(v19[5] + 32);
  v94[0] = &off_1E42CE348;
  v94[1] = this;
  v94[2] = &v92;
  v95 = v94;
  md::StyleLogicContext::parseEvents(*(_QWORD *)(v21 + 48), *(char **)(v21 + 56), (uint64_t)v94);
  v23 = v95;
  if (v95 == v94)
  {
    v24 = 4;
    v23 = v94;
LABEL_48:
    (*(void (**)(_QWORD *, uint64_t))(*v23 + 8 * v24))(v23, v22);
  }
  else if (v95)
  {
    v24 = 5;
    goto LABEL_48;
  }
  v25 = (uint64_t *)*((_QWORD *)a2 + 1);
  v26 = (int8x8_t)v25[1];
  if (!*(_QWORD *)&v26)
  {
    v29 = 0;
    goto LABEL_96;
  }
  v27 = (uint8x8_t)vcnt_s8(v26);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    v28 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v26 <= 0xC97B9E962ADF4AD4)
      v28 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v26;
  }
  else
  {
    v28 = (*(_QWORD *)&v26 - 1) & 0xC97B9E962ADF4AD4;
  }
  v30 = *v25;
  v31 = *(_QWORD **)(v30 + 8 * v28);
  if (!v31)
    goto LABEL_73;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_73;
  if (v27.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v32[1];
      if (v34 == 0xC97B9E962ADF4AD4)
      {
        if (v32[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_71;
      }
      else if ((v34 & (*(_QWORD *)&v26 - 1)) != v28)
      {
        goto LABEL_73;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_73;
    }
  }
  while (2)
  {
    v33 = v32[1];
    if (v33 != 0xC97B9E962ADF4AD4)
    {
      if (v33 >= *(_QWORD *)&v26)
        v33 %= *(_QWORD *)&v26;
      if (v33 != v28)
        goto LABEL_73;
      goto LABEL_60;
    }
    if (v32[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_60:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_73;
      continue;
    }
    break;
  }
LABEL_71:
  v35 = v32[5];
  if (*(_QWORD *)(v35 + 8) == 0xC97B9E962ADF4AD4)
  {
    v29 = *(uint64_t **)(v35 + 32);
    goto LABEL_74;
  }
LABEL_73:
  v29 = 0;
LABEL_74:
  if (v27.u32[0] > 1uLL)
  {
    v36 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v26 <= 0x8BD499FBD96FBB9ELL)
      v36 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v26;
  }
  else
  {
    v36 = (*(_QWORD *)&v26 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v37 = *(_QWORD **)(v30 + 8 * v36);
  if (!v37)
    goto LABEL_96;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_96;
  if (v27.u32[0] < 2uLL)
  {
    v39 = *(_QWORD *)&v26 - 1;
    while (1)
    {
      v41 = v38[1];
      if (v41 == 0x8BD499FBD96FBB9ELL)
      {
        if (v38[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_94;
      }
      else if ((v41 & v39) != v36)
      {
        goto LABEL_96;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_96;
    }
  }
  while (1)
  {
    v40 = v38[1];
    if (v40 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v40 >= *(_QWORD *)&v26)
      v40 %= *(_QWORD *)&v26;
    if (v40 != v36)
      goto LABEL_96;
LABEL_83:
    v38 = (_QWORD *)*v38;
    if (!v38)
      goto LABEL_96;
  }
  if (v38[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_83;
LABEL_94:
  v42 = v38[5];
  if (*(_QWORD *)(v42 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_96:
    v43 = 0;
    goto LABEL_97;
  }
  v43 = *(_QWORD *)(v42 + 32);
  if (!*(_BYTE *)v43)
    goto LABEL_105;
LABEL_97:
  v44 = *v29;
  v45 = v29[1];
  if (v44 != v45)
  {
    while (*(_BYTE *)v44 != 21)
    {
      v44 += 16;
      if (v44 == v45)
        goto LABEL_105;
    }
  }
  if (v44 != v45 && *(_QWORD *)(v44 + 8))
  {
    md::LayoutContext::frameState(a2);
    v47 = *(unsigned __int8 *)(v46 + 128) - 1 < 3;
  }
  else
  {
LABEL_105:
    v47 = 0;
  }
  md::PolygonRenderResources::resetPools(*((md::PolygonRenderResources **)this + 46));
  md::CVenueRenderResources::resetPools(*((md::CVenueRenderResources **)this + 47));
  *((_BYTE *)this + 392) = v47;
  *((_BYTE *)this + 393) = v47;
  v48 = (int8x8_t *)*((_QWORD *)a2 + 1);
  v49 = md::VenueRenderLayer::_venuesCommandBuffer(this, v48);
  v50 = *(_QWORD *)(v49 + 72);
  if (*(_QWORD *)(v49 + 80) != v50)
    *(_QWORD *)(v49 + 80) = v50;
  *((_QWORD *)this + 56) = v49;
  md::LayoutContext::zoomAtCentrePoint(v48);
  if (fminf(fmaxf((float)(v51 * 2.0) + -31.0, 0.0), 1.0) < 0.00000011921)
    goto LABEL_176;
  v52 = v48[1];
  if (!*(_QWORD *)&v52)
    goto LABEL_176;
  v53 = (uint8x8_t)vcnt_s8(v52);
  v53.i16[0] = vaddlv_u8(v53);
  if (v53.u32[0] > 1uLL)
  {
    v54 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v52 <= 0x41E8D6E445F4145uLL)
      v54 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v52;
  }
  else
  {
    v54 = (*(_QWORD *)&v52 - 1) & 0x41E8D6E445F4145;
  }
  v55 = *(_QWORD **)(*(_QWORD *)v48 + 8 * v54);
  if (!v55)
    goto LABEL_176;
  v56 = (_QWORD *)*v55;
  if (!v56)
    goto LABEL_176;
  if (v53.u32[0] < 2uLL)
  {
    v57 = *(_QWORD *)&v52 - 1;
    while (1)
    {
      v59 = v56[1];
      if (v59 == 0x41E8D6E445F4145)
      {
        if (v56[2] == 0x41E8D6E445F4145)
          goto LABEL_130;
      }
      else if ((v59 & v57) != v54)
      {
        goto LABEL_176;
      }
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_176;
    }
  }
  while (2)
  {
    v58 = v56[1];
    if (v58 != 0x41E8D6E445F4145)
    {
      if (v58 >= *(_QWORD *)&v52)
        v58 %= *(_QWORD *)&v52;
      if (v58 != v54)
        goto LABEL_176;
      goto LABEL_119;
    }
    if (v56[2] != 0x41E8D6E445F4145)
    {
LABEL_119:
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_176;
      continue;
    }
    break;
  }
LABEL_130:
  v60 = v56[5];
  if (*(_QWORD *)(v60 + 8) != 0x41E8D6E445F4145 || !*(_QWORD *)(v60 + 32))
    goto LABEL_176;
  *((_BYTE *)this + 438) = *(_BYTE *)(v18 + 352);
  *((_QWORD *)this + 55) = v18;
  md::PolygonLayoutCharacteristics::setSelectedFeatureIds((uint64_t)this + 384, (char **)(v18 + 120));
  if (!*((_BYTE *)this + 393))
  {
    v65 = (uint64_t *)*((_QWORD *)this + 34);
    v66 = (uint64_t *)*((_QWORD *)this + 35);
    if (v65 != v66)
    {
      v68 = *(float *)(v43 + 16);
      v67 = *(float *)(v43 + 20);
      do
        md::BaseMapTileDataRenderable::adjustZScale(*v65++, v68, v67);
      while (v65 != v66);
    }
LABEL_161:
    *(_QWORD *)(*((_QWORD *)this + 46) + 264) = 0;
    md::preparePolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>((uint64_t **)this + 34, *((uint64_t **)a2 + 1), (uint64_t)this + 384);
    md::VenueRenderLayer::_layoutDimmingOverlay(this, *((int8x8_t **)a2 + 1));
    v93 = md::VenueRenderLayer::_venuesCommandBuffer(this, *((int8x8_t **)a2 + 1));
    v76 = (unsigned __int8 **)operator new(0x20uLL);
    *v76 = (unsigned __int8 *)&off_1E42CE228;
    v76[1] = (unsigned __int8 *)this;
    v76[2] = (unsigned __int8 *)a2;
    v76[3] = (unsigned __int8 *)&v93;
    v104 = v76;
    md::VenueRenderLayer::_forEachVisibleVenueGroup((uint64_t)this, (uint64_t)a2, (uint64_t)&v102);
    v78 = v104;
    if (v104 == &v102)
    {
      v79 = 4;
      v78 = &v102;
    }
    else
    {
      if (!v104)
        goto LABEL_166;
      v79 = 5;
    }
    (*(void (**)(unsigned __int8 **, uint64_t))&(*v78)[8 * v79])(v78, v77);
LABEL_166:
    md::layoutPolygonTiles<md::MapTileDataRenderable<md::VenueTileData>>((uint64_t)this + 272, (uint64_t)a2, *((_QWORD *)this + 5), *((_QWORD *)this + 46), (uint64_t)this + 384, v47);
    v93 = md::VenueRenderLayer::_venuesCommandBuffer(this, *((int8x8_t **)a2 + 1));
    v80 = (unsigned __int8 **)operator new(0x20uLL);
    *v80 = (unsigned __int8 *)&off_1E42CE270;
    v80[1] = (unsigned __int8 *)this;
    v80[2] = (unsigned __int8 *)a2;
    v80[3] = (unsigned __int8 *)&v93;
    v104 = v80;
    md::VenueRenderLayer::_forEachVisibleVenueGroup((uint64_t)this, (uint64_t)a2, (uint64_t)&v102);
    v82 = v104;
    if (v104 == &v102)
    {
      v83 = 4;
      v82 = &v102;
    }
    else
    {
      if (!v104)
      {
LABEL_171:
        md::VenueRenderLayer::_layoutVenueFootprints(this, *((int8x8_t **)a2 + 1));
        (*(void (**)(unsigned __int8 **__return_ptr, md::VenueRenderLayer *, const md::LayoutContext *))(*(_QWORD *)this + 32))(&v102, this, a2);
        v84 = v102;
        v85 = v103;
        if (v102 != v103)
        {
          do
          {
            v86 = v84[1];
            v87 = *v84;
            v84 += 2;
            v88 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), v87, v86);
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v88 + 72), *(char **)(v88 + 80));
          }
          while (v84 != v85);
          v84 = v102;
        }
        if (v84)
        {
          v103 = v84;
          operator delete(v84);
        }
        goto LABEL_176;
      }
      v83 = 5;
    }
    (*(void (**)(unsigned __int8 **, uint64_t))&(*v82)[8 * v83])(v82, v81);
    goto LABEL_171;
  }
  v61 = (_QWORD *)*((_QWORD *)a2 + 1);
  v62 = (int8x8_t)v61[1];
  if (!*(_QWORD *)&v62)
    goto LABEL_161;
  v63 = (uint8x8_t)vcnt_s8(v62);
  v63.i16[0] = vaddlv_u8(v63);
  if (v63.u32[0] > 1uLL)
  {
    v64 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v62 <= 0x1B8B241A8D896A1DuLL)
      v64 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v62;
  }
  else
  {
    v64 = (*(_QWORD *)&v62 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v69 = *(_QWORD **)(*v61 + 8 * v64);
  if (!v69)
    goto LABEL_161;
  v70 = (_QWORD *)*v69;
  if (!v70)
    goto LABEL_161;
  if (v63.u32[0] < 2uLL)
  {
    v71 = *(_QWORD *)&v62 - 1;
    while (1)
    {
      v73 = v70[1];
      if (v73 == 0x1B8B241A8D896A1DLL)
      {
        if (v70[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_158;
      }
      else if ((v73 & v71) != v64)
      {
        goto LABEL_161;
      }
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_161;
    }
  }
  while (1)
  {
    v72 = v70[1];
    if (v72 == 0x1B8B241A8D896A1DLL)
      break;
    if (v72 >= *(_QWORD *)&v62)
      v72 %= *(_QWORD *)&v62;
    if (v72 != v64)
      goto LABEL_161;
LABEL_147:
    v70 = (_QWORD *)*v70;
    if (!v70)
      goto LABEL_161;
  }
  if (v70[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_147;
LABEL_158:
  v74 = v70[5];
  if (*(_QWORD *)(v74 + 8) != 0x1B8B241A8D896A1DLL)
    goto LABEL_161;
  v75 = *(_BYTE **)(v74 + 32);
  if (!v75 || !*v75)
    goto LABEL_161;
LABEL_176:
  if (!v101)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v101 + 48))(v101);
  result = v101;
  if (v101 == v100)
  {
    v91 = 4;
    result = v100;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v91))(result, v89);
  }
  else if (v101)
  {
    v91 = 5;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v91))(result, v89);
  }
  return result;
}

void sub_19F138B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void sub_19F138B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char *a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  v31 = a19;
  if (a19 == &a16)
  {
    v32 = 4;
    v31 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_11:
  v33 = a23;
  if (a23 == &a20)
  {
    v34 = 4;
    v33 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_16;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_0,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0BC8;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1900;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D2B48;
}

void std::__function::__func<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::HillshadeRenderResources::HillshadeRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D20E0;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_5>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1FC0;
}

void std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_4>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1F78;
}

void std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1CF0;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_16>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1870;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_14>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D17E0;
}

void std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_12>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1750;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::operator()(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::mutex *v3;
  uint64_t sig;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = (std::recursive_mutex *)(*(_QWORD *)(a1 + 8) + 24);
  std::recursive_mutex::lock(v2);
  v3 = *(std::mutex **)(a1 + 24);
  std::mutex::lock(v3);
  sig = v3[1].__m_.__sig;
  if (sig)
  {
    v5 = (unsigned int *)(sig + 56);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    v7 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v7 + 3045) = 1;
    *(_BYTE *)(v7 + 3047) = 1;
    v8 = atomic_load((unsigned __int8 *)(v7 + 3058));
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 136);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 56);
        if (v10)
        {
          v12 = v7;
          v11 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v10 + 48))(v10, &v12, &v11);
        }
      }
    }
  }
  std::mutex::unlock(v3);
  std::recursive_mutex::unlock(v2);
}

void sub_19F138DAC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::operator()(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::mutex *v3;
  uint64_t sig;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = (std::recursive_mutex *)(*(_QWORD *)(a1 + 8) + 24);
  std::recursive_mutex::lock(v2);
  v3 = *(std::mutex **)(a1 + 24);
  std::mutex::lock(v3);
  sig = v3[1].__m_.__sig;
  if (sig)
  {
    v5 = (unsigned int *)(sig + 64);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    v7 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v7 + 3045) = 1;
    *(_BYTE *)(v7 + 3047) = 1;
    v8 = atomic_load((unsigned __int8 *)(v7 + 3058));
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v7 + 136);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 56);
        if (v10)
        {
          v12 = v7;
          v11 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v10 + 48))(v10, &v12, &v11);
        }
      }
    }
  }
  std::mutex::unlock(v3);
  std::recursive_mutex::unlock(v2);
}

void sub_19F138E8C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ArrowLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  double v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  float32x2_t v25;
  double v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;

  v6 = *(_QWORD *)(a1 + 640);
  if (!v6)
    goto LABEL_6;
  v7 = atomic_load((unsigned __int8 *)(v6 + 142));
  if ((v7 & 1) == 0)
    return 15;
  v9 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 640) + 143));
  if ((v9 & 1) == 0)
    return 16;
LABEL_6:
  if (*(float *)(a1 + 912) == 0.0)
  {
    v10 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
    v14 = (float)(v11 - v10) / (float)(v13 - v12);
    *(float *)(a1 + 912) = v14;
    *(float *)(a1 + 816) = v14 * *(float *)(a1 + 820);
  }
  v15 = *(_QWORD *)(a2 + 432);
  if (!*(_BYTE *)(a1 + 836)
    && (*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 768) + 168))(*(_QWORD *)(a1 + 768), (int)*(float *)(*(_QWORD *)(a1 + 32) + 16))&& (*(unsigned int (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a1 + 768) + 176))(*(_QWORD *)(a1 + 768), (int)*(float *)(*(_QWORD *)(a1 + 32) + 16), 1.0))
  {
    *(_BYTE *)(a1 + 917) = 1;
  }
  v16 = *(_DWORD *)(v15 + 1176);
  if (*(_DWORD *)(a1 + 824) != v16)
  {
    *(_DWORD *)(a1 + 824) = v16;
    *(_BYTE *)(a1 + 832) = md::ArrowLabelPart::layoutAlongPath(a1, 0, v15, *a3, a3[1]);
  }
  v17 = *(_QWORD *)(a1 + 640);
  if (!v17 || (v18 = atomic_load((unsigned __int8 *)(v17 + 143)), (v18 & 1) != 0))
  {
    if (*(_BYTE *)(a1 + 629))
    {
      *(_BYTE *)(a1 + 629) = 0;
      v19 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 936))(a1, *(_QWORD *)(a1 + 640));
      *(float *)&v19 = 0.5 - (float)(fminf(v22 - v21, v20 - *(float *)&v19) * 0.5);
      *(float32x2_t *)(a1 + 168) = vmaxnm_f32(*(float32x2_t *)(a1 + 620), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19, 0));
      *(_BYTE *)(a1 + 271) = *(_BYTE *)(a1 + 631);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a1 + 630);
    }
  }
  md::IconLabelPart::updateCollisionObject(a1, 0);
  v25 = *(float32x2_t *)a3;
  if (*(_BYTE *)(a1 + 836))
  {
    v26 = *(double *)(a1 + 808);
    v25 = vadd_f32(*(float32x2_t *)&v26, v25);
  }
  else
  {
    v27 = *(unsigned __int8 **)(a1 + 768);
    v28 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v27 + 80))(v27);
    v29 = v27[45];
    if (v27[45])
      v30 = 1;
    else
      v30 = 2;
    if (v29 == 2)
      v30 = 0;
    if (v28)
      v29 = v30;
    if (v29 != 1)
    {
      LODWORD(v26) = *(_DWORD *)(a1 + 816);
      v23 = *(double *)(a1 + 792);
      v25 = vmla_n_f32(v25, *(float32x2_t *)&v23, *(float *)&v26);
    }
  }
  *(float32x2_t *)(a1 + 280) = v25;
  *(float32x2_t *)(a1 + 104) = v25;
  md::CollisionObject::setupShapeData(a1 + 72, v26, v23, v24);
  return *(unsigned __int8 *)(a1 + 832);
}

uint64_t md::CompositeLabelPart::prepareForDisplay(uint64_t this, LabelManager *a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, LabelManager *))(*(_QWORD *)v5 + 104))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

double md::CurvedTextLabelPart::prepareForDisplay(void **this, md::LabelManager *a2)
{
  unsigned int v3;

  md::TextLabelPart::prepareForDisplay((md::TextLabelPart *)this, a2);
  if (!*((_BYTE *)this + 1144))
  {
    (*(void (**)(void *, char *))(*(_QWORD *)this[134] + 24))(this[134], (char *)this + 1264);
    *((_BYTE *)this + 1328) = *((_BYTE *)this + 1136);
    *((_BYTE *)this + 1333) = *((_BYTE *)this + 1141);
  }
  *((_BYTE *)this + 1334) = (*(uint64_t (**)(void *))(*(_QWORD *)this[158] + 80))(this[158]);
  v3 = -1431655765
     * ((*(_QWORD *)(*((_QWORD *)this[74] + 2) + 64) - *(_QWORD *)(*((_QWORD *)this[74] + 2) + 56)) >> 3);
  this[100] = (void *)(-1431633920
                     * ((*(_QWORD *)(*((_QWORD *)this[74] + 2) + 64)
                                     - *(_QWORD *)(*((_QWORD *)this[74] + 2) + 56)) >> 3));
  return md::CollisionObject::resetWithCircles(this + 39, v3);
}

uint64_t md::PolylineLabelPlacement::isLineReversed(md::PolylineLabelPlacement *this)
{
  return *((unsigned __int8 *)this + 213);
}

void md::TextLabelPart::prepareForDisplay(md::TextLabelPart *this, md::LabelManager *a2)
{
  uint64_t v3;
  int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const md::LabelText *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v31;

  if (!*((_QWORD *)this + 74))
  {
    v26 = (const md::LabelText *)*((_QWORD *)this + 72);
    v27 = operator new(0xB0uLL);
    v27[1] = 0;
    v27[2] = 0;
    *v27 = &off_1E42DDF50;
    *((_QWORD *)this + 74) = md::LabelText::LabelText((uint64_t)(v27 + 3), v26);
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
    *((_QWORD *)this + 75) = v27;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v3 = **((_QWORD **)this + 4);
  v4 = *((unsigned __int8 *)this + 864);
  v5 = v4 == 1;
  v6 = v3 + 408;
  v7 = (uint64_t *)(v3 + 408 + 16 * v5);
  v8 = *v7;
  if (!*v7)
  {
    if (v4 == 1)
      v9 = 6;
    else
      v9 = 0;
    md::LabelStyle::prepareDisplayTextStyleGroup(&v31, v3, v4 == 1, v9);
    v10 = v6 + 16 * v5;
    v11 = v31;
    v31 = 0uLL;
    v12 = *(std::__shared_weak_count **)(v10 + 8);
    *(_OWORD *)v10 = v11;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v8 = *v7;
  }
  v18 = *(_QWORD *)(v6 + 16 * v5 + 8);
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *((_QWORD *)this + 76) = v8;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = v18;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *((_DWORD *)this + 185) = *((_DWORD *)this + 157);
  if (*((_BYTE *)this + 565) && !*((_QWORD *)this + 105))
  {
    v24 = operator new();
    v25 = *((_QWORD *)this + 105);
    *((_QWORD *)this + 105) = v24;
    if (v25)
      MEMORY[0x1A1AF4E00](v25, 0x1000C40AE2C30F4);
  }
}

float md::PolylineLabelPlacement::copyTo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  int v14;
  int v15;
  float result;

  v3 = *a2;
  v4 = *(_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 38) = *(_QWORD *)(a1 + 38);
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + 8) = v4;
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(v3 + 56);
  *(_QWORD *)(v3 + 48) = v7;
  *(_QWORD *)(v3 + 56) = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 76) = *(_OWORD *)(a1 + 76);
  *(_OWORD *)(v3 + 64) = v13;
  *(_DWORD *)(v3 + 96) = *(_DWORD *)(a1 + 96);
  *(_QWORD *)(v3 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v3 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(a1 + 136);
  v14 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(v3 + 147) = *(_DWORD *)(a1 + 147);
  *(_DWORD *)(v3 + 144) = v14;
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(v3 + 160) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v3 + 168) = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(a1 + 184);
  v15 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(v3 + 195) = *(_DWORD *)(a1 + 195);
  *(_DWORD *)(v3 + 192) = v15;
  *(_DWORD *)(v3 + 200) = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(v3 + 204) = *(_DWORD *)(a1 + 204);
  result = *(float *)(a1 + 208);
  *(float *)(v3 + 208) = result;
  *(_DWORD *)(v3 + 212) = *(_DWORD *)(a1 + 212);
  return result;
}

float *md::IconLabelPart::prepareForDisplay(float *this, md::LabelManager *a2)
{
  float *v2;
  float v3;
  uint64_t v4;

  v2 = this;
  v3 = this[153];
  if (v3 != this[188] || this[80] < this[78] || this[81] < this[79])
  {
    this[188] = v3;
    this = (float *)(*(uint64_t (**)(float *, uint64_t, float *, float *))(*(_QWORD *)this + 912))(this, 1, this + 160, this + 78);
  }
  if (*((_BYTE *)v2 + 565))
  {
    v4 = operator new();
    this = (float *)*((_QWORD *)v2 + 91);
    *((_QWORD *)v2 + 91) = v4;
    if (this)
      this = (float *)MEMORY[0x1A1AF4E00](this, 0x1000C40AE2C30F4);
    *((_BYTE *)v2 + 665) = 0;
  }
  return this;
}

uint64_t md::PolylineLabelPlacement::clone@<X0>(md::PolylineLabelPlacement *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;

  v4 = (char *)operator new(0xF0uLL);
  *(_QWORD *)v4 = &off_1E42DCAF8;
  *((_QWORD *)v4 + 1) = 0;
  *((_WORD *)v4 + 16) = *((_WORD *)this + 4);
  v4[68] = *((_BYTE *)this + 44);
  *((_QWORD *)v4 + 3) = &off_1E429D948;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)v4 + 9) = *((_QWORD *)this + 6);
  v4[69] = *((_BYTE *)this + 45);
  *((_QWORD *)v4 + 2) = 0;
  *((_WORD *)v4 + 17) = 0;
  *(_QWORD *)(v4 + 36) = *(_QWORD *)((char *)this + 12);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)((char *)this + 20);
  *((_QWORD *)v4 + 7) = *((_QWORD *)this + 4);
  *((_DWORD *)v4 + 16) = *((_DWORD *)this + 10);
  *((_QWORD *)v4 + 10) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(v4 + 88) = *((_OWORD *)this + 4);
  *((_QWORD *)v4 + 13) = *((_QWORD *)this + 10);
  *((_DWORD *)v4 + 28) = *((_DWORD *)this + 22);
  *((_DWORD *)v4 + 30) = 0;
  *((_OWORD *)v4 + 8) = *(_OWORD *)((char *)this + 104);
  *((_QWORD *)v4 + 18) = *((_QWORD *)this + 15);
  *(_OWORD *)(v4 + 152) = *((_OWORD *)this + 8);
  *((_DWORD *)v4 + 42) = *((_DWORD *)this + 36);
  *(_DWORD *)(v4 + 171) = *(_DWORD *)((char *)this + 147);
  v8 = *(_OWORD *)((char *)this + 152);
  *((_QWORD *)v4 + 24) = *((_QWORD *)this + 21);
  *((_OWORD *)v4 + 11) = v8;
  v9 = *((_OWORD *)this + 11);
  *(_OWORD *)(v4 + 200) = v9;
  *((_DWORD *)v4 + 54) = *((_DWORD *)this + 48);
  *(_DWORD *)(v4 + 219) = *(_DWORD *)((char *)this + 195);
  *((_QWORD *)v4 + 28) = *((_QWORD *)this + 25);
  *((_DWORD *)v4 + 58) = *((_DWORD *)this + 52);
  LODWORD(v9) = *((_DWORD *)this + 53);
  *((_DWORD *)v4 + 59) = v9;
  result = md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)(v4 + 72), vmovl_u8(*(uint8x8_t *)&v9).u8[0], *(double *)&v9);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_19F139710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::PolylinePixelHiker::getCursorPosition(std::__shared_weak_count **this@<X0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15[8];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  int v21;

  ((void (*)(std::__shared_weak_count **))(*this)[3].__shared_weak_owners_)(this);
  v4 = this[69];
  v17 = this[68];
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v19 = *((_OWORD *)this + 35);
  v20 = this[72];
  v21 = *((_DWORD *)this + 146);
  HIDWORD(v20) = *((_DWORD *)this + 191);
  v7 = operator new();
  md::LabelLineResolvedPosition::LabelLineResolvedPosition((md::LabelLineResolvedPosition *)v15, (const md::LabelLinePosition *)&v17);
  md::PolylineLabelPlacement::PolylineLabelPlacement(v7, (uint64_t)v15, *((_BYTE *)this + 337), 1, *((unsigned __int8 *)this + 540), 0, 0.0, 0.0);
  *a2 = v7;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E42E6BF8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  a2[1] = (uint64_t)v8;
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19F139890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 80);
  _Unwind_Resume(a1);
}

uint64_t md::PolylineLabelPlacement::moveOntoPathForZoom(md::PolylineLabelPlacement *this, unsigned int a2, double a3)
{
  return md::LabelLineResolvedPosition::moveOntoPathForZoom((md::PolylineLabelPlacement *)((char *)this + 48), a2, a3);
}

void md::LineLabelPlacer::populateBlocks(uint64_t *a1, int __e, _QWORD *a3, uint64_t *a4, __n128 **a5)
{
  unsigned __int8 v8;
  double v10;
  std::__shared_weak_count *v11;
  double v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __n128 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __n128 *v30;
  __n128 *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  unsigned __int8 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double *v43;
  unint64_t v44;
  __n128 *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __n128 v66;
  int v67;
  _BOOL4 v68;
  int v69;
  double *v70;
  char v71;
  double *v72;
  _QWORD *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  float v93;
  unint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  int v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  int *v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int v128;
  __int128 v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  int *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unsigned __int8 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  int *v147;
  __n128 *v148;
  __n128 *v149;
  unint64_t v150;
  unint64_t v151;
  __n128 *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 *v157;
  uint64_t v158;
  __n128 *v159;
  __n128 *v160;
  uint64_t v161;
  __n128 *v162;
  __n128 *v163;
  __n128 *v164;
  int *v165;
  int *v166;
  __n128 *v167;
  int v168;
  int *v169;
  int *v170;
  int v171;
  unint64_t v172;
  __n128 *v173;
  __n128 *v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __n128 **v179;
  uint64_t *v180;
  uint64_t *v181;
  _QWORD *v182;
  _BOOL4 v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  __int128 v194;
  uint64_t v195;
  int v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  _DWORD v200[2];
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  _DWORD v204[2];
  uint64_t v205;
  int v206;
  int v207;
  char *v208;
  __n128 *v209;
  unint64_t v210;
  uint64_t v211;

  v8 = __e;
  v10 = 0.00999999978 / ldexp(1.0, __e);
  v11 = (std::__shared_weak_count *)a1[1];
  v181 = a1;
  if (*(_BYTE *)(*a1 + 290))
    v12 = v10 * 40075017.0;
  else
    v12 = v10;
  v192 = *a1;
  v193 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  md::LabelLine::attributes((uint64_t *)&v208, a3, &v192, v8);
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v18 = a3[13];
  v19 = a3[1];
  v20 = a3[2];
  if (v20 == v19)
    v21 = 0;
  else
    v21 = (_BYTE *)a3[1];
  v182 = a3;
  if (v21[8])
  {
    v22 = 0;
  }
  else
  {
    v22 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v21 + 16))(*(_QWORD *)v21) << 16) - 0x10000;
    v19 = v182[1];
    v20 = v182[2];
  }
  v23 = v20 - v19;
  v24 = ((unint64_t)v23 >> 4) - 1;
  v25 = (_BYTE *)(v19 + 16 * (__int16)v24);
  if ((__int16)v24 >= (unint64_t)(v23 >> 4))
    v25 = 0;
  v179 = a5;
  if (v25[8])
    v26 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v25 + 16))(*(_QWORD *)v25) << 16) - 0x10000;
  else
    v26 = 0;
  v27 = v22 >> 16;
  v28 = v26 >> 16;
  v30 = v209;
  v29 = v210;
  if ((unint64_t)v209 >= v210)
  {
    v32 = (uint64_t)v208;
    v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v209 - v208) >> 4) + 1;
    if (v33 > 0x555555555555555)
      abort();
    if (0x5555555555555556 * ((uint64_t)(v210 - (_QWORD)v208) >> 4) > v33)
      v33 = 0x5555555555555556 * ((uint64_t)(v210 - (_QWORD)v208) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210 - (_QWORD)v208) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v34 = 0x555555555555555;
    else
      v34 = v33;
    if (v34)
    {
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v211 + 16))(v211, 48 * v34, 8);
      v36 = v35 + 16 * (((uint64_t)v30 - v32) >> 4);
      v37 = v35 + 48 * v34;
      if (v35)
      {
        *(_WORD *)v36 = 257;
        *(_BYTE *)(v36 + 2) = 1;
        *(_QWORD *)(v36 + 8) = 0;
        *(_QWORD *)(v36 + 16) = v18;
        *(_QWORD *)(v36 + 24) = ((_DWORD)v27 << 16);
        *(_QWORD *)(v36 + 32) = v24 | ((unsigned __int16)v28 << 16);
        *(_BYTE *)(v36 + 40) = 0;
      }
    }
    else
    {
      v37 = 0;
      v36 = 16 * (((char *)v209 - v208) >> 4);
    }
    v31 = (__n128 *)(v36 + 48);
    if (v30 != (__n128 *)v32)
    {
      do
      {
        v15 = v30[-3];
        v38 = v30[-1];
        *(__n128 *)(v36 - 32) = v30[-2];
        *(__n128 *)(v36 - 16) = v38;
        *(__n128 *)(v36 - 48) = v15;
        v36 -= 48;
        v30 -= 3;
      }
      while (v30 != (__n128 *)v32);
      v30 = (__n128 *)v32;
    }
    v208 = (char *)v36;
    v210 = v37;
    if (v30)
      (*(void (**)(uint64_t, __n128 *, unint64_t))(*(_QWORD *)v211 + 40))(v211, v30, v29 - (_QWORD)v30);
  }
  else
  {
    if (v209)
    {
      v209->n128_u16[0] = 257;
      v30->n128_u8[2] = 1;
      v30->n128_u64[1] = 0;
      v30[1].n128_u64[0] = v18;
      v30[1].n128_u64[1] = ((_DWORD)v27 << 16);
      v30[2].n128_u64[0] = v24 | (WORD1(v26) << 16);
      v30[2].n128_u8[8] = 0;
    }
    v31 = v30 + 3;
  }
  v209 = v31;
  {
    v177 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v177, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v185 = mdm::Allocator::instance(void)::alloc;
  v40 = (uint64_t)v208;
  v180 = a4;
  if (v31 == (__n128 *)v208)
  {
    v44 = 0;
    v46 = 0;
    v43 = 0;
  }
  else
  {
    v41 = 0x5555555555555556 * (((char *)v31 - v208) >> 4);
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc);
    v43 = (double *)v42;
    v44 = v42 + 24 * v41;
    v45 = v209;
    if ((__n128 *)v40 == v209)
    {
      v46 = v42;
    }
    else
    {
      v46 = v42;
      do
      {
        v47 = *(_QWORD *)(v40 + 8);
        if (v46 >= v44)
        {
          v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v43) >> 3) + 1;
          if (v49 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v50 = v44 - (_QWORD)v43;
          if (0x5555555555555556 * (v50 >> 3) > v49)
            v49 = 0x5555555555555556 * (v50 >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (v50 >> 3) >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, 24 * v51, 8);
            v53 = v52 + 8 * ((uint64_t)(v46 - (_QWORD)v43) >> 3);
            v54 = v52 + 24 * v51;
            if (v52)
            {
              *(_QWORD *)v53 = v40;
              *(_QWORD *)(v53 + 8) = v47;
              *(_BYTE *)(v53 + 16) = 1;
            }
          }
          else
          {
            v54 = 0;
            v53 = 8 * ((uint64_t)(v46 - (_QWORD)v43) >> 3);
          }
          v55 = (double *)v53;
          if ((double *)v46 != v43)
          {
            v56 = v53;
            do
            {
              v55 = (double *)(v56 - 24);
              v15 = *(__n128 *)(v46 - 24);
              *(_QWORD *)(v56 - 8) = *(_QWORD *)(v46 - 8);
              *(__n128 *)(v56 - 24) = v15;
              v46 -= 24;
              v56 -= 24;
            }
            while ((double *)v46 != v43);
          }
          v48 = v53 + 24;
          if (v43)
            (*(void (**)(uint64_t, double *, uint64_t))(*(_QWORD *)v185 + 40))(v185, v43, v50);
          v43 = v55;
          v44 = v54;
        }
        else
        {
          if (v46)
          {
            *(_QWORD *)v46 = v40;
            *(_QWORD *)(v46 + 8) = v47;
            *(_BYTE *)(v46 + 16) = 1;
          }
          v48 = v46 + 24;
        }
        v57 = *(_QWORD *)(v40 + 16);
        if (v48 < v44)
        {
          *(_QWORD *)v48 = v40;
          *(_QWORD *)(v48 + 8) = v57;
          v46 = v48 + 24;
          *(_BYTE *)(v48 + 16) = 0;
        }
        else
        {
          v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v43) >> 3) + 1;
          if (v58 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v59 = v44 - (_QWORD)v43;
          if (0x5555555555555556 * (v59 >> 3) > v58)
            v58 = 0x5555555555555556 * (v59 >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (v59 >> 3) >= 0x555555555555555)
            v60 = 0xAAAAAAAAAAAAAAALL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v185 + 16))(v185, 24 * v60, 8);
            v62 = v61 + 8 * ((uint64_t)(v48 - (_QWORD)v43) >> 3);
            v63 = v61 + 24 * v60;
            if (v61)
            {
              *(_QWORD *)v62 = v40;
              *(_QWORD *)(v62 + 8) = v57;
              *(_BYTE *)(v62 + 16) = 0;
            }
          }
          else
          {
            v63 = 0;
            v62 = 8 * ((uint64_t)(v48 - (_QWORD)v43) >> 3);
          }
          v46 = v62 + 24;
          if ((double *)v48 == v43)
            goto LABEL_83;
          do
          {
            v15 = *(__n128 *)(v48 - 24);
            *(_QWORD *)(v62 - 8) = *(_QWORD *)(v48 - 8);
            *(__n128 *)(v62 - 24) = v15;
            v62 -= 24;
            v48 -= 24;
          }
          while ((double *)v48 != v43);
          if (v43)
LABEL_83:
            (*(void (**)(uint64_t, double *, uint64_t))(*(_QWORD *)v185 + 40))(v185, v43, v59);
          v43 = (double *)v62;
          v44 = v63;
        }
        v40 += 48;
      }
      while ((__n128 *)v40 != v45);
    }
  }
  v64 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v43) >> 3));
  if ((double *)v46 == v43)
    v65 = 0;
  else
    v65 = v64;
  v66 = std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,false>(v43, v46, v65, 1, v15);
  v184 = v44;
  if ((double *)v46 != v43)
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 1;
    v72 = v43;
    v73 = v182;
    while (1)
    {
      v74 = **(unsigned __int8 **)v72;
      v75 = *((unsigned __int8 *)v72 + 16);
      if (v74 == 1)
      {
        v68 = v75 != 0;
        v76 = (v75 | v67) == 0;
        if (!v70)
          goto LABEL_93;
      }
      else
      {
        if (!*((_BYTE *)v72 + 16))
        {
          --v67;
          goto LABEL_93;
        }
        if (v68)
          v71 |= v74 != 4;
        v76 = v68 & (v67++ == 0);
        if (!v70)
          goto LABEL_93;
      }
      if (v76)
      {
        v69 += v71 & 1;
        v66.n128_f64[0] = v72[1] - v70[1];
        if (v66.n128_f64[0] >= v12)
        {
          v77 = *(_QWORD *)v70;
          if (*((_BYTE *)v70 + 16))
          {
            v78 = (uint64_t *)(v77 + 24);
          }
          else
          {
            v79 = *(unsigned __int8 *)(v77 + 2);
            v80 = (uint64_t *)(v77 + 32);
            v78 = (uint64_t *)(v77 + 24);
            if (v79)
              v78 = v80;
          }
          v183 = v68;
          v81 = *v181;
          v82 = (std::__shared_weak_count *)v181[1];
          if (v82)
          {
            v83 = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
            v186 = v81;
            v187 = v82;
            do
              v85 = __ldxr(v83);
            while (__stxr(v85 + 1, v83));
          }
          else
          {
            v186 = *v181;
            v187 = 0;
          }
          v86 = *v78;
          v190 = v86;
          v191 = *(_DWORD *)(v81 + 252);
          v87 = v73[1];
          if ((v73[2] - v87) >> 4 <= (unint64_t)(__int16)v86)
            v88 = 0;
          else
            v88 = v87 + 16 * (__int16)v86;
          v188 = v73;
          v189 = v88;
          md::LabelLineResolvedPosition::LabelLineResolvedPosition((md::LabelLineResolvedPosition *)&v192, (const md::LabelLinePosition *)&v186);
          if (!v82)
            goto LABEL_122;
          v89 = (unint64_t *)&v82->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
LABEL_123:
            v91 = (unint64_t *)&v82->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          else
          {
LABEL_122:
            if (v82)
              goto LABEL_123;
          }
          if (*(_BYTE *)v73 == 3)
            v93 = 10.0;
          else
            v93 = 0.0;
          v94 = a4[1];
          v95 = a4[2];
          if (v94 < v95)
          {
            if (v94)
            {
              v66.n128_f64[0] = v70[1];
              v96 = (unsigned __int8 *)*((_QWORD *)v72 + 1);
              *(_DWORD *)v94 = 0;
              *(_QWORD *)(v94 + 8) = v192;
              v97 = v193;
              *(_QWORD *)(v94 + 16) = v193;
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
              }
              *(_OWORD *)(v94 + 24) = v194;
              *(_QWORD *)(v94 + 40) = v195;
              *(_DWORD *)(v94 + 48) = v196;
              *(_DWORD *)(v94 + 56) = 0;
              v100 = v198;
              *(_OWORD *)(v94 + 64) = v197;
              *(_QWORD *)(v94 + 80) = v100;
              *(_OWORD *)(v94 + 88) = v199;
              *(_DWORD *)(v94 + 107) = *(_DWORD *)((char *)v200 + 3);
              *(_DWORD *)(v94 + 104) = v200[0];
              v101 = v202;
              *(_OWORD *)(v94 + 112) = v201;
              *(_QWORD *)(v94 + 128) = v101;
              *(_OWORD *)(v94 + 136) = v203;
              LODWORD(v101) = v204[0];
              *(_DWORD *)(v94 + 155) = *(_DWORD *)((char *)v204 + 3);
              *(_DWORD *)(v94 + 152) = v101;
              v102 = v205;
              *(_DWORD *)(v94 + 168) = v206;
              *(_QWORD *)(v94 + 160) = v102;
              *(_DWORD *)(v94 + 172) = v207;
              *(_QWORD *)(v94 + 176) = v66.n128_u64[0];
              *(_QWORD *)(v94 + 184) = v96;
              *(_QWORD *)(v94 + 192) = 0;
              *(_QWORD *)(v94 + 200) = 0;
              *(float *)(v94 + 208) = v93;
              *(_WORD *)(v94 + 212) = 0;
            }
            v103 = v94 + 216;
            a4[1] = v94 + 216;
            goto LABEL_168;
          }
          v104 = 0x84BDA12F684BDA13 * ((uint64_t)(v94 - *a4) >> 3);
          v105 = v104 + 1;
          if (v104 + 1 > 0x12F684BDA12F684)
            abort();
          v106 = 0x84BDA12F684BDA13 * ((uint64_t)(v95 - *a4) >> 3);
          if (2 * v106 > v105)
            v105 = 2 * v106;
          if (v106 >= 0x97B425ED097B42)
            v107 = 0x12F684BDA12F684;
          else
            v107 = v105;
          if (v107)
          {
            v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4[3] + 16))(a4[3], 216 * v107, 8);
            v109 = v108 + 216 * v104;
            v110 = v108 + 216 * v107;
            if (v108)
            {
              v66.n128_f64[0] = v70[1];
              v111 = (unsigned __int8 *)*((_QWORD *)v72 + 1);
              *(_DWORD *)v109 = 0;
              v112 = v108 + 216 * v104;
              *(_QWORD *)(v112 + 8) = v192;
              v113 = v112 + 8;
              v114 = v193;
              *(_QWORD *)(v113 + 8) = v193;
              if (v114)
              {
                v115 = (unint64_t *)&v114->__shared_owners_;
                do
                  v116 = __ldxr(v115);
                while (__stxr(v116 + 1, v115));
              }
              *(_OWORD *)(v113 + 16) = v194;
              *(_QWORD *)(v113 + 32) = v195;
              *(_DWORD *)(v113 + 40) = v196;
              v117 = v108 + 216 * v104;
              *(_DWORD *)(v117 + 56) = 0;
              v118 = v197;
              *(_QWORD *)(v117 + 80) = v198;
              *(_OWORD *)(v117 + 64) = v118;
              *(_OWORD *)(v117 + 88) = v199;
              v119 = v200[0];
              *(_DWORD *)(v117 + 107) = *(_DWORD *)((char *)v200 + 3);
              *(_DWORD *)(v117 + 104) = v119;
              v120 = v201;
              *(_QWORD *)(v117 + 128) = v202;
              *(_OWORD *)(v117 + 112) = v120;
              *(_OWORD *)(v117 + 136) = v203;
              v121 = v204[0];
              *(_DWORD *)(v117 + 155) = *(_DWORD *)((char *)v204 + 3);
              *(_DWORD *)(v117 + 152) = v121;
              v122 = v205;
              *(_DWORD *)(v117 + 168) = v206;
              *(_QWORD *)(v117 + 160) = v122;
              *(_DWORD *)(v117 + 172) = v207;
              *(_QWORD *)(v117 + 176) = v66.n128_u64[0];
              *(_QWORD *)(v117 + 184) = v111;
              *(_QWORD *)(v117 + 192) = 0;
              *(_QWORD *)(v117 + 200) = 0;
              *(float *)(v117 + 208) = v93;
              *(_WORD *)(v117 + 212) = 0;
            }
          }
          else
          {
            v109 = 216 * v104;
            v110 = 0;
          }
          v103 = v109 + 216;
          v123 = (int *)*a4;
          v124 = (int *)a4[1];
          if (v124 == (int *)*a4)
          {
            *a4 = v109;
            a4[1] = v103;
            v138 = a4[2];
            a4[2] = v110;
            if (v124)
              goto LABEL_167;
          }
          else
          {
            v125 = a4[1];
            v126 = v109;
            do
            {
              v133 = *(_DWORD *)(v125 - 216);
              v125 -= 216;
              *(_DWORD *)(v126 - 216) = v133;
              v126 -= 216;
              *(_QWORD *)(v126 + 8) = *(_QWORD *)(v125 + 8);
              v134 = *(_QWORD *)(v125 + 16);
              *(_QWORD *)(v126 + 16) = v134;
              if (v134)
              {
                v135 = (unint64_t *)(v134 + 8);
                do
                  v136 = __ldxr(v135);
                while (__stxr(v136 + 1, v135));
              }
              *(_OWORD *)(v109 - 192) = *((_OWORD *)v124 - 12);
              *(_QWORD *)(v109 - 176) = *((_QWORD *)v124 - 22);
              *(_DWORD *)(v109 - 168) = *(v124 - 42);
              *(_DWORD *)(v109 - 160) = 0;
              v127 = *(_OWORD *)(v124 - 38);
              *(_QWORD *)(v109 - 136) = *((_QWORD *)v124 - 17);
              *(_OWORD *)(v109 - 152) = v127;
              *(_OWORD *)(v109 - 128) = *((_OWORD *)v124 - 8);
              v128 = *(v124 - 28);
              *(_DWORD *)(v109 - 109) = *(int *)((char *)v124 - 109);
              *(_DWORD *)(v109 - 112) = v128;
              v129 = *(_OWORD *)(v124 - 26);
              *(_QWORD *)(v109 - 88) = *((_QWORD *)v124 - 11);
              *(_OWORD *)(v109 - 104) = v129;
              *(_OWORD *)(v109 - 80) = *((_OWORD *)v124 - 5);
              v130 = *(v124 - 16);
              *(_DWORD *)(v109 - 61) = *(int *)((char *)v124 - 61);
              *(_DWORD *)(v109 - 64) = v130;
              v131 = *((_QWORD *)v124 - 7);
              *(_DWORD *)(v109 - 48) = *(v124 - 12);
              *(_QWORD *)(v109 - 56) = v131;
              *(_DWORD *)(v109 - 44) = *(v124 - 11);
              v66 = *(__n128 *)(v124 - 10);
              v132 = *(_OWORD *)(v124 - 6);
              *(_QWORD *)(v109 - 10) = *(_QWORD *)((char *)v124 - 10);
              *(_OWORD *)(v109 - 24) = v132;
              *(__n128 *)(v109 - 40) = v66;
              v124 = (int *)v125;
              v109 = v126;
            }
            while ((int *)v125 != v123);
            v137 = (int *)*a4;
            v124 = (int *)a4[1];
            *a4 = v126;
            a4[1] = v103;
            v138 = a4[2];
            a4[2] = v110;
            if (v124 == v137)
            {
              if (v124)
                goto LABEL_167;
            }
            else
            {
              v178 = v138;
              do
              {
                v139 = (std::__shared_weak_count *)*((_QWORD *)v124 - 25);
                if (v139)
                {
                  v140 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                  }
                }
                v124 -= 54;
              }
              while (v124 != v137);
              v124 = v137;
              a4 = v180;
              v138 = v178;
              if (!v137)
                goto LABEL_168;
LABEL_167:
              (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a4[3] + 40))(a4[3], v124, v138 - (_QWORD)v124);
            }
          }
LABEL_168:
          a4[1] = v103;
          v142 = *(_BYTE *)(*(_QWORD *)v72 + 40);
          *(_BYTE *)(v103 - 4) = *(_BYTE *)(*(_QWORD *)v70 + 40);
          *(_BYTE *)(v103 - 3) = v142;
          *(_DWORD *)(v103 - 216) = v69 - 1;
          v143 = v193;
          v73 = v182;
          if (v193)
          {
            v144 = (unint64_t *)&v193->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
          v71 = 0;
          v44 = v184;
          v68 = v183;
          goto LABEL_93;
        }
        v71 = 0;
      }
LABEL_93:
      v70 = v72;
      v72 += 3;
      if (v72 == (double *)v46)
        goto LABEL_179;
    }
  }
  v69 = 0;
LABEL_179:
  v146 = *a4;
  v147 = (int *)a4[1];
  if ((int *)*a4 != v147)
  {
    v149 = *v179;
    v148 = v179[1];
    v150 = v148 - *v179;
    v151 = v69 - v150;
    if (v69 <= v150)
    {
      if (v69 < v150)
        v179[1] = &v149[v69];
    }
    else
    {
      v152 = v179[2];
      if (v151 <= v152 - v148)
      {
        v160 = &v148[v151];
        v161 = 16 * v69 - 16 * v150;
        do
        {
          if (v148)
          {
            v148->n128_u64[0] = 0;
            v148->n128_u64[1] = 0;
          }
          ++v148;
          v161 -= 16;
        }
        while (v161);
        v179[1] = v160;
      }
      else
      {
        if (v69 < 0)
          abort();
        v153 = (char *)v152 - (char *)v149;
        v154 = v153 >> 3;
        if (v153 >> 3 <= (unint64_t)v69)
          v154 = v69;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF0)
          v155 = 0xFFFFFFFFFFFFFFFLL;
        else
          v155 = v154;
        v156 = (*(uint64_t (**)(__n128 *, uint64_t, uint64_t, __n128))(v179[3]->n128_u64[0] + 16))(v179[3], 16 * v155, 8, v66);
        v157 = (__n128 *)(v156 + 16 * v150);
        v158 = 16 * v69 - 16 * v150;
        v159 = v157;
        do
        {
          if (v159)
          {
            v159->n128_u64[0] = 0;
            v159->n128_u64[1] = 0;
          }
          ++v159;
          v158 -= 16;
        }
        while (v158);
        v163 = *v179;
        v162 = v179[1];
        if (v162 != *v179)
        {
          do
          {
            v66 = v162[-1];
            v157[-1] = v66;
            --v157;
            --v162;
          }
          while (v162 != v163);
          v162 = *v179;
        }
        *v179 = v157;
        v179[1] = (__n128 *)(v156 + 16 * v69);
        v164 = v179[2];
        v179[2] = (__n128 *)(v156 + 16 * v155);
        if (v162)
          (*(void (**)(__n128 *, __n128 *, int64_t))(v179[3]->n128_u64[0] + 40))(v179[3], v162, (char *)v164 - (char *)v162);
      }
      v146 = *a4;
      v147 = (int *)a4[1];
    }
    if ((int *)v146 != v147)
    {
      v165 = 0;
      v166 = 0;
      v167 = *v179;
      v168 = -1;
      v169 = (int *)v146;
      do
      {
        v170 = v169;
        v171 = *v169;
        if (v171 != v168)
        {
          if (v166)
          {
            v172 = *((_QWORD *)v166 + 22);
            v173 = &v167[v168];
            v173->n128_u64[0] = v172;
            v173->n128_u64[1] = *((_QWORD *)v165 + 23);
          }
          v166 = v170;
          v168 = v171;
        }
        v169 = v170 + 54;
        v165 = v170;
      }
      while (v170 + 54 != v147);
      if (v166)
      {
        v174 = &(*v179)[v168];
        v174->n128_u64[0] = *((_QWORD *)v166 + 22);
        v174->n128_u64[1] = *((_QWORD *)v170 + 23);
      }
      v175 = *(double *)(v146 + 176);
      v176 = v146;
      do
      {
        if (*(_BYTE *)(v176 + 212))
          v175 = *(double *)(v176 + 176);
        *(double *)(v176 + 192) = *(double *)(v176 + 176) - v175;
        if (*(_BYTE *)(v176 + 213))
          v175 = *(double *)(v176 + 184);
        v176 += 216;
      }
      while ((int *)v176 != v147);
      v66.n128_u64[0] = *((_QWORD *)v147 - 4);
      do
      {
        if (*((_BYTE *)v147 - 3))
          v66.n128_u64[0] = *((_QWORD *)v147 - 4);
        *((double *)v147 - 2) = v66.n128_f64[0] - *((double *)v147 - 4);
        if (*((_BYTE *)v147 - 4))
          v66.n128_u64[0] = *((_QWORD *)v147 - 5);
        v147 -= 54;
      }
      while (v147 != (int *)v146);
    }
  }
  if (v43)
    (*(void (**)(uint64_t, double *, unint64_t, __n128))(*(_QWORD *)v185 + 40))(v185, v43, v44 - (_QWORD)v43, v66);
  if (v208)
    (*(void (**)(uint64_t, char *, unint64_t, __n128))(*(_QWORD *)v211 + 40))(v211, v208, v210 - (_QWORD)v208, v66);
}

void sub_19F13A908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  if (v33)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a24 + 40))(a24, v33, a23 - v33);
    v36 = *(_QWORD *)(v34 - 152);
    if (!v36)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v36 = *(_QWORD *)(v34 - 152);
    if (!v36)
      goto LABEL_3;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v34 - 128) + 40))(*(_QWORD *)(v34 - 128), v36, *(_QWORD *)(v34 - 136) - v36);
  _Unwind_Resume(exception_object);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,false>(double *a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t *v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  char v21;
  double v22;
  int v23;
  unint64_t v24;
  int v25;
  double *k;
  double v27;
  unint64_t m;
  double v29;
  double v31;
  BOOL v33;
  unint64_t v34;
  __int128 v35;
  double v36;
  double v37;
  __int128 v38;
  BOOL v39;
  __n128 v40;
  unint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double *v46;
  double *v47;
  double *v48;
  double v49;
  _BYTE *j;
  __int128 v51;
  double v52;
  double v53;
  double v54;
  double v55;
  __int128 v56;
  double v57;
  double *v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  double v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  double v71;
  uint64_t v72;
  unint64_t *v73;
  double v74;
  int64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  unint64_t v82;
  double v83;
  double v84;
  int v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  int64_t v93;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  double v102;
  double v103;
  int v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  double v110;
  int v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  int v118;
  double *v119;
  double v120;
  unint64_t v121;
  double *v122;
  double v123;
  double v124;
  __int128 v125;
  __int128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

uint64_t md::LabelLinePosition::travelDirection(md::LabelLinePosition *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 120) == 7)
  {
    if (*((_DWORD *)this + 10) == *(_DWORD *)(v1 + 252))
    {
      v7 = (uint64_t *)*((_QWORD *)this + 3);
      if (v7)
      {
        if ((*((__int16 *)this + 17) & 0x80000000) == 0)
        {
          v8 = *v7;
          if (v8)
          {
            if (*(_BYTE *)(v8 + 32) == 1)
            {
              v9 = *(uint64_t **)(v8 + 24);
              if (v9)
              {
                v10 = *v9;
                if (v10)
                  return *(unsigned __int8 *)(v10 + 304);
              }
            }
          }
        }
      }
    }
    return 4;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 120))
    return 4;
  if (*((_DWORD *)this + 10) != *(_DWORD *)(v1 + 252))
    return 4;
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v2)
    return 4;
  if (*((__int16 *)this + 17) < 0)
    return 4;
  v3 = *v2;
  if (!v3 || *(_BYTE *)(v3 + 32))
    return 4;
  v4 = *(_QWORD *)(v3 + 16);
  result = 4;
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 153);
    if (v6 >= 3)
      return 4;
    else
      return v6;
  }
  return result;
}

uint64_t md::LabelLineResolvedPosition::positionAtDistance(md::LabelLineResolvedPosition *this, md::LabelLineResolvedPosition *a2, double a3)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  char v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _OWORD v30[2];
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _DWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _DWORD v39[2];
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  uint64_t v46;
  int v47;

  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this
    && (v7 = *((_DWORD *)this + 10), v7 == *(_DWORD *)(v6 + 252))
    && *((_QWORD *)this + 3)
    && (*((__int16 *)this + 17) & 0x80000000) == 0
    || (md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), a3),
        (v6 = *(_QWORD *)this) != 0)
    && (v7 = *((_DWORD *)this + 10), v7 == *(_DWORD *)(v6 + 252))
    && *((_QWORD *)this + 3)
    && (*((__int16 *)this + 17) & 0x80000000) == 0)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    v43 = v6;
    v44 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v7 = *((_DWORD *)this + 10);
    }
    v45 = *((_OWORD *)this + 1);
    v46 = *((_QWORD *)this + 4);
    v47 = v7;
    v11 = md::LabelLinePosition::offsetDistance((md::LabelLinePosition *)&v43, 0, a3);
    v12 = v11;
    if (v11)
    {
      md::LabelLineResolvedPosition::LabelLineResolvedPosition((md::LabelLineResolvedPosition *)&v28, (const md::LabelLinePosition *)&v43);
      v14 = v28;
      v13 = v29;
      if (v29)
      {
        v15 = (unint64_t *)&v29->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
      *(_QWORD *)a2 = v14;
      *((_QWORD *)a2 + 1) = v13;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *((_OWORD *)a2 + 1) = v30[0];
      *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v30 + 12);
      *((_DWORD *)a2 + 12) = v31;
      *(_OWORD *)((char *)a2 + 56) = v32;
      *(_OWORD *)((char *)a2 + 72) = v33;
      *((_QWORD *)a2 + 11) = v34;
      *((_DWORD *)a2 + 24) = v35[0];
      *(_DWORD *)((char *)a2 + 99) = *(_DWORD *)((char *)v35 + 3);
      *(_OWORD *)((char *)a2 + 104) = v36;
      *(_OWORD *)((char *)a2 + 120) = v37;
      *((_QWORD *)a2 + 17) = v38;
      *((_DWORD *)a2 + 36) = v39[0];
      *(_DWORD *)((char *)a2 + 147) = *(_DWORD *)((char *)v39 + 3);
      v20 = v41;
      *((_QWORD *)a2 + 19) = v40;
      *((_DWORD *)a2 + 40) = v20;
      *((_DWORD *)a2 + 41) = v42;
      v21 = v29;
      if (v29)
      {
        v22 = (unint64_t *)&v29->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    v24 = v44;
    if (!v44)
      goto LABEL_31;
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((v12 & 1) != 0)
        return 1;
    }
    else
    {
LABEL_31:
      if ((v12 & 1) != 0)
        return 1;
    }
  }
  return 0;
}

void sub_19F13BAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

__n128 md::LineLabelPlacer::addPositionIfValid(uint64_t a1, uint64_t a2, uint64_t **this, int a4, int a5, uint64_t a6, int a7, double a8, double a9, float a10)
{
  md::LabelLineResolvedPosition *v10;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  md::LabelPoint *v22;
  uint64_t v23;
  double v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  double v30;
  unsigned __int8 *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  const md::LabelPoint *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  const md::LabelPoint *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t *v59;
  uint64_t *v60;
  unsigned int v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  BOOL v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD **v102;
  int v103;

  v10 = (md::LabelLineResolvedPosition *)this;
  if (a5)
  {
    v19 = *this;
    if (!*((_BYTE *)*this + 120))
    {
      switch(a5)
      {
        case 1:
          if (*((_DWORD *)this + 10) == *((_DWORD *)v19 + 63))
          {
            v48 = this[3];
            if (v48)
            {
              if ((*((__int16 *)this + 17) & 0x80000000) == 0)
                goto LABEL_60;
            }
          }
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (*(_QWORD *)v10 && *((_DWORD *)v10 + 10) == *(_DWORD *)(*(_QWORD *)v10 + 252))
          {
            v48 = (uint64_t *)*((_QWORD *)v10 + 3);
LABEL_60:
            if (v48)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                v49 = *v48;
                if (v49)
                {
                  if (*(unsigned __int8 *)(v49 + 38) != 255)
                  {
                    v20 = *(uint64_t **)(a2 + 32);
                    v21 = (uint64_t *)(a2 + 40);
                    v103 = a7;
                    v102 = (_QWORD **)(a2 + 32);
                    if (v20 == (uint64_t *)(a2 + 40))
                      goto LABEL_90;
                    v101 = a6;
                    v22 = (md::LabelLineResolvedPosition *)((char *)v10 + 104);
                    goto LABEL_5;
                  }
                }
              }
            }
          }
          goto LABEL_105;
        case 2:
          v76 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v76 && (*((__int16 *)this + 17) & 0x80000000) == 0)
            goto LABEL_209;
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (*(_BYTE *)(*(_QWORD *)v10 + 120))
            break;
          if (*((_DWORD *)v10 + 10) == *(_DWORD *)(*(_QWORD *)v10 + 252))
          {
LABEL_209:
            v77 = (uint64_t *)*((_QWORD *)v10 + 3);
            if (v77)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                v78 = *v77;
                if (v78)
                {
                  if (!*(_BYTE *)(v78 + 32))
                  {
                    v79 = *(_QWORD *)(v78 + 16);
                    if (v79)
                    {
                      if (geo::codec::featureGetNativeShieldCount(v79))
                        break;
                    }
                  }
                }
              }
            }
          }
          goto LABEL_180;
        case 3:
          v80 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v80 && (*((__int16 *)this + 17) & 0x80000000) == 0)
            goto LABEL_126;
          md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (*(_BYTE *)(*(_QWORD *)v10 + 120))
            break;
          if (*((_DWORD *)v10 + 10) != *(_DWORD *)(*(_QWORD *)v10 + 252))
            goto LABEL_105;
LABEL_126:
          v81 = (uint64_t *)*((_QWORD *)v10 + 3);
          if (!v81)
            goto LABEL_105;
          if (*((__int16 *)v10 + 17) < 0)
            goto LABEL_105;
          v82 = *v81;
          if (!v82)
            goto LABEL_105;
          if (*(_BYTE *)(v82 + 32))
            goto LABEL_105;
          v83 = *(_QWORD *)(v82 + 16);
          if (!v83 || !geo::codec::featureGetNativeShieldCount(v83))
            goto LABEL_105;
          break;
        case 4:
          v84 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (v84 || *((__int16 *)this + 17) < 0)
            md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (md::LabelLinePosition::travelDirection(v10) - 1 < 2)
            break;
          goto LABEL_105;
        case 5:
          v85 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (v85 || *((__int16 *)this + 17) < 0)
            md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (md::LabelLinePosition::travelDirection(v10) < 2)
            break;
          goto LABEL_105;
        case 6:
          v86 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v86 && (*((__int16 *)this + 17) & 0x80000000) == 0
            || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8), !*(_BYTE *)(*(_QWORD *)v10 + 120))&& *((_DWORD *)v10 + 10) == *(_DWORD *)(*(_QWORD *)v10 + 252))
          {
            v87 = (uint64_t *)*((_QWORD *)v10 + 3);
            if (v87)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                v88 = *v87;
                if (v88)
                {
                  if (!*(_BYTE *)(v88 + 32))
                  {
                    v89 = *(_QWORD *)(v88 + 16);
                    if (v89)
                    {
                      if (*(_BYTE *)(v89 + 150))
                        break;
                    }
                  }
                }
              }
            }
          }
          goto LABEL_105;
        case 7:
          v90 = *((_DWORD *)this + 10);
          v91 = v90 != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (!v91 && (v92 = *((_DWORD *)this + 10), (*((__int16 *)this + 17) & 0x80000000) == 0)
            || ((md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8), v90 = *((_DWORD *)v10 + 10), v92 = *(_DWORD *)(*(_QWORD *)v10 + 252), !*(_BYTE *)(*(_QWORD *)v10 + 120))? (v97 = v90 == v92): (v97 = 0), v97))
          {
            v93 = (uint64_t *)*((_QWORD *)v10 + 3);
            if (v93)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                v94 = *v93;
                if (v94)
                {
                  if (!*(_BYTE *)(v94 + 32))
                  {
                    v95 = *(_QWORD *)(v94 + 16);
                    if (v95)
                    {
                      if (*(_BYTE *)(v95 + 150))
                        break;
                    }
                  }
                }
              }
            }
          }
          v98 = v90 != v92 || *((_QWORD *)v10 + 3) == 0;
          if (!v98 && (*((__int16 *)v10 + 17) & 0x80000000) == 0
            || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v10, *((unsigned __int8 *)v10 + 164), a8),
                *(_QWORD *)v10)
            && *((_DWORD *)v10 + 10) == *(_DWORD *)(*(_QWORD *)v10 + 252))
          {
            v99 = (uint64_t *)*((_QWORD *)v10 + 3);
            if (v99)
            {
              if ((*((__int16 *)v10 + 17) & 0x80000000) == 0)
              {
                v100 = *v99;
                if (v100)
                {
                  if (*(unsigned __int8 *)(v100 + 38) != 255)
                    break;
                }
              }
            }
          }
          goto LABEL_105;
        case 8:
          v96 = *((_DWORD *)this + 10) != *((_DWORD *)v19 + 63) || this[3] == 0;
          if (v96 || *((__int16 *)this + 17) < 0)
            md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)this, *((unsigned __int8 *)this + 164), a8);
          if (md::LabelLinePosition::travelDirection(v10) < 2)
            break;
LABEL_180:
          if (!md::LabelLineResolvedPosition::hasText(v10, a8))
            goto LABEL_105;
          break;
        default:
          goto LABEL_105;
      }
    }
    v20 = *(uint64_t **)(a2 + 32);
    v21 = (uint64_t *)(a2 + 40);
    v103 = a7;
    v102 = (_QWORD **)(a2 + 32);
    if (v20 == (uint64_t *)(a2 + 40))
      goto LABEL_90;
    v22 = (md::LabelLineResolvedPosition *)((char *)v10 + 104);
    v101 = a6;
    if (a5 == 1)
    {
LABEL_5:
      v23 = 0;
      v24 = 1.79769313e308;
      while (1)
      {
        v25 = (_BYTE *)v20[5];
        if (v25[9] != 1)
          goto LABEL_45;
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 80))(v20[5]);
        v27 = v25[45];
        if (v25[45])
          v28 = 1;
        else
          v28 = 2;
        if (v27 == 2)
          v28 = 0;
        if (v26)
          v27 = v28;
        if (v27 != a4)
          goto LABEL_45;
        v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20[5] + 200))(v20[5]);
        v31 = v29;
        if ((*(_QWORD *)v29
           && *((_DWORD *)v29 + 10) == *(_DWORD *)(*(_QWORD *)v29 + 252)
           && (v32 = (uint64_t *)*((_QWORD *)v29 + 3)) != 0
           && (*((__int16 *)v29 + 17) & 0x80000000) == 0
           || (md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v29, v29[164], v30),
               *(_QWORD *)v31)
           && *((_DWORD *)v31 + 10) == *(_DWORD *)(*(_QWORD *)v31 + 252)
           && (v32 = (uint64_t *)*((_QWORD *)v31 + 3)) != 0)
          && (*((__int16 *)v31 + 17) & 0x80000000) == 0
          && (v33 = *v32) != 0)
        {
          v34 = *(unsigned __int8 *)(v33 + 38);
          v35 = *(_QWORD *)v10;
          if (!*(_QWORD *)v10)
            goto LABEL_35;
        }
        else
        {
          v34 = 255;
          v35 = *(_QWORD *)v10;
          if (!*(_QWORD *)v10)
            goto LABEL_35;
        }
        v36 = *(_DWORD *)(v35 + 252);
        v37 = (uint64_t *)*((_QWORD *)v10 + 3);
        v38 = *((_DWORD *)v10 + 10) != v36 || v37 == 0;
        if (!v38)
        {
          v39 = *((__int16 *)v10 + 17);
          if ((v39 & 0x80000000) == 0)
          {
            if (v37)
              goto LABEL_38;
            goto LABEL_42;
          }
        }
LABEL_35:
        md::LabelLineResolvedPosition::moveOntoPathForZoom(v10, *((unsigned __int8 *)v10 + 164), v30);
        if (!*(_QWORD *)v10)
          goto LABEL_42;
        if (*((_DWORD *)v10 + 10) == *(_DWORD *)(*(_QWORD *)v10 + 252))
        {
          v37 = (uint64_t *)*((_QWORD *)v10 + 3);
          LOWORD(v39) = *((_WORD *)v10 + 17);
          if (v37)
          {
LABEL_38:
            if ((v39 & 0x8000) == 0)
            {
              v40 = *v37;
              if (v40)
              {
                if (v34 == *(unsigned __int8 *)(v40 + 38))
                  goto LABEL_43;
                goto LABEL_49;
              }
            }
          }
LABEL_42:
          if (v34 == 255)
            goto LABEL_43;
          goto LABEL_49;
        }
        if (v34 == 255)
        {
LABEL_43:
          v41 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20[5] + 56))(v20[5]);
          md::LabelPoint::vectorToPoint(v22, v41, *(unsigned __int8 *)(*(_QWORD *)a2 + 290));
          v45 = v42 * v42 + v43 * v43 + v44 * v44;
          if (v45 < v24)
          {
            v23 = v20[5];
            v24 = v45;
          }
LABEL_45:
          v46 = (uint64_t *)v20[1];
          if (v46)
            goto LABEL_46;
          goto LABEL_50;
        }
LABEL_49:
        v46 = (uint64_t *)v20[1];
        if (v46)
        {
          do
          {
LABEL_46:
            v47 = v46;
            v46 = (uint64_t *)*v46;
          }
          while (v46);
          goto LABEL_6;
        }
        do
        {
LABEL_50:
          v47 = (uint64_t *)v20[2];
          v38 = *v47 == (_QWORD)v20;
          v20 = v47;
        }
        while (!v38);
LABEL_6:
        v20 = v47;
        if (v47 == v21)
          goto LABEL_85;
      }
    }
    v23 = 0;
    v24 = 1.79769313e308;
    do
    {
      v50 = (unsigned __int8 *)v20[5];
      if (v50[9] == a5)
      {
        v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 80))(v20[5]);
        v52 = v50[45];
        if (v50[45])
          v53 = 1;
        else
          v53 = 2;
        if (v52 == 2)
          v53 = 0;
        if (v51)
          v52 = v53;
        if (v52 == a4)
        {
          v54 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20[5] + 56))(v20[5]);
          md::LabelPoint::vectorToPoint((md::LabelLineResolvedPosition *)((char *)v10 + 104), v54, *(unsigned __int8 *)(*(_QWORD *)a2 + 290));
          v58 = v55 * v55 + v56 * v56 + v57 * v57;
          if (v58 < v24)
          {
            v23 = v20[5];
            v24 = v58;
          }
        }
      }
      v59 = (uint64_t *)v20[1];
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (uint64_t *)v20[2];
          v38 = *v60 == (_QWORD)v20;
          v20 = v60;
        }
        while (!v38);
      }
      v20 = v60;
    }
    while (v60 != v21);
LABEL_85:
    a6 = v101;
    if (!v23 || sqrt(v24) >= a8)
    {
LABEL_90:
      v61 = *(_DWORD *)(a2 + 64);
      *(_DWORD *)(a2 + 64) = v61 + 1;
      v62 = (std::__shared_weak_count *)operator new(0xF0uLL);
      v62->__shared_owners_ = 0;
      v62->__shared_weak_owners_ = 0;
      v62->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCAF8;
      md::PolylineLabelPlacement::PolylineLabelPlacement((uint64_t)&v62[1], (uint64_t)v10, a5, a4, a6, v103, a9, a10);
      v63 = *v21;
      v64 = v21;
      if (*v21)
      {
        while (1)
        {
          while (1)
          {
            v64 = (uint64_t *)v63;
            v65 = *(_DWORD *)(v63 + 32);
            if (v61 >= v65)
              break;
            v63 = *v64;
            v21 = v64;
            if (!*v64)
              goto LABEL_97;
          }
          if (v65 >= v61)
            break;
          v63 = v64[1];
          if (!v63)
          {
            v21 = v64 + 1;
            goto LABEL_97;
          }
        }
        v66 = (uint64_t)v64;
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v70 = __ldaxr(p_shared_owners);
        while (__stlxr(v70 - 1, p_shared_owners));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      else
      {
LABEL_97:
        v66 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48), 56, 8);
        *(_DWORD *)(v66 + 32) = v61;
        *(_QWORD *)(v66 + 40) = v62 + 1;
        *(_QWORD *)(v66 + 48) = v62;
        *(_QWORD *)v66 = 0;
        *(_QWORD *)(v66 + 8) = 0;
        *(_QWORD *)(v66 + 16) = v64;
        *v21 = v66;
        v67 = (_QWORD *)**v102;
        v68 = (uint64_t *)v66;
        if (v67)
        {
          *v102 = v67;
          v68 = (uint64_t *)*v21;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 40), v68);
        ++*(_QWORD *)(a2 + 56);
      }
      *(_BYTE *)(*(_QWORD *)(v66 + 40) + 11) = 1;
    }
    else
    {
      *(_DWORD *)(v23 + 12) |= 1 << v101;
      if (*(_DWORD *)(v23 + 24) < (int)v101)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v23 + 176))(v23, v101, 1.0);
        *(_DWORD *)(v23 + 24) = v101;
      }
      *(_BYTE *)(v23 + 11) = 1;
      v10 = (md::LabelLineResolvedPosition *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 200))(v23);
    }
  }
LABEL_105:
  v71 = *((_QWORD *)v10 + 1);
  *(_QWORD *)a1 = *(_QWORD *)v10;
  *(_QWORD *)(a1 + 8) = v71;
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)v10 + 1);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)v10 + 4);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)v10 + 10);
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)v10 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)v10 + 9);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)v10 + 5);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)v10 + 24);
  *(_DWORD *)(a1 + 99) = *(_DWORD *)((char *)v10 + 99);
  v74 = *(_OWORD *)((char *)v10 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)v10 + 15);
  *(_OWORD *)(a1 + 104) = v74;
  result = *((__n128 *)v10 + 8);
  *(__n128 *)(a1 + 128) = result;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)v10 + 36);
  *(_DWORD *)(a1 + 147) = *(_DWORD *)((char *)v10 + 147);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)v10 + 19);
  *(_DWORD *)(a1 + 160) = *((_DWORD *)v10 + 40);
  *(_DWORD *)(a1 + 164) = *((_DWORD *)v10 + 41);
  return result;
}

void sub_19F13C4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F13C504(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), a1 + 40);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

void ___ZN3geo9TaskQueue5applyEmNSt3__18functionIFvmEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *(NSObject **)(a1 + 32);
  if (v4)
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  v9 = a2;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v9);
    v6 = *(NSObject **)(a1 + 32);
    if (v6)
      dispatch_semaphore_signal(v6);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::operator()(v7, v8);
  }
}

void std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void (**v3)(id, _QWORD);

  v2 = *a2;
  v3 = (void (**)(id, _QWORD))MEMORY[0x1A1AF5730](*(_QWORD *)(a1 + 16));
  v3[2](v3, v2);

}

void sub_19F13C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN2md18LabelFeatureStyler18styleLabelFeaturesERNSt3__16vectorINS_22LabelFeatureStylerItemEN3geo12StdAllocatorIS3_N3mdm9AllocatorEEEEEbbPNS4_9TaskQueueE_block_invoke(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = 20 * a2;
  v3 = 20 * a2 + 20;
  if (*(_QWORD *)(result + 32) < v3)
    v3 = *(_QWORD *)(result + 32);
  v4 = v3 - v2;
  if (v3 > v2)
  {
    v5 = result;
    v6 = 480 * a2;
    do
    {
      v7 = (_QWORD *)(**(_QWORD **)(v5 + 40) + v6);
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v7 + 576))(*v7, **(_QWORD **)(v5 + 48) + 16 * v7[1], **(_QWORD **)(v5 + 56) + 16 * v7[1], v7[2], *(unsigned __int8 *)(v5 + 68), *(unsigned int *)(v5 + 64), 0);
      v6 += 24;
      --v4;
    }
    while (v4);
  }
  return result;
}

md::PointLabelFeatureBase *md::PointLabelFeature::PointLabelFeature(md::PointLabelFeatureBase *this, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  md::PointLabelFeatureBase *v6;
  const md::LabelPoint *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int128 v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD **v27;
  uint64_t v28;
  const float *v29;
  float32x4_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  char *v34;
  _OWORD *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  int *v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  __int128 *v59;
  unsigned __int8 v60;
  __int128 v61;
  float v62;
  __n128 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  char *v70;
  char *v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 v90;
  __n128 *v91;
  __n128 *v92;
  unint64_t v93;
  __n128 *v94;
  __n128 *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned __int8 *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 v111;
  __n128 *v112;
  __n128 *v113;
  unint64_t v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  int v120;
  int v121;
  _BYTE *v122;
  int64_t v123;
  int64_t v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t i;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unsigned __int8 v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  unsigned __int8 v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char **v175;
  _QWORD **v176;
  unint64_t *v177;
  uint64_t *v178;
  unint64_t *v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v186;
  char v187;
  unint64_t v188;
  __int128 v190;
  unint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  __n128 v195;
  float v196[2];
  int v197;
  int64x2_t *v198;
  int64x2_t *v199;
  uint64_t v200;
  uint64_t *v201[2];

  v5 = a2;
  v6 = this;
  v7 = *(const md::LabelPoint **)(*a2 + 192);
  if (*(const md::LabelPoint **)(*a2 + 200) == v7)
  {
    if ((v8 & 1) != 0)
    {
      v7 = (const md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      v7 = (const md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      {
        qword_1ECE2FD68 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1ECE2FD58 = 0u;
        dword_1ECE2FD70 = 2139095039;
        word_1ECE2FD74 = 256;
        byte_1ECE2FD76 = 1;
      }
      v6 = this;
      v5 = a2;
    }
  }
  md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)v6, v7);
  *(_QWORD *)v6 = &off_1E4292C60;
  *((_QWORD *)v6 + 31) = 850045863;
  *((_QWORD *)v6 + 41) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *(_OWORD *)((char *)v6 + 297) = 0u;
  {
    v171 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v171, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v10 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 43) = v10;
  v11 = *v5;
  *((_DWORD *)v6 + 92) = *(_DWORD *)(*v5 + 80);
  *((_QWORD *)v6 + 47) = *(_QWORD *)(v11 + 184);
  *((_QWORD *)v6 + 48) = 0;
  *((_BYTE *)v6 + 392) = *(_BYTE *)(*(_QWORD *)(a4 + 232) + 17) ^ 1;
  *((_BYTE *)v6 + 400) = 0;
  *((_BYTE *)v6 + 404) = 0;
  *((_BYTE *)v6 + 408) = 0;
  *((_WORD *)v6 + 206) = 0;
  *((_DWORD *)v6 + 104) = 0;
  *((_QWORD *)v6 + 58) = 0;
  *(_DWORD *)((char *)v6 + 393) = 0;
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 53) = 0;
  *((_BYTE *)v6 + 448) = 0;
  {
    v172 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v172, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v6 + 59) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v6 + 60) = 0;
  *((_QWORD *)v6 + 57) = (char *)v6 + 464;
  *((_DWORD *)v6 + 122) = 1;
  v12 = *v5;
  *((_QWORD *)v6 + 62) = *(_QWORD *)(*v5 + 16);
  *((_QWORD *)v6 + 63) = v12;
  v13 = v5[1];
  *((_QWORD *)v6 + 64) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *((_QWORD *)v6 + 65) = &off_1E42B5570;
  *((_QWORD *)v6 + 66) = 0;
  *((_QWORD *)v6 + 68) = 0;
  *((_QWORD *)v6 + 70) = 0;
  *((_QWORD *)v6 + 69) = 0;
  {
    v173 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v173, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v6 + 71) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)v6 + 72) = 0;
  *((_QWORD *)v6 + 74) = 0;
  *((_QWORD *)v6 + 73) = 0;
  {
    v174 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v174, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)v6 + 75) = mdm::Allocator::instance(void)::alloc;
  v18 = *v5;
  v19 = *(_OWORD *)(*v5 + 248);
  *((_OWORD *)v6 + 38) = v19;
  *((_OWORD *)v6 + 39) = *(_OWORD *)(v18 + 264);
  *((_WORD *)v6 + 320) = *(_WORD *)(v18 + 280);
  *((_BYTE *)v6 + 642) = 0;
  *((_WORD *)v6 + 323) = *(unsigned __int8 *)(v18 + 282);
  if (*(_BYTE *)(v18 + 237))
    v20 = 0;
  else
    v20 = (_QWORD)v19 == 0;
  v21 = !v20;
  *((_BYTE *)v6 + 648) = v21;
  *((_BYTE *)v6 + 649) = 1;
  *(_DWORD *)((char *)v6 + 650) = 0;
  *((_WORD *)v6 + 327) = 0;
  v22 = *v5;
  v23 = *(char **)(*v5 + 32);
  *((_QWORD *)v6 + 82) = v23;
  v24 = *(_QWORD *)(v22 + 40);
  *((_QWORD *)v6 + 83) = v24;
  v175 = (char **)((char *)v6 + 656);
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v22 = *v5;
    v23 = (char *)*((_QWORD *)v6 + 82);
  }
  v27 = (_QWORD **)((char *)v6 + 456);
  v28 = 76;
  if (!*(_BYTE *)(v22 + 112))
    v28 = 72;
  v29 = (const float *)(v22 + v28);
  v30 = vld1q_dup_f32(v29);
  *((float32x4_t *)v6 + 22) = v30;
  v176 = (_QWORD **)((char *)v6 + 456);
  if (!v23)
  {
    v34 = (char *)operator new(0x40uLL);
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_1E42DAB40;
    *(_OWORD *)(v34 + 24) = 0u;
    v23 = v34 + 24;
    *(_OWORD *)(v34 + 40) = 0u;
    *(_DWORD *)(v34 + 55) = 0;
    v35 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    *((_QWORD *)v34 + 3) = v35;
    if (v35)
    {
      *(_QWORD *)&v36 = -1;
      *((_QWORD *)&v36 + 1) = -1;
      v35[14] = v36;
      v35[15] = v36;
      v35[12] = v36;
      v35[13] = v36;
      v35[10] = v36;
      v35[11] = v36;
      v35[8] = v36;
      v35[9] = v36;
      v35[6] = v36;
      v35[7] = v36;
      v35[4] = v36;
      v35[5] = v36;
      v35[2] = v36;
      v35[3] = v36;
      *v35 = v36;
      v35[1] = v36;
    }
    *((_QWORD *)v6 + 82) = v23;
    v37 = (std::__shared_weak_count *)*((_QWORD *)v6 + 83);
    *((_QWORD *)v6 + 83) = v34;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      v23 = *v175;
      if (!*v175)
        goto LABEL_43;
    }
  }
  v31 = v23[33];
  if (!v23[33])
  {
LABEL_43:
    v42 = 0;
    *((_BYTE *)v6 + 240) = 0;
    goto LABEL_44;
  }
  v32 = *(_DWORD **)v23;
  if (**(_DWORD **)v23 != 65572)
  {
    v33 = 0;
    v40 = v32 + 2;
    while (v31 - 1 != v33)
    {
      v41 = *v40;
      v40 += 2;
      ++v33;
      if (v41 == 65572)
      {
        if (v33 < v31)
          goto LABEL_27;
        goto LABEL_43;
      }
    }
    goto LABEL_43;
  }
  v33 = 0;
LABEL_27:
  v20 = LOWORD(v32[2 * v33 + 1]) == 1;
  *((_BYTE *)v6 + 240) = v20;
  v42 = v20 && *(_QWORD *)(a4 + 184) != 0;
LABEL_44:
  *((_BYTE *)v6 + 241) = v42;
  v43 = *v5;
  v199 = 0;
  v200 = 0;
  v198 = 0;
  v44 = *(_QWORD *)(v43 + 200) - *(_QWORD *)(v43 + 192);
  if (v44)
  {
    std::vector<unsigned long>::__append((uint64_t)&v198, 0xAAAAAAAAAAAAAAABLL * (v44 >> 4));
    v46 = (unint64_t *)v198;
    v45 = (uint64_t *)v199;
    if (v198 != v199)
    {
      v47 = (char *)v199 - (char *)v198 - 8;
      if (v47 >= 0x18)
      {
        v50 = (v47 >> 3) + 1;
        v48 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        v51 = (int64x2_t)xmmword_19FFB2E40;
        v52 = v198 + 1;
        v53 = vdupq_n_s64(2uLL);
        v54 = vdupq_n_s64(4uLL);
        v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52[-1] = v51;
          *v52 = vaddq_s64(v51, v53);
          v51 = vaddq_s64(v51, v54);
          v52 += 2;
          v55 -= 4;
        }
        while (v55);
        if (v50 == v48)
          goto LABEL_53;
        v49 = (uint64_t *)&v46[v50 & 0x3FFFFFFFFFFFFFFCLL];
      }
      else
      {
        v48 = 0;
        v49 = (uint64_t *)v198;
      }
      do
        *v49++ = v48++;
      while (v49 != v45);
LABEL_53:
      v177 = (unint64_t *)v45;
      v178 = (uint64_t *)((char *)v6 + 464);
      while (1)
      {
        v56 = *v46;
        v180 = *((_DWORD *)v6 + 122);
        *((_DWORD *)v6 + 122) = v180 + 1;
        v190 = 0uLL;
        v191 = 0;
        {
          v165 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v165, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v192 = mdm::Allocator::instance(void)::alloc;
        v58 = *(_QWORD *)(*v5 + 192);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*v5 + 200) - v58) >> 4) <= v56)
        {
          v59 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
          if ((v60 & 1) == 0)
          {
            {
              qword_1ECE2FD68 = 0;
              md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
              *(_OWORD *)&qword_1ECE2FD58 = 0u;
              dword_1ECE2FD70 = 2139095039;
              word_1ECE2FD74 = 256;
              byte_1ECE2FD76 = 1;
            }
            v59 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
            v6 = this;
            v5 = a2;
            v27 = v176;
          }
        }
        else
        {
          v59 = (__int128 *)(v58 + 48 * v56);
        }
        v61 = *v59;
        v194 = *((_QWORD *)v59 + 2);
        v193 = v61;
        v63 = *(__n128 *)((char *)v59 + 24);
        v195 = v63;
        v62 = *((float *)v59 + 10);
        *(float *)((char *)v196 + 3) = *(float *)((char *)v59 + 43);
        v196[0] = v62;
        BYTE1(v197) = 0;
        HIBYTE(v197) = 0;
        v63.n128_f32[0] = v62;
        BYTE2(v197) = v62 != 3.4028e38;
        v186 = (_QWORD *)*v5;
        if (*(_QWORD *)(*v5 + 48) == *(_QWORD *)(*v5 + 56))
          goto LABEL_210;
        {
          v166 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v179 = v46;
        v182 = mdm::Allocator::instance(void)::alloc;
        {
          v167 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v167, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v181 = mdm::Allocator::instance(void)::alloc;
        v66 = (unsigned __int8 *)v186[6];
        v67 = (unsigned __int8 *)v186[7];
        if (v66 != v67)
        {
          v68 = 0;
          v69 = 0;
          v188 = 0;
          v70 = 0;
          v71 = 0;
          v183 = 0;
          v72 = 0;
          while (1)
          {
            if (v66[1])
              goto LABEL_66;
            if ((unint64_t)v71 >= v183)
              break;
            if (v71)
              *v71 = v72;
            ++v71;
LABEL_89:
            if ((unint64_t)v69 >= v188)
            {
              v82 = (unint64_t)&v69[-v68];
              v83 = (uint64_t)&v69[-v68 + 1];
              if (v83 < 0)
                abort();
              v84 = v188 - v68;
              if (2 * (v188 - v68) > v83)
                v83 = 2 * (v188 - v68);
              if (v84 >= 0x3FFFFFFFFFFFFFFFLL)
                v85 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v182 + 16))(v182, v85, 1, v63);
                v87 = (unsigned __int8 *)(v86 + v82);
                v188 = v86 + v85;
                if (v86)
                  *v87 = *v66;
              }
              else
              {
                v188 = 0;
                v87 = &v69[-v68];
              }
              v88 = v87;
              if (v69 == (unsigned __int8 *)v68)
                goto LABEL_106;
              if (v82 < 0x30
                || &v87[v68 - (_QWORD)v69] > v87 - 1
                || v68 > (unint64_t)(v69 - 1)
                || (unint64_t)(v69 - v87) < 0x20)
              {
                v89 = v69;
                v88 = v87;
              }
              else
              {
                v89 = &v69[-(v82 & 0xFFFFFFFFFFFFFFE0)];
                v94 = (__n128 *)(v87 - 16);
                v95 = (__n128 *)(v69 - 16);
                v96 = v82 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v63 = *v95;
                  v94[-1] = v95[-1];
                  *v94 = v63;
                  v94 -= 2;
                  v95 -= 2;
                  v96 -= 32;
                }
                while (v96);
                v88 = &v87[-(v82 & 0xFFFFFFFFFFFFFFE0)];
                if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0))
                  goto LABEL_106;
              }
              do
              {
                v90 = *--v89;
                *--v88 = v90;
              }
              while (v89 != (unsigned __int8 *)v68);
LABEL_106:
              v69 = v87 + 1;
              if (v68)
                (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v182 + 40))(v182, v68, v84);
              v68 = (unint64_t)v88;
              goto LABEL_66;
            }
            if (v69)
              *v69 = *v66;
            ++v69;
LABEL_66:
            ++v72;
            v66 += 104;
            if (v66 == v67)
            {
              v97 = v186;
              v66 = (unsigned __int8 *)v186[6];
              goto LABEL_125;
            }
          }
          v73 = v71 - v70;
          v74 = v71 - v70 + 1;
          if (v74 < 0)
            abort();
          v75 = v183 - (_QWORD)v70;
          if (2 * (v183 - (unint64_t)v70) > v74)
            v74 = 2 * (v183 - (_QWORD)v70);
          if (v75 >= 0x3FFFFFFFFFFFFFFFLL)
            v76 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v181 + 16))(v181, v76, 1, v63);
            v78 = (char *)(v77 + v73);
            v183 = v77 + v76;
            if (v77)
              *v78 = v72;
          }
          else
          {
            v183 = 0;
            v78 = (char *)(v71 - v70);
          }
          v79 = v78;
          if (v71 != v70)
          {
            if (v73 < 0x30 || &v78[v70 - v71] > v78 - 1 || v70 > v71 - 1 || (unint64_t)(v71 - v78) < 0x20)
            {
              v80 = v71;
              v79 = v78;
            }
            else
            {
              v80 = &v71[-(v73 & 0xFFFFFFFFFFFFFFE0)];
              v91 = (__n128 *)(v78 - 16);
              v92 = (__n128 *)(v71 - 16);
              v93 = v73 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v63 = *v92;
                v91[-1] = v92[-1];
                *v91 = v63;
                v91 -= 2;
                v92 -= 2;
                v93 -= 32;
              }
              while (v93);
              v79 = &v78[-(v73 & 0xFFFFFFFFFFFFFFE0)];
              if (v73 == (v73 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_86;
            }
            do
            {
              v81 = *--v80;
              *--v79 = v81;
            }
            while (v80 != v70);
          }
LABEL_86:
          v71 = v78 + 1;
          if (v70)
            (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v181 + 40))(v181, v70, v75);
          v70 = v79;
          goto LABEL_89;
        }
        v183 = 0;
        v71 = 0;
        v70 = 0;
        v188 = 0;
        v69 = 0;
        v68 = 0;
        v97 = v186;
LABEL_125:
        v98 = v97[47];
        v99 = v97[48];
        if (v98 != v99)
        {
          v100 = *v66;
          do
          {
            v101 = *(unsigned __int8 *)(v98 + 26);
            if (v101 >= v100)
            {
              v102 = v69;
              if ((unint64_t)v69 >= v188)
              {
                v103 = (unint64_t)&v69[-v68];
                v104 = (uint64_t)&v69[-v68 + 1];
                if (v104 < 0)
                  abort();
                v105 = v188 - v68;
                if (2 * (v188 - v68) > v104)
                  v104 = 2 * (v188 - v68);
                if (v105 >= 0x3FFFFFFFFFFFFFFFLL)
                  v106 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v106 = v104;
                if (v106)
                {
                  v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v182 + 16))(v182, v106, 1, v63);
                  v108 = (unsigned __int8 *)(v107 + v103);
                  v188 = v107 + v106;
                  if (v107)
                    *v108 = *(_BYTE *)(v98 + 26);
                  v102 = v69;
                }
                else
                {
                  v188 = 0;
                  v108 = &v69[-v68];
                }
                v109 = v108;
                if (v102 == (unsigned __int8 *)v68)
                  goto LABEL_148;
                if (v103 < 0x30
                  || &v108[v68 - (_QWORD)v102] > v108 - 1
                  || v68 > (unint64_t)(v102 - 1)
                  || (unint64_t)(v102 - v108) < 0x20)
                {
                  v110 = v102;
                  v109 = v108;
                }
                else
                {
                  v110 = &v102[-(v103 & 0xFFFFFFFFFFFFFFE0)];
                  v112 = (__n128 *)(v108 - 16);
                  v113 = (__n128 *)(v102 - 16);
                  v114 = v103 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v63 = *v113;
                    v112[-1] = v113[-1];
                    *v112 = v63;
                    v112 -= 2;
                    v113 -= 2;
                    v114 -= 32;
                  }
                  while (v114);
                  v109 = &v108[-(v103 & 0xFFFFFFFFFFFFFFE0)];
                  if (v103 == (v103 & 0xFFFFFFFFFFFFFFE0))
                    goto LABEL_148;
                }
                do
                {
                  v111 = *--v110;
                  *--v109 = v111;
                }
                while (v110 != (unsigned __int8 *)v68);
LABEL_148:
                v69 = v108 + 1;
                if (v68)
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v182 + 40))(v182, v68, v105);
                v68 = (unint64_t)v109;
                goto LABEL_128;
              }
              if (v69)
                *v69 = v101;
              ++v69;
            }
LABEL_128:
            v98 += 32;
          }
          while (v98 != v99);
        }
        std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>();
        if ((unsigned __int8 *)v68 != v69)
        {
          v115 = (unsigned __int8 *)(v68 + 1);
          while (v115 != v69)
          {
            v116 = *(v115 - 1);
            v117 = *v115++;
            if (v116 == v117)
            {
              v118 = v115 - 2;
              v119 = v118 + 2;
              if (v118 + 2 != v69)
              {
                v120 = *v118;
                do
                {
                  v121 = v120;
                  v120 = *v119;
                  if (v121 != v120)
                    *++v118 = v120;
                  ++v119;
                }
                while (v119 != v69);
              }
              v122 = v118 + 1;
              v123 = v69 - (v118 + 1);
              if (!v123)
                break;
              v124 = v69 - &v122[v123];
              if (v69 != &v122[v123])
                memmove(v122, &v122[v123], v69 - &v122[v123]);
              v69 = &v122[v124];
              if (v70 != v71)
                goto LABEL_176;
              goto LABEL_173;
            }
          }
        }
        if (v70 == v71)
        {
LABEL_173:
          v187 = 0;
          if ((unsigned __int8 *)v68 != v69)
            goto LABEL_177;
        }
        else
        {
LABEL_176:
          v187 = *v70;
          if ((unsigned __int8 *)v68 != v69)
          {
LABEL_177:
            v125 = 0;
            v126 = 0;
            v127 = v71 - v70;
            v128 = (unsigned __int8 *)v68;
            do
            {
              v130 = *v128;
              v131 = v186[47];
              v132 = (v186[48] - v131) >> 5;
              for (i = v126 + 1; i < v132; i = ++v126 + 1)
              {
                if (*(unsigned __int8 *)(v131 + 32 * i + 26) > v130)
                  break;
              }
              v134 = v125 + 1;
              if (v134 < v127)
              {
                v135 = v186[6];
                if (*(unsigned __int8 *)(v135 + 104 * v70[v134]) <= v130)
                {
                  do
                    v136 = ++v125 + 1;
                  while (v136 < v127 && *(unsigned __int8 *)(v135 + 104 * v70[v136]) <= v130);
                  v187 = v70[v125];
                }
              }
              v201[0] = 0;
              {
                v145 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v145, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              v138 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
              v201[0] = v138;
              *v138 = 1;
              v139 = md::PointLabelFeatureElement::PointLabelFeatureElement((uint64_t)(v138 + 1), (uint64_t)this, a2, v130, v187, v126);
              v201[0] = v138;
              md::PointLabelFeatureElement::updateText(v139, this, a3);
              md::PointLabelFeatureElement::updateLabelPlacements((md::PointLabelFeatureElement *)(v138 + 1), this);
              v140 = *((_QWORD *)&v190 + 1);
              if (*((_QWORD *)&v190 + 1) >= v191)
              {
                v141 = std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>((uint64_t)&v190, v201);
              }
              else
              {
                if (*((_QWORD *)&v190 + 1))
                {
                  **((_QWORD **)&v190 + 1) = v138;
                  ++*v138;
                }
                v141 = (_QWORD *)(v140 + 8);
              }
              *((_QWORD *)&v190 + 1) = v141;
              v20 = (*v138)-- == 1;
              if (v20)
              {
                v142 = (std::__shared_weak_count *)v138[3];
                if (v142)
                {
                  v143 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
                {
                  v146 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v146, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v201[0], 152);
              }
              ++v128;
            }
            while (v128 != v69);
          }
        }
        if (v70)
          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v181 + 40))(v181, v70, v183 - (_QWORD)v70);
        v6 = this;
        v5 = a2;
        v27 = v176;
        v46 = v179;
        if (v68)
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v182 + 40))(v182, v68, v188 - v68);
LABEL_210:
        if ((_QWORD)v190 == *((_QWORD *)&v190 + 1))
        {
          v147 = 76;
          if (!*(_BYTE *)(*v5 + 112))
            v147 = 72;
          v148 = *(float *)(*v5 + v147);
          {
            v168 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v168, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v150 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
          v201[0] = v150;
          *v150 = 1;
          v151 = md::PointLabelFeatureElement::PointLabelFeatureElement((uint64_t)(v150 + 1), (uint64_t)v6, v5, (int)v148, 0, 0);
          v201[0] = v150;
          md::PointLabelFeatureElement::updateText(v151, v6, a3);
          md::PointLabelFeatureElement::updateLabelPlacements((md::PointLabelFeatureElement *)(v150 + 1), v6);
          v152 = *((_QWORD *)&v190 + 1);
          if (*((_QWORD *)&v190 + 1) >= v191)
          {
            v153 = std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>((uint64_t)&v190, v201);
          }
          else
          {
            if (*((_QWORD *)&v190 + 1))
            {
              **((_QWORD **)&v190 + 1) = v150;
              ++*v150;
            }
            v153 = (_QWORD *)(v152 + 8);
          }
          *((_QWORD *)&v190 + 1) = v153;
          v20 = (*v150)-- == 1;
          if (v20)
          {
            v154 = (std::__shared_weak_count *)v150[3];
            if (v154)
            {
              v155 = (unint64_t *)&v154->__shared_owners_;
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
            {
              v169 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v169, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v201[0], 152);
          }
        }
        v158 = *v178;
        v159 = v178;
        v160 = v178;
        if (*v178)
        {
          while (1)
          {
            while (1)
            {
              v160 = (uint64_t *)v158;
              v161 = *(_DWORD *)(v158 + 32);
              if (v180 >= v161)
                break;
              v158 = *v160;
              v159 = v160;
              if (!*v160)
                goto LABEL_235;
            }
            if (v161 >= v180)
              break;
            v158 = v160[1];
            if (!v158)
            {
              v159 = v160 + 1;
              goto LABEL_235;
            }
          }
        }
        else
        {
LABEL_235:
          v162 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v6 + 59) + 16))(*((_QWORD *)v6 + 59), 128, 8);
          *(_DWORD *)(v162 + 32) = v180;
          *(_OWORD *)(v162 + 40) = v190;
          v163 = v192;
          *(_QWORD *)(v162 + 56) = v191;
          *(_QWORD *)(v162 + 64) = v163;
          v190 = 0uLL;
          v191 = 0;
          *(_QWORD *)(v162 + 88) = v194;
          *(_OWORD *)(v162 + 72) = v193;
          *(__n128 *)(v162 + 96) = v195;
          *(float *)&v163 = v196[0];
          *(float *)(v162 + 115) = *(float *)((char *)v196 + 3);
          *(_DWORD *)(v162 + 112) = v163;
          *(_DWORD *)(v162 + 120) = v197;
          *(_QWORD *)v162 = 0;
          *(_QWORD *)(v162 + 8) = 0;
          *(_QWORD *)(v162 + 16) = v160;
          *v159 = v162;
          v164 = (_QWORD *)**v27;
          if (v164)
          {
            *v27 = v164;
            v162 = *v159;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v6 + 58), (uint64_t *)v162);
          ++*((_QWORD *)v6 + 60);
        }
        v201[0] = (uint64_t *)&v190;
        std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](v201);
        if (++v46 == v177)
        {
          v46 = (unint64_t *)v198;
          break;
        }
      }
    }
    if (v46)
      operator delete(v46);
  }
  return v6;
}

void sub_19F13DB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;

  shared_weak_owners = (std::__shared_weak_count *)v29[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v34);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
  if (*(_BYTE *)(a28 + 642))
    *(_BYTE *)(a28 + 642) = 0;
  std::vector<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(a28 + 576));
  std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(a28 + 544));
  *(_QWORD *)(a28 + 520) = &off_1E42B5570;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a28 + 504);
  std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(a11, *(_QWORD **)(a28 + 464));
  std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(a28 + 320));
  std::mutex::~mutex(a9);
  md::LabelFeature::~LabelFeature((md::LabelFeature *)a28);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v24 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void md::RenderBatch::prepareResources(uint64_t a1, uint64_t a2, std::__shared_weak_count **a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t prime;
  unint64_t v10;
  float32x2_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD **v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD **v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  void (***v116)(unint64_t);
  void (**v117)(unint64_t);
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  uint8x8_t v121;
  unint64_t *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  void *v128;
  _QWORD *v129;
  int v130;
  int v131;
  unint64_t v132;
  size_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  uint64_t *v138;
  char *v139;
  std::__shared_weak_count *v140;
  unint64_t *p_shared_owners;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  __int128 *v160;
  _BYTE *v161;
  _BYTE *v162;
  size_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint8x8_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  unint64_t *v181;
  unint64_t *v182;
  unint64_t *v183;
  char *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  __int128 *v190;
  uint64_t v191;
  __int128 v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  float v198;
  _BOOL8 v199;
  unint64_t v200;
  unint64_t v201;
  size_t v202;
  void *v203;
  void *v204;
  uint64_t v205;
  _QWORD **v206;
  size_t v207;
  size_t v208;
  size_t v209;
  _QWORD *j;
  size_t v211;
  uint64_t v212;
  unint64_t v213;
  uint8x8_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  size_t v218;
  _QWORD *v219;
  _QWORD *v220;
  unint64_t v221;
  void *v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  int64x2_t v227;
  char *v228;
  int8x16_t v229;
  float32x2_t v230;
  _QWORD *v231;
  float32x4_t v232;
  float32x4_t v233;
  uint64_t *v234;
  int8x16_t v235;
  float32x2_t v236;
  _OWORD *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  _BYTE *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  __int128 v267;
  unsigned __int8 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  __int16 *v286;
  uint64_t v287;
  __int16 v288;
  __int128 *v290;
  _OWORD *v291;
  unint64_t v292;
  __int128 v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  uint64_t v300;
  unsigned __int8 v301;
  std::__shared_weak_count *v302;
  uint64_t v303;
  _QWORD *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t **v308;
  unsigned __int8 v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t **v317;
  uint64_t **v318;
  unint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t *v334;
  uint64_t **v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t *v350;
  uint64_t **v351;
  unint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  char v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  _OWORD *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  _QWORD *v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  void *v391;
  _QWORD *v392;
  uint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  char *v397;
  char *v398;
  unint64_t *v399;
  unint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  char *v407;
  char *v408;
  _QWORD *v409;
  __int128 v410;
  __int128 v411;
  uint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  uint64_t v420;
  unint64_t *v421;
  unint64_t v422;
  char *v423;
  char *v424;
  void (***v425)(char *);
  void (**v426)(char *);
  char *v427;
  unint64_t *v428;
  uint64_t *v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  __int128 v436;
  char *v437;
  uint64_t v438;
  void **v439;
  void (***v440)(_QWORD);
  void (***v441)(_QWORD);
  void *v442;
  void (***v443)(_QWORD);
  void (***v444)(_QWORD);
  void (**v445)(_QWORD);
  _QWORD *v446;
  void *v447;
  char *v448;
  char *v449;
  void (***v450)(char *);
  void (**v451)(char *);
  _QWORD *v452;
  void *v453;
  int v454;
  uint64_t v455;
  geo::read_write_lock *v456;
  const char *v457;
  malloc_zone_t *zone;
  uint64_t v459;
  geo::read_write_lock *v460;
  const char *v461;
  malloc_zone_t *v462;
  uint64_t v463;
  geo::read_write_lock *v464;
  const char *v465;
  malloc_zone_t *v466;
  uint64_t *v467;
  uint64_t v468;
  unint64_t v469;
  size_t v470;
  uint64_t v471;
  char *v472;
  std::__shared_weak_count *v475;
  int8x16_t v476;
  int8x16_t v477;
  std::__shared_weak_count *v478;
  char *v480;
  unint64_t v481;
  int8x16_t v482;
  char *v483;
  int64x2_t v484;
  uint64_t *v485;
  std::__shared_weak_count *v486;
  __int128 v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  uint64_t v491;
  std::__shared_weak_count *v492;
  uint64_t *v493;
  std::__shared_weak_count *v494;
  uint64_t *v495;
  std::__shared_weak_count *v496;
  void *v497[2];
  __int128 v498;
  float v499;
  uint64_t v500;
  void *__p[2];
  void *v502[2];
  float v503;
  void *v504[2];
  char *v505;
  _BYTE v506[48];
  uint64_t v507;
  uint64_t v508;
  std::__shared_weak_count *v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  uint64_t *v512;
  std::__shared_weak_count *v513;
  uint64_t *v514;
  std::__shared_weak_count *v515;
  int64x2_t v516;
  char *v517;
  char v518;
  __int128 v519;
  _BYTE v520[32];
  uint64_t v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char v533;
  char v534[24];

  if (!*(_QWORD *)(a1 + 264))
    return;
  v12 = a4;
  v504[0] = 0;
  v504[1] = 0;
  v505 = 0;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v502 = 0u;
  v503 = 1.0;
  if (a5 <= a4)
    goto LABEL_219;
  v7 = 0;
  v10 = 0x9DDFEA08EB382D69;
  if ((unint64_t)((uint64_t)(a5 - a4) >> 3) <= 1)
    v13 = 1;
  else
    v13 = (uint64_t)(a5 - a4) >> 3;
  do
  {
    prime = **(_QWORD **)(v12 + 8 * v7);
    v14 = 0x9DDFEA08EB382D69 * (((8 * prime) + 8) ^ HIDWORD(prime));
    v15 = 0x9DDFEA08EB382D69 * (HIDWORD(prime) ^ (v14 >> 47) ^ v14);
    v5 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
    v16 = (unint64_t)__p[1];
    if (__p[1])
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v6 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
        if ((void *)v5 >= __p[1])
          v6 = v5 % (unint64_t)__p[1];
      }
      else
      {
        v6 = v5 & ((unint64_t)__p[1] - 1);
      }
      v18 = (_QWORD **)*((_QWORD *)__p[0] + v6);
      if (v18)
      {
        v19 = *v18;
        if (*v18)
        {
          if (v17.u32[0] < 2uLL)
          {
            while (1)
            {
              v21 = v19[1];
              if (v21 == v5)
              {
                if (v19[2] == prime)
                  goto LABEL_88;
              }
              else if ((v21 & ((uint64_t)__p[1] - 1)) != v6)
              {
                goto LABEL_28;
              }
              v19 = (_QWORD *)*v19;
              if (!v19)
                goto LABEL_28;
            }
          }
          do
          {
            v20 = v19[1];
            if (v20 == v5)
            {
              if (v19[2] == prime)
                goto LABEL_88;
            }
            else
            {
              if ((void *)v20 >= __p[1])
                v20 %= (unint64_t)__p[1];
              if (v20 != v6)
                break;
            }
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_28:
    v19 = operator new(0x30uLL);
    *(_QWORD *)v506 = v19;
    *(_QWORD *)&v506[8] = v502;
    *v19 = 0;
    v19[1] = v5;
    v19[2] = prime;
    v19[3] = 0;
    v19[4] = 0;
    v19[5] = 0;
    v506[16] = 1;
    v22 = (float)((unint64_t)v502[1] + 1);
    if (!v16 || (float)(v503 * (float)v16) < v22)
    {
      v23 = (v16 & (v16 - 1)) != 0;
      if (v16 < 3)
        v23 = 1;
      v24 = v23 | (2 * v16);
      v25 = vcvtps_u32_f32(v22 / v503);
      if (v24 <= v25)
        prime = v25;
      else
        prime = v24;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v16 = (unint64_t)__p[1];
      }
      if (prime <= v16)
      {
        if (prime >= v16)
          goto LABEL_65;
        v36 = vcvtps_u32_f32((float)(unint64_t)v502[1] / v503);
        if (v16 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          v36 = std::__next_prime(v36);
        }
        else
        {
          v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2)
            v36 = v38;
        }
        if (prime <= v36)
          prime = v36;
        if (prime >= v16)
        {
          v16 = (unint64_t)__p[1];
LABEL_65:
          if ((v16 & (v16 - 1)) != 0)
          {
            if (v5 >= v16)
              v6 = v5 % v16;
            else
              v6 = v5;
          }
          else
          {
            v6 = (v16 - 1) & v5;
          }
          goto LABEL_78;
        }
        if (!prime)
        {
          v59 = __p[0];
          __p[0] = 0;
          if (v59)
            operator delete(v59);
          v16 = 0;
          __p[1] = 0;
          goto LABEL_65;
        }
      }
      if (prime >> 61)
        goto LABEL_685;
      v26 = operator new(8 * prime);
      v27 = __p[0];
      __p[0] = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v28++) = 0;
      while (prime != v28);
      v29 = (_QWORD **)v502[0];
      if (!v502[0])
      {
LABEL_64:
        v16 = prime;
        goto LABEL_65;
      }
      v30 = *((_QWORD *)v502[0] + 1);
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *((_QWORD *)__p[0] + v32) = v502;
        for (i = *v29; *v29; i = *v29)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v29 = (_QWORD **)i;
          }
          else if (*((_QWORD *)__p[0] + v34))
          {
            *v29 = (_QWORD *)*i;
            v35 = 8 * v34;
            *i = **(_QWORD **)((char *)__p[0] + v35);
            **(_QWORD **)((char *)__p[0] + v35) = i;
          }
          else
          {
            *((_QWORD *)__p[0] + v34) = v29;
            v29 = (_QWORD **)i;
            v32 = v34;
          }
        }
        goto LABEL_64;
      }
      if (v30 >= prime)
        v30 %= prime;
      *((_QWORD *)__p[0] + v30) = v502;
      v39 = *v29;
      if (!*v29)
        goto LABEL_64;
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 != v30)
        {
          if (!*((_QWORD *)__p[0] + v41))
          {
            *((_QWORD *)__p[0] + v41) = v29;
            goto LABEL_69;
          }
          *v29 = (_QWORD *)*v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)((char *)__p[0] + v40);
          **(_QWORD **)((char *)__p[0] + v40) = v39;
          v39 = v29;
        }
        v41 = v30;
LABEL_69:
        v29 = (_QWORD **)v39;
        v39 = (_QWORD *)*v39;
        v30 = v41;
        if (!v39)
          goto LABEL_64;
      }
    }
LABEL_78:
    v42 = __p[0];
    v43 = (_QWORD *)*((_QWORD *)__p[0] + v6);
    if (v43)
    {
      *v19 = *v43;
LABEL_86:
      *v43 = v19;
      goto LABEL_87;
    }
    *v19 = v502[0];
    v502[0] = v19;
    v42[v6] = v502;
    if (*v19)
    {
      v44 = *(_QWORD *)(*v19 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v44 >= v16)
          v44 %= v16;
      }
      else
      {
        v44 &= v16 - 1;
      }
      v43 = (char *)__p[0] + 8 * v44;
      goto LABEL_86;
    }
LABEL_87:
    ++v502[1];
LABEL_88:
    v46 = (uint64_t *)v19[4];
    v45 = v19[5];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v7;
      v6 = (unint64_t)(v46 + 1);
    }
    else
    {
      prime = v19[3];
      v47 = (uint64_t)((uint64_t)v46 - prime) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        abort();
      v49 = v45 - prime;
      if (v49 >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v5 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v5 = v48;
      if (v5)
      {
        if (v5 >> 61)
          goto LABEL_685;
        v50 = (char *)operator new(8 * v5);
      }
      else
      {
        v50 = 0;
      }
      v51 = (uint64_t *)&v50[8 * v47];
      *v51 = v7;
      v6 = (unint64_t)(v51 + 1);
      if (v46 != (uint64_t *)prime)
      {
        v52 = (unint64_t)v46 - prime - 8;
        if (v52 < 0x58)
          goto LABEL_707;
        if (prime - (unint64_t)v50 < 0x20)
          goto LABEL_707;
        v53 = (v52 >> 3) + 1;
        v54 = &v50[8 * v47 - 16];
        v55 = v46 - 2;
        v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = *(_OWORD *)v55;
          *((_OWORD *)v54 - 1) = *((_OWORD *)v55 - 1);
          *(_OWORD *)v54 = v57;
          v54 -= 32;
          v55 -= 4;
          v56 -= 4;
        }
        while (v56);
        v51 -= v53 & 0x3FFFFFFFFFFFFFFCLL;
        v46 -= v53 & 0x3FFFFFFFFFFFFFFCLL;
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_707:
          do
          {
            v58 = *--v46;
            *--v51 = v58;
          }
          while (v46 != (uint64_t *)prime);
        }
      }
      v19[3] = v51;
      v19[4] = v6;
      v19[5] = &v50[8 * v5];
      if (prime)
        operator delete((void *)prime);
    }
    v12 = a4;
    v19[4] = v6;
    ++v7;
  }
  while (v7 != v13);
  v8 = (unint64_t *)v502[0];
  if (v502[0])
  {
    v482 = (int8x16_t)xmmword_19FFB3470;
    v11 = (float32x2_t)0x80000000800000;
    v7 = 1065353216;
    v5 = (unint64_t)&md::MeshRenderable::generateId(void)::sId;
    while (1)
    {
      while (1)
      {
        v60 = v8[4] - v8[3];
        if (v60 >= 9)
          break;
        v8 = (unint64_t *)*v8;
        if (!v8)
          goto LABEL_219;
      }
      prime = (size_t)operator new(0x30uLL);
      *(_QWORD *)(prime + 8) = 0;
      v61 = (unint64_t *)(prime + 8);
      *(_QWORD *)(prime + 16) = 0;
      *(_QWORD *)prime = &off_1E42DADE0;
      v10 = prime + 24;
      md::InstanceData::InstanceData(prime + 24, v60 >> 3, 0);
      v62 = 0;
      *(_QWORD *)&v519 = prime + 24;
      *((_QWORD *)&v519 + 1) = prime;
      v63 = *(_QWORD **)(prime + 24);
      v65 = v63[5];
      v64 = v63[6];
      v66 = v63[1];
      *(_OWORD *)v506 = 0uLL;
      v67 = v64 - v65;
      if (v67 != v67 % v66)
        v62 = v63[9];
      *(_QWORD *)&v68 = 0;
      *((_QWORD *)&v68 + 1) = v63;
      *(_OWORD *)v506 = v68;
      *(_QWORD *)&v506[16] = 0;
      *(_QWORD *)&v506[24] = v67 / v66 * v66;
      *(_QWORD *)&v506[40] = v62;
      *(_WORD *)&v506[32] = 1;
      *(_BYTE *)(prime + 44) = 0;
      v69 = (_QWORD *)v8[3];
      v70 = v8[4] - (_QWORD)v69;
      if (v70)
      {
        v71 = v70 >> 3;
        if (v71 <= 1)
          v71 = 1;
        v72 = v62 + 32;
        v73 = (uint64_t *)v8[3];
        do
        {
          v74 = *v73++;
          v75 = *(_QWORD *)(v12 + 8 * v74);
          v76 = *(_DWORD *)(v75 + 68);
          v77 = *(_QWORD *)(v75 + 60);
          v78 = *(_DWORD *)(v75 + 80);
          v79 = *(_QWORD *)(v75 + 72);
          v80 = *(_DWORD *)(v75 + 92);
          v81 = *(_QWORD *)(v75 + 84);
          v82 = *(_DWORD *)(v75 + 104);
          v83 = *(_QWORD *)(v75 + 96);
          *(_QWORD *)(v72 - 32) = v77;
          *(_DWORD *)(v72 - 24) = v76;
          *(_DWORD *)(v72 - 20) = 0;
          *(_QWORD *)(v72 - 16) = v79;
          *(_DWORD *)(v72 - 8) = v78;
          *(_DWORD *)(v72 - 4) = 0;
          *(_QWORD *)v72 = v81;
          *(_DWORD *)(v72 + 8) = v80;
          *(_DWORD *)(v72 + 12) = 0;
          *(_QWORD *)(v72 + 16) = v83;
          *(_DWORD *)(v72 + 24) = v82;
          *(_DWORD *)(v72 + 28) = 1065353216;
          v72 += 64;
          --v71;
        }
        while (v71);
      }
      v84 = *(uint64_t **)(v12 + 8 * *v69);
      v85 = (char *)v504[1];
      if (v504[1] >= v505)
      {
        v90 = 0x6DB6DB6DB6DB6DB7 * (((char *)v504[1] - (char *)v504[0]) >> 5);
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) > 0x124924924924924)
          abort();
        if (0xDB6DB6DB6DB6DB6ELL * ((v505 - (char *)v504[0]) >> 5) > v91)
          v91 = 0xDB6DB6DB6DB6DB6ELL * ((v505 - (char *)v504[0]) >> 5);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v505 - (char *)v504[0]) >> 5)) >= 0x92492492492492)
          v92 = 0x124924924924924;
        else
          v92 = v91;
        if (v92 > 0x124924924924924)
          goto LABEL_685;
        v93 = operator new(224 * v92);
        v94 = (char *)&v93[28 * v90];
        v95 = *v84;
        *(_QWORD *)v94 = &off_1E428F838;
        v94[8] = 0;
        *((_QWORD *)v94 + 2) = 0;
        v480 = (char *)&v93[28 * v92];
        *((_QWORD *)v94 + 3) = 0;
        *((_QWORD *)v94 + 4) = v10;
        *((_QWORD *)v94 + 5) = prime;
        do
          v96 = __ldxr(v61);
        while (__stxr(v96 + 1, v61));
        v97 = (char *)&v93[28 * v90];
        v97[48] = 0;
        v97[64] = 0;
        v97[72] = 1;
        *(_OWORD *)(v97 + 76) = xmmword_19FFB3470;
        *(_QWORD *)(v97 + 92) = 0x80000000800000;
        v97[100] = 0;
        v97[124] = 0;
        v97[128] = 0;
        v97[140] = 0;
        *((_DWORD *)v97 + 36) = 65537;
        *((_WORD *)v97 + 74) = 0;
        v97[152] = 0;
        v97[176] = 0;
        v97[184] = 0;
        v97[188] = 0;
        *((_WORD *)v97 + 96) = 0;
        v97[196] = 0;
        v97[200] = 0;
        v98 = (unint64_t *)(v97 + 208);
        v12 = a4;
        do
          v99 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
        while (__stlxr(v99 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
        *v98 = v99;
        v93[28 * v90 + 27] = v95;
        *((_OWORD *)v94 + 1) = *(_OWORD *)(v95 + 16);
        md::MeshRenderable::recalculateBounds((md::MeshRenderable *)&v93[28 * v90]);
        v89 = v94 + 224;
        v100 = v504[0];
        prime = (size_t)v504[1];
        if (v504[1] == v504[0])
        {
          v504[0] = v94;
          v505 = v480;
          if (v504[1])
            goto LABEL_163;
        }
        else
        {
          v101 = v94;
          do
          {
            *((_QWORD *)v101 - 28) = &off_1E428F838;
            v101 -= 224;
            v103 = *(_OWORD *)(prime - 216);
            *((_QWORD *)v101 + 3) = *(_QWORD *)(prime - 200);
            *(_OWORD *)(v101 + 8) = v103;
            *((_QWORD *)v101 + 4) = *(_QWORD *)(prime - 192);
            v104 = *(_QWORD *)(prime - 184);
            *((_QWORD *)v101 + 5) = v104;
            if (v104)
            {
              v105 = (unint64_t *)(v104 + 8);
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
            }
            v107 = *(_OWORD *)(prime - 176);
            v108 = *(_OWORD *)(prime - 144);
            *((_OWORD *)v94 - 10) = *(_OWORD *)(prime - 160);
            *((_OWORD *)v94 - 9) = v108;
            *((_OWORD *)v94 - 11) = v107;
            v109 = *(_OWORD *)(prime - 128);
            v110 = *(_OWORD *)(prime - 112);
            v111 = *(_OWORD *)(prime - 96);
            *(_QWORD *)(v94 - 82) = *(_QWORD *)(prime - 82);
            *((_OWORD *)v94 - 7) = v110;
            *((_OWORD *)v94 - 6) = v111;
            *((_OWORD *)v94 - 8) = v109;
            *(v94 - 72) = 0;
            *(v94 - 48) = 0;
            if (*(_BYTE *)(prime - 48))
            {
              *((_QWORD *)v94 - 9) = *(_QWORD *)(prime - 72);
              v112 = *(_QWORD *)(prime - 64);
              *((_QWORD *)v94 - 8) = v112;
              if (v112)
              {
                v113 = (unint64_t *)(v112 + 8);
                do
                  v114 = __ldxr(v113);
                while (__stxr(v114 + 1, v113));
              }
              *(v94 - 56) = *(_BYTE *)(prime - 56);
              *(v94 - 48) = 1;
            }
            *((_QWORD *)v94 - 5) = *(_QWORD *)(prime - 40);
            *((_WORD *)v94 - 16) = 0;
            if (*(_BYTE *)(prime - 31))
            {
              *(v94 - 32) = *(_BYTE *)(prime - 32);
              *(v94 - 31) = 1;
            }
            v102 = *(_OWORD *)(prime - 28);
            *((_OWORD *)v94 - 1) = *(_OWORD *)(prime - 16);
            *(_OWORD *)(v94 - 28) = v102;
            prime -= 224;
            v94 = v101;
          }
          while ((void *)prime != v100);
          prime = (size_t)v504[0];
          v115 = (char *)v504[1];
          v504[0] = v101;
          v504[1] = v89;
          v505 = v480;
          if (v115 != (char *)prime)
          {
            v10 = (unint64_t)(v115 - 224);
            v116 = (void (***)(unint64_t))(v115 - 224);
            do
            {
              v117 = *v116;
              v116 -= 28;
              (*v117)(v10);
              v118 = v10 == prime;
              v10 = (unint64_t)v116;
            }
            while (!v118);
          }
          if (prime)
LABEL_163:
            operator delete((void *)prime);
        }
      }
      else
      {
        v86 = *v84;
        *(_QWORD *)v504[1] = &off_1E428F838;
        v85[8] = 0;
        *((_QWORD *)v85 + 2) = 0;
        *((_QWORD *)v85 + 3) = 0;
        *((_QWORD *)v85 + 4) = v10;
        *((_QWORD *)v85 + 5) = prime;
        do
          v87 = __ldxr(v61);
        while (__stxr(v87 + 1, v61));
        v85[48] = 0;
        v85[64] = 0;
        v85[72] = 1;
        *(_OWORD *)(v85 + 76) = xmmword_19FFB3470;
        *(_QWORD *)(v85 + 92) = 0x80000000800000;
        v85[100] = 0;
        v85[124] = 0;
        v85[128] = 0;
        v85[140] = 0;
        *((_DWORD *)v85 + 36) = 65537;
        *((_WORD *)v85 + 74) = 0;
        v85[152] = 0;
        v85[176] = 0;
        v85[184] = 0;
        v85[188] = 0;
        *((_WORD *)v85 + 96) = 0;
        v85[196] = 0;
        v85[200] = 0;
        do
          v88 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
        while (__stlxr(v88 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
        *((_QWORD *)v85 + 26) = v88;
        *((_QWORD *)v85 + 27) = v86;
        *((_OWORD *)v85 + 1) = *(_OWORD *)(v86 + 16);
        md::MeshRenderable::recalculateBounds((md::MeshRenderable *)v85);
        v89 = v85 + 224;
      }
      v504[1] = v89;
      v119 = (unint64_t)__p[1];
      v6 = *v8;
      v120 = v8[1];
      v121 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v121.i16[0] = vaddlv_u8(v121);
      if (v121.u32[0] > 1uLL)
      {
        if ((void *)v120 >= __p[1])
          v120 %= (unint64_t)__p[1];
      }
      else
      {
        v120 &= (unint64_t)__p[1] - 1;
      }
      v122 = (unint64_t *)*((_QWORD *)__p[0] + v120);
      do
      {
        v123 = v122;
        v122 = (unint64_t *)*v122;
      }
      while (v122 != v8);
      if (v123 == (unint64_t *)v502)
        goto LABEL_708;
      v124 = v123[1];
      if (v121.u32[0] > 1uLL)
      {
        if ((void *)v124 >= __p[1])
          v124 %= (unint64_t)__p[1];
      }
      else
      {
        v124 &= (unint64_t)__p[1] - 1;
      }
      v125 = *v8;
      if (v124 != v120)
      {
LABEL_708:
        if (v6)
        {
          v126 = *(_QWORD *)(v6 + 8);
          if (v121.u32[0] > 1uLL)
          {
            v127 = *(_QWORD *)(v6 + 8);
            if ((void *)v126 >= __p[1])
              v127 = v126 % (unint64_t)__p[1];
          }
          else
          {
            v127 = v126 & ((unint64_t)__p[1] - 1);
          }
          v125 = *v8;
          if (v127 == v120)
            goto LABEL_185;
        }
        *((_QWORD *)__p[0] + v120) = 0;
        v125 = *v8;
      }
      if (v125)
      {
        v126 = *(_QWORD *)(v125 + 8);
LABEL_185:
        if (v121.u32[0] > 1uLL)
        {
          if (v126 >= v119)
            v126 %= v119;
        }
        else
        {
          v126 &= v119 - 1;
        }
        if (v126 != v120)
        {
          *((_QWORD *)__p[0] + v126) = v123;
          v125 = *v8;
        }
      }
      *v123 = v125;
      *v8 = 0;
      --v502[1];
      v128 = (void *)v8[3];
      if (v128)
      {
        v8[4] = (unint64_t)v128;
        operator delete(v128);
      }
      operator delete(v8);
      if (*(_QWORD *)&v506[40])
      {
        prime = *(_QWORD *)&v506[24];
        v10 = *(_QWORD *)&v506[16];
        if (*(_QWORD *)&v506[24] != *(_QWORD *)&v506[16])
        {
          v129 = *(_QWORD **)&v506[8];
          v130 = v506[32];
          v131 = v506[33];
          if (*(_QWORD *)v506 && *(_BYTE *)(*(_QWORD *)&v506[8] + 17) != 2)
            (*(void (**)(void))(**(_QWORD **)v506 + 64))();
          if (v130 && !v131)
          {
            v132 = v129[7];
            v133 = v129[8];
            if (v133 == v132)
              v132 = v129[10] - v129[9];
            if (v10 < v132)
              v132 = v10;
            if (v133 <= prime)
              v133 = prime;
            if (v133 == v132)
              v133 = v132 + v129[10] - v129[9];
            v129[7] = v132;
            v129[8] = v133;
          }
        }
      }
      v134 = (std::__shared_weak_count *)*((_QWORD *)&v519 + 1);
      if (!*((_QWORD *)&v519 + 1))
        goto LABEL_213;
      v135 = (unint64_t *)(*((_QWORD *)&v519 + 1) + 8);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
        v8 = (unint64_t *)v6;
        if (!v6)
          break;
      }
      else
      {
LABEL_213:
        v8 = (unint64_t *)v6;
        if (!v6)
          break;
      }
    }
  }
LABEL_219:
  if (!v502[1])
    goto LABEL_659;
  v137 = (char *)a3;
  if (v502[1] == (void *)1)
  {
    v138 = *(uint64_t **)(v12 + 8 * **((_QWORD **)v502[0] + 3));
    *(_QWORD *)&v519 = v138;
    LOBYTE(v489) = 0;
    v139 = (char *)v504[1];
    if (v504[1] >= v505)
    {
      v223 = (void *)std::vector<md::MeshRenderable>::__emplace_back_slow_path<std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::components::MeshInstance *&>((uint64_t *)v504, (uint64_t)*a3, a3[1], (char *)&v489, (uint64_t **)&v519);
    }
    else
    {
      v140 = a3[1];
      *(_QWORD *)v506 = *a3;
      *(_QWORD *)&v506[8] = v140;
      if (v140)
      {
        p_shared_owners = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldxr(p_shared_owners);
        while (__stxr(v142 + 1, p_shared_owners));
        md::MeshRenderable::MeshRenderable((uint64_t)v139, v506, 0, v138);
        do
          v143 = __ldaxr(p_shared_owners);
        while (__stlxr(v143 - 1, p_shared_owners));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      else
      {
        md::MeshRenderable::MeshRenderable((uint64_t)v504[1], v506, 0, v138);
      }
      v223 = v139 + 224;
    }
    v504[1] = v223;
    goto LABEL_659;
  }
  v144 = *(unsigned int *)(a1 + 224);
  if ((_DWORD)v144 == -1)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    __break(1u);
    goto LABEL_693;
  }
  *(_QWORD *)v506 = &v519;
  v145 = (uint64_t *)((uint64_t (*)(_BYTE *))off_1E42F43E8[v144])(v506);
  v146 = *v145;
  v147 = (std::__shared_weak_count *)v145[1];
  v489 = *v145;
  v490 = v147;
  if (v147)
  {
    v148 = (unint64_t *)&v147->__shared_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  v150 = (std::__shared_weak_count *)v145[3];
  v491 = v145[2];
  v492 = v150;
  if (v150)
  {
    v151 = (unint64_t *)&v150->__shared_owners_;
    do
      v152 = __ldxr(v151);
    while (__stxr(v152 + 1, v151));
  }
  v153 = (std::__shared_weak_count *)v145[5];
  v493 = (uint64_t *)v145[4];
  v494 = v153;
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  v156 = (std::__shared_weak_count *)v145[7];
  v495 = (uint64_t *)v145[6];
  v496 = v156;
  if (v156)
  {
    v157 = (unint64_t *)&v156->__shared_owners_;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
  }
  *(_OWORD *)v497 = 0u;
  v498 = 0u;
  v499 = 1.0;
  v500 = 0;
  v159 = v502[0];
  v160 = &xmmword_19FFB3000;
  if (!v502[0])
  {
    v6 = 0;
    v8 = 0;
    v482 = (int8x16_t)xmmword_19FFB3470;
    v11 = (float32x2_t)0x80000000800000;
    v480 = 0;
    if (!v146)
      goto LABEL_372;
    goto LABEL_371;
  }
  v8 = 0;
  v6 = 0;
  v483 = 0;
  v482 = (int8x16_t)xmmword_19FFB3470;
  v11 = (float32x2_t)0x80000000800000;
  do
  {
    v162 = (_BYTE *)v159[3];
    v161 = (_BYTE *)v159[4];
    v163 = v161 - v162;
    if (v161 == v162)
    {
      v164 = 0;
    }
    else
    {
      if ((v163 & 0x8000000000000000) != 0)
        abort();
      v164 = operator new(v161 - v162);
      memcpy(v164, v162, v163);
    }
    v165 = *v164;
    v166 = *(_QWORD *)(a4 + 8 * *v164);
    memset(&v506[4], 0, 44);
    *(_DWORD *)v506 = 1065353216;
    *(_DWORD *)&v506[16] = 1065353216;
    *(_DWORD *)&v506[32] = 1065353216;
    if (gm::Matrix<float,3,4>::isWithinEpsilon((float *)(v166 + 60), (float *)v506))
    {
      v167 = *(float32x4_t *)(v166 + 36);
      v167.i32[3] = v482.i32[3];
      v168 = (float32x4_t)v482;
      v168.i32[3] = HIDWORD(*(_OWORD *)(v166 + 36));
      v482 = vbslq_s8((int8x16_t)vcgtq_f32(v168, v167), *(int8x16_t *)(v166 + 36), v482);
      v11 = vmaxnm_f32(v11, *(float32x2_t *)(v166 + 52));
      v169 = *(_QWORD *)v166;
      if (**(_QWORD **)(*(_QWORD *)v169 + 64) != v489)
        goto LABEL_245;
      v481 = v6;
      v170 = 0x9DDFEA08EB382D69 * (((8 * v169) + 8) ^ HIDWORD(v169));
      v171 = 0x9DDFEA08EB382D69 * (HIDWORD(v169) ^ (v170 >> 47) ^ v170);
      v172 = v171 ^ (v171 >> 47);
      v173 = 0x9DDFEA08EB382D69 * v172;
      v174 = (unint64_t)v497[1];
      if (v497[1])
      {
        v175 = (uint8x8_t)vcnt_s8((int8x8_t)v497[1]);
        v175.i16[0] = vaddlv_u8(v175);
        if (v175.u32[0] > 1uLL)
        {
          v6 = 0x9DDFEA08EB382D69 * v172;
          if ((void *)v173 >= v497[1])
            v6 = v173 % (unint64_t)v497[1];
        }
        else
        {
          v6 = v173 & ((unint64_t)v497[1] - 1);
        }
        v193 = (_QWORD *)*((_QWORD *)v497[0] + v6);
        if (v193)
        {
          v194 = (_QWORD *)*v193;
          if (v194)
          {
            if (v175.u32[0] < 2uLL)
            {
              while (1)
              {
                v196 = v194[1];
                if (v196 == v173)
                {
                  if (v194[2] == v169)
                    goto LABEL_357;
                }
                else if ((v196 & ((uint64_t)v497[1] - 1)) != v6)
                {
                  goto LABEL_297;
                }
                v194 = (_QWORD *)*v194;
                if (!v194)
                  goto LABEL_297;
              }
            }
            do
            {
              v195 = v194[1];
              if (v195 == v173)
              {
                if (v194[2] == v169)
                {
LABEL_357:
                  v137 = (char *)a3;
                  v6 = v481;
                  goto LABEL_245;
                }
              }
              else
              {
                if ((void *)v195 >= v497[1])
                  v195 %= (unint64_t)v497[1];
                if (v195 != v6)
                  break;
              }
              v194 = (_QWORD *)*v194;
            }
            while (v194);
          }
        }
      }
LABEL_297:
      v197 = operator new(0x18uLL);
      *v197 = 0;
      v197[1] = v173;
      v197[2] = v169;
      v198 = (float)(unint64_t)(*((_QWORD *)&v498 + 1) + 1);
      if (v174 && (float)(v499 * (float)v174) >= v198)
      {
LABEL_347:
        v219 = v497[0];
        v220 = (_QWORD *)*((_QWORD *)v497[0] + v6);
        v137 = (char *)a3;
        if (v220)
        {
          *v197 = *v220;
          v6 = v481;
        }
        else
        {
          *v197 = v498;
          *(_QWORD *)&v498 = v197;
          v219[v6] = &v498;
          v6 = v481;
          if (!*v197)
          {
LABEL_356:
            ++*((_QWORD *)&v498 + 1);
            v500 += *(_QWORD *)(v169 + 24) - *(_QWORD *)(v169 + 16);
            goto LABEL_245;
          }
          v221 = *(_QWORD *)(*v197 + 8);
          if ((v174 & (v174 - 1)) != 0)
          {
            if (v221 >= v174)
              v221 %= v174;
          }
          else
          {
            v221 &= v174 - 1;
          }
          v220 = (char *)v497[0] + 8 * v221;
        }
        *v220 = v197;
        goto LABEL_356;
      }
      v199 = (v174 & (v174 - 1)) != 0;
      if (v174 < 3)
        v199 = 1;
      v200 = v199 | (2 * v174);
      v201 = vcvtps_u32_f32(v198 / v499);
      if (v200 <= v201)
        v202 = v201;
      else
        v202 = v200;
      if (v202 == 1)
      {
        v202 = 2;
      }
      else if ((v202 & (v202 - 1)) != 0)
      {
        v202 = std::__next_prime(v202);
        v174 = (unint64_t)v497[1];
      }
      if (v202 <= v174)
      {
        if (v202 >= v174)
          goto LABEL_334;
        v213 = vcvtps_u32_f32((float)*((unint64_t *)&v498 + 1) / v499);
        if (v174 < 3 || (v214 = (uint8x8_t)vcnt_s8((int8x8_t)v174), v214.i16[0] = vaddlv_u8(v214), v214.u32[0] > 1uLL))
        {
          v213 = std::__next_prime(v213);
        }
        else
        {
          v215 = 1 << -(char)__clz(v213 - 1);
          if (v213 >= 2)
            v213 = v215;
        }
        if (v202 <= v213)
          v202 = v213;
        if (v202 >= v174)
        {
          v174 = (unint64_t)v497[1];
LABEL_334:
          if ((v174 & (v174 - 1)) != 0)
          {
            if (v173 >= v174)
              v6 = v173 % v174;
            else
              v6 = v173;
          }
          else
          {
            v6 = (v174 - 1) & v173;
          }
          goto LABEL_347;
        }
        if (!v202)
        {
          v222 = v497[0];
          v497[0] = 0;
          if (v222)
            operator delete(v222);
          v174 = 0;
          v497[1] = 0;
          goto LABEL_334;
        }
      }
      if (!(v202 >> 61))
      {
        v203 = operator new(8 * v202);
        v204 = v497[0];
        v497[0] = v203;
        if (v204)
          operator delete(v204);
        v205 = 0;
        v497[1] = (void *)v202;
        do
          *((_QWORD *)v497[0] + v205++) = 0;
        while (v202 != v205);
        v206 = (_QWORD **)v498;
        if (!(_QWORD)v498)
          goto LABEL_333;
        v207 = *(_QWORD *)(v498 + 8);
        v208 = v202 - 1;
        if ((v202 & (v202 - 1)) == 0)
        {
          v209 = v207 & v208;
          *((_QWORD *)v497[0] + v209) = &v498;
          for (j = *v206; *v206; j = *v206)
          {
            v211 = j[1] & v208;
            if (v211 == v209)
            {
              v206 = (_QWORD **)j;
            }
            else if (*((_QWORD *)v497[0] + v211))
            {
              *v206 = (_QWORD *)*j;
              v212 = 8 * v211;
              *j = **(_QWORD **)((char *)v497[0] + v212);
              **(_QWORD **)((char *)v497[0] + v212) = j;
            }
            else
            {
              *((_QWORD *)v497[0] + v211) = v206;
              v206 = (_QWORD **)j;
              v209 = v211;
            }
          }
LABEL_333:
          v174 = v202;
          goto LABEL_334;
        }
        if (v207 >= v202)
          v207 %= v202;
        *((_QWORD *)v497[0] + v207) = &v498;
        v216 = *v206;
        if (!*v206)
          goto LABEL_333;
        while (1)
        {
          v218 = v216[1];
          if (v218 >= v202)
            v218 %= v202;
          if (v218 != v207)
          {
            if (!*((_QWORD *)v497[0] + v218))
            {
              *((_QWORD *)v497[0] + v218) = v206;
              goto LABEL_338;
            }
            *v206 = (_QWORD *)*v216;
            v217 = 8 * v218;
            *v216 = **(_QWORD **)((char *)v497[0] + v217);
            **(_QWORD **)((char *)v497[0] + v217) = v216;
            v216 = v206;
          }
          v218 = v207;
LABEL_338:
          v206 = (_QWORD **)v216;
          v216 = (_QWORD *)*v216;
          v207 = v218;
          if (!v216)
            goto LABEL_333;
        }
      }
LABEL_685:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    if (v6 < (unint64_t)v483)
    {
      *(_QWORD *)v6 = v165;
      v6 += 8;
      goto LABEL_245;
    }
    v176 = v6 - (_QWORD)v8;
    v177 = (uint64_t)(v6 - (_QWORD)v8) >> 3;
    v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 61)
      abort();
    if ((v483 - (char *)v8) >> 2 > v178)
      v178 = (v483 - (char *)v8) >> 2;
    if ((unint64_t)(v483 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
      v179 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v179 = v178;
    if (v179)
    {
      if (v179 >> 61)
        goto LABEL_685;
      v180 = (char *)operator new(8 * v179);
      v181 = (unint64_t *)v6;
    }
    else
    {
      v181 = (unint64_t *)v6;
      v180 = 0;
    }
    v182 = (unint64_t *)&v180[8 * v177];
    *v182 = v165;
    v6 = (unint64_t)(v182 + 1);
    if (v181 != v8)
    {
      v183 = v181;
      v184 = (char *)(v181 - 1);
      v185 = (char *)(v181 - 1) - (char *)v8;
      if (v185 < 0x168
        || &v180[v176 - 8 - (v185 & 0xFFFFFFFFFFFFFFF8)] > &v180[v176 - 8]
        || &v184[-(v185 & 0xFFFFFFFFFFFFFFF8)] > v184
        || (unint64_t)(v184 - &v180[v176] + 8) < 0x20)
      {
        v186 = v183;
      }
      else
      {
        v188 = (v185 >> 3) + 1;
        v186 = &v183[-(v188 & 0x3FFFFFFFFFFFFFFCLL)];
        v189 = &v180[8 * v177 - 16];
        v190 = (__int128 *)(v183 - 2);
        v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v192 = *v190;
          *((_OWORD *)v189 - 1) = *(v190 - 1);
          *(_OWORD *)v189 = v192;
          v189 -= 32;
          v190 -= 2;
          v191 -= 4;
        }
        while (v191);
        v182 -= v188 & 0x3FFFFFFFFFFFFFFCLL;
        if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_270;
      }
      do
      {
        v187 = *--v186;
        *--v182 = v187;
      }
      while (v186 != v8);
    }
LABEL_270:
    v483 = &v180[8 * v179];
    if (v8)
      operator delete(v8);
    v8 = v182;
    v137 = (char *)a3;
LABEL_245:
    operator delete(v164);
    v159 = (_QWORD *)*v159;
  }
  while (v159);
  v12 = a4;
  v160 = &xmmword_19FFB3000;
  v480 = (char *)v6;
  if (!v489)
  {
LABEL_372:
    v224 = 0;
    v506[0] = 0;
    v518 = 0;
    goto LABEL_568;
  }
LABEL_371:
  if (*((_QWORD *)&v498 + 1) <= 1uLL)
    goto LABEL_372;
  if (*((_QWORD *)&v498 + 1) >> 59)
LABEL_689:
    abort();
  v225 = 32 * *((_QWORD *)&v498 + 1);
  v226 = (char *)operator new(32 * *((_QWORD *)&v498 + 1));
  v227 = vdupq_n_s64((unint64_t)v226);
  v228 = &v226[v225];
  v229 = (int8x16_t)v160[71];
  v230 = (float32x2_t)0x80000000800000;
  v231 = (_QWORD *)v498;
  do
  {
    v484 = v227;
    v234 = (uint64_t *)v231[2];
    v235 = *(int8x16_t *)((char *)v234 + 36);
    v236 = *(float32x2_t *)((char *)v234 + 52);
    v237 = v234 + 2;
    v238 = *v234;
    if (v226 >= v228)
    {
      v242 = (char *)v484.i64[1];
      v243 = (char *)v484.i64[0];
      v244 = (v484.i64[1] - v484.i64[0]) >> 5;
      v245 = v244 + 1;
      if ((unint64_t)(v244 + 1) >> 59)
        goto LABEL_689;
      v476 = v235;
      v477 = v229;
      if ((uint64_t)&v228[-v484.i64[0]] >> 4 > v245)
        v245 = (uint64_t)&v228[-v484.i64[0]] >> 4;
      if ((unint64_t)&v228[-v484.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
        v245 = 0x7FFFFFFFFFFFFFFLL;
      if (v245 >> 59)
        goto LABEL_685;
      v246 = 32 * v245;
      v247 = (char *)operator new(32 * v245);
      v248 = &v247[32 * v244];
      *(_OWORD *)v248 = *v237;
      *((_QWORD *)v248 + 2) = *(_QWORD *)(v238 + 96);
      v249 = *(_QWORD *)(v238 + 104);
      *((_QWORD *)v248 + 3) = v249;
      if (v249)
      {
        v250 = (unint64_t *)(v249 + 8);
        do
          v251 = __ldxr(v250);
        while (__stxr(v251 + 1, v250));
      }
      v226 = v248 + 32;
      v252 = v484.i64[1];
      if (v484.i64[1] == v484.i64[0])
      {
        v484.i64[0] = (uint64_t)v248;
      }
      else
      {
        do
        {
          v253 = v248 - 32;
          *((_OWORD *)v248 - 2) = *(_OWORD *)(v252 - 32);
          *((_OWORD *)v248 - 1) = *(_OWORD *)(v252 - 16);
          *(_QWORD *)(v252 - 16) = 0;
          *(_QWORD *)(v252 - 8) = 0;
          v252 -= 32;
          v248 -= 32;
        }
        while (v252 != v484.i64[0]);
        v484.i64[0] = (uint64_t)v253;
        do
        {
          v254 = (std::__shared_weak_count *)*((_QWORD *)v242 - 1);
          if (v254)
          {
            v255 = (unint64_t *)&v254->__shared_owners_;
            do
              v256 = __ldaxr(v255);
            while (__stlxr(v256 - 1, v255));
            if (!v256)
            {
              ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
              std::__shared_weak_count::__release_weak(v254);
            }
          }
          v242 -= 32;
        }
        while (v242 != v243);
        v242 = v243;
      }
      v228 = &v247[v246];
      v12 = a4;
      v6 = (unint64_t)v480;
      if (v242)
        operator delete(v242);
      v235 = v476;
      v229 = v477;
    }
    else
    {
      *(_OWORD *)v226 = *v237;
      *((_QWORD *)v226 + 2) = *(_QWORD *)(v238 + 96);
      v239 = *(_QWORD *)(v238 + 104);
      *((_QWORD *)v226 + 3) = v239;
      if (v239)
      {
        v240 = (unint64_t *)(v239 + 8);
        do
          v241 = __ldxr(v240);
        while (__stxr(v241 + 1, v240));
      }
      v226 += 32;
      v12 = a4;
    }
    v232 = (float32x4_t)v235;
    v232.i32[3] = v229.i32[3];
    v233 = (float32x4_t)v229;
    v233.i32[3] = v235.i32[3];
    v229 = vbslq_s8((int8x16_t)vcgtq_f32(v233, v232), v235, v229);
    v230 = vmaxnm_f32(v230, v236);
    v227.i64[0] = v484.i64[0];
    v227.i64[1] = (uint64_t)v226;
    v231 = (_QWORD *)*v231;
  }
  while (v231);
  v257 = *(_BYTE **)(v498 + 16);
  LOBYTE(v519) = v257[61];
  *((_QWORD *)&v519 + 1) = 0;
  *(_QWORD *)v520 = v500;
  *(int8x16_t *)&v520[8] = v229;
  *(float32x2_t *)&v520[24] = v230;
  v521 = *(_QWORD *)(*(_QWORD *)v257 + 56);
  v522 = v489;
  v523 = v490;
  if (v490)
  {
    v258 = (unint64_t *)&v490->__shared_owners_;
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 1, v258));
  }
  v524 = v491;
  v137 = (char *)a3;
  if (v492)
  {
    v260 = (unint64_t *)&v492->__shared_owners_;
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
  }
  if (v494)
  {
    v262 = (unint64_t *)&v494->__shared_owners_;
    do
      v263 = __ldxr(v262);
    while (__stxr(v263 + 1, v262));
  }
  if (v496)
  {
    v264 = (unint64_t *)&v496->__shared_owners_;
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
  }
  *(_OWORD *)v506 = v519;
  *(_OWORD *)&v506[16] = *(_OWORD *)v520;
  *(_OWORD *)&v506[32] = *(_OWORD *)&v520[16];
  v507 = v521;
  v508 = v489;
  v522 = 0;
  v523 = 0;
  v509 = v490;
  v510 = v491;
  v524 = 0;
  v525 = 0;
  v511 = v492;
  v512 = v493;
  v526 = 0;
  v527 = 0;
  v513 = v494;
  v514 = v495;
  v528 = 0;
  v529 = 0;
  v516 = v227;
  v515 = v496;
  v517 = v228;
  v531 = 0;
  v530 = 0;
  v532 = 0;
  v518 = 1;
  md::MeshBatcher::BuildContext::~BuildContext((md::MeshBatcher::BuildContext *)&v519);
  if (!v518)
  {
    v224 = 0;
    goto LABEL_568;
  }
  if (!v508 || v516.i64[1] - v516.i64[0] < 0x40uLL)
  {
    v224 = 0;
    goto LABEL_567;
  }
  prime = *(_QWORD *)&v506[8];
  v10 = *(_QWORD *)&v506[16];
  v266 = *(_QWORD *)&v506[16] - *(_QWORD *)&v506[8];
  v137 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v137 + 1) = 0;
  v7 = (uint64_t)(v137 + 8);
  *((_QWORD *)v137 + 2) = 0;
  *(_QWORD *)v137 = &off_1E42E5228;
  *((_QWORD *)v137 + 3) = &off_1E42B5748;
  v472 = v137 + 24;
  *((_QWORD *)v137 + 4) = 2;
  *((_DWORD *)v137 + 10) = 257;
  *((_QWORD *)v137 + 6) = 0;
  *((_QWORD *)v137 + 7) = 0;
  *((_QWORD *)v137 + 8) = 0;
  *((_QWORD *)v137 + 9) = 2 * v266;
  v267 = 0uLL;
  *((_OWORD *)v137 + 5) = 0u;
  *((_OWORD *)v137 + 6) = 0u;
  *((_QWORD *)v137 + 14) = 0;
  v5 = (unint64_t)&unk_1ECE44000;
  v475 = (std::__shared_weak_count *)v137;
  v469 = v10;
  v470 = prime;
  if ((v268 & 1) == 0)
  {
LABEL_693:
    v267 = 0uLL;
    if (v454)
    {
      v455 = operator new();
      *(_QWORD *)(v455 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v455 + 24) = "GeoGL";
      *(_OWORD *)(v455 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v455 = &off_1E42B5668;
      *(_QWORD *)(v455 + 8) = "GeoGL";
      *(_OWORD *)(v455 + 72) = 0u;
      *(_OWORD *)(v455 + 88) = 0u;
      *(_OWORD *)(v455 + 104) = 0u;
      *(_OWORD *)(v455 + 120) = 0u;
      *(_OWORD *)(v455 + 136) = 0u;
      *(_OWORD *)(v455 + 152) = 0u;
      *(_OWORD *)(v455 + 168) = 0u;
      *(_OWORD *)(v455 + 184) = 0u;
      *(_OWORD *)(v455 + 200) = 0u;
      *(_OWORD *)(v455 + 216) = 0u;
      *(_OWORD *)(v455 + 232) = 0u;
      *(_QWORD *)(v455 + 248) = 0;
      *(_OWORD *)(v455 + 56) = 0u;
      v456 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v455 + 56), 0);
      if ((_DWORD)v456)
        geo::read_write_lock::logFailure(v456, (uint64_t)"initialization", v457);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v455 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v455 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      *(_QWORD *)(v5 + 3960) = v455;
      v6 = (unint64_t)v480;
      v137 = (char *)v475;
      v10 = v469;
      prime = v470;
      v267 = 0uLL;
    }
  }
  v269 = 0;
  *((_QWORD *)v137 + 15) = *(_QWORD *)(v5 + 3960);
  *((_QWORD *)v137 + 16) = 0;
  *((_OWORD *)v137 + 11) = v267;
  *((_OWORD *)v137 + 12) = v267;
  *((_QWORD *)v137 + 26) = 0;
  *((_QWORD *)v137 + 27) = -1;
  *((_OWORD *)v137 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v137 + 10) = v267;
  *((_DWORD *)v137 + 34) = 0;
  *((_QWORD *)v137 + 28) = &unk_1E42BD118;
  *((_QWORD *)v137 + 29) = "Mesh Batch Index Data";
  *((_QWORD *)v137 + 3) = &off_1E42BD0F8;
  *((_QWORD *)v137 + 4) = 2;
  *((_DWORD *)v137 + 60) = 0;
  v471 = 2 * prime;
  v270 = a2;
  if (2 * v10 != 2 * prime)
  {
    if (!a2 || v137[41] == 2)
    {
      v269 = *((_QWORD *)v137 + 12) + v471;
    }
    else
    {
      v269 = (*(uint64_t (**)(uint64_t, char *, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v472, v471, 2 * v10, 1, 1);
      v270 = a2;
    }
  }
  v468 = 2 * v10;
  v485 = (uint64_t *)v516.i64[1];
  v271 = (uint64_t *)v516.i64[0];
  if (v516.i64[0] != v516.i64[1])
  {
    v272 = 0;
    do
    {
      v274 = v271[1];
      v273 = v271[2];
      v275 = *v271;
      v276 = *(_QWORD *)(v273 + 8);
      if ((*(_BYTE *)(v273 + 16) & 2) == 0)
      {
        v277 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
        if (v277 != -1)
        {
          *(_QWORD *)&v519 = &v533;
          *(_QWORD *)v534 = &v519;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v534, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
          v270 = a2;
        }
      }
      v278 = v276 * v275;
      v279 = v276 * v274;
      if (v276 * v274 == v278)
      {
        v280 = 0;
        v6 = (unint64_t)v480;
      }
      else
      {
        v6 = (unint64_t)v480;
        if (v270 && *(_BYTE *)(v273 + 17) != 2)
        {
          v280 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v270 + 56))(a2, v273, v278, v279, 0, 1);
          v270 = a2;
        }
        else
        {
          v280 = *(_QWORD *)(v273 + 72) + v278;
        }
      }
      v282 = *v271;
      v281 = v271[1];
      v283 = v281 - *v271;
      if (v281 == *v271)
        goto LABEL_450;
      if (v283 > 0xF && (unint64_t)(2 * v272 + v269 - v280) >= 0x20)
      {
        v284 = v283 & 0xFFFFFFFFFFFFFFF0;
        v290 = (__int128 *)(v280 + 16);
        v291 = (_OWORD *)(v269 + 16 + 2 * v272);
        v292 = v283 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v293 = *v290;
          *(v291 - 1) = *(v290 - 1);
          *v291 = v293;
          v290 += 2;
          v291 += 2;
          v292 -= 16;
        }
        while (v292);
        v272 += v284;
        if (v283 == v284)
          goto LABEL_450;
      }
      else
      {
        v284 = 0;
      }
      v285 = v284 + v282 - v281;
      v286 = (__int16 *)(v280 + 2 * v284);
      v287 = v272;
      do
      {
        v288 = *v286++;
        v272 = v287 + 1;
        *(_WORD *)(v269 + 2 * v287++) = v288;
      }
      while (!__CFADD__(v285++, 1));
LABEL_450:
      if (v280 && v279 != v278 && v270 && *(_BYTE *)(v273 + 17) != 2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v270 + 64))(a2);
        v270 = a2;
      }
      v271 += 4;
    }
    while (v271 != v485);
  }
  v294 = v508;
  v295 = v509;
  if (v509)
  {
    v296 = (unint64_t *)&v509->__shared_owners_;
    do
      v297 = __ldxr(v296);
    while (__stxr(v297 + 1, v296));
  }
  v298 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v298->__shared_owners_ = 0;
  v299 = (unint64_t *)&v298->__shared_owners_;
  v298->__shared_weak_owners_ = 0;
  v298->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4428;
  v298[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BBC08;
  v478 = v298 + 1;
  v300 = v507;
  v298[2].__shared_owners_ = 0;
  v298[2].__shared_weak_owners_ = 0;
  LODWORD(v298[3].__vftable) = 0;
  v298[1].__shared_owners_ = (uint64_t)"Batched Mesh";
  v298[1].__shared_weak_owners_ = (uint64_t)&unk_1E42BBC28;
  v298[2].__vftable = 0;
  v298[3].__shared_owners_ = v300;
  v298[3].__shared_weak_owners_ = 0;
  v298[4].__vftable = 0;
  v298[4].__shared_owners_ = 0;
  v302 = v475;
  v486 = v298;
  {
    v459 = operator new();
    *(_QWORD *)(v459 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v459 + 24) = "GeoGL";
    *(_OWORD *)(v459 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v459 = &off_1E42B5668;
    *(_QWORD *)(v459 + 8) = "GeoGL";
    *(_OWORD *)(v459 + 72) = 0u;
    *(_OWORD *)(v459 + 88) = 0u;
    *(_OWORD *)(v459 + 104) = 0u;
    *(_OWORD *)(v459 + 120) = 0u;
    *(_OWORD *)(v459 + 136) = 0u;
    *(_OWORD *)(v459 + 152) = 0u;
    *(_OWORD *)(v459 + 168) = 0u;
    *(_OWORD *)(v459 + 184) = 0u;
    *(_OWORD *)(v459 + 200) = 0u;
    *(_OWORD *)(v459 + 216) = 0u;
    *(_OWORD *)(v459 + 232) = 0u;
    *(_QWORD *)(v459 + 248) = 0;
    *(_OWORD *)(v459 + 56) = 0u;
    v460 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v459 + 56), 0);
    if ((_DWORD)v460)
      geo::read_write_lock::logFailure(v460, (uint64_t)"initialization", v461);
    v462 = malloc_create_zone(0, 0);
    *(_QWORD *)(v459 + 48) = v462;
    malloc_set_zone_name(v462, "GeoGL");
    *(_QWORD *)(v459 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v459;
    v6 = (unint64_t)v480;
    v302 = v475;
    v298 = v486;
  }
  v303 = ggl::Allocator::instance(void)::alloc;
  v298[4].__shared_weak_owners_ = ggl::Allocator::instance(void)::alloc;
  v304 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v303 + 16))(v303, 16, 8);
  v298[3].__shared_weak_owners_ = (uint64_t)v304;
  v298[4].__vftable = (std::__shared_weak_count_vtbl *)v304;
  v298[4].__shared_owners_ = (uint64_t)(v304 + 2);
  if (v304)
  {
    *v304 = v294;
    v304[1] = v295;
    if (v295)
    {
      v305 = (unint64_t *)&v295->__shared_owners_;
      do
        v306 = __ldxr(v305);
      while (__stxr(v306 + 1, v305));
    }
  }
  v298[4].__vftable = (std::__shared_weak_count_vtbl *)(v304 + 2);
  v298[5].__vftable = (std::__shared_weak_count_vtbl *)v472;
  v298[5].__shared_owners_ = (uint64_t)v302;
  do
    v307 = __ldxr((unint64_t *)v7);
  while (__stxr(v307 + 1, (unint64_t *)v7));
  v298[6].__vftable = 0;
  v308 = (uint64_t **)&v298[6];
  {
    v463 = operator new();
    *(_QWORD *)(v463 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v463 + 24) = "GeoGL";
    *(_OWORD *)(v463 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v463 = &off_1E42B5668;
    *(_QWORD *)(v463 + 8) = "GeoGL";
    *(_OWORD *)(v463 + 72) = 0u;
    *(_OWORD *)(v463 + 88) = 0u;
    *(_OWORD *)(v463 + 104) = 0u;
    *(_OWORD *)(v463 + 120) = 0u;
    *(_OWORD *)(v463 + 136) = 0u;
    *(_OWORD *)(v463 + 152) = 0u;
    *(_OWORD *)(v463 + 168) = 0u;
    *(_OWORD *)(v463 + 184) = 0u;
    *(_OWORD *)(v463 + 200) = 0u;
    *(_OWORD *)(v463 + 216) = 0u;
    *(_OWORD *)(v463 + 232) = 0u;
    *(_QWORD *)(v463 + 248) = 0;
    *(_OWORD *)(v463 + 56) = 0u;
    v464 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v463 + 56), 0);
    if ((_DWORD)v464)
      geo::read_write_lock::logFailure(v464, (uint64_t)"initialization", v465);
    v466 = malloc_create_zone(0, 0);
    *(_QWORD *)(v463 + 48) = v466;
    malloc_set_zone_name(v466, "GeoGL");
    *(_QWORD *)(v463 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v463;
    v6 = (unint64_t)v480;
    v298 = v486;
  }
  v298[6].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
  v298[6].__shared_weak_owners_ = 0;
  v298[5].__shared_weak_owners_ = (uint64_t)v308;
  if (v295)
  {
    v310 = (unint64_t *)&v295->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  v312 = v512;
  v313 = v513;
  if (v513)
  {
    v314 = (unint64_t *)&v513->__shared_owners_;
    do
      v315 = __ldxr(v314);
    while (__stxr(v315 + 1, v314));
  }
  if (v312)
  {
    v316 = *v308;
    v317 = v308;
    v318 = v308;
    if (*v308)
    {
      while (1)
      {
        while (1)
        {
          v318 = (uint64_t **)v316;
          v319 = v316[4];
          if (v319 < 2)
            break;
          v316 = *v318;
          v317 = v318;
          if (!*v318)
            goto LABEL_486;
        }
        if (v319)
          break;
        v316 = v318[1];
        if (!v316)
        {
          v317 = v318 + 1;
          goto LABEL_486;
        }
      }
    }
    else
    {
LABEL_486:
      v467 = v312;
      v320 = (uint64_t *)v318;
      v318 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486[6].__shared_owners_
                                                                              + 16))(v486[6].__shared_owners_, 56, 8);
      v318[5] = 0;
      v318[6] = 0;
      v318[4] = (uint64_t *)1;
      *v318 = 0;
      v318[1] = 0;
      v318[2] = v320;
      *v317 = (uint64_t *)v318;
      v321 = *(_QWORD *)v486[5].__shared_weak_owners_;
      v322 = (uint64_t *)v318;
      if (v321)
      {
        v486[5].__shared_weak_owners_ = v321;
        v322 = *v317;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v486[6].__vftable, v322);
      ++v486[6].__shared_weak_owners_;
      v312 = v467;
    }
    v6 = (unint64_t)v480;
    if (v313)
    {
      v323 = (unint64_t *)&v313->__shared_owners_;
      do
        v324 = __ldxr(v323);
      while (__stxr(v324 + 1, v323));
    }
    v325 = (std::__shared_weak_count *)v318[6];
    v318[5] = v312;
    v318[6] = (uint64_t *)v313;
    if (v325)
    {
      v326 = (unint64_t *)&v325->__shared_owners_;
      do
        v327 = __ldaxr(v326);
      while (__stlxr(v327 - 1, v326));
      if (!v327)
      {
        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
        std::__shared_weak_count::__release_weak(v325);
      }
    }
  }
  if (v313)
  {
    v328 = (unint64_t *)&v313->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v330 = v510;
  v331 = v511;
  if (v511)
  {
    v332 = (unint64_t *)&v511->__shared_owners_;
    do
      v333 = __ldxr(v332);
    while (__stxr(v333 + 1, v332));
  }
  if (v330)
  {
    v334 = *v308;
    v335 = v308;
    if (*v308)
    {
      while (1)
      {
        v335 = (uint64_t **)v334;
        if (!v334[4])
          break;
        v334 = (uint64_t *)*v334;
        if (!*v335)
          goto LABEL_509;
      }
      v336 = v334;
    }
    else
    {
LABEL_509:
      v336 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486[6].__shared_owners_ + 16))(v486[6].__shared_owners_, 56, 8);
      *v336 = 0;
      v336[1] = 0;
      v336[5] = 0;
      v336[6] = 0;
      v336[4] = 0;
      v336[2] = (uint64_t)v335;
      *v335 = v336;
      v337 = *(_QWORD *)v486[5].__shared_weak_owners_;
      v338 = v336;
      if (v337)
      {
        v486[5].__shared_weak_owners_ = v337;
        v338 = *v335;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v486[6].__vftable, v338);
      ++v486[6].__shared_weak_owners_;
    }
    v6 = (unint64_t)v480;
    if (v331)
    {
      v339 = (unint64_t *)&v331->__shared_owners_;
      do
        v340 = __ldxr(v339);
      while (__stxr(v340 + 1, v339));
    }
    v341 = (std::__shared_weak_count *)v336[6];
    v336[5] = v330;
    v336[6] = (uint64_t)v331;
    if (v341)
    {
      v342 = (unint64_t *)&v341->__shared_owners_;
      do
        v343 = __ldaxr(v342);
      while (__stlxr(v343 - 1, v342));
      if (!v343)
      {
        ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
        std::__shared_weak_count::__release_weak(v341);
      }
    }
  }
  if (v331)
  {
    v344 = (unint64_t *)&v331->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
  v346 = v514;
  v347 = v515;
  if (v515)
  {
    v348 = (unint64_t *)&v515->__shared_owners_;
    do
      v349 = __ldxr(v348);
    while (__stxr(v349 + 1, v348));
  }
  if (v346)
  {
    v350 = *v308;
    v351 = v308;
    if (*v308)
    {
      while (1)
      {
        while (1)
        {
          v351 = (uint64_t **)v350;
          v352 = v350[4];
          if (v352 < 3)
            break;
          v350 = *v351;
          v308 = v351;
          if (!*v351)
            goto LABEL_537;
        }
        if (v352 == 2)
          break;
        v350 = v351[1];
        if (!v350)
        {
          v308 = v351 + 1;
          goto LABEL_537;
        }
      }
    }
    else
    {
LABEL_537:
      v353 = (uint64_t *)v351;
      v351 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486[6].__shared_owners_
                                                                              + 16))(v486[6].__shared_owners_, 56, 8);
      v351[5] = 0;
      v351[6] = 0;
      v351[4] = (uint64_t *)2;
      *v351 = 0;
      v351[1] = 0;
      v351[2] = v353;
      *v308 = (uint64_t *)v351;
      v354 = *(_QWORD *)v486[5].__shared_weak_owners_;
      v355 = (uint64_t *)v351;
      if (v354)
      {
        v486[5].__shared_weak_owners_ = v354;
        v355 = *v308;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v486[6].__vftable, v355);
      ++v486[6].__shared_weak_owners_;
      v6 = (unint64_t)v480;
    }
    if (v347)
    {
      v356 = (unint64_t *)&v347->__shared_owners_;
      do
        v357 = __ldxr(v356);
      while (__stxr(v357 + 1, v356));
    }
    v358 = (std::__shared_weak_count *)v351[6];
    v351[5] = v346;
    v351[6] = (uint64_t *)v347;
    if (v358)
    {
      v359 = (unint64_t *)&v358->__shared_owners_;
      do
        v360 = __ldaxr(v359);
      while (__stlxr(v360 - 1, v359));
      if (!v360)
      {
        ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
        std::__shared_weak_count::__release_weak(v358);
      }
    }
  }
  v137 = (char *)a3;
  if (v347)
  {
    v361 = (unint64_t *)&v347->__shared_owners_;
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  v363 = operator new();
  v224 = v363;
  v364 = v506[0];
  *(_QWORD *)v363 = v478;
  *(_QWORD *)(v363 + 8) = v486;
  do
    v365 = __ldxr(v299);
  while (__stxr(v365 + 1, v299));
  *(_QWORD *)(v363 + 16) = v470;
  *(_QWORD *)(v363 + 24) = v469;
  *(_BYTE *)(v363 + 32) = 3;
  *(_OWORD *)(v363 + 36) = *(_OWORD *)&v506[24];
  *(_QWORD *)(v363 + 52) = *(_QWORD *)&v506[40];
  *(_BYTE *)(v363 + 60) = 0;
  *(_BYTE *)(v363 + 61) = v364;
  *(_QWORD *)(v363 + 64) = 0;
  *(_QWORD *)(v363 + 72) = 0;
  v366 = a2;
  do
    v367 = __ldaxr(v299);
  while (__stlxr(v367 - 1, v299));
  if (!v367)
  {
    ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
    std::__shared_weak_count::__release_weak(v486);
    v366 = a2;
  }
  v12 = a4;
  if (v269 && v468 != v471 && v366 && BYTE1(v475[1].__shared_weak_owners_) != 2)
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v366 + 64))(v366, v269, v472, v471, v468, 1, 1);
  do
    v368 = __ldaxr((unint64_t *)v7);
  while (__stlxr(v368 - 1, (unint64_t *)v7));
  if (!v368)
  {
    ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
    std::__shared_weak_count::__release_weak(v475);
  }
LABEL_567:
  md::MeshBatcher::BuildContext::~BuildContext((md::MeshBatcher::BuildContext *)v506);
LABEL_568:
  v369 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v224;
  if (v369)
  {
    v370 = *(std::__shared_weak_count **)(v369 + 72);
    if (v370)
    {
      v371 = (unint64_t *)&v370->__shared_owners_;
      do
        v372 = __ldaxr(v371);
      while (__stlxr(v372 - 1, v371));
      if (!v372)
      {
        ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
        std::__shared_weak_count::__release_weak(v370);
      }
    }
    v373 = *(std::__shared_weak_count **)(v369 + 8);
    if (v373)
    {
      v374 = (unint64_t *)&v373->__shared_owners_;
      do
        v375 = __ldaxr(v374);
      while (__stlxr(v375 - 1, v374));
      if (!v375)
      {
        ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
        std::__shared_weak_count::__release_weak(v373);
      }
    }
    MEMORY[0x1A1AF4E00](v369, 0x1020C408635837CLL);
    v224 = *(_QWORD *)(a1 + 280);
  }
  if (v224)
  {
    v376 = (char *)v504[1];
    if (v504[1] >= v505)
    {
      v384 = 0x6DB6DB6DB6DB6DB7 * (((char *)v504[1] - (char *)v504[0]) >> 5);
      if ((unint64_t)(v384 + 1) > 0x124924924924924)
        abort();
      v385 = 0xDB6DB6DB6DB6DB6ELL * ((v505 - (char *)v504[0]) >> 5);
      if (v385 <= v384 + 1)
        v385 = v384 + 1;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v505 - (char *)v504[0]) >> 5)) >= 0x92492492492492)
        v386 = 0x124924924924924;
      else
        v386 = v385;
      if (v386)
      {
        if (v386 > 0x124924924924924)
          goto LABEL_685;
        v387 = operator new(224 * v386);
      }
      else
      {
        v387 = 0;
      }
      v392 = &v387[28 * v384];
      v393 = *(_QWORD *)v137;
      v394 = (std::__shared_weak_count *)*((_QWORD *)v137 + 1);
      if (v394)
      {
        v395 = (unint64_t *)&v394->__shared_owners_;
        do
          v396 = __ldxr(v395);
        while (__stxr(v396 + 1, v395));
      }
      *v392 = &off_1E428F838;
      v397 = (char *)&v387[28 * v384];
      *((_QWORD *)v397 + 2) = 0;
      v398 = v397 + 16;
      *(v398 - 8) = 0;
      *((_QWORD *)v398 + 1) = 0;
      *((_QWORD *)v398 + 2) = v393;
      *((_QWORD *)v398 + 3) = v394;
      if (v394)
      {
        v399 = (unint64_t *)&v394->__shared_owners_;
        do
          v400 = __ldxr(v399);
        while (__stxr(v400 + 1, v399));
      }
      v401 = (char *)&v387[28 * v384];
      *(_QWORD *)(v401 + 92) = 0x80000000800000;
      v402 = v401 + 92;
      *(v402 - 44) = 0;
      *(v402 - 28) = 0;
      v403 = (char *)&v387[28 * v386];
      *((_OWORD *)v402 - 1) = xmmword_19FFB3470;
      *(v402 - 20) = 1;
      v402[8] = 0;
      v402[32] = 0;
      v402[36] = 0;
      v402[48] = 0;
      *((_DWORD *)v402 + 13) = 65537;
      *((_WORD *)v402 + 28) = 0;
      v402[60] = 0;
      v402[84] = 0;
      v402[92] = 0;
      v402[96] = 0;
      *((_WORD *)v402 + 50) = 0;
      v402[104] = 0;
      v402[108] = 0;
      do
        v404 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
      while (__stlxr(v404 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
      *(_QWORD *)(v402 + 116) = v404;
      v387[28 * v384 + 27] = v224;
      *(_OWORD *)v398 = *(_OWORD *)(v224 + 16);
      *((int8x16_t *)v402 - 1) = v482;
      *(float32x2_t *)v402 = v11;
      if (v394)
      {
        v405 = (unint64_t *)&v394->__shared_owners_;
        do
          v406 = __ldaxr(v405);
        while (__stlxr(v406 - 1, v405));
        if (!v406)
        {
          ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
          std::__shared_weak_count::__release_weak(v394);
        }
      }
      v391 = v392 + 28;
      v407 = (char *)v504[0];
      v408 = (char *)v504[1];
      if (v504[1] == v504[0])
      {
        v504[0] = v392;
        v504[1] = v392 + 28;
        v505 = v403;
        v137 = (char *)a3;
        v6 = (unint64_t)v480;
      }
      else
      {
        v409 = v392;
        do
        {
          *(v409 - 28) = &off_1E428F838;
          v409 -= 28;
          v411 = *(_OWORD *)(v408 - 216);
          v409[3] = *((_QWORD *)v408 - 25);
          *(_OWORD *)(v409 + 1) = v411;
          v409[4] = *((_QWORD *)v408 - 24);
          v412 = *((_QWORD *)v408 - 23);
          v409[5] = v412;
          if (v412)
          {
            v413 = (unint64_t *)(v412 + 8);
            do
              v414 = __ldxr(v413);
            while (__stxr(v414 + 1, v413));
          }
          v415 = *((_OWORD *)v408 - 11);
          v416 = *((_OWORD *)v408 - 9);
          *((_OWORD *)v392 - 10) = *((_OWORD *)v408 - 10);
          *((_OWORD *)v392 - 9) = v416;
          *((_OWORD *)v392 - 11) = v415;
          v417 = *((_OWORD *)v408 - 8);
          v418 = *((_OWORD *)v408 - 7);
          v419 = *((_OWORD *)v408 - 6);
          *(_QWORD *)((char *)v392 - 82) = *(_QWORD *)(v408 - 82);
          *((_OWORD *)v392 - 7) = v418;
          *((_OWORD *)v392 - 6) = v419;
          *((_OWORD *)v392 - 8) = v417;
          *((_BYTE *)v392 - 72) = 0;
          *((_BYTE *)v392 - 48) = 0;
          if (*(v408 - 48))
          {
            *(v392 - 9) = *((_QWORD *)v408 - 9);
            v420 = *((_QWORD *)v408 - 8);
            *(v392 - 8) = v420;
            if (v420)
            {
              v421 = (unint64_t *)(v420 + 8);
              do
                v422 = __ldxr(v421);
              while (__stxr(v422 + 1, v421));
            }
            *((_BYTE *)v392 - 56) = *(v408 - 56);
            *((_BYTE *)v392 - 48) = 1;
          }
          *(v392 - 5) = *((_QWORD *)v408 - 5);
          *((_WORD *)v392 - 16) = 0;
          if (*(v408 - 31))
          {
            *((_BYTE *)v392 - 32) = *(v408 - 32);
            *((_BYTE *)v392 - 31) = 1;
          }
          v410 = *(_OWORD *)(v408 - 28);
          *((_OWORD *)v392 - 1) = *((_OWORD *)v408 - 1);
          *(_OWORD *)((char *)v392 - 28) = v410;
          v408 -= 224;
          v392 = v409;
        }
        while (v408 != v407);
        v408 = (char *)v504[0];
        v423 = (char *)v504[1];
        v504[0] = v409;
        v504[1] = v391;
        v505 = v403;
        v137 = (char *)a3;
        if (v423 == v408)
        {
          v408 = v423;
          v6 = (unint64_t)v480;
        }
        else
        {
          v424 = v423 - 224;
          v425 = (void (***)(char *))(v423 - 224);
          v6 = (unint64_t)v480;
          do
          {
            v426 = *v425;
            v425 -= 28;
            (*v426)(v424);
            v118 = v424 == v408;
            v424 = (char *)v425;
          }
          while (!v118);
        }
      }
      if (v408)
        operator delete(v408);
    }
    else
    {
      v377 = *(_QWORD *)v137;
      v378 = (std::__shared_weak_count *)*((_QWORD *)v137 + 1);
      if (v378)
      {
        v379 = (unint64_t *)&v378->__shared_owners_;
        do
          v380 = __ldxr(v379);
        while (__stxr(v380 + 1, v379));
        *(_QWORD *)v376 = &off_1E428F838;
        v376[8] = 0;
        *((_QWORD *)v376 + 2) = 0;
        v381 = v376 + 16;
        *((_QWORD *)v376 + 3) = 0;
        *((_QWORD *)v376 + 4) = v377;
        *((_QWORD *)v376 + 5) = v378;
        v382 = (unint64_t *)&v378->__shared_owners_;
        do
          v383 = __ldxr(v382);
        while (__stxr(v383 + 1, v382));
      }
      else
      {
        *(_QWORD *)v504[1] = &off_1E428F838;
        v376[8] = 0;
        *((_QWORD *)v376 + 2) = 0;
        v381 = v376 + 16;
        *((_QWORD *)v376 + 3) = 0;
        *((_QWORD *)v376 + 4) = v377;
        *((_QWORD *)v376 + 5) = 0;
      }
      v376[48] = 0;
      v376[64] = 0;
      v376[72] = 1;
      *(_OWORD *)(v376 + 76) = xmmword_19FFB3470;
      *(_QWORD *)(v376 + 92) = 0x80000000800000;
      v376[100] = 0;
      v376[124] = 0;
      v376[128] = 0;
      v376[140] = 0;
      *((_DWORD *)v376 + 36) = 65537;
      *((_WORD *)v376 + 74) = 0;
      v376[152] = 0;
      v376[176] = 0;
      v376[184] = 0;
      v376[188] = 0;
      *((_WORD *)v376 + 96) = 0;
      v376[196] = 0;
      v376[200] = 0;
      do
        v388 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
      while (__stlxr(v388 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
      *((_QWORD *)v376 + 26) = v388;
      *((_QWORD *)v376 + 27) = v224;
      *v381 = *(_OWORD *)(v224 + 16);
      *(int8x16_t *)(v376 + 76) = v482;
      *(float32x2_t *)(v376 + 92) = v11;
      if (v378)
      {
        v389 = (unint64_t *)&v378->__shared_owners_;
        do
          v390 = __ldaxr(v389);
        while (__stlxr(v390 - 1, v389));
        if (!v390)
        {
          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
          std::__shared_weak_count::__release_weak(v378);
        }
      }
      v391 = v376 + 224;
    }
    v504[1] = v391;
  }
  if (v8 != (unint64_t *)v6)
  {
    v427 = (char *)v504[1];
    v428 = v8;
    do
    {
      v429 = *(uint64_t **)(v12 + 8 * *v428);
      *(_QWORD *)&v519 = v429;
      v534[0] = 0;
      if (v427 >= v505)
      {
        v427 = (char *)std::vector<md::MeshRenderable>::__emplace_back_slow_path<std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::components::MeshInstance *&>((uint64_t *)v504, *(_QWORD *)v137, *((std::__shared_weak_count **)v137 + 1), v534, (uint64_t **)&v519);
      }
      else
      {
        v430 = *((_QWORD *)v137 + 1);
        *(_QWORD *)v506 = *(_QWORD *)v137;
        *(_QWORD *)&v506[8] = v430;
        if (v430)
        {
          v431 = (unint64_t *)(v430 + 8);
          do
            v432 = __ldxr(v431);
          while (__stxr(v432 + 1, v431));
        }
        md::MeshRenderable::MeshRenderable((uint64_t)v427, v506, 0, v429);
        v433 = *(std::__shared_weak_count **)&v506[8];
        if (*(_QWORD *)&v506[8])
        {
          v434 = (unint64_t *)(*(_QWORD *)&v506[8] + 8);
          do
            v435 = __ldaxr(v434);
          while (__stlxr(v435 - 1, v434));
          if (!v435)
          {
            ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
            std::__shared_weak_count::__release_weak(v433);
          }
        }
        v427 += 224;
      }
      v504[1] = v427;
      ++v428;
    }
    while (v428 != (unint64_t *)v6);
  }
  md::MeshBatcher::~MeshBatcher((md::MeshBatcher *)&v489);
  if (v8)
    operator delete(v8);
LABEL_659:
  v436 = *(_OWORD *)v504;
  v437 = v505;
  v504[1] = 0;
  v505 = 0;
  v504[0] = 0;
  v438 = a1;
  if (*(_BYTE *)(a1 + 312))
  {
    v439 = (void **)(a1 + 288);
    v440 = *(void (****)(_QWORD))(a1 + 288);
    if (v440)
    {
      v488 = v436;
      v441 = *(void (****)(_QWORD))(a1 + 296);
      v442 = *(void **)(a1 + 288);
      if (v441 != v440)
      {
        v443 = v441 - 28;
        v444 = v441 - 28;
        do
        {
          v445 = *v444;
          v444 -= 28;
          (*v445)(v443);
          v118 = v443 == v440;
          v443 = v444;
        }
        while (!v118);
        v442 = *v439;
        v438 = a1;
      }
      *(_QWORD *)(v438 + 296) = v440;
      operator delete(v442);
      *v439 = 0;
      *(_QWORD *)(a1 + 296) = 0;
      *(_QWORD *)(a1 + 304) = 0;
      v436 = v488;
    }
    *(_OWORD *)(v438 + 288) = v436;
    *(_QWORD *)(v438 + 304) = v437;
    if (!*(_BYTE *)(v438 + 352))
      goto LABEL_669;
  }
  else
  {
    *(_OWORD *)(a1 + 288) = v436;
    *(_QWORD *)(a1 + 304) = v437;
    *(_BYTE *)(a1 + 312) = 1;
    if (!*(_BYTE *)(a1 + 352))
      goto LABEL_669;
  }
  *(_BYTE *)(v438 + 352) = 0;
LABEL_669:
  v446 = v502[0];
  if (v502[0])
  {
    do
    {
      v452 = (_QWORD *)*v446;
      v453 = (void *)v446[3];
      if (v453)
      {
        v446[4] = v453;
        operator delete(v453);
      }
      operator delete(v446);
      v446 = v452;
    }
    while (v452);
  }
  v447 = __p[0];
  __p[0] = 0;
  if (v447)
    operator delete(v447);
  v448 = (char *)v504[0];
  if (v504[0])
  {
    if (v504[1] != v504[0])
    {
      v449 = (char *)v504[1] - 224;
      v450 = (void (***)(char *))((char *)v504[1] - 224);
      do
      {
        v451 = *v450;
        v450 -= 28;
        (*v451)(v449);
        v118 = v449 == v448;
        v449 = (char *)v450;
      }
      while (!v118);
      v448 = (char *)v504[0];
    }
    operator delete(v448);
  }
}

void sub_19F140C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)&a43);
  std::vector<md::MeshRenderable>::~vector[abi:nn180100](&a49);
  _Unwind_Resume(a1);
}

uint64_t md::MeshRenderable::MeshRenderable(uint64_t a1, _QWORD *a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  int v33;
  __int128 v34;
  _DWORD v35[7];

  *(_QWORD *)a1 = &off_1E428F838;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 76) = xmmword_19FFB3470;
  *(_QWORD *)(a1 + 92) = 0x80000000800000;
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 65537;
  *(_WORD *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  do
    v9 = __ldaxr((unint64_t *)&md::MeshRenderable::generateId(void)::sId);
  while (__stlxr(v9 + 1, (unint64_t *)&md::MeshRenderable::generateId(void)::sId));
  *(_QWORD *)(a1 + 208) = v9;
  *(_QWORD *)(a1 + 216) = 0;
  if (a4)
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 216) = *a4;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 16);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a4 + 32);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a4 + 9);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 10);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a4 + 11);
    *(_DWORD *)(a1 + 88) = *((_DWORD *)a4 + 12);
    *(_DWORD *)(a1 + 92) = *((_DWORD *)a4 + 13);
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 14);
    v34 = 0u;
    memset(v35, 0, sizeof(v35));
    v33 = 1065353216;
    HIDWORD(v34) = 1065353216;
    v35[3] = 1065353216;
    if (!gm::Matrix<float,3,4>::isWithinEpsilon((float *)a4 + 15, (float *)&v33))
    {
      v11 = operator new(0x30uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_1E42DADE0;
      *((_DWORD *)v11 + 10) = 1;
      *((_BYTE *)v11 + 44) = 0;
      v12 = operator new(0xE0uLL);
      v12[1] = 0;
      v12[2] = 0;
      *v12 = &off_1E42DF450;
      v13 = ggl::BufferData::BufferData((uint64_t)(v12 + 3), qword_1EE54AD80, 3, 0, 6, 1);
      v12[3] = &off_1E42B6F08;
      v11[3] = v13;
      v11[4] = v12;
      v14 = *(std::__shared_weak_count **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v11 + 3;
      *(_QWORD *)(a1 + 40) = v11;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = *(_BYTE **)(a1 + 32);
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(*(_QWORD *)v17 + 48) - *(_QWORD *)(*(_QWORD *)v17 + 40);
      v20 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v21 = *(_QWORD *)(*(_QWORD *)v17 + 72);
      v22 = *((_DWORD *)a4 + 17);
      v23 = *((_DWORD *)a4 + 20);
      v24 = a4[9];
      v25 = *((_DWORD *)a4 + 23);
      v26 = *(uint64_t *)((char *)a4 + 84);
      v27 = *((_DWORD *)a4 + 26);
      v28 = a4[12];
      *(_QWORD *)v21 = *(uint64_t *)((char *)a4 + 60);
      *(_DWORD *)(v21 + 8) = v22;
      *(_DWORD *)(v21 + 12) = 0;
      *(_QWORD *)(v21 + 16) = v24;
      *(_DWORD *)(v21 + 24) = v23;
      *(_DWORD *)(v21 + 28) = 0;
      *(_QWORD *)(v21 + 32) = v26;
      *(_DWORD *)(v21 + 40) = v25;
      *(_DWORD *)(v21 + 44) = 0;
      v29 = v19 % v20;
      *(_QWORD *)(v21 + 48) = v28;
      *(_DWORD *)(v21 + 56) = v27;
      *(_DWORD *)(v21 + 60) = 1065353216;
      v17[20] = 0;
      v30 = v19 - v29;
      if (v19 != v29)
      {
        if (*(_QWORD *)(v18 + 64) > v30)
          v30 = *(_QWORD *)(v18 + 64);
        *(_QWORD *)(v18 + 56) = 0;
        *(_QWORD *)(v18 + 64) = v30;
      }
    }
    v31 = *(_OWORD *)(a4 + 1);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 24);
    *(_OWORD *)(a1 + 48) = v31;
  }
  return a1;
}

uint64_t md::PointLabelFeatureElement::PointLabelFeatureElement(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, char a6)
{
  md::LabelFeature *v7;
  __int128 *v8;
  unsigned __int8 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  uint64_t v19;
  md::LabelFeature *v20;
  uint64_t *v21;
  char v22;
  char v23;
  char v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (md::LabelFeature *)(a1 + 24);
  v8 = *(__int128 **)(*a3 + 192);
  if (*(__int128 **)(*a3 + 200) == v8)
  {
    if ((v9 & 1) != 0)
    {
      v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      v23 = a6;
      v24 = a4;
      v22 = a5;
      v20 = v7;
      v21 = a3;
      v19 = a2;
      v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      if (v18)
      {
        qword_1ECE2FD68 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1ECE2FD58 = 0u;
        dword_1ECE2FD70 = 2139095039;
        word_1ECE2FD74 = 256;
        byte_1ECE2FD76 = 1;
        v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      }
      a2 = v19;
      v7 = v20;
      a3 = v21;
      a5 = v22;
      a6 = v23;
      a4 = v24;
    }
  }
  v10 = *v8;
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v7 = v10;
  *(_OWORD *)(a1 + 48) = *(__int128 *)((char *)v8 + 24);
  v11 = *((_DWORD *)v8 + 10);
  *(_DWORD *)(a1 + 67) = *(_DWORD *)((char *)v8 + 43);
  *(_DWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 129) = a4;
  *(_DWORD *)(a1 + 130) = 255;
  *(_BYTE *)(a1 + 134) = a5;
  *(_BYTE *)(a1 + 135) = a6;
  *(_WORD *)(a1 + 136) = 1;
  *(_BYTE *)(a1 + 138) = 0;
  v12 = *a3;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(*a3 + 232);
  v13 = *(_DWORD *)(v12 + 216);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(v12 + 220);
  *(_DWORD *)(a1 + 96) = v13;
  v14 = *(_DWORD *)(*a3 + 224);
  LOBYTE(v12) = *(_BYTE *)(*a3 + 228);
  *(_BYTE *)(a1 + 108) = v12;
  *(_DWORD *)(a1 + 104) = v14;
  if ((_BYTE)v12)
  {
    *(float *)(a1 + 116) = md::LabelFeature::vectorFromAzimuth(v7, *(float *)(a1 + 104), (const md::LabelPoint *)*(unsigned __int8 *)(a2 + 392));
    *(_DWORD *)(a1 + 120) = v15;
    *(_DWORD *)(a1 + 124) = v16;
  }
  return a1;
}

uint64_t ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  std::__throw_bad_function_call[abi:nn180100]();
  return __22__VKPlatform_isIphone__block_invoke();
}

void sub_19F14117C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F1411D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::StyleSettingsObjectNode::~StyleSettingsObjectNode(char **this)
{
  *this = (char *)&off_1E429F8B0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(this[3]);
  JUMPOUT(0x1A1AF4E00);
}

{
  *this = (char *)&off_1E429F8B0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(this[3]);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(char *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void md::StyleSettingsValueNode::~StyleSettingsValueNode(md::StyleSettingsValueNode *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::StyleSettingsObjectNode::getValue<BOOL>(uint64_t a1, const void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;

  v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 16, a2);
  if ((uint64_t *)(a1 + 24) != v3)
  {
    v4 = v3[7];
    if (!*(_BYTE *)(v4 + 8))
    {
      v8 = *(_QWORD *)(v4 + 24);
      if (v8 == 5)
      {
        v9 = *(int **)(v4 + 16);
        v10 = *v9;
        v11 = *((unsigned __int8 *)v9 + 4);
        if (v10 == 1936482662 && v11 == 101)
        {
          v6 = 0;
          v5 = 1;
          return v6 | (v5 << 8);
        }
      }
      else if (v8 == 4 && **(_DWORD **)(v4 + 16) == 1702195828)
      {
        v5 = 1;
        v6 = 1;
        return v6 | (v5 << 8);
      }
    }
  }
  v5 = 0;
  v6 = 0;
  return v6 | (v5 << 8);
}

void md::DisplayOptions::readThermalOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  size_t v20;
  _DWORD *v21;
  uint64_t v22;
  size_t v23;
  _DWORD *v24;
  uint64_t v25;
  __int128 __dst;
  unint64_t v27;

  v2 = 0;
  v3 = a1 + 16;
  v4 = (uint64_t *)(a1 + 24);
  v5 = a2 + 8;
  do
  {
    v6 = md::DisplayOptions::readThermalOptions(md::StyleSettingsObjectNode const*,md::ThermalOptions *)::thermalLevelNames[v2];
    v7 = strlen(v6);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      p_dst = (__int128 *)operator new(v10 + 1);
      *((_QWORD *)&__dst + 1) = v8;
      v27 = v11 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_10:
      memmove(p_dst, v6, v8);
      goto LABEL_11;
    }
    HIBYTE(v27) = v7;
    p_dst = &__dst;
    if (v7)
      goto LABEL_10;
LABEL_11:
    *((_BYTE *)p_dst + v8) = 0;
    v12 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v3, (const void **)&__dst);
    if (v4 == v12)
    {
      v13 = 0;
      if (SHIBYTE(v27) < 0)
        goto LABEL_16;
    }
    else
    {
      if (*(_BYTE *)(v12[7] + 8) == 1)
        v13 = v12[7];
      else
        v13 = 0;
      if (SHIBYTE(v27) < 0)
LABEL_16:
        operator delete((void *)__dst);
    }
    if (!v13)
      goto LABEL_2;
    HIBYTE(v27) = 10;
    strcpy((char *)&__dst, "target-fps");
    v14 = v13 + 16;
    v15 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v13 + 16, (const void **)&__dst);
    v16 = (uint64_t *)(v13 + 24);
    if (v16 != v15)
    {
      v17 = v15[7];
      if (!*(_BYTE *)(v17 + 8))
      {
        v23 = *(_QWORD *)(v17 + 24);
        if (v23 == 4)
        {
          v24 = *(_DWORD **)(v17 + 16);
          if (*v24 != 1819047278)
          {
            v25 = md::StyleSettingsValueNode::value_as<int>(v24, 4uLL);
            if ((v25 & 0x100000000) != 0)
            {
LABEL_35:
              *(_DWORD *)(v5 - 8) = v25;
              *(_BYTE *)(v5 - 4) = 1;
            }
          }
        }
        else
        {
          v25 = md::StyleSettingsValueNode::value_as<int>(*(void **)(v17 + 16), v23);
          if ((v25 & 0x100000000) != 0)
            goto LABEL_35;
        }
      }
    }
    HIBYTE(v27) = 7;
    strcpy((char *)&__dst, "max-fps");
    v18 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v14, (const void **)&__dst);
    if (v16 != v18)
    {
      v19 = v18[7];
      if (!*(_BYTE *)(v19 + 8))
      {
        v20 = *(_QWORD *)(v19 + 24);
        if (v20 != 4)
        {
          v22 = md::StyleSettingsValueNode::value_as<int>(*(void **)(v19 + 16), v20);
          if ((v22 & 0x100000000) == 0)
            goto LABEL_2;
LABEL_33:
          *(_DWORD *)v5 = v22;
          *(_BYTE *)(v5 + 4) = 1;
          goto LABEL_2;
        }
        v21 = *(_DWORD **)(v19 + 16);
        if (*v21 != 1819047278)
        {
          v22 = md::StyleSettingsValueNode::value_as<int>(v21, 4uLL);
          if ((v22 & 0x100000000) != 0)
            goto LABEL_33;
        }
      }
    }
LABEL_2:
    ++v2;
    v5 += 16;
  }
  while (v2 != 4);
}

void md::StyleSettingsParser::parseNode(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  uint64_t **v24;
  uint64_t **v25;
  void **v26;
  void *v27;
  _QWORD *v28;
  const void *v29;
  const void *v30;
  int v31;
  const void *v32;
  size_t v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  std::string *v38;
  uint64_t *v39;
  char v40;
  uint64_t **v41;
  void **v42;
  void *v43;
  _QWORD *v44;
  const void *v45;
  const void *v46;
  int v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  int v52;
  uint64_t *v53;
  void **v54;
  void *v55;
  _QWORD *v56;
  const void *v57;
  const void *v58;
  int v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  std::string *v65;
  uint64_t v66;
  int v67;
  void *__p[2];
  uint64_t v70;
  __int128 v71;
  char v72;
  char v73;
  _QWORD v74[2];

  v4 = a1;
  v5 = *a3;
  v6 = (unint64_t)a3[1];
  v7 = v6;
  if (!v6)
  {
LABEL_8:
    v12 = -1;
    goto LABEL_10;
  }
  v8 = a3[1];
  v9 = *a3;
  while (1)
  {
    v10 = *v9;
    if (v10 > 0x3F || ((1 << v10) & 0x100002600) == 0)
      break;
    ++v9;
    if (!--v8)
      goto LABEL_8;
  }
  v12 = v9 - v5;
  do
  {
LABEL_10:
    if (!v7)
    {
      v15 = 0;
      v16 = 0;
      goto LABEL_27;
    }
    v13 = v5[--v7];
  }
  while (v13 <= 0x3F && ((1 << v13) & 0x100002600) != 0);
  v15 = 0;
  if (v12 == -1)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v7 != -1)
    {
      if (v5[v12] == 123 && v5[v7] == 125)
      {
        ++v12;
        --v7;
      }
      v17 = v6 >= v12;
      v18 = v6 - v12;
      if (!v17)
        abort();
      v19 = v7 - v12;
      v15 = &v5[v12];
      if (v18 >= v19 + 1)
        v16 = v19 + 1;
      else
        v16 = v18;
    }
  }
LABEL_27:
  v20 = (uint64_t **)(a2 + 24);
  v74[0] = v15;
  v74[1] = v16;
LABEL_29:
  md::StyleSettingsParser::parseNextElement((uint64_t)__p, v4, 1, (uint64_t)v74);
  if (v73)
  {
    if (v72 != 2)
    {
      if (!v72)
      {
        v21 = operator new();
        *(_BYTE *)(v21 + 8) = 0;
        *(_QWORD *)v21 = &off_1E429DE58;
        *(_OWORD *)(v21 + 16) = v71;
        v22 = *v20;
        v23 = HIBYTE(v70);
        v24 = (uint64_t **)(a2 + 24);
        v25 = (uint64_t **)(a2 + 24);
        if (!*v20)
          goto LABEL_59;
        if (v70 >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        if (v70 >= 0)
          v27 = (void *)HIBYTE(v70);
        else
          v27 = __p[1];
        while (1)
        {
          v25 = (uint64_t **)v22;
          v30 = (const void *)v22[4];
          v28 = v22 + 4;
          v29 = v30;
          v31 = *((char *)v28 + 23);
          if (v31 >= 0)
            v32 = v28;
          else
            v32 = v29;
          if (v31 >= 0)
            v33 = *((unsigned __int8 *)v28 + 23);
          else
            v33 = v28[1];
          if (v33 >= (unint64_t)v27)
            v34 = (size_t)v27;
          else
            v34 = v33;
          v35 = memcmp(v26, v32, v34);
          if (v35)
          {
            if (v35 < 0)
              goto LABEL_39;
LABEL_53:
            v36 = memcmp(v32, v26, v34);
            if (v36)
            {
              if ((v36 & 0x80000000) == 0)
                goto LABEL_117;
            }
            else if (v33 >= (unint64_t)v27)
            {
              goto LABEL_117;
            }
            v22 = v25[1];
            if (!v22)
            {
              v24 = v25 + 1;
LABEL_59:
              v37 = (uint64_t *)operator new(0x40uLL);
              v38 = (std::string *)(v37 + 4);
              if (v23 < 0)
              {
                std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                v37[6] = v70;
              }
              v37[7] = v21;
              *v37 = 0;
              v37[1] = 0;
              v37[2] = (uint64_t)v25;
              *v24 = v37;
              v66 = **(_QWORD **)(a2 + 16);
              v4 = a1;
              if (v66)
                goto LABEL_120;
LABEL_121:
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 24), v37);
              ++*(_QWORD *)(a2 + 32);
LABEL_122:
              v67 = *(unsigned __int8 *)(v4 + 64);
              if (SHIBYTE(v70) < 0)
                operator delete(__p[0]);
              if (v67)
                return;
              goto LABEL_29;
            }
          }
          else
          {
            if ((unint64_t)v27 >= v33)
              goto LABEL_53;
LABEL_39:
            v22 = *v25;
            v24 = v25;
            if (!*v25)
              goto LABEL_59;
          }
        }
      }
      v21 = operator new();
      *(_BYTE *)(v21 + 8) = 1;
      *(_QWORD *)v21 = &off_1E429F8B0;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 16) = v21 + 24;
      md::StyleSettingsParser::parseNode(v4, v21, &v71);
      v53 = *v20;
      v40 = HIBYTE(v70);
      v24 = (uint64_t **)(a2 + 24);
      v41 = (uint64_t **)(a2 + 24);
      if (*v20)
      {
        if (v70 >= 0)
          v54 = __p;
        else
          v54 = (void **)__p[0];
        if (v70 >= 0)
          v55 = (void *)HIBYTE(v70);
        else
          v55 = __p[1];
        while (1)
        {
          v41 = (uint64_t **)v53;
          v58 = (const void *)v53[4];
          v56 = v53 + 4;
          v57 = v58;
          v59 = *((char *)v56 + 23);
          if (v59 >= 0)
            v60 = v56;
          else
            v60 = v57;
          if (v59 >= 0)
            v61 = *((unsigned __int8 *)v56 + 23);
          else
            v61 = v56[1];
          if (v61 >= (unint64_t)v55)
            v62 = (size_t)v55;
          else
            v62 = v61;
          v63 = memcmp(v54, v60, v62);
          if (v63)
          {
            if (v63 < 0)
              goto LABEL_95;
LABEL_109:
            v64 = memcmp(v60, v54, v62);
            if (v64)
            {
              if ((v64 & 0x80000000) == 0)
                goto LABEL_117;
            }
            else if (v61 >= (unint64_t)v55)
            {
              goto LABEL_117;
            }
            v53 = v41[1];
            if (!v53)
              goto LABEL_114;
          }
          else
          {
            if ((unint64_t)v55 >= v61)
              goto LABEL_109;
LABEL_95:
            v53 = *v41;
            v24 = v41;
            if (!*v41)
              break;
          }
        }
      }
LABEL_115:
      v37 = (uint64_t *)operator new(0x40uLL);
      v65 = (std::string *)(v37 + 4);
      if (v40 < 0)
      {
        std::string::__init_copy_ctor_external(v65, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v37[6] = v70;
      }
      v4 = a1;
      v37[7] = v21;
      *v37 = 0;
      v37[1] = 0;
      v37[2] = (uint64_t)v41;
      *v24 = v37;
      v66 = **(_QWORD **)(a2 + 16);
      if (!v66)
        goto LABEL_121;
LABEL_120:
      *(_QWORD *)(a2 + 16) = v66;
      v37 = *v24;
      goto LABEL_121;
    }
    v21 = operator new();
    *(_BYTE *)(v21 + 8) = 2;
    *(_QWORD *)v21 = &off_1E429DE38;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    md::StyleSettingsParser::parseNode(v4, (_QWORD *)v21, (unsigned __int8 **)&v71);
    v39 = *v20;
    v40 = HIBYTE(v70);
    v24 = (uint64_t **)(a2 + 24);
    v41 = (uint64_t **)(a2 + 24);
    if (!*v20)
      goto LABEL_115;
    if (v70 >= 0)
      v42 = __p;
    else
      v42 = (void **)__p[0];
    if (v70 >= 0)
      v43 = (void *)HIBYTE(v70);
    else
      v43 = __p[1];
    while (1)
    {
      v41 = (uint64_t **)v39;
      v46 = (const void *)v39[4];
      v44 = v39 + 4;
      v45 = v46;
      v47 = *((char *)v44 + 23);
      if (v47 >= 0)
        v48 = v44;
      else
        v48 = v45;
      if (v47 >= 0)
        v49 = *((unsigned __int8 *)v44 + 23);
      else
        v49 = v44[1];
      if (v49 >= (unint64_t)v43)
        v50 = (size_t)v43;
      else
        v50 = v49;
      v51 = memcmp(v42, v48, v50);
      if (v51)
      {
        if (v51 < 0)
          goto LABEL_68;
LABEL_82:
        v52 = memcmp(v48, v42, v50);
        if (v52)
        {
          if ((v52 & 0x80000000) == 0)
            goto LABEL_117;
        }
        else if (v49 >= (unint64_t)v43)
        {
LABEL_117:
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v4 = a1;
          goto LABEL_122;
        }
        v39 = v41[1];
        if (!v39)
        {
LABEL_114:
          v24 = v41 + 1;
          goto LABEL_115;
        }
      }
      else
      {
        if ((unint64_t)v43 >= v49)
          goto LABEL_82;
LABEL_68:
        v39 = *v41;
        v24 = v41;
        if (!*v41)
          goto LABEL_115;
      }
    }
  }
}

void md::StyleSettingsParser::parseNextElement(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  int v17;
  char *v18;
  int64_t v19;
  int v20;
  _BYTE *v22;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  std::string::size_type v28;
  std::string *p_dst;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type size;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  std::string::size_type v41;
  std::string::size_type __sz;
  std::string::value_type *__s;
  int v44;
  std::string __dst;
  __int128 v46;
  _DWORD v47[2];

  memset(v47, 0, 7);
  if (!a3)
  {
    v12 = 0;
    __sz = 0;
    __s = 0;
    v13 = 0;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(a4 + 8);
  if (!v7
    || ((v8 = *(char **)a4, v9 = memchr(*(void **)a4, 58, *(_QWORD *)(a4 + 8)), v10 = v9 - v8, v9)
      ? (v11 = v10 == -1)
      : (v11 = 1),
        v11))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    return;
  }
  if (v7 >= v10)
    v24 = v9 - v8;
  else
    v24 = v7;
  v25 = TrimWhitespace(v8, v24, " \"'\n\r\t");
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_80;
  v27 = v25;
  v28 = v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_dst = (std::string *)operator new(v30 + 1);
    __dst.__r_.__value_.__l.__size_ = v28;
    __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
    p_dst = &__dst;
    if (!v26)
      goto LABEL_52;
  }
  memmove(p_dst, v27, v28);
LABEL_52:
  p_dst->__r_.__value_.__s.__data_[v28] = 0;
  __s = (std::string::value_type *)__dst.__r_.__value_.__r.__words[0];
  v47[0] = __dst.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v47 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
  {
    *(_BYTE *)(a2 + 64) = 1;
    goto LABEL_74;
  }
  __sz = __dst.__r_.__value_.__l.__size_;
  v13 = v10 + 1;
LABEL_10:
  v44 = v12;
  v14 = *(_QWORD *)(a4 + 8);
  if (v14 > v13)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *(char **)a4;
    v19 = v13;
    while (1)
    {
      v20 = v18[v19];
      if (v20 <= 90)
      {
        if (v20 == 34 || v20 == 39)
        {
          if (v14 <= v19 + 1)
            goto LABEL_39;
          v22 = memchr(&v18[v19 + 1], v20, v14 - (v19 + 1));
          v19 = v22 - v18;
          if (!v22 || v19 == -1)
            goto LABEL_39;
        }
        else if (v20 == 44 && (v17 | v16) == 0)
        {
          goto LABEL_57;
        }
      }
      else
      {
        switch(v18[v19])
        {
          case '[':
            ++v16;
            if (!v15)
              v15 = 2;
            break;
          case ']':
            --v16;
            break;
          case '{':
            ++v17;
            if ((v15 & 0xFE) == 0)
              v15 = 1;
            break;
          case '}':
            --v17;
            break;
          default:
            break;
        }
      }
      if (++v19 >= v14)
        goto LABEL_38;
    }
  }
  v15 = 0;
  v17 = 0;
  v16 = 0;
  v19 = v13;
LABEL_38:
  if (v17 | v16)
  {
LABEL_39:
    *(_BYTE *)(a2 + 64) = 1;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if ((v44 & 0x80000000) == 0)
      return;
    goto LABEL_78;
  }
LABEL_57:
  if (v14 < v13)
LABEL_80:
    abort();
  if (v14 - v13 >= v19 - v13)
    v33 = v19 - v13;
  else
    v33 = v14 - v13;
  if (v15)
    v34 = " \n\r\t";
  else
    v34 = " \"'\n\r\t";
  v35 = TrimWhitespace((char *)(*(_QWORD *)a4 + v13), v33, v34);
  if (!v36)
  {
    v12 = v44;
    v41 = v44;
    if (v44 < 0)
      v41 = __sz;
    if (v41)
      *(_BYTE *)(a2 + 64) = 1;
LABEL_74:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if ((v12 & 0x80000000) == 0)
      return;
    goto LABEL_78;
  }
  v37 = v35;
  v38 = v36;
  v39 = *(_QWORD *)(a4 + 8);
  if (v19 + 1 < v39)
    v40 = v19 + 1;
  else
    v40 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 += v40;
  *(_QWORD *)(a4 + 8) = v39 - v40;
  if (v44 < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, __s, __sz);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
    __dst.__r_.__value_.__l.__size_ = __sz;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v47[0];
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v47 + 3);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v44;
  }
  *(_QWORD *)&v46 = v37;
  *((_QWORD *)&v46 + 1) = v38;
  *(std::string *)a1 = __dst;
  *(_BYTE *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 24) = v46;
  *(_BYTE *)(a1 + 48) = 1;
  if (v44 < 0)
LABEL_78:
    operator delete(__s);
}

char *TrimWhitespace(char *a1, unint64_t a2, char *__s)
{
  size_t v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *result;

  v6 = strlen(__s);
  v7 = v6;
  if (!a2)
  {
    if (!v6)
      return 0;
    v10 = -1;
LABEL_12:
    v12 = a2;
    while (v12)
    {
      if (!memchr(__s, a1[--v12], v7))
      {
        v11 = (uint64_t)&a1[v12];
        goto LABEL_16;
      }
    }
    return 0;
  }
  v8 = a1;
  if (v6)
  {
    v9 = a2;
    v8 = a1;
    while (memchr(__s, *v8, v7))
    {
      ++v8;
      if (!--v9)
      {
        v10 = -1;
        if (v7)
          goto LABEL_12;
        goto LABEL_9;
      }
    }
  }
  v10 = v8 - a1;
  if (v7)
    goto LABEL_12;
LABEL_9:
  v11 = (uint64_t)&a1[a2 - 1];
LABEL_16:
  result = 0;
  if (v10 != -1 && v11 - (_QWORD)a1 != -1)
  {
    if (a2 < v10)
      abort();
    return &a1[v10];
  }
  return result;
}

void ___ZN2md21DaVinciGroundSettings13_readSettingsEP12NSDictionary_block_invoke_2(uint64_t a1, NSString *a2, void *a3)
{
  uint64_t v5;
  id v6;
  char v7;
  __int16 v8;
  _QWORD v9[5];
  __int16 v10;

  v6 = a3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = ___ZN2md21DaVinciGroundSettings31_parsePropertyValuesInZoomBlockEN2gm5RangeIhEEP12NSDictionary_block_invoke;
      v9[3] = &__block_descriptor_42_e15_v32__0_8_16_B24l;
      v9[4] = v5;
      v10 = v8;
      objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v9);
    }
  }

}

void sub_19F1420A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void ___ZN2md21DaVinciGroundSettings13_readSettingsEP12NSDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  NSString *v5;
  id v6;
  _QWORD *v7;
  NSString *v8;
  id v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[3];
  uint64_t v21;
  _BYTE *v22;
  _BYTE buf[22];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD **)(a1 + 40);
  if (v20[0])
    goto LABEL_33;
  v8 = v5;
  v9 = v6;
  v21 = 0;
  if ((md::DaVinciGroundSettings::_parsePropertyKeyAndType(v8, (int *)&v21 + 1, &v21) & 1) == 0)
  {

    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v13 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_ERROR, "DaVinciGroundSettings: unexpected key/value %@=%@", buf, 0x16u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    goto LABEL_33;
  }
  v10 = v7[1];
  if (!v10)
    goto LABEL_32;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = SHIDWORD(v21);
    if (v10 <= SHIDWORD(v21))
      v12 = SHIDWORD(v21) % v10;
  }
  else
  {
    v12 = (v10 - 1) & SHIDWORD(v21);
  }
  v14 = *(uint64_t ***)(*v7 + 8 * v12);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_32:

LABEL_33:
    return;
  }
  if (v11.u32[0] < 2uLL)
  {
    v16 = v10 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == SHIDWORD(v21))
      {
        if (*((_DWORD *)v15 + 4) == HIDWORD(v21))
          goto LABEL_30;
      }
      else if ((v18 & v16) != v12)
      {
        goto LABEL_32;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_32;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == SHIDWORD(v21))
      break;
    if (v17 >= v10)
      v17 %= v10;
    if (v17 != v12)
      goto LABEL_32;
LABEL_18:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_32;
  }
  if (*((_DWORD *)v15 + 4) != HIDWORD(v21))
    goto LABEL_18;
LABEL_30:
  *(_QWORD *)buf = v9;
  *(_QWORD *)&buf[8] = v8;
  v19 = *((unsigned int *)v15 + 8);
  if ((_DWORD)v19 != -1)
  {
    v22 = buf;
    ((void (*)(_BYTE **, uint64_t *))off_1E42EF760[v19])(&v22, v15 + 3);

    goto LABEL_32;
  }
  std::__throw_bad_variant_access[abi:nn180100]();
  __break(1u);
}

void sub_19F142354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void md::`anonymous namespace'::_parseZoomRange(md::_anonymous_namespace_ *this, NSString *a2)
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  int v12;
  NSString *v13;

  v13 = a2;
  -[NSString componentsSeparatedByString:](v13, "componentsSeparatedByString:", CFSTR("-"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count") != 2)
  {
    if (objc_msgSend(v3, "count") == 1)
    {
      v12 = -[NSString intValue](v13, "intValue");
      if (v12 >= 1)
      {
        *(_BYTE *)this = 1;
        *(_WORD *)((char *)this + 1) = (v12 | (unsigned __int16)((_WORD)v12 << 8)) + 256;
        goto LABEL_9;
      }
    }
LABEL_8:
    *(_BYTE *)this = 0;
    goto LABEL_9;
  }
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "intValue");

  if (v5 < 1)
    goto LABEL_8;
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "intValue");

  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  if (v9 < 1)
    goto LABEL_8;
  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "intValue");

  *(_BYTE *)this = 1;
  *(_WORD *)((char *)this + 1) = v7 | (unsigned __int16)(v11 << 8);
LABEL_9:

}

void sub_19F1424D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C1260;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::MTLShaderLibraryData::MTLShaderLibraryData(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  const char *v70;
  unint64_t v71;
  size_t v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  size_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;

  *(_QWORD *)a1 = &off_1E42BA1D0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  {
    v93 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v93, "GeoGL", 0xA3D02C1100000005);
  }
  v12 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 48) = ggl::Allocator::instance(void)::alloc;
  v13 = *(_QWORD *)(a1 + 24);
  if (a6 <= (*(_QWORD *)(a1 + 40) - v13) >> 2)
    goto LABEL_13;
  v14 = *(_QWORD *)(a1 + 32) - v13;
  v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 4 * a6, 4);
  v16 = v15 + (v14 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = v16;
  if (v18 != v17)
  {
    v20 = v18 - v17 - 4;
    if (v20 < 0x2C)
    {
      v19 = v15 + (v14 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
LABEL_10:
        v27 = *(_DWORD *)(v18 - 4);
        v18 -= 4;
        *(_DWORD *)(v19 - 4) = v27;
        v19 -= 4;
      }
      while (v18 != v17);
      goto LABEL_11;
    }
    v19 = v15 + (v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18 - v19 < 0x20)
      goto LABEL_10;
    v21 = (v20 >> 2) + 1;
    v22 = v18 - 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v23 = (_OWORD *)(v15 + 4 * (v14 >> 2) - 16);
    v24 = (__int128 *)(v18 - 16);
    v25 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 8;
    }
    while (v25);
    v19 = v16 - 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v18 = v22;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v16;
  v28 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v15 + 4 * a6;
  if (v17)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v17, v28 - v17);
LABEL_13:
  v29 = 0;
  v30 = *(_DWORD **)(a1 + 32);
  do
  {
    v31 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v30 < v31)
    {
      if (v30)
        *v30 = *(_DWORD *)(a4 + 4 * v29);
      ++v30;
      goto LABEL_15;
    }
    v32 = ((uint64_t)v30 - *v11) >> 2;
    if ((unint64_t)(v32 + 1) >> 62)
LABEL_96:
      abort();
    v33 = v31 - *v11;
    v34 = v33 >> 1;
    if (v33 >> 1 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v35 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
    {
      v36 = 4 * v35;
      v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 4 * v35, 4);
      v38 = (_DWORD *)(v37 + 4 * v32);
      v35 = v37 + v36;
      if (v37)
        *v38 = *(_DWORD *)(a4 + 4 * v29);
    }
    else
    {
      v38 = (_DWORD *)(4 * v32);
    }
    v39 = *(_QWORD *)(a1 + 24);
    v40 = *(_QWORD *)(a1 + 32);
    v41 = v38;
    if (v40 != v39)
    {
      v42 = v40 - v39 - 4;
      if (v42 < 0x1C)
      {
        v41 = v38;
        do
        {
LABEL_37:
          v49 = *(_DWORD *)(v40 - 4);
          v40 -= 4;
          *--v41 = v49;
        }
        while (v40 != v39);
        goto LABEL_38;
      }
      v41 = v38;
      if ((unint64_t)(v40 - (_QWORD)v38) < 0x20)
        goto LABEL_37;
      v43 = (v42 >> 2) + 1;
      v44 = v40 - 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
      v45 = v38 - 4;
      v46 = (__int128 *)(v40 - 16);
      v47 = v43 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v48 = *v46;
        *(v45 - 1) = *(v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 2;
        v47 -= 8;
      }
      while (v47);
      v41 = &v38[-(v43 & 0x7FFFFFFFFFFFFFF8)];
      v40 = v44;
      if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_37;
    }
LABEL_38:
    v30 = v38 + 1;
    *(_QWORD *)(a1 + 24) = v41;
    *(_QWORD *)(a1 + 32) = v38 + 1;
    v50 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v35;
    if (v39)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v39, v50 - v39);
LABEL_15:
    *(_QWORD *)(a1 + 32) = v30;
    ++v29;
  }
  while (v29 != a6);
  *(_QWORD *)a1 = off_1E42BAB70;
  *(_QWORD *)(a1 + 56) = 0;
  v95 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  {
    v94 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v94, "GeoGL", 0xA3D02C1100000005);
  }
  v52 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 80) = ggl::Allocator::instance(void)::alloc;
  *(_DWORD *)(a1 + 88) = a2;
  v53 = *(_QWORD *)(a1 + 56);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v53) >> 3) < a6)
  {
    v54 = (unsigned __int128)((*(_QWORD *)(a1 + 64) - v53) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v55 = (v54 >> 2) + ((unint64_t)v54 >> 63);
    v56 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, 24 * a6, 8);
    v57 = v56 + 24 * v55;
    v58 = v56 + 24 * a6;
    v59 = *(_QWORD *)(a1 + 56);
    v60 = *(_QWORD *)(a1 + 64);
    if (v60 == v59)
    {
      *(_QWORD *)(a1 + 56) = v57;
      *(_QWORD *)(a1 + 64) = v57;
      v64 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v58;
    }
    else
    {
      v61 = v56 + 24 * v55;
      do
      {
        v62 = *(_OWORD *)(v60 - 24);
        *(_QWORD *)(v61 - 8) = *(_QWORD *)(v60 - 8);
        *(_OWORD *)(v61 - 24) = v62;
        v61 -= 24;
        *(_QWORD *)(v60 - 16) = 0;
        *(_QWORD *)(v60 - 8) = 0;
        *(_QWORD *)(v60 - 24) = 0;
        v60 -= 24;
      }
      while (v60 != v59);
      v60 = *(_QWORD *)(a1 + 56);
      v63 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v61;
      *(_QWORD *)(a1 + 64) = v57;
      v64 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v58;
      while (v63 != v60)
      {
        if (*(char *)(v63 - 1) < 0)
          operator delete(*(void **)(v63 - 24));
        v63 -= 24;
      }
    }
    if (v60)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v60, v64 - v60);
  }
  v65 = 0;
  v66 = *(_QWORD **)(a1 + 64);
  while (2)
  {
    v70 = *(const char **)(a5 + 8 * v65);
    v71 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v66 >= v71)
    {
      v74 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v66 - *v95) >> 3);
      v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_96;
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *v95) >> 3);
      if (2 * v76 > v75)
        v75 = 2 * v76;
      if (v76 >= 0x555555555555555)
        v77 = 0xAAAAAAAAAAAAAAALL;
      else
        v77 = v75;
      if (v77)
      {
        v78 = 24 * v77;
        v79 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), 24 * v77, 8);
        v80 = v79 + 24 * v74;
        v81 = v79 + v78;
        if (v79)
        {
          v82 = strlen(v70);
          if (v82 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_96;
          v83 = v82;
          if (v82 >= 0x17)
          {
            v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17)
              v85 = v82 | 7;
            v86 = v85 + 1;
            v84 = operator new(v85 + 1);
            *(_QWORD *)(v80 + 8) = v83;
            *(_QWORD *)(v80 + 16) = v86 | 0x8000000000000000;
            *(_QWORD *)v80 = v84;
          }
          else
          {
            *(_BYTE *)(v80 + 23) = v82;
            v84 = (void *)v80;
            if (!v82)
              goto LABEL_84;
          }
          memmove(v84, v70, v83);
LABEL_84:
          *((_BYTE *)v84 + v83) = 0;
        }
      }
      else
      {
        v81 = 0;
        v80 = 8 * (((uint64_t)v66 - *v95) >> 3);
      }
      v66 = (_QWORD *)(v80 + 24);
      v87 = *(_QWORD *)(a1 + 56);
      v88 = *(_QWORD *)(a1 + 64);
      if (v88 == v87)
      {
        *(_QWORD *)(a1 + 56) = v80;
        *(_QWORD *)(a1 + 64) = v66;
        v91 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v81;
      }
      else
      {
        do
        {
          v89 = *(_OWORD *)(v88 - 24);
          *(_QWORD *)(v80 - 8) = *(_QWORD *)(v88 - 8);
          *(_OWORD *)(v80 - 24) = v89;
          v80 -= 24;
          *(_QWORD *)(v88 - 16) = 0;
          *(_QWORD *)(v88 - 8) = 0;
          *(_QWORD *)(v88 - 24) = 0;
          v88 -= 24;
        }
        while (v88 != v87);
        v88 = *(_QWORD *)(a1 + 56);
        v90 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 56) = v80;
        *(_QWORD *)(a1 + 64) = v66;
        v91 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v81;
        while (v90 != v88)
        {
          if (*(char *)(v90 - 1) < 0)
            operator delete(*(void **)(v90 - 24));
          v90 -= 24;
        }
      }
      if (v88)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), v88, v91 - v88);
      goto LABEL_60;
    }
    if (v66)
    {
      v72 = strlen(*(const char **)(a5 + 8 * v65));
      if (v72 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_96;
      v73 = v72;
      if (v72 >= 0x17)
      {
        v67 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17)
          v67 = v72 | 7;
        v68 = v67 + 1;
        v69 = operator new(v67 + 1);
        v66[1] = v73;
        v66[2] = v68 | 0x8000000000000000;
        *v66 = v69;
      }
      else
      {
        *((_BYTE *)v66 + 23) = v72;
        v69 = v66;
        if (!v72)
        {
LABEL_58:
          v69[v73] = 0;
          goto LABEL_59;
        }
      }
      memmove(v69, v70, v73);
      goto LABEL_58;
    }
LABEL_59:
    v66 += 3;
LABEL_60:
    *(_QWORD *)(a1 + 64) = v66;
    if (++v65 != a6)
      continue;
    return a1;
  }
}

void md::ResourceInfo::setResourceNames(md::ResourceInfo *this, NSArray *a2)
{
  unint64_t v3;
  unint64_t v4;
  void **v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  void **v12;
  NSArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const char *v17;
  const char *v18;
  unint64_t v19;
  _QWORD *v20;
  size_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  NSArray *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v3 = -[NSArray count](v43, "count");
  v4 = v3;
  v5 = *(void ***)this;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *(_QWORD *)this) >> 3) < v3)
  {
    if (v3 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v6 = (void **)*((_QWORD *)this + 1);
    v7 = (char *)operator new(24 * v3);
    v8 = &v7[24 * v4];
    v9 = &v7[24 * (((char *)v6 - (char *)v5) / 24)];
    if (v6 == v5)
    {
      *(_QWORD *)this = v9;
      *((_QWORD *)this + 1) = v9;
      *((_QWORD *)this + 2) = v8;
    }
    else
    {
      v10 = &v7[24 * (((char *)v6 - (char *)v5) / 24)];
      do
      {
        v11 = *(_OWORD *)(v6 - 3);
        *((_QWORD *)v10 - 1) = *(v6 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        *(v6 - 2) = 0;
        *(v6 - 1) = 0;
        *(v6 - 3) = 0;
        v6 -= 3;
      }
      while (v6 != v5);
      v5 = *(void ***)this;
      v12 = (void **)*((_QWORD *)this + 1);
      *(_QWORD *)this = v10;
      *((_QWORD *)this + 1) = v9;
      *((_QWORD *)this + 2) = v8;
      while (v12 != v5)
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
    }
    if (v5)
      operator delete(v5);
  }
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v13 = v43;
  v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v45 != v15)
          objc_enumerationMutation(v13);
        v17 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v44 + 1) + 8 * i)), "UTF8String");
        v18 = v17;
        if (v17 && *v17)
        {
          v20 = (_QWORD *)*((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 2);
          if ((unint64_t)v20 < v19)
          {
            v21 = strlen(v17);
            if (v21 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v22 = v21;
            if (v21 >= 0x17)
            {
              v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v21 | 7) != 0x17)
                v29 = v21 | 7;
              v30 = v29 + 1;
              v23 = operator new(v29 + 1);
              v20[1] = v22;
              v20[2] = v30 | 0x8000000000000000;
              *v20 = v23;
            }
            else
            {
              *((_BYTE *)v20 + 23) = v21;
              v23 = v20;
              if (!v21)
                goto LABEL_41;
            }
            memmove(v23, v18, v22);
LABEL_41:
            *((_BYTE *)v23 + v22) = 0;
            *((_QWORD *)this + 1) = v20 + 3;
            *((_QWORD *)this + 1) = v20 + 3;
            continue;
          }
          v24 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - *(_QWORD *)this) >> 3);
          v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)this) >> 3);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v25;
          v52 = (char *)this + 16;
          if (v27)
          {
            if (v27 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v28 = (char *)operator new(24 * v27);
          }
          else
          {
            v28 = 0;
          }
          v31 = &v28[24 * v24];
          v48 = v28;
          v49 = v31;
          v50 = v31;
          v51 = &v28[24 * v27];
          v32 = strlen(v18);
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v33 = v32;
          if (v32 >= 0x17)
          {
            v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v34 = v32 | 7;
            v35 = v34 + 1;
            v36 = (char *)operator new(v34 + 1);
            *((_QWORD *)v31 + 1) = v33;
            *((_QWORD *)v31 + 2) = v35 | 0x8000000000000000;
            *(_QWORD *)v31 = v36;
            v31 = v36;
          }
          else
          {
            v31[23] = v32;
            if (!v32)
              goto LABEL_51;
          }
          memmove(v31, v18, v33);
LABEL_51:
          v31[v33] = 0;
          v37 = v49;
          v38 = v50 + 24;
          v39 = *(char **)this;
          v40 = (char *)*((_QWORD *)this + 1);
          if (v40 == *(char **)this)
          {
            *(_QWORD *)this = v49;
            *((_QWORD *)this + 1) = v38;
            *((_QWORD *)this + 2) = v51;
          }
          else
          {
            do
            {
              v41 = *(_OWORD *)(v40 - 24);
              *((_QWORD *)v37 - 1) = *((_QWORD *)v40 - 1);
              *(_OWORD *)(v37 - 24) = v41;
              v37 -= 24;
              *((_QWORD *)v40 - 2) = 0;
              *((_QWORD *)v40 - 1) = 0;
              *((_QWORD *)v40 - 3) = 0;
              v40 -= 24;
            }
            while (v40 != v39);
            v40 = *(char **)this;
            v42 = (void **)*((_QWORD *)this + 1);
            *(_QWORD *)this = v37;
            *((_QWORD *)this + 1) = v38;
            *((_QWORD *)this + 2) = v51;
            while (v42 != (void **)v40)
            {
              if (*((char *)v42 - 1) < 0)
                operator delete(*(v42 - 3));
              v42 -= 3;
            }
          }
          if (v40)
            operator delete(v40);
          *((_QWORD *)this + 1) = v38;
          continue;
        }
      }
      v14 = -[NSArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    }
    while (v14);
  }

}

void sub_19F143128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, std::__split_buffer<std::string> *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void ___ZN2md16StylesheetVendor15localizationMapEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  int v15;
  int v16;
  std::string __p;
  int v18;
  std::string __dst;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = (const char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
      v9 = strlen(v8);
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v10 = v9;
      if (v9 >= 0x17)
      {
        v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v12 = v9 | 7;
        v13 = v12 + 1;
        p_dst = (std::string *)operator new(v12 + 1);
        __dst.__r_.__value_.__l.__size_ = v10;
        __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
        {
LABEL_11:
          p_dst->__r_.__value_.__s.__data_[v10] = 0;
          v14 = *(float **)(v7 + 96);
          v15 = objc_msgSend(v6, "intValue");
          v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            __p = __dst;
          v18 = v15;
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,int>,gss::Allocator>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>(v14, (uint64_t)&__p, (__int128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((v16 & 0x80000000) == 0)
              goto LABEL_16;
          }
          else if ((v16 & 0x80000000) == 0)
          {
            goto LABEL_16;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_16;
        }
      }
      memmove(p_dst, v8, v10);
      goto LABEL_11;
    }
  }
LABEL_16:

}

void sub_19F143310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  char v24;

  if (a14 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void ___ZN2md16StylesheetVendor11currencyMapEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  int v15;
  int v16;
  std::string __p;
  int v18;
  std::string __dst;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = (const char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
      v9 = strlen(v8);
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v10 = v9;
      if (v9 >= 0x17)
      {
        v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v12 = v9 | 7;
        v13 = v12 + 1;
        p_dst = (std::string *)operator new(v12 + 1);
        __dst.__r_.__value_.__l.__size_ = v10;
        __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
        {
LABEL_11:
          p_dst->__r_.__value_.__s.__data_[v10] = 0;
          v14 = *(float **)(v7 + 120);
          v15 = objc_msgSend(v6, "intValue");
          v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            __p = __dst;
          v18 = v15;
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,int>,gss::Allocator>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>(v14, (uint64_t)&__p, (__int128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((v16 & 0x80000000) == 0)
              goto LABEL_16;
          }
          else if ((v16 & 0x80000000) == 0)
          {
            goto LABEL_16;
          }
          operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_16;
        }
      }
      memmove(p_dst, v8, v10);
      goto LABEL_11;
    }
  }
LABEL_16:

}

void sub_19F1434E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  char v24;

  if (a14 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,geo::StdAllocator<std::__hash_value_type<std::string,int>,gss::Allocator>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>(float *a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t *j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  uint64_t *i;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  _QWORD *k;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  size_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *((_QWORD *)a1 + 1);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v10)
            {
              v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0)
                v22 = *((unsigned __int8 *)v14 + 39);
              else
                v22 = v14[3];
              if (v22 == v8)
              {
                v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; i = (uint64_t *)((char *)i + 1))
                  {
                    v23 = (const void **)((char *)v23 + 1);
                    if (!--v21)
                      return;
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v14 + 39);
            else
              v17 = v14[3];
            if (v17 == v8)
            {
              v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
                {
                  v18 = (const void **)((char *)v18 + 1);
                  if (!--v16)
                    return;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 4) + 16))(*((_QWORD *)a1 + 4), 48, 8);
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v27 = *a3;
    *(_QWORD *)(v25 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  *(_DWORD *)(v25 + 40) = *((_DWORD *)a3 + 6);
  v28 = (float)(unint64_t)(*((_QWORD *)a1 + 5) + 1);
  v29 = a1[12];
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *((_QWORD *)a1 + 1);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_88;
      v45 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v11 < 3 || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (prime <= v45)
        prime = v45;
      if (prime >= v11)
      {
        v11 = *((_QWORD *)a1 + 1);
LABEL_88:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_101;
      }
      if (!prime)
      {
        v53 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        if (v53)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v53, 8 * *((_QWORD *)a1 + 1));
        v11 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_88;
      }
    }
    v34 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((_QWORD **)a1 + 2) + 16))(*((_QWORD *)a1 + 2), 8 * prime, 8);
    v35 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v34;
    if (v35)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((_QWORD **)a1 + 2) + 40))(*((_QWORD *)a1 + 2), v35, 8 * *((_QWORD *)a1 + 1));
    v36 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36++) = 0;
    while (prime != v36);
    v38 = (uint64_t *)(a1 + 6);
    v37 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v37)
    {
LABEL_87:
      v11 = prime;
      goto LABEL_88;
    }
    v39 = v37[1];
    v40 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v41 = v39 & v40;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v38;
      for (k = (_QWORD *)*v37; *v37; k = (_QWORD *)*v37)
      {
        v43 = k[1] & v40;
        if (v43 == v41)
        {
          v37 = k;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v43))
        {
          *v37 = *k;
          v44 = 8 * v43;
          *k = **(_QWORD **)(*(_QWORD *)a1 + v44);
          **(_QWORD **)(*(_QWORD *)a1 + v44) = k;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v37;
          v37 = k;
          v41 = v43;
        }
      }
      goto LABEL_87;
    }
    if (v39 >= prime)
      v39 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v38;
    v48 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_87;
    while (1)
    {
      v50 = v48[1];
      if (v50 >= prime)
        v50 %= prime;
      if (v50 != v39)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v50))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v50) = v37;
          goto LABEL_92;
        }
        *v37 = *v48;
        v49 = 8 * v50;
        *v48 = **(_QWORD **)(*(_QWORD *)a1 + v49);
        **(_QWORD **)(*(_QWORD *)a1 + v49) = v48;
        v48 = v37;
      }
      v50 = v39;
LABEL_92:
      v37 = v48;
      v48 = (_QWORD *)*v48;
      v39 = v50;
      if (!v48)
        goto LABEL_87;
    }
  }
LABEL_101:
  v51 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v51)
  {
    *(_QWORD *)v25 = *v51;
    *v51 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 6;
    if (*(_QWORD *)v25)
    {
      v52 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v52 >= v11)
          v52 %= v11;
      }
      else
      {
        v52 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v52) = v25;
    }
  }
  ++*((_QWORD *)a1 + 5);
}

void sub_19F143ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,int>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>,gss::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

grl::codec::TextLayerData *grl::codec::TextLayerData::TextLayerData(grl::codec::TextLayerData *this, const grl::codec::TextLayerData *a2, unsigned int a3, const grl::IconModifiers *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v18;
  __int16 v19;
  char v20;

  v19 = 515;
  v20 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v8 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v8;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 3, 1);
  v10 = 0;
  *(_QWORD *)this = v9;
  *((_QWORD *)this + 2) = v9 + 3;
  do
  {
    if (v9 + v10)
      *(_BYTE *)(v9 + v10) = *((_BYTE *)&v19 + v10);
    ++v10;
  }
  while (v10 != 3);
  *((_QWORD *)this + 1) = v9 + 3;
  *((_DWORD *)this + 8) = -16777216;
  *((_BYTE *)this + 36) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 5, "");
  *(_DWORD *)((char *)this + 67) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 71) = -1;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)((char *)this + 79) = 0;
  *((_BYTE *)this + 87) = -1;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 11, "");
  *((_DWORD *)this + 28) = 0;
  *(_DWORD *)((char *)this + 115) = 0;
  *((_BYTE *)this + 119) = -1;
  *((_DWORD *)this + 30) = 0;
  *(_DWORD *)((char *)this + 123) = 0;
  *((_BYTE *)this + 127) = -1;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  v11 = (std::string *)std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 18, "");
  *((_QWORD *)this + 21) = 0;
  *((_WORD *)this + 88) = 1;
  if (a2)
  {
    v18 = v11;
    for (i = 0; i != 4; ++i)
      *((_BYTE *)this + i + 32) = *((_BYTE *)a2 + i + 32);
    *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
    std::string::operator=((std::string *)((char *)this + 40), (const std::string *)((char *)a2 + 40));
    v13 = 0;
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    do
    {
      *((_BYTE *)this + v13 + 68) = *((_BYTE *)a2 + v13 + 68);
      ++v13;
    }
    while (v13 != 4);
    v14 = 0;
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    do
    {
      *((_BYTE *)this + v14 + 84) = *((_BYTE *)a2 + v14 + 84);
      ++v14;
    }
    while (v14 != 4);
    std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
    v15 = 0;
    *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
    do
    {
      *((_BYTE *)this + v15 + 116) = *((_BYTE *)a2 + v15 + 116);
      ++v15;
    }
    while (v15 != 4);
    v16 = 0;
    *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
    do
    {
      *((_BYTE *)this + v16 + 124) = *((_BYTE *)a2 + v16 + 124);
      ++v16;
    }
    while (v16 != 4);
    *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
    *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
    *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
    std::string::operator=(v18, (const std::string *)a2 + 6);
    *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
    *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
    *((_WORD *)this + 88) = *((_WORD *)a2 + 88);
  }
  grl::codec::TextLayerData::applyModifiers(this, a3, a4);
  return this;
}

grl::codec::TextLayerData *grl::codec::TextLayerData::TextLayerData(grl::codec::TextLayerData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  char v7;

  v6 = 515;
  v7 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v2 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v2;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 3, 1);
  v4 = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 2) = v3 + 3;
  do
  {
    if (v3 + v4)
      *(_BYTE *)(v3 + v4) = *((_BYTE *)&v6 + v4);
    ++v4;
  }
  while (v4 != 3);
  *((_QWORD *)this + 1) = v3 + 3;
  *((_DWORD *)this + 8) = -16777216;
  *((_BYTE *)this + 36) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 5, "");
  *(_DWORD *)((char *)this + 67) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 71) = -1;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)((char *)this + 79) = 0;
  *((_BYTE *)this + 87) = -1;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 11, "");
  *(_DWORD *)((char *)this + 115) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_BYTE *)this + 119) = -1;
  *((_DWORD *)this + 30) = 0;
  *(_DWORD *)((char *)this + 123) = 0;
  *((_BYTE *)this + 127) = -1;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 18, "");
  *((_QWORD *)this + 21) = 0;
  *((_WORD *)this + 88) = 1;
  return this;
}

double grl::codec::TextLayerData::applyModifiers(grl::codec::TextLayerData *this, unsigned int a2, const grl::IconModifiers *a3)
{
  int v6;
  char **v7;
  char **v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  double result;
  void **v13;
  __int128 v14;
  uint64_t v15;

  if (*((_BYTE *)this + 36) == 1 && *((_BYTE *)a3 + 25) != 0)
  {
    v6 = *(_DWORD *)((char *)a3 + 26);
    *((_DWORD *)this + 8) = v6;
    *((_DWORD *)this + 21) = v6;
  }
  v7 = (char **)*((_QWORD *)a3 + 12);
  if (v7)
  {
    v8 = (char **)((char *)a3 + 96);
    do
    {
      v9 = *((unsigned __int16 *)v7 + 16);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = v7;
      v7 = (char **)*v11;
    }
    while (*v11);
    if (v8 != (char **)((char *)a3 + 96) && *((unsigned __int16 *)v8 + 16) <= a2)
      std::string::operator=((std::string *)this + 6, (const std::string *)(v8 + 5));
  }
  if (*((_BYTE *)a3 + 36))
  {
    LODWORD(result) = *((_DWORD *)a3 + 10);
    *((_DWORD *)this + 16) = LODWORD(result);
  }
  if (*(_BYTE *)a3)
  {
    std::string::basic_string[abi:nn180100]<0>(&v14, "%$default,heavy");
    v13 = (void **)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      operator delete(*v13);
    result = *(double *)&v14;
    *(_OWORD *)v13 = v14;
    *((_QWORD *)this + 7) = v15;
  }
  return result;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addMetallicFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 128);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 6u, 262);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 128);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t std::__function::__func<float (*)(float,float const&,float const&),std::allocator<float (*)(float,float const&,float const&)>,float ()(float,float const&,float const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C7088;
  a2[1] = v2;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<float>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;

  v4 = *a4;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = v4;
  return result;
}

void gms::NonZoomablePropertyStore<float>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C13B0;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t __copy_helper_block_ea8_56c51_ZTSNSt3__110shared_ptrIN3ggl17RenderTransactionEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t md::LineTextWithAuxLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 713);
  v5 = *(unsigned __int8 *)(a1 + 712) == v4 || v4 == 0;
  if (!v5)
    return 1;
  v6 = *(unsigned __int8 *)(a1 + 715);
  if (*(unsigned __int8 *)(a1 + 714) != v6 && v6 != 0)
    return 1;
  v8 = *(_QWORD *)(a1 + 576);
  v9 = *(_QWORD *)(a1 + 584);
  if (v8 == v9)
    return 0;
  v13 = v8 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 - 8) + 760))(*(_QWORD *)(v13 - 8), a2, a3, a4);
    if ((result & 1) != 0)
      break;
    v5 = v13 == v9;
    v13 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::CurvedTextLabelPart::needsCrossfade(uint64_t a1, float *a2, int a3, uint64_t a4)
{
  float *v6;
  uint64_t *v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v21;
  char v23;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  v6 = a2;
  v8 = *(uint64_t **)(a1 + 32);
  if (*(_BYTE *)(a1 + 1458) == 4)
  {
    v9 = *v8;
    v10 = *(unsigned __int8 *)(a1 + 864) == 1;
    v11 = *v8 + 280;
    v12 = *(_BYTE *)(a1 + 864) == 1 ? 6 : 0;
    a2 = *(float **)(v11 + 8 * (*(_BYTE *)(a1 + 864) == 1));
    if (a2)
    {
      if (vabds_f32(a2[2], *(float *)(v9 + 104)) >= 0.01)
      {
        md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v9, (uint64_t)a2, v12);
        a2 = *(float **)(v11 + 8 * v10);
      }
    }
    else
    {
      a2 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v9, v12);
      *(_QWORD *)(v11 + 8 * v10) = a2;
    }
    v13 = *(float *)(*(_QWORD *)a2 + 100);
    if (v13 != 0.0)
    {
      v14 = v13 / v6[44];
      v15 = *(float *)(*v8 + 152) + *(float *)(*v8 + 152);
      if (*(_BYTE *)(a1 + 1461) == 8)
      {
        if (v14 < v15)
          goto LABEL_12;
LABEL_22:
        v16 = 1;
        *(_BYTE *)(a4 + 8) = 1;
        *(_BYTE *)a4 = 1;
        if (*(_BYTE *)(a1 + 1457))
          goto LABEL_23;
        goto LABEL_13;
      }
      if (v14 < v15)
        goto LABEL_22;
    }
  }
LABEL_12:
  v16 = 0;
  if (*(_BYTE *)(a1 + 1457))
    goto LABEL_23;
LABEL_13:
  if (*(_BYTE *)(a1 + 1465) && *(_BYTE *)(a1 + 1466) && *(_BYTE *)(a1 + 1140) == 37)
  {
    *(_BYTE *)(a1 + 1466) = 0;
    if (*((_BYTE *)v6 + 3029) && !*((_BYTE *)v6 + 3031))
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *(_QWORD *)(v25 + 64);
      v27 = *(std::__shared_weak_count **)(v25 + 72);
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      if (v26)
      {
        v30 = v26 + 144;
        if (((*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 1072) + 72))(*(_QWORD *)(a1 + 1072), v26 + 144, 0.0) & 1) != 0|| ((*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 1088) + 72))(*(_QWORD *)(a1 + 1088), v30, 0.0) & 1) != 0)
        {
          v17 = 1;
        }
        else
        {
          v17 = (*(uint64_t (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 1104) + 72))(*(_QWORD *)(a1 + 1104), v30, 0.0);
        }
      }
      else
      {
        v17 = 0;
      }
      if (v27)
      {
        v31 = (unint64_t *)&v27->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = *(unsigned __int8 *)(a1 + 1456);
    if (v18 != v17)
    {
      v16 = 1;
      *(_BYTE *)(a4 + 10) = 1;
      *(_BYTE *)(a4 + 2) = v18 ^ 1;
    }
  }
LABEL_23:
  v19 = *(unsigned __int8 *)(a1 + 1452);
  if (*(unsigned __int8 *)(a1 + 1141) != v19 && v19 != 0)
  {
    v16 = 1;
    *(_BYTE *)(a4 + 11) = 1;
    *(_BYTE *)(a4 + 3) = v19;
    *(_BYTE *)(a4 + 9) = 1;
    *(_BYTE *)(a4 + 1) = 0;
    if (!a3)
      goto LABEL_40;
LABEL_34:
    if (*(unsigned __int8 *)(*v8 + 253) == *(unsigned __int8 *)(a1 + 1398))
      v23 = v16;
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      return 1;
    return md::TextLabelPart::needsCrossfade(a1, (uint64_t)a2, a3);
  }
  v21 = *(unsigned __int8 *)(a1 + 1454);
  if (*(unsigned __int8 *)(a1 + 1136) != v21 && v21 != 0)
  {
    v16 = 1;
    *(_BYTE *)(a4 + 9) = 1;
    *(_BYTE *)(a4 + 1) = v21;
    *(_WORD *)(a4 + 6) = *(unsigned __int8 *)(a1 + 1137) | 0x100;
  }
  if (a3)
    goto LABEL_34;
LABEL_40:
  if ((v16 & 1) == 0)
    return md::TextLabelPart::needsCrossfade(a1, (uint64_t)a2, a3);
  return 1;
}

void sub_19F1444BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 576);
  v5 = *(_QWORD *)(a1 + 584);
  if (v4 == v5)
    return 0;
  v9 = v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 - 8) + 760))(*(_QWORD *)(v9 - 8), a2, a3, a4);
    if ((result & 1) != 0)
      break;
    v11 = v9 == v5;
    v9 += 8;
  }
  while (!v11);
  return result;
}

BOOL md::ShieldIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  if (!a3)
    return 0;
  v4 = *(uint64_t **)(a1 + 32);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 296);
  if (!v6)
  {
    v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    v6 = *v7;
    *(_QWORD *)(v5 + 296) = *v7;
  }
  if (*(unsigned __int8 *)(v6 + 91) != *(unsigned __int8 *)(a1 + 784))
    return 1;
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 296);
  if (!v9)
  {
    v10 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    v9 = *v10;
    *(_QWORD *)(v8 + 296) = *v10;
  }
  return *(_DWORD *)(a1 + 788) != *(_DWORD *)(v9 + 56) || *(_DWORD *)(a1 + 792) != *(_DWORD *)(v9 + 60);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19F144F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::ClientDrapedPolygonRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;

  v5 = *(_QWORD **)(a3 + 8);
  v6 = v5[1];
  if ((v6 & (v6 - 1)) != 0)
  {
    v8 = 0x8BD499FBD96FBB9ELL;
    if (v6 <= 0x8BD499FBD96FBB9ELL)
      v8 = 0x8BD499FBD96FBB9ELL % v6;
    v7 = *(_QWORD **)(*v5 + 8 * v8);
    do
    {
      do
        v7 = (_QWORD *)*v7;
      while (v7[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v7[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v7 = *(_QWORD **)(*v5 + 8 * ((v6 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v7 = (_QWORD *)*v7;
      while (v7[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v7[2] != 0x8BD499FBD96FBB9ELL);
  }
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    v11 = *(_QWORD *)(v7[5] + 32);
    v12 = *(float *)(v11 + 16);
    v13 = *(float *)(v11 + 20);
    do
    {
      v14 = *v9++;
      a1 = md::BaseMapTileDataRenderable::adjustZScale(v14, v12, v13);
    }
    while (v9 != v10);
  }
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::updateWithContext(a1, a2, a3);
}

void md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t ***v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t ***v44;
  BOOL v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t **i;
  char v63;
  int v64;
  int v65;
  unint64_t v66;
  BOOL v67;
  _BOOL4 v68;
  _BOOL4 v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  void *__p;
  uint64_t *v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  uint64_t v93[4];

  v3 = a1;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
  {
    v8 = 0;
    goto LABEL_48;
  }
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v5 <= 0x3070CB6B3C7F21D3uLL)
      v7 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x3070CB6B3C7F21D3;
  }
  v9 = *v4;
  v10 = *(_QWORD **)(v9 + 8 * v7);
  if (!v10)
    goto LABEL_25;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_25;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0x3070CB6B3C7F21D3)
      {
        if (v11[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v13 & (*(_QWORD *)&v5 - 1)) != v7)
      {
        goto LABEL_25;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == 0x3070CB6B3C7F21D3)
      break;
    if (v12 >= *(_QWORD *)&v5)
      v12 %= *(_QWORD *)&v5;
    if (v12 != v7)
      goto LABEL_25;
LABEL_12:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_25;
  }
  if (v11[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v14 = v11[5];
  if (*(_QWORD *)(v14 + 8) == 0x3070CB6B3C7F21D3)
  {
    v8 = *(_QWORD *)(v14 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v8 = 0;
LABEL_26:
  if (v6.u32[0] > 1uLL)
  {
    v15 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v15 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v15 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v16 = *(_QWORD **)(v9 + 8 * v15);
  if (!v16)
    goto LABEL_48;
  v17 = (_QWORD *)*v16;
  if (!v17)
    goto LABEL_48;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      v19 = v17[1];
      if (v19 == 0x99BED48DEFBBD82BLL)
      {
        if (v17[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v19 & (*(_QWORD *)&v5 - 1)) != v15)
      {
        goto LABEL_48;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v18 = v17[1];
    if (v18 != 0x99BED48DEFBBD82BLL)
    {
      if (v18 >= *(_QWORD *)&v5)
        v18 %= *(_QWORD *)&v5;
      if (v18 != v15)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v17[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v20 = v17[5];
  if (*(_QWORD *)(v20 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v21 = *(uint64_t **)(v20 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v21 = 0;
LABEL_49:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v93[0] = a1;
  v93[1] = (uint64_t)a3;
  v93[2] = a2;
  v93[3] = v8;
  if (v8)
  {
    v22 = *(uint64_t ***)(a1 + 176);
    v23 = (uint64_t ***)(a1 + 184);
    if (v22 == (uint64_t **)(a1 + 184))
    {
LABEL_51:
      v24 = *(_QWORD **)(v3 + 400);
      v86 = (_QWORD *)(v3 + 408);
      if (v24 == (_QWORD *)(v3 + 408))
        return;
      while (2)
      {
        v46 = (std::__shared_weak_count *)v24[5];
        v91 = (uint64_t *)v24[4];
        v92 = v46;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(p_shared_owners);
          while (__stxr(v48 + 1, p_shared_owners));
        }
        v49 = v3;
        v50 = (unint64_t *)__p;
        v51 = v90;
        if (__p == v90)
        {
          if (__p)
            goto LABEL_139;
          goto LABEL_149;
        }
LABEL_99:
        v52 = *v50;
        v53 = (std::__shared_weak_count *)v50[1];
        v87 = *v50;
        v88 = v53;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          v56 = *((unsigned __int8 *)v24 + 48);
          v52 = *v50;
          v57 = (std::__shared_weak_count *)v50[1];
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
            do
              v60 = __ldxr(v58);
            while (__stxr(v60 + 1, v58));
            v61 = 0;
            i = *v23;
            if (*v23)
              goto LABEL_114;
            goto LABEL_110;
          }
        }
        else
        {
          v57 = 0;
          v56 = *((unsigned __int8 *)v24 + 48);
        }
        v61 = 1;
        for (i = *v23; i; i = (uint64_t **)*i)
        {
LABEL_114:
          v64 = *((unsigned __int8 *)i + 48);
          v65 = (char)v64;
          v66 = (unint64_t)i[4];
          if (v56 == v64)
            v67 = v52 < v66;
          else
            v67 = (char)v64 > (char)v56;
          if (!v67)
          {
            v68 = v66 < v52;
            if (v56 == v65)
              v69 = v68;
            else
              v69 = v65 < (char)v56;
            if (!v69)
            {
              v63 = 0;
              if ((v61 & 1) == 0)
                goto LABEL_123;
              goto LABEL_129;
            }
            ++i;
          }
        }
LABEL_110:
        v63 = 1;
        if ((v61 & 1) != 0)
          goto LABEL_129;
LABEL_123:
        v70 = (unint64_t *)&v57->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        do
          v72 = __ldaxr(v70);
        while (__stlxr(v72 - 1, v70));
        if (v72)
        {
LABEL_129:
          if ((v63 & 1) != 0)
            goto LABEL_130;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          if ((v63 & 1) != 0)
LABEL_130:
            md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext const&)::{lambda(std::shared_ptr<md::ElevatedStrokeTileData> const&,unsigned char,std::shared_ptr<md::DaVinciGroundTileData> const&)#1}::operator()(v93, (uint64_t *)&v87, v56, &v91);
        }
        v73 = v88;
        if (v88)
        {
          v74 = (unint64_t *)&v88->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v50 += 2;
        if (v50 == (unint64_t *)v51)
        {
          v50 = (unint64_t *)__p;
          if (__p)
          {
LABEL_139:
            v76 = v90;
            v77 = v50;
            if (v90 != (uint64_t *)v50)
            {
              do
              {
                v78 = (std::__shared_weak_count *)*(v76 - 1);
                if (v78)
                {
                  v79 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                v76 -= 2;
              }
              while (v76 != (uint64_t *)v50);
              v77 = __p;
            }
            v90 = (uint64_t *)v50;
            operator delete(v77);
          }
LABEL_149:
          v81 = v92;
          v3 = v49;
          if (!v92)
            goto LABEL_153;
          v82 = (unint64_t *)&v92->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
            v84 = (_QWORD *)v24[1];
            if (v84)
              goto LABEL_154;
          }
          else
          {
LABEL_153:
            v84 = (_QWORD *)v24[1];
            if (v84)
            {
              do
              {
LABEL_154:
                v85 = v84;
                v84 = (_QWORD *)*v84;
              }
              while (v84);
              goto LABEL_91;
            }
          }
          do
          {
            v85 = (_QWORD *)v24[2];
            v45 = *v85 == (_QWORD)v24;
            v24 = v85;
          }
          while (!v45);
LABEL_91:
          v24 = v85;
          if (v85 == v86)
            return;
          continue;
        }
        goto LABEL_99;
      }
    }
    while (2)
    {
      v25 = (std::__shared_weak_count *)v22[5];
      v91 = v22[4];
      v92 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = (uint64_t *)__p;
      v29 = v90;
      if (__p == v90)
      {
        if (__p)
          goto LABEL_59;
LABEL_77:
        v40 = v92;
        if (!v92)
          goto LABEL_84;
LABEL_81:
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (v42)
          goto LABEL_84;
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v43 = (uint64_t **)v22[1];
        if (!v43)
          goto LABEL_88;
        do
        {
LABEL_85:
          v44 = (uint64_t ***)v43;
          v43 = (uint64_t **)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          v32 = (std::__shared_weak_count *)v28[1];
          v87 = *v28;
          v88 = v32;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext const&)::{lambda(std::shared_ptr<md::ElevatedStrokeTileData> const&,unsigned char,std::shared_ptr<md::DaVinciGroundTileData> const&)#1}::operator()(v93, (uint64_t *)&v91, *((_BYTE *)v22 + 48), &v87);
          if (v32)
          {
            v35 = (unint64_t *)&v32->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v28 += 2;
        }
        while (v28 != v29);
        v28 = (uint64_t *)__p;
        if (!__p)
          goto LABEL_77;
LABEL_59:
        v30 = v90;
        v31 = v28;
        if (v90 != v28)
        {
          do
          {
            v37 = (std::__shared_weak_count *)*(v30 - 1);
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v30 -= 2;
          }
          while (v30 != v28);
          v31 = __p;
        }
        v90 = v28;
        operator delete(v31);
        v40 = v92;
        if (v92)
          goto LABEL_81;
LABEL_84:
        v43 = (uint64_t **)v22[1];
        if (v43)
          goto LABEL_85;
        do
        {
LABEL_88:
          v44 = (uint64_t ***)v22[2];
          v45 = *v44 == v22;
          v22 = (uint64_t **)v44;
        }
        while (!v45);
      }
      v22 = (uint64_t **)v44;
      if (v44 == v23)
        goto LABEL_51;
      continue;
    }
  }
}

void sub_19F1457E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t *v7;
  unsigned __int16 *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17[2];

  v2 = *(unsigned __int16 *)(a1 + 450);
  v3 = *a2;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    a1 = v16;
    if (v15)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      a1 = v16;
    }
  }
  v5 = *(unsigned __int16 **)(v3 + 48);
  v6 = *(unsigned __int16 **)(v3 + 56);
  v7 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v5 != v6)
  {
    v8 = *(unsigned __int16 **)(v3 + 48);
    while (*v8 != v2)
    {
      v8 += 16;
      if (v8 == v6)
        goto LABEL_13;
    }
    if (v8 == v6)
    {
      v7 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v5 != v2)
      {
        v5 += 16;
        if (v5 == v6)
        {
          v5 = *(unsigned __int16 **)(v3 + 56);
          break;
        }
      }
      v7 = (uint64_t *)(v5 + 4);
    }
  }
LABEL_13:
  v10 = *(uint64_t **)(a1 + 272);
  v9 = *(uint64_t **)(a1 + 280);
  v17[0] = a1;
  v17[1] = (uint64_t)v7;
  if (v10 != v9)
  {
    while (md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(v17, *v10))
    {
      ++v10;
LABEL_16:
      if (v10 == v9)
        return v9;
    }
    v11 = v9 - 1;
    while (v11 != v10)
    {
      v9 = v11;
      v12 = *v11--;
      if (md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(v17, v12))
      {
        v13 = *v10;
        *v10++ = *v9;
        *v9 = v13;
        goto LABEL_16;
      }
    }
  }
  return v10;
}

BOOL md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  _BOOL8 v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v23;
  BOOL v24;
  unint64_t v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  _BOOL4 v35;
  _BOOL4 v36;
  unint64_t *v37;
  unint64_t v38;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 384);
  v4 = *(std::__shared_weak_count **)(a2 + 392);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a2 + 400);
  v8 = *(std::__shared_weak_count **)(a2 + 408);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(unsigned __int8 *)(a2 + 48);
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(uint64_t ***)(v2 + 136);
  if (!v14)
  {
LABEL_11:
    v15 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(v2 + 88), (unsigned __int8 *)(v3 + 16)) != 0;
    goto LABEL_12;
  }
  while (1)
  {
    v23 = *((unsigned __int8 *)v14 + 48);
    v24 = *((char *)v14 + 48) > (char)v11;
    v25 = (unint64_t)v14[4];
    if (v11 == v23)
      v24 = v3 < v25;
    if (v24)
      goto LABEL_28;
    v26 = v25 < v3;
    v27 = v11 == v23 ? v26 : (char)v23 < (char)v11;
    if (v27 != 1)
      break;
    ++v14;
LABEL_28:
    v14 = (uint64_t **)*v14;
    if (!v14)
      goto LABEL_11;
  }
  v28 = a1[1];
  if (v8)
  {
    v29 = (unint64_t *)&v8->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(uint64_t ***)(v28 + 8);
  if (!v31)
  {
LABEL_41:
    v15 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(v2 + 88), (unsigned __int8 *)(v3 + 16)) != 0;
    if (v8)
      goto LABEL_53;
    goto LABEL_12;
  }
  while (2)
  {
    v32 = *((unsigned __int8 *)v31 + 48);
    v33 = *((char *)v31 + 48) > (char)v11;
    v34 = (unint64_t)v31[4];
    if (v11 == v32)
      v33 = v7 < v34;
    if (v33)
    {
LABEL_43:
      v31 = (uint64_t **)*v31;
      if (!v31)
        goto LABEL_41;
      continue;
    }
    break;
  }
  v35 = v34 < v7;
  if (v11 == v32)
    v36 = v35;
  else
    v36 = (char)v32 < (char)v11;
  if (v36)
  {
    ++v31;
    goto LABEL_43;
  }
  v15 = 1;
  if (v8)
  {
LABEL_53:
    v37 = (unint64_t *)&v8->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_12:
  if (v4)
  {
    v16 = (unint64_t *)&v4->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8)
  {
    v18 = (unint64_t *)&v8->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v4)
  {
    v20 = (unint64_t *)&v4->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v15;
}

_QWORD **md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t *v17;
  unsigned __int16 *v18;

  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateLayerDataInfo((uint64_t *)a1, a2);
  v4 = (uint64_t *)(a1 + 352);
  v5 = (_QWORD *)(a1 + 376);
  v6 = a1 + 360;
  v7 = *(_OWORD *)(a1 + 352);
  v8 = *(_QWORD *)(a1 + 384);
  v9 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v7;
  v10 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v9;
  *(_QWORD *)(a1 + 392) = v10;
  v11 = (_QWORD *)(v8 + 16);
  if (!v9)
    v11 = (_QWORD *)(a1 + 352);
  *v11 = v6;
  if (v10)
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 384) + 16);
  *v5 = a1 + 384;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 360));
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = v6;
  v12 = *(unsigned __int16 *)(a1 + 450);
  v13 = *a2;
  if ((v14 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v15 = *(unsigned __int16 **)(v13 + 48);
  v16 = *(unsigned __int16 **)(v13 + 56);
  v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v15 != v16)
  {
    v18 = *(unsigned __int16 **)(v13 + 48);
    while (*v18 != v12)
    {
      v18 += 16;
      if (v18 == v16)
        goto LABEL_17;
    }
    if (v18 == v16)
    {
      v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v15 != v12)
      {
        v15 += 16;
        if (v15 == v16)
        {
          v15 = *(unsigned __int16 **)(v13 + 56);
          break;
        }
      }
      v17 = (uint64_t *)(v15 + 4);
    }
  }
LABEL_17:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v17, v17 + 1);
  return md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::LayerDataInfo::update(v4);
}

_QWORD **md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateLayerDataInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unsigned __int16 *v12;
  unsigned __int16 *i;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  int v21;
  uint64_t v23;
  int v24;

  v3 = a1 + 16;
  v4 = *((_OWORD *)a1 + 8);
  v5 = a1 + 20;
  v6 = a1[20];
  a1[17] = v6;
  v7 = (uint64_t)(a1 + 17);
  a1[16] = a1[19];
  *(_OWORD *)(a1 + 19) = v4;
  v8 = a1[18];
  v9 = a1[21];
  a1[18] = v9;
  a1[21] = v8;
  v10 = (uint64_t *)(v6 + 16);
  if (!v9)
    v10 = a1 + 16;
  *v10 = v7;
  v11 = (_QWORD *)(*v5 + 16);
  if (!v8)
    v11 = a1 + 19;
  *v11 = v5;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v7);
  *v3 = v7;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  v12 = *(unsigned __int16 **)(v7 + 184);
  for (i = *(unsigned __int16 **)(v7 + 192); v12 != i; ++v12)
  {
    v15 = *v12;
    v16 = *a2;
    if ((v17 & 1) == 0)
    {
      v24 = *v12;
      v23 = *a2;
      v16 = v23;
      v15 = v24;
      if (v21)
      {
        qword_1ECE2F300 = 0;
        qword_1ECE2F2F8 = 0;
        md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
        __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
        v16 = v23;
        v15 = v24;
      }
    }
    v18 = *(unsigned __int16 **)(v16 + 48);
    v19 = *(unsigned __int16 **)(v16 + 56);
    if (v18 == v19)
      goto LABEL_7;
    v20 = v18;
    while (*v20 != v15)
    {
      v20 += 16;
      if (v20 == v19)
        goto LABEL_7;
    }
    if (v20 == v19)
    {
LABEL_7:
      v14 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v15)
      {
        v18 += 16;
        if (v18 == v19)
        {
          v18 = v19;
          break;
        }
      }
      v14 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v3, (_QWORD *)*v14, v14 + 1);
  }
  return md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::LayerDataInfo::update(v3);
}

void md::SceneStateManager::updateTileSets(md::SceneStateManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *j;
  _QWORD *m;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t k;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t n;

  if (*((_QWORD *)this + 4))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 3);
    if (v2)
    {
      do
      {
        v29 = (_QWORD *)*v2;
        v30 = (void *)v2[16];
        if (v30 != (void *)v2[18])
          free(v30);
        if (*((_BYTE *)v2 + 112))
          *((_BYTE *)v2 + 112) = 0;
        v31 = (void *)v2[4];
        if (v31 != (void *)v2[6])
          free(v31);
        operator delete(v2);
        v2 = v29;
      }
      while (v29);
    }
    *((_QWORD *)this + 3) = 0;
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * i) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::clear((_QWORD *)this + 9);
  for (j = (_QWORD *)*((_QWORD *)this + 46); j; j = (_QWORD *)*j)
  {
    if (j[6])
    {
      v32 = (_QWORD *)j[5];
      if (v32)
      {
        do
        {
          v33 = (_QWORD *)*v32;
          operator delete(v32);
          v32 = v33;
        }
        while (v33);
      }
      j[5] = 0;
      v34 = j[4];
      if (v34)
      {
        for (k = 0; k != v34; ++k)
          *(_QWORD *)(j[3] + 8 * k) = 0;
      }
      j[6] = 0;
    }
  }
  for (m = (_QWORD *)*((_QWORD *)this + 51); m; m = (_QWORD *)*m)
  {
    if (m[6])
    {
      v36 = (_QWORD *)m[5];
      if (v36)
      {
        do
        {
          v37 = (_QWORD *)*v36;
          operator delete(v36);
          v36 = v37;
        }
        while (v37);
      }
      m[5] = 0;
      v38 = m[4];
      if (v38)
      {
        for (n = 0; n != v38; ++n)
          *(_QWORD *)(m[3] + 8 * n) = 0;
      }
      m[6] = 0;
    }
  }
  v7 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7);
  if (v7 != v8)
  {
    v9 = v7 + 16;
    do
    {
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v9);
      *(_QWORD *)(v9 - 8) = v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v10 = v9 + 16;
      v9 += 32;
    }
    while (v10 != v8);
  }
  v11 = *((_QWORD *)this + 14);
  v12 = *((_QWORD *)this + 15);
  if (v11 != v12)
  {
    while (*(_WORD *)v11)
    {
      v11 += 112;
      if (v11 == v12)
      {
        v11 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v11 + 8), 0);
  v13 = *((_QWORD *)this + 14);
  v14 = *((_QWORD *)this + 15);
  if (v13 != v14)
  {
    while (*(_WORD *)v13 != 1)
    {
      v13 += 112;
      if (v13 == v14)
      {
        v13 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v13 + 8), 1u);
  v15 = *((_QWORD *)this + 14);
  v16 = *((_QWORD *)this + 15);
  if (v15 != v16)
  {
    while (*(_WORD *)v15 != 2)
    {
      v15 += 112;
      if (v15 == v16)
      {
        v15 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v15 + 8), 2u);
  v17 = *((_QWORD *)this + 14);
  v18 = *((_QWORD *)this + 15);
  if (v17 != v18)
  {
    while (*(_WORD *)v17 != 3)
    {
      v17 += 112;
      if (v17 == v18)
      {
        v17 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v17 + 8), 3u);
  v19 = *((_QWORD *)this + 14);
  v20 = *((_QWORD *)this + 15);
  if (v19 != v20)
  {
    while (*(_WORD *)v19 != 4)
    {
      v19 += 112;
      if (v19 == v20)
      {
        v19 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v19 + 8), 4u);
  v21 = *((_QWORD *)this + 14);
  v22 = *((_QWORD *)this + 15);
  if (v21 != v22)
  {
    while (*(_WORD *)v21 != 5)
    {
      v21 += 112;
      if (v21 == v22)
      {
        v21 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v21 + 8), 5u);
  v23 = *((_QWORD *)this + 14);
  v24 = *((_QWORD *)this + 15);
  if (v23 != v24)
  {
    while (*(_WORD *)v23 != 6)
    {
      v23 += 112;
      if (v23 == v24)
      {
        v23 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v23 + 8), 6u);
  v25 = *((_QWORD *)this + 14);
  v26 = *((_QWORD *)this + 15);
  if (v25 != v26)
  {
    while (*(_WORD *)v25 != 7)
    {
      v25 += 112;
      if (v25 == v26)
      {
        v25 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v25 + 8), 7u);
  v27 = *((_QWORD *)this + 14);
  v28 = *((_QWORD *)this + 15);
  if (v27 != v28)
  {
    while (*(_WORD *)v27 != 8)
    {
      v27 += 112;
      if (v27 == v28)
      {
        v27 = *((_QWORD *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v27 + 8), 8u);
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::TransitTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::TransitTileDataRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 424 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F146664(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::renderablesWillLeaveView(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t **)(a1 + 448);
    do
    {
      v5 = *v2;
      std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(v4, *(_QWORD *)(*v2 + 384), *(_QWORD *)(*v2 + 384), *(_QWORD *)(*v2 + 392));
      v6 = *(void **)(v5 + 408);
      if (v6)
      {
        objc_msgSend(v6, "stop");
        v7 = *(void **)(v5 + 408);
        if (v7)
        {
          *(_QWORD *)(v5 + 408) = 0;

        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::RasterTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

_QWORD **md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

_QWORD **md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::LayerDataInfo::update(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8[3];
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = a1 + 7;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a1[7]);
  a1[6] = (uint64_t)v2;
  a1[8] = 0;
  *v2 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a1[10]);
  a1[9] = (uint64_t)(a1 + 10);
  a1[11] = 0;
  a1[10] = 0;
  v3 = a1[3];
  v4 = a1[6];
  v14 = *a1;
  v12 = v3;
  v13 = a1 + 1;
  v10 = v4;
  v11 = a1 + 4;
  v9 = a1 + 6;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v8, (uint64_t)&v14, &v13, (uint64_t)&v12, &v11, &v9);
  v5 = *a1;
  v6 = a1[9];
  v14 = a1[3];
  v12 = v5;
  v13 = a1 + 4;
  v10 = v6;
  v11 = a1 + 1;
  v9 = a1 + 9;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v8, (uint64_t)&v14, &v13, (uint64_t)&v12, &v11, &v9);
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::RoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void std::__tree<gdc::LayerDataWithWorld>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<gdc::LayerDataWithWorld>::destroy(*a1);
    std::__tree<gdc::LayerDataWithWorld>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[5];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

void geo::Pool<md::MapTileDataRenderable<md::RasterTileData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F146F38(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::Pool<md::RoadTileDataRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 408 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F1471B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::clear(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (!a1[3])
    return;
  v2 = (_QWORD *)a1[2];
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[6];
    if (!v6)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_14:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_13:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_14;
    }
    operator delete(v5);
  }
  a1[2] = 0;
  v3 = a1[1];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
  }
  a1[3] = 0;
}

void md::RoadRenderLayer::renderablesWillLeaveView(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 384);
      v6 = *(_QWORD *)(v5 + 720);
      if (v6)
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 480), v6);
      v7 = *(_QWORD *)(v5 + 736);
      if (v7)
        md::RoadStyling::unsubscribeLayer(*(uint64_t **)(a1 + 480), v7);
      v2 += 8;
    }
    while (v2 != v3);
  }
}

void `anonymous namespace'::_evaluateOverlappingDataOfType(char **a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t *v17;
  unsigned __int16 *v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  __int128 v60;
  std::__shared_weak_count *v61;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a3;
  v6 = (std::__shared_weak_count *)a3[1];
  v61 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(unsigned __int8 *)(v5 + 169);
  v10 = *(_DWORD *)(v5 + 172);
  v59 = *(_DWORD *)(v5 + 176);
  v11 = *(unsigned __int8 *)(v5 + 168);
  v12 = *((unsigned __int8 *)a3 + 16);
  v13 = *a2;
  if ((v14 & 1) == 0)
  {
    v56 = a4;
    a4 = v56;
    if (v57)
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      a4 = v56;
    }
  }
  v15 = *(unsigned __int16 **)(v13 + 48);
  v16 = *(unsigned __int16 **)(v13 + 56);
  v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v15 == v16)
  {
    v19 = v59;
  }
  else
  {
    v18 = *(unsigned __int16 **)(v13 + 48);
    v19 = v59;
    while (*v18 != a4)
    {
      v18 += 16;
      if (v18 == v16)
        goto LABEL_17;
    }
    if (v18 == v16)
    {
      v17 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v15 != a4)
      {
        v15 += 16;
        if (v15 == v16)
        {
          v15 = v16;
          break;
        }
      }
      v17 = (uint64_t *)(v15 + 4);
    }
  }
LABEL_17:
  v22 = *v17;
  v20 = v17 + 1;
  v21 = (_QWORD *)v22;
  if ((uint64_t *)v22 == v20)
    goto LABEL_82;
  v58 = v10;
  do
  {
    if (*((char *)v21 + 48) != v12)
    {
LABEL_74:
      v51 = (uint64_t *)v21[1];
      if (v51)
        goto LABEL_75;
      goto LABEL_78;
    }
    v23 = v21[4];
    v24 = (std::__shared_weak_count *)v21[5];
    *(_QWORD *)&v60 = v23;
    *((_QWORD *)&v60 + 1) = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    if (v11 == *(unsigned __int8 *)(v23 + 168))
    {
      v27 = *(unsigned __int8 *)(v23 + 169);
      v28 = v9 - v27;
      if (v9 >= v27)
      {
        if (v9 == v27 && v10 == *(_DWORD *)(v23 + 172) && v19 == *(_DWORD *)(v23 + 176))
          goto LABEL_39;
      }
      else if (v10 == *(int *)(v23 + 172) >> (v27 - v9) && v19 == *(int *)(v23 + 176) >> (v27 - v9))
      {
LABEL_39:
        v30 = a1[1];
        v29 = (unint64_t)a1[2];
        if ((unint64_t)v30 >= v29)
        {
          v34 = *a1;
          v35 = (v30 - *a1) >> 4;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 60)
            abort();
          v37 = v29 - (_QWORD)v34;
          if (v37 >> 3 > v36)
            v36 = v37 >> 3;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
            v38 = 0xFFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v39 = (char *)operator new(16 * v38);
          v40 = &v39[16 * v35];
          *(_OWORD *)v40 = v60;
          if (*((_QWORD *)&v60 + 1))
          {
            v41 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            v34 = *a1;
            v30 = a1[1];
          }
          v43 = &v39[16 * v38];
          v33 = v40 + 16;
          if (v30 == v34)
          {
            *a1 = v40;
            a1[1] = v33;
            a1[2] = v43;
          }
          else
          {
            v44 = v30;
            do
            {
              v45 = *((_OWORD *)v44 - 1);
              v44 -= 16;
              *((_OWORD *)v40 - 1) = v45;
              v40 -= 16;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
            }
            while (v44 != v34);
            *a1 = v40;
            a1[1] = v33;
            a1[2] = v43;
            do
            {
              v46 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
              if (v46)
              {
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              v30 -= 16;
            }
            while (v30 != v34);
          }
          if (v34)
            operator delete(v34);
          v10 = v58;
          v19 = v59;
        }
        else
        {
          *(_QWORD *)v30 = v23;
          *((_QWORD *)v30 + 1) = v24;
          if (v24)
          {
            v31 = (unint64_t *)&v24->__shared_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v33 = v30 + 16;
          v10 = v58;
        }
        a1[1] = v33;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        goto LABEL_70;
      }
      if (v27 >= v9)
      {
        if (v27 != v9 || *(_DWORD *)(v23 + 172) != v10 || *(_DWORD *)(v23 + 176) != v19)
          goto LABEL_70;
      }
      else if (*(_DWORD *)(v23 + 172) != v10 >> v28 || *(_DWORD *)(v23 + 176) != v19 >> v28)
      {
        goto LABEL_70;
      }
      goto LABEL_39;
    }
LABEL_70:
    if (!v24)
      goto LABEL_74;
    v49 = (unint64_t *)&v24->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (v50)
      goto LABEL_74;
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v51 = (uint64_t *)v21[1];
    if (v51)
    {
      do
      {
LABEL_75:
        v52 = v51;
        v51 = (uint64_t *)*v51;
      }
      while (v51);
      goto LABEL_19;
    }
    do
    {
LABEL_78:
      v52 = (uint64_t *)v21[2];
      v53 = *v52 == (_QWORD)v21;
      v21 = v52;
    }
    while (!v53);
LABEL_19:
    v21 = v52;
  }
  while (v52 != v20);
  v6 = v61;
LABEL_82:
  if (v6)
  {
    v54 = (unint64_t *)&v6->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19F14778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  md::DynamicTrafficTileList *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(v3);
  _Unwind_Resume(a1);
}

void md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext const&)::{lambda(std::shared_ptr<md::ElevatedStrokeTileData> const&,unsigned char,std::shared_ptr<md::DaVinciGroundTileData> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unsigned __int8 v40[4];
  uint64_t v41;

  v8 = *a1;
  v9 = (_QWORD *)*a4;
  *(_WORD *)v40 = *(_WORD *)(*a4 + 168);
  v41 = *(_QWORD *)((char *)v9 + 172);
  v10 = *((double *)v9 + 75);
  v11 = *((double *)v9 + 76);
  md::LayoutContext::frameState((md::LayoutContext *)a1[2]);
  v13 = *(unsigned __int8 *)(v12 + 128);
  md::GeometryContext::transformConstantData((double *)&v38, (uint64_t *)a1[3], v40, v13, v10, v11);
  v14 = *(_QWORD **)(v8 + 264);
  if (!v14)
  {
    geo::Pool<md::ElevatedPolygonRenderable>::allocateSlab((uint64_t **)(v8 + 224));
    v14 = *(_QWORD **)(v8 + 264);
  }
  *(_QWORD *)(v8 + 264) = *v14;
  md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::PairedMapTileDataRenderable((uint64_t)v14, a2, a3, (v13 - 1) < 3u, &v38, a4);
  *v14 = &off_1E426F858;
  v15 = a1[1];
  v17 = *(_QWORD **)(v15 + 8);
  v16 = *(_QWORD *)(v15 + 16);
  if ((unint64_t)v17 >= v16)
  {
    v19 = *(_BYTE **)v15;
    v20 = (uint64_t)v17 - *(_QWORD *)v15;
    v21 = v20 >> 3;
    v22 = (v20 >> 3) + 1;
    if (v22 >> 61)
      abort();
    v23 = v16 - (_QWORD)v19;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v25 = operator new(8 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v14;
    v18 = v26 + 1;
    if (v17 == (_QWORD *)v19)
    {
      v19 = v17;
    }
    else
    {
      v28 = (char *)v17 - v19 - 8;
      if (v28 < 0x58)
        goto LABEL_36;
      if ((unint64_t)((char *)v17 - v25 - v20) < 0x20)
        goto LABEL_36;
      v29 = (v28 >> 3) + 1;
      v30 = &v25[8 * v21 - 16];
      v31 = (__int128 *)(v17 - 2);
      v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *v31;
        *(v30 - 1) = *(v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 2;
        v32 -= 4;
      }
      while (v32);
      v26 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
      v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          v34 = *--v17;
          *--v26 = v34;
        }
        while (v17 != (_QWORD *)v19);
        v19 = *(_BYTE **)v15;
      }
    }
    *(_QWORD *)v15 = v26;
    *(_QWORD *)(v15 + 8) = v18;
    *(_QWORD *)(v15 + 16) = v27;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v17 = v14;
    v18 = v17 + 1;
  }
  *(_QWORD *)(v15 + 8) = v18;
  v35 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_19F147A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::GeometryContext::transformConstantData(double *a1, uint64_t *a2, unsigned __int8 *a3, int a4, double a5, double a6)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  float *v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  int v53;
  int v54;
  unsigned __int32 v55;
  int v56;
  int v57;
  double v58;
  double v59;
  unsigned __int8 v60;
  double v61;
  uint64_t v62;
  int v63;
  double v64;
  float v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float v71;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  float v82;
  float v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  int v95;
  long double v96;
  long double v97;
  long double v98;
  long double v99;
  long double v100;
  long double v101;
  long double v102;
  double v103;
  long double v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  double v128;
  double v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  __int128 v137;
  unsigned int v138;
  __int128 v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  __int128 v151;
  unint64_t v152;
  unint64_t v153;
  __int16 v154;
  float *v155;
  _BYTE v156[20];
  int v157;
  double v158;
  __int128 v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  double __b;
  double v185;
  double v186;
  double v187;

  if ((a4 - 1) <= 2 && *a3 == 255)
  {
    v10 = a3[1];
    HIDWORD(v137) = vcvtmd_s64_f64(a5 * 100.0);
    DWORD2(v137) = v10;
    *(_QWORD *)&v137 = *(_QWORD *)(a3 + 4);
    v138 = vcvtpd_s64_f64(a6 * 100.0);
    v11 = a2 + 20;
    v12 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(a2 + 23, (int *)&v137);
    if (v12)
    {
      v13 = v12;
      v14 = (uint64_t *)geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::_elementAccessed(v11, (uint64_t *)v12[5]);
      v13[5] = (uint64_t)v14;
      if (v11 != v14)
      {
        *(_QWORD *)a1 = v14[5];
        v15 = v14[6];
        *((_QWORD *)a1 + 1) = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        return;
      }
    }
    v26 = operator new(0xE8uLL);
    v26[1] = 0;
    v26[2] = 0;
    *v26 = &off_1E42E22E8;
    ggl::BufferData::BufferData((uint64_t)(v26 + 3), qword_1EE54AFA0, 2, 1, 6, 1);
    v26[28] = ggl::Tile::Transform::reflection(void)::reflection;
    v26[3] = &off_1E42B97F0;
    *(_QWORD *)a1 = v26 + 3;
    *((_QWORD *)a1 + 1) = v26;
    v27 = 1 << a3[1];
    v28 = 1.0 / (double)v27;
    v29 = v28 * (double)(v27 + ~*((_DWORD *)a3 + 1));
    v30 = v28 * (double)*((int *)a3 + 2) + v28;
    *(double *)&v139 = v28 * (double)*((int *)a3 + 2);
    *((double *)&v139 + 1) = v29;
    v140 = v30;
    v141 = v29 + v28;
    gdc::GlobeTileUtils::createSplinePatchFromMercatorRect((uint64_t)v156, (double *)&v139, a5, a6);
    v151 = 0uLL;
    v31 = v26[4];
    *(_QWORD *)&v32 = 0;
    *((_QWORD *)&v32 + 1) = v26 + 3;
    v33 = v26[12];
    v151 = v32;
    v155 = (float *)v33;
    v154 = 1;
    DWORD2(v32) = *(_DWORD *)&v156[8];
    *(_QWORD *)(v33 + 32) = *(_QWORD *)v156;
    *(_DWORD *)(v33 + 40) = DWORD2(v32);
    *(_DWORD *)(v33 + 44) = 1065353216;
    v34 = *(_QWORD *)&v156[12];
    *(_DWORD *)(v33 + 56) = v157;
    *(_QWORD *)(v33 + 48) = v34;
    *(_DWORD *)(v33 + 60) = 1065353216;
    v35 = v158;
    v36 = HIDWORD(v159);
    *(_DWORD *)(v33 + 72) = v159;
    *(double *)(v33 + 64) = v35;
    *(_DWORD *)(v33 + 76) = 1065353216;
    v37 = *(_QWORD *)((char *)&v159 + 4);
    *(_DWORD *)(v33 + 88) = v36;
    *(_QWORD *)(v33 + 80) = v37;
    *(_DWORD *)(v33 + 92) = 1065353216;
    *(_QWORD *)&v32 = v160;
    *(_DWORD *)(v33 + 104) = v161;
    *(_QWORD *)(v33 + 96) = v32;
    *(_DWORD *)(v33 + 108) = 1065353216;
    v38 = v162;
    *(_DWORD *)(v33 + 120) = v163;
    *(_QWORD *)(v33 + 112) = v38;
    v39 = v164;
    v40 = v167;
    *(_DWORD *)(v33 + 136) = v165;
    *(_QWORD *)(v33 + 128) = v39;
    *(_QWORD *)&v32 = v168;
    *(_DWORD *)(v33 + 168) = v169;
    *(_DWORD *)(v33 + 124) = 1065353216;
    *(_DWORD *)(v33 + 140) = 1065353216;
    *(_DWORD *)(v33 + 152) = v40;
    *(_QWORD *)(v33 + 160) = v32;
    *(_DWORD *)(v33 + 184) = v171;
    v41 = v175;
    *(_DWORD *)(v33 + 200) = v173;
    v152 = 0;
    v153 = v31;
    *(_QWORD *)(v33 + 144) = v166;
    *(_DWORD *)(v33 + 156) = 1065353216;
    *(_DWORD *)(v33 + 172) = 1065353216;
    *(_QWORD *)(v33 + 176) = v170;
    *(_DWORD *)(v33 + 188) = 1065353216;
    *(_QWORD *)(v33 + 192) = v172;
    *(_DWORD *)(v33 + 204) = 1065353216;
    v42 = v174;
    *(_DWORD *)(v33 + 216) = v41;
    *(_QWORD *)(v33 + 208) = v42;
    *(_QWORD *)&v32 = v176;
    *(_DWORD *)(v33 + 232) = v177;
    *(_DWORD *)(v33 + 220) = 1065353216;
    *(_QWORD *)(v33 + 224) = v32;
    *(_DWORD *)(v33 + 236) = 1065353216;
    v43 = v178;
    *(_DWORD *)(v33 + 248) = v179;
    *(_QWORD *)(v33 + 240) = v43;
    *(_DWORD *)(v33 + 252) = 1065353216;
    v44 = v180;
    *(_DWORD *)(v33 + 264) = v181;
    *(_QWORD *)(v33 + 256) = v44;
    *(_DWORD *)(v33 + 268) = 1065353216;
    v45 = v182;
    *(_DWORD *)(v33 + 280) = v183;
    *(_QWORD *)(v33 + 272) = v45;
    *(_DWORD *)(v33 + 284) = 1065353216;
    LODWORD(v33) = 1 << a3[1];
    v46 = 1.0 / (double)(int)v33;
    *(double *)&v32 = v46 * (double)((int)v33 + ~*((_DWORD *)a3 + 1));
    v47 = gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(*(double *)&v32, *(double *)&v32 + v46);
    v48 = v155;
    *v155 = v47;
    *((_DWORD *)v48 + 1) = v49;
    *((_DWORD *)v48 + 2) = v50;
    *((_DWORD *)v48 + 3) = v51;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend(v52, "daVinciGlobeScalingCorrection");
    v54 = 0;
    v55 = 1.0;
    v56 = 0;
    if (v53)
    {
      v57 = 1 << a3[1];
      v58 = 1.0 / (double)v57;
      v59 = v58 * (double)(v57 + ~*((_DWORD *)a3 + 1));
      v55 = gdc::GlobeTileUtils::computeMercatorScaleCoeffs(v59, v59 + v58).n128_u32[0];
    }
    *((_DWORD *)v48 + 4) = v55;
    *((_DWORD *)v48 + 5) = v54;
    *((_DWORD *)v48 + 6) = v56;

    v60 = a3[1];
    v61 = 1.0 / (double)(1 << v60);
    v62 = *((int *)a3 + 2);
    v63 = (1 << v60) + ~*((_DWORD *)a3 + 1);
    __b = v61 * (double)v62;
    v185 = v61 * (double)v63;
    v186 = v61 + (double)v62 * v61;
    v187 = v61 + (double)v63 * v61;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v139, &__b, a5, a6);
    __powidf2();
    v65 = v64 * 0.0000000249532021;
    v66 = v147;
    v67 = v148;
    v69 = v149;
    v68 = v150;
    v70 = v150 - v147;
    v71 = (float)(1.0 / v65) / (v150 - v147);
    v48[85] = v71;
    __asm { FMOV            V1.2S, #1.0 }
    *((_QWORD *)v48 + 43) = _D1;
    v48[84] = 0.0;
    v78 = v145;
    v77 = v146;
    v79 = v67 - v145;
    v80 = v69 - v146;
    v81 = v65;
    v82 = (v69 - v146) * v81;
    v83 = (v67 - v145) * v81;
    *(float *)&v81 = v70 * v81;
    v48[76] = v83;
    v48[77] = v82;
    v48[78] = *(float *)&v81;
    if (v67 < v78 || v69 < v77 || v68 < v66)
    {
      memset_pattern16(&__b, &unk_19FFB63B0, 0x18uLL);
      v87 = __b;
      v88 = v185;
      v89 = v186;
    }
    else
    {
      v84 = -(*(double *)&v139 * v143 - v140 * v141) - (*(double *)&v139 * v143 - v140 * v141);
      v85 = -(v140 * v142 - *((double *)&v139 + 1) * v143) - (v140 * v142 - *((double *)&v139 + 1) * v143);
      v86 = -(*((double *)&v139 + 1) * v141 - *(double *)&v139 * v142)
          - (*((double *)&v139 + 1) * v141
           - *(double *)&v139 * v142);
      v87 = -(v78 + *(double *)&v139 + v85 * v144 + v84 * v143 - v86 * v142) / v79;
      v88 = -(v86 * v141 - (-(*((double *)&v139 + 1) + v77 - v85 * v143) - v84 * v144)) / v80;
      v89 = -(v66 + v140 + v85 * v142 + v86 * v144 - v84 * v141) / v70;
    }
    v115 = v89;
    v116 = v88;
    v117 = v87;
    v48[72] = v117;
    v48[73] = v116;
    v48[74] = v115;
    v48[75] = 1.0;
    v118 = v80;
    v119 = v79;
    v120 = v70;
    v48[80] = v119;
    v48[81] = v118;
    v48[82] = v120;
    v122 = v152;
    v121 = v153;
    if (v153 != v152)
    {
      v123 = (_QWORD *)*((_QWORD *)&v151 + 1);
      v124 = v154;
      v125 = HIBYTE(v154);
      if ((_QWORD)v151 && *(_BYTE *)(*((_QWORD *)&v151 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v151 + 64))();
      if (v124 && !v125)
      {
        v127 = v123[7];
        v126 = v123[8];
        if (v126 == v127)
          v127 = v123[10] - v123[9];
        if (v122 < v127)
          v127 = v122;
        if (v126 <= v121)
          v126 = v121;
        if (v126 == v127)
          v126 = v127 + v123[10] - v123[9];
        v123[7] = v127;
        v123[8] = v126;
      }
    }
    v139 = v137;
    LODWORD(v140) = v138;
    v128 = *a1;
    v129 = a1[1];
    v141 = *a1;
    v142 = v129;
    if (v129 == 0.0)
    {
      *(_OWORD *)v156 = v137;
      *(_DWORD *)&v156[16] = v138;
      v158 = v128;
      *(_QWORD *)&v159 = 0;
    }
    else
    {
      v130 = (unint64_t *)(*(_QWORD *)&v129 + 8);
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
      *(_OWORD *)v156 = v139;
      *(_DWORD *)&v156[16] = LODWORD(v140);
      v158 = v128;
      *(double *)&v159 = v129;
      do
        v132 = __ldxr(v130);
      while (__stxr(v132 + 1, v130));
    }
    *((_QWORD *)&v159 + 1) = 0;
    geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::insert(v11, (int *)v156);
    v133 = (std::__shared_weak_count *)v159;
    if ((_QWORD)v159)
    {
      v134 = (unint64_t *)(v159 + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v112 = *(std::__shared_weak_count **)&v142;
    if (v142 != 0.0)
    {
      v136 = (unint64_t *)(*(_QWORD *)&v142 + 8);
      do
        v114 = __ldaxr(v136);
      while (__stlxr(v114 - 1, v136));
      goto LABEL_67;
    }
  }
  else
  {
    *(_QWORD *)&v151 = *(_QWORD *)(a3 + 4);
    v18 = a3[1];
    LODWORD(v152) = 0;
    *((_QWORD *)&v151 + 1) = v18;
    v19 = a2 + 30;
    v20 = std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(a2 + 33, (int *)&v151);
    if (!v20
      || (v21 = v20,
          v22 = (uint64_t *)geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::_elementAccessed(v19, (uint64_t *)v20[5]), v21[5] = (uint64_t)v22, v19 == v22))
    {
      v90 = COERCE_DOUBLE(operator new(0xE8uLL));
      *(_QWORD *)(*(_QWORD *)&v90 + 8) = 0;
      v91 = (unint64_t *)(*(_QWORD *)&v90 + 8);
      *(_QWORD *)(*(_QWORD *)&v90 + 16) = 0;
      **(_QWORD **)&v90 = &off_1E42E22E8;
      ggl::BufferData::BufferData(*(_QWORD *)&v90 + 24, qword_1EE54AFA0, 2, 1, 6, 1);
      *(_QWORD *)(*(_QWORD *)&v90 + 224) = ggl::Tile::Transform::reflection(void)::reflection;
      *(_QWORD *)(*(_QWORD *)&v90 + 24) = &off_1E42B97F0;
      *(_QWORD *)a1 = *(_QWORD *)&v90 + 24;
      a1[1] = v90;
      v92 = *(_QWORD *)(*(_QWORD *)&v90 + 32);
      v93 = *(_QWORD *)(*(_QWORD *)&v90 + 96);
      *(_OWORD *)(v93 + 32) = xmmword_19FFB34C0;
      *(_OWORD *)(v93 + 48) = xmmword_19FFB39C0;
      *(_OWORD *)(v93 + 64) = xmmword_19FFB39D0;
      *(_OWORD *)(v93 + 80) = xmmword_19FFB3970;
      *(_OWORD *)(v93 + 96) = xmmword_19FFB39E0;
      *(_OWORD *)(v93 + 112) = xmmword_19FFB39F0;
      *(_OWORD *)(v93 + 128) = xmmword_19FFB3A00;
      *(_OWORD *)(v93 + 144) = xmmword_19FFB3A10;
      *(_OWORD *)(v93 + 160) = xmmword_19FFB3A20;
      *(_OWORD *)(v93 + 176) = xmmword_19FFB3A30;
      *(_OWORD *)(v93 + 192) = xmmword_19FFB3A40;
      *(_OWORD *)(v93 + 208) = xmmword_19FFB3A50;
      *(_OWORD *)(v93 + 224) = xmmword_19FFB2D90;
      *(_OWORD *)(v93 + 240) = xmmword_19FFB3A60;
      *(_OWORD *)(v93 + 256) = xmmword_19FFB3A70;
      *(_OWORD *)(v93 + 272) = xmmword_19FFB3950;
      *(_OWORD *)v93 = xmmword_19FFB3980;
      *(_QWORD *)(v93 + 16) = 1065353216;
      *(_DWORD *)(v93 + 24) = 0;
      *(_DWORD *)(v93 + 348) = 1065353216;
      __asm { FMOV            V0.4S, #1.0 }
      *(_QWORD *)(v93 + 340) = _Q0;
      *(_OWORD *)(v93 + 288) = xmmword_19FFB3A80;
      v95 = 1 << a3[1];
      *(float *)&_Q0 = ((double)(v95 + ~*((_DWORD *)a3 + 1)) + 0.5) / (double)v95;
      v96 = exp(*(float *)&_Q0 * 6.28318531 + -3.14159265);
      v97 = atan(v96) * 114.591559 + -90.0;
      v98 = cos(v97 * 0.034906585) * -559.82 + 111132.92;
      v99 = v98 + cos(v97 * 0.0698131701) * 1.175;
      v100 = v99 + cos(v97 * 0.104719755) * -0.0023;
      v101 = v97 * 0.00872664626;
      v102 = tan(v97 * 0.00872664626 + 0.78103484);
      v103 = log(v102);
      v104 = tan(v101 + 0.789761487);
      *(float *)&v100 = fabs((log(v104) - v103) * 0.159154943) / (v100 * (float)(1.0 / (float)v95));
      __powidf2();
      *(float *)&v105 = v105 * 0.0000000249532021;
      *(float *)(v93 + 320) = 1.0 / *(float *)&v100;
      *(float *)(v93 + 324) = 1.0 / *(float *)&v100;
      *(float *)(v93 + 328) = 1.0 / *(float *)&v105;
      v106 = *(_QWORD *)(*(_QWORD *)&v90 + 88);
      if (v106 <= v92)
        v106 = v92;
      *(_QWORD *)(*(_QWORD *)&v90 + 80) = 0;
      *(_QWORD *)(*(_QWORD *)&v90 + 88) = v106;
      v139 = v151;
      LODWORD(v140) = v152;
      *(_QWORD *)&v141 = *(_QWORD *)&v90 + 24;
      v142 = v90;
      do
        v107 = __ldxr(v91);
      while (__stxr(v107 + 1, v91));
      *(_OWORD *)v156 = v151;
      *(_DWORD *)&v156[16] = v152;
      *(_QWORD *)&v158 = *(_QWORD *)&v90 + 24;
      *(double *)&v159 = v90;
      do
        v108 = __ldxr(v91);
      while (__stxr(v108 + 1, v91));
      *((_QWORD *)&v159 + 1) = 0;
      geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::insert(v19, (int *)v156);
      v109 = (std::__shared_weak_count *)v159;
      if ((_QWORD)v159)
      {
        v110 = (unint64_t *)(v159 + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v112 = *(std::__shared_weak_count **)&v142;
      if (v142 != 0.0)
      {
        v113 = (unint64_t *)(*(_QWORD *)&v142 + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
LABEL_67:
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
    }
    else
    {
      *(_QWORD *)a1 = v22[5];
      v23 = v22[6];
      *((_QWORD *)a1 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
    }
  }
}

void sub_19F1484F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a33);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,true>,std::__unordered_map_equal<md::GeometryContext::SplineKey,std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>,std::equal_to<md::GeometryContext::SplineKey>,md::GeometryContext::SplineKeyHash,true>,std::allocator<std::__hash_value_type<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::find<md::GeometryContext::SplineKey>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 8);
  v4 = *a2;
  v5 = a2[1];
  v6 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  v7 = (v5 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v8 = a2[3];
  v9 = a2[4];
  v10 = (v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583EBLL) ^ v7;
  v11 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
    if (v11 >= *(_QWORD *)&v2)
      v13 = v11 % *(_QWORD *)&v2;
  }
  else
  {
    v13 = v11 & (*(_QWORD *)&v2 - 1);
  }
  v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v18 = result[1];
        if (v18 == v11)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v4
            && __PAIR64__(*((unsigned __int8 *)result + 24), *((_DWORD *)result + 5)) == __PAIR64__(v3, v5)
            && *(uint64_t *)((char *)result + 28) == __PAIR64__(v9, v8))
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v17 = result[1];
      if (v17 == v11)
      {
        if (*((_DWORD *)result + 4) == (_DWORD)v4
          && __PAIR64__(*((unsigned __int8 *)result + 24), *((_DWORD *)result + 5)) == __PAIR64__(v3, v5)
          && *(uint64_t *)((char *)result + 28) == __PAIR64__(v9, v8))
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(_QWORD *)&v2)
          v17 %= *(_QWORD *)&v2;
        if (v17 != v13)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void md::FrameGraphPhysicalResourceHolder<ggl::Texture>::~FrameGraphPhysicalResourceHolder()
{
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Texture2D::~Texture2D(ggl::Texture2D *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = &off_1E42BE438;
  *((_QWORD *)this + 5) = &unk_1E42BE458;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = &off_1E42BE438;
  *((_QWORD *)this + 5) = &unk_1E42BE458;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = &off_1E42BE438;
  *((_QWORD *)this + 5) = &unk_1E42BE458;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *(_QWORD *)this = &off_1E42BA510;
  *((_QWORD *)this + 5) = &unk_1E42BA530;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void md::DaVinciMaterialResourceDecoder::translateFromCodec(md::DaVinciMaterialResourceDecoder *this, int8x8_t *a2, uint64_t a3)
{
  char *v5;
  void *v6;
  int v7;
  char *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  int v25;
  __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  char **v54;
  std::__shared_weak_count **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  NSObject *v84;
  NSObject *v85;
  unint64_t *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  gss::Allocator *v105;
  uint64_t v106;
  int v107;
  int8x8_t v108;
  int8x8_t v109;
  int8x8_t v110;
  int8x8_t v111;
  unint64_t v112;
  BOOL v113;
  int v114;
  unsigned __int16 v115;
  uint64_t v116;
  gss::Allocator *v117;
  uint64_t v118;
  unsigned __int16 **v119;
  unsigned __int16 *v120;
  unsigned __int16 *v121;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD *v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int *v133;
  _DWORD *v134;
  unsigned int v135;
  unsigned __int16 v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  _DWORD *v140;
  _DWORD *v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  _DWORD *v145;
  unsigned int v146;
  unsigned __int16 v147;
  unsigned __int16 v148;
  unsigned __int16 v149;
  uint64_t v150;
  gss::Allocator *v151;
  uint64_t v152;
  int8x8_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  __n128 *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  __n128 *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __n128 *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  __n128 *v178;
  __n128 *v179;
  __n128 v180;
  __n128 *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  gss::Allocator *v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 v198;
  int v199;
  BOOL v200;
  NSObject *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  char *v231;
  char *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  md::DaVinciMaterialResourceDecoder *v236;
  __CFString *v238;
  uint64_t *v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  geo::codec::MaterialSheet *v244;
  unsigned int v245;
  unint64_t v246;
  _BYTE v247[15];
  char v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  __n128 v251;
  __int128 v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  __n128 v255;
  _QWORD v256[2];
  __n128 v257;
  _QWORD v258[2];
  __n128 v259;
  _QWORD v260[2];
  uint8_t buf[16];
  char *v262;
  std::__shared_weak_count *v263;
  char *v264;
  std::__shared_weak_count *v265;
  _QWORD *v266;
  std::__shared_weak_count *v267;
  __int128 v268;
  unint64_t v269;

  v268 = 0uLL;
  v269 = 0;
  LOBYTE(v264) = 0;
  gms::MaterialSheet<ggl::Texture2D>::_init((uint64_t *)&v266, &v264);
  v236 = this;
  v5 = (char *)operator new(0x58uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E42DED18;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = 0;
  *((_DWORD *)v5 + 14) = 0;
  *((_QWORD *)v5 + 3) = &off_1E42B63B0;
  *(_OWORD *)(v5 + 60) = xmmword_19FFB2EA0;
  *(_QWORD *)(v5 + 76) = 0x100000001;
  *((_DWORD *)v5 + 21) = 0;
  v264 = v5 + 24;
  v265 = (std::__shared_weak_count *)v5;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "anisotropy");
  v8 = (char *)operator new(0x58uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E42DED18;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 3) = &off_1E42B63B0;
  *((_QWORD *)v8 + 7) = 0;
  *((_DWORD *)v8 + 16) = 0;
  *((_DWORD *)v8 + 17) = v7;
  *(_OWORD *)(v8 + 72) = xmmword_19FFB3C50;
  v262 = v8 + 24;
  v263 = (std::__shared_weak_count *)v8;

  v9 = (uint64_t *)a2[64];
  v239 = (uint64_t *)a2[65];
  v244 = (geo::codec::MaterialSheet *)a2;
  if (v9 != v239)
  {
    v240 = 0;
    v10 = 0;
    while (1)
    {
      v11 = v9[3];
      v12 = *v9;
      v13 = v9[1];
      v14 = v13 - *v9;
      if (v13 == *v9)
      {
        v18 = 0;
        v243 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v9[3], v13 - *v9, 1);
        v16 = v15;
        v17 = 0;
        do
        {
          if (v15 + v17)
            *(_BYTE *)(v15 + v17) = *(_BYTE *)(v12 + v17);
          ++v17;
        }
        while (v12 + v17 != v13);
        v18 = v15 + v17;
        v243 = v15 + v14;
      }
      v19 = v9[4];
      v242 = v11;
      if ((v19 & 0x100000000) != 0)
      {
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v21, "enableMipMaps");

      }
      else
      {
        v20 = 0;
      }
      if (BYTE1(v19) >= 7u)
        v22 = 13;
      else
        v22 = *(_DWORD *)((char *)&unk_1A001A578 + ((uint64_t)(v19 >> 8 << 56) >> 54));
      v245 = v22;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "daVinciASTCTextureSideLoadEnabled");
      if (v10 < 2u)
        v25 = v24;
      else
        v25 = 0;

      if (v25 == 1)
      {
        v26 = CFSTR("Emissive");
        if (!v10)
          v26 = CFSTR("Albedo");
        v238 = v26;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu"), a3);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "stringByAppendingPathExtension:", v238);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "stringByAppendingPathExtension:", CFSTR("astc"));
        v241 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "pathForResourceWithName:", v241);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v31, "fileExistsAtPath:", v30);

        if (v32)
        {
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "contentsAtPath:", v30);
          a2 = (int8x8_t *)v244;
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          v35 = objc_retainAutorelease(v34);
          v36 = objc_msgSend(v35, "bytes");
          v37 = objc_msgSend(v35, "length");
          v38 = v265;
          v260[0] = v264;
          v260[1] = v265;
          if (v265)
          {
            p_shared_owners = (unint64_t *)&v265->__shared_owners_;
            do
              v40 = __ldxr(p_shared_owners);
            while (__stxr(v40 + 1, p_shared_owners));
          }
          loadASTCTexture(buf, v36, v37, v260, 1);
          if (!v38)
            goto LABEL_32;
          v41 = (unint64_t *)&v38->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            v43 = *(_QWORD *)buf;
            if (*(_QWORD *)buf)
LABEL_33:
              v240 += astcTextureSize(v245, *(unsigned int *)(v43 + 80), *(unsigned int *)(v43 + 84));
          }
          else
          {
LABEL_32:
            v43 = *(_QWORD *)buf;
            if (*(_QWORD *)buf)
              goto LABEL_33;
          }
          v44 = v266[3];
          v45 = *(std::__shared_weak_count **)&buf[8];
          v259.n128_u64[0] = v43;
          v259.n128_u64[1] = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v46 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          gms::TextureStore<ggl::Texture2D>::addTexture(v44, &v259, 0);
          if (!v45)
            goto LABEL_41;
          v48 = (unint64_t *)&v45->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
            v50 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
LABEL_42:
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
          }
          else
          {
LABEL_41:
            v50 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
              goto LABEL_42;
          }

          goto LABEL_115;
        }

      }
      if (v19 - 3 < 2)
        goto LABEL_50;
      if (v19 != 1)
      {
        if ((_BYTE)v19)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          a2 = (int8x8_t *)v244;
          v84 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19F029000, v84, OS_LOG_TYPE_ERROR, "Detected non-supported format", buf, 2u);
          }

          goto LABEL_115;
        }
LABEL_50:
        v251.n128_u8[0] = 0;
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v16, v18 - v16, 0);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        if (v20)
          v54 = &v262;
        else
          v54 = &v264;
        v258[0] = *v54;
        v55 = &v263;
        if (!v20)
          v55 = &v265;
        v56 = *v55;
        v258[1] = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        textureWithData(buf, v53, v258, v245, v20, &v251);
        a2 = (int8x8_t *)v244;
        if (v56)
        {
          v59 = (unint64_t *)&v56->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }

        v61 = v266[3];
        v62 = *(std::__shared_weak_count **)&buf[8];
        v257 = *(__n128 *)buf;
        if (*(_QWORD *)&buf[8])
        {
          v63 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        gms::TextureStore<ggl::Texture2D>::addTexture(v61, &v257, v251.n128_u8[0]);
        if (!v62)
          goto LABEL_70;
        v65 = (unint64_t *)&v62->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          v67 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
          {
LABEL_102:
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
            v85 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v252) = 0;
              _os_log_impl(&dword_19F029000, v85, OS_LOG_TYPE_ERROR, "Failed to decode texture.", (uint8_t *)&v252, 2u);
            }

            v81 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_115;
LABEL_107:
            v86 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v86);
            while (__stlxr(v83 - 1, v86));
LABEL_109:
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
            goto LABEL_115;
          }
        }
        else
        {
LABEL_70:
          v67 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf)
            goto LABEL_102;
        }
        if (v245 - 3 > 0xA)
          v68 = 1;
        else
          v68 = qword_1A001A598[v245 - 3];
        v240 += v68 * (*(_DWORD *)(v67 + 84) * *(_DWORD *)(v67 + 80));
        v81 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
          goto LABEL_107;
        goto LABEL_115;
      }
      v69 = v265;
      v256[0] = v264;
      v256[1] = v265;
      if (v265)
      {
        v70 = (unint64_t *)&v265->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      loadASTCTexture(buf, v16, v18 - v16, v256, BYTE1(v19) == 2);
      if (!v69)
        break;
      v72 = (unint64_t *)&v69->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (v73)
        break;
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      v74 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        goto LABEL_81;
LABEL_82:
      v75 = v266[3];
      v76 = *(std::__shared_weak_count **)&buf[8];
      v255.n128_u64[0] = v74;
      v255.n128_u64[1] = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v77 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      gms::TextureStore<ggl::Texture2D>::addTexture(v75, &v255, BYTE1(v19) == 5);
      a2 = (int8x8_t *)v244;
      if (!v76)
        goto LABEL_89;
      v79 = (unint64_t *)&v76->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        v81 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
LABEL_90:
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          goto LABEL_109;
        }
      }
      else
      {
LABEL_89:
        v81 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
          goto LABEL_90;
      }
LABEL_115:
      if (v16)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v242 + 40))(v242, v16, v243 - v16);
      ++v10;
      v9 += 5;
      if (v9 == v239)
        goto LABEL_122;
    }
    v74 = *(_QWORD *)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_82;
LABEL_81:
    v240 += astcTextureSize(*(_DWORD *)(v74 + 68), *(unsigned int *)(v74 + 80), *(unsigned int *)(v74 + 84));
    goto LABEL_82;
  }
  v240 = 0;
LABEL_122:
  v87 = v266[3];
  v88 = (std::__shared_weak_count *)v266[4];
  v253 = v87;
  v254 = v88;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  v252 = 0uLL;
  getMaterialFromCodec(buf, a2 + 7, v87, v88, (uint64_t *)&v252);
  if (v88)
  {
    v91 = (unint64_t *)&v88->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v93 = v266;
  v95 = *(_QWORD *)buf;
  v94 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v96 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  v98 = (std::__shared_weak_count *)v93[10];
  v93[9] = v95;
  v93[10] = v94;
  if (v98)
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = *((_QWORD *)&v268 + 1);
  if (*((_QWORD *)&v268 + 1) >= v269)
  {
    v105 = (gss::Allocator *)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v268, *(__n128 *)buf);
  }
  else
  {
    **((_QWORD **)&v268 + 1) = *(_QWORD *)buf;
    v102 = *(_QWORD *)&buf[8];
    *(_QWORD *)(v101 + 8) = *(_QWORD *)&buf[8];
    if (v102)
    {
      v103 = (unint64_t *)(v102 + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v105 = (gss::Allocator *)(v101 + 16);
  }
  *((_QWORD *)&v268 + 1) = v105;
  if (*(_QWORD *)&a2[2] == *(_QWORD *)&a2[1])
    goto LABEL_320;
  v106 = 0;
  v107 = 0;
  do
  {
    *(_QWORD *)((char *)&v252 + 7) = 0;
    *(_QWORD *)&v252 = 0;
    HIBYTE(v252) = 1;
    v110 = a2[4];
    v111 = a2[5];
    v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v111 - *(_QWORD *)&v110) >> 3);
    if (v112 >> 16)
      v113 = 1;
    else
      v113 = *(_QWORD *)&v111 == *(_QWORD *)&v110;
    if (v113)
    {
      v114 = 0;
    }
    else
    {
      v115 = (-21844 * ((uint64_t)(*(_QWORD *)&v111 - *(_QWORD *)&v110) >> 3)) | 2;
      v116 = gss::Allocator::instance(v105);
      v105 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v116 + 16))(v116, (unsigned __int16)(v115 + 2 * v112) & 0xFFFE, 1);
      v117 = v105;
      if ((_QWORD)v252)
      {
        if (WORD5(v252))
        {
          v105 = (gss::Allocator *)memmove(v105, (const void *)v252, 4 * WORD5(v252));
          if (WORD5(v252))
            v105 = (gss::Allocator *)memmove((char *)v117 + v115, (const void *)(v252 + WORD4(v252)), 2 * WORD5(v252));
        }
        v118 = gss::Allocator::instance(v105);
        v105 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v118 + 40))(v118, v252, WORD6(v252));
      }
      WORD6(v252) = v112;
      *(_QWORD *)&v252 = v117;
      WORD4(v252) = (4 * v112) | 2;
      v110 = a2[4];
      v114 = BYTE14(v252);
    }
    v119 = (unsigned __int16 **)(*(_QWORD *)&v110 + 24 * v106);
    v121 = *v119;
    v120 = v119[1];
    if (*v119 != v120 && v114 == 0)
    {
LABEL_166:
      v123 = *v121 | 0x10000;
      v124 = *((_DWORD *)v121 + 1);
      v125 = WORD5(v252);
      if (WORD5(v252))
      {
        if (HIBYTE(v252))
        {
          if (WORD5(v252) >= 0x1Eu)
          {
            v130 = (_DWORD *)v252;
            v131 = WORD5(v252);
            do
            {
              v132 = v131 >> 1;
              v133 = &v130[v131 >> 1];
              v135 = *v133;
              v134 = v133 + 1;
              v131 += ~(v131 >> 1);
              if (v135 < v123)
                v130 = v134;
              else
                v131 = v132;
            }
            while (v131);
            if (v130 != (_DWORD *)(v252 + 4 * WORD5(v252))
              && *v130 == v123
              && WORD5(v252) != (unsigned __int16)((unint64_t)((unint64_t)v130 - v252) >> 2))
            {
              goto LABEL_233;
            }
          }
          else
          {
            v126 = 0;
            while (1)
            {
              v127 = *(_DWORD *)(v252 + 4 * v126);
              if (v127 >= v123)
                break;
              if (WORD5(v252) == ++v126)
                goto LABEL_193;
            }
            if (v127 == v123)
              v136 = v126;
            else
              v136 = WORD5(v252);
            if (WORD5(v252) != v136)
              goto LABEL_233;
          }
        }
        else
        {
          v128 = 4 * WORD5(v252);
          v129 = (_DWORD *)v252;
          while (*v129 != v123)
          {
            ++v129;
            v128 -= 4;
            if (!v128)
            {
              v129 = (_DWORD *)(v252 + 4 * WORD5(v252));
              break;
            }
          }
          if (WORD5(v252) != (unsigned __int16)((unint64_t)((unint64_t)v129 - v252) >> 2))
            goto LABEL_233;
        }
      }
LABEL_193:
      if (WORD5(v252))
      {
        if (HIBYTE(v252))
        {
          if (WORD5(v252) >= 0x1Eu)
          {
            v141 = (_DWORD *)v252;
            v142 = WORD5(v252);
            do
            {
              v143 = v142 >> 1;
              v144 = &v141[v142 >> 1];
              v146 = *v144;
              v145 = v144 + 1;
              v142 += ~(v142 >> 1);
              if (v146 < v123)
                v141 = v145;
              else
                v142 = v143;
            }
            while (v142);
            if (v141 != (_DWORD *)(v252 + 4 * WORD5(v252))
              && *v141 == v123
              && WORD5(v252) != (unsigned __int16)((unint64_t)((unint64_t)v141 - v252) >> 2))
            {
              goto LABEL_233;
            }
          }
          else
          {
            v137 = 0;
            while (1)
            {
              v138 = *(_DWORD *)(v252 + 4 * v137);
              if (v138 >= v123)
                break;
              if (WORD5(v252) == ++v137)
                goto LABEL_220;
            }
            if (v138 == v123)
              v147 = v137;
            else
              v147 = WORD5(v252);
            if (WORD5(v252) != v147)
              goto LABEL_233;
          }
        }
        else
        {
          v139 = 4 * WORD5(v252);
          v140 = (_DWORD *)v252;
          while (*v140 != v123)
          {
            ++v140;
            v139 -= 4;
            if (!v139)
            {
              v140 = (_DWORD *)(v252 + 4 * WORD5(v252));
              break;
            }
          }
          if (WORD5(v252) != (unsigned __int16)((unint64_t)((unint64_t)v140 - v252) >> 2))
            goto LABEL_233;
        }
      }
LABEL_220:
      if (WORD5(v252) == WORD6(v252))
      {
        if (WORD5(v252) == 0xFFFF)
          goto LABEL_233;
        if (2 * (WORD5(v252) & 0x7FFFu) <= 4)
          v148 = 4;
        else
          v148 = 2 * (WORD5(v252) & 0x7FFF);
        v149 = (8 * (v148 >> 1)) | 2;
        v150 = gss::Allocator::instance(v105);
        v105 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v150 + 16))(v150, (unsigned __int16)(v149 + 2 * v148) & 0xFFFE, 1);
        v151 = v105;
        if ((_QWORD)v252)
        {
          if (WORD5(v252))
          {
            v105 = (gss::Allocator *)memmove(v105, (const void *)v252, 4 * WORD5(v252));
            if (WORD5(v252))
              v105 = (gss::Allocator *)memmove((char *)v151 + v149, (const void *)(v252 + WORD4(v252)), 2 * WORD5(v252));
          }
          v152 = gss::Allocator::instance(v105);
          v105 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v152 + 40))(v152, v252, WORD6(v252));
        }
        WORD6(v252) = v148;
        *(_QWORD *)&v252 = v151;
        WORD4(v252) = (8 * (v148 >> 1)) | 2;
        v125 = WORD5(v252);
        a2 = (int8x8_t *)v244;
      }
      else
      {
        v151 = (gss::Allocator *)v252;
        v149 = WORD4(v252);
      }
      *((_DWORD *)v151 + v125) = v123;
      *(_WORD *)((char *)v151 + 2 * v125 + v149) = v124;
      ++WORD5(v252);
      HIBYTE(v252) = 0;
LABEL_233:
      while (1)
      {
        v121 += 4;
        if (v121 == v120)
          break;
        if (!BYTE14(v252))
          goto LABEL_166;
      }
    }
    v153 = a2[1];
    v154 = v266[3];
    v155 = (std::__shared_weak_count *)v266[4];
    v249 = v154;
    v250 = v155;
    if (v155)
    {
      v156 = (unint64_t *)&v155->__shared_owners_;
      do
        v157 = __ldxr(v156);
      while (__stxr(v157 + 1, v156));
    }
    getMaterialFromCodec(&v251, (int8x8_t *)(*(_QWORD *)&v153 + 456 * v106), v154, v155, (uint64_t *)buf);
    if (v155)
    {
      v158 = (unint64_t *)&v155->__shared_owners_;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v160 = (uint64_t)v266;
    memset(v247, 0, sizeof(v247));
    v248 = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v247, (uint64_t)&v252);
    v161 = *(__n128 **)(v160 + 48);
    v162 = *(_QWORD *)(v160 + 56);
    if ((unint64_t)v161 >= v162)
    {
      v167 = *(_QWORD *)(v160 + 40);
      v168 = ((uint64_t)v161 - v167) >> 4;
      v169 = v168 + 1;
      if ((unint64_t)(v168 + 1) >> 60)
        abort();
      v170 = v162 - v167;
      if (v170 >> 3 > v169)
        v169 = v170 >> 3;
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0)
        v171 = 0xFFFFFFFFFFFFFFFLL;
      else
        v171 = v169;
      if (v171)
      {
        v172 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 64) + 16))(*(_QWORD *)(v160 + 64), 16 * v171, 8);
        v173 = (__n128 *)(v172 + 16 * v168);
        v174 = v172 + 16 * v171;
        if (v172)
        {
          v175 = v251.n128_u64[1];
          *v173 = v251;
          if (v175)
          {
            v176 = (unint64_t *)(v175 + 8);
            do
              v177 = __ldxr(v176);
            while (__stxr(v177 + 1, v176));
          }
        }
      }
      else
      {
        v174 = 0;
        v173 = (__n128 *)(16 * v168);
      }
      v166 = v173 + 1;
      v178 = *(__n128 **)(v160 + 40);
      v179 = *(__n128 **)(v160 + 48);
      if (v179 == v178)
      {
        *(_QWORD *)(v160 + 40) = v173;
        *(_QWORD *)(v160 + 48) = v166;
        v182 = *(_QWORD *)(v160 + 56);
        *(_QWORD *)(v160 + 56) = v174;
      }
      else
      {
        do
        {
          v180 = v179[-1];
          --v179;
          v173[-1] = v180;
          --v173;
          v179->n128_u64[0] = 0;
          v179->n128_u64[1] = 0;
        }
        while (v179 != v178);
        v179 = *(__n128 **)(v160 + 40);
        v181 = *(__n128 **)(v160 + 48);
        *(_QWORD *)(v160 + 40) = v173;
        *(_QWORD *)(v160 + 48) = v166;
        v182 = *(_QWORD *)(v160 + 56);
        *(_QWORD *)(v160 + 56) = v174;
        while (v181 != v179)
        {
          v183 = (std::__shared_weak_count *)v181[-1].n128_u64[1];
          if (v183)
          {
            v184 = (unint64_t *)&v183->__shared_owners_;
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
          --v181;
        }
      }
      if (v179)
        (*(void (**)(_QWORD, __n128 *, uint64_t))(**(_QWORD **)(v160 + 64) + 40))(*(_QWORD *)(v160 + 64), v179, v182 - (_QWORD)v179);
    }
    else
    {
      if (v161)
      {
        v161->n128_u64[0] = v251.n128_u64[0];
        v163 = v251.n128_u64[1];
        v161->n128_u64[1] = v251.n128_u64[1];
        if (v163)
        {
          v164 = (unint64_t *)(v163 + 8);
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
        }
      }
      v166 = v161 + 1;
    }
    *(_QWORD *)(v160 + 48) = v166;
    v186 = v251.n128_u64[0];
    v187 = (gss::Allocator *)(*(uint64_t (**)(_QWORD, _BYTE *, _QWORD))(**(_QWORD **)(v160 + 16) + 8))(*(_QWORD *)(v160 + 16), v247, *(unsigned int *)(v251.n128_u64[0] + 64));
    if (!v247[14] && *(_QWORD *)v247)
    {
      v188 = gss::Allocator::instance(v187);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v188 + 40))(v188, *(_QWORD *)v247, *(unsigned __int16 *)&v247[12]);
      *(_QWORD *)v247 = 0;
    }
    v189 = *((_QWORD *)&v268 + 1);
    if (*((_QWORD *)&v268 + 1) >= v269)
    {
      v246 = v251.n128_u64[1];
      v105 = (gss::Allocator *)std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v268, v251);
      v190 = (std::__shared_weak_count *)v246;
      *((_QWORD *)&v268 + 1) = v105;
      if (!v246)
        goto LABEL_288;
LABEL_284:
      v193 = (unint64_t *)&v190->__shared_owners_;
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
      goto LABEL_288;
    }
    **((_QWORD **)&v268 + 1) = v186;
    v190 = (std::__shared_weak_count *)v251.n128_u64[1];
    *(_QWORD *)(v189 + 8) = v251.n128_u64[1];
    if (v190)
    {
      v191 = (unint64_t *)&v190->__shared_owners_;
      do
        v192 = __ldxr(v191);
      while (__stxr(v192 + 1, v191));
    }
    v105 = (gss::Allocator *)(v189 + 16);
    *((_QWORD *)&v268 + 1) = v189 + 16;
    if (v190)
      goto LABEL_284;
LABEL_288:
    if (BYTE14(v252))
      v195 = 1;
    else
      v195 = (_QWORD)v252 == 0;
    if (!v195)
    {
      v196 = gss::Allocator::instance(v105);
      v105 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v196 + 40))(v196, v252, WORD6(v252));
    }
    v106 = ++v107;
    v109 = a2[1];
    v108 = a2[2];
  }
  while (0x823EE08FB823EE09 * ((uint64_t)(*(_QWORD *)&v108 - *(_QWORD *)&v109) >> 3) > v107);
  if (*(_QWORD *)&v108 != *(_QWORD *)&v109)
  {
    v197 = 0;
    v198 = 0;
    while (2)
    {
      v199 = *(unsigned __int16 *)(*(_QWORD *)&v109 + 456 * v197 + 400);
      if (v199)
        v200 = v199 == 0xFFFF;
      else
        v200 = 1;
      if (v200)
        goto LABEL_297;
      if ((unsigned __int16)(v199 - 1) == v198)
      {
        GEOGetGeoCSSMaterialSystemLog();
        v201 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v252) = 0;
          _os_log_impl(&dword_19F029000, v201, OS_LOG_TYPE_ERROR, "Do not make cycle inheritance", (uint8_t *)&v252, 2u);
        }

      }
      else
      {
        v202 = v266[5];
        v203 = *(_QWORD *)(v202 + 16 * v198);
        v204 = (unsigned __int16)(v199 - 1);
        v205 = *(_OWORD *)(v202 + 16 * v204);
        v206 = *(std::__shared_weak_count **)(v202 + 16 * v204 + 8);
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
          do
            v209 = __ldxr(v207);
          while (__stxr(v209 + 1, v207));
        }
        v210 = *(std::__shared_weak_count **)(v203 + 80);
        *(_OWORD *)(v203 + 72) = v205;
        if (!v210)
          goto LABEL_313;
        v211 = (unint64_t *)&v210->__shared_owners_;
        do
          v212 = __ldaxr(v211);
        while (__stlxr(v212 - 1, v211));
        if (!v212)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
          if (!v206)
            goto LABEL_296;
        }
        else
        {
LABEL_313:
          if (!v206)
            goto LABEL_296;
        }
        v213 = (unint64_t *)&v206->__shared_owners_;
        do
          v214 = __ldaxr(v213);
        while (__stlxr(v214 - 1, v213));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
          std::__shared_weak_count::__release_weak(v206);
        }
      }
LABEL_296:
      v109 = a2[1];
      v108 = a2[2];
LABEL_297:
      v197 = ++v198;
      if (0x823EE08FB823EE09 * ((uint64_t)(*(_QWORD *)&v108 - *(_QWORD *)&v109) >> 3) <= v198)
        break;
      continue;
    }
  }
LABEL_320:
  v215 = v267;
  *(_QWORD *)v236 = v266;
  *((_QWORD *)v236 + 1) = v215;
  if (v215)
  {
    v216 = (unint64_t *)&v215->__shared_owners_;
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  *((_OWORD *)v236 + 1) = v268;
  v218 = v269;
  v269 = 0;
  v268 = 0uLL;
  *((_QWORD *)v236 + 4) = v218;
  *((_QWORD *)v236 + 5) = v240;
  v219 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v220 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = v263;
  if (v263)
  {
    v223 = (unint64_t *)&v263->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v265;
  if (v265)
  {
    v226 = (unint64_t *)&v265->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = v267;
  if (v267)
  {
    v229 = (unint64_t *)&v267->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = (char *)v268;
  if ((_QWORD)v268)
  {
    v232 = (char *)*((_QWORD *)&v268 + 1);
    if (*((_QWORD *)&v268 + 1) != (_QWORD)v268)
    {
      do
      {
        v233 = (std::__shared_weak_count *)*((_QWORD *)v232 - 1);
        if (v233)
        {
          v234 = (unint64_t *)&v233->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        v232 -= 16;
      }
      while (v232 != v231);
      v231 = (char *)v268;
    }
    operator delete(v231);
  }
}

void sub_19F149CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 176);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 144);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 128);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 - 112));
  _Unwind_Resume(a1);
}

void getMaterialFromCodec(_QWORD *a1, int8x8_t *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t ***v31;
  uint64_t **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  int8x8_t v36;
  float *v37;
  float *v38;
  unint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t ***v49;
  uint64_t **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  int8x8_t v54;
  _BYTE *v55;
  _BYTE *v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int8x8_t v64;
  uint8x8_t v65;
  unint64_t v66;
  uint64_t ***v67;
  uint64_t **v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  int8x8_t v72;
  _BYTE *v73;
  _BYTE *v74;
  size_t v75;
  unint64_t v76;
  char *v77;
  size_t v78;
  char *v79;
  char *v80;
  int8x8_t v81;
  uint8x8_t v82;
  unint64_t v83;
  uint64_t ***v84;
  uint64_t **v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  int8x8_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int8x8_t v94;
  uint8x8_t v95;
  unint64_t v96;
  uint64_t ***v97;
  uint64_t **v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  int8x8_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int8x8_t v107;
  uint8x8_t v108;
  unint64_t v109;
  uint64_t ***v110;
  uint64_t **v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  int8x8_t v115;
  int8x8_t v116;
  int8x8_t i;
  int8x8_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  int8x8_t v123;
  uint8x8_t v124;
  unint64_t v125;
  uint64_t ***v126;
  uint64_t **v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int8x8_t v134;
  uint8x8_t v135;
  unint64_t v136;
  uint64_t ***v137;
  uint64_t **v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int8x8_t v145;
  uint8x8_t v146;
  unint64_t v147;
  uint64_t ***v148;
  uint64_t **v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int8x8_t v156;
  uint8x8_t v157;
  unint64_t v158;
  uint64_t ***v159;
  uint64_t **v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  int8x8_t *v164;
  int8x8_t *v165;
  float v166;
  float v167;
  float v168;
  int v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  __int8 v174;

  v174 = a2[56].i8[0];
  v172 = a3;
  v173 = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a5[1];
  v170 = *a5;
  v171 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  gms::createMaterial<ggl::Texture2D>((uint64_t)a1, a3, (uint64_t)a4, (uint64_t)&v174);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v173)
    goto LABEL_16;
  v14 = &v173->__shared_owners_;
  do
    v15 = __ldaxr((unint64_t *)v14);
  while (__stlxr(v15 - 1, (unint64_t *)v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
    v16 = a2[2];
    if (v16)
    {
LABEL_19:
      while (1)
      {
        v17 = *(_QWORD *)(*(_QWORD *)&v16 + 24);
        v18 = *(_QWORD *)(*(_QWORD *)&v16 + 32);
        v165 = (int8x8_t *)v16;
        if (v17 != v18)
          break;
LABEL_18:
        v16 = *v165;
        if (!*(_QWORD *)v165)
          goto LABEL_59;
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)&v16 + 16);
LABEL_24:
      v21 = *(float *)(v17 + 4);
      v22 = *(float *)(v17 + 8);
      v24 = *(float *)(v17 + 12);
      v23 = *(_DWORD *)(v17 + 16);
      if (v21 >= 0.04045)
        v25 = powf((float)(v21 * 0.94787) + 0.052133, 2.4);
      else
        v25 = v21 * 0.077399;
      if (v22 >= 0.04045)
        v26 = powf((float)(v22 * 0.94787) + 0.052133, 2.4);
      else
        v26 = v22 * 0.077399;
      if (v24 >= 0.04045)
        v27 = powf((float)(v24 * 0.94787) + 0.052133, 2.4);
      else
        v27 = v24 * 0.077399;
      v166 = v25;
      v167 = v26;
      v168 = v27;
      v169 = v23;
      v28 = a2[52];
      if (!*(_QWORD *)&v28)
        goto LABEL_336;
      v29 = (uint8x8_t)vcnt_s8(v28);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        v30 = v19;
        if (*(_QWORD *)&v28 <= v19)
          v30 = v19 % *(_QWORD *)&v28;
      }
      else
      {
        v30 = (v28.i32[0] - 1) & v19;
      }
      v31 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v30);
      if (!v31 || (v32 = *v31) == 0)
LABEL_336:
        abort();
      if (v29.u32[0] < 2uLL)
      {
        v33 = *(_QWORD *)&v28 - 1;
        while (1)
        {
          v35 = v32[1];
          if (v35 == (uint64_t *)v19)
          {
            if (*((unsigned __int8 *)v32 + 16) == (_DWORD)v19)
              goto LABEL_53;
          }
          else if (((unint64_t)v35 & v33) != v30)
          {
            goto LABEL_336;
          }
          v32 = (uint64_t **)*v32;
          if (!v32)
            goto LABEL_336;
        }
      }
      while (1)
      {
        v34 = (unint64_t)v32[1];
        if (v34 == v19)
        {
          if (*((unsigned __int8 *)v32 + 16) == (_DWORD)v19)
          {
LABEL_53:
            switch((_DWORD)v19)
            {
              case 7:
                v20 = 20;
LABEL_22:
                (*(void (**)(void))(*(_QWORD *)*a1 + 8 * v20))();
                break;
              case 0x17:
                v20 = 68;
                goto LABEL_22;
              case 8:
                v20 = 23;
                goto LABEL_22;
            }
            v17 += 20;
            if (v17 == v18)
              goto LABEL_18;
            goto LABEL_24;
          }
        }
        else
        {
          if (v34 >= *(_QWORD *)&v28)
            v34 %= *(_QWORD *)&v28;
          if (v34 != v30)
            goto LABEL_336;
        }
        v32 = (uint64_t **)*v32;
        if (!v32)
          goto LABEL_336;
      }
    }
  }
  else
  {
LABEL_16:
    v16 = a2[2];
    if (v16)
      goto LABEL_19;
  }
LABEL_59:
  v36 = a2[7];
  if (!*(_QWORD *)&v36)
    goto LABEL_96;
  while (2)
  {
    v37 = *(float **)(*(_QWORD *)&v36 + 24);
    v38 = *(float **)(*(_QWORD *)&v36 + 32);
    v164 = (int8x8_t *)v36;
    if (v37 == v38)
      goto LABEL_61;
    v39 = *(unsigned __int8 *)(*(_QWORD *)&v36 + 16);
    while (2)
    {
      v40 = v37[1];
      v41 = v37[2];
      v42 = v37[3];
      if (v40 >= 0.04045)
        v43 = powf((float)(v40 * 0.94787) + 0.052133, 2.4);
      else
        v43 = v40 * 0.077399;
      if (v41 >= 0.04045)
        v44 = powf((float)(v41 * 0.94787) + 0.052133, 2.4);
      else
        v44 = v41 * 0.077399;
      if (v42 >= 0.04045)
        v45 = powf((float)(v42 * 0.94787) + 0.052133, 2.4);
      else
        v45 = v42 * 0.077399;
      v166 = v43;
      v167 = v44;
      v168 = v45;
      v46 = a2[52];
      if (!*(_QWORD *)&v46)
        goto LABEL_337;
      v47 = (uint8x8_t)vcnt_s8(v46);
      v47.i16[0] = vaddlv_u8(v47);
      if (v47.u32[0] > 1uLL)
      {
        v48 = v39;
        if (*(_QWORD *)&v46 <= v39)
          v48 = v39 % *(_QWORD *)&v46;
      }
      else
      {
        v48 = (v46.i32[0] - 1) & v39;
      }
      v49 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v48);
      if (!v49 || (v50 = *v49) == 0)
LABEL_337:
        abort();
      if (v47.u32[0] < 2uLL)
      {
        v51 = *(_QWORD *)&v46 - 1;
        while (1)
        {
          v53 = v50[1];
          if (v53 == (uint64_t *)v39)
          {
            if (*((unsigned __int8 *)v50 + 16) == (_DWORD)v39)
              goto LABEL_94;
          }
          else if (((unint64_t)v53 & v51) != v48)
          {
            goto LABEL_337;
          }
          v50 = (uint64_t **)*v50;
          if (!v50)
            goto LABEL_337;
        }
      }
      while (1)
      {
        v52 = (unint64_t)v50[1];
        if (v52 == v39)
          break;
        if (v52 >= *(_QWORD *)&v46)
          v52 %= *(_QWORD *)&v46;
        if (v52 != v48)
          goto LABEL_337;
LABEL_84:
        v50 = (uint64_t **)*v50;
        if (!v50)
          goto LABEL_337;
      }
      if (*((unsigned __int8 *)v50 + 16) != (_DWORD)v39)
        goto LABEL_84;
LABEL_94:
      if ((v39 - 27) <= 2u)
        (*(void (**)(void))(*(_QWORD *)*a1 + 8 * (3 * (v39 - 27) + 80)))();
      v37 += 4;
      if (v37 != v38)
        continue;
      break;
    }
LABEL_61:
    v36 = *v164;
    if (*v164)
      continue;
    break;
  }
LABEL_96:
  v54 = a2[12];
  if (!*(_QWORD *)&v54)
    goto LABEL_135;
  while (2)
  {
    v56 = *(_BYTE **)(*(_QWORD *)&v54 + 24);
    v55 = *(_BYTE **)(*(_QWORD *)&v54 + 32);
    v57 = v55 - v56;
    if (v55 == v56)
      goto LABEL_99;
    if (v57 < 0)
      abort();
    v58 = *(unsigned __int8 *)(*(_QWORD *)&v54 + 16);
    v59 = (char *)operator new(v55 - v56);
    v60 = v57 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v59, v56, v60);
    if (!v60)
      goto LABEL_98;
    v61 = &v59[v60];
    v62 = v59;
    while (2)
    {
      v64 = a2[52];
      if (!*(_QWORD *)&v64)
        goto LABEL_344;
      v65 = (uint8x8_t)vcnt_s8(v64);
      v65.i16[0] = vaddlv_u8(v65);
      if (v65.u32[0] > 1uLL)
      {
        v66 = v58;
        if (*(_QWORD *)&v64 <= v58)
          v66 = v58 % *(_QWORD *)&v64;
      }
      else
      {
        v66 = (v64.i32[0] - 1) & v58;
      }
      v67 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v66);
      if (!v67 || (v68 = *v67) == 0)
LABEL_344:
        abort();
      if (v65.u32[0] < 2uLL)
      {
        v69 = *(_QWORD *)&v64 - 1;
        while (1)
        {
          v71 = v68[1];
          if (v71 == (uint64_t *)v58)
          {
            if (*((unsigned __int8 *)v68 + 16) == (_DWORD)v58)
              goto LABEL_127;
          }
          else if (((unint64_t)v71 & v69) != v66)
          {
            goto LABEL_344;
          }
          v68 = (uint64_t **)*v68;
          if (!v68)
            goto LABEL_344;
        }
      }
      while (2)
      {
        v70 = (unint64_t)v68[1];
        if (v70 != v58)
        {
          if (v70 >= *(_QWORD *)&v64)
            v70 %= *(_QWORD *)&v64;
          if (v70 != v66)
            goto LABEL_344;
          goto LABEL_117;
        }
        if (*((unsigned __int8 *)v68 + 16) != (_DWORD)v58)
        {
LABEL_117:
          v68 = (uint64_t **)*v68;
          if (!v68)
            goto LABEL_344;
          continue;
        }
        break;
      }
LABEL_127:
      v63 = 14;
      switch((int)v58)
      {
        case 5:
          goto LABEL_105;
        case 6:
          v63 = 17;
          goto LABEL_105;
        case 10:
          v63 = 29;
          goto LABEL_105;
        case 14:
          v63 = 41;
          goto LABEL_105;
        case 15:
          v63 = 44;
          goto LABEL_105;
        case 18:
          v63 = 53;
          goto LABEL_105;
        case 19:
          v63 = 56;
          goto LABEL_105;
        case 26:
          v63 = 77;
          goto LABEL_105;
        case 35:
          v63 = 104;
LABEL_105:
          (*(void (**)(void))(*(_QWORD *)*a1 + 8 * v63))();
          break;
        default:
          break;
      }
      v62 += 8;
      if (v62 != v61)
        continue;
      break;
    }
LABEL_98:
    operator delete(v59);
LABEL_99:
    v54 = **(int8x8_t **)&v54;
    if (v54)
      continue;
    break;
  }
LABEL_135:
  v72 = a2[17];
  if (!*(_QWORD *)&v72)
    goto LABEL_166;
  while (2)
  {
    v74 = *(_BYTE **)(*(_QWORD *)&v72 + 24);
    v73 = *(_BYTE **)(*(_QWORD *)&v72 + 32);
    v75 = v73 - v74;
    if (v73 == v74)
      goto LABEL_138;
    if (0xAAAAAAAAAAAAAAABLL * v75 >= 0x5555555555555556)
      abort();
    v76 = *(unsigned __int8 *)(*(_QWORD *)&v72 + 16);
    v77 = (char *)operator new(v75);
    v78 = 3 * ((v75 - 3) / 3) + 3;
    memcpy(v77, v74, v78);
    if (!v78)
      goto LABEL_137;
    v79 = &v77[v78];
    v80 = v77;
    while (2)
    {
      v81 = a2[52];
      if (!*(_QWORD *)&v81)
        goto LABEL_345;
      v82 = (uint8x8_t)vcnt_s8(v81);
      v82.i16[0] = vaddlv_u8(v82);
      if (v82.u32[0] > 1uLL)
      {
        v83 = v76;
        if (*(_QWORD *)&v81 <= v76)
          v83 = v76 % *(_QWORD *)&v81;
      }
      else
      {
        v83 = (v81.i32[0] - 1) & v76;
      }
      v84 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v83);
      if (!v84 || (v85 = *v84) == 0)
LABEL_345:
        abort();
      if (v82.u32[0] < 2uLL)
      {
        v86 = *(_QWORD *)&v81 - 1;
        while (1)
        {
          v88 = v85[1];
          if (v88 == (uint64_t *)v76)
          {
            if (*((unsigned __int8 *)v85 + 16) == (_DWORD)v76)
              goto LABEL_164;
          }
          else if (((unint64_t)v88 & v86) != v83)
          {
            goto LABEL_345;
          }
          v85 = (uint64_t **)*v85;
          if (!v85)
            goto LABEL_345;
        }
      }
      while (2)
      {
        v87 = (unint64_t)v85[1];
        if (v87 != v76)
        {
          if (v87 >= *(_QWORD *)&v81)
            v87 %= *(_QWORD *)&v81;
          if (v87 != v83)
            goto LABEL_345;
          goto LABEL_154;
        }
        if (*((unsigned __int8 *)v85 + 16) != (_DWORD)v76)
        {
LABEL_154:
          v85 = (uint64_t **)*v85;
          if (!v85)
            goto LABEL_345;
          continue;
        }
        break;
      }
LABEL_164:
      if ((v76 - 1) <= 3u)
        (*(void (**)(void))(*(_QWORD *)*a1 + 8 * (3 * (v76 - 1) + 2)))();
      v80 += 3;
      if (v80 != v79)
        continue;
      break;
    }
LABEL_137:
    operator delete(v77);
LABEL_138:
    v72 = **(int8x8_t **)&v72;
    if (v72)
      continue;
    break;
  }
LABEL_166:
  v89 = a2[27];
  if (!*(_QWORD *)&v89)
    goto LABEL_198;
  while (2)
  {
    v90 = *(_QWORD *)(*(_QWORD *)&v89 + 24);
    v91 = *(_QWORD *)(*(_QWORD *)&v89 + 32);
    if (v90 == v91)
      goto LABEL_168;
    v92 = *(unsigned __int8 *)(*(_QWORD *)&v89 + 16);
    while (2)
    {
      v94 = a2[52];
      if (!*(_QWORD *)&v94)
        goto LABEL_338;
      v95 = (uint8x8_t)vcnt_s8(v94);
      v95.i16[0] = vaddlv_u8(v95);
      if (v95.u32[0] > 1uLL)
      {
        v96 = v92;
        if (*(_QWORD *)&v94 <= v92)
          v96 = v92 % *(_QWORD *)&v94;
      }
      else
      {
        v96 = (v94.i32[0] - 1) & v92;
      }
      v97 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v96);
      if (!v97 || (v98 = *v97) == 0)
LABEL_338:
        abort();
      if (v95.u32[0] < 2uLL)
      {
        v99 = *(_QWORD *)&v94 - 1;
        while (1)
        {
          v101 = v98[1];
          if (v101 == (uint64_t *)v92)
          {
            if (*((unsigned __int8 *)v98 + 16) == (_DWORD)v92)
              goto LABEL_194;
          }
          else if (((unint64_t)v101 & v99) != v96)
          {
            goto LABEL_338;
          }
          v98 = (uint64_t **)*v98;
          if (!v98)
            goto LABEL_338;
        }
      }
      while (2)
      {
        v100 = (unint64_t)v98[1];
        if (v100 != v92)
        {
          if (v100 >= *(_QWORD *)&v94)
            v100 %= *(_QWORD *)&v94;
          if (v100 != v96)
            goto LABEL_338;
          goto LABEL_184;
        }
        if (*((unsigned __int8 *)v98 + 16) != (_DWORD)v92)
        {
LABEL_184:
          v98 = (uint64_t **)*v98;
          if (!v98)
            goto LABEL_338;
          continue;
        }
        break;
      }
LABEL_194:
      v93 = 32;
      switch((int)v92)
      {
        case 11:
          goto LABEL_172;
        case 16:
          v93 = 47;
          goto LABEL_172;
        case 20:
          v93 = 59;
          goto LABEL_172;
        case 24:
          v93 = 71;
          goto LABEL_172;
        case 25:
          v93 = 74;
LABEL_172:
          (*(void (**)(void))(*(_QWORD *)*a1 + 8 * v93))();
          break;
        default:
          break;
      }
      v90 += 3;
      if (v90 != v91)
        continue;
      break;
    }
LABEL_168:
    v89 = **(int8x8_t **)&v89;
    if (v89)
      continue;
    break;
  }
LABEL_198:
  v102 = a2[32];
  if (!*(_QWORD *)&v102)
    goto LABEL_229;
  while (2)
  {
    v103 = *(_QWORD *)(*(_QWORD *)&v102 + 24);
    v104 = *(_QWORD *)(*(_QWORD *)&v102 + 32);
    if (v103 == v104)
      goto LABEL_200;
    v105 = *(unsigned __int8 *)(*(_QWORD *)&v102 + 16);
    while (2)
    {
      v107 = a2[52];
      if (!*(_QWORD *)&v107)
        goto LABEL_339;
      v108 = (uint8x8_t)vcnt_s8(v107);
      v108.i16[0] = vaddlv_u8(v108);
      if (v108.u32[0] > 1uLL)
      {
        v109 = v105;
        if (*(_QWORD *)&v107 <= v105)
          v109 = v105 % *(_QWORD *)&v107;
      }
      else
      {
        v109 = (v107.i32[0] - 1) & v105;
      }
      v110 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v109);
      if (!v110 || (v111 = *v110) == 0)
LABEL_339:
        abort();
      if (v108.u32[0] < 2uLL)
      {
        v112 = *(_QWORD *)&v107 - 1;
        while (1)
        {
          v114 = v111[1];
          if (v114 == (uint64_t *)v105)
          {
            if (*((unsigned __int8 *)v111 + 16) == (_DWORD)v105)
              goto LABEL_226;
          }
          else if (((unint64_t)v114 & v112) != v109)
          {
            goto LABEL_339;
          }
          v111 = (uint64_t **)*v111;
          if (!v111)
            goto LABEL_339;
        }
      }
      while (2)
      {
        v113 = (unint64_t)v111[1];
        if (v113 != v105)
        {
          if (v113 >= *(_QWORD *)&v107)
            v113 %= *(_QWORD *)&v107;
          if (v113 != v109)
            goto LABEL_339;
          goto LABEL_216;
        }
        if (*((unsigned __int8 *)v111 + 16) != (_DWORD)v105)
        {
LABEL_216:
          v111 = (uint64_t **)*v111;
          if (!v111)
            goto LABEL_339;
          continue;
        }
        break;
      }
LABEL_226:
      v106 = 35;
      switch((int)v105)
      {
        case 12:
          goto LABEL_204;
        case 13:
          v106 = 38;
          goto LABEL_204;
        case 21:
          v106 = 62;
          goto LABEL_204;
        case 22:
          v106 = 65;
LABEL_204:
          (*(void (**)(void))(*(_QWORD *)*a1 + 8 * v106))();
          break;
        default:
          break;
      }
      v103 += 12;
      if (v103 != v104)
        continue;
      break;
    }
LABEL_200:
    v102 = **(int8x8_t **)&v102;
    if (v102)
      continue;
    break;
  }
LABEL_229:
  v115 = a2[22];
  if (!*(_QWORD *)&v115)
    goto LABEL_230;
  while (2)
  {
    v119 = *(_QWORD *)(*(_QWORD *)&v115 + 24);
    v120 = *(_QWORD *)(*(_QWORD *)&v115 + 32);
    if (v119 == v120)
      goto LABEL_234;
    v121 = *(unsigned __int8 *)(*(_QWORD *)&v115 + 16);
    while (2)
    {
      v122 = (_QWORD *)*a1;
      v166 = *(float *)(v119 + 4);
      v123 = a2[52];
      if (!*(_QWORD *)&v123)
        goto LABEL_340;
      v124 = (uint8x8_t)vcnt_s8(v123);
      v124.i16[0] = vaddlv_u8(v124);
      if (v124.u32[0] > 1uLL)
      {
        v125 = v121;
        if (*(_QWORD *)&v123 <= v121)
          v125 = v121 % *(_QWORD *)&v123;
      }
      else
      {
        v125 = (v123.i32[0] - 1) & v121;
      }
      v126 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v125);
      if (!v126 || (v127 = *v126) == 0)
LABEL_340:
        abort();
      if (v124.u32[0] < 2uLL)
      {
        v128 = *(_QWORD *)&v123 - 1;
        while (1)
        {
          v130 = v127[1];
          if (v130 == (uint64_t *)v121)
          {
            if (*((unsigned __int8 *)v127 + 16) == (_DWORD)v121)
              goto LABEL_258;
          }
          else if (((unint64_t)v130 & v128) != v125)
          {
            goto LABEL_340;
          }
          v127 = (uint64_t **)*v127;
          if (!v127)
            goto LABEL_340;
        }
      }
      while (2)
      {
        v129 = (unint64_t)v127[1];
        if (v129 != v121)
        {
          if (v129 >= *(_QWORD *)&v123)
            v129 %= *(_QWORD *)&v123;
          if (v129 != v125)
            goto LABEL_340;
          goto LABEL_248;
        }
        if (*((unsigned __int8 *)v127 + 16) != (_DWORD)v121)
        {
LABEL_248:
          v127 = (uint64_t **)*v127;
          if (!v127)
            goto LABEL_340;
          continue;
        }
        break;
      }
LABEL_258:
      if ((_DWORD)v121 == 9)
        (*(void (**)(_QWORD *, uint64_t, uint64_t, float *, _QWORD))(*v122 + 208))(v122, v119, v119 + 1, &v166, *((unsigned __int8 *)v127 + 17));
      v119 += 8;
      if (v119 != v120)
        continue;
      break;
    }
LABEL_234:
    v115 = **(int8x8_t **)&v115;
    if (v115)
      continue;
    break;
  }
LABEL_230:
  v116 = a2[37];
  if (v116)
  {
LABEL_261:
    v131 = *(_QWORD *)(*(_QWORD *)&v116 + 24);
    v132 = *(_QWORD *)(*(_QWORD *)&v116 + 32);
    if (v131 == v132)
      goto LABEL_260;
    v133 = *(unsigned __int8 *)(*(_QWORD *)&v116 + 16);
    while (1)
    {
      v134 = a2[52];
      if (!*(_QWORD *)&v134)
        goto LABEL_341;
      v135 = (uint8x8_t)vcnt_s8(v134);
      v135.i16[0] = vaddlv_u8(v135);
      if (v135.u32[0] > 1uLL)
      {
        v136 = v133;
        if (*(_QWORD *)&v134 <= v133)
          v136 = v133 % *(_QWORD *)&v134;
      }
      else
      {
        v136 = (v134.i32[0] - 1) & v133;
      }
      v137 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v136);
      if (!v137 || (v138 = *v137) == 0)
LABEL_341:
        abort();
      if (v135.u32[0] < 2uLL)
      {
        v139 = *(_QWORD *)&v134 - 1;
        while (1)
        {
          v141 = v138[1];
          if (v141 == (uint64_t *)v133)
          {
            if (*((unsigned __int8 *)v138 + 16) == (_DWORD)v133)
              goto LABEL_283;
          }
          else if (((unint64_t)v141 & v139) != v136)
          {
            goto LABEL_341;
          }
          v138 = (uint64_t **)*v138;
          if (!v138)
            goto LABEL_341;
        }
      }
      while (1)
      {
        v140 = (unint64_t)v138[1];
        if (v140 == v133)
          break;
        if (v140 >= *(_QWORD *)&v134)
          v140 %= *(_QWORD *)&v134;
        if (v140 != v136)
          goto LABEL_341;
LABEL_273:
        v138 = (uint64_t **)*v138;
        if (!v138)
          goto LABEL_341;
      }
      if (*((unsigned __int8 *)v138 + 16) != (_DWORD)v133)
        goto LABEL_273;
LABEL_283:
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 400))(*a1, v131, v131 + 1, v131 + 8, *((unsigned __int8 *)v138 + 17));
      v131 += 48;
      if (v131 == v132)
      {
LABEL_260:
        v116 = **(int8x8_t **)&v116;
        if (!*(_QWORD *)&v116)
          break;
        goto LABEL_261;
      }
    }
  }
  for (i = a2[42]; i; i = **(int8x8_t **)&i)
  {
    v142 = *(_QWORD *)(*(_QWORD *)&i + 24);
    v143 = *(_QWORD *)(*(_QWORD *)&i + 32);
    if (v142 == v143)
      continue;
    v144 = *(unsigned __int8 *)(*(_QWORD *)&i + 16);
    do
    {
      v145 = a2[52];
      if (!*(_QWORD *)&v145)
        goto LABEL_342;
      v146 = (uint8x8_t)vcnt_s8(v145);
      v146.i16[0] = vaddlv_u8(v146);
      if (v146.u32[0] > 1uLL)
      {
        v147 = v144;
        if (*(_QWORD *)&v145 <= v144)
          v147 = v144 % *(_QWORD *)&v145;
      }
      else
      {
        v147 = (v145.i32[0] - 1) & v144;
      }
      v148 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v147);
      if (!v148 || (v149 = *v148) == 0)
LABEL_342:
        abort();
      if (v146.u32[0] < 2uLL)
      {
        v150 = *(_QWORD *)&v145 - 1;
        while (1)
        {
          v152 = v149[1];
          if (v152 == (uint64_t *)v144)
          {
            if (*((unsigned __int8 *)v149 + 16) == (_DWORD)v144)
              goto LABEL_308;
          }
          else if (((unint64_t)v152 & v150) != v147)
          {
            goto LABEL_342;
          }
          v149 = (uint64_t **)*v149;
          if (!v149)
            goto LABEL_342;
        }
      }
      while (1)
      {
        v151 = (unint64_t)v149[1];
        if (v151 == v144)
          break;
        if (v151 >= *(_QWORD *)&v145)
          v151 %= *(_QWORD *)&v145;
        if (v151 != v147)
          goto LABEL_342;
LABEL_298:
        v149 = (uint64_t **)*v149;
        if (!v149)
          goto LABEL_342;
      }
      if (*((unsigned __int8 *)v149 + 16) != (_DWORD)v144)
        goto LABEL_298;
LABEL_308:
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 712))(*a1, v142, v142 + 1, v142 + 8, *((unsigned __int8 *)v149 + 17));
      v142 += 48;
    }
    while (v142 != v143);
  }
  v118 = a2[47];
  if (!*(_QWORD *)&v118)
    return;
  while (2)
  {
    v153 = *(_QWORD *)(*(_QWORD *)&v118 + 24);
    v154 = *(_QWORD *)(*(_QWORD *)&v118 + 32);
    if (v153 == v154)
      goto LABEL_310;
    v155 = *(unsigned __int8 *)(*(_QWORD *)&v118 + 16);
    while (2)
    {
      v156 = a2[52];
      if (!*(_QWORD *)&v156)
        goto LABEL_343;
      v157 = (uint8x8_t)vcnt_s8(v156);
      v157.i16[0] = vaddlv_u8(v157);
      if (v157.u32[0] > 1uLL)
      {
        v158 = v155;
        if (*(_QWORD *)&v156 <= v155)
          v158 = v155 % *(_QWORD *)&v156;
      }
      else
      {
        v158 = (v156.i32[0] - 1) & v155;
      }
      v159 = *(uint64_t ****)(*(_QWORD *)&a2[51] + 8 * v158);
      if (!v159 || (v160 = *v159) == 0)
LABEL_343:
        abort();
      if (v157.u32[0] < 2uLL)
      {
        v161 = *(_QWORD *)&v156 - 1;
        while (1)
        {
          v163 = v160[1];
          if (v163 == (uint64_t *)v155)
          {
            if (*((unsigned __int8 *)v160 + 16) == (_DWORD)v155)
              goto LABEL_334;
          }
          else if (((unint64_t)v163 & v161) != v158)
          {
            goto LABEL_343;
          }
          v160 = (uint64_t **)*v160;
          if (!v160)
            goto LABEL_343;
        }
      }
      while (2)
      {
        v162 = (unint64_t)v160[1];
        if (v162 != v155)
        {
          if (v162 >= *(_QWORD *)&v156)
            v162 %= *(_QWORD *)&v156;
          if (v162 != v158)
            goto LABEL_343;
          goto LABEL_324;
        }
        if (*((unsigned __int8 *)v160 + 16) != (_DWORD)v155)
        {
LABEL_324:
          v160 = (uint64_t **)*v160;
          if (!v160)
            goto LABEL_343;
          continue;
        }
        break;
      }
LABEL_334:
      if ((v155 - 31) <= 3u)
        (*(void (**)(void))(*(_QWORD *)*a1 + 8 * (3 * (v155 - 31) + 92)))();
      v153 += 16;
      if (v153 != v154)
        continue;
      break;
    }
LABEL_310:
    v118 = **(int8x8_t **)&v118;
    if (v118)
      continue;
    break;
  }
}

void sub_19F14AF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F14AF8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 232);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 232);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 112);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 112);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t *gms::ZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, _OWORD *a4)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t *v33;

  v5 = result;
  v6 = *a2;
  v7 = *a3;
  v8 = v6 | ((_WORD)v7 << 8);
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v7)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v7)
    {
      if (v16 == v9)
        goto LABEL_46;
      v27 = *v16;
      if (*v16)
      {
        do
        {
          v28 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v16[2];
          v15 = *(_QWORD *)v28 == (_QWORD)v16;
          v16 = (_QWORD *)v28;
        }
        while (v15);
      }
      if (v6 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        v29 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v29;
            v30 = *((unsigned __int8 *)v29 + 29);
            if (v7 >= v30)
              break;
            v29 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_53;
          }
          if (v30 >= v7)
            break;
          v29 = v25[1];
          if (!v29)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_53:
      v31 = operator new(0x30uLL);
      v31[14] = v8;
      *((_OWORD *)v31 + 2) = *a4;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v25;
      *v10 = (uint64_t *)v31;
      v32 = *(_QWORD *)v5[5];
      if (v32)
      {
        v5[5] = v32;
        v33 = *v10;
      }
      else
      {
        v33 = (uint64_t *)v31;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[6], v33);
      ++v5[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 29);
        if (v7 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_53;
      }
      if (v26 >= v7)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t *gms::ZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t *v33;

  v5 = result;
  v6 = *a2;
  v7 = *a3;
  v8 = v6 | ((_WORD)v7 << 8);
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v7)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v7)
    {
      if (v16 == v9)
        goto LABEL_46;
      v27 = *v16;
      if (*v16)
      {
        do
        {
          v28 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v16[2];
          v15 = *(_QWORD *)v28 == (_QWORD)v16;
          v16 = (_QWORD *)v28;
        }
        while (v15);
      }
      if (v6 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        v29 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v29;
            v30 = *((unsigned __int8 *)v29 + 29);
            if (v7 >= v30)
              break;
            v29 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_53;
          }
          if (v30 >= v7)
            break;
          v29 = v25[1];
          if (!v29)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_53:
      v31 = operator new(0x30uLL);
      v31[14] = v8;
      *((_QWORD *)v31 + 4) = *(_QWORD *)a4;
      *((_DWORD *)v31 + 10) = *(_DWORD *)(a4 + 8);
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v25;
      *v10 = (uint64_t *)v31;
      v32 = *(_QWORD *)v5[5];
      if (v32)
      {
        v5[5] = v32;
        v33 = *v10;
      }
      else
      {
        v33 = (uint64_t *)v31;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[6], v33);
      ++v5[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 29);
        if (v7 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_53;
      }
      if (v26 >= v7)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>(float *a1, unsigned __int8 a2, __int16 a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F14BB78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void gms::createMaterial<ggl::Texture2D>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_19F14BBDC()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  v6 = operator new(0x140uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42E55E0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *v5;
  v11 = (std::__shared_weak_count *)v5[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v1)
  {
    v14 = (unint64_t *)&v1->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v6[3] = &off_1E42C21A0;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_DWORD *)v6 + 16) = 1065353216;
  v6[9] = v4;
  v6[10] = v1;
  if (v1)
  {
    v18 = (unint64_t *)&v1->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_DWORD *)v6 + 22) = v3;
  *((_BYTE *)v6 + 92) = *v2;
  v6[12] = v10;
  v6[13] = v11;
  if (v11)
  {
    v20 = (unint64_t *)&v11->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v1)
  {
    v23 = (unint64_t *)&v1->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v7[3] = &off_1E42BF878;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *((_OWORD *)v7 + 19) = 0u;
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v1)
  {
    v27 = (unint64_t *)&v1->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  *v0 = v7 + 3;
  v0[1] = v7;
}

void gms::LinearResolver::addMaterial(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  char v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  gss::Allocator *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  __int16 v27;

  v5 = *a2;
  v6 = *((_WORD *)a2 + 4);
  LOWORD(v26) = v6;
  v7 = *((_WORD *)a2 + 5);
  HIWORD(v26) = v7;
  v8 = *((_WORD *)a2 + 6);
  v27 = v8;
  v9 = *((_BYTE *)a2 + 14);
  v10 = *((_BYTE *)a2 + 15);
  *a2 = 0;
  *(uint64_t *)((char *)a2 + 7) = 0;
  *((_BYTE *)a2 + 15) = 1;
  v12 = (_QWORD *)a1[2];
  v11 = a1[3];
  if ((unint64_t)v12 >= v11)
  {
    v14 = (_QWORD *)a1[1];
    v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(v11 - (_QWORD)v14) >> 3) > v15)
      v15 = 0x5555555555555556 * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3) >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v17 = (gss::Allocator *)operator new(24 * v16);
    v18 = (char *)v17 + 8 * (v12 - v14);
    *(_QWORD *)v18 = v5;
    *((_DWORD *)v18 + 2) = v26;
    *((_WORD *)v18 + 6) = v27;
    v19 = (char *)v17 + 24 * v16;
    v18[14] = v9;
    v18[15] = v10;
    *((_DWORD *)v18 + 4) = a3;
    v13 = v18 + 24;
    if (v12 == v14)
    {
      a1[1] = v18;
      a1[2] = v13;
      a1[3] = v19;
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = &v18[v20 * 8];
        v22 = &v12[v20];
        *((_QWORD *)v21 - 3) = v12[v20 - 3];
        v23 = v12[v20 - 2];
        *((_DWORD *)v21 - 4) = v23;
        *(_WORD *)&v18[v20 * 8 - 12] = WORD2(v23);
        *((_WORD *)v21 - 5) = *((_WORD *)&v12[v20 - 1] - 1);
        *(_QWORD *)((char *)v22 - 17) = 0;
        *(v22 - 3) = 0;
        *((_BYTE *)v22 - 9) = 1;
        *((_DWORD *)v21 - 2) = v12[v20 - 1];
        v20 -= 3;
      }
      while (&v12[v20] != v14);
      v12 = (_QWORD *)a1[1];
      v24 = (_QWORD *)a1[2];
      a1[1] = &v18[v20 * 8];
      a1[2] = v13;
      a1[3] = v19;
      while (v24 != v12)
      {
        if (!*((_BYTE *)v24 - 10) && *(v24 - 3))
        {
          v25 = gss::Allocator::instance(v17);
          v17 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 40))(v25, *(v24 - 3), *((unsigned __int16 *)v24 - 6));
          *(v24 - 3) = 0;
        }
        v24 -= 3;
      }
    }
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v12 = v5;
    *((_WORD *)v12 + 4) = v6;
    *((_WORD *)v12 + 5) = v7;
    *((_WORD *)v12 + 6) = v8;
    *((_BYTE *)v12 + 14) = v9;
    *((_BYTE *)v12 + 15) = v10;
    v13 = v12 + 3;
    *((_DWORD *)v12 + 4) = a3;
  }
  a1[2] = v13;
}

void sub_19F14C88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>,geo::Color<float,3,(geo::ColorSpace)0> ()(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C6F48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>,geo::Color<float,4,(geo::ColorSpace)0> ()(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42C6F90;
  a2[1] = v2;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addColdAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 264);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x20u, 288);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1030;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1260;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 264);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addHotAdjustment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 256);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Fu, 287);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1030;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1260;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 256);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;

  v4 = *a4;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_OWORD *)(result + 12) = v4;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;

  v4 = *a4;
  v5 = *((_DWORD *)a4 + 2);
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_DWORD *)(result + 20) = v5;
  *(_QWORD *)(result + 12) = v4;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 136);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 136);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 168);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 168);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 96);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 96);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 248);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 248);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 208);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 208);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 224);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Au, 282);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 224);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addColorRampRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 224);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Eu, 286);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C10D8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1308;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 224);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addColorRamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 176);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x11u, 273);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1110;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1340;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 176);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

void gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::addProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *__p;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  char v37;
  void *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)&__p, a4);
  v37 = 1;
  v5 = __p;
  v6 = v33;
  __p = 0;
  v33 = 0;
  v38 = v5;
  v39 = v6;
  v7 = v34;
  v40 = v34;
  v41 = v35;
  v42 = v36;
  if (v35)
  {
    v8 = v34[1];
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v8 >= v6)
        v8 %= v6;
    }
    else
    {
      v8 &= v6 - 1;
    }
    *((_QWORD *)v5 + v8) = &v40;
    v34 = 0;
    v35 = 0;
  }
  else if (v34)
  {
    do
    {
      v9 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v9;
    }
    while (v9);
  }
  v10 = __p;
  __p = 0;
  if (v10)
    operator delete(v10);
  if (v37)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          do
          {
            v12 = (_QWORD *)*v11;
            operator delete(v11);
            v11 = v12;
          }
          while (v12);
        }
        *(_QWORD *)(a1 + 32) = 0;
        v13 = *(_QWORD *)(a1 + 24);
        if (v13)
        {
          for (i = 0; i != v13; ++i)
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
        }
        *(_QWORD *)(a1 + 40) = 0;
      }
      v15 = v38;
      v38 = 0;
      v16 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v15;
      if (v16)
        operator delete(v16);
      v17 = v39;
      v18 = v40;
      *(_QWORD *)(a1 + 32) = v40;
      *(_QWORD *)(a1 + 24) = v17;
      v39 = 0;
      v19 = v41;
      *(_QWORD *)(a1 + 40) = v41;
      *(_DWORD *)(a1 + 48) = v42;
      if (v19)
      {
        v20 = v18[1];
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v20 >= v17)
            v20 %= v17;
        }
        else
        {
          v20 &= v17 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v20) = a1 + 32;
        v40 = 0;
        v41 = 0;
      }
      if (!v37)
        return;
LABEL_45:
      v29 = v40;
      if (v40)
      {
        do
        {
          v30 = (_QWORD *)*v29;
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
      v31 = v38;
      v38 = 0;
      if (v31)
        operator delete(v31);
      return;
    }
    v24 = v38;
    v25 = v39;
    v26 = v40;
    v27 = v41;
    *(_QWORD *)(a1 + 32) = v40;
    v38 = 0;
    v39 = 0;
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 40) = v27;
    *(_DWORD *)(a1 + 48) = v42;
    if (v27)
    {
      v28 = v26[1];
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v28 >= v25)
          v28 %= v25;
      }
      else
      {
        v28 &= v25 - 1;
      }
      v24[v28] = a1 + 32;
      v40 = 0;
      v41 = 0;
    }
    *(_BYTE *)(a1 + 8) = 1;
    if (v37)
      goto LABEL_45;
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v21 = *(_QWORD **)(a1 + 32);
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
    v23 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v23)
      operator delete(v23);
    *(_BYTE *)(a1 + 8) = 0;
    if (v37)
      goto LABEL_45;
  }
}

void loadASTCTexture(_QWORD *a1, uint64_t a2, unint64_t a3, _QWORD *a4, int a5)
{
  int v7;
  int v8;
  unsigned int v9;
  size_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t p_shared_owners;
  unsigned __int8 v23;
  uint64_t shared_owners;
  unint64_t v25;
  uint64_t shared_weak_owners;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  int shared_owners_high;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  geo::read_write_lock *v45;
  const char *v46;
  malloc_zone_t *zone;
  uint64_t v48;
  geo::read_write_lock *v49;
  const char *v50;
  malloc_zone_t *v51;
  std::__shared_weak_count *v52;

  if (a3 >= 0x10 && *(_DWORD *)a2 == 1554098963)
  {
    v7 = (*(unsigned __int8 *)(a2 + 9) << 16) | (*(unsigned __int8 *)(a2 + 8) << 8) | *(unsigned __int8 *)(a2 + 7);
    v8 = (*(unsigned __int8 *)(a2 + 12) << 16) | (*(unsigned __int8 *)(a2 + 11) << 8) | *(unsigned __int8 *)(a2 + 10);
    v9 = *(unsigned __int8 *)(a2 + 5);
    v10 = 16
        * (v7 + *(unsigned __int8 *)(a2 + 4) - 1)
        / *(unsigned __int8 *)(a2 + 4)
        * ((v8 + v9 - 1)
         / v9)
        * ((((*(unsigned __int8 *)(a2 + 15) << 16) | (*(unsigned __int8 *)(a2 + 14) << 8) | *(unsigned __int8 *)(a2 + 13))
          + *(unsigned __int8 *)(a2 + 6)
          - 1)
         / *(unsigned __int8 *)(a2 + 6));
    if (v10 + 16 <= a3)
    {
      switch(*(_BYTE *)(a2 + 4))
      {
        case 4:
          if (a5)
            v15 = 44;
          else
            v15 = 28;
          if (v9 == 4)
            goto LABEL_43;
          break;
        case 5:
          if (v9 == 5)
          {
            v16 = a5 == 0;
            v17 = 30;
            v18 = 46;
          }
          else
          {
            if (v9 != 4)
              break;
            v16 = a5 == 0;
            v17 = 29;
            v18 = 45;
          }
          goto LABEL_40;
        case 6:
          if (v9 == 6)
          {
            v16 = a5 == 0;
            v17 = 32;
            v18 = 48;
          }
          else
          {
            if (v9 != 5)
              break;
            v16 = a5 == 0;
            v17 = 31;
            v18 = 47;
          }
          goto LABEL_40;
        case 8:
          switch(v9)
          {
            case 8u:
              v16 = a5 == 0;
              v17 = 35;
              v18 = 51;
              break;
            case 6u:
              v16 = a5 == 0;
              v17 = 34;
              v18 = 50;
              break;
            case 5u:
              v16 = a5 == 0;
              v17 = 33;
              v18 = 49;
              break;
            default:
              goto LABEL_4;
          }
          goto LABEL_40;
        case 0xA:
          switch(*(_BYTE *)(a2 + 5))
          {
            case 5:
              v16 = a5 == 0;
              v17 = 36;
              v18 = 52;
              goto LABEL_40;
            case 6:
              v16 = a5 == 0;
              v17 = 37;
              v18 = 53;
              goto LABEL_40;
            case 8:
              v16 = a5 == 0;
              v17 = 38;
              v18 = 54;
              goto LABEL_40;
            case 0xA:
              v16 = a5 == 0;
              v17 = 39;
              v18 = 55;
              goto LABEL_40;
            default:
              goto LABEL_4;
          }
        case 0xC:
          if (v9 == 12)
          {
            v16 = a5 == 0;
            v17 = 41;
            v18 = 57;
          }
          else
          {
            if (v9 != 10)
              break;
            v16 = a5 == 0;
            v17 = 40;
            v18 = 56;
          }
LABEL_40:
          if (v16)
            v15 = v17;
          else
            v15 = v18;
LABEL_43:
          v19 = operator new(8uLL);
          *v19 = v10;
          v20 = (std::__shared_weak_count *)operator new(0x60uLL);
          v20->__shared_owners_ = 0;
          v20->__shared_weak_owners_ = 0;
          v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
          v20[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E42B67F0;
          v21 = v20 + 1;
          LODWORD(v20[1].__shared_owners_) = 1;
          HIDWORD(v20[1].__shared_owners_) = v15;
          LODWORD(v20[1].__shared_weak_owners_) = v7;
          HIDWORD(v20[1].__shared_weak_owners_) = v8;
          v20[2].__shared_owners_ = 0;
          p_shared_owners = (uint64_t)&v20[2].__shared_owners_;
          v20[2].__shared_weak_owners_ = 0;
          v20[3].__vftable = 0;
          if ((v23 & 1) == 0)
          {
            p_shared_owners = (uint64_t)&v20[2].__shared_owners_;
            if (v43)
            {
              v44 = operator new();
              *(_QWORD *)(v44 + 16) = 0xA3D02C1100000005;
              *(_QWORD *)(v44 + 24) = "GeoGL";
              *(_OWORD *)(v44 + 32) = xmmword_19FFB2DE0;
              *(_QWORD *)v44 = &off_1E42B5668;
              *(_QWORD *)(v44 + 8) = "GeoGL";
              *(_OWORD *)(v44 + 72) = 0u;
              *(_OWORD *)(v44 + 88) = 0u;
              *(_OWORD *)(v44 + 104) = 0u;
              *(_OWORD *)(v44 + 120) = 0u;
              *(_OWORD *)(v44 + 136) = 0u;
              *(_OWORD *)(v44 + 152) = 0u;
              *(_OWORD *)(v44 + 168) = 0u;
              *(_OWORD *)(v44 + 184) = 0u;
              *(_OWORD *)(v44 + 200) = 0u;
              *(_OWORD *)(v44 + 216) = 0u;
              *(_OWORD *)(v44 + 232) = 0u;
              *(_QWORD *)(v44 + 248) = 0;
              *(_OWORD *)(v44 + 56) = 0u;
              v45 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v44 + 56), 0);
              if ((_DWORD)v45)
                geo::read_write_lock::logFailure(v45, (uint64_t)"initialization", v46);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v44 + 48) = zone;
              malloc_set_zone_name(zone, "GeoGL");
              *(_QWORD *)(v44 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              ggl::Allocator::instance(void)::alloc = v44;
              p_shared_owners = (uint64_t)&v20[2].__shared_owners_;
            }
          }
          v20[3].__shared_owners_ = ggl::Allocator::instance(void)::alloc;
          v20[3].__shared_weak_owners_ = 0;
          shared_owners = v20[2].__shared_owners_;
          v25 = v20[2].__shared_weak_owners_ - shared_owners;
          if (v25)
          {
            if (v25 < 9)
            {
              shared_weak_owners = 0;
            }
            else
            {
              shared_weak_owners = 0;
              v20[2].__shared_weak_owners_ = shared_owners + 8;
            }
          }
          else
          {
            std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(p_shared_owners, 1uLL);
            shared_weak_owners = v20[3].__shared_weak_owners_;
          }
          v27 = shared_weak_owners + *v19;
          v20[3].__shared_weak_owners_ = v27;
          if (v27)
          {
            {
              v48 = operator new();
              *(_QWORD *)(v48 + 16) = 0xA3D02C1100000005;
              *(_QWORD *)(v48 + 24) = "GeoGL";
              *(_OWORD *)(v48 + 32) = xmmword_19FFB2DE0;
              *(_QWORD *)v48 = &off_1E42B5668;
              *(_QWORD *)(v48 + 8) = "GeoGL";
              *(_OWORD *)(v48 + 72) = 0u;
              *(_OWORD *)(v48 + 88) = 0u;
              *(_OWORD *)(v48 + 104) = 0u;
              *(_OWORD *)(v48 + 120) = 0u;
              *(_OWORD *)(v48 + 136) = 0u;
              *(_OWORD *)(v48 + 152) = 0u;
              *(_OWORD *)(v48 + 168) = 0u;
              *(_OWORD *)(v48 + 184) = 0u;
              *(_OWORD *)(v48 + 200) = 0u;
              *(_OWORD *)(v48 + 216) = 0u;
              *(_OWORD *)(v48 + 232) = 0u;
              *(_QWORD *)(v48 + 248) = 0;
              *(_OWORD *)(v48 + 56) = 0u;
              v49 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v48 + 56), 0);
              if ((_DWORD)v49)
                geo::read_write_lock::logFailure(v49, (uint64_t)"initialization", v50);
              v51 = malloc_create_zone(0, 0);
              *(_QWORD *)(v48 + 48) = v51;
              malloc_set_zone_name(v51, "GeoGL");
              *(_QWORD *)(v48 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              ggl::Allocator::instance(void)::alloc = v48;
            }
            v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                       + 16))(ggl::Allocator::instance(void)::alloc, v20[3].__shared_weak_owners_, 8);
            v20[2].__vftable = (std::__shared_weak_count_vtbl *)v29;
          }
          else
          {
            v29 = 0;
            v20[2].__vftable = 0;
          }
          *(_QWORD *)v20[2].__shared_owners_ = v29;
          v52 = v20;
          v30 = (void *)((uint64_t (*)(std::__shared_weak_count *, _QWORD))v20[1].__on_zero_shared)(v21, 0);
          memcpy(v30, (const void *)(a2 + 16), v10);
          operator delete(v19);
          if (v20 == (std::__shared_weak_count *)-24)
            goto LABEL_5;
          v31 = operator new(0xB0uLL);
          v32 = v31;
          v31[1] = 0;
          v31[2] = 0;
          *v31 = &off_1E42E53B0;
          if (v20)
          {
            v33 = (unint64_t *)&v20->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          shared_owners_high = HIDWORD(v20[1].__shared_owners_);
          v31[13] = 0;
          *((_DWORD *)v31 + 14) = 0;
          v31[5] = 0;
          v31[6] = 0;
          v31[10] = 0x100000001;
          *((_DWORD *)v31 + 22) = 0;
          *((_DWORD *)v31 + 23) = shared_owners_high;
          v31[12] = 0x100000001;
          v31[14] = 0;
          v31[15] = 0;
          v31[3] = &off_1E42BE438;
          v31[4] = 0;
          v31[8] = &unk_1E42BE458;
          v31[9] = "";
          *((_DWORD *)v31 + 32) = v20[1].__shared_owners_;
          v31[17] = v21;
          v31[18] = v20;
          if (v20)
          {
            v36 = (unint64_t *)&v20->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          *((_WORD *)v31 + 76) = 0;
          *((_BYTE *)v31 + 154) = 1;
          v38 = a4[1];
          v31[20] = *a4;
          v31[21] = v38;
          if (v38)
          {
            v39 = (unint64_t *)(v38 + 8);
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          v31[13] = v20[1].__shared_weak_owners_;
          if (v20)
          {
            v41 = (unint64_t *)&v20->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          *a1 = v32 + 3;
          a1[1] = v32;
          v11 = v20;
          if (!v20)
            return;
          goto LABEL_6;
        default:
          break;
      }
    }
  }
LABEL_4:
  v52 = 0;
LABEL_5:
  *a1 = 0;
  a1[1] = 0;
  v11 = v52;
  if (v52)
  {
LABEL_6:
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19F14DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F14DC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

unint64_t astcTextureSize(int a1, unint64_t a2, unint64_t a3)
{
  unint64_t result;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;

  result = 0;
  switch(a1)
  {
    case 28:
    case 44:
      v5 = (double)a2;
      v6 = 0.25;
      goto LABEL_20;
    case 29:
    case 45:
      v7 = (double)a2;
      v8 = 0.2;
      goto LABEL_6;
    case 30:
    case 46:
      v5 = (double)a2;
      v6 = 0.2;
      goto LABEL_20;
    case 31:
    case 47:
      v7 = (double)a2;
      v8 = 0.166666667;
LABEL_6:
      v9 = vcvtpd_u64_f64(v7 * v8);
      v10 = (double)a3;
      v6 = 0.25;
      goto LABEL_21;
    case 32:
    case 48:
      v5 = (double)a2;
      v11 = 0x3FC5555555555555;
      goto LABEL_19;
    case 33:
    case 49:
      v12 = (double)a2;
      v13 = 0.125;
      goto LABEL_12;
    case 34:
    case 50:
      v14 = (double)a2;
      v15 = 0.125;
      goto LABEL_14;
    case 35:
    case 51:
      v5 = (double)a2;
      v6 = 0.125;
      goto LABEL_20;
    case 36:
    case 52:
      v12 = (double)a2;
      v13 = 0.1;
LABEL_12:
      v9 = vcvtpd_u64_f64(v12 * v13);
      v10 = (double)a3;
      v6 = 0.2;
      goto LABEL_21;
    case 37:
    case 53:
      v14 = (double)a2;
      v15 = 0.1;
LABEL_14:
      v9 = vcvtpd_u64_f64(v14 * v15);
      v10 = (double)a3;
      v6 = 0.166666667;
      goto LABEL_21;
    case 38:
    case 54:
      v9 = vcvtpd_u64_f64((double)a2 * 0.1);
      v10 = (double)a3;
      v6 = 0.125;
      goto LABEL_21;
    case 39:
    case 55:
      v5 = (double)a2;
      v6 = 0.1;
      goto LABEL_20;
    case 40:
    case 56:
      v9 = vcvtpd_u64_f64((double)a2 * 0.0833333333);
      v10 = (double)a3;
      v6 = 0.1;
      goto LABEL_21;
    case 41:
    case 57:
      v5 = (double)a2;
      v11 = 0x3FB5555555555555;
LABEL_19:
      v6 = *(double *)&v11;
LABEL_20:
      v9 = vcvtpd_u64_f64(v5 * v6);
      v10 = (double)a3;
LABEL_21:
      result = 16 * v9 * vcvtpd_u64_f64(v10 * v6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 144);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 144);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 176);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 176);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 144);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 144);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addSsaoIntensity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 288);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x23u, 291);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 288);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

void gdc::LogicExecutionGraphBuilder::build(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  int isAcyclicDFS;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  ReachabilityCallbacker *v27;
  ReachabilityCallbacker *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  const std::nothrow_t *v35;
  __int128 *v36;
  BOOL v37;
  __int128 *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 144))
    goto LABEL_2;
  if (*(_QWORD *)(a2 + 104))
  {
    v6 = *(_QWORD **)(a2 + 88);
    if (v6 != (_QWORD *)(a2 + 96))
    {
      while (1)
      {
        v7 = v6[7];
        v8 = v6[8];
        if (v7 != v8)
          break;
LABEL_8:
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
        if (v10 == (_QWORD *)(a2 + 96))
          goto LABEL_14;
      }
      while (*(_BYTE *)(v7 + 32))
      {
        v7 += 40;
        if (v7 == v8)
          goto LABEL_8;
      }
      goto LABEL_2;
    }
  }
LABEL_14:
  v12 = *(_QWORD **)(a2 + 64);
  if (v12 != (_QWORD *)(a2 + 72))
  {
    while (v12[8] - v12[7] <= 0x3FuLL)
    {
      v16 = (_QWORD *)v12[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v12[2];
          v11 = *v17 == (_QWORD)v12;
          v12 = v17;
        }
        while (!v11);
      }
      v12 = v17;
      if (v17 == (_QWORD *)(a2 + 72))
        goto LABEL_15;
    }
    goto LABEL_2;
  }
LABEL_15:
  v46 = 0;
  v47 = 0;
  v48 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  v13 = (_QWORD *)(a2 + 8);
  v14 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == a2 + 8)
  {
    v15 = 1;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v14 + 3);
      v44 = *((_OWORD *)v14 + 2);
      v45 = v18;
      isAcyclicDFS = geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::isAcyclicDFS(a2, (unint64_t *)&v44, (char **)&v46, __p);
      v15 = isAcyclicDFS;
      if (!isAcyclicDFS)
        break;
      v20 = (_QWORD *)v14[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v14[2];
          v11 = *v21 == (_QWORD)v14;
          v14 = v21;
        }
        while (!v11);
      }
      v14 = v21;
    }
    while (v21 != v13);
    if (__p[0])
      operator delete(__p[0]);
  }
  if (v46)
    operator delete(v46);
  if ((v15 & 1) == 0)
  {
LABEL_2:
    *a1 = 0;
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v22 = *(_QWORD **)a2;
  if (*(_QWORD **)a2 != v13)
  {
    do
    {
      v23 = *((_OWORD *)v22 + 3);
      v44 = *((_OWORD *)v22 + 2);
      v45 = v23;
      geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::topologicalSortedDFS(a2, (unint64_t *)&v44, (char **)&v46, (char **)__p);
      v24 = (_QWORD *)v22[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v22[2];
          v11 = *v25 == (_QWORD)v22;
          v22 = v25;
        }
        while (!v11);
      }
      v22 = v25;
    }
    while (v25 != v13);
    if (v46)
      operator delete(v46);
  }
  v26 = (_QWORD *)a3[3];
  if (v26)
  {
    v27 = (ReachabilityCallbacker *)__p[0];
    v28 = (ReachabilityCallbacker *)__p[1];
    if (v26 == a3)
    {
      v50 = v49;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v49);
      if (v27 != v28)
      {
LABEL_56:
        while (1)
        {
          if (*((_BYTE *)v27 + 24) == 1)
          {
            if (!v50)
            {
LABEL_84:
              std::__throw_bad_function_call[abi:nn180100]();
              gdc::LogicExecutionGraphBuilder::addLogic();
              return;
            }
            if (((*(uint64_t (**)(_BYTE *, ReachabilityCallbacker *))(*(_QWORD *)v50 + 48))(v50, v27) & 1) == 0)
              break;
          }
          v27 = (ReachabilityCallbacker *)((char *)v27 + 32);
          if (v27 == v28)
          {
            v27 = v28;
            goto LABEL_73;
          }
        }
        v29 = (__int128 *)((char *)v28 - 32);
        while (1)
        {
          v30 = (char *)v29 - (char *)v27;
          if (v29 == (__int128 *)v27)
            break;
          v31 = v29;
          if (*((_BYTE *)v29 + 24) == 1)
          {
            if (!v50)
              goto LABEL_84;
            v32 = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v50 + 48))(v50, v29);
            v29 = v31 - 2;
            if (!v32)
              continue;
          }
          v33 = (v30 >> 5) + 1;
          if (v30 < 65)
          {
LABEL_71:
            v38 = 0;
            v34 = 0;
          }
          else
          {
            if (v33 >= 0x3FFFFFFFFFFFFFFLL)
              v34 = 0x3FFFFFFFFFFFFFFLL;
            else
              v34 = (v30 >> 5) + 1;
            v35 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            while (1)
            {
              v36 = (__int128 *)operator new(32 * v34, v35);
              if (v36)
                break;
              v37 = v34 > 1;
              v34 >>= 1;
              if (!v37)
                goto LABEL_71;
            }
            v38 = v36;
          }
          v27 = std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>((__int128 *)v27, v31, (uint64_t)v49, v33, v38, v34);
          if (v38)
            operator delete(v38);
          break;
        }
      }
    }
    else
    {
      v50 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26);
      if (v27 != v28)
        goto LABEL_56;
    }
LABEL_73:
    v39 = v50;
    if (v50 == v49)
    {
      v40 = 4;
      v39 = v49;
    }
    else
    {
      if (!v50)
        goto LABEL_78;
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_78:
    if (v27 != __p[1])
      __p[1] = v27;
  }
  v41 = operator new();
  *(_OWORD *)v41 = *(_OWORD *)__p;
  *(_QWORD *)(v41 + 16) = v43;
  *a1 = v41;
}

void gdc::LogicExecutionGraphBuilder::addLogic(uint64_t a1, unint64_t *a2, __int128 *a3, char a4, uint64_t a5, uint64_t a6)
{
  float *v12;
  int8x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  unsigned __int8 v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t **v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  void *__p[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v12 = (float *)(a1 + 24);
  v13 = *(int8x8_t *)(a1 + 32);
  if (v13)
  {
    v14 = *a2;
    v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = *a2;
      if (v14 >= *(_QWORD *)&v13)
        v16 = v14 % *(_QWORD *)&v13;
    }
    else
    {
      v16 = (*(_QWORD *)&v13 - 1) & v14;
    }
    v17 = *(_QWORD **)(*(_QWORD *)v12 + 8 * v16);
    if (v17)
    {
      v18 = (_QWORD *)*v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v13 - 1;
          while (1)
          {
            v21 = v18[1];
            if (v14 == v21)
            {
              if (v18[2] == v14)
                return;
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_21;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              goto LABEL_21;
          }
        }
        do
        {
          v20 = v18[1];
          if (v14 == v20)
          {
            if (v18[2] == v14)
              return;
          }
          else
          {
            if (v20 >= *(_QWORD *)&v13)
              v20 %= *(_QWORD *)&v13;
            if (v20 != v16)
              break;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_21:
  v70 = *(_OWORD *)a2;
  v71 = a2[2];
  v22 = *(_QWORD *)(a1 + 136);
  if (v22)
  {
    v76 = *(_OWORD *)a2;
    *(_QWORD *)&v77 = a2[2];
    (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v22 + 48))(__p, v22, &v76);
    v72 = v70;
    *(_QWORD *)&v73 = v71;
    BYTE8(v73) = a4;
    if (SBYTE7(v75) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v72 = *(_OWORD *)a2;
    *(_QWORD *)&v73 = a2[2];
    BYTE8(v73) = a4;
  }
  v68 = v72;
  v69 = v73;
  v23 = *(uint64_t ***)(a1 + 8);
  if (v23)
  {
    v24 = BYTE8(v69);
    while (1)
    {
      v25 = (unint64_t)v23[4];
      v26 = *((unsigned __int8 *)v23 + 56);
      v27 = BYTE8(v69) < v26;
      if ((_QWORD)v72 != v25)
        v27 = (unint64_t)v72 < v25;
      if (!v27)
      {
        v28 = v26 < BYTE8(v69);
        if ((_QWORD)v72 == v25)
          v29 = v28;
        else
          v29 = v25 < (unint64_t)v72;
        if (!v29)
          goto LABEL_39;
        ++v23;
      }
      v23 = (uint64_t **)*v23;
      if (!v23)
        goto LABEL_38;
    }
  }
  v24 = BYTE8(v69);
LABEL_38:
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::__emplace_unique_key_args<gdc::LogicExecutionNode,gdc::LogicExecutionNode&,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>((uint64_t *)a1, v72, v24, &v68, 0, 0);
LABEL_39:
  std::__hash_table<gdc::TypeInfo,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,std::allocator<gdc::TypeInfo>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo const&>(v12, *a2, (uint64_t)a2);
  if (*((_BYTE *)a3 + 24))
  {
    v30 = *(_QWORD *)a3;
    v67 = *(__int128 *)((char *)a3 + 8);
    v31 = *(_QWORD *)(a1 + 136);
    if (v31)
    {
      v76 = *a3;
      *(_QWORD *)&v77 = *((_QWORD *)a3 + 2);
      (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v31 + 48))(__p, v31, &v76);
    }
    else
    {
      BYTE7(v75) = 0;
      LOBYTE(__p[0]) = 0;
    }
    v33 = (uint64_t **)(a1 + 72);
    v32 = *(char **)(a1 + 72);
    if (v32)
    {
      while (1)
      {
        while (1)
        {
          v34 = v32;
          v35 = *((_QWORD *)v32 + 4);
          if (v30 >= v35)
            break;
          v32 = *(char **)v34;
          v33 = (uint64_t **)v34;
          if (!*(_QWORD *)v34)
            goto LABEL_50;
        }
        if (v35 >= v30)
          break;
        v32 = (char *)*((_QWORD *)v34 + 1);
        if (!v32)
        {
          v33 = (uint64_t **)(v34 + 8);
          goto LABEL_50;
        }
      }
    }
    else
    {
      v34 = (char *)(a1 + 72);
LABEL_50:
      v36 = v34;
      v34 = (char *)operator new(0x50uLL);
      *((_QWORD *)v34 + 4) = v30;
      *(_OWORD *)(v34 + 40) = v67;
      *((_QWORD *)v34 + 8) = 0;
      *((_QWORD *)v34 + 9) = 0;
      *((_QWORD *)v34 + 7) = 0;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = v36;
      *v33 = (uint64_t *)v34;
      v37 = **(_QWORD **)(a1 + 64);
      v38 = (uint64_t *)v34;
      if (v37)
      {
        *(_QWORD *)(a1 + 64) = v37;
        v38 = *v33;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v38);
      ++*(_QWORD *)(a1 + 80);
    }
    v40 = (char *)*((_QWORD *)v34 + 8);
    v39 = *((_QWORD *)v34 + 9);
    if ((unint64_t)v40 >= v39)
    {
      v43 = (char *)*((_QWORD *)v34 + 7);
      v44 = (v40 - v43) >> 5;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59)
        goto LABEL_108;
      v46 = v39 - (_QWORD)v43;
      if (v46 >> 4 > v45)
        v45 = v46 >> 4;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
        v47 = 0x7FFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v48 = (char *)operator new(32 * v47);
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[32 * v44];
      v50 = v73;
      *(_OWORD *)v49 = v72;
      *((_OWORD *)v49 + 1) = v50;
      v42 = v49 + 32;
      if (v40 != v43)
      {
        do
        {
          v51 = *((_OWORD *)v40 - 2);
          *(_OWORD *)(v49 - 23) = *(_OWORD *)(v40 - 23);
          *((_OWORD *)v49 - 2) = v51;
          v49 -= 32;
          v40 -= 32;
        }
        while (v40 != v43);
        v40 = (char *)*((_QWORD *)v34 + 7);
      }
      *((_QWORD *)v34 + 7) = v49;
      *((_QWORD *)v34 + 8) = v42;
      *((_QWORD *)v34 + 9) = &v48[32 * v47];
      if (v40)
        operator delete(v40);
    }
    else
    {
      v41 = v73;
      *(_OWORD *)v40 = v72;
      *((_OWORD *)v40 + 1) = v41;
      v42 = v40 + 32;
    }
    *((_QWORD *)v34 + 8) = v42;
    if (SBYTE7(v75) < 0)
      operator delete(__p[0]);
    if (*((_BYTE *)a3 + 24))
    {
      v52 = *(_QWORD **)(a1 + 96);
      if (v52)
      {
        v53 = *(_QWORD *)a3;
        v54 = (uint64_t *)(a1 + 96);
        do
        {
          v55 = v52[4];
          v56 = v55 >= v53;
          if (v55 >= v53)
            v57 = v52;
          else
            v57 = v52 + 1;
          if (v56)
            v54 = v52;
          v52 = (_QWORD *)*v57;
        }
        while (*v57);
        if (v54 != (uint64_t *)(a1 + 96) && v53 >= v54[4])
        {
          v58 = v54[7];
          v59 = v54[8];
          if (v58 != v59)
          {
            v60 = BYTE8(v73);
            do
            {
              if (*(_BYTE *)(v58 + 32) == 1 || (!*(_BYTE *)(v58 + 32) ? (v61 = v60 == 0) : (v61 = 0), v61))
              {
                v76 = *(_OWORD *)v58;
                v77 = *(_OWORD *)(v58 + 16);
                *(_OWORD *)__p = v72;
                v75 = v73;
                geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::addEdge((uint64_t *)a1, (unint64_t *)&v76, (unint64_t *)__p);
              }
              else
              {
                *(_BYTE *)(a1 + 144) = 1;
              }
              v58 += 40;
            }
            while (v58 != v59);
          }
          v62 = (uint64_t *)v54[1];
          if (v62)
          {
            do
            {
              v63 = v62;
              v62 = (uint64_t *)*v62;
            }
            while (v62);
          }
          else
          {
            v64 = v54;
            do
            {
              v63 = (uint64_t *)v64[2];
              v61 = *v63 == (_QWORD)v64;
              v64 = v63;
            }
            while (!v61);
          }
          if (*(uint64_t **)(a1 + 88) == v54)
            *(_QWORD *)(a1 + 88) = v63;
          v65 = *(uint64_t **)(a1 + 96);
          --*(_QWORD *)(a1 + 104);
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v65, v54);
          v66 = (void *)v54[7];
          if (v66)
          {
            v54[8] = (uint64_t)v66;
            operator delete(v66);
          }
          operator delete(v54);
        }
      }
      goto LABEL_105;
    }
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_108:
    abort();
  }
LABEL_105:
  gdc::LogicExecutionGraphBuilder::processDependentTypes(a1, &v72, *(_QWORD **)a5, *(_QWORD *)(a5 + 8), 0);
  gdc::LogicExecutionGraphBuilder::processDependentTypes(a1, &v72, *(_QWORD **)a6, *(_QWORD *)(a6 + 8), 1);
}

void std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  size_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)(a1 + 8);
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v2, v4, v3);
LABEL_9:
  *((_BYTE *)v2 + v3) = 0;
}

void gdc::LogicExecutionGraphBuilder::processDependentTypes(uint64_t a1, _OWORD *a2, _QWORD *a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t **v9;
  __int128 *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  __int128 v46;
  void *__p[2];
  __int128 v48;
  _BYTE v49[32];

  if (a4)
  {
    v5 = a3;
    v8 = (_QWORD *)(a1 + 72);
    v44 = &a3[3 * a4];
    v9 = (uint64_t **)(a1 + 96);
    do
    {
      v10 = (__int128 *)(v5 + 1);
      v11 = *v5;
      v12 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_21;
      v13 = v8;
      do
      {
        v14 = v12[4];
        v15 = v14 >= v11;
        if (v14 >= v11)
          v16 = v12;
        else
          v16 = v12 + 1;
        if (v15)
          v13 = v12;
        v12 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v8 || v11 < v13[4] || (v17 = v13[7], v17 == v13[8]))
      {
LABEL_21:
        v46 = *v10;
        v20 = *(_QWORD *)(a1 + 136);
        if (v20)
        {
          *(_QWORD *)v49 = *v5;
          *(_OWORD *)&v49[8] = *v10;
          (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v20 + 48))(__p, v20, v49);
        }
        else
        {
          BYTE7(v48) = 0;
          LOBYTE(__p[0]) = 0;
        }
        v21 = *v9;
        v22 = v9;
        v23 = (char *)v9;
        if (*v9)
        {
          while (1)
          {
            while (1)
            {
              v23 = (char *)v21;
              v24 = v21[4];
              if (v11 >= v24)
                break;
              v21 = *(uint64_t **)v23;
              v22 = (uint64_t **)v23;
              if (!*(_QWORD *)v23)
                goto LABEL_31;
            }
            if (v24 >= v11)
              break;
            v21 = (uint64_t *)*((_QWORD *)v23 + 1);
            if (!v21)
            {
              v22 = (uint64_t **)(v23 + 8);
              goto LABEL_31;
            }
          }
        }
        else
        {
LABEL_31:
          v25 = v23;
          v23 = (char *)operator new(0x50uLL);
          *((_QWORD *)v23 + 4) = v11;
          *(_OWORD *)(v23 + 40) = v46;
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *((_QWORD *)v23 + 7) = 0;
          *(_QWORD *)v23 = 0;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = v25;
          *v22 = (uint64_t *)v23;
          v26 = **(_QWORD **)(a1 + 88);
          v27 = (uint64_t *)v23;
          if (v26)
          {
            *(_QWORD *)(a1 + 88) = v26;
            v27 = *v22;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 96), v27);
          ++*(_QWORD *)(a1 + 104);
        }
        v29 = (char *)*((_QWORD *)v23 + 8);
        v28 = *((_QWORD *)v23 + 9);
        if ((unint64_t)v29 >= v28)
        {
          v32 = (char *)*((_QWORD *)v23 + 7);
          v33 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - v32) >> 3) + 1;
          if (v33 > 0x666666666666666)
            abort();
          v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v28 - (_QWORD)v32) >> 3);
          if (2 * v34 > v33)
            v33 = 2 * v34;
          if (v34 >= 0x333333333333333)
            v35 = 0x666666666666666;
          else
            v35 = v33;
          if (v35 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = 40 * v35;
          v37 = (char *)operator new(40 * v35);
          v38 = a2[1];
          v39 = &v37[8 * ((v29 - v32) >> 3)];
          *(_OWORD *)v39 = *a2;
          *((_OWORD *)v39 + 1) = v38;
          v39[32] = a5;
          if (v29 == v32)
          {
            v41 = &v37[8 * ((v29 - v32) >> 3)];
          }
          else
          {
            v40 = &v37[8 * ((v29 - v32) >> 3)];
            do
            {
              v41 = v40 - 40;
              v42 = *(_OWORD *)(v29 - 40);
              v43 = *(_OWORD *)(v29 - 24);
              *((_QWORD *)v40 - 1) = *((_QWORD *)v29 - 1);
              *(_OWORD *)(v40 - 24) = v43;
              *(_OWORD *)(v40 - 40) = v42;
              v29 -= 40;
              v40 -= 40;
            }
            while (v29 != v32);
          }
          v31 = v39 + 40;
          *((_QWORD *)v23 + 7) = v41;
          *((_QWORD *)v23 + 8) = v39 + 40;
          *((_QWORD *)v23 + 9) = &v37[v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          v30 = a2[1];
          *(_OWORD *)v29 = *a2;
          *((_OWORD *)v29 + 1) = v30;
          v29[32] = a5;
          v31 = v29 + 40;
        }
        *((_QWORD *)v23 + 8) = v31;
        if (SBYTE7(v48) < 0)
          operator delete(__p[0]);
      }
      else if (a5 != 1 && (a5 || *(_BYTE *)(v17 + 24)))
      {
        *(_BYTE *)(a1 + 144) = 1;
      }
      else
      {
        v18 = a2[1];
        *(_OWORD *)v49 = *a2;
        *(_OWORD *)&v49[16] = v18;
        v19 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)__p = *(_OWORD *)v17;
        v48 = v19;
        geo::DirectedGraph<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::vector<gdc::LogicExecutionNode>>::addEdge((uint64_t *)a1, (unint64_t *)v49, (unint64_t *)__p);
      }
      v5 += 3;
    }
    while (v5 != v44);
  }
}

uint64_t *std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::__emplace_unique_key_args<gdc::LogicExecutionNode,gdc::LogicExecutionNode&,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>(uint64_t *result, unint64_t a2, unsigned __int8 a3, _OWORD *a4, const void *a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  _OWORD *v19;
  __int128 v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v9 = result;
  v11 = result + 1;
  v10 = result[1];
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t *)v10;
        v13 = *(_QWORD *)(v10 + 32);
        v14 = *((unsigned __int8 *)v12 + 56);
        v15 = v14 > a3;
        if (v13 != a2)
          v15 = v13 > a2;
        if (!v15)
          break;
        v10 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_13;
      }
      v16 = v14 < a3;
      v17 = v13 == a2;
      v18 = v13 < a2;
      if (v17)
        v18 = v16;
      if (!v18)
        break;
      v10 = v12[1];
      if (!v10)
      {
        v11 = v12 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v12 = result + 1;
LABEL_13:
    v19 = operator new(0x58uLL);
    v20 = a4[1];
    v19[2] = *a4;
    v19[3] = v20;
    *((_QWORD *)v19 + 9) = 0;
    *((_QWORD *)v19 + 10) = 0;
    *((_QWORD *)v19 + 8) = 0;
    v21 = a6 - (_QWORD)a5;
    if (v21)
    {
      if (v21 < 0)
        abort();
      v22 = (char *)operator new(v21);
      *((_QWORD *)v19 + 8) = v22;
      v23 = &v22[32 * (v21 >> 5)];
      *((_QWORD *)v19 + 10) = v23;
      memcpy(v22, a5, v21 - 7);
      *((_QWORD *)v19 + 9) = v23;
    }
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v12;
    *v11 = (uint64_t)v19;
    v24 = *(_QWORD *)*v9;
    if (v24)
    {
      *v9 = v24;
      v19 = (_OWORD *)*v11;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v9[1], (uint64_t *)v19);
    ++v9[2];
  }
  return result;
}

uint64_t (***md::MapEngineMode::logicGraphWithSettings@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>))()
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t (**v15)();
  uint64_t (***v16)();
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t (***result)();
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  uint64_t (***v25)();
  uint64_t (**v26)();
  __int16 v27;
  char v28;
  uint64_t (***v29)();
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (!a2)
  {
    v9 = 0;
    goto LABEL_35;
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *a2;
  if (*a2 != v6)
  {
    v7 = *a2;
    while (*(_BYTE *)v7 != 11)
    {
      v7 += 16;
      if (v7 == v6)
        goto LABEL_10;
    }
  }
  if (v7 == v6)
LABEL_10:
    v8 = 0;
  else
    v8 = (*(_QWORD *)(v7 + 8) != 0) << 16;
  v10 = *a2;
  if (v5 != v6)
  {
    v10 = *a2;
    while (*(_BYTE *)v10)
    {
      v10 += 16;
      if (v10 == v6)
        goto LABEL_19;
    }
  }
  if (v10 == v6)
  {
LABEL_19:
    v11 = 0;
    if (v5 != v6)
    {
LABEL_20:
      while (*(_BYTE *)v5 != 19)
      {
        v5 += 16;
        if (v5 == v6)
          goto LABEL_26;
      }
    }
  }
  else
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5 != v6)
      goto LABEL_20;
  }
  if (v5 == v6)
  {
LABEL_26:
    v13 = v11 != 0;
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 8);
    v13 = v11 != 0;
    if (v12)
    {
      v14 = 256;
      goto LABEL_28;
    }
  }
  v14 = 0;
LABEL_28:
  v15 = &off_1E42D8B88;
  v26 = &off_1E42D8B88;
  v28 = BYTE2(v8);
  v27 = v8 | v13 | v14;
  v29 = &v26;
  std::__function::__func<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0,std::allocator<md::MapEngineMode::logicGraphWithSettings(md::MapEngineSettings *)::$_0>,BOOL ()(gdc::LogicExecutionNode const&)>::__clone((uint64_t)&v26, (uint64_t)v24);
  v16 = v25;
  v29 = v25;
  v25 = (uint64_t (***)())v24;
  if (v29 == &v26)
  {
    v17 = 4;
    v16 = &v26;
  }
  else
  {
    if (!v16)
      goto LABEL_36;
    v15 = *v16;
    v17 = 5;
  }
  ((void (*)(uint64_t (***)()))v15[v17])(v16);
  v9 = (uint64_t)v25;
  if (!v25)
  {
LABEL_35:
    v23 = (_QWORD *)v9;
    goto LABEL_37;
  }
  if (v25 != v24)
  {
    v9 = (*v25)[2]();
    goto LABEL_35;
  }
LABEL_36:
  v23 = v22;
  (*(void (**)(_QWORD *, _QWORD *))(v24[0] + 24))(v24, v22);
LABEL_37:
  gdc::LogicExecutionGraphBuilder::build(a3, a1 + 232, v22);
  v18 = v23;
  if (v23 == v22)
  {
    v19 = 4;
    v18 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_42;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_42:
  result = v25;
  if (v25 == v24)
  {
    v21 = 4;
    result = (uint64_t (***)())v24;
  }
  else
  {
    if (!v25)
      return result;
    v21 = 5;
  }
  return (uint64_t (***)())(*result)[v21]();
}

void sub_19F14F314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return 0;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return 0;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v5;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v5) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_19F14F61C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

ReachabilityCallbacker *std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  __int128 *v8;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  __int128 v28;
  __int128 *v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  __int128 *v69;
  ReachabilityCallbacker *v70;
  SEL v71;
  function<void ()> *v72;
  id v73;
  uint64_t v74;
  _BYTE v75[32];
  _BYTE v76[32];
  _BYTE v77[32];
  _BYTE v78[32];
  _BYTE v79[32];
  _BYTE v80[32];
  _BYTE v81[32];

  v8 = a1;
  if (a4 != 3)
  {
    if (a4 == 2)
    {
      v10 = *a1;
      *(_OWORD *)v75 = *a1;
      *(_OWORD *)&v75[16] = a1[1];
      v11 = *(__int128 *)((char *)a2 + 9);
      *a1 = *a2;
      *(__int128 *)((char *)a1 + 9) = v11;
LABEL_8:
      *a2 = v10;
      *(__int128 *)((char *)a2 + 9) = *(_OWORD *)&v75[9];
      return (ReachabilityCallbacker *)a2;
    }
    if (a6 >= a4)
    {
      v28 = a1[1];
      *a5 = *a1;
      a5[1] = v28;
      v29 = a5 + 2;
      v30 = a1 + 2;
      if (a1 + 2 == a2)
      {
        v31 = *a2;
        *(__int128 *)((char *)a1 + 9) = *(__int128 *)((char *)a2 + 9);
        *a1 = v31;
        v12 = a2;
      }
      else
      {
        do
        {
          if (*((_BYTE *)v30 + 24) != 1)
            goto LABEL_23;
          v33 = *(_QWORD *)(a3 + 24);
          if (!v33)
            goto LABEL_73;
          if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v33 + 48))(v33, v30))
          {
LABEL_23:
            v32 = *v30;
            *(__int128 *)((char *)v8 + 9) = *(__int128 *)((char *)v30 + 9);
            *v8 = v32;
            v8 += 2;
          }
          else
          {
            v34 = v30[1];
            *v29 = *v30;
            v29[1] = v34;
            v29 += 2;
          }
          v30 += 2;
        }
        while (v30 != a2);
        v35 = *a2;
        *(__int128 *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 9);
        *v8 = v35;
        v12 = v8 + 2;
        if (v29 <= a5)
          return (ReachabilityCallbacker *)v12;
      }
      v36 = 0;
      do
      {
        v37 = &v12[v36];
        v38 = a5[v36];
        *(__int128 *)((char *)v37 + 9) = *(__int128 *)((char *)&a5[v36] + 9);
        *v37 = v38;
        v36 += 2;
      }
      while (&a5[v36] < v29);
      return (ReachabilityCallbacker *)v12;
    }
    if (a4 >= 0)
      v20 = a4;
    else
      v20 = a4 + 1;
    v21 = v20 >> 1;
    v12 = &a1[2 * (v20 >> 1)];
    if (*((_BYTE *)v12 - 8) == 1)
    {
      v22 = 2 * v21;
      v23 = v20 >> 1;
      while (1)
      {
        v24 = *(_QWORD *)(a3 + 24);
        if (!v24)
          goto LABEL_73;
        if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 48))(v24, &v8[v22 - 2]) & 1) != 0)
        {
          v27 = (char *)&v8[v22];
          goto LABEL_36;
        }
        v25 = v22 * 16 - 32;
        if (v22 == 2)
          break;
        --v23;
        v26 = *((unsigned __int8 *)&v8[v22 - 2] - 8);
        v22 -= 2;
        if (v26 != 1)
        {
          v27 = (char *)v8 + v25;
LABEL_36:
          v43 = v27 - 32;
          goto LABEL_37;
        }
      }
      v44 = v8;
    }
    else
    {
      v43 = (char *)(v12 - 2);
      v23 = v20 >> 1;
LABEL_37:
      v44 = (__int128 *)std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(v8, v43, a3, v23, a5, a6);
    }
    v74 = v21;
    v45 = (uint64_t)(a2 + 2);
    v46 = a4 - v21;
    for (i = (uint64_t)&v8[2 * v21 + 2]; ; i += 32)
    {
      if (*(_BYTE *)(i - 8) == 1)
      {
        v48 = *(_QWORD *)(a3 + 24);
        if (!v48)
          goto LABEL_73;
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 48))(v48, i - 32))
          break;
      }
      if ((__int128 *)i == a2)
        goto LABEL_45;
      --v46;
    }
    v45 = std::__stable_partition_impl<std::_ClassicAlgPolicy,gdc::LogicExecutionGraphBuilder::build(std::function<BOOL ()(gdc::LogicExecutionNode const&)>)::$_0 &,std::__wrap_iter<gdc::LogicExecutionNode*>,long,std::pair<gdc::LogicExecutionNode*,long>>(i - 32, a2, a3, v46, a5, a6);
LABEL_45:
    if (v12 == v44)
      return (ReachabilityCallbacker *)v45;
    if (v12 == (__int128 *)v45)
      return (ReachabilityCallbacker *)v44;
    if (v44 + 2 != v12)
    {
      if (v12 + 2 == (__int128 *)v45)
      {
        v12 = v44 + 2;
        *(_OWORD *)v80 = *(_OWORD *)(v45 - 32);
        *(_OWORD *)&v80[16] = *(_OWORD *)(v45 - 16);
        if ((__int128 *)(v45 - 32) != v44)
          memmove(v44 + 2, v44, v45 - 32 - (_QWORD)v44 - 7);
        *v44 = *(_OWORD *)v80;
        *(__int128 *)((char *)v44 + 9) = *(_OWORD *)&v80[9];
      }
      else
      {
        v49 = ((char *)v12 - (char *)v44) >> 5;
        v50 = (v45 - (uint64_t)v12) >> 5;
        if (v49 == v50)
        {
          v51 = v44 + 2;
          v52 = (uint64_t)&v8[2 * v74 + 2];
          do
          {
            *(_OWORD *)v79 = *(v51 - 2);
            *(_OWORD *)&v79[16] = *(v51 - 1);
            v53 = *(_OWORD *)(v52 - 23);
            *(v51 - 2) = *(_OWORD *)(v52 - 32);
            *(__int128 *)((char *)v51 - 23) = v53;
            *(_OWORD *)(v52 - 32) = *(_OWORD *)v79;
            *(_OWORD *)(v52 - 23) = *(_OWORD *)&v79[9];
            if (v51 == v12)
              break;
            v51 += 2;
            v54 = v52 == v45;
            v52 += 32;
          }
          while (!v54);
        }
        else
        {
          v55 = (v45 - (uint64_t)v12) >> 5;
          v56 = ((char *)v12 - (char *)v44) >> 5;
          do
          {
            v57 = v56;
            v56 = v55;
            v55 = v57 % v55;
          }
          while (v55);
          if (v56)
          {
            v58 = &v44[2 * v56];
            do
            {
              v59 = *(v58 - 2);
              v60 = *(v58 - 1);
              v58 -= 2;
              *(_OWORD *)v81 = v59;
              *(_OWORD *)&v81[16] = v60;
              v61 = &v58[2 * v49];
              v62 = v58;
              do
              {
                v63 = v61;
                v64 = *v61;
                *(__int128 *)((char *)v62 + 9) = *(__int128 *)((char *)v61 + 9);
                *v62 = v64;
                v65 = (v45 - (uint64_t)v61) >> 5;
                v61 += 2 * v49;
                v66 = __OFSUB__(v49, v65);
                v68 = v49 - v65;
                v67 = (v68 < 0) ^ v66;
                v69 = &v44[2 * v68];
                if (!v67)
                  v61 = v69;
                v62 = v63;
              }
              while (v61 != v58);
              *(__int128 *)((char *)v63 + 9) = *(_OWORD *)&v81[9];
              *v63 = *(_OWORD *)v81;
            }
            while (v58 != v44);
          }
          return (ReachabilityCallbacker *)&v44[2 * v50];
        }
      }
      return (ReachabilityCallbacker *)v12;
    }
    *(_OWORD *)v78 = *v44;
    *(_OWORD *)&v78[16] = v44[1];
    memmove(v44, v12, v45 - (_QWORD)v12 - 7);
    v12 = (__int128 *)((char *)v44 + v45 - (_QWORD)v12);
    v41 = *(_OWORD *)v78;
LABEL_59:
    *v12 = v41;
    *(__int128 *)((char *)v12 + 9) = *(_OWORD *)&v78[9];
    return (ReachabilityCallbacker *)v12;
  }
  v12 = a1 + 2;
  if (*((_BYTE *)a1 + 56) != 1)
  {
LABEL_7:
    *(_OWORD *)v76 = *v8;
    v14 = *v8;
    *(_OWORD *)&v76[16] = v8[1];
    v15 = *(__int128 *)((char *)v8 + 41);
    *v8 = *v12;
    *(__int128 *)((char *)v8 + 9) = v15;
    *v12 = v14;
    *(__int128 *)((char *)v8 + 41) = *(_OWORD *)&v76[9];
    v10 = *v12;
    *(_OWORD *)v75 = *v12;
    *(_OWORD *)&v75[16] = v8[3];
    v16 = *(__int128 *)((char *)a2 + 9);
    *v12 = *a2;
    *(__int128 *)((char *)v8 + 41) = v16;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(a3 + 24);
  if (v13)
  {
    if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 48))(v13, v8 + 2))
    {
      *(_OWORD *)v77 = *v12;
      v39 = *v12;
      *(_OWORD *)&v77[16] = v8[3];
      v40 = *(__int128 *)((char *)a2 + 9);
      *v12 = *a2;
      *(__int128 *)((char *)v8 + 41) = v40;
      *a2 = v39;
      *(__int128 *)((char *)a2 + 9) = *(_OWORD *)&v77[9];
      v41 = *v8;
      *(_OWORD *)v78 = *v8;
      *(_OWORD *)&v78[16] = v8[1];
      v42 = *(__int128 *)((char *)v8 + 41);
      *v8 = *v12;
      *(__int128 *)((char *)v8 + 9) = v42;
      goto LABEL_59;
    }
    goto LABEL_7;
  }
LABEL_73:
  std::__throw_bad_function_call[abi:nn180100]();
  return -[ReachabilityCallbacker initWithListener:queue:](v70, v71, v72, v73);
}

void sub_19F14FC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void md::DaVinciBaseMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  md::DaVinciGroundRenderLayer *v10;
  md::DaVinciGroundRenderLayer *v11;
  md::DaVinciGroundRenderLayer *v12;
  int8x8_t *v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  int8x8_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  md::TileSelectionLogic *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  int8x8_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  v7 = *(_QWORD *)(a3 + 856);
  v8 = *(_QWORD **)(v7 + 40);
  v9 = *(_QWORD *)(v7 + 48) - (_QWORD)v8;
  if (v9 >= 0xF0)
  {
    v10 = (md::DaVinciGroundRenderLayer *)v8[29];
    if (v9 >= 0xF8)
    {
      v11 = (md::DaVinciGroundRenderLayer *)v8[30];
      if (v9 >= 0x108)
      {
        v12 = (md::DaVinciGroundRenderLayer *)v8[32];
        if (!v10)
          goto LABEL_5;
      }
      else
      {
        v12 = 0;
        if (!v10)
          goto LABEL_5;
      }
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if (!v10)
      {
LABEL_5:
        if (v11)
          md::DaVinciGroundRenderLayer::setSupportsVKM(v11, *(unsigned __int8 *)(a1 + 560));
        if (v12)
          md::DaVinciGroundRenderLayer::setSupportsVKM(v12, *(unsigned __int8 *)(a1 + 560));
        goto LABEL_9;
      }
    }
    md::DaVinciGroundRenderLayer::setSupportsVKM(v10, *(unsigned __int8 *)(a1 + 560));
    goto LABEL_5;
  }
LABEL_9:
  v13 = *(int8x8_t **)(a2 + 1120);
  v14 = v13[2];
  if (!*(_QWORD *)&v14)
    goto LABEL_155;
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = 0x87BA2765F9E38E05;
    if (*(_QWORD *)&v14 <= 0x87BA2765F9E38E05)
      v16 = 0x87BA2765F9E38E05 % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 - 1) & 0x87BA2765F9E38E05;
  }
  v17 = v13[1];
  v18 = *(_QWORD **)(*(_QWORD *)&v17 + 8 * v16);
  if (!v18 || (v19 = (_QWORD *)*v18) == 0)
  {
LABEL_29:
    v22 = 0;
    goto LABEL_30;
  }
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0x87BA2765F9E38E05)
      {
        if (v19[2] == 0x87BA2765F9E38E05)
          goto LABEL_61;
      }
      else if ((v21 & (*(_QWORD *)&v14 - 1)) != v16)
      {
        goto LABEL_29;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_29;
    }
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == 0x87BA2765F9E38E05)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_29;
LABEL_19:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_29;
  }
  if (v19[2] != 0x87BA2765F9E38E05)
    goto LABEL_19;
LABEL_61:
  v22 = v19[5];
LABEL_30:
  if (v15.u32[0] > 1uLL)
  {
    v23 = 0xAF46DE79C836B0D8;
    if (*(_QWORD *)&v14 <= 0xAF46DE79C836B0D8)
      v23 = 0xAF46DE79C836B0D8 % *(_QWORD *)&v14;
  }
  else
  {
    v23 = (*(_QWORD *)&v14 - 1) & 0xAF46DE79C836B0D8;
  }
  v24 = *(_QWORD **)(*(_QWORD *)&v17 + 8 * v23);
  if (!v24)
    goto LABEL_82;
  v25 = (_QWORD *)*v24;
  if (!v25)
    goto LABEL_82;
  if (v15.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v25[1];
      if (v27 == 0xAF46DE79C836B0D8)
      {
        if (v25[2] == 0xAF46DE79C836B0D8)
          goto LABEL_55;
      }
      else if ((v27 & (*(_QWORD *)&v14 - 1)) != v23)
      {
        goto LABEL_82;
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_82;
    }
  }
  while (2)
  {
    v26 = v25[1];
    if (v26 != 0xAF46DE79C836B0D8)
    {
      if (v26 >= *(_QWORD *)&v14)
        v26 %= *(_QWORD *)&v14;
      if (v26 != v23)
        goto LABEL_82;
      goto LABEL_39;
    }
    if (v25[2] != 0xAF46DE79C836B0D8)
    {
LABEL_39:
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_82;
      continue;
    }
    break;
  }
LABEL_55:
  if (v22)
  {
    v28 = (md::TileSelectionLogic *)v25[5];
    if (v28)
    {
      v29 = *a4;
      v30 = a4[1];
      if (*a4 != v30)
      {
        while (*(_BYTE *)v29 != 6)
        {
          v29 += 16;
          if (v29 == v30)
            goto LABEL_65;
        }
      }
      if (v29 == v30 || !*(_QWORD *)(v29 + 8))
LABEL_65:
        v31 = 0;
      else
        v31 = 2;
      +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "tilePrefetchNumberOfScreens");
      v34 = *a4;
      v35 = a4[1];
      if (*a4 != v35)
      {
        while (*(_BYTE *)v34 != 7)
        {
          v34 += 16;
          if (v34 == v35)
            goto LABEL_72;
        }
      }
      if (v34 == v35)
LABEL_72:
        v36 = 0;
      else
        v36 = *(_QWORD *)(v34 + 8);
      v37 = 0;
      v38 = 1000;
      if (!v36)
        v38 = 0;
      *((_BYTE *)v28 + 328) = v31;
      if (*(_QWORD *)(a2 + 1200) != 1)
        v37 = *(_QWORD *)(a1 + 536);
      *(_QWORD *)(v22 + 224) = v37;
      if (*(_QWORD *)(v22 + 240) != v38 || *(_DWORD *)(v22 + 252) != v33)
      {
        *(_QWORD *)(v22 + 240) = v38;
        *(_DWORD *)(v22 + 252) = v33;
        if (!v36)
          *(_QWORD *)(v22 + 256) = 0x7FFFFFFFFFFFFFFFLL;
      }
      md::TileSelectionLogic::configurationDidChange(v28);

      v13 = *(int8x8_t **)(a2 + 1120);
      v14 = v13[2];
    }
  }
LABEL_82:
  if (!*(_QWORD *)&v14)
    goto LABEL_155;
  v39 = (uint8x8_t)vcnt_s8(v14);
  v39.i16[0] = vaddlv_u8(v39);
  v40 = v39.u32[0];
  if (v39.u32[0] > 1uLL)
  {
    v41 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v14 <= 0x2FED70A4459DFCA1uLL)
      v41 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v14;
  }
  else
  {
    v41 = (*(_QWORD *)&v14 - 1) & 0x2FED70A4459DFCA1;
  }
  v42 = *(_QWORD **)(*(_QWORD *)&v13[1] + 8 * v41);
  if (!v42)
    goto LABEL_109;
  v43 = (_QWORD *)*v42;
  if (!v43)
    goto LABEL_109;
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v45 = v43[1];
      if (v45 == 0x2FED70A4459DFCA1)
      {
        if (v43[2] == 0x2FED70A4459DFCA1)
          goto LABEL_103;
      }
      else if ((v45 & (*(_QWORD *)&v14 - 1)) != v41)
      {
        goto LABEL_107;
      }
      v43 = (_QWORD *)*v43;
      if (!v43)
        goto LABEL_107;
    }
  }
  while (2)
  {
    v44 = v43[1];
    if (v44 != 0x2FED70A4459DFCA1)
    {
      if (v44 >= *(_QWORD *)&v14)
        v44 %= *(_QWORD *)&v14;
      if (v44 != v41)
        goto LABEL_107;
      goto LABEL_92;
    }
    if (v43[2] != 0x2FED70A4459DFCA1)
    {
LABEL_92:
      v43 = (_QWORD *)*v43;
      if (!v43)
        goto LABEL_107;
      continue;
    }
    break;
  }
LABEL_103:
  v46 = v43[5];
  if (v46)
  {
    if (*(_BYTE *)(v46 + 167) != 6)
      md::StyleLogic::setMapMode(v43[5], 0, 0.0);
    md::StyleLogic::setGroundMode(v46, 1);
    v13 = *(int8x8_t **)(a2 + 1120);
    v14 = v13[2];
  }
LABEL_107:
  if (!*(_QWORD *)&v14)
    goto LABEL_155;
  v47 = (uint8x8_t)vcnt_s8(v14);
  v47.i16[0] = vaddlv_u8(v47);
  v40 = v47.u32[0];
LABEL_109:
  if (v40 > 1)
  {
    v48 = 0xDAD5CEE0DC5FF509;
    if (*(_QWORD *)&v14 <= 0xDAD5CEE0DC5FF509)
      v48 = 0xDAD5CEE0DC5FF509 % *(_QWORD *)&v14;
  }
  else
  {
    v48 = (*(_QWORD *)&v14 - 1) & 0xDAD5CEE0DC5FF509;
  }
  v49 = v13[1];
  v50 = *(_QWORD **)(*(_QWORD *)&v49 + 8 * v48);
  if (!v50)
    goto LABEL_133;
  v51 = (_QWORD *)*v50;
  if (!v51)
    goto LABEL_133;
  if (v40 < 2)
  {
    while (1)
    {
      v53 = v51[1];
      if (v53 == 0xDAD5CEE0DC5FF509)
      {
        if (v51[2] == 0xDAD5CEE0DC5FF509)
          goto LABEL_129;
      }
      else if ((v53 & (*(_QWORD *)&v14 - 1)) != v48)
      {
        goto LABEL_131;
      }
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_131;
    }
  }
  while (2)
  {
    v52 = v51[1];
    if (v52 != 0xDAD5CEE0DC5FF509)
    {
      if (v52 >= *(_QWORD *)&v14)
        v52 %= *(_QWORD *)&v14;
      if (v52 != v48)
        goto LABEL_131;
      goto LABEL_118;
    }
    if (v51[2] != 0xDAD5CEE0DC5FF509)
    {
LABEL_118:
      v51 = (_QWORD *)*v51;
      if (!v51)
        goto LABEL_131;
      continue;
    }
    break;
  }
LABEL_129:
  v54 = v51[5];
  if (v54)
  {
    *(_BYTE *)(v54 + 168) = 0;
    v14 = v13[2];
  }
LABEL_131:
  if (!*(_QWORD *)&v14)
    goto LABEL_155;
  v55 = (uint8x8_t)vcnt_s8(v14);
  v55.i16[0] = vaddlv_u8(v55);
  v40 = v55.u32[0];
LABEL_133:
  if (v40 > 1)
  {
    v56 = 0x91E65CD7F1A7A7FALL;
    if (*(_QWORD *)&v14 <= 0x91E65CD7F1A7A7FALL)
      v56 = 0x91E65CD7F1A7A7FALL % *(_QWORD *)&v14;
  }
  else
  {
    v56 = (*(_QWORD *)&v14 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  v57 = *(_QWORD **)(*(_QWORD *)&v49 + 8 * v56);
  if (v57)
  {
    v58 = (_QWORD *)*v57;
    if (v58)
    {
      if (v40 < 2)
      {
        v59 = *(_QWORD *)&v14 - 1;
        while (1)
        {
          v61 = v58[1];
          if (v61 == 0x91E65CD7F1A7A7FALL)
          {
            if (v58[2] == 0x91E65CD7F1A7A7FALL)
              goto LABEL_153;
          }
          else if ((v61 & v59) != v56)
          {
            goto LABEL_155;
          }
          v58 = (_QWORD *)*v58;
          if (!v58)
            goto LABEL_155;
        }
      }
      do
      {
        v60 = v58[1];
        if (v60 == 0x91E65CD7F1A7A7FALL)
        {
          if (v58[2] == 0x91E65CD7F1A7A7FALL)
          {
LABEL_153:
            v62 = v58[5];
            if (v62)
              *(_BYTE *)(v62 + 120) = 1;
            break;
          }
        }
        else
        {
          if (v60 >= *(_QWORD *)&v14)
            v60 %= *(_QWORD *)&v14;
          if (v60 != v56)
            break;
        }
        v58 = (_QWORD *)*v58;
      }
      while (v58);
    }
  }
LABEL_155:
  v63 = **(_QWORD **)(v7 + 40);
  v64 = *(unsigned __int8 *)(v63 + 56);
  *(_OWORD *)(v63 + 60) = *(_OWORD *)(a1 + 544);
  if (!v64)
    *(_BYTE *)(v63 + 56) = 1;
}

void sub_19F150340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::CartographicMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int8x8_t *v7;
  int8x8_t v8;
  uint8x8_t v10;
  unint64_t v11;
  int8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  md::TileSelectionLogic *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = *(int8x8_t **)(a2 + 1120);
  v8 = v7[2];
  if (!*(_QWORD *)&v8)
    goto LABEL_118;
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x87BA2765F9E38E05;
    if (*(_QWORD *)&v8 <= 0x87BA2765F9E38E05)
      v11 = 0x87BA2765F9E38E05 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & 0x87BA2765F9E38E05;
  }
  v12 = v7[1];
  v13 = *(_QWORD **)(*(_QWORD *)&v12 + 8 * v11);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_21:
    v17 = 0;
    goto LABEL_22;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x87BA2765F9E38E05)
      {
        if (v14[2] == 0x87BA2765F9E38E05)
          goto LABEL_48;
      }
      else if ((v16 & (*(_QWORD *)&v8 - 1)) != v11)
      {
        goto LABEL_21;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0x87BA2765F9E38E05)
      break;
    if (v15 >= *(_QWORD *)&v8)
      v15 %= *(_QWORD *)&v8;
    if (v15 != v11)
      goto LABEL_21;
LABEL_11:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_21;
  }
  if (v14[2] != 0x87BA2765F9E38E05)
    goto LABEL_11;
LABEL_48:
  v17 = v14[5];
LABEL_22:
  if (v10.u32[0] > 1uLL)
  {
    v18 = 0xAF46DE79C836B0D8;
    if (*(_QWORD *)&v8 <= 0xAF46DE79C836B0D8)
      v18 = 0xAF46DE79C836B0D8 % *(_QWORD *)&v8;
  }
  else
  {
    v18 = (*(_QWORD *)&v8 - 1) & 0xAF46DE79C836B0D8;
  }
  v19 = *(_QWORD **)(*(_QWORD *)&v12 + 8 * v18);
  if (!v19)
    goto LABEL_69;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_69;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0xAF46DE79C836B0D8)
      {
        if (v20[2] == 0xAF46DE79C836B0D8)
          goto LABEL_42;
      }
      else if ((v22 & (*(_QWORD *)&v8 - 1)) != v18)
      {
        goto LABEL_69;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_69;
    }
  }
  while (2)
  {
    v21 = v20[1];
    if (v21 != 0xAF46DE79C836B0D8)
    {
      if (v21 >= *(_QWORD *)&v8)
        v21 %= *(_QWORD *)&v8;
      if (v21 != v18)
        goto LABEL_69;
      goto LABEL_31;
    }
    if (v20[2] != 0xAF46DE79C836B0D8)
    {
LABEL_31:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_69;
      continue;
    }
    break;
  }
LABEL_42:
  if (v17)
  {
    v23 = (md::TileSelectionLogic *)v20[5];
    if (v23)
    {
      v24 = *a4;
      v25 = a4[1];
      if (*a4 != v25)
      {
        while (*(_BYTE *)v24 != 6)
        {
          v24 += 16;
          if (v24 == v25)
            goto LABEL_52;
        }
      }
      if (v24 == v25 || !*(_QWORD *)(v24 + 8))
LABEL_52:
        v26 = 0;
      else
        v26 = 2;
      +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v27, "tilePrefetchNumberOfScreens");
      v29 = *a4;
      v30 = a4[1];
      if (*a4 != v30)
      {
        while (*(_BYTE *)v29 != 7)
        {
          v29 += 16;
          if (v29 == v30)
            goto LABEL_59;
        }
      }
      if (v29 == v30)
LABEL_59:
        v31 = 0;
      else
        v31 = *(_QWORD *)(v29 + 8);
      v32 = 0;
      v33 = 1000;
      if (!v31)
        v33 = 0;
      *((_BYTE *)v23 + 328) = v26;
      if (*(_QWORD *)(a2 + 1200) != 1)
        v32 = *(_QWORD *)(a1 + 536);
      *(_QWORD *)(v17 + 224) = v32;
      if (*(_QWORD *)(v17 + 240) != v33 || *(_DWORD *)(v17 + 252) != v28)
      {
        *(_QWORD *)(v17 + 240) = v33;
        *(_DWORD *)(v17 + 252) = v28;
        if (!v31)
          *(_QWORD *)(v17 + 256) = 0x7FFFFFFFFFFFFFFFLL;
      }
      md::TileSelectionLogic::configurationDidChange(v23);

      v7 = *(int8x8_t **)(a2 + 1120);
      v8 = v7[2];
    }
  }
LABEL_69:
  if (!*(_QWORD *)&v8)
    goto LABEL_118;
  v34 = (uint8x8_t)vcnt_s8(v8);
  v34.i16[0] = vaddlv_u8(v34);
  v35 = v34.u32[0];
  if (v34.u32[0] > 1uLL)
  {
    v36 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v8 <= 0x2FED70A4459DFCA1uLL)
      v36 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v8;
  }
  else
  {
    v36 = (*(_QWORD *)&v8 - 1) & 0x2FED70A4459DFCA1;
  }
  v37 = *(_QWORD **)(*(_QWORD *)&v7[1] + 8 * v36);
  if (!v37)
    goto LABEL_96;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_96;
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v38[1];
      if (v40 == 0x2FED70A4459DFCA1)
      {
        if (v38[2] == 0x2FED70A4459DFCA1)
          goto LABEL_90;
      }
      else if ((v40 & (*(_QWORD *)&v8 - 1)) != v36)
      {
        goto LABEL_94;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v39 = v38[1];
    if (v39 != 0x2FED70A4459DFCA1)
    {
      if (v39 >= *(_QWORD *)&v8)
        v39 %= *(_QWORD *)&v8;
      if (v39 != v36)
        goto LABEL_94;
      goto LABEL_79;
    }
    if (v38[2] != 0x2FED70A4459DFCA1)
    {
LABEL_79:
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_90:
  v41 = v38[5];
  if (v41)
  {
    if (*(_BYTE *)(v41 + 167) != 6)
      md::StyleLogic::setMapMode(v38[5], 0, 0.0);
    md::StyleLogic::setGroundMode(v41, 0);
    v7 = *(int8x8_t **)(a2 + 1120);
    v8 = v7[2];
  }
LABEL_94:
  if (!*(_QWORD *)&v8)
    goto LABEL_118;
  v42 = (uint8x8_t)vcnt_s8(v8);
  v42.i16[0] = vaddlv_u8(v42);
  v35 = v42.u32[0];
LABEL_96:
  if (v35 > 1)
  {
    v43 = 0xDAD5CEE0DC5FF509;
    if (*(_QWORD *)&v8 <= 0xDAD5CEE0DC5FF509)
      v43 = 0xDAD5CEE0DC5FF509 % *(_QWORD *)&v8;
  }
  else
  {
    v43 = (*(_QWORD *)&v8 - 1) & 0xDAD5CEE0DC5FF509;
  }
  v44 = *(_QWORD **)(*(_QWORD *)&v7[1] + 8 * v43);
  if (v44)
  {
    v45 = (_QWORD *)*v44;
    if (v45)
    {
      if (v35 < 2)
      {
        v46 = *(_QWORD *)&v8 - 1;
        while (1)
        {
          v48 = v45[1];
          if (v48 == 0xDAD5CEE0DC5FF509)
          {
            if (v45[2] == 0xDAD5CEE0DC5FF509)
              goto LABEL_116;
          }
          else if ((v48 & v46) != v43)
          {
            goto LABEL_118;
          }
          v45 = (_QWORD *)*v45;
          if (!v45)
            goto LABEL_118;
        }
      }
      do
      {
        v47 = v45[1];
        if (v47 == 0xDAD5CEE0DC5FF509)
        {
          if (v45[2] == 0xDAD5CEE0DC5FF509)
          {
LABEL_116:
            v49 = v45[5];
            if (v49)
              *(_BYTE *)(v49 + 168) = 0;
            break;
          }
        }
        else
        {
          if (v47 >= *(_QWORD *)&v8)
            v47 %= *(_QWORD *)&v8;
          if (v47 != v43)
            break;
        }
        v45 = (_QWORD *)*v45;
      }
      while (v45);
    }
  }
LABEL_118:
  v50 = *(uint64_t **)(*(_QWORD *)(a3 + 856) + 40);
  if (*(uint64_t **)(*(_QWORD *)(a3 + 856) + 48) == v50)
    v51 = 0;
  else
    v51 = *v50;
  if (*(_BYTE *)(a1 + 548))
  {
    if (*(_BYTE *)(v51 + 56))
    {
      *(_DWORD *)(v51 + 60) = *(_DWORD *)(a1 + 552);
      *(_DWORD *)(v51 + 64) = *(_DWORD *)(a1 + 556);
      *(_DWORD *)(v51 + 68) = *(_DWORD *)(a1 + 560);
      *(_DWORD *)(v51 + 72) = *(_DWORD *)(a1 + 564);
      v52 = v7[2];
      if (!*(_QWORD *)&v52)
        return;
    }
    else
    {
      *(_OWORD *)(v51 + 60) = *(_OWORD *)(a1 + 552);
      *(_BYTE *)(v51 + 56) = 1;
      v7 = *(int8x8_t **)(a2 + 1120);
      v52 = v7[2];
      if (!*(_QWORD *)&v52)
        return;
    }
    goto LABEL_128;
  }
  if (*(_BYTE *)(v51 + 56))
    *(_BYTE *)(v51 + 56) = 0;
  v52 = v7[2];
  if (v52)
  {
LABEL_128:
    v53 = (uint8x8_t)vcnt_s8(v52);
    v53.i16[0] = vaddlv_u8(v53);
    if (v53.u32[0] > 1uLL)
    {
      v54 = 0x17767EADC5B287BLL;
      if (*(_QWORD *)&v52 <= 0x17767EADC5B287BuLL)
        v54 = 0x17767EADC5B287BuLL % *(_QWORD *)&v52;
    }
    else
    {
      v54 = (*(_QWORD *)&v52 - 1) & 0x17767EADC5B287BLL;
    }
    v55 = *(_QWORD **)(*(_QWORD *)&v7[1] + 8 * v54);
    if (v55)
    {
      v56 = (_QWORD *)*v55;
      if (v56)
      {
        if (v53.u32[0] < 2uLL)
        {
          v57 = *(_QWORD *)&v52 - 1;
          while (1)
          {
            v59 = v56[1];
            if (v59 == 0x17767EADC5B287BLL)
            {
              if (v56[2] == 0x17767EADC5B287BLL)
                goto LABEL_150;
            }
            else if ((v59 & v57) != v54)
            {
              return;
            }
            v56 = (_QWORD *)*v56;
            if (!v56)
              return;
          }
        }
        do
        {
          v58 = v56[1];
          if (v58 == 0x17767EADC5B287BLL)
          {
            if (v56[2] == 0x17767EADC5B287BLL)
            {
LABEL_150:
              v60 = v56[5];
              if (v60)
                *(_DWORD *)(v60 + 288) = 0;
              return;
            }
          }
          else
          {
            if (v58 >= *(_QWORD *)&v52)
              v58 %= *(_QWORD *)&v52;
            if (v58 != v54)
              return;
          }
          v56 = (_QWORD *)*v56;
        }
        while (v56);
      }
    }
  }
}

void sub_19F1509F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelLayerDataSource::didDeactivate(md::LabelLayerDataSource *this)
{
  _OWORD *v1;
  std::__shared_weak_count *v2;

  v1 = (_OWORD *)((char *)this + 808);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  *v1 = 0u;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *gdc::LayerDataSource::setNeedsUpdateFunction(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 376);
  std::mutex::lock((std::mutex *)(a1 + 376));
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v19 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v18, (_QWORD *)(a1 + 440));
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  std::mutex::unlock(v4);
  v8 = *(_QWORD *)(a1 + 16);
  v16[0] = &off_1E42D57B8;
  v16[1] = a1;
  v17 = v16;
  std::mutex::lock((std::mutex *)(v8 + 80));
  v9 = (_QWORD *)(v8 + 248);
  if (v17)
  {
    if (v17 == v16)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(v16[0] + 24))(v16, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(void))(*v17 + 16))();
    }
  }
  else
  {
    v19 = 0;
  }
  if (v9 != v18)
  {
    v10 = v19;
    v11 = *(_QWORD **)(v8 + 272);
    if (v19 == v18)
    {
      if (v11 == v9)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v18[0] + 24))(v18, v20);
        (*(void (**)(_QWORD *))(*v19 + 32))(v19);
        v19 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v8 + 272) + 24))(*(_QWORD *)(v8 + 272), v18);
        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 272) + 32))(*(_QWORD *)(v8 + 272));
        *(_QWORD *)(v8 + 272) = 0;
        v19 = v18;
        (*(void (**)(_QWORD *, uint64_t))(v20[0] + 24))(v20, v8 + 248);
        (*(void (**)(_QWORD *))(v20[0] + 32))(v20);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v18[0] + 24))(v18, v8 + 248);
        (*(void (**)(_QWORD *))(*v19 + 32))(v19);
        v19 = *(_QWORD **)(v8 + 272);
      }
      *(_QWORD *)(v8 + 272) = v9;
    }
    else if (v11 == v9)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v8 + 248) + 24))(v8 + 248, v18);
      (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 272) + 32))(*(_QWORD *)(v8 + 272));
      *(_QWORD *)(v8 + 272) = v19;
      v19 = v18;
    }
    else
    {
      v19 = *(_QWORD **)(v8 + 272);
      *(_QWORD *)(v8 + 272) = v10;
    }
  }
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_30;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_30:
  std::mutex::unlock((std::mutex *)(v8 + 80));
  result = v17;
  if (v17 == v16)
  {
    v15 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

uint64_t md::SingleGEOResourceDataRequester::downloadTileSize(md::SingleGEOResourceDataRequester *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
}

void std::vector<md::TileSelectionTileSetType>::insert(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  __int16 *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _WORD *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int16 v49;
  char *v50;
  int64_t v51;
  char *v52;
  size_t v53;
  char *v54;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 1;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)v9 = *(_WORD *)a3;
      a1[1] = v9 + 2;
    }
    else
    {
      v11 = v5 - (_QWORD)(v9 + 2);
      v12 = v11 >> 1;
      v13 = (__int16 *)(v5 - 2);
      if (v5 < 2)
      {
        v20 = a1[1];
      }
      else
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
        v15 = (char *)(v14 + v6);
        v16 = v14 + v6 + 2;
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~v6 - v14;
        v18 = v5 - (_QWORD)v15;
        v19 = v17 >= 0x1E && v18 > 0x1F;
        v20 = a1[1];
        if (!v19)
          goto LABEL_65;
        v21 = (v17 >> 1) + 1;
        v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
        v13 = (__int16 *)((char *)v13 + v22);
        v23 = (_OWORD *)(v5 + 16);
        v24 = (__int128 *)(2 * v12 + 2 * v8 + v6 + 16);
        v25 = v21 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        v20 = (_WORD *)(v5 + v22);
        if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_65:
          do
          {
            v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = v20;
      if ((char *)v5 != v9 + 2)
        memmove((void *)(v5 - 2 * v12), v9, v11);
      if (v9 <= v3)
        v3 += 2 * (a1[1] > v3);
      *(_WORD *)v9 = *(_WORD *)v3;
    }
    return;
  }
  v28 = v5 - v6;
  if (v28 <= -3)
    abort();
  v30 = v28 >> 1;
  v31 = v10 - v6;
  if (v31 <= v30 + 1)
    v32 = v30 + 1;
  else
    v32 = v31;
  if (v31 >= 0x7FFFFFFFFFFFFFFELL)
    v33 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v33 = v32;
  if (v33)
  {
    if (v33 < 0)
      goto LABEL_62;
    v34 = (char *)operator new(2 * v33);
  }
  else
  {
    v34 = 0;
  }
  v35 = &v34[2 * v8];
  v36 = &v34[2 * v33];
  if (v8 != v33)
  {
LABEL_33:
    v38 = (char *)v6;
    goto LABEL_34;
  }
  if (v7 >= 1)
  {
    v37 = v8 + 2;
    if (v8 >= -1)
      v37 = v8 + 1;
    v35 -= v37 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  if ((_BYTE *)v6 == a2)
    v48 = 1;
  else
    v48 = v7;
  if (v48 < 0)
LABEL_62:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v35 = (char *)operator new(2 * v48);
  v36 = &v35[2 * v48];
  if (!v34)
    goto LABEL_33;
  operator delete(v34);
  v36 = &v35[2 * v48];
  v38 = (char *)*a1;
LABEL_34:
  *(_WORD *)v35 = *(_WORD *)v3;
  v39 = v35 + 2;
  if (v38 != v9)
  {
    v40 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    v41 = v40 - v38 - 2;
    if (v41 < 0x1E)
    {
      v43 = v9;
    }
    else if ((unint64_t)(v40 - v35) < 0x20)
    {
      v43 = v9;
    }
    else
    {
      v42 = (v41 >> 1) + 1;
      v43 = &v9[-2 * (v42 & 0xFFFFFFFFFFFFFFF0)];
      v44 = v35 - 16;
      v45 = (__int128 *)(v6 + 2 * v8 - 16);
      v46 = v42 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v47 = *v45;
        *((_OWORD *)v44 - 1) = *(v45 - 1);
        *(_OWORD *)v44 = v47;
        v44 -= 32;
        v45 -= 2;
        v46 -= 16;
      }
      while (v46);
      v35 -= 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
      if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_56;
    }
    do
    {
      v49 = *((_WORD *)v43 - 1);
      v43 -= 2;
      *((_WORD *)v35 - 1) = v49;
      v35 -= 2;
    }
    while (v43 != v38);
  }
LABEL_56:
  v50 = (char *)a1[1];
  v51 = v50 - v9;
  if (v50 != v9)
  {
    v52 = v9;
    v53 = v50 - v9;
    v54 = v36;
    memmove(v39, v52, v53);
    v36 = v54;
    v38 = (char *)*a1;
  }
  *a1 = v35;
  a1[1] = &v39[v51];
  a1[2] = v36;
  if (v38)
    operator delete(v38);
}

void sub_19F151060(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void md::LabelLayerDataSource::didActivate(md::LabelLayerDataSource *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = *((_QWORD *)this + 100);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v10);
    v3 = v10;
    v4 = v11;
    if (v11)
    {
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    *((_QWORD *)this + 101) = v3;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = v4;
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      v4 = v11;
    }
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::LabelsLogic::labelManagerForWorldType();
  }
}

char *md::LabelsLogic::labelManagerForWorldType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  void **v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  _QWORD *v15;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  void *v60;
  __int128 v61;

  if (a2 == 6)
    v3 = 5;
  else
    v3 = a2;
  v4 = *(int8x8_t *)(a1 + 184);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = v3;
      if (*(_QWORD *)&v4 <= v3)
        v6 = v3 % *(_QWORD *)&v4;
    }
    else
    {
      v6 = (v4.i32[0] - 1) & v3;
    }
    v7 = *(void ***)(*(_QWORD *)(a1 + 176) + 8 * v6);
    if (v7)
    {
      v8 = (char *)*v7;
      if (*v7)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v11 = *((_QWORD *)v8 + 1);
            if (v11 == v3)
            {
              if (v8[16] == (_DWORD)v3)
                return v8 + 24;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_24;
            }
            v8 = *(char **)v8;
            if (!v8)
              goto LABEL_24;
          }
        }
        do
        {
          v10 = *((_QWORD *)v8 + 1);
          if (v10 == v3)
          {
            if (v8[16] == (_DWORD)v3)
              return v8 + 24;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v4)
              v10 %= *(_QWORD *)&v4;
            if (v10 != v6)
              break;
          }
          v8 = *(char **)v8;
        }
        while (v8);
      }
    }
  }
LABEL_24:
  v12 = *(_QWORD *)(a1 + 152);
  v13 = (std::__shared_weak_count *)operator new(0xF40uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAE18;
  v15 = md::LabelManager::LabelManager(&v13[1].__vftable, v3, v12);
  *(_QWORD *)&v61 = v15;
  *((_QWORD *)&v61 + 1) = v13;
  shared_weak_owners = (std::__shared_weak_count *)v13[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_36;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v13[1].__shared_owners_ = (uint64_t)v15;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v13[1].__shared_owners_ = (uint64_t)v15;
    v13[1].__shared_weak_owners_ = (uint64_t)v13;
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (v23)
  {
LABEL_36:
    v24 = *(_QWORD *)(a1 + 184);
    if (!v24)
      goto LABEL_58;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v24 = *(_QWORD *)(a1 + 184);
  if (!v24)
    goto LABEL_58;
LABEL_37:
  v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v12 = v3;
    if (v24 <= v3)
      v12 = v3 % v24;
  }
  else
  {
    v12 = ((_DWORD)v24 - 1) & v3;
  }
  v26 = *(void ***)(*(_QWORD *)(a1 + 176) + 8 * v12);
  if (v26)
  {
    v8 = (char *)*v26;
    if (*v26)
    {
      if (v25.u32[0] < 2uLL)
      {
        while (1)
        {
          v28 = *((_QWORD *)v8 + 1);
          if (v28 == v3)
          {
            if (v8[16] == (_DWORD)v3)
              goto LABEL_118;
          }
          else if ((v28 & (v24 - 1)) != v12)
          {
            goto LABEL_58;
          }
          v8 = *(char **)v8;
          if (!v8)
            goto LABEL_58;
        }
      }
      do
      {
        v27 = *((_QWORD *)v8 + 1);
        if (v27 == v3)
        {
          if (v8[16] == (_DWORD)v3)
            goto LABEL_118;
        }
        else
        {
          if (v27 >= v24)
            v27 %= v24;
          if (v27 != v12)
            break;
        }
        v8 = *(char **)v8;
      }
      while (v8);
    }
  }
LABEL_58:
  v8 = (char *)operator new(0x28uLL);
  v29 = (_QWORD *)(a1 + 192);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = v3;
  v8[16] = v3;
  *(_OWORD *)(v8 + 24) = v61;
  v61 = 0uLL;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 200) + 1);
  v31 = *(float *)(a1 + 208);
  if (v24 && (float)(v31 * (float)v24) >= v30)
  {
    v3 = v12;
    goto LABEL_108;
  }
  v32 = 1;
  if (v24 >= 3)
    v32 = (v24 & (v24 - 1)) != 0;
  v33 = v32 | (2 * v24);
  v34 = vcvtps_u32_f32(v30 / v31);
  if (v33 <= v34)
    prime = v34;
  else
    prime = v33;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v24 = *(_QWORD *)(a1 + 184);
  }
  if (prime > v24)
  {
LABEL_71:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v36 = operator new(8 * prime);
    v37 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v36;
    if (v37)
      operator delete(v37);
    v38 = 0;
    *(_QWORD *)(a1 + 184) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v38++) = 0;
    while (prime != v38);
    v39 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_95;
    v40 = v39[1];
    v41 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v42 = v40 & v41;
      *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v42) = v29;
      for (i = (_QWORD *)*v39; *v39; i = (_QWORD *)*v39)
      {
        v44 = i[1] & v41;
        if (v44 == v42)
        {
          v39 = i;
        }
        else
        {
          v45 = *(_QWORD *)(a1 + 176);
          if (*(_QWORD *)(v45 + 8 * v44))
          {
            *v39 = *i;
            v46 = 8 * v44;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 176) + v46);
            **(_QWORD **)(*(_QWORD *)(a1 + 176) + v46) = i;
          }
          else
          {
            *(_QWORD *)(v45 + 8 * v44) = v39;
            v39 = i;
            v42 = v44;
          }
        }
      }
LABEL_95:
      v24 = prime;
      goto LABEL_96;
    }
    if (v40 >= prime)
      v40 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v40) = v29;
    v50 = (_QWORD *)*v39;
    if (!*v39)
      goto LABEL_95;
    while (1)
    {
      v52 = v50[1];
      if (v52 >= prime)
        v52 %= prime;
      if (v52 != v40)
      {
        v53 = *(_QWORD *)(a1 + 176);
        if (!*(_QWORD *)(v53 + 8 * v52))
        {
          *(_QWORD *)(v53 + 8 * v52) = v39;
          goto LABEL_100;
        }
        *v39 = *v50;
        v51 = 8 * v52;
        *v50 = **(_QWORD **)(*(_QWORD *)(a1 + 176) + v51);
        **(_QWORD **)(*(_QWORD *)(a1 + 176) + v51) = v50;
        v50 = v39;
      }
      v52 = v40;
LABEL_100:
      v39 = v50;
      v50 = (_QWORD *)*v50;
      v40 = v52;
      if (!v50)
        goto LABEL_95;
    }
  }
  if (prime >= v24)
    goto LABEL_96;
  v47 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 200) / *(float *)(a1 + 208));
  if (v24 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
  {
    v47 = std::__next_prime(v47);
  }
  else
  {
    v49 = 1 << -(char)__clz(v47 - 1);
    if (v47 >= 2)
      v47 = v49;
  }
  if (prime <= v47)
    prime = v47;
  if (prime < v24)
  {
    if (!prime)
    {
      v60 = *(void **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = 0;
      if (v60)
        operator delete(v60);
      v24 = 0;
      *(_QWORD *)(a1 + 184) = 0;
      goto LABEL_96;
    }
    goto LABEL_71;
  }
  v24 = *(_QWORD *)(a1 + 184);
LABEL_96:
  if ((v24 & (v24 - 1)) != 0)
  {
    if (v24 <= v3)
      v3 %= v24;
  }
  else
  {
    v3 = ((_DWORD)v24 - 1) & v3;
  }
LABEL_108:
  v54 = *(_QWORD *)(a1 + 176);
  v55 = *(_QWORD **)(v54 + 8 * v3);
  if (v55)
  {
    *(_QWORD *)v8 = *v55;
  }
  else
  {
    *(_QWORD *)v8 = *v29;
    *v29 = v8;
    *(_QWORD *)(v54 + 8 * v3) = v29;
    if (!*(_QWORD *)v8)
      goto LABEL_117;
    v56 = *(_QWORD *)(*(_QWORD *)v8 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v56 >= v24)
        v56 %= v24;
    }
    else
    {
      v56 &= v24 - 1;
    }
    v55 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v56);
  }
  *v55 = v8;
LABEL_117:
  ++*(_QWORD *)(a1 + 200);
LABEL_118:
  if (*((_QWORD *)&v61 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v61 + 1) + 16))(*((_QWORD *)&v61 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v61 + 1));
    }
  }
  return v8 + 24;
}

void sub_19F151768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F15178C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void gdc::LayerDataManager::forEachLayer(__int16 *a1, __int16 *a2, uint64_t a3)
{
  __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  md::SingleGEOResourceDataRequester *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;

  if (a1 != a2)
  {
    v5 = a1;
    while (1)
    {
      v6 = *((_QWORD *)v5 + 1);
      v7 = *((_QWORD *)v5 + 2);
      v13 = *v5;
      v11 = v7;
      v12 = v6;
      v8 = *(_QWORD *)(a3 + 24);
      if (!v8)
        break;
      (*(void (**)(uint64_t, __int16 *, uint64_t *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v13, &v12, &v11);
      v5 += 12;
      if (v5 == a2)
        return;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    md::SingleGEOResourceDataRequester::minRequiredTileSizeForTileSet(v9, v10);
  }
}

void md::SingleGEOResourceDataRequester::minRequiredTileSizeForTileSet(md::SingleGEOResourceDataRequester *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(&v11, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
  if ((_BYTE)v11
    && ((*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(&v10, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12)), (_BYTE)v10))
  {
    if (*((_WORD *)this + 11) == 13)
    {
      v4 = (char *)&v10 + 4;
    }
    else if (*((_BYTE *)this + 28))
    {
      v4 = (char *)this + 32;
    }
    else
    {
      v4 = (char *)&v10 + 4;
    }
    v5 = *(_DWORD *)v4;
    v6 = HIDWORD(v11);
    v7 = HIDWORD(v10) >= v5;
    v8 = HIDWORD(v10) - v5;
    if (v8 != 0 && v7)
    {
      v9 = (double)HIDWORD(v11);
      v6 = (exp2(-(double)v8) * v9);
    }
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = v6;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t md::SingleGEOResourceDataRequester::downloadZoomRange(md::SingleGEOResourceDataRequester *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
}

void gdc::DataKeyRequester::minRequiredTileSizeForTileSet(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void gdc::DataKeyRequester::downloadZoomRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::SingleGEOResourceDataRequester::visibleZoomRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(this + 28))
  {
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(this + 32);
    *(_BYTE *)a2 = 1;
  }
  *(_BYTE *)(a2 + 8) = 0;
  if (*(_BYTE *)(this + 36))
  {
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(this + 40);
    *(_BYTE *)(a2 + 8) = 1;
  }
  return this;
}

void md::S2ResourceDataRequester::minRequiredTileSizeForTileSet(md::S2ResourceDataRequester *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(&v8, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
  if ((_BYTE)v8)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(&v7, *((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
    v5 = v7;
    if ((_BYTE)v7)
    {
      if (*((_BYTE *)this + 28))
        v6 = (char *)this + 32;
      else
        v6 = (char *)&v7 + 4;
      LODWORD(v4) = HIDWORD(v8);
      *(_DWORD *)(a2 + 4) = (exp2(-(double)(HIDWORD(v7) - *(_DWORD *)v6)) * (double)v4);
      v5 = 1;
    }
    *(_BYTE *)a2 = v5;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t md::S2ResourceDataRequester::downloadZoomRange(md::S2ResourceDataRequester *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
}

uint64_t std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_2,std::allocator<md::RunLoopController *>,std::function>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4258;
  a2[1] = v2;
  return result;
}

uint64_t md::S2ResourceDataRequester::downloadTileSize(md::S2ResourceDataRequester *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), *((unsigned __int16 *)this + 12));
}

void md::StyleLogic::setGroundMode(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*(unsigned __int8 *)(a1 + 172) != a2)
  {
    *(_BYTE *)(a1 + 172) = a2;
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10051u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10051u, *(unsigned __int8 *)(a1 + 172));
    v6 = 4;
    v3 = *(char **)(a1 + 1128);
    v4 = *(char **)(a1 + 1136);
    if (v3 != v4)
    {
      while (*v3 <= 3u)
      {
        if (++v3 == v4)
          goto LABEL_8;
      }
    }
    if (v3 == v4 || (v4 = v3, *v3 != 4))
LABEL_8:
      std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v4, &v6);
    v5 = **(_QWORD **)(a1 + 1240);
    if (v5)
    {
      v7 = 12;
      md::MapEngine::setNeedsTick(v5, &v7);
    }
  }
}

void md::StyleLogic::setMapMode(uint64_t a1, int a2, float a3)
{
  void *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;

  if (*(unsigned __int8 *)(a1 + 167) != a2)
  {
    v6 = *(void **)(a1 + 1184);
    if (v6)
      objc_msgSend(v6, "stop");
    gss::ClientStyleState<gss::PropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x10000u, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setTargetClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x10000u, a2);
    *(_BYTE *)(a1 + 167) = a2;
    if (*(_BYTE *)(a1 + 1116))
    {
      *(float *)(a1 + 1120) = fmaxf(*(float *)(a1 + 1120), a3);
    }
    else
    {
      *(_BYTE *)(a1 + 1116) = 1;
      *(float *)(a1 + 1120) = a3;
      v10 = 4;
      v7 = *(char **)(a1 + 1128);
      v8 = *(char **)(a1 + 1136);
      if (v7 != v8)
      {
        while (*v7 <= 3u)
        {
          if (++v7 == v8)
            goto LABEL_12;
        }
      }
      if (v7 == v8 || (v8 = v7, *v7 != 4))
LABEL_12:
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v8, &v10);
      v9 = **(_QWORD **)(a1 + 1240);
      if (v9)
      {
        v11 = 12;
        md::MapEngine::setNeedsTick(v9, &v11);
      }
    }
  }
}

uint64_t md::S2ResourceDataRequester::visibleZoomRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(this + 28))
  {
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(this + 32);
    *(_BYTE *)a2 = 1;
  }
  *(_BYTE *)(a2 + 8) = 0;
  if (*(_BYTE *)(this + 36))
  {
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(this + 40);
    *(_BYTE *)(a2 + 8) = 1;
  }
  return this;
}

uint64_t std::__function::__func<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0,std::allocator<gdc::LayerDataManager::LayerDataManager(std::function<void ()(void)>,geo::TaskQueue *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5B60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_27>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427CE40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_17>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D50F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_15>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5068;
  a2[1] = v2;
  return result;
}

const void *esl::QuartzColor::cgColorSpace@<X0>(CGColorRef *this@<X0>, _QWORD *a2@<X8>)
{
  const void *result;
  const void *v4;

  result = CGColorGetColorSpace(this[2]);
  v4 = result;
  *a2 = &off_1E42B47F0;
  if (result)
    result = CFRetain(result);
  a2[1] = v4;
  return result;
}

void esl::QuartzColor::~QuartzColor(esl::QuartzColor *this)
{
  *(_QWORD *)this = &off_1E42B02E0;
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = &off_1E42B02E0;
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((_QWORD *)this + 1);
  JUMPOUT(0x1A1AF4E00);
}

void grl::createColorizedImage(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  float v35;
  float v36;
  uint8_t buf[8];
  uint64_t (**v38)();
  CFTypeRef cf;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t v42[4];
  const char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  if (!v5 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) == 0)
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v20 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_29;
    *(_WORD *)buf = 0;
    v21 = "Input image must be a non-nullptr to create a colorized image.";
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1)
    || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1))
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v20 = GEOGetGeoResourceLibEaselLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_29;
    *(_WORD *)buf = 0;
    v21 = "Input image must have a non-zero size to create a colorized image.";
LABEL_28:
    _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, v21, buf, 2u);
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)*a1 + 48))(buf);
  v40 = *(_QWORD *)buf;
  v41 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v7 = (unint64_t *)(v38 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)v38;
    if (v38)
    {
      v10 = (unint64_t *)(v38 + 1);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (v40 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40) & 1) != 0)
  {
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
    v14 = (std::__shared_weak_count *)operator new(0x28uLL);
    v14->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
    v16 = v14 + 1;
    v17 = esl::QuartzContext::QuartzContext(&v14[1], 3, v12, v13);
    if ((((uint64_t (*)(uint64_t))v14[1].__get_deleter)(v17) & 1) != 0)
    {
      esl::QuartzColor::QuartzColor(buf, a2);
      if (esl::QuartzColor::isValid((esl::QuartzColor *)buf))
      {
        v18 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
        v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
        v34 = 0;
        v35 = v18;
        v36 = (float)v19;
        ((void (*)(std::__shared_weak_count *, uint64_t *, uint64_t *, _QWORD))v16->__vftable[7].~__shared_weak_count)(v16, &v34, &v40, 0);
        ((void (*)(std::__shared_weak_count *, uint8_t *))v16->__vftable[5].__on_zero_shared_weak)(v16, buf);
        ((void (*)(std::__shared_weak_count *, uint64_t *, _QWORD))v16->__vftable[6].__on_zero_shared)(v16, &v34, 0);
        ((void (*)(__int128 *__return_ptr, std::__shared_weak_count *))v16->__vftable[9].__on_zero_shared_weak)(&v33, v16);
        if ((_QWORD)v33 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v33 + 40))(v33) & 1) != 0)
        {
          *(_OWORD *)a3 = v33;
        }
        else
        {
          if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
          v25 = GEOGetGeoResourceLibEaselLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v42 = 136315650;
            v43 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            v44 = 2080;
            v45 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/EaselUtilities.cpp";
            v46 = 1024;
            v47 = 74;
            _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, "Failed to generate an image from a colorized context.: Assertion with expression - %s : Failed in file - %s line - %i", v42, 0x1Cu);
          }
          *a3 = 0;
          a3[1] = 0;
          v26 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
          if (*((_QWORD *)&v33 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v24 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v42 = 0;
          _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "Failed to create a color to create a colorized image.", v42, 2u);
        }
        *a3 = 0;
        a3[1] = 0;
      }
      *(_QWORD *)buf = &off_1E42B02E0;
      v38 = &off_1E42B4850;
      if (cf)
        CFRelease(cf);
    }
    else
    {
      if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
      v23 = GEOGetGeoResourceLibEaselLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v23, OS_LOG_TYPE_ERROR, "Failed to create a context to draw a colorized image into.", buf, 2u);
      }
      *a3 = 0;
      a3[1] = 0;
    }
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
    v22 = GEOGetGeoResourceLibEaselLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Failed to create a grayscale version of the input image to create a colorized version of the image.", buf, 2u);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  v30 = v41;
  if (v41)
  {
    v31 = (unint64_t *)&v41->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

uint64_t esl::QuartzContext::setFillColor(CGContext **this, const esl::QuartzColor *a2)
{
  uint64_t result;
  CGContext *v5;
  CGColorRef v6[3];

  result = (*(uint64_t (**)(const esl::QuartzColor *))(*(_QWORD *)a2 + 48))(a2);
  if ((_DWORD)result)
  {
    result = (*((uint64_t (**)(CGContext **))*this + 3))(this);
    if ((_DWORD)result)
    {
      v5 = this[1];
      esl::QuartzColor::color(a2, v6);
      CGContextSetFillColorWithColor(v5, v6[1]);
      geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v6);
      return 1;
    }
  }
  return result;
}

void sub_19F1523D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL esl::QuartzColor::isValid(esl::QuartzColor *this)
{
  return *((_QWORD *)this + 2) != 0;
}

_QWORD *esl::QuartzColor::createColor(uint64_t a1, int a2, const CGFloat *a3)
{
  CGColorSpaceRef v5;
  CGColorRef v6;
  const void *v7;
  uint64_t (**v9)();
  CFTypeRef cf;

  v9 = &off_1E42B47F0;
  cf = 0;
  switch(a2)
  {
    case 0:
      v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
      goto LABEL_7;
    case 1:
      v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D988]);
      goto LABEL_7;
    case 2:
      v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      goto LABEL_7;
    case 3:
      v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D908]);
      goto LABEL_7;
    case 4:
      v5 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D900]);
LABEL_7:
      cf = v5;
      if (v5)
      {
        v6 = CGColorCreate(v5, a3);
        v7 = *(const void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v6;
        if (v7)
          CFRelease(v7);
      }
      break;
    default:
      return geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v9);
  }
  return geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v9);
}

void sub_19F1524F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B47F0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E42B4850;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

CFTypeRef esl::QuartzColor::color@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = &off_1E42B4850;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 2));
  a2[1] = v3;
  return this;
}

void grl::IconRenderer::renderImage(grl::IconRenderer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t *v9;
  char v15;
  float v16;
  float v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  grl::IconRenderer *v24;
  uint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  grl::IconRenderer *v38;
  grl::IconRenderer *v39;
  NSObject *v40;
  _BYTE *v41;
  NSObject *v42;
  float v43;
  float32x2_t v44;
  float v45;
  float v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  uint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *size;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  size_t v64;
  std::string *v65;
  char *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string::size_type v72;
  _BYTE *v73;
  unint64_t *v74;
  unint64_t v75;
  NSObject *v76;
  NSObject *v77;
  grl::IconRenderer *v78;
  unsigned int v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  size_t v84;
  std::string *v85;
  char *v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  _BYTE *v93;
  unint64_t *v94;
  unint64_t v95;
  grl::IconRenderer *v96;
  grl::IconRenderer *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t **v106;
  std::__shared_weak_count *v107;
  std::string v108;
  std::string v109;
  __int128 v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  std::string v113;
  _BYTE buf[24];
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    v5 = *((_QWORD *)this + 34);
    *a2 = v4;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    v8 = 0;
    v9 = (float32x2_t *)((char *)this + 152);
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)buf = _D0;
    v15 = 1;
    do
    {
      v16 = v9->f32[v8];
      v17 = *(float *)&buf[4 * v8];
      if ((v15 & 1) == 0)
        break;
      v15 = 0;
      v8 = 1;
    }
    while (v16 >= v17);
    if (v16 < v17)
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v40 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        grl::IconRenderer::description((uint64_t *)buf, this);
        v41 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v113.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_19F029000, v40, OS_LOG_TYPE_ERROR, "Icon generated with metric size of zero. %s", (uint8_t *)&v113, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      *a2 = 0;
      a2[1] = 0;
    }
    else
    {
      v18 = (std::__shared_weak_count *)operator new(0x28uLL);
      v18->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      v18->__shared_weak_owners_ = 0;
      v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
      v20 = &v18[1].__vftable;
      v21 = esl::QuartzContext::QuartzContext(&v18[1], 3, *((float *)this + 38), *((float *)this + 39));
      v107 = v18;
      if ((((uint64_t (*)(uint64_t))v18[1].__get_deleter)(v21) & 1) != 0)
      {
        v105 = a2;
        if (*((_BYTE *)this + 256))
        {
          v22 = (*(uint64_t (**)(_QWORD *))(*v20 + 112))(v20);
          v23 = esl::AffineTransformMake(-1.0, 0.0, 0.0, 1.0, (float)v22, 0.0, (uint64_t)buf);
          (*(void (**)(_QWORD *, _BYTE *, double))(*v20 + 80))(v20, buf, v23);
        }
        v24 = (grl::IconRenderer *)*((_QWORD *)this + 4);
        if (v24 == (grl::IconRenderer *)((char *)this + 40))
        {
LABEL_62:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*v20 + 392))(&v110, v20);
          if ((_QWORD)v110 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v110 + 40))(v110) & 1) != 0)
          {
            if (*((_BYTE *)this + 72))
            {
              v43 = *((float *)this + 27);
              if (v43 != 1.0)
              {
                v44 = vadd_f32(vrndp_f32(vmul_n_f32(*v9, v43)), 0);
                *(_QWORD *)buf = 0;
                *(float32x2_t *)&buf[8] = v44;
                if (v44.f32[0] >= 0.0)
                  v45 = v44.f32[0];
                else
                  v45 = 0.0;
                if (v44.f32[1] >= 0.0)
                  v46 = v44.f32[1];
                else
                  v46 = 0.0;
                v47 = (std::__shared_weak_count *)operator new(0x28uLL);
                v47->__shared_owners_ = 0;
                v48 = (unint64_t *)&v47->__shared_owners_;
                v47->__shared_weak_owners_ = 0;
                v47->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE0D8;
                v49 = esl::QuartzContext::QuartzContext(&v47[1], 3, v45, v46);
                ((void (*)(uint64_t, _BYTE *, __int128 *, uint64_t))v47[1].__vftable[9].__on_zero_shared)(v49, buf, &v110, 1);
                ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v47[1].__vftable[9].__on_zero_shared_weak)(&v113, &v47[1]);
                v50 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
                *(_OWORD *)&v113.__r_.__value_.__l.__data_ = 0uLL;
                v51 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
                v110 = v50;
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                size = (std::__shared_weak_count *)v113.__r_.__value_.__l.__size_;
                if (v113.__r_.__value_.__l.__size_)
                {
                  v55 = (unint64_t *)(v113.__r_.__value_.__l.__size_ + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                do
                  v57 = __ldaxr(v48);
                while (__stlxr(v57 - 1, v48));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
            }
            if (*((_BYTE *)this + 288))
            {
              if (*((_BYTE *)this + 282))
              {
                v58 = (_QWORD *)*((_QWORD *)this + 46);
                if (v58 != (_QWORD *)((char *)this + 360))
                {
                  v59 = 0;
                  do
                  {
                    v61 = v58[2];
                    v60 = (std::__shared_weak_count *)v58[3];
                    if (v60)
                    {
                      v62 = (unint64_t *)&v60->__shared_owners_;
                      do
                        v63 = __ldxr(v62);
                      while (__stxr(v63 + 1, v62));
                    }
                    if (*((char *)this + 319) >= 0)
                      v64 = *((unsigned __int8 *)this + 319);
                    else
                      v64 = *((_QWORD *)this + 38);
                    std::string::basic_string[abi:nn180100]((uint64_t)&v109, v64 + 5);
                    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v65 = &v109;
                    else
                      v65 = (std::string *)v109.__r_.__value_.__r.__words[0];
                    if (v64)
                    {
                      if (*((char *)this + 319) >= 0)
                        v66 = (char *)this + 296;
                      else
                        v66 = (char *)*((_QWORD *)this + 37);
                      memmove(v65, v66, v64);
                    }
                    strcpy((char *)v65 + v64, "image");
                    std::to_string(&v108, v59);
                    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v67 = &v108;
                    else
                      v67 = (std::string *)v108.__r_.__value_.__r.__words[0];
                    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v68 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
                    else
                      v68 = v108.__r_.__value_.__l.__size_;
                    v69 = std::string::append(&v109, (const std::string::value_type *)v67, v68);
                    v70 = v69->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
                    v113.__r_.__value_.__r.__words[2] = v70;
                    v69->__r_.__value_.__l.__size_ = 0;
                    v69->__r_.__value_.__r.__words[2] = 0;
                    v69->__r_.__value_.__r.__words[0] = 0;
                    v71 = std::string::append(&v113, ".png");
                    v72 = v71->__r_.__value_.__r.__words[2];
                    *(_OWORD *)buf = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
                    *(_QWORD *)&buf[16] = v72;
                    v71->__r_.__value_.__l.__size_ = 0;
                    v71->__r_.__value_.__r.__words[2] = 0;
                    v71->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v113.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v108.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v109.__r_.__value_.__l.__data_);
                    if (buf[23] >= 0)
                      v73 = buf;
                    else
                      v73 = *(_BYTE **)buf;
                    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v61 + 112))(v61, v73);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (v60)
                    {
                      v74 = (unint64_t *)&v60->__shared_owners_;
                      do
                        v75 = __ldaxr(v74);
                      while (__stlxr(v75 - 1, v74));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                    }
                    ++v59;
                    v58 = (_QWORD *)v58[1];
                  }
                  while (v58 != (_QWORD *)((char *)this + 360));
                }
              }
              else if (*((_BYTE *)this + 281))
              {
                v78 = (grl::IconRenderer *)*((_QWORD *)this + 40);
                if (v78 != (grl::IconRenderer *)((char *)this + 328))
                {
                  v79 = 0;
                  do
                  {
                    v81 = *((_QWORD *)v78 + 5);
                    v80 = (std::__shared_weak_count *)*((_QWORD *)v78 + 6);
                    if (v80)
                    {
                      v82 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v83 = __ldxr(v82);
                      while (__stxr(v83 + 1, v82));
                    }
                    if (*((char *)this + 319) >= 0)
                      v84 = *((unsigned __int8 *)this + 319);
                    else
                      v84 = *((_QWORD *)this + 38);
                    std::string::basic_string[abi:nn180100]((uint64_t)&v109, v84 + 5);
                    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v85 = &v109;
                    else
                      v85 = (std::string *)v109.__r_.__value_.__r.__words[0];
                    if (v84)
                    {
                      if (*((char *)this + 319) >= 0)
                        v86 = (char *)this + 296;
                      else
                        v86 = (char *)*((_QWORD *)this + 37);
                      memmove(v85, v86, v84);
                    }
                    strcpy((char *)v85 + v84, "image");
                    std::to_string(&v108, v79);
                    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v87 = &v108;
                    else
                      v87 = (std::string *)v108.__r_.__value_.__r.__words[0];
                    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v88 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
                    else
                      v88 = v108.__r_.__value_.__l.__size_;
                    v89 = std::string::append(&v109, (const std::string::value_type *)v87, v88);
                    v90 = v89->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                    v113.__r_.__value_.__r.__words[2] = v90;
                    v89->__r_.__value_.__l.__size_ = 0;
                    v89->__r_.__value_.__r.__words[2] = 0;
                    v89->__r_.__value_.__r.__words[0] = 0;
                    v91 = std::string::append(&v113, ".png");
                    v92 = v91->__r_.__value_.__r.__words[2];
                    *(_OWORD *)buf = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                    *(_QWORD *)&buf[16] = v92;
                    v91->__r_.__value_.__l.__size_ = 0;
                    v91->__r_.__value_.__r.__words[2] = 0;
                    v91->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v113.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v108.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v109.__r_.__value_.__l.__data_);
                    if (buf[23] >= 0)
                      v93 = buf;
                    else
                      v93 = *(_BYTE **)buf;
                    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v81 + 112))(v81, v93);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (v80)
                    {
                      v94 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v96 = (grl::IconRenderer *)*((_QWORD *)v78 + 1);
                    if (v96)
                    {
                      do
                      {
                        v97 = v96;
                        v96 = *(grl::IconRenderer **)v96;
                      }
                      while (v96);
                    }
                    else
                    {
                      do
                      {
                        v97 = (grl::IconRenderer *)*((_QWORD *)v78 + 2);
                        _ZF = *(_QWORD *)v97 == (_QWORD)v78;
                        v78 = v97;
                      }
                      while (!_ZF);
                    }
                    ++v79;
                    v78 = v97;
                  }
                  while (v97 != (grl::IconRenderer *)((char *)this + 328));
                }
              }
            }
            std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100]((_QWORD *)this + 33, (uint64_t *)&v110);
            v98 = *((_QWORD *)this + 34);
            *v105 = *((_QWORD *)this + 33);
            v105[1] = v98;
            if (v98)
            {
              v99 = (unint64_t *)(v98 + 8);
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
          }
          else
          {
            if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
            v76 = GEOGetGeoResourceLibEaselLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
              *(_WORD *)&buf[22] = 1024;
              v115 = 111;
              _os_log_impl(&dword_19F029000, v76, OS_LOG_TYPE_ERROR, "Failed to generate an icon image.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
            *v105 = 0;
            v105[1] = 0;
          }
          v101 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
          if (*((_QWORD *)&v110 + 1))
          {
            v102 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
        }
        else
        {
          v106 = (uint64_t **)((char *)this + 320);
          while (1)
          {
            v25 = *((_QWORD *)v24 + 5);
            if (!v25)
              break;
            v111 = &v18[1].__vftable;
            v112 = v18;
            do
              v26 = __ldxr(p_shared_owners);
            while (__stxr(v26 + 1, p_shared_owners));
            (*(void (**)(uint64_t, grl::IconRenderer *, _QWORD **, char *))(*(_QWORD *)v25 + 16))(v25, this, &v111, (char *)this + 360);
            v27 = v112;
            if (v112)
            {
              v28 = (unint64_t *)&v112->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            if (*((_BYTE *)this + 281))
            {
              (*(void (**)(std::string *__return_ptr, _QWORD *))(*v20 + 392))(&v113, v20);
              if (v113.__r_.__value_.__r.__words[0]
                && ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v113.__r_.__value_.__l.__data_ + 40))(v113.__r_.__value_.__r.__words[0]) & 1) != 0)
              {
                v30 = (uint64_t **)std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::__find_equal<grl::IconLayerMapKey>((uint64_t)v106, buf, (__int16 *)v24 + 16);
                v31 = (uint64_t)*v30;
                if (!*v30)
                {
                  v32 = v30;
                  v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 42) + 16))(*((_QWORD *)this + 42), 56, 8);
                  v31 = v33;
                  *(_DWORD *)(v33 + 32) = *((_DWORD *)v24 + 8);
                  *(_BYTE *)(v33 + 36) = 0;
                  if (*((_BYTE *)v24 + 36))
                  {
                    *(_BYTE *)(v33 + 37) = *((_BYTE *)v24 + 37);
                    *(_BYTE *)(v33 + 36) = 1;
                  }
                  *(_QWORD *)(v33 + 40) = 0;
                  *(_QWORD *)(v33 + 48) = 0;
                  std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(v106, *(uint64_t *)buf, v32, (uint64_t *)v33);
                }
                std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100]((_QWORD *)(v31 + 40), (uint64_t *)&v113);
              }
              else
              {
                if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
                v34 = GEOGetGeoResourceLibEaselLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLi"
                                        "b/IconRenderer.cpp";
                  *(_WORD *)&buf[22] = 1024;
                  v115 = 102;
                  _os_log_impl(&dword_19F029000, v34, OS_LOG_TYPE_ERROR, "Failed to generate a layer image.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
              }
              v35 = (std::__shared_weak_count *)v113.__r_.__value_.__l.__size_;
              if (v113.__r_.__value_.__l.__size_)
              {
                v36 = (unint64_t *)(v113.__r_.__value_.__l.__size_ + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
            }
            v38 = (grl::IconRenderer *)*((_QWORD *)v24 + 1);
            if (v38)
            {
              do
              {
                v39 = v38;
                v38 = *(grl::IconRenderer **)v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                v39 = (grl::IconRenderer *)*((_QWORD *)v24 + 2);
                _ZF = *(_QWORD *)v39 == (_QWORD)v24;
                v24 = v39;
              }
              while (!_ZF);
            }
            v24 = v39;
            if (v39 == (grl::IconRenderer *)((char *)this + 40))
              goto LABEL_62;
          }
          if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
          v77 = GEOGetGeoResourceLibRendererLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
            *(_WORD *)&buf[22] = 1024;
            v115 = 92;
            _os_log_impl(&dword_19F029000, v77, OS_LOG_TYPE_ERROR, "A nullptr for a layer renderer found. Can't draw layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
          }
          *v105 = 0;
          v105[1] = 0;
        }
      }
      else
      {
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v42 = GEOGetGeoResourceLibEaselLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
          *(_WORD *)&buf[22] = 1024;
          v115 = 79;
          _os_log_impl(&dword_19F029000, v42, OS_LOG_TYPE_ERROR, "Failed to generate a valid context.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
        *a2 = 0;
        a2[1] = 0;
      }
      do
        v104 = __ldaxr(p_shared_owners);
      while (__stlxr(v104 - 1, p_shared_owners));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
}

void esl::QuartzContext::image(CGContextRef *this@<X0>, _QWORD *a2@<X8>)
{
  CGImageRef image;

  if (((*((uint64_t (**)(CGContextRef *))*this + 3))(this) & 1) != 0)
  {
    image = CGBitmapContextCreateImage(this[1]);
    std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>(&image, a2);
    CGImageRelease(image);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_19F1532BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *esl::QuartzContext::QuartzContext(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  CGColorSpace *DeviceRGB;
  uint32_t v9;
  size_t v10;

  *a1 = &off_1E42B03D8;
  a1[1] = 0;
  if (a2 > 1)
  {
    v9 = 8194;
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
  }
  else
  {
    DeviceRGB = CGColorSpaceCreateDeviceGray();
    v9 = 0;
  }
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 88))(a1, a2, a3);
  a1[1] = CGBitmapContextCreate(0, a3, a4, 8uLL, v10, DeviceRGB, v9);
  CGColorSpaceRelease(DeviceRGB);
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  return a1;
}

uint64_t esl::QuartzContext::bitmapAlignedBytesPerRow(uint64_t a1, int a2, int a3)
{
  if (a2 == 1)
    return 8 * a3;
  else
    return CGBitmapGetAlignedBytesPerRow();
}

uint64_t esl::QuartzContext::initialize(esl::QuartzContext *this)
{
  return (*(uint64_t (**)(esl::QuartzContext *))(*(_QWORD *)this + 48))(this);
}

uint64_t esl::QuartzContext::clear(esl::QuartzContext *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(esl::QuartzContext *))(*(_QWORD *)this + 24))(this);
  if ((_DWORD)result)
    return CGContextClear();
  return result;
}

uint64_t grl::ImageLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  const char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  float v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  NSObject *v72;
  _BYTE *v73;
  _BYTE *i;
  NSObject *v75;
  _BYTE *v76;
  _BYTE *v77;
  float v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  _OWORD *v99;
  uint64_t v100;
  NSObject *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  __int128 v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  int v111;
  int v112;
  __int128 v113;
  _DWORD v114[2];
  __int128 v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  _DWORD v119[4];
  float v120[2];
  float v121;
  int v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  _BYTE buf[22];
  __int16 v126;
  int v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 168))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v31 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    v126 = 1024;
    v127 = 369;
    v32 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_35;
  }
  *(_QWORD *)buf = 0;
  if (!*(_QWORD *)(a1 + 220))
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v31 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    v126 = 1024;
    v127 = 372;
    v32 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_35:
    _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x1Cu);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 10))
    return 1;
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 48))(&v123);
    if (!v123
      || (v9 = vsub_f32(*(float32x2_t *)(a1 + 196), *(float32x2_t *)(a1 + 188)),
          v10 = (float32x2_t)vbic_s8((int8x8_t)v9, (int8x8_t)vcltz_f32(v9)),
          vmul_lane_f32(v10, v10, 1).f32[0] <= 0.0))
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v35 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        v126 = 1024;
        v127 = 385;
        _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, "Image layer needs an image and layer metrics to render.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      v33 = 0;
      goto LABEL_43;
    }
    v120[0] = gm::Box<float,2>::operator+((float *)(a1 + 188), (float *)(a1 + 228));
    v120[1] = v11;
    v121 = v12;
    v122 = v13;
    v119[0] = gm::Box<float,2>::operator+((float *)(a1 + 204), (float *)(a1 + 228));
    v119[1] = v14;
    v119[2] = v15;
    v119[3] = v16;
    v118 = 0uLL;
    if (*(_BYTE *)(a2 + 257))
    {
      if (*(_BYTE *)(a2 + 244))
      {
        v17 = *(float *)(a2 + 248);
        v18 = *(float *)(a2 + 252);
        v116 = v123;
        v117 = v124;
        if (v124)
        {
          p_shared_owners = (unint64_t *)&v124->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        grl::createThreePartHorizontalStretchedImage(&v116, buf, v121 - v120[0], v17, v18);
        v21 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
        v118 = v21;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = v117;
        if (v117)
        {
          v29 = (unint64_t *)&v117->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
LABEL_54:
        if ((_QWORD)v118 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v118 + 40))(v118) & 1) != 0)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v118 + 24))(v118);
          (*(void (**)(_QWORD))(*(_QWORD *)v118 + 32))(v118);
          v40 = *(unsigned __int8 *)(a1 + 64);
          if (v40 == 2)
          {
            v109 = 0;
            v58 = (float)(*(unsigned int (**)(_QWORD))(*(_QWORD *)v118 + 32))(v118);
            if (v58 > 16777000.0)
              v58 = 16777000.0;
            v114[0] = 0;
            *(float *)&v114[1] = v58;
            v113 = v118;
            if (*((_QWORD *)&v118 + 1))
            {
              v59 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
              do
                v60 = __ldxr(v59);
              while (__stxr(v60 + 1, v59));
            }
            v61 = *(_DWORD *)(a1 + 80);
            v111 = *(_DWORD *)(a1 + 72);
            v112 = v61;
            grl::createColorizedImage(&v113, (uint64_t)&v112, (uint64_t)&v111, (uint64_t)&v109, (uint64_t)v114, buf);
            v62 = *(_OWORD *)buf;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v63 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
            v118 = v62;
            if (v63)
            {
              v64 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v66 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v69 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
            if (*((_QWORD *)&v113 + 1))
            {
              v70 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            if (!(_QWORD)v118 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v118 + 40))(v118) & 1) == 0)
            {
              if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
                dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
              v53 = GEOGetGeoResourceLibRendererLog::log;
              if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                goto LABEL_87;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
              v126 = 1024;
              v127 = 435;
              v54 = "Failed to apply a gradient to an image.: Assertion with expression - %s : Failed in file - %s line - %i";
              goto LABEL_86;
            }
          }
          else if (v40 == 1)
          {
            v115 = v118;
            if (*((_QWORD *)&v118 + 1))
            {
              v41 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            LODWORD(v109) = *(_DWORD *)(a1 + 50);
            grl::createColorizedImage(&v115, (uint64_t)&v109, buf);
            v43 = *(_OWORD *)buf;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v44 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
            v118 = v43;
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v47 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
            if (*((_QWORD *)&v115 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            if (!(_QWORD)v118 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v118 + 40))(v118) & 1) == 0)
            {
              if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
                dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
              v53 = GEOGetGeoResourceLibRendererLog::log;
              if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                goto LABEL_87;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
              v126 = 1024;
              v127 = 425;
              v54 = "Failed to create a colorized image.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_86:
              _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_ERROR, v54, buf, 0x1Cu);
LABEL_87:
              v33 = 0;
LABEL_88:
              v55 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
              if (*((_QWORD *)&v118 + 1))
              {
                v56 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
LABEL_43:
              v36 = v124;
              if (v124)
              {
                v37 = (unint64_t *)&v124->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              return v33;
            }
          }
          (*(void (**)(_QWORD, float))(*(_QWORD *)*a3 + 240))(*a3, *(float *)(a1 + 132));
          if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24))
          {
            if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
            v72 = GEOGetGeoResourceLibRendererLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "_data.hasLayerStyles()";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
              v126 = 1024;
              v127 = 444;
              _os_log_impl(&dword_19F029000, v72, OS_LOG_TYPE_ERROR, "No LayerStyles given for image layer rendering.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
            }
          }
          v73 = *(_BYTE **)(a1 + 16);
          for (i = *(_BYTE **)(a1 + 24); v73 != i; ++v73)
          {
            switch(*v73)
            {
              case 0:
                if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
                v75 = GEOGetGeoResourceLibRendererLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "iconLayer != LayerStyle::None";
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLi"
                                        "b/LayerRenderer.cpp";
                  v126 = 1024;
                  v127 = 448;
                  _os_log_impl(&dword_19F029000, v75, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum used.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
                break;
              case 1:
                v77 = *(_BYTE **)(a1 + 16);
                v76 = *(_BYTE **)(a1 + 24);
                if (v77 != v76)
                {
                  while (*v77 != 1)
                  {
                    if (++v77 == v76)
                    {
                      v77 = *(_BYTE **)(a1 + 24);
                      break;
                    }
                  }
                }
                if (v77 != v76)
                {
                  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 224))(*a3, *(unsigned __int8 *)(a1 + 48));
                  (*(void (**)(_QWORD, float *, __int128 *, uint64_t))(*(_QWORD *)*a3 + 376))(*a3, v120, &v118, 1);
                  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 224))(*a3, 0);
                  goto LABEL_171;
                }
                break;
              case 2:
                v78 = *(float *)(a1 + 96);
                if (v78 > 0.0)
                {
                  v79 = *(_DWORD *)(a1 + 89);
                  if (HIBYTE(v79))
                  {
                    v108 = v118;
                    if (*((_QWORD *)&v118 + 1))
                    {
                      v80 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
                      do
                        v81 = __ldxr(v80);
                      while (__stxr(v81 + 1, v80));
                      v79 = *(_DWORD *)(a1 + 89);
                      v78 = *(float *)(a1 + 96);
                    }
                    *(_DWORD *)buf = v79;
                    grl::createHaloImage(&v108, (uint64_t)buf, &v109, v78);
                    v82 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
                    if (*((_QWORD *)&v108 + 1))
                    {
                      v83 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
                      do
                        v84 = __ldaxr(v83);
                      while (__stlxr(v84 - 1, v83));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                    }
                    if (v109 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 40))(v109) & 1) != 0)
                    {
                      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 224))(*a3, 0);
                      (*(void (**)(_QWORD, _DWORD *, uint64_t *, uint64_t))(*(_QWORD *)*a3 + 376))(*a3, v119, &v109, 1);
                      v85 = v110;
                      if (!v110)
                        goto LABEL_171;
                      v86 = (unint64_t *)&v110->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      goto LABEL_169;
                    }
                    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
                      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
                    v101 = GEOGetGeoResourceLibRendererLog::log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResour"
                                            "ceLib/LayerRenderer.cpp";
                      v126 = 1024;
                      v127 = 471;
                      _os_log_impl(&dword_19F029000, v101, OS_LOG_TYPE_ERROR, "Failed to create the halo for an image layer.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                    }
                    v102 = v110;
                    if (v110)
                    {
                      v103 = (unint64_t *)&v110->__shared_owners_;
                      do
                        v104 = __ldaxr(v103);
                      while (__stlxr(v104 - 1, v103));
                      if (!v104)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                  }
                }
                break;
              case 3:
                v89 = *(_BYTE **)(a1 + 16);
                v88 = *(_BYTE **)(a1 + 24);
                if (v89 != v88)
                {
                  while (*v89 != 3)
                  {
                    if (++v89 == v88)
                    {
                      v89 = *(_BYTE **)(a1 + 24);
                      break;
                    }
                  }
                }
                if (v89 != v88 && (*(_QWORD *)(a1 + 140) || *(float *)(a1 + 148) != 0.0))
                {
                  v90 = (std::__shared_weak_count *)a3[1];
                  v106 = *a3;
                  v107 = v90;
                  if (v90)
                  {
                    v91 = (unint64_t *)&v90->__shared_owners_;
                    do
                      v92 = __ldxr(v91);
                    while (__stxr(v92 + 1, v91));
                  }
                  v105 = v118;
                  if (*((_QWORD *)&v118 + 1))
                  {
                    v93 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
                    do
                      v94 = __ldxr(v93);
                    while (__stxr(v94 + 1, v93));
                  }
                  LODWORD(v109) = *(_DWORD *)(a1 + 136);
                  *(_QWORD *)buf = *(_QWORD *)(a1 + 140);
                  grl::drawShadowToContext(&v106, &v105, (uint64_t)&v109, (float *)buf, (uint64_t)v120, *(float *)(a1 + 148));
                  v95 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
                  if (*((_QWORD *)&v105 + 1))
                  {
                    v96 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
                    do
                      v97 = __ldaxr(v96);
                    while (__stlxr(v97 - 1, v96));
                    if (!v97)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  v85 = v107;
                  if (v107)
                  {
                    v98 = (unint64_t *)&v107->__shared_owners_;
                    do
                      v87 = __ldaxr(v98);
                    while (__stlxr(v87 - 1, v98));
LABEL_169:
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                      std::__shared_weak_count::__release_weak(v85);
                    }
                  }
                  goto LABEL_171;
                }
                break;
              default:
LABEL_171:
                if (*(_BYTE *)(a2 + 282))
                {
                  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 392))(buf);
                  v99 = operator new(0x20uLL);
                  v99[1] = *(_OWORD *)buf;
                  v100 = *a4;
                  *(_QWORD *)v99 = *a4;
                  *((_QWORD *)v99 + 1) = a4;
                  *(_QWORD *)(v100 + 8) = v99;
                  *a4 = (uint64_t)v99;
                  ++a4[2];
                }
                break;
            }
          }
          (*(void (**)(_QWORD, float))(*(_QWORD *)*a3 + 240))(*a3, 1.0);
          v33 = 1;
          goto LABEL_88;
        }
        if (GEOGetGeoResourceLibEaselLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibEaselLog::onceToken, &__block_literal_global_22_0);
        v53 = GEOGetGeoResourceLibEaselLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibEaselLog::log, OS_LOG_TYPE_ERROR))
          goto LABEL_87;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        v126 = 1024;
        v127 = 408;
        v54 = "Failed to find image for image layer.: Assertion with expression - %s : Failed in file - %s line - %i";
        goto LABEL_86;
      }
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v39 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        v126 = 1024;
        v127 = 398;
        _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_ERROR, "IconRenderer: Failed to find HorizontalStretchedPadding property.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
    std::shared_ptr<grl::codec::IconData>::operator=[abi:nn180100](&v118, &v123);
    goto LABEL_54;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return esl::QuartzContext::setBlendMode();
}

void esl::QuartzContext::setBlendMode(CGContextRef *a1, int a2)
{
  CGBlendMode v4;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    if ((a2 - 1) > 0x1A)
      v4 = kCGBlendModeNormal;
    else
      v4 = dword_19FFB16E8[(char)(a2 - 1)];
    CGContextSetBlendMode(a1[1], v4);
  }
}

uint64_t esl::QuartzContext::isValid(esl::QuartzContext *this)
{
  if (!*((_QWORD *)this + 1))
    esl::QuartzContext::isValid();
  return 1;
}

void esl::QuartzContext::setAlpha(CGContextRef *this, float a2)
{
  float v4;

  if ((*((unsigned int (**)(CGContextRef *))*this + 3))(this))
  {
    v4 = 1.0;
    if (a2 < 0.0 || a2 > 1.0)
      esl::QuartzContext::setAlpha();
    if (a2 <= 1.0)
      v4 = a2;
    if (v4 < 0.0)
      v4 = 0.0;
    CGContextSetAlpha(this[1], v4);
  }
}

uint64_t std::__function::__func<grl::codec::IconDataPack::imageForID(unsigned int)::$_0,std::allocator<grl::codec::IconDataPack::imageForID(unsigned int)::$_0>,std::shared_ptr<esl::QuartzImage> ()(void)>::operator()@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

esl::QuartzColor *esl::QuartzColor::QuartzColor(esl::QuartzColor *this, float a2, float a3, float a4, float a5)
{
  int v5;
  const char *v6;
  CGFloat v12[4];

  *((_QWORD *)this + 1) = &off_1E42B4850;
  *(_QWORD *)this = &off_1E42B02E0;
  *((_QWORD *)this + 2) = 0;
  v5 = 150;
  v6 = "(r >= 0.0f && g >= 0.0f && b >= 0.0f && a >= 0.0f) && \"Colors must be between 0 and 1.\"";
  if (a2 < 0.0 || a3 < 0.0 || a4 < 0.0 || a5 < 0.0)
LABEL_17:
    __assert_rtn("QuartzColor", "color.cpp", v5, v6);
  if (a2 > 1.0 || a3 > 1.0 || a4 > 1.0 || a5 > 1.0)
  {
    v6 = "(r <= 1.0f && g <= 1.0f && b <= 1.0f && a <= 1.0f) && \"Colors must be between 0 and 1.\"";
    v5 = 151;
    goto LABEL_17;
  }
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  esl::QuartzColor::createColor((uint64_t)this, 2, v12);
  return this;
}

void sub_19F1544E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v1);
  _Unwind_Resume(a1);
}

_QWORD *esl::QuartzColor::QuartzColor(_QWORD *a1, unsigned __int8 *a2)
{
  uint32x2_t v3;
  float32x2_t v4;
  uint32x2_t v5;
  _OWORD v7[2];

  *a1 = &off_1E42B02E0;
  a1[1] = &off_1E42B4850;
  a1[2] = 0;
  v3.i32[0] = *a2;
  v3.i32[1] = a2[1];
  v4 = (float32x2_t)vdup_n_s32(0x437F0000u);
  v5.i32[0] = a2[2];
  v5.i32[1] = a2[3];
  v7[0] = vcvtq_f64_f32(vdiv_f32(vcvt_f32_u32(v3), v4));
  v7[1] = vcvtq_f64_f32(vdiv_f32(vcvt_f32_u32(v5), v4));
  esl::QuartzColor::createColor((uint64_t)a1, 2, (const CGFloat *)v7);
  return a1;
}

void sub_19F154594(_Unwind_Exception *a1)
{
  _QWORD *v1;

  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t grl::ShapeLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v14[2];
  _QWORD v15[2];

  if (!*(_BYTE *)(a1 + 10))
    return 1;
  v4 = *(unsigned __int8 *)(a1 + 136);
  v5 = 1;
  if (v4 <= 9)
  {
    if (((1 << v4) & 0x3D8) != 0)
    {
      v6 = (std::__shared_weak_count *)a3[1];
      v15[0] = *a3;
      v15[1] = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v5 = grl::ShapeLayerRenderer::renderBalloonToContext(a1, a2, v15, a4);
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        goto LABEL_16;
      }
      return grl::ShapeLayerRenderer::renderBalloonToContext(a1, a2, v15, a4);
    }
    else
    {
      v6 = (std::__shared_weak_count *)a3[1];
      v14[0] = *a3;
      v14[1] = v6;
      if (v6)
      {
        v10 = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v5 = grl::ShapeLayerRenderer::renderShapeToContext(a1, a2, v14, a4);
        do
          v9 = __ldaxr(v10);
        while (__stlxr(v9 - 1, v10));
LABEL_16:
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return v5;
      }
      return grl::ShapeLayerRenderer::renderShapeToContext(a1, a2, v14, a4);
    }
  }
  return v5;
}

BOOL grl::TextLayerRenderer::renderToContext(uint64_t a1, uint64_t a2, CGContextRef **a3, uint64_t *a4)
{
  std::string::size_type size;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float v16;
  float v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  float32x2_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  float v31;
  float v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  float *v36;
  double v37;
  float *v38;
  float v39;
  double v40;
  CGContextRef *v41;
  _OWORD *v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;
  __int32 v51;
  int v52;
  int v53;
  float v54;
  float v55;
  float v56;
  _BOOL8 result;
  NSObject *v58;
  const char *v59;
  unint64_t data_low;
  int v61;
  int v62;
  CGContextRef *v63;
  std::__shared_weak_count *v64;
  CGContextRef *v65;
  std::__shared_weak_count *v66;
  int v67;
  float v68;
  int v69;
  CGContextRef *v70;
  std::__shared_weak_count *v71;
  std::string v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 183) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a1 + 160), *(_QWORD *)(a1 + 168));
  else
    v72 = *(std::string *)(a1 + 160);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v72.__r_.__value_.__l.__size_;
    operator delete(v72.__r_.__value_.__l.__data_);
    if (!size)
      return 0;
  }
  else if (!*((_BYTE *)&v72.__r_.__value_.__s + 23))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 200))
  {
    v72.__r_.__value_.__r.__words[0] = 0;
    if (*(_QWORD *)(a1 + 252))
    {
      if (*(_BYTE *)(a2 + 280))
      {
        v9 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        v72.__r_.__value_.__r.__words[0] = __PAIR64__(v12, LODWORD(v9));
        v72.__r_.__value_.__l.__size_ = __PAIR64__(LODWORD(v11), LODWORD(v10));
        v13 = (std::__shared_weak_count *)a3[1];
        v70 = *a3;
        v71 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v69 = 1342177535;
        data_low = __PAIR64__(LODWORD(v11), LODWORD(v9));
        v16 = v10 - v9;
        v17 = 0.0;
        if (v16 < 0.0)
          v16 = 0.0;
        if ((float)(*(float *)(a2 + 156) - v11) >= 0.0)
          v17 = *(float *)(a2 + 156) - v11;
        v67 = LODWORD(v16);
        v68 = v17;
        grl::drawDebugSquareToContext(&v70, (uint64_t)&v69, (float *)&data_low, (float *)&v67);
        v18 = v71;
        if (v71)
        {
          v19 = (unint64_t *)&v71->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = (std::__shared_weak_count *)a3[1];
        v65 = *a3;
        v66 = v21;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v67 = 1342177535;
        v24 = vsub_f32((float32x2_t)v72.__r_.__value_.__r.__words[1], (float32x2_t)v72.__r_.__value_.__l.__data_);
        data_low = (unint64_t)v24;
        if (v24.f32[0] < 0.0)
          LODWORD(data_low) = 0;
        if (v24.f32[1] < 0.0)
          HIDWORD(data_low) = 0;
        grl::drawDebugSquareToContext(&v65, (uint64_t)&v67, (float *)&v72, (float *)&data_low);
        v25 = v66;
        if (v66)
        {
          v26 = (unint64_t *)&v66->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = (std::__shared_weak_count *)a3[1];
        v63 = *a3;
        v64 = v28;
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v69 = -1275068161;
        v31 = *((float *)v72.__r_.__value_.__r.__words + 1);
        data_low = LODWORD(v72.__r_.__value_.__l.__data_);
        v32 = *(float *)&v72.__r_.__value_.__r.__words[1] - *(float *)&v72.__r_.__value_.__l.__data_;
        if ((float)(*(float *)&v72.__r_.__value_.__r.__words[1] - *(float *)&v72.__r_.__value_.__l.__data_) < 0.0)
          v32 = 0.0;
        if (*((float *)v72.__r_.__value_.__r.__words + 1) < 0.0)
          v31 = 0.0;
        v67 = LODWORD(v32);
        v68 = v31;
        grl::drawDebugSquareToContext(&v63, (uint64_t)&v69, (float *)&data_low, (float *)&v67);
        v33 = v64;
        if (v64)
        {
          v34 = (unint64_t *)&v64->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      v36 = (float *)(a1 + 260);
      v37 = (float)(*(float *)(a1 + 300) + *(float *)(a1 + 260));
      v38 = (float *)(a1 + 220);
      gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
      v40 = v39;
      v41 = *a3;
      if (*(_QWORD *)(a1 + 344))
      {
        CGContextSetTextPosition(v41[1], v37, v39);
        CTLineDraw(*(CTLineRef *)(a1 + 344), (*a3)[1]);
        v41 = *a3;
        if (*(_BYTE *)(a2 + 282))
        {
          (*((void (**)(std::string *__return_ptr))*v41 + 49))(&v72);
          v42 = operator new(0x20uLL);
          v42[1] = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
          v43 = *a4;
          *(_QWORD *)v42 = *a4;
          *((_QWORD *)v42 + 1) = a4;
          *(_QWORD *)(v43 + 8) = v42;
          *a4 = (uint64_t)v42;
          ++a4[2];
          v41 = *a3;
        }
      }
      CGContextSetTextPosition(v41[1], v37, v40);
      CTLineDraw(*(CTLineRef *)(a1 + 320), (*a3)[1]);
      if (*(_BYTE *)(a2 + 282))
      {
        (*((void (**)(std::string *__return_ptr))**a3 + 49))(&v72);
        v44 = operator new(0x20uLL);
        v44[1] = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
        v45 = *a4;
        *(_QWORD *)v44 = *a4;
        *((_QWORD *)v44 + 1) = a4;
        *(_QWORD *)(v45 + 8) = v44;
        *a4 = (uint64_t)v44;
        ++a4[2];
      }
      if (*(_BYTE *)(a2 + 283))
      {
        esl::QuartzColor::QuartzColor((esl::QuartzColor *)&v72, 1.0, 0.752, 0.796, 1.0);
        v46 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        data_low = __PAIR64__(v47, LODWORD(v46));
        v48 = gm::Box<float,2>::operator+((float *)(a1 + 220), (float *)(a1 + 260));
        v50 = v49 - v48;
        if (v50 < 0.0)
          v50 = 0.0;
        grl::drawDebugLine(a3, (uint64_t)&v72, (float32x2_t *)&data_low, v50);
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42B02E0;
        v72.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E42B4850;
        if (v72.__r_.__value_.__r.__words[2])
          CFRelease((CFTypeRef)v72.__r_.__value_.__r.__words[2]);
        if (*(_BYTE *)(a2 + 283))
        {
          esl::QuartzColor::QuartzColor((esl::QuartzColor *)&v72, 1.0, 0.752, 0.796, 1.0);
          LODWORD(data_low) = gm::Box<float,2>::operator+(v38, v36);
          HIDWORD(data_low) = v51;
          v61 = v52;
          v62 = v53;
          v54 = gm::Box<float,2>::operator+(v38, v36);
          v56 = v55 - v54;
          if (v56 < 0.0)
            v56 = 0.0;
          grl::drawDebugLine(a3, (uint64_t)&v72, (float32x2_t *)&data_low, v56);
          v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42B02E0;
          v72.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E42B4850;
          if (v72.__r_.__value_.__r.__words[2])
            CFRelease((CFTypeRef)v72.__r_.__value_.__r.__words[2]);
        }
      }
      return 1;
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v58 = GEOGetGeoResourceLibRendererLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LODWORD(v72.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
      WORD2(v72.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      HIWORD(v72.__r_.__value_.__r.__words[2]) = 1024;
      v73 = 612;
      v59 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_71;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v58 = GEOGetGeoResourceLibRendererLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LODWORD(v72.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
      WORD2(v72.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      HIWORD(v72.__r_.__value_.__r.__words[2]) = 1024;
      v73 = 609;
      v59 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_71:
      _os_log_impl(&dword_19F029000, v58, OS_LOG_TYPE_ERROR, v59, (uint8_t *)&v72, 0x1Cu);
      return 0;
    }
  }
  return result;
}

void md::DaVinciGroundLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__sp_mut *sp_mut;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  std::__sp_mut *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  gdc::Registry *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  gdc::Registry *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55[3];
  uint64_t v56;
  std::__shared_weak_count *v57;
  char v58;

  v8 = (unsigned __int16 *)*a3;
  v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9)
        goto LABEL_15;
    }
  }
  if (v8 == v9 || *((_QWORD *)v8 + 4) != 1)
  {
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v10 = *((_QWORD *)v8 + 3);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12)
  {
LABEL_16:
    v56 = v11;
    v57 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v56 = v11;
  v57 = v12;
  v15 = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  memset(v55, 0, sizeof(v55));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v55);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
  std::__sp_mut::lock(sp_mut);
  v19 = *(_QWORD *)(a1 + 792);
  v20 = *(std::__shared_weak_count **)(a1 + 800);
  v53 = v19;
  v54 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::__sp_mut::unlock(sp_mut);
  md::RegistryManager::vendRegistry((md::RegistryManager *)&v52, v19);
  v23 = *(id *)(a1 + 760);
  v24 = std::__get_sp_mut((const void *)(a1 + 776));
  std::__sp_mut::lock(v24);
  v25 = *(std::__shared_weak_count **)(a1 + 784);
  v47 = *(_QWORD *)(a1 + 776);
  v48 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  std::__sp_mut::unlock(v24);
  v28 = (uint64_t)v52;
  v29 = operator new(0x570uLL);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = &off_1E42DC698;
  v50 = md::DaVinciGroundTileData::DaVinciGroundTileData((uint64_t)(v29 + 3), a2, (uint64_t)v55, &v56, v23, (uint64_t)&v47, &v53, v28);
  v51 = v29;
  v30 = v48;
  if (v48)
  {
    v31 = (unint64_t *)&v48->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }

  v33 = v50;
  if (v50)
  {
    v34 = v53;
    v43 = *(_DWORD *)(v50 + 8);
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v44, a2 + 8);
    LODWORD(v47) = v43;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v48, (uint64_t)&v44);
    v49 = 0;
    md::RegistryManager::addRegistry(v34, (uint64_t)&v47, (uint64_t *)&v52);
    if (v49 != -1)
      ((void (*)(char *, uint64_t *))off_1E42FA3C0[v49])(&v58, &v47);
    v49 = -1;
    if (v45 != v46)
      free(v45);
  }
  v36 = v51;
  v35 = v52;
  *a4 = v33;
  a4[1] = (uint64_t)v36;
  v52 = 0;
  if (v35)
  {
    gdc::Registry::~Registry(v35);
    MEMORY[0x1A1AF4E00]();
  }
  v37 = v54;
  if (v54)
  {
    v38 = (unint64_t *)&v54->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v55[0])
    operator delete(v55[0]);
  v40 = v57;
  if (v57)
  {
    v41 = (unint64_t *)&v57->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_19F15504C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  uint64_t v33;
  void *v35;

  if (a33 != -1)
    ((void (*)(uint64_t, char *))off_1E42FA3C0[a33])(v33 - 49, &a21);
  a33 = -1;
  if (a11 != a13)
    free(a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 136);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100]((gdc::Registry **)(v33 - 120));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 112);
  v35 = *(void **)(v33 - 96);
  if (v35)
    operator delete(v35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 72);
  _Unwind_Resume(a1);
}

void sub_19F1550FC()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 96))
    JUMPOUT(0x19F1550ECLL);
  JUMPOUT(0x19F1550E8);
}

void md::InjectedFeaturesLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  int v32;
  char *v33;
  _QWORD *v34;
  gdc::Registry *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38[3];
  char v39;

  memset(v38, 0, sizeof(v38));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v38);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 584));
  std::__sp_mut::lock(sp_mut);
  v8 = *(std::__shared_weak_count **)(a1 + 592);
  v36 = *(_QWORD *)(a1 + 584);
  v37 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  v11 = operator new();
  v12 = v11;
  *(_OWORD *)(v11 + 416) = 0u;
  *(_OWORD *)(v11 + 432) = 0u;
  *(_OWORD *)(v11 + 384) = 0u;
  *(_OWORD *)(v11 + 400) = 0u;
  *(_OWORD *)(v11 + 352) = 0u;
  *(_OWORD *)(v11 + 368) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_DWORD *)(v11 + 32) = 1065353216;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  do
  {
    v13 = __ldaxr(gdc::Registry::nextId(void)::next);
    v14 = v13 + 1;
  }
  while (__stlxr(v14, gdc::Registry::nextId(void)::next));
  *(_WORD *)(v11 + 40) = v14;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_QWORD *)(v11 + 144) = 0;
  *(_DWORD *)(v11 + 152) = 1065353216;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_QWORD *)(v11 + 192) = 0;
  *(_DWORD *)(v11 + 200) = 1065353216;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_QWORD *)(v11 + 240) = 0;
  *(_DWORD *)(v11 + 248) = 1065353216;
  *(_QWORD *)(v11 + 288) = 0;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_DWORD *)(v11 + 296) = 1065353216;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_QWORD *)(v11 + 336) = 0;
  *(_DWORD *)(v11 + 344) = 1065353216;
  *(_OWORD *)(v11 + 352) = 0u;
  *(_OWORD *)(v11 + 368) = 0u;
  *(_QWORD *)(v11 + 384) = 0;
  *(_DWORD *)(v11 + 392) = 1065353216;
  *(_OWORD *)(v11 + 400) = 0u;
  *(_OWORD *)(v11 + 416) = 0u;
  *(_QWORD *)(v11 + 432) = 0;
  *(_DWORD *)(v11 + 440) = 1065353216;
  v35 = (gdc::Registry *)v11;
  v15 = operator new(0x570uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42DC698;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  md::DaVinciGroundTileData::DaVinciGroundTileData((uint64_t)(v15 + 3), a2, (uint64_t)v38, &v30, 0, (uint64_t)&v26, &v36, v12);
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v33 = (char *)(v15 + 3);
  v34 = v15;
  v22 = v36;
  LODWORD(v26) = *((_DWORD *)v15 + 8);
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v27, a2 + 8);
  LODWORD(v30) = v26;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v31, (uint64_t)&v27);
  v32 = 0;
  md::RegistryManager::addRegistry(v22, (uint64_t)&v30, (uint64_t *)&v35);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))off_1E42FA3C0[v32])(&v39, &v30);
  v32 = -1;
  if (v28 != v29)
    free(v28);
  *a4 = v15 + 3;
  a4[1] = v15;
  if (v35)
  {
    gdc::Registry::~Registry(v35);
    MEMORY[0x1A1AF4E00]();
  }
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v38[0])
    operator delete(v38[0]);
}

void sub_19F155430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  uint64_t v33;
  void *v35;

  if (a33 != -1)
    ((void (*)(uint64_t, char *))off_1E42FA3C0[a33])(v33 - 49, &a21);
  a33 = -1;
  if (a11 != a13)
    free(a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 120);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100]((gdc::Registry **)(v33 - 104));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33 - 96);
  v35 = *(void **)(v33 - 80);
  if (v35)
    operator delete(v35);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciGroundTileData::_buildingCount(uint64_t a1, geo::codec::VectorTile **a2)
{
  void *v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  int16x8_t **v9;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "compressedBuildingsDisabled");

  if ((v5 & 1) != 0 || (result = geo::codec::VectorTile::daVinciBuildingVertices(*a2)) != 0)
  {
    v7 = geo::codec::VectorTile::key(*a2);
    v8 = -1 << (*(_BYTE *)(a1 + 169) - (*(_BYTE *)(v7 + 1) & 0x3F));
    v9 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(*a2, *(_DWORD *)(a1 + 176) & ~v8, *(_DWORD *)(a1 + 172) & ~v8, (*(_BYTE *)(a1 + 169) - (*(_BYTE *)(v7 + 1) & 0x3F)));
    return (unint64_t)((char *)v9[1] - (char *)*v9) >> 1;
  }
  return result;
}

void sub_19F155578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int16x8_t **geo::codec::VectorTile::daVinciSubTileBuildingIndices(geo::codec::VectorTile *this, int a2, int a3, unsigned int a4)
{
  std::mutex *v8;
  double v9;
  double v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int16x8_t **v15;

  v8 = (std::mutex *)((char *)this + 2728);
  std::mutex::lock((std::mutex *)((char *)this + 2728));
  v15 = geo::codec::VectorTile::daVinciSubTileBuildingIndicesInternal(this, a2, a3, a4, v9, v10, v11, v12, v13, v14);
  std::mutex::unlock(v8);
  return v15;
}

void sub_19F1555F0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

int16x8_t **geo::codec::VectorTile::daVinciSubTileBuildingIndicesInternal(geo::codec::VectorTile *this, int a2, int a3, unsigned int a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  unsigned int v10;
  geo::codec::VectorTile *v13;
  char *v14;
  int16x8_t **v15;
  int16x8_t ***v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  __n128 v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  float *v33;
  float v34;
  int v35;
  float v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __n128 *v53;
  __n128 *v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  __n128 *v73;
  __n128 *v74;
  unint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __n128 *v93;
  __n128 *v94;
  unint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __n128 *v113;
  __n128 *v114;
  unint64_t v115;
  __int16 v116;
  uint64_t v117;
  unsigned __int16 *v118;
  unsigned __int16 *v119;
  int16x8_t *v120;
  uint64_t v121;
  float *v122;
  float v123;
  float v124;
  float v125;
  int16x8_t **v126;
  int16x8_t *v127;
  int16x8_t **v128;
  unint64_t v129;
  uint64_t *v130;
  int16x8_t *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _WORD *v139;
  int16x8_t *v140;
  int16x8_t *v141;
  int16x8_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int16x8_t *v147;
  __n128 *v148;
  __n128 *v149;
  unint64_t v150;
  __int16 v151;
  uint64_t v152;
  int16x8_t **v153;
  int16x8_t *v154;
  int16x8_t **v155;
  unint64_t v156;
  uint64_t *v157;
  int16x8_t *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _WORD *v166;
  int16x8_t *v167;
  int16x8_t *v168;
  int16x8_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int16x8_t *v174;
  __n128 *v175;
  __n128 *v176;
  unint64_t v177;
  __int16 v178;
  uint64_t v179;
  int16x8_t **v180;
  int16x8_t *v181;
  int16x8_t **v182;
  unint64_t v183;
  uint64_t *v184;
  int16x8_t *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _WORD *v193;
  int16x8_t *v194;
  int16x8_t *v195;
  int16x8_t *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int16x8_t *v201;
  __n128 *v202;
  __n128 *v203;
  unint64_t v204;
  __int16 v205;
  uint64_t v206;
  int16x8_t **v207;
  int16x8_t *v208;
  int16x8_t **v209;
  unint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _WORD *v219;
  int16x8_t *v220;
  int16x8_t *v221;
  int16x8_t *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  int16x8_t *v227;
  __n128 *v228;
  __n128 *v229;
  unint64_t v230;
  __int16 v231;
  uint64_t v232;
  unint64_t v233;
  int16x8_t *v234;
  int16x8_t *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  int16x8_t *v239;
  uint64_t v240;
  int16x8_t v241;
  int16x8_t *v242;
  int16x8_t v243;
  int16x8_t v244;
  unint64_t v245;
  int v247;
  int v248;
  char v249;
  geo::codec::VectorTile *v250;
  unsigned int v251;
  unsigned int v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  unsigned __int16 **v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;

  v10 = a4;
  v13 = this;
  v14 = (char *)this + 32 * a4;
  v15 = (int16x8_t **)*((_QWORD *)v14 + 313);
  if (v15 == *((int16x8_t ***)v14 + 314))
  {
    v16 = (int16x8_t ***)(v14 + 2504);
    v17 = (1 << a4 << a4);
    if ((_DWORD)v17)
      std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::__append((uint64_t)v16, v17);
    if (v10)
    {
      v247 = a3;
      v248 = a2;
      v18 = geo::codec::VectorTile::_tileBoundsForBuildings(v13, a5, a6, a7, a8, a9, a10);
      v19 = 0;
      v251 = v10 - 1;
      v255 = (1 << (v10 - 1));
      v20 = 1.0 / (float)v255;
      v250 = v13;
      v264 = v18;
      v249 = v10;
      while (1)
      {
        v21 = 0;
        v22 = (float)((float)v19 + 0.5) * v20;
        v253 = ((2 * v19) | 1) << v10;
        v254 = (2 * v19) << v10;
        v252 = v19;
        do
        {
          v23 = (float)((float)v21 + 0.5) * v20;
          v24 = geo::codec::VectorTile::daVinciSubTileBuildingIndicesInternal(v13, v21, v19, v251);
          v26 = *(unsigned __int16 **)v24;
          v27 = *(unsigned __int16 **)(v24 + 8);
          v257 = (unsigned __int16 **)v24;
          if (*(unsigned __int16 **)v24 == v27)
          {
            v31 = 0;
            v30 = 0;
            v29 = 0;
            v28 = 0;
          }
          else
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = *v26++;
              v33 = (float *)(*v18 + 16 * v32);
              v34 = v33[2];
              v35 = (float)(1.0 - v33[3]) < v22;
              v36 = *v33;
              v37 = (float)(1.0 - v33[1]) >= v22;
              if (v36 < v23)
                v38 = v35;
              else
                v38 = 0;
              if (v36 < v23)
                v39 = v37;
              else
                v39 = 0;
              v28 += v38;
              if (v34 < v23)
                v35 = 0;
              v29 += v35;
              v30 += v39;
              if (v34 < v23)
                v37 = 0;
              v31 += v37;
            }
            while (v26 != v27);
          }
          v256 = v21;
          v261 = 2 * v21;
          v263 = (2 * v21 + v254);
          v40 = (uint64_t)&(*v16)[4 * v263];
          v41 = (uint64_t *)(v40 + 16);
          if (v28 > (unint64_t)((uint64_t)(*(_QWORD *)(v40 + 16) - *(_QWORD *)v40) >> 1))
          {
            v42 = (unint64_t *)(v40 + 8);
            v43 = *(_QWORD *)(v40 + 8) - *(_QWORD *)v40;
            v259 = 2 * v28;
            v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v40 + 24) + 16))(*(_QWORD *)(v40 + 24));
            v45 = v44 + (v43 & 0xFFFFFFFFFFFFFFFELL);
            v46 = *(_QWORD *)(v40 + 8);
            v47 = *(_QWORD *)v40;
            v48 = v45;
            if (v46 != *(_QWORD *)v40)
            {
              v49 = *v42 - *(_QWORD *)v40 - 2;
              if (v49 < 0x1E)
              {
                v48 = v44 + (v43 & 0xFFFFFFFFFFFFFFFELL);
                goto LABEL_32;
              }
              v48 = v44 + (v43 & 0xFFFFFFFFFFFFFFFELL);
              if (v46 - (v43 & 0xFFFFFFFFFFFFFFFELL) - v44 < 0x20)
                goto LABEL_201;
              v50 = (v49 >> 1) + 1;
              v51 = 2 * (v50 & 0xFFFFFFFFFFFFFFF0);
              v52 = v46 - v51;
              v48 = v45 - v51;
              v53 = (__n128 *)(v44 + 2 * (v43 >> 1) - 16);
              v54 = (__n128 *)(v46 - 16);
              v55 = v50 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v25 = *v54;
                v53[-1] = v54[-1];
                *v53 = v25;
                v53 -= 2;
                v54 -= 2;
                v55 -= 16;
              }
              while (v55);
              v46 = v52;
              if (v50 != (v50 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_201:
                do
                {
LABEL_32:
                  v56 = *(_WORD *)(v46 - 2);
                  v46 -= 2;
                  *(_WORD *)(v48 - 2) = v56;
                  v48 -= 2;
                }
                while (v46 != v47);
              }
            }
            *(_QWORD *)v40 = v48;
            *v42 = v45;
            v57 = *v41;
            *v41 = v44 + v259;
            if (v47)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v40 + 24) + 40))(*(_QWORD *)(v40 + 24), v47, v57 - v47);
          }
          v260 = v263 | 1;
          v58 = (uint64_t)&(*v16)[4 * v260];
          v59 = v29;
          v60 = (uint64_t *)(v58 + 16);
          if (v59 <= (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)v58) >> 1)
            goto LABEL_46;
          v61 = (unint64_t *)(v58 + 8);
          v62 = *(_QWORD *)(v58 + 8) - *(_QWORD *)v58;
          v63 = 2 * v59;
          v64 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v58 + 24) + 16))(*(_QWORD *)(v58 + 24), 2 * v59, 2);
          v65 = v64 + (v62 & 0xFFFFFFFFFFFFFFFELL);
          v66 = *(_QWORD *)(v58 + 8);
          v67 = *(_QWORD *)v58;
          v68 = v65;
          if (v66 != *(_QWORD *)v58)
          {
            v69 = *v61 - *(_QWORD *)v58 - 2;
            if (v69 < 0x1E)
            {
              v68 = v64 + (v62 & 0xFFFFFFFFFFFFFFFELL);
              do
              {
LABEL_43:
                v76 = *(_WORD *)(v66 - 2);
                v66 -= 2;
                *(_WORD *)(v68 - 2) = v76;
                v68 -= 2;
              }
              while (v66 != v67);
              goto LABEL_44;
            }
            v68 = v64 + (v62 & 0xFFFFFFFFFFFFFFFELL);
            if (v66 - (v62 & 0xFFFFFFFFFFFFFFFELL) - v64 < 0x20)
              goto LABEL_43;
            v70 = (v69 >> 1) + 1;
            v71 = 2 * (v70 & 0xFFFFFFFFFFFFFFF0);
            v72 = v66 - v71;
            v68 = v65 - v71;
            v73 = (__n128 *)(v64 + 2 * (v62 >> 1) - 16);
            v74 = (__n128 *)(v66 - 16);
            v75 = v70 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v25 = *v74;
              v73[-1] = v74[-1];
              *v73 = v25;
              v73 -= 2;
              v74 -= 2;
              v75 -= 16;
            }
            while (v75);
            v66 = v72;
            if (v70 != (v70 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_43;
          }
LABEL_44:
          *(_QWORD *)v58 = v68;
          *v61 = v65;
          v77 = *v60;
          *v60 = v64 + v63;
          if (v67)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), v67, v77 - v67);
LABEL_46:
          v262 = (v261 + v253);
          v78 = (uint64_t)&(*v16)[4 * v262];
          v79 = v30;
          v80 = (uint64_t *)(v78 + 16);
          if (v79 <= (uint64_t)(*(_QWORD *)(v78 + 16) - *(_QWORD *)v78) >> 1)
            goto LABEL_57;
          v81 = (unint64_t *)(v78 + 8);
          v82 = *(_QWORD *)(v78 + 8) - *(_QWORD *)v78;
          v83 = 2 * v79;
          v84 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v78 + 24) + 16))(*(_QWORD *)(v78 + 24), 2 * v79, 2);
          v85 = v84 + (v82 & 0xFFFFFFFFFFFFFFFELL);
          v86 = *(_QWORD *)(v78 + 8);
          v87 = *(_QWORD *)v78;
          v88 = v85;
          if (v86 != *(_QWORD *)v78)
          {
            v89 = *v81 - *(_QWORD *)v78 - 2;
            if (v89 < 0x1E)
            {
              v88 = v84 + (v82 & 0xFFFFFFFFFFFFFFFELL);
              do
              {
LABEL_54:
                v96 = *(_WORD *)(v86 - 2);
                v86 -= 2;
                *(_WORD *)(v88 - 2) = v96;
                v88 -= 2;
              }
              while (v86 != v87);
              goto LABEL_55;
            }
            v88 = v84 + (v82 & 0xFFFFFFFFFFFFFFFELL);
            if (v86 - (v82 & 0xFFFFFFFFFFFFFFFELL) - v84 < 0x20)
              goto LABEL_54;
            v90 = (v89 >> 1) + 1;
            v91 = 2 * (v90 & 0xFFFFFFFFFFFFFFF0);
            v92 = v86 - v91;
            v88 = v85 - v91;
            v93 = (__n128 *)(v84 + 2 * (v82 >> 1) - 16);
            v94 = (__n128 *)(v86 - 16);
            v95 = v90 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v25 = *v94;
              v93[-1] = v94[-1];
              *v93 = v25;
              v93 -= 2;
              v94 -= 2;
              v95 -= 16;
            }
            while (v95);
            v86 = v92;
            if (v90 != (v90 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_54;
          }
LABEL_55:
          *(_QWORD *)v78 = v88;
          *v81 = v85;
          v97 = *v80;
          *v80 = v84 + v83;
          if (v87)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v78 + 24) + 40))(*(_QWORD *)(v78 + 24), v87, v97 - v87);
LABEL_57:
          v258 = (v262 + 1);
          v98 = (uint64_t)&(*v16)[4 * v258];
          v99 = v31;
          v100 = (uint64_t *)(v98 + 16);
          if (v99 > (uint64_t)(*(_QWORD *)(v98 + 16) - *(_QWORD *)v98) >> 1)
          {
            v101 = (unint64_t *)(v98 + 8);
            v102 = *(_QWORD *)(v98 + 8) - *(_QWORD *)v98;
            v103 = 2 * v99;
            v104 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v98 + 24) + 16))(*(_QWORD *)(v98 + 24), 2 * v99, 2);
            v105 = v104 + (v102 & 0xFFFFFFFFFFFFFFFELL);
            v106 = *(_QWORD *)(v98 + 8);
            v107 = *(_QWORD *)v98;
            v108 = v105;
            if (v106 != *(_QWORD *)v98)
            {
              v109 = *v101 - *(_QWORD *)v98 - 2;
              if (v109 < 0x1E)
              {
                v108 = v104 + (v102 & 0xFFFFFFFFFFFFFFFELL);
                goto LABEL_65;
              }
              v108 = v104 + (v102 & 0xFFFFFFFFFFFFFFFELL);
              if (v106 - (v102 & 0xFFFFFFFFFFFFFFFELL) - v104 < 0x20)
                goto LABEL_202;
              v110 = (v109 >> 1) + 1;
              v111 = 2 * (v110 & 0xFFFFFFFFFFFFFFF0);
              v112 = v106 - v111;
              v108 = v105 - v111;
              v113 = (__n128 *)(v104 + 2 * (v102 >> 1) - 16);
              v114 = (__n128 *)(v106 - 16);
              v115 = v110 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v25 = *v114;
                v113[-1] = v114[-1];
                *v113 = v25;
                v113 -= 2;
                v114 -= 2;
                v115 -= 16;
              }
              while (v115);
              v106 = v112;
              if (v110 != (v110 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_202:
                do
                {
LABEL_65:
                  v116 = *(_WORD *)(v106 - 2);
                  v106 -= 2;
                  *(_WORD *)(v108 - 2) = v116;
                  v108 -= 2;
                }
                while (v106 != v107);
              }
            }
            *(_QWORD *)v98 = v108;
            *v101 = v105;
            v117 = *v100;
            *v100 = v104 + v103;
            if (v107)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v98 + 24) + 40))(*(_QWORD *)(v98 + 24), v107, v117 - v107);
          }
          v119 = *v257;
          v118 = v257[1];
          while (v119 != v118)
          {
            v121 = *v119;
            v122 = (float *)(*v18 + 16 * v121);
            v123 = v122[2];
            v124 = *v122;
            v125 = v122[1];
            if ((float)(1.0 - v122[3]) >= v22)
              goto LABEL_130;
            if (v124 < v23)
            {
              v126 = &(*v16)[4 * v263];
              v128 = v126 + 1;
              v127 = v126[1];
              v130 = (uint64_t *)(v126 + 2);
              v129 = (unint64_t)v126[2];
              if ((unint64_t)v127 < v129)
              {
                if (v127)
                  v127->i16[0] = v121;
                v131 = (int16x8_t *)&v127->i16[1];
LABEL_101:
                *v128 = v131;
                goto LABEL_102;
              }
              v132 = (char *)v127 - (char *)*v126;
              if (v132 <= -3)
                goto LABEL_198;
              v133 = v126 + 3;
              v134 = v132 >> 1;
              v135 = v129 - (_QWORD)*v126;
              if (v135 <= (v132 >> 1) + 1)
                v136 = v134 + 1;
              else
                v136 = v135;
              if (v135 >= 0x7FFFFFFFFFFFFFFELL)
                v136 = 0x7FFFFFFFFFFFFFFFLL;
              if (v136)
              {
                v137 = 2 * v136;
                v138 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v133 + 16))(*v133, 2 * v136, 2);
                v139 = (_WORD *)(v138 + 2 * v134);
                v136 = v138 + v137;
                if (v138)
                  *v139 = v121;
                v18 = v264;
                v140 = *v128;
                v141 = *v126;
                v142 = (int16x8_t *)v139;
                v143 = (char *)*v128 - (char *)*v126;
                if (*v128 == *v126)
                  goto LABEL_99;
LABEL_91:
                v144 = v143 - 2;
                if (v144 < 0x1E)
                {
                  v142 = (int16x8_t *)v139;
                }
                else
                {
                  v142 = (int16x8_t *)v139;
                  if ((unint64_t)((char *)v140 - (char *)v139) >= 0x20)
                  {
                    v145 = (v144 >> 1) + 1;
                    v146 = 2 * (v145 & 0xFFFFFFFFFFFFFFF0);
                    v147 = (int16x8_t *)((char *)v140 - v146);
                    v142 = (int16x8_t *)&v139[v146 / 0xFFFFFFFFFFFFFFFELL];
                    v148 = (__n128 *)(v139 - 8);
                    v149 = (__n128 *)&v140[-1];
                    v150 = v145 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v25 = *v149;
                      v148[-1] = v149[-1];
                      *v148 = v25;
                      v148 -= 2;
                      v149 -= 2;
                      v150 -= 16;
                    }
                    while (v150);
                    v140 = v147;
                    if (v145 == (v145 & 0xFFFFFFFFFFFFFFF0))
                      goto LABEL_99;
                  }
                }
                do
                {
                  v151 = v140[-1].i16[7];
                  v140 = (int16x8_t *)((char *)v140 - 2);
                  v142[-1].i16[7] = v151;
                  v142 = (int16x8_t *)((char *)v142 - 2);
                }
                while (v140 != v141);
                goto LABEL_99;
              }
              v139 = (_WORD *)(2 * v134);
              v18 = v264;
              v140 = *v128;
              v141 = *v126;
              v142 = (int16x8_t *)v139;
              v143 = (char *)*v128 - (char *)*v126;
              if (*v128 != *v126)
                goto LABEL_91;
LABEL_99:
              v131 = (int16x8_t *)(v139 + 1);
              *v126 = v142;
              *v128 = (int16x8_t *)(v139 + 1);
              v152 = *v130;
              *v130 = v136;
              if (v141)
                (*(void (**)(_QWORD, int16x8_t *, uint64_t))(*(_QWORD *)*v133 + 40))(*v133, v141, v152 - (_QWORD)v141);
              goto LABEL_101;
            }
LABEL_102:
            if (v123 < v23)
              goto LABEL_130;
            v153 = &(*v16)[4 * v260];
            v155 = v153 + 1;
            v154 = v153[1];
            v157 = (uint64_t *)(v153 + 2);
            v156 = (unint64_t)v153[2];
            if ((unint64_t)v154 >= v156)
            {
              v159 = (char *)v154 - (char *)*v153;
              if (v159 <= -3)
                goto LABEL_198;
              v160 = v153 + 3;
              v161 = v159 >> 1;
              v162 = v156 - (_QWORD)*v153;
              if (v162 <= (v159 >> 1) + 1)
                v163 = v161 + 1;
              else
                v163 = v162;
              if (v162 >= 0x7FFFFFFFFFFFFFFELL)
                v163 = 0x7FFFFFFFFFFFFFFFLL;
              if (v163)
              {
                v164 = 2 * v163;
                v165 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v160 + 16))(*v160, 2 * v163, 2);
                v166 = (_WORD *)(v165 + 2 * v161);
                v163 = v165 + v164;
                if (v165)
                  *v166 = v121;
                v18 = v264;
                v167 = *v155;
                v168 = *v153;
                v169 = (int16x8_t *)v166;
                v170 = (char *)*v155 - (char *)*v153;
                if (*v155 == *v153)
                  goto LABEL_127;
LABEL_119:
                v171 = v170 - 2;
                if (v171 < 0x1E)
                {
                  v169 = (int16x8_t *)v166;
                }
                else
                {
                  v169 = (int16x8_t *)v166;
                  if ((unint64_t)((char *)v167 - (char *)v166) >= 0x20)
                  {
                    v172 = (v171 >> 1) + 1;
                    v173 = 2 * (v172 & 0xFFFFFFFFFFFFFFF0);
                    v174 = (int16x8_t *)((char *)v167 - v173);
                    v169 = (int16x8_t *)&v166[v173 / 0xFFFFFFFFFFFFFFFELL];
                    v175 = (__n128 *)(v166 - 8);
                    v176 = (__n128 *)&v167[-1];
                    v177 = v172 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v25 = *v176;
                      v175[-1] = v176[-1];
                      *v175 = v25;
                      v175 -= 2;
                      v176 -= 2;
                      v177 -= 16;
                    }
                    while (v177);
                    v167 = v174;
                    if (v172 == (v172 & 0xFFFFFFFFFFFFFFF0))
                      goto LABEL_127;
                  }
                }
                do
                {
                  v178 = v167[-1].i16[7];
                  v167 = (int16x8_t *)((char *)v167 - 2);
                  v169[-1].i16[7] = v178;
                  v169 = (int16x8_t *)((char *)v169 - 2);
                }
                while (v167 != v168);
                goto LABEL_127;
              }
              v166 = (_WORD *)(2 * v161);
              v18 = v264;
              v167 = *v155;
              v168 = *v153;
              v169 = (int16x8_t *)v166;
              v170 = (char *)*v155 - (char *)*v153;
              if (*v155 != *v153)
                goto LABEL_119;
LABEL_127:
              v158 = (int16x8_t *)(v166 + 1);
              *v153 = v169;
              *v155 = (int16x8_t *)(v166 + 1);
              v179 = *v157;
              *v157 = v163;
              if (v168)
                (*(void (**)(_QWORD, int16x8_t *, uint64_t))(*(_QWORD *)*v160 + 40))(*v160, v168, v179 - (_QWORD)v168);
              goto LABEL_129;
            }
            if (v154)
              v154->i16[0] = v121;
            v158 = (int16x8_t *)&v154->i16[1];
LABEL_129:
            *v155 = v158;
LABEL_130:
            v25.n128_f32[0] = 1.0 - v125;
            if ((float)(1.0 - v125) < v22)
              goto LABEL_71;
            if (v124 < v23)
            {
              v180 = &(*v16)[4 * v262];
              v182 = v180 + 1;
              v181 = v180[1];
              v184 = (uint64_t *)(v180 + 2);
              v183 = (unint64_t)v180[2];
              if ((unint64_t)v181 < v183)
              {
                if (v181)
                  v181->i16[0] = v121;
                v185 = (int16x8_t *)&v181->i16[1];
LABEL_158:
                *v182 = v185;
                goto LABEL_159;
              }
              v186 = (char *)v181 - (char *)*v180;
              if (v186 <= -3)
                goto LABEL_198;
              v187 = v180 + 3;
              v188 = v186 >> 1;
              v189 = v183 - (_QWORD)*v180;
              if (v189 <= (v186 >> 1) + 1)
                v190 = v188 + 1;
              else
                v190 = v189;
              if (v189 >= 0x7FFFFFFFFFFFFFFELL)
                v190 = 0x7FFFFFFFFFFFFFFFLL;
              if (v190)
              {
                v191 = 2 * v190;
                v192 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(*(_QWORD *)*v187 + 16))(*v187, 2 * v190, 2, v25);
                v193 = (_WORD *)(v192 + 2 * v188);
                v190 = v192 + v191;
                if (v192)
                  *v193 = v121;
                v18 = v264;
                v194 = *v182;
                v195 = *v180;
                v196 = (int16x8_t *)v193;
                v197 = (char *)*v182 - (char *)*v180;
                if (*v182 == *v180)
                  goto LABEL_156;
LABEL_148:
                v198 = v197 - 2;
                if (v198 < 0x1E)
                {
                  v196 = (int16x8_t *)v193;
                }
                else
                {
                  v196 = (int16x8_t *)v193;
                  if ((unint64_t)((char *)v194 - (char *)v193) >= 0x20)
                  {
                    v199 = (v198 >> 1) + 1;
                    v200 = 2 * (v199 & 0xFFFFFFFFFFFFFFF0);
                    v201 = (int16x8_t *)((char *)v194 - v200);
                    v196 = (int16x8_t *)&v193[v200 / 0xFFFFFFFFFFFFFFFELL];
                    v202 = (__n128 *)(v193 - 8);
                    v203 = (__n128 *)&v194[-1];
                    v204 = v199 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v25 = *v203;
                      v202[-1] = v203[-1];
                      *v202 = v25;
                      v202 -= 2;
                      v203 -= 2;
                      v204 -= 16;
                    }
                    while (v204);
                    v194 = v201;
                    if (v199 == (v199 & 0xFFFFFFFFFFFFFFF0))
                      goto LABEL_156;
                  }
                }
                do
                {
                  v205 = v194[-1].i16[7];
                  v194 = (int16x8_t *)((char *)v194 - 2);
                  v196[-1].i16[7] = v205;
                  v196 = (int16x8_t *)((char *)v196 - 2);
                }
                while (v194 != v195);
                goto LABEL_156;
              }
              v193 = (_WORD *)(2 * v188);
              v18 = v264;
              v194 = *v182;
              v195 = *v180;
              v196 = (int16x8_t *)v193;
              v197 = (char *)*v182 - (char *)*v180;
              if (*v182 != *v180)
                goto LABEL_148;
LABEL_156:
              v185 = (int16x8_t *)(v193 + 1);
              *v180 = v196;
              *v182 = (int16x8_t *)(v193 + 1);
              v206 = *v184;
              *v184 = v190;
              if (v195)
                (*(void (**)(_QWORD, int16x8_t *, uint64_t))(*(_QWORD *)*v187 + 40))(*v187, v195, v206 - (_QWORD)v195);
              goto LABEL_158;
            }
LABEL_159:
            if (v123 >= v23)
            {
              v207 = &(*v16)[4 * v258];
              v209 = v207 + 1;
              v208 = v207[1];
              v211 = (uint64_t *)(v207 + 2);
              v210 = (unint64_t)v207[2];
              if ((unint64_t)v208 < v210)
              {
                if (v208)
                  v208->i16[0] = v121;
                v120 = (int16x8_t *)&v208->i16[1];
LABEL_70:
                *v209 = v120;
                goto LABEL_71;
              }
              v212 = (char *)v208 - (char *)*v207;
              if (v212 <= -3)
LABEL_198:
                std::vector<double>::__throw_length_error[abi:ne180100]();
              v213 = v207 + 3;
              v214 = v212 >> 1;
              v215 = v210 - (_QWORD)*v207;
              if (v215 <= (v212 >> 1) + 1)
                v216 = v214 + 1;
              else
                v216 = v215;
              if (v215 >= 0x7FFFFFFFFFFFFFFELL)
                v216 = 0x7FFFFFFFFFFFFFFFLL;
              if (v216)
              {
                v217 = 2 * v216;
                v218 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, __n128))(*(_QWORD *)*v213 + 16))(*v213, 2 * v216, 2, v25);
                v219 = (_WORD *)(v218 + 2 * v214);
                v216 = v218 + v217;
                if (v218)
                  *v219 = v121;
                v18 = v264;
                v220 = *v209;
                v221 = *v207;
                v222 = (int16x8_t *)v219;
                v223 = (char *)*v209 - (char *)*v207;
                if (*v209 == *v207)
                  goto LABEL_183;
LABEL_175:
                v224 = v223 - 2;
                if (v224 < 0x1E)
                {
                  v222 = (int16x8_t *)v219;
                }
                else
                {
                  v222 = (int16x8_t *)v219;
                  if ((unint64_t)((char *)v220 - (char *)v219) >= 0x20)
                  {
                    v225 = (v224 >> 1) + 1;
                    v226 = 2 * (v225 & 0xFFFFFFFFFFFFFFF0);
                    v227 = (int16x8_t *)((char *)v220 - v226);
                    v222 = (int16x8_t *)&v219[v226 / 0xFFFFFFFFFFFFFFFELL];
                    v228 = (__n128 *)(v219 - 8);
                    v229 = (__n128 *)&v220[-1];
                    v230 = v225 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v25 = *v229;
                      v228[-1] = v229[-1];
                      *v228 = v25;
                      v228 -= 2;
                      v229 -= 2;
                      v230 -= 16;
                    }
                    while (v230);
                    v220 = v227;
                    if (v225 == (v225 & 0xFFFFFFFFFFFFFFF0))
                      goto LABEL_183;
                  }
                }
                do
                {
                  v231 = v220[-1].i16[7];
                  v220 = (int16x8_t *)((char *)v220 - 2);
                  v222[-1].i16[7] = v231;
                  v222 = (int16x8_t *)((char *)v222 - 2);
                }
                while (v220 != v221);
                goto LABEL_183;
              }
              v219 = (_WORD *)(2 * v214);
              v18 = v264;
              v220 = *v209;
              v221 = *v207;
              v222 = (int16x8_t *)v219;
              v223 = (char *)*v209 - (char *)*v207;
              if (*v209 != *v207)
                goto LABEL_175;
LABEL_183:
              v120 = (int16x8_t *)(v219 + 1);
              *v207 = v222;
              *v209 = (int16x8_t *)(v219 + 1);
              v232 = *v211;
              *v211 = v216;
              if (v221)
                (*(void (**)(_QWORD, int16x8_t *, uint64_t))(*(_QWORD *)*v213 + 40))(*v213, v221, v232 - (_QWORD)v221);
              goto LABEL_70;
            }
LABEL_71:
            ++v119;
          }
          v21 = v256 + 1;
          v13 = v250;
          v19 = v252;
        }
        while (v256 + 1 != v255);
        v19 = v252 + 1;
        LOBYTE(v10) = v249;
        if (v252 + 1 == (_DWORD)v255)
        {
          v15 = *v16;
          a3 = v247;
          a2 = v248;
          return &v15[4 * ((a3 << v10) + a2)];
        }
      }
    }
    v15 = *v16;
    v233 = (unsigned __int16)(-13107 * ((*((_DWORD *)v13 + 582) - *((_DWORD *)v13 + 580)) >> 3));
    v235 = **v16;
    v234 = (*v16)[1];
    v236 = ((char *)v234 - (char *)v235) >> 1;
    if (v233 <= v236)
    {
      if (v233 < v236)
      {
        v234 = (int16x8_t *)((char *)v235 + 2 * v233);
        v15[1] = v234;
      }
    }
    else
    {
      std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append((uint64_t)v15, v233 - v236);
      v15 = *v16;
      v235 = **v16;
      v234 = (*v16)[1];
    }
    if (v235 != v234)
    {
      v237 = (char *)v234 - (char *)v235 - 2;
      if (v237 < 0x1E)
      {
        LODWORD(v238) = 0;
        v239 = v235;
        do
        {
LABEL_196:
          v239->i16[0] = v238;
          v239 = (int16x8_t *)((char *)v239 + 2);
          LODWORD(v238) = v238 + 1;
        }
        while (v239 != v234);
        return &v15[4 * ((a3 << v10) + a2)];
      }
      v240 = (v237 >> 1) + 1;
      v238 = v240 & 0xFFFFFFFFFFFFFFF0;
      v239 = (int16x8_t *)((char *)v235 + 2 * (v240 & 0xFFFFFFFFFFFFFFF0));
      v241 = (int16x8_t)xmmword_19FFB3C40;
      v242 = v235 + 1;
      v243.i64[0] = 0x8000800080008;
      v243.i64[1] = 0x8000800080008;
      v244.i64[0] = 0x10001000100010;
      v244.i64[1] = 0x10001000100010;
      v245 = v240 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v242[-1] = v241;
        *v242 = vaddq_s16(v241, v243);
        v241 = vaddq_s16(v241, v244);
        v242 += 2;
        v245 -= 16;
      }
      while (v245);
      if (v240 != v238)
        goto LABEL_196;
    }
  }
  return &v15[4 * ((a3 << v10) + a2)];
}

void md::RegistryManager::addRegistry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  void **v9;
  char *v10;
  void **v11;
  void **v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  gdc::Registry *v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[2];
  _QWORD *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitRegistryManagerLog(void)::onceToken[0] != -1)
    dispatch_once(GEOGetVectorKitRegistryManagerLog(void)::onceToken, &__block_literal_global_6559);
  v6 = (id)GEOGetVectorKitRegistryManagerLog(void)::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(unsigned __int16 *)(*a3 + 40);
    __p[0] = 0;
    __p[1] = 0;
    v24 = 0;
    v25[0] = __p;
    v25[1] = __p;
    v8 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v8 == -1)
    {
      std::__throw_bad_variant_access[abi:nn180100]();
      __break(1u);
      return;
    }
    v26 = v25;
    ((void (*)(_QWORD **, uint64_t))off_1E42EEDB0[v8])(&v26, a2);
    v9 = __p;
    if (v24 < 0)
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v28 = v7;
    v29 = 2080;
    v30 = v9;
    _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_DEBUG, "Queuing incoming registry:%d for key:%s", buf, 0x12u);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
  }

  std::mutex::lock((std::mutex *)(a1 + 80));
  v11 = (void **)(a1 + 216);
  v10 = *(char **)(a1 + 216);
  if (!v10)
  {
    v12 = (void **)(a1 + 216);
    goto LABEL_31;
  }
  while (1)
  {
    while (1)
    {
      v12 = (void **)v10;
      v13 = v10 + 32;
      v14 = *((unsigned int *)v10 + 32);
      v15 = *(unsigned int *)(a2 + 96);
      if ((_DWORD)v14 == -1)
      {
        if (v15 == 0xFFFFFFFF)
          goto LABEL_28;
        goto LABEL_14;
      }
      if (v15 != 0xFFFFFFFF && v15 >= v14)
        break;
LABEL_23:
      v10 = (char *)*v12;
      v11 = v12;
      if (!*v12)
        goto LABEL_31;
    }
    if (v15 > v14)
      break;
    __p[0] = buf;
    if ((((uint64_t (*)(void **, uint64_t, char *))off_1E42EEDE0[v15])(__p, a2, v13) & 1) != 0)
      goto LABEL_23;
    v15 = *(unsigned int *)(a2 + 96);
    if (v15 == 0xFFFFFFFF)
      goto LABEL_28;
LABEL_14:
    v14 = *((unsigned int *)v12 + 32);
    if ((_DWORD)v14 != -1)
      break;
LABEL_11:
    v11 = v12 + 1;
    v10 = (char *)v12[1];
    if (!v10)
      goto LABEL_31;
  }
  if (v14 < v15)
    goto LABEL_11;
  if (v14 <= v15)
  {
    __p[0] = buf;
    if (((unsigned int (*)(void **, char *, uint64_t))off_1E42EEDE0[v14])(__p, v13, a2))
      goto LABEL_11;
  }
LABEL_28:
  v17 = (char *)*v11;
  if (!*v11)
  {
LABEL_31:
    v17 = (char *)operator new(0x90uLL);
    v17[32] = 0;
    *((_DWORD *)v17 + 32) = -1;
    v18 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(uint8_t *, char *, uint64_t))off_1E42EEDC0[v18])(buf, v17 + 32, a2);
      *((_DWORD *)v17 + 32) = v18;
    }
    *((_QWORD *)v17 + 17) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v12;
    *v11 = v17;
    v19 = **(_QWORD **)(a1 + 208);
    v20 = (uint64_t *)v17;
    if (v19)
    {
      *(_QWORD *)(a1 + 208) = v19;
      v20 = (uint64_t *)*v11;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v20);
    ++*(_QWORD *)(a1 + 224);
  }
  v21 = *a3;
  *a3 = 0;
  v22 = (gdc::Registry *)*((_QWORD *)v17 + 17);
  *((_QWORD *)v17 + 17) = v21;
  if (v22)
  {
    gdc::Registry::~Registry(v22);
    MEMORY[0x1A1AF4E00]();
  }
  std::mutex::unlock((std::mutex *)(a1 + 80));
}

void sub_19F156764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v18;

  v18 = v15[32];
  if ((_DWORD)v18 != -1)
    ((void (*)(void **, uint64_t))off_1E42FA3C0[v18])(&__p, v16);
  operator delete(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void gdc::Context::setContext<md::components::SharedTransformData,md::components::SharedTransformData>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v5 = (_QWORD *)operator new();
  v6 = operator new();
  *(_WORD *)v6 = *(_WORD *)a2;
  *(_QWORD *)(v6 + 4) = *(_QWORD *)(a2 + 4);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 80) = v7;
  *(_OWORD *)(v6 + 96) = v8;
  memcpy((void *)(v6 + 128), (const void *)(a2 + 128), 0x14CuLL);
  v5[2] = "md::components::SharedTransformData]";
  v5[3] = 35;
  v5[4] = v6;
  *v5 = &off_1E42B0A28;
  v5[1] = 0x64A448A5CD5D38DBLL;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = 0x64A448A5CD5D38DBLL;
      if (v9 <= 0x64A448A5CD5D38DBLL)
        v2 = 0x64A448A5CD5D38DBLL % v9;
    }
    else
    {
      v2 = (v9 - 1) & 0x64A448A5CD5D38DBLL;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == 0x64A448A5CD5D38DBLL)
            {
              if (v12[2] == 0x64A448A5CD5D38DBLL)
                return;
            }
            else if ((v14 & (v9 - 1)) != v2)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == 0x64A448A5CD5D38DBLL)
          {
            if (v12[2] == 0x64A448A5CD5D38DBLL)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v2)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x30uLL);
  *(_QWORD *)v16 = 0;
  *(int64x2_t *)(v16 + 8) = vdupq_n_s64(0x64A448A5CD5D38DBuLL);
  *((_QWORD *)v16 + 3) = "md::components::SharedTransformData]";
  *((_QWORD *)v16 + 4) = 35;
  *((_QWORD *)v16 + 5) = v5;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_34;
    if (prime < v9)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v9)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= 0x64A448A5CD5D38DBLL)
        v2 = 0x64A448A5CD5D38DBLL % v9;
      else
        v2 = 0x64A448A5CD5D38DBLL;
    }
    else
    {
      v2 = (v9 - 1) & 0x64A448A5CD5D38DBLL;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v27)
  {
    *(_QWORD *)v16 = *v27;
LABEL_58:
    *v27 = v16;
    goto LABEL_59;
  }
  *(_QWORD *)v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v26 + 8 * v2) = v15;
  if (*(_QWORD *)v16)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F156BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F156BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

gdc::Tiled *gdc::Tiled::Tiled(gdc::Tiled *this, const QuadTile *a2, float a3, float a4)
{
  unsigned __int8 level;
  uint64_t v8;
  long double v9;
  long double v10;
  long double v11;
  long double v12;
  long double v13;
  long double v14;
  long double v15;
  long double v16;
  long double v17;
  double v18;
  double v20;
  double v21;

  level = a2->_level;
  *(_BYTE *)this = a2->_type;
  *((_BYTE *)this + 1) = level;
  v8 = *(_QWORD *)&a2->_yIdx;
  *(_QWORD *)((char *)this + 4) = v8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = xmmword_19FFB3010;
  *(int64x2_t *)((char *)this + 88) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)((char *)this + 104) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *((_QWORD *)this + 15) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *(float *)&v8 = ((double)((1 << level) + ~(_DWORD)v8) + 0.5) / (double)(1 << level);
  v9 = exp(*(float *)&v8 * 6.28318531 + -3.14159265);
  v10 = atan(v9) * 114.591559 + -90.0;
  v11 = cos(v10 * 0.034906585) * -559.82 + 111132.92;
  v12 = v11 + cos(v10 * 0.0698131701) * 1.175;
  v13 = v12 + cos(v10 * 0.104719755) * -0.0023;
  v14 = v10 * 0.00872664626;
  v15 = tan(v10 * 0.00872664626 + 0.78103484);
  v16 = log(v15);
  v17 = tan(v14 + 0.789761487);
  *(float *)&v16 = fabs((log(v17) - v16) * 0.159154943) / (v13 * (float)(1.0 / (float)(1 << level)));
  __powidf2();
  *(float *)&v18 = v18 * 0.0000000249532021;
  *((_DWORD *)this + 112) = LODWORD(v16);
  *((_DWORD *)this + 113) = LODWORD(v16);
  *((_DWORD *)this + 114) = LODWORD(v18);
  v20 = a4;
  v21 = a3;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)this, &v21, &v20);
  return this;
}

unint64_t *md::RegistryManager::vendRegistry(md::RegistryManager *this, uint64_t a2)
{
  unint64_t *result;
  unint64_t *v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[3];
  char *v30;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  result = (unint64_t *)operator new();
  v5 = result;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 20) = 0u;
  *((_OWORD *)result + 21) = 0u;
  *((_OWORD *)result + 22) = 0u;
  *((_OWORD *)result + 23) = 0u;
  *((_OWORD *)result + 24) = 0u;
  *((_OWORD *)result + 25) = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  *((_OWORD *)result + 26) = 0u;
  *((_OWORD *)result + 27) = 0u;
  do
  {
    v6 = __ldaxr(gdc::Registry::nextId(void)::next);
    v7 = v6 + 1;
  }
  while (__stlxr(v7, gdc::Registry::nextId(void)::next));
  *((_WORD *)result + 20) = v7;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  result[18] = 0;
  *((_DWORD *)result + 38) = 1065353216;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  result[24] = 0;
  *((_DWORD *)result + 50) = 1065353216;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  result[30] = 0;
  *((_DWORD *)result + 62) = 1065353216;
  result[36] = 0;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_DWORD *)result + 74) = 1065353216;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 20) = 0u;
  result[42] = 0;
  *((_DWORD *)result + 86) = 1065353216;
  *((_OWORD *)result + 22) = 0u;
  *((_OWORD *)result + 23) = 0u;
  result[48] = 0;
  *((_DWORD *)result + 98) = 1065353216;
  *((_OWORD *)result + 25) = 0u;
  *((_OWORD *)result + 26) = 0u;
  result[54] = 0;
  *((_DWORD *)result + 110) = 1065353216;
  *(_QWORD *)this = result;
  if (*(_BYTE *)(a2 + 376))
  {
    v8 = operator new(0x20uLL);
    *v8 = &off_1E42D5BA8;
    v8[1] = a2;
    v8[2] = md::RegistryManager::onRegistryDestroyed;
    v8[3] = 0;
    v28 = v8;
    v5[50] = 1;
    v9 = (char *)operator new(0x38uLL);
    *(_QWORD *)v9 = 0;
    *(int64x2_t *)(v9 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v9 + 6) = 0;
    v10 = operator new(0x10uLL);
    v11 = v5 + 53;
    v5[51] = (unint64_t)v10;
    v5[52] = 2;
    *v10 = 0;
    v10[1] = 0;
    v12 = (_QWORD *)v5[53];
    if (v12)
    {
      v13 = v12[1] & 1;
      *(_QWORD *)(v5[51] + 8 * v13) = v11;
      while (1)
      {
        v14 = (_QWORD *)*v12;
        if (!*v12)
          break;
        v15 = v14[1] & 1;
        if (v15 == v13)
        {
          v12 = (_QWORD *)*v12;
        }
        else
        {
          v16 = v5[51];
          if (*(_QWORD *)(v16 + 8 * v15))
          {
            *v12 = *v14;
            v17 = 8 * v15;
            *v14 = **(_QWORD **)(v5[51] + v17);
            **(_QWORD **)(v5[51] + v17) = v14;
          }
          else
          {
            *(_QWORD *)(v16 + 8 * v15) = v12;
            v12 = v14;
            v13 = v15;
          }
        }
      }
    }
    v18 = v5[51];
    v19 = *(_QWORD **)(v18 + 8);
    if (v19)
    {
      *(_QWORD *)v9 = *v19;
    }
    else
    {
      *(_QWORD *)v9 = *v11;
      *v11 = v9;
      *(_QWORD *)(v18 + 8) = v11;
      if (!*(_QWORD *)v9)
        goto LABEL_17;
      v19 = (_QWORD *)(v5[51] + 8 * (*(_QWORD *)(*(_QWORD *)v9 + 8) & 1));
    }
    *v19 = v9;
LABEL_17:
    v5[54] = 1;
    v20 = v9 + 24;
    if (v28)
    {
      v21 = (char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v28 + 16))(v28);
      v30 = v21;
      v22 = (char *)*((_QWORD *)v9 + 6);
      if (v21 == (char *)v29)
      {
        if (v22 == v20)
        {
          (*(void (**)(_QWORD *, _QWORD *))(v29[0] + 24))(v29, v31);
          (*(void (**)(char *))(*(_QWORD *)v30 + 32))(v30);
          v30 = 0;
          (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)v9 + 6) + 24))(*((_QWORD *)v9 + 6), v29);
          (*(void (**)(_QWORD))(**((_QWORD **)v9 + 6) + 32))(*((_QWORD *)v9 + 6));
          *((_QWORD *)v9 + 6) = 0;
          v30 = (char *)v29;
          (*(void (**)(_QWORD *, char *))(v31[0] + 24))(v31, v9 + 24);
          (*(void (**)(_QWORD *))(v31[0] + 32))(v31);
          *((_QWORD *)v9 + 6) = v20;
          v23 = v30;
        }
        else
        {
          (*(void (**)(_QWORD *, char *))(v29[0] + 24))(v29, v9 + 24);
          (*(void (**)(char *))(*(_QWORD *)v30 + 32))(v30);
          v23 = (char *)*((_QWORD *)v9 + 6);
          v30 = v23;
          *((_QWORD *)v9 + 6) = v20;
        }
LABEL_28:
        if (v23 == (char *)v29)
        {
          v24 = 4;
          v23 = (char *)v29;
        }
        else
        {
          if (!v23)
            goto LABEL_33;
          v24 = 5;
        }
LABEL_32:
        (*(void (**)(char *))(*(_QWORD *)v23 + 8 * v24))(v23);
LABEL_33:
        v25 = v28;
        if (v28 == v27)
        {
          v26 = 4;
          v25 = v27;
        }
        else
        {
          if (!v28)
          {
LABEL_38:
            gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(v5 + 26, a2, (uint64_t)md::RegistryManager::onEntityCreated, 0);
            gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect<md::RegistryManager,md::RegistryManager>(v5 + 32, a2, (uint64_t)md::RegistryManager::onEntityDeleted, 0);
            gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>((uint64_t)(v5 + 38), a2, (unint64_t)md::RegistryManager::onComponentAdded, 0);
            return gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>,unsigned long>::connect<md::RegistryManager,md::RegistryManager>((uint64_t)(v5 + 44), a2, (unint64_t)md::RegistryManager::onComponentRemoved, 0);
          }
          v26 = 5;
        }
        (*(void (**)(void))(*v25 + 8 * v26))();
        goto LABEL_38;
      }
      if (v22 == v20)
        goto LABEL_24;
    }
    else
    {
      v30 = 0;
      v22 = (char *)*((_QWORD *)v9 + 6);
      if (v22 == v20)
      {
LABEL_24:
        v23 = (char *)v29;
        (*(void (**)(char *, _QWORD *))(*((_QWORD *)v9 + 3) + 24))(v9 + 24, v29);
        (*(void (**)(_QWORD))(**((_QWORD **)v9 + 6) + 32))(*((_QWORD *)v9 + 6));
        *((_QWORD *)v9 + 6) = v30;
        v30 = (char *)v29;
        v24 = 4;
        goto LABEL_32;
      }
      v21 = 0;
    }
    v30 = v22;
    *((_QWORD *)v9 + 6) = v21;
    v23 = v22;
    goto LABEL_28;
  }
  return result;
}

void sub_19F1572A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  gdc::Registry **v12;
  void *v13;
  uint64_t v14;

  operator delete(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](v12);
  _Unwind_Resume(a1);
}

void md::VirtualSubTileHelper::computeScaleAndOffset(uint64_t a1, uint64_t a2, unint64_t a3, int a4, float *a5)
{
  unsigned int v6;
  unsigned int v7;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  double v13;
  int v14;
  double v15;
  double v16;
  float v17;
  long double v18;
  long double v19;
  long double v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  double v25;
  long double v26;
  float v27;
  float64x2_t v28;
  float v29;
  float64x2_t v30;
  float v31;
  double v32;
  __int128 v33;
  __int128 v34;
  double v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  __int128 v43;
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  __int128 v54;
  double v55[12];
  float64x2_t v56;
  double v57;

  v6 = *(unsigned __int8 *)(a2 + 1);
  v7 = (a3 >> 8) & 0x3F;
  if (v7 >= v6)
  {
    v9 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    v9 = 1;
    v10 = 1 << v6;
    v11 = *(int *)(a2 + 8);
    v12 = ~*(_DWORD *)(a2 + 4);
    v47 = 0u;
    v49 = 0;
    v45 = 0u;
    v46 = 0u;
    v48 = 0u;
    v51 = 0;
    v44 = (double)v10;
    *(double *)&v47 = (double)v10;
    v50 = (double)v10;
    v13 = -(double)v10 / (double)v10;
    v52 = v13 * (double)v11;
    v53 = v13 * (double)(v10 + v12);
    v54 = xmmword_19FFB33A0;
    v14 = 1 << v7;
    v15 = (double)(int)((1 << v7) + (~((a3 >> 40) | (a4 << 24)) | 0xFC000000));
    v16 = 1.0 / (double)(1 << v7);
    v36 = 0;
    v38 = 0;
    v40 = 0;
    v37 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = v16;
    v35 = v16;
    v39 = v16;
    v41 = v16 * (double)((a3 >> 14) & 0x3FFFFFF);
    v42 = v16 * v15;
    v43 = xmmword_19FFB33A0;
    gm::operator*<double,4,4,4>(v55, &v44, &v32);
    v17 = (v15 + 0.5) / (double)v14;
    v18 = exp(v17 * 6.28318531 + -3.14159265);
    v19 = atan(v18) * 114.591559 + -90.0;
    v20 = cos(v19 * 0.034906585) * -559.82 + 111132.92;
    v21 = v20 + cos(v19 * 0.0698131701) * 1.175;
    v22 = v21 + cos(v19 * 0.104719755) * -0.0023;
    v23 = v19 * 0.00872664626;
    v24 = tan(v19 * 0.00872664626 + 0.78103484);
    v25 = log(v24);
    v26 = tan(v23 + 0.789761487);
    v27 = fabs((log(v26) - v25) * 0.159154943) / (v22 * (float)(1.0 / (float)v14));
    *a5 = v27;
    v28.f64[0] = v55[5];
    v29 = v55[0];
    v30 = v56;
    v31 = v57;
    *(float *)a1 = v29;
    v28.f64[1] = v55[10];
    *(float32x4_t *)(a1 + 4) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28), v30);
    *(float *)(a1 + 20) = v31;
  }
  *(_BYTE *)(a1 + 24) = v9;
}

uint64_t md::CaptionedIconLabelPart::collidesWithItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  unsigned int v11;
  uint64_t v12;
  float32x2_t *v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 925) && !*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1259))
  {
    v7 = **(_QWORD **)(a1 + 576);
    v8 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 248))(v7);
    v9 = vmul_f32(vsub_f32(v8[1], *v8), (float32x2_t)0x3F0000003F000000);
    v10 = vadd_f32(v9, *v8);
    v16 = v9;
    v17 = v10;
    v18 = 1065353216;
    if (gm::OBRect<float>::intersectsUsingInset((float *)(a2 + 8), (float *)&v16)
      && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 456))(v7, a2, a3)
      && !*(_BYTE *)(*(_QWORD *)(a1 + 16) + 1246))
    {
      return 1;
    }
    v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 576) + 208))(**(_QWORD **)(a1 + 576));
    if (v11 != 255 && !*(_BYTE *)(a1 + v11 + 792))
      *(_BYTE *)(a1 + 953) = 1;
  }
  if (!*(_BYTE *)(a1 + 926) || *(_BYTE *)(a1 + 953))
    return 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 8 * *(unsigned __int8 *)(a1 + 925));
  v13 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 248))(v12);
  v14 = vmul_f32(vsub_f32(v13[1], *v13), (float32x2_t)0x3F0000003F000000);
  v15 = vadd_f32(v14, *v13);
  v16 = v14;
  v17 = v15;
  v18 = 1065353216;
  result = gm::OBRect<float>::intersectsUsingInset((float *)(a2 + 8), (float *)&v16);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 456))(v12, a2, a3);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 955))
        return 1;
      result = 1;
      if (*(_BYTE *)(a1 + 946) == 1)
      {
        *(_BYTE *)(a1 + 953) = 1;
        return 0;
      }
    }
  }
  return result;
}

uint64_t md::LabelPart::collidesWithObject(md::LabelPart *this, const md::CollisionObject *a2)
{
  const md::CollisionObject *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  float32x2_t *v8;
  float v9;
  uint64_t v10;
  float32x2_t *v11;
  float v12;
  float32x2_t v13;
  md::CollisionObject *v14;

  if (!*((_QWORD *)this + 29) && !*((_QWORD *)this + 30) || (*((_BYTE *)a2 + 200) & *((_BYTE *)this + 272)) != 0)
    return 0;
  v3 = (md::LabelPart *)((char *)this + 72);
  v4 = *((_QWORD *)a2 + 21);
  if (!*((_QWORD *)this + 30))
  {
    if (!v4)
    {
      if (*((_BYTE *)this + 268) || *((_BYTE *)a2 + 196))
        return md::CollisionObject::rectsCollideWithRectsOBB((md::LabelPart *)((char *)this + 72), a2);
      else
        return md::CollisionObject::rectsCollideWithRects((md::LabelPart *)((char *)this + 72), a2);
    }
    v14 = a2;
    a2 = v3;
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  if (!v4)
  {
    v14 = (md::LabelPart *)((char *)this + 72);
    return md::CollisionObject::circlesCollideWithRects(v14, a2);
  }
  v5 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v5)
    return 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v6);
    v9 = v8[*((unsigned __int8 *)this + 271) + 1].f32[0];
    if (v9 > 0.0)
    {
      v10 = *((unsigned int *)this + 62);
      if ((_DWORD)v10)
        break;
    }
LABEL_9:
    v7 = ++v6 < v5;
    if (v6 == v5)
      return 0;
  }
  v11 = (float32x2_t *)*((_QWORD *)this + 32);
  while (1)
  {
    v12 = v11[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v12 > 0.0)
    {
      v13 = vsub_f32(*v11, *v8);
      if (vaddv_f32(vmul_f32(v13, v13)) < (float)((float)(v12 + v9) * (float)(v12 + v9)))
        return v7;
    }
    v11 += 3;
    if (!--v10)
      goto LABEL_9;
  }
}

uint64_t md::LabelCollisionItem::collidesWithObject(md::LabelCollisionItem *this, const md::CollisionObject *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 7);
  if (*((_BYTE *)this + 64) == 1)
  {
    v3 = *(_QWORD **)(v2 + 344);
    if (v3)
    {
      v4 = 4;
      return (*(uint64_t (**)(void))(*v3 + 8 * v4))();
    }
  }
  else
  {
    v3 = *(_QWORD **)(v2 + 288);
    if (v3)
    {
      v4 = 58;
      return (*(uint64_t (**)(void))(*v3 + 8 * v4))();
    }
  }
  return 0;
}

uint64_t md::LabelPart::collidesWithItem(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 72);
}

uint64_t md::CaptionedIconLabelPart::collidesWithObject(md::CaptionedIconLabelPart *this, const md::CollisionObject *a2)
{
  uint64_t v5;

  if (*((_BYTE *)this + 925)
    && ((*(uint64_t (**)(_QWORD, const md::CollisionObject *))(***((_QWORD ***)this + 72) + 840))(**((_QWORD **)this + 72), a2) & 1) != 0)
  {
    return 1;
  }
  if (!*((_BYTE *)this + 926) || *((_BYTE *)this + 680))
    return 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 72) + 8 * *((unsigned __int8 *)this + 925));
  return (*(uint64_t (**)(uint64_t, const md::CollisionObject *))(*(_QWORD *)v5 + 840))(v5, a2);
}

uint64_t md::LabelPart::partCollidesWithObject(md::LabelPart *this, const md::CollisionObject *a2)
{
  float *v4;

  v4 = (float *)(*(uint64_t (**)(md::LabelPart *))(*(_QWORD *)this + 248))(this);
  if (v4[2] <= *((float *)a2 + 20)
    || *v4 >= *((float *)a2 + 22)
    || v4[3] <= *((float *)a2 + 21)
    || v4[1] >= *((float *)a2 + 23))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(md::LabelPart *, const md::CollisionObject *))(*(_QWORD *)this + 464))(this, a2);
  }
}

uint64_t md::CollisionObject::circlesCollideWithRects(md::CollisionObject *this, const md::CollisionObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  float32x2_t *v6;
  float32x2_t v7;
  unint64_t v9;
  unint64_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  BOOL v13;
  BOOL v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;

  v2 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = *((unsigned int *)this + 44);
  v5 = *((_DWORD *)this + 44);
  while (!v5)
  {
LABEL_4:
    if (++v3 == v2)
      return 0;
  }
  v6 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v3);
  v7 = v6[*((unsigned __int8 *)this + 199) + 1];
  if (v7.f32[1] < 0.0 || v7.f32[0] < 0.0)
  {
    v9 = 0;
    do
      ++v9;
    while (v9 < v4);
LABEL_3:
    v5 = *((_DWORD *)this + 44);
    goto LABEL_4;
  }
  v10 = 0;
  v11 = (float32x2_t *)*((_QWORD *)this + 23);
  while (1)
  {
    v15 = v11[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v15 > 0.0)
    {
      v16 = vsub_f32(*v11, *v6);
      if (*((_BYTE *)a2 + 196))
      {
        v17 = vmul_n_f32(v16, *((float *)a2 + 4));
        v18 = vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v16), *((float *)a2 + 5));
        v16.i32[0] = vadd_f32(v17, v18).u32[0];
        v16.i32[1] = vsub_f32(v17, v18).i32[1];
      }
      v12 = vmaxnm_f32(vsub_f32(v16, v7), vneg_f32(vadd_f32(v7, v16)));
      v13 = v15 != 0.0 && v12.f32[0] < v15;
      v14 = v13 && v12.f32[1] < v15;
      if (v14 && (v12.f32[0] <= 0.0 || v12.f32[1] <= 0.0 || vaddv_f32(vmul_f32(v12, v12)) < (float)(v15 * v15)))
        return 1;
    }
    ++v10;
    v11 += 3;
    if (v10 >= v4)
      goto LABEL_3;
  }
}

BOOL md::CollisionObject::circlesCollideWithCircles(md::CollisionObject *this, const md::CollisionObject *a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  float32x2_t *v5;
  float v6;
  uint64_t v7;
  float32x2_t *v8;
  float v9;
  float32x2_t v10;

  v2 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = 1;
  while (1)
  {
    v5 = (float32x2_t *)(*((_QWORD *)a2 + 23) + 24 * v3);
    v6 = v5[*((unsigned __int8 *)this + 199) + 1].f32[0];
    if (v6 > 0.0)
    {
      v7 = *((unsigned int *)this + 44);
      if ((_DWORD)v7)
        break;
    }
LABEL_3:
    v4 = ++v3 < v2;
    if (v3 == v2)
      return 0;
  }
  v8 = (float32x2_t *)*((_QWORD *)this + 23);
  while (1)
  {
    v9 = v8[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v9 > 0.0)
    {
      v10 = vsub_f32(*v8, *v5);
      if (vaddv_f32(vmul_f32(v10, v10)) < (float)((float)(v9 + v6) * (float)(v9 + v6)))
        return v4;
    }
    v8 += 3;
    if (!--v7)
      goto LABEL_3;
  }
}

uint64_t md::LabelPart::alternateStyleIndex(md::LabelPart *this)
{
  return 255;
}

BOOL md::CollisionObject::rectsCollideWithRects(md::CollisionObject *this, const md::CollisionObject *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  BOOL v9;
  float *v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;

  v2 = *((unsigned int *)a2 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *((unsigned int *)this + 44);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = *((unsigned __int8 *)this + 199);
  v6 = *((_QWORD *)a2 + 23);
  v7 = (float *)*((_QWORD *)this + 23);
  v8 = 2 * *((unsigned __int8 *)a2 + 199);
  v9 = 1;
LABEL_5:
  v10 = (float *)(v6 + 24 * v4);
  v11 = &v10[2 * v5];
  v13 = v11[2];
  v12 = v11 + 2;
  v14 = v13;
  v15 = v7;
  v16 = v3;
  while (vabds_f32(*v15, *v10) >= (float)(v14 + v15[v8 + 2])
       || vabds_f32(v15[1], v10[1]) >= (float)(v12[1] + v15[v8 + 3]))
  {
    v15 += 6;
    if (!--v16)
    {
      v9 = ++v4 < v2;
      if (v4 == v2)
        return 0;
      goto LABEL_5;
    }
  }
  return v9;
}

void sub_19F157D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void gdc::ResourceFetcher::cancelledLoad(unsigned __int16 **this, void *a2, const gdc::ResourceKey *a3)
{
  uint64_t v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  _BYTE *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  uint64_t v62;
  void *__p;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  uint64_t v68;
  __int128 v69;
  void *v70[4];
  __int128 v71;
  uint64_t v72;
  uint8_t buf[4];
  void **v74;
  __int16 v75;
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[](this + 2, *((_WORD *)a3 + 1));
  std::mutex::lock((std::mutex *)(v5 + 128));
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v6 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str((std::string *)&__p, (unsigned __int8 *)a3);
    v7 = (SBYTE7(v65) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315394;
    v74 = v7;
    v75 = 2048;
    v76 = a2;
    _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_DEBUG, "Resource Cancelled: %s, rid: %llu", buf, 0x16u);
    if (SBYTE7(v65) < 0)
      operator delete(__p);
  }
  v8 = *(_QWORD *)a3;
  v9 = (char *)*((_QWORD *)a3 + 1);
  __p = a2;
  v64 = v8;
  v10 = v67;
  *(_QWORD *)&v65 = v67;
  *((_QWORD *)&v65 + 1) = v67;
  *(_QWORD *)&v66 = v67;
  *((_QWORD *)&v66 + 1) = 32;
  v11 = (char *)*((_QWORD *)a3 + 2);
  v12 = v11 - v9;
  if ((unint64_t)(v11 - v9) >= 0x21)
  {
    if (v12 <= 0x40)
      v13 = 64;
    else
      v13 = v11 - v9;
    v10 = malloc_type_malloc(v13, 0x100004077774924uLL);
    v15 = (char *)*((_QWORD *)&v65 + 1);
    v14 = (char *)v65;
    if ((_QWORD)v65 == *((_QWORD *)&v65 + 1))
      goto LABEL_29;
    v16 = *((_QWORD *)&v65 + 1) - v65;
    if (*((_QWORD *)&v65 + 1) - (_QWORD)v65 < 8uLL)
    {
      v17 = v10;
      goto LABEL_28;
    }
    v17 = v10;
    if ((unint64_t)&v10[-v65] < 0x20)
      goto LABEL_28;
    if (v16 >= 0x20)
    {
      v18 = v16 & 0xFFFFFFFFFFFFFFE0;
      v19 = (__int128 *)(v65 + 16);
      v20 = v10 + 16;
      v21 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v16 == v18)
        goto LABEL_29;
      if ((v16 & 0x18) == 0)
      {
        v14 += v18;
        v17 = &v10[v18];
        goto LABEL_28;
      }
    }
    else
    {
      v18 = 0;
    }
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    v17 = &v10[v16 & 0xFFFFFFFFFFFFFFF8];
    v24 = v18 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v25 = (uint64_t *)&v14[v18];
    v26 = &v10[v18];
    do
    {
      v27 = *v25++;
      *v26++ = v27;
      v24 += 8;
    }
    while (v24);
    if (v16 == v23)
      goto LABEL_29;
    v14 += v23;
    do
    {
LABEL_28:
      v28 = *v14++;
      *v17++ = v28;
    }
    while (v14 != v15);
LABEL_29:
    *(_QWORD *)&v65 = v10;
    *((_QWORD *)&v65 + 1) = v10;
    *((_QWORD *)&v66 + 1) = v13;
  }
  if (v9 == v11)
    goto LABEL_48;
  if (v12 < 8)
  {
    v30 = v10;
    goto LABEL_46;
  }
  if ((unint64_t)(v10 - v9) < 0x20)
  {
    v30 = v10;
    goto LABEL_46;
  }
  if (v12 >= 0x20)
  {
    v29 = v12 & 0xFFFFFFFFFFFFFFE0;
    v31 = (__int128 *)(v9 + 16);
    v32 = v10 + 16;
    v33 = v12 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v34 = *v31;
      *(v32 - 1) = *(v31 - 1);
      *v32 = v34;
      v31 += 2;
      v32 += 2;
      v33 -= 32;
    }
    while (v33);
    if (v12 == v29)
      goto LABEL_47;
    if ((v12 & 0x18) == 0)
    {
      v9 += v29;
      v30 = &v10[v29];
      goto LABEL_46;
    }
  }
  else
  {
    v29 = 0;
  }
  v35 = v12 & 0xFFFFFFFFFFFFFFF8;
  v30 = &v10[v12 & 0xFFFFFFFFFFFFFFF8];
  v36 = v29 - (v12 & 0xFFFFFFFFFFFFFFF8);
  v37 = (uint64_t *)&v9[v29];
  v38 = &v10[v29];
  do
  {
    v39 = *v37++;
    *v38++ = v39;
    v36 += 8;
  }
  while (v36);
  if (v12 == v35)
    goto LABEL_47;
  v9 += v35;
  do
  {
LABEL_46:
    v40 = *v9++;
    *v30++ = v40;
  }
  while (v9 != v11);
LABEL_47:
  v10 = (_BYTE *)*((_QWORD *)&v65 + 1);
LABEL_48:
  v41 = *((_QWORD *)a3 + 9);
  *((_QWORD *)&v65 + 1) = &v10[v12];
  v68 = v41;
  v69 = *((_OWORD *)a3 + 5);
  memset(v70, 0, sizeof(v70));
  v71 = 0u;
  v72 = 0;
  v42 = *(_QWORD *)(v5 + 248);
  if (v42 < *(_QWORD *)(v5 + 256))
  {
    *(_QWORD *)v42 = __p;
    v43 = (_BYTE *)(v42 + 48);
    *(_QWORD *)(v42 + 8) = v64;
    *(_QWORD *)(v42 + 16) = v42 + 48;
    *(_QWORD *)(v42 + 24) = v42 + 48;
    *(_QWORD *)(v42 + 32) = v42 + 48;
    v44 = v66;
    *(_QWORD *)(v42 + 40) = *((_QWORD *)&v66 + 1);
    v45 = (char *)v65;
    if ((_QWORD)v65 != v44)
    {
      *(_OWORD *)(v42 + 16) = v65;
      v65 = 0uLL;
      v66 = 0uLL;
LABEL_68:
      *(_QWORD *)(v42 + 80) = v68;
      *(_OWORD *)(v42 + 88) = v69;
      *(void **)(v42 + 104) = v70[0];
      v61 = *(_OWORD *)&v70[1];
      *(void **)(v42 + 128) = v70[3];
      *(_OWORD *)(v42 + 112) = v61;
      v70[1] = 0;
      v70[2] = 0;
      v62 = v72;
      *(_OWORD *)(v42 + 136) = v71;
      *(_QWORD *)(v42 + 152) = v62;
      v70[3] = 0;
      v71 = 0uLL;
      v72 = 0;
      *(_QWORD *)(v5 + 248) = v42 + 160;
      goto LABEL_69;
    }
    *(_QWORD *)(v42 + 24) = &v43[*((_QWORD *)&v65 + 1) - v65];
    v48 = (char *)*((_QWORD *)&v65 + 1);
    if (v45 == *((char **)&v65 + 1))
      goto LABEL_68;
    v49 = *((_QWORD *)&v65 + 1) - (_QWORD)v45;
    if (*((_QWORD *)&v65 + 1) - (_QWORD)v45 >= 8uLL && v42 - (unint64_t)v45 + 48 >= 0x20)
    {
      if (v49 < 0x20)
      {
        v50 = 0;
LABEL_62:
        v55 = v49 & 0xFFFFFFFFFFFFFFF8;
        v43 += v49 & 0xFFFFFFFFFFFFFFF8;
        v56 = v50 - (v49 & 0xFFFFFFFFFFFFFFF8);
        v57 = (uint64_t *)&v45[v50];
        v58 = (_QWORD *)(v50 + v42 + 48);
        do
        {
          v59 = *v57++;
          *v58++ = v59;
          v56 += 8;
        }
        while (v56);
        if (v49 == v55)
          goto LABEL_68;
        v45 += v55;
        goto LABEL_67;
      }
      v50 = v49 & 0xFFFFFFFFFFFFFFE0;
      v51 = (__int128 *)(v45 + 16);
      v52 = (_OWORD *)(v42 + 64);
      v53 = v49 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v54 = *v51;
        *(v52 - 1) = *(v51 - 1);
        *v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 32;
      }
      while (v53);
      if (v49 == v50)
        goto LABEL_68;
      if ((v49 & 0x18) != 0)
        goto LABEL_62;
      v45 += v50;
      v43 += v50;
    }
    do
    {
LABEL_67:
      v60 = *v45++;
      *v43++ = v60;
    }
    while (v45 != v48);
    goto LABEL_68;
  }
  v46 = std::vector<gdc::ResourceRequest>::__push_back_slow_path<gdc::ResourceRequest>((void ***)(v5 + 240), (uint64_t)&__p);
  v47 = SHIBYTE(v72);
  *(_QWORD *)(v5 + 248) = v46;
  if (v47 < 0)
    operator delete((void *)v71);
LABEL_69:
  if (SHIBYTE(v70[3]) < 0)
    operator delete(v70[1]);
  if ((_QWORD)v65 != (_QWORD)v66)
    free((void *)v65);
  std::mutex::unlock((std::mutex *)(v5 + 128));
}

void ___ZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  std::__shared_weak_count *v18;
  id v19;
  _BYTE *v20;
  uint64_t (***v21)();
  uint64_t (***v22)();
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint8_t *v32;
  uint64_t v33;
  char v34;
  void *v35;
  void *v36;
  char v37;
  unsigned __int8 v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unsigned __int8 v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  char *v51;
  id v52;
  const char *v53;
  size_t v54;
  size_t v55;
  void *p_dst;
  NSObject *v57;
  NSObject *v58;
  _QWORD *v59;
  os_signpost_id_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  unint64_t v74;
  uint64_t (***v75)();
  uint64_t v76;
  NSObject *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  id v81;
  void *v82;
  id v83;
  unint64_t *v84;
  id v85;
  id v86;
  _QWORD *v87;
  uint8_t buf[8];
  std::__shared_weak_count *v89;
  char v90;
  uint64_t (**v91)();
  void *v92;
  uint64_t (***v93)();
  _BYTE *v94;
  void *v95;
  _BYTE v96[16];
  _QWORD v97[3];
  __int128 v98;
  id v99;
  _QWORD v100[3];
  _QWORD *v101;
  uint64_t (**v102)();
  _QWORD *v103;
  uint64_t (***v104)();
  __int128 __dst;
  unint64_t v106;
  uint64_t (**v107)();
  uint64_t (***v108)();
  uint64_t (***v109)();
  uint64_t (***v110)();
  void *v111;
  char v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v85 = a3;
  v10 = a5;
  v86 = a6;
  v87 = a1;
  v84 = (unint64_t *)a1[5];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v11 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v12 = v11;
  v13 = a1[16];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v12, OS_SIGNPOST_INTERVAL_END, v13, "ResourceFetch", (const char *)&unk_1A0189141, buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0D273F0], "sharedReachability");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    objc_msgSend(v14, "reportLoadFailure:", v10);
  else
    objc_msgSend(v14, "reportTileLoadSuccess:", v86);

  if (v85)
  {
    objc_msgSend(v85, "decodedRepresentation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
    {
      v83 = v15;
    }
    else
    {
      v99 = v10;
      objc_msgSend(v85, "readDataWithError:", &v99);
      v83 = (id)objc_claimAutoreleasedReturnValue();
      v17 = v99;

      v10 = v17;
    }

  }
  else
  {
    v83 = 0;
  }
  v18 = (std::__shared_weak_count *)operator new(0x38uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DE110;
  v19 = v83;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B0670;
  v18[1].__shared_owners_ = (uint64_t)&off_1E42B5310;
  v18[1].__shared_weak_owners_ = (uint64_t)v19;
  v81 = v19;
  *(_QWORD *)buf = v18 + 1;
  v89 = v18;
  gdc::ResourceKey::ResourceKey((uint64_t)&v107, 0xFFFF, a2, 0x10uLL, 0, 2147483646);
  v90 = 1;
  v20 = v96;
  v21 = v108;
  v91 = v107;
  v92 = v96;
  v94 = v96;
  v95 = v111;
  if (v108 != v110)
  {
    v92 = v108;
    v93 = v109;
    goto LABEL_32;
  }
  v22 = v109;
  v23 = (char *)v109 - (char *)v108;
  v93 = (uint64_t (***)())&v96[(char *)v109 - (char *)v108];
  if (v109 != v108)
  {
    if (v23 >= 8 && (unint64_t)(buf - (uint8_t *)v108 + 64) >= 0x20)
    {
      if (v23 < 0x20)
      {
        v24 = 0;
LABEL_26:
        v29 = v23 & 0xFFFFFFFFFFFFFFF8;
        v20 = &v96[v23 & 0xFFFFFFFFFFFFFFF8];
        v30 = v24 - (v23 & 0xFFFFFFFFFFFFFFF8);
        v31 = (uint64_t *)((char *)v21 + v24);
        v32 = &buf[v24 + 64];
        do
        {
          v33 = *v31++;
          *(_QWORD *)v32 = v33;
          v32 += 8;
          v30 += 8;
        }
        while (v30);
        if (v23 == v29)
          goto LABEL_32;
        v21 = (uint64_t (***)())((char *)v21 + v29);
        goto LABEL_31;
      }
      v24 = v23 & 0xFFFFFFFFFFFFFFE0;
      v25 = (__int128 *)(v108 + 2);
      v26 = v97;
      v27 = v23 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 32;
      }
      while (v27);
      if (v23 == v24)
        goto LABEL_32;
      if ((v23 & 0x18) != 0)
        goto LABEL_26;
      v21 = (uint64_t (***)())((char *)v21 + v24);
      v20 = &v96[v24];
    }
    do
    {
LABEL_31:
      v34 = *(_BYTE *)v21;
      v21 = (uint64_t (***)())((char *)v21 + 1);
      *v20++ = v34;
    }
    while (v21 != v22);
  }
LABEL_32:
  v97[2] = v113;
  v98 = v114;
  objc_msgSend(v86, "objectForKey:", *MEMORY[0x1E0D26BF0], v81);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v35;
  if (v35)
  {
    v37 = objc_msgSend(v35, "unsignedIntValue");
    if ((v37 + 1) >= 7u)
      v38 = 0;
    else
      v38 = 0x2040302010002uLL >> (8 * (v37 + 1));
  }
  else
  {
    v38 = 0;
  }

  objc_msgSend(v86, "objectForKey:", *MEMORY[0x1E0D26BF8]);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v39;
  if (v39)
  {
    v41 = objc_msgSend(v39, "unsignedIntValue");
    if (v41 >= 3)
      v42 = 0;
    else
      v42 = 0x30102u >> (8 * v41);
  }
  else
  {
    v42 = 0;
  }

  v43 = a1 + 6;
  if (!v10)
  {
    v102 = &off_1E42DA208;
    v103 = a1 + 6;
    v104 = &v102;
    v100[0] = &off_1E42DA250;
    v100[1] = a1 + 6;
    v101 = v100;
    v110 = &v107;
    v107 = &off_1E42DA250;
    v108 = (uint64_t (***)())(a1 + 6);
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v57 = (id)GEOGetVectorKitResourceLoadingLog_log;
    v58 = v57;
    v59 = v103;
    v60 = v103[10];
    if (v60 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v57))
    {
      v61 = v59[11];
      LODWORD(__dst) = 134217984;
      *(_QWORD *)((char *)&__dst + 4) = v61;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v58, OS_SIGNPOST_INTERVAL_BEGIN, v60, "CreateResource", "parent_signpost=%llu", (uint8_t *)&__dst, 0xCu);
    }

    v62 = v101;
    if (v101 == v100)
    {
      v63 = 4;
      v62 = v100;
    }
    else
    {
      if (!v101)
        goto LABEL_75;
      v63 = 5;
    }
    (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_75:
    v68 = v104;
    if (v104 == &v102)
    {
      v69 = 4;
      v68 = &v102;
    }
    else
    {
      if (!v104)
        goto LABEL_80;
      v69 = 5;
    }
    (*v68)[v69]();
LABEL_80:
    if (((*(uint64_t (**)(unint64_t *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, uint8_t *))(*v84 + 128))(v84, v87[18], v43, v38, v42, 0, 0, buf) & 1) != 0)
    {
      v70 = 0;
    }
    else
    {
      v71 = (void *)MEMORY[0x1E0CB35C8];
      GEOErrorDomain();
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "errorWithDomain:code:userInfo:", v72, -11, 0);
      v70 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v73 = v70;
    v74 = atomic_load(v84 + 13);
    if (v74)
      (*(void (**)(unint64_t, id))(*(_QWORD *)v74 + 24))(v74, v73);

    if (!v110)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    ((void (*)(uint64_t (***)()))(*v110)[6])(v110);
    v75 = v110;
    if (v110 == &v107)
    {
      v76 = 4;
      v75 = &v107;
    }
    else
    {
      if (!v110)
      {
LABEL_91:

        goto LABEL_92;
      }
      v76 = 5;
    }
    (*v75)[v76]();
    goto LABEL_91;
  }
  if (objc_msgSend(v10, "code") == -2)
  {
    objc_msgSend(v10, "domain");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    GEOErrorDomain();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend(v44, "isEqualToString:", v45);

    if (v46)
    {
      (*(void (**)(unint64_t *, _QWORD, _QWORD *))(*v84 + 120))(v84, a1[18], v43);
      v47 = atomic_load(v84 + 13);
      if (v47)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v47 + 24))(v47, 0);
      goto LABEL_92;
    }
  }
  objc_msgSend(MEMORY[0x1E0D273F0], "sharedReachability");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "reportLoadFailure:", v10);

  v49 = objc_msgSend(v10, "code");
  objc_msgSend(v10, "domain");
  v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v51 = (char *)objc_msgSend(v50, "UTF8String");
  objc_msgSend(v10, "description");
  v52 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v53 = (const char *)objc_msgSend(v52, "UTF8String");
  v54 = strlen(v53);
  if (v54 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v55 = v54;
  if (v54 >= 0x17)
  {
    v64 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v64 = v54 | 7;
    v65 = v64 + 1;
    p_dst = operator new(v64 + 1);
    *((_QWORD *)&__dst + 1) = v55;
    v106 = v65 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_63;
  }
  HIBYTE(v106) = v54;
  p_dst = &__dst;
  if (v54)
LABEL_63:
    memmove(p_dst, v53, v55);
  *((_BYTE *)p_dst + v55) = 0;
  gdc::Error::Error((uint64_t)&v107, v49, v51, &__dst);
  if (SHIBYTE(v106) < 0)
    operator delete((void *)__dst);

  (*(void (**)(unint64_t *, _QWORD, _QWORD *, uint64_t (***)()))(*v84 + 112))(v84, v87[18], v43, &v107);
  v66 = v10;
  v67 = atomic_load(v84 + 13);
  if (v67)
    (*(void (**)(unint64_t, id))(*(_QWORD *)v67 + 24))(v67, v66);

  if (v112 < 0)
  {
    operator delete(v111);
    if (SHIBYTE(v110) < 0)
LABEL_72:
      operator delete(v108);
  }
  else if (SHIBYTE(v110) < 0)
  {
    goto LABEL_72;
  }
LABEL_92:
  v77 = v87[4];
  if (v77)
    dispatch_semaphore_signal(v77);
  if (v90)
  {
    if (v92 != v94)
      free(v92);
    v90 = 0;
  }
  v78 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }

}

void sub_19F158B34(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)va);

  _Unwind_Resume(a1);
}

void ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  NSObject *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  NSObject *v14;
  std::string *v15;
  std::string::size_type v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  id v21;
  _BYTE *v22;
  char *size;
  char *v24;
  std::string::size_type v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  std::string::size_type v32;
  std::string::size_type *v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  void *v37;
  void *v38;
  char v39;
  unsigned __int8 v40;
  void *v41;
  void *v42;
  unsigned int v43;
  unsigned __int8 v44;
  void *v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int v52;
  NSObject *v53;
  std::string *v54;
  uint64_t v55;
  unint64_t v56;
  NSObject *v57;
  std::string *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  char *v63;
  id v64;
  const char *v65;
  size_t v66;
  size_t v67;
  _BYTE *v68;
  void *v69;
  NSObject *v70;
  std::string *v71;
  uint64_t v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD *v75;
  os_signpost_id_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t (***v85)();
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  id v90;
  unint64_t v91;
  std::string *v92;
  uint64_t v93;
  NSObject *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  id v98;
  void *v99;
  id v100;
  unint64_t *v101;
  id v102;
  unsigned __int8 *v103;
  id v104;
  std::string buf;
  std::string::size_type v106;
  __int128 v107;
  _BYTE *v108;
  void *v109;
  _BYTE v110[16];
  _QWORD v111[3];
  __int128 v112;
  id v113;
  _QWORD v114[3];
  _QWORD *v115;
  uint64_t (**v116)();
  _QWORD *v117;
  uint64_t (***v118)();
  _BYTE __dst[24];
  std::string v120;
  std::string *v121;
  void *v122;
  char v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v102 = a3;
  v10 = a5;
  v104 = a6;
  v101 = (unint64_t *)a1[5];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v11 = (id)GEOGetVectorKitResourceLoadingLog_log;
  v12 = v11;
  v13 = a1[16];
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v12, OS_SIGNPOST_INTERVAL_END, v13, "ResourceFetch", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  v103 = (unsigned __int8 *)(a1 + 6);
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v14 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&buf, v103);
    v15 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    v16 = a1[18];
    LODWORD(v120.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v120.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v120.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v120.__r_.__value_.__r.__words[1] + 6) = v16;
    _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher done fetching resource: %s, %llu", (uint8_t *)&v120, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  if (v102)
  {
    objc_msgSend(v102, "decodedRepresentation");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17)
    {
      v100 = v17;
    }
    else
    {
      v113 = v10;
      objc_msgSend(v102, "readDataWithError:", &v113);
      v100 = (id)objc_claimAutoreleasedReturnValue();
      v19 = v113;

      v10 = v19;
    }

  }
  else
  {
    v100 = 0;
  }
  v20 = operator new(0x38uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = &off_1E42DE110;
  v21 = v100;
  v20[3] = &off_1E42B0670;
  v20[4] = &off_1E42B5310;
  v20[5] = v21;
  v98 = v21;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 3);
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  gdc::ResourceKey::ResourceKey((uint64_t)&v120, 0xFFFF, a2, 0x10uLL, 0, 2147483646);
  buf.__r_.__value_.__s.__data_[16] = 1;
  v22 = v110;
  size = (char *)v120.__r_.__value_.__l.__size_;
  v106 = v120.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v107 = v110;
  v108 = v110;
  v109 = v122;
  if ((std::string *)v120.__r_.__value_.__l.__size_ != v121)
  {
    v107 = *(_OWORD *)&v120.__r_.__value_.__r.__words[1];
    goto LABEL_37;
  }
  v24 = (char *)v120.__r_.__value_.__r.__words[2];
  v25 = v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__l.__size_;
  *((_QWORD *)&v107 + 1) = &v110[v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__l.__size_];
  if (v120.__r_.__value_.__r.__words[2] != v120.__r_.__value_.__l.__size_)
  {
    if (v25 >= 8 && (unint64_t)&buf - v120.__r_.__value_.__l.__size_ + 64 >= 0x20)
    {
      if (v25 < 0x20)
      {
        v26 = 0;
LABEL_31:
        v31 = v25 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v110[v25 & 0xFFFFFFFFFFFFFFF8];
        v32 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
        v33 = (std::string::size_type *)&size[v26];
        v34 = (std::string *)((char *)&buf + v26 + 64);
        do
        {
          v35 = *v33++;
          v34->__r_.__value_.__r.__words[0] = v35;
          v34 = (std::string *)((char *)v34 + 8);
          v32 += 8;
        }
        while (v32);
        if (v25 == v31)
          goto LABEL_37;
        size += v31;
        goto LABEL_36;
      }
      v26 = v25 & 0xFFFFFFFFFFFFFFE0;
      v27 = (__int128 *)(v120.__r_.__value_.__l.__size_ + 16);
      v28 = v111;
      v29 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v30 = *v27;
        *(v28 - 1) = *(v27 - 1);
        *v28 = v30;
        v27 += 2;
        v28 += 2;
        v29 -= 32;
      }
      while (v29);
      if (v25 == v26)
        goto LABEL_37;
      if ((v25 & 0x18) != 0)
        goto LABEL_31;
      size += v26;
      v22 = &v110[v26];
    }
    do
    {
LABEL_36:
      v36 = *size++;
      *v22++ = v36;
    }
    while (size != v24);
  }
LABEL_37:
  v111[2] = v124;
  v112 = v125;
  objc_msgSend(v104, "objectForKey:", *MEMORY[0x1E0D26BF0], v98);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v37;
  if (v37)
  {
    v39 = objc_msgSend(v37, "unsignedIntValue");
    if ((v39 + 1) >= 7u)
      v40 = 0;
    else
      v40 = 0x2040302010002uLL >> (8 * (v39 + 1));
  }
  else
  {
    v40 = 0;
  }

  objc_msgSend(v104, "objectForKey:", *MEMORY[0x1E0D26BF8]);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v41;
  if (v41)
  {
    v43 = objc_msgSend(v41, "unsignedIntValue");
    if (v43 >= 3)
      v44 = 0;
    else
      v44 = 0x30102u >> (8 * v43);
  }
  else
  {
    v44 = 0;
  }

  objc_msgSend(v104, "objectForKey:", *MEMORY[0x1E0D26BE8]);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v45;
  if (v45)
  {
    v47 = objc_msgSend(v45, "unsignedIntValue");
    v48 = (1000 * v47) & 0xFFFFFF00;
    v49 = (1000 * v47) & 0xF8;
  }
  else
  {
    v49 = 0;
    v48 = 0;
  }

  if (!v10)
  {
    objc_msgSend(MEMORY[0x1E0D273F0], "sharedReachability");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "reportTileLoadSuccess:", v104);

    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v70 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&v120, v103);
      v71 = (v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v120
          : (std::string *)v120.__r_.__value_.__r.__words[0];
      v72 = a1[18];
      *(_DWORD *)__dst = 136315394;
      *(_QWORD *)&__dst[4] = v71;
      *(_WORD *)&__dst[12] = 2048;
      *(_QWORD *)&__dst[14] = v72;
      _os_log_impl(&dword_19F029000, v70, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher creating resource: %s, %llu", __dst, 0x16u);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
    }

    v116 = &off_1E42DA0A0;
    v117 = a1 + 6;
    v118 = &v116;
    v114[0] = &off_1E42DA0E8;
    v114[1] = a1 + 6;
    v115 = v114;
    v121 = &v120;
    v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42DA0E8;
    v120.__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 6);
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v73 = (id)GEOGetVectorKitResourceLoadingLog_log;
    v74 = v73;
    v75 = v117;
    v76 = v117[10];
    if (v76 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v73))
    {
      v77 = v75[11];
      *(_DWORD *)__dst = 134217984;
      *(_QWORD *)&__dst[4] = v77;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v74, OS_SIGNPOST_INTERVAL_BEGIN, v76, "CreateResource", "parent_signpost=%llu", __dst, 0xCu);
    }

    v78 = v115;
    if (v115 == v114)
    {
      v79 = 4;
      v78 = v114;
    }
    else
    {
      if (!v115)
        goto LABEL_107;
      v79 = 5;
    }
    (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_107:
    v84 = v48 | v49;
    v85 = v118;
    if (v118 == &v116)
    {
      v86 = 4;
      v85 = &v116;
    }
    else
    {
      if (!v118)
        goto LABEL_112;
      v86 = 5;
    }
    (*v85)[v86]();
LABEL_112:
    if (!v46)
      v84 = a1[19];
    if (((*(uint64_t (**)(unint64_t *, _QWORD, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD, std::string *))(*v101 + 128))(v101, a1[18], v103, v40, v44, v84, 0, &buf) & 1) != 0)
    {
      v87 = 0;
    }
    else
    {
      v88 = (void *)MEMORY[0x1E0CB35C8];
      GEOErrorDomain();
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "errorWithDomain:code:userInfo:", v89, -11, 0);
      v87 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v90 = v87;
    v91 = atomic_load(v101 + 13);
    if (v91)
      (*(void (**)(unint64_t, id))(*(_QWORD *)v91 + 24))(v91, v90);

    if (!v121)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(std::string *))(v121->__r_.__value_.__r.__words[0] + 48))(v121);
    v92 = v121;
    if (v121 == &v120)
    {
      v93 = 4;
      v92 = &v120;
    }
    else
    {
      if (!v121)
      {
LABEL_125:

        goto LABEL_126;
      }
      v93 = 5;
    }
    (*(void (**)(void))(v92->__r_.__value_.__r.__words[0] + 8 * v93))();
    goto LABEL_125;
  }
  if (objc_msgSend(v10, "code") == -2)
  {
    objc_msgSend(v10, "domain");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    GEOErrorDomain();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend(v50, "isEqualToString:", v51);

    if (v52)
    {
      if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
      v53 = (id)GEOGetVectorKitResourceLoadingLog_log;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&v120, v103);
        v54 = (v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v120
            : (std::string *)v120.__r_.__value_.__r.__words[0];
        v55 = a1[18];
        *(_DWORD *)__dst = 136315394;
        *(_QWORD *)&__dst[4] = v54;
        *(_WORD *)&__dst[12] = 2048;
        *(_QWORD *)&__dst[14] = v55;
        _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher received cancelled resource: %s, %llu", __dst, 0x16u);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
      }

      (*(void (**)(unint64_t *, _QWORD, unsigned __int8 *))(*v101 + 120))(v101, a1[18], v103);
      v56 = atomic_load(v101 + 13);
      if (v56)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v56 + 24))(v56, 0);
      goto LABEL_126;
    }
  }
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v57 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
  {
    gdc::ResourceKey::keysInt32Str(&v120, v103);
    v58 = (v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v120
        : (std::string *)v120.__r_.__value_.__r.__words[0];
    v59 = a1[18];
    *(_DWORD *)__dst = 136315394;
    *(_QWORD *)&__dst[4] = v58;
    *(_WORD *)&__dst[12] = 2048;
    *(_QWORD *)&__dst[14] = v59;
    _os_log_impl(&dword_19F029000, v57, OS_LOG_TYPE_ERROR, "TiledGEOResourceFetcher received failed Resource: %s, %llu", __dst, 0x16u);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
  }

  objc_msgSend(MEMORY[0x1E0D273F0], "sharedReachability");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "reportLoadFailure:", v10);

  v61 = objc_msgSend(v10, "code");
  objc_msgSend(v10, "domain");
  v62 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v63 = (char *)objc_msgSend(v62, "UTF8String");
  objc_msgSend(v10, "description");
  v64 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v65 = (const char *)objc_msgSend(v64, "UTF8String");
  v66 = strlen(v65);
  if (v66 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v67 = v66;
  if (v66 >= 0x17)
  {
    v80 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v80 = v66 | 7;
    v81 = v80 + 1;
    v68 = operator new(v80 + 1);
    *(_QWORD *)&__dst[8] = v67;
    *(_QWORD *)&__dst[16] = v81 | 0x8000000000000000;
    *(_QWORD *)__dst = v68;
    goto LABEL_95;
  }
  __dst[23] = v66;
  v68 = __dst;
  if (v66)
LABEL_95:
    memmove(v68, v65, v67);
  v68[v67] = 0;
  gdc::Error::Error((uint64_t)&v120, v61, v63, (__int128 *)__dst);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);

  (*(void (**)(unint64_t *, _QWORD, unsigned __int8 *, std::string *))(*v101 + 112))(v101, a1[18], v103, &v120);
  v82 = v10;
  v83 = atomic_load(v101 + 13);
  if (v83)
    (*(void (**)(unint64_t, id))(*(_QWORD *)v83 + 24))(v83, v82);

  if (v123 < 0)
  {
    operator delete(v122);
    if (SHIBYTE(v121) < 0)
LABEL_104:
      operator delete((void *)v120.__r_.__value_.__l.__size_);
  }
  else if (SHIBYTE(v121) < 0)
  {
    goto LABEL_104;
  }
LABEL_126:
  v94 = a1[4];
  if (v94)
    dispatch_semaphore_signal(v94);
  if (buf.__r_.__value_.__s.__data_[16])
  {
    if ((_BYTE *)v107 != v108)
      free((void *)v107);
    buf.__r_.__value_.__s.__data_[16] = 0;
  }
  v95 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v96 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }

}

void sub_19F159868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  gdc::RawResourceSourceData::~RawResourceSourceData((gdc::RawResourceSourceData *)&a15);

  _Unwind_Resume(a1);
}

void gdc::LoadingStatusTracker::didFinishLoadingResources(gdc::LoadingStatusTracker *this, NSError *a2)
{
  NSError *v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint8_t v10[8];
  id v11;

  v4 = a2;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (v4 && *((NSError **)this + 10) != v4)
    objc_storeStrong((id *)this + 10, a2);
  v5 = *((_DWORD *)this + 18);
  if (v5 <= 1)
    v5 = 1;
  v6 = v5 - 1;
  *((_DWORD *)this + 18) = v6;
  if (v6)
    goto LABEL_14;
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v7 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_signpost_enabled(v7))
  {
    *(_WORD *)v10 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LoadingResources", (const char *)&unk_1A0189141, v10, 2u);
  }

  if (!*((_QWORD *)this + 19))
    goto LABEL_14;
  v11 = *((id *)this + 10);
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v8 + 48))(v8, &v11);

    v9 = (void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;

LABEL_14:
    std::mutex::unlock((std::mutex *)((char *)this + 8));

    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F159B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t md::TiledGEOResourceFetcher::createResource(id *a1, void *a2, unsigned __int16 *a3, char a4, unsigned int a5, uint64_t a6, char a7, _QWORD *a8)
{
  uint64_t Resource;
  void *v11;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Resource = gdc::ResourceFetcher::createResource((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((Resource & 1) == 0)
  {
    v13 = *(_OWORD *)a8[4];
    md::TiledGEOResourceFetcher::getTileLoader(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "reportCorruptTile:", &v13);

  }
  return Resource;
}

void sub_19F159BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Error::Error(uint64_t a1, uint64_t a2, char *__s, __int128 *a4)
{
  void *v7;
  size_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;

  *(_QWORD *)a1 = a2;
  v7 = (void *)(a1 + 8);
  v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v12 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v10;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 31) = v8;
  v10 = v7;
  if (v8)
LABEL_8:
    memmove(v10, __s, v9);
  *((_BYTE *)v10 + v9) = 0;
  v13 = (std::string *)(a1 + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_19F159CEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void gdc::ResourceFetcher::failedToLoad(unsigned __int16 **this, void *a2, const gdc::ResourceKey *a3, const gdc::Error *a4)
{
  NSObject *v8;
  int v9;
  std::string *p_p;
  uint64_t v11;
  char *v12;
  unsigned __int16 *v13;
  std::string __p;
  uint8_t buf[4];
  std::string *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3 != 1)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v8 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a3);
      v9 = *((unsigned __int16 *)a3 + 1);
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      v11 = *(_QWORD *)a4;
      if (*((char *)a4 + 31) >= 0)
        v12 = (char *)a4 + 8;
      else
        v12 = (char *)*((_QWORD *)a4 + 1);
      *(_DWORD *)buf = 136315906;
      v16 = p_p;
      v17 = 1024;
      v18 = v9;
      v19 = 2048;
      v20 = v11;
      v21 = 2080;
      v22 = v12;
      _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_ERROR, "Failed to load key: %s type: %d, %lld: %s", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

  }
  v13 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[](this + 2, *((_WORD *)a3 + 1));
  gdc::ResourceStore::failed(*(gdc::ResourceStore **)v13, a2, a3, a4);
}

void gdc::ResourceStore::failed(gdc::ResourceStore *this, void *a2, const gdc::ResourceKey *a3, const gdc::Error *a4)
{
  std::mutex *v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  _BYTE *v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 *v54;
  _OWORD *v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  std::string::size_type v65;
  void *__p;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[32];
  uint64_t v71;
  __int128 v72;
  const std::string::value_type *v73;
  std::string v74;
  std::string v75;
  uint8_t buf[4];
  void **v77;
  __int16 v78;
  void *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v8 = (std::mutex *)((char *)this + 128);
  std::mutex::lock((std::mutex *)this + 2);
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
  v9 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str((std::string *)&__p, (unsigned __int8 *)a3);
    v10 = (SBYTE7(v68) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315394;
    v77 = v10;
    v78 = 2048;
    v79 = a2;
    _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_DEBUG, "Resource Failed: %s, rid: %llu", buf, 0x16u);
    if (SBYTE7(v68) < 0)
      operator delete(__p);
  }
  v11 = *(_QWORD *)a3;
  v12 = (char *)*((_QWORD *)a3 + 1);
  __p = a2;
  v67 = v11;
  v13 = v70;
  *(_QWORD *)&v68 = v70;
  *((_QWORD *)&v68 + 1) = v70;
  *(_QWORD *)&v69 = v70;
  *((_QWORD *)&v69 + 1) = 32;
  v14 = (char *)*((_QWORD *)a3 + 2);
  v15 = v14 - v12;
  if ((unint64_t)(v14 - v12) >= 0x21)
  {
    if (v15 <= 0x40)
      v16 = 64;
    else
      v16 = v14 - v12;
    v13 = malloc_type_malloc(v16, 0x100004077774924uLL);
    v18 = (char *)*((_QWORD *)&v68 + 1);
    v17 = (char *)v68;
    if ((_QWORD)v68 == *((_QWORD *)&v68 + 1))
      goto LABEL_29;
    v19 = *((_QWORD *)&v68 + 1) - v68;
    if (*((_QWORD *)&v68 + 1) - (_QWORD)v68 < 8uLL)
    {
      v20 = v13;
      goto LABEL_28;
    }
    v20 = v13;
    if ((unint64_t)&v13[-v68] < 0x20)
      goto LABEL_28;
    if (v19 >= 0x20)
    {
      v21 = v19 & 0xFFFFFFFFFFFFFFE0;
      v22 = (__int128 *)(v68 + 16);
      v23 = v13 + 16;
      v24 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 32;
      }
      while (v24);
      if (v19 == v21)
        goto LABEL_29;
      if ((v19 & 0x18) == 0)
      {
        v17 += v21;
        v20 = &v13[v21];
        goto LABEL_28;
      }
    }
    else
    {
      v21 = 0;
    }
    v26 = v19 & 0xFFFFFFFFFFFFFFF8;
    v20 = &v13[v19 & 0xFFFFFFFFFFFFFFF8];
    v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
    v28 = (uint64_t *)&v17[v21];
    v29 = &v13[v21];
    do
    {
      v30 = *v28++;
      *v29++ = v30;
      v27 += 8;
    }
    while (v27);
    if (v19 == v26)
      goto LABEL_29;
    v17 += v26;
    do
    {
LABEL_28:
      v31 = *v17++;
      *v20++ = v31;
    }
    while (v17 != v18);
LABEL_29:
    *(_QWORD *)&v68 = v13;
    *((_QWORD *)&v68 + 1) = v13;
    *((_QWORD *)&v69 + 1) = v16;
  }
  if (v12 == v14)
    goto LABEL_48;
  if (v15 < 8)
  {
    v33 = v13;
    goto LABEL_46;
  }
  if ((unint64_t)(v13 - v12) < 0x20)
  {
    v33 = v13;
    goto LABEL_46;
  }
  if (v15 >= 0x20)
  {
    v32 = v15 & 0xFFFFFFFFFFFFFFE0;
    v34 = (__int128 *)(v12 + 16);
    v35 = v13 + 16;
    v36 = v15 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v37 = *v34;
      *(v35 - 1) = *(v34 - 1);
      *v35 = v37;
      v34 += 2;
      v35 += 2;
      v36 -= 32;
    }
    while (v36);
    if (v15 == v32)
      goto LABEL_47;
    if ((v15 & 0x18) == 0)
    {
      v12 += v32;
      v33 = &v13[v32];
      goto LABEL_46;
    }
  }
  else
  {
    v32 = 0;
  }
  v38 = v15 & 0xFFFFFFFFFFFFFFF8;
  v33 = &v13[v15 & 0xFFFFFFFFFFFFFFF8];
  v39 = v32 - (v15 & 0xFFFFFFFFFFFFFFF8);
  v40 = (uint64_t *)&v12[v32];
  v41 = &v13[v32];
  do
  {
    v42 = *v40++;
    *v41++ = v42;
    v39 += 8;
  }
  while (v39);
  if (v15 == v38)
    goto LABEL_47;
  v12 += v38;
  do
  {
LABEL_46:
    v43 = *v12++;
    *v33++ = v43;
  }
  while (v12 != v14);
LABEL_47:
  v13 = (_BYTE *)*((_QWORD *)&v68 + 1);
LABEL_48:
  v44 = *((_QWORD *)a3 + 9);
  *((_QWORD *)&v68 + 1) = &v13[v15];
  v71 = v44;
  v72 = *((_OWORD *)a3 + 5);
  v73 = *(const std::string::value_type **)a4;
  if (*((char *)a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&v74, *((const std::string::value_type **)a4 + 1), *((_QWORD *)a4 + 2));
  else
    v74 = *(std::string *)((char *)a4 + 8);
  if (*((char *)a4 + 55) < 0)
    std::string::__init_copy_ctor_external(&v75, *((const std::string::value_type **)a4 + 4), *((_QWORD *)a4 + 5));
  else
    v75 = *(std::string *)((char *)a4 + 32);
  v45 = *((_QWORD *)this + 28);
  if (v45 < *((_QWORD *)this + 29))
  {
    *(_QWORD *)v45 = __p;
    v46 = (_BYTE *)(v45 + 48);
    *(_QWORD *)(v45 + 8) = v67;
    *(_QWORD *)(v45 + 16) = v45 + 48;
    *(_QWORD *)(v45 + 24) = v45 + 48;
    *(_QWORD *)(v45 + 32) = v45 + 48;
    v47 = v69;
    *(_QWORD *)(v45 + 40) = *((_QWORD *)&v69 + 1);
    v48 = (char *)v68;
    if ((_QWORD)v68 != v47)
    {
      *(_OWORD *)(v45 + 16) = v68;
      v68 = 0u;
      v69 = 0u;
LABEL_74:
      *(_QWORD *)(v45 + 80) = v71;
      *(_OWORD *)(v45 + 88) = v72;
      *(_QWORD *)(v45 + 104) = v73;
      v64 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
      *(_QWORD *)(v45 + 128) = *((_QWORD *)&v74.__r_.__value_.__l + 2);
      *(_OWORD *)(v45 + 112) = v64;
      memset(&v74, 0, sizeof(v74));
      v65 = v75.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v45 + 136) = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_QWORD *)(v45 + 152) = v65;
      memset(&v75, 0, sizeof(v75));
      *((_QWORD *)this + 28) = v45 + 160;
      goto LABEL_75;
    }
    *(_QWORD *)(v45 + 24) = &v46[*((_QWORD *)&v68 + 1) - v68];
    v51 = (char *)*((_QWORD *)&v68 + 1);
    if (v48 == *((char **)&v68 + 1))
      goto LABEL_74;
    v52 = *((_QWORD *)&v68 + 1) - (_QWORD)v48;
    if (*((_QWORD *)&v68 + 1) - (_QWORD)v48 >= 8uLL && v45 - (unint64_t)v48 + 48 >= 0x20)
    {
      if (v52 < 0x20)
      {
        v53 = 0;
LABEL_68:
        v58 = v52 & 0xFFFFFFFFFFFFFFF8;
        v46 += v52 & 0xFFFFFFFFFFFFFFF8;
        v59 = v53 - (v52 & 0xFFFFFFFFFFFFFFF8);
        v60 = (uint64_t *)&v48[v53];
        v61 = (_QWORD *)(v53 + v45 + 48);
        do
        {
          v62 = *v60++;
          *v61++ = v62;
          v59 += 8;
        }
        while (v59);
        if (v52 == v58)
          goto LABEL_74;
        v48 += v58;
        goto LABEL_73;
      }
      v53 = v52 & 0xFFFFFFFFFFFFFFE0;
      v54 = (__int128 *)(v48 + 16);
      v55 = (_OWORD *)(v45 + 64);
      v56 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v57 = *v54;
        *(v55 - 1) = *(v54 - 1);
        *v55 = v57;
        v54 += 2;
        v55 += 2;
        v56 -= 32;
      }
      while (v56);
      if (v52 == v53)
        goto LABEL_74;
      if ((v52 & 0x18) != 0)
        goto LABEL_68;
      v48 += v53;
      v46 += v53;
    }
    do
    {
LABEL_73:
      v63 = *v48++;
      *v46++ = v63;
    }
    while (v48 != v51);
    goto LABEL_74;
  }
  v49 = std::vector<gdc::ResourceRequest>::__push_back_slow_path<gdc::ResourceRequest>((void ***)this + 27, (uint64_t)&__p);
  v50 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  *((_QWORD *)this + 28) = v49;
  if (v50 < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
LABEL_75:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if ((_QWORD)v68 != (_QWORD)v69)
    free((void *)v68);
  std::mutex::unlock(v8);
}

uint64_t md::IdentifiedGEOResourceFetcher::createResource(uint64_t a1, void *a2, unsigned __int16 *a3, char a4, unsigned int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t Resource;
  void *v10;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Resource = gdc::ResourceFetcher::createResource(a1, a2, a3, a4, a5, a6, a7, (_QWORD *)a8);
  if ((Resource & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader", **(_QWORD **)(a8 + 32), *(_QWORD *)(*(_QWORD *)(a8 + 32) + 8));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "reportCorruptTile:", &v12);

  }
  return Resource;
}

void sub_19F15A488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3,std::allocator<md::RunLoopController *>,void ()(std::unordered_map<std::shared_ptr<md::TaskContext>::ResourceKey,std::shared_ptr<md::TaskContext>::Error,std::shared_ptr<md::TaskContext>::ResourceKeyHash,std::equal_to<std::unordered_map>,md::World::World(VKSharedResources *,GEOApplicationAuditToken *,float,objc_object  {objcproto14MDRenderTarget}*,std::shared_ptr<md::TaskContext>,gdc::LoadingStatusTracker *,ggl::RenderTargetFormat const&,std::function<void ()(void)>,BOOL,md::RunLoopController *)::$_3<std::pair<std::unordered_map const,std::shared_ptr<md::TaskContext>::ResourceKey>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  void *v4;
  id v5;
  const char *v6;
  const char *v7;
  int v8;
  size_t v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t *v12;
  char v13;
  uint64_t result;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  long double v19;
  unsigned __int8 v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t ***)(a2 + 16);
  if (!v3)
  {
LABEL_24:
    v13 = 1;
    goto LABEL_25;
  }
  while (1)
  {
    if (v3[14] == (uint64_t *)-8)
      goto LABEL_5;
    GEOErrorDomain();
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v6 = (const char *)objc_msgSend(v5, "UTF8String");
    v7 = v6;
    v8 = *((char *)v3 + 143);
    v9 = v8 >= 0 ? *((unsigned __int8 *)v3 + 143) : (size_t)v3[16];
    if (v9 == strlen(v6))
    {
      v10 = v8 >= 0 ? (uint64_t *)(v3 + 15) : v3[15];
      if (!memcmp(v10, v7, v9))
        break;
    }

    v4 = 0;
LABEL_4:

LABEL_5:
    v3 = (uint64_t **)*v3;
    if (!v3)
      goto LABEL_24;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:", v3[14]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4
    || (objc_msgSend(v4, "_geo_isNetworkError") & 1) == 0
    && objc_msgSend(v4, "code") != -15
    && objc_msgSend(v4, "code") != -19)
  {
    goto LABEL_4;
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v11 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v12 = v3[14];
    v21 = 134217984;
    v22 = v12;
    _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_INFO, "Retry Resources Loading Due To Code: %lli", (uint8_t *)&v21, 0xCu);
  }

  v13 = 0;
LABEL_25:
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 368) + 56))(*(_QWORD *)(v2 + 368));
  if ((result & 1) == 0)
  {
    v15 = (unsigned __int8 *)(v2 + 376);
    if ((v13 & 1) != 0)
    {
      atomic_store(0, v15);
    }
    else
    {
      v16 = atomic_load(v15);
      if (v16 <= 4)
      {
        v17 = *(_QWORD *)(v2 + 368);
        v18 = atomic_load((unsigned __int8 *)(v2 + 376));
        v19 = ldexp(1.0, v18);
        result = (*(uint64_t (**)(uint64_t, _QWORD, long double))(*(_QWORD *)v17 + 24))(v17, 0, v19 * 5.0);
        do
          v20 = __ldaxr(v15);
        while (__stlxr(v20 + 1, v15));
      }
    }
  }
  return result;
}

void sub_19F15A6D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Timer::isStarted(gdc::Timer *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = *((unsigned __int8 *)this + 96);
  std::mutex::unlock(v2);
  return v3;
}

void geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::insert(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  _BYTE *v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t **v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  uint64_t ***v71;
  uint64_t **v72;
  void *v73;
  size_t v74;
  unint64_t v75;
  uint64_t *v76;
  size_t v77;
  int v78;
  uint64_t *v79;
  uint64_t *v80;
  int v81;
  _QWORD *v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  size_t v87;
  size_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  __int128 *v94;
  _OWORD *v95;
  unint64_t v96;
  __int128 v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  char *v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char *v105;
  __int128 *v106;
  _OWORD *v107;
  unint64_t v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  char *v113;
  uint64_t v114;
  char v115;
  float v116;
  float v117;
  _BOOL8 v118;
  unint64_t v119;
  unint64_t v120;
  size_t prime;
  int8x8_t v122;
  unint64_t v123;
  uint8x8_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  size_t v132;
  void *v133;
  void *v134;
  uint64_t *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE v141[32];
  uint64_t *v142;
  __int128 v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;

  v5 = v141;
  v6 = (char *)a2[1];
  v136 = *a2;
  v137 = v141;
  v138 = v141;
  v139 = v141;
  v140 = 32;
  v7 = (char *)a2[2];
  v8 = v7 - v6;
  if ((unint64_t)(v7 - v6) >= 0x21)
  {
    if (v8 <= 0x40)
      v9 = 64;
    else
      v9 = v7 - v6;
    v5 = malloc_type_malloc(v9, 0x100004077774924uLL);
    v10 = (char *)v137;
    v11 = v138;
    if (v137 == v138)
      goto LABEL_21;
    v12 = v138 - (_BYTE *)v137;
    if ((unint64_t)(v138 - (_BYTE *)v137) < 8)
    {
      v13 = v5;
      goto LABEL_20;
    }
    v13 = v5;
    if ((unint64_t)(v5 - (_BYTE *)v137) < 0x20)
      goto LABEL_20;
    if (v12 >= 0x20)
    {
      v14 = v12 & 0xFFFFFFFFFFFFFFE0;
      v15 = (__int128 *)((char *)v137 + 16);
      v16 = v5 + 16;
      v17 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v12 == v14)
        goto LABEL_21;
      if ((v12 & 0x18) == 0)
      {
        v10 += v14;
        v13 = &v5[v14];
        goto LABEL_20;
      }
    }
    else
    {
      v14 = 0;
    }
    v19 = v12 & 0xFFFFFFFFFFFFFFF8;
    v13 = &v5[v12 & 0xFFFFFFFFFFFFFFF8];
    v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
    v21 = (uint64_t *)&v10[v14];
    v22 = &v5[v14];
    do
    {
      v23 = *v21++;
      *v22++ = v23;
      v20 += 8;
    }
    while (v20);
    if (v12 == v19)
      goto LABEL_21;
    v10 += v19;
    do
    {
LABEL_20:
      v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
LABEL_21:
    v137 = v5;
    v138 = v5;
    v140 = v9;
  }
  if (v6 == v7)
    goto LABEL_40;
  if (v8 < 8)
  {
    v26 = v5;
    goto LABEL_38;
  }
  if ((unint64_t)(v5 - v6) < 0x20)
  {
    v26 = v5;
    goto LABEL_38;
  }
  if (v8 >= 0x20)
  {
    v25 = v8 & 0xFFFFFFFFFFFFFFE0;
    v27 = (__int128 *)(v6 + 16);
    v28 = v5 + 16;
    v29 = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 32;
    }
    while (v29);
    if (v8 == v25)
      goto LABEL_39;
    if ((v8 & 0x18) == 0)
    {
      v6 += v25;
      v26 = &v5[v25];
      goto LABEL_38;
    }
  }
  else
  {
    v25 = 0;
  }
  v31 = v8 & 0xFFFFFFFFFFFFFFF8;
  v26 = &v5[v8 & 0xFFFFFFFFFFFFFFF8];
  v32 = v25 - (v8 & 0xFFFFFFFFFFFFFFF8);
  v33 = (uint64_t *)&v6[v25];
  v34 = &v5[v25];
  do
  {
    v35 = *v33++;
    *v34++ = v35;
    v32 += 8;
  }
  while (v32);
  if (v8 == v31)
    goto LABEL_39;
  v6 += v31;
  do
  {
LABEL_38:
    v36 = *v6++;
    *v26++ = v36;
  }
  while (v6 != v7);
LABEL_39:
  v5 = v138;
LABEL_40:
  v37 = (uint64_t *)a2[9];
  v138 = &v5[v8];
  v142 = v37;
  v143 = *((_OWORD *)a2 + 5);
  v38 = (std::__shared_weak_count *)a2[13];
  v144 = a2[12];
  v145 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  v146 = 0;
  v41 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a1 + 3, (unsigned __int8 *)&v136);
  if (!v41)
  {
    v135 = a1 + 3;
    v50 = std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>((uint64_t)&v136);
    v51 = v50;
    v52 = *a1;
    *(_QWORD *)(v52 + 8) = v50;
    *v50 = v52;
    *a1 = (uint64_t)v50;
    v50[1] = a1;
    ++a1[2];
    v53 = (uint64_t *)a1[8];
    a1[9] += v146;
    if (v53 == a1)
      a1[8] = (uint64_t)v50;
    v54 = v136;
    v55 = WORD1(v136);
    v56 = (WORD1(v136)
         + ((v136 - 0x61C8864680B583EBLL) << 6)
         + (((unint64_t)v136 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v136 - 0x61C8864680B583EBLL);
    v57 = v142;
    v58 = (unint64_t)&v142[8 * v56] + (v56 >> 2);
    v59 = (v58 - 0x61C8864680B583EBLL) ^ v56;
    v60 = a1[4];
    if (v60)
    {
      v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
      v61.i16[0] = vaddlv_u8(v61);
      if (v61.u32[0] > 1uLL)
      {
        v2 = (v58 - 0x61C8864680B583EBLL) ^ v56;
        if (v59 >= v60)
          v2 = v59 % v60;
      }
      else
      {
        v2 = v59 & (v60 - 1);
      }
      v71 = *(uint64_t ****)(*v135 + 8 * v2);
      if (v71)
      {
        v72 = *v71;
        if (*v71)
        {
          v73 = v137;
          v74 = v138 - (_BYTE *)v137;
          if (v61.u32[0] < 2uLL)
          {
            while (1)
            {
              v79 = v72[1];
              if (v79 == (uint64_t *)v59)
              {
                if (*((unsigned __int8 *)v72 + 16) == v54 && *((unsigned __int16 *)v72 + 9) == v55 && v72[11] == v57)
                {
                  v80 = v72[3];
                  if ((char *)v72[4] - (char *)v80 == v74)
                  {
                    v132 = v74;
                    v134 = v73;
                    v81 = memcmp(v80, v73, v74);
                    v74 = v132;
                    v73 = v134;
                    if (!v81)
                      goto LABEL_168;
                  }
                }
              }
              else if (((unint64_t)v79 & (v60 - 1)) != v2)
              {
                goto LABEL_91;
              }
              v72 = (uint64_t **)*v72;
              if (!v72)
                goto LABEL_91;
            }
          }
          do
          {
            v75 = (unint64_t)v72[1];
            if (v75 == v59)
            {
              if (*((unsigned __int8 *)v72 + 16) == v54 && *((unsigned __int16 *)v72 + 9) == v55 && v72[11] == v57)
              {
                v76 = v72[3];
                if ((char *)v72[4] - (char *)v76 == v74)
                {
                  v133 = v73;
                  v77 = v74;
                  v78 = memcmp(v76, v73, v74);
                  v74 = v77;
                  v73 = v133;
                  if (!v78)
                    goto LABEL_168;
                }
              }
            }
            else
            {
              if (v75 >= v60)
                v75 %= v60;
              if (v75 != v2)
                break;
            }
            v72 = (uint64_t **)*v72;
          }
          while (v72);
        }
      }
    }
LABEL_91:
    v82 = operator new(0x78uLL);
    *v82 = 0;
    v82[1] = v59;
    v83 = (char *)(v82 + 7);
    v84 = (char *)v137;
    v82[2] = v136;
    v82[3] = v82 + 7;
    v82[4] = v82 + 7;
    v82[5] = v82 + 7;
    v82[6] = 32;
    v85 = v138;
    v86 = v138 - v84;
    if ((unint64_t)(v138 - v84) < 0x21)
    {
LABEL_112:
      if (v84 == v85)
      {
LABEL_130:
        v82[4] = &v83[v86];
        v82[11] = v142;
        *((_OWORD *)v82 + 6) = v143;
        v82[14] = v51;
        v116 = (float)(unint64_t)(a1[6] + 1);
        v117 = *((float *)a1 + 14);
        if (!v60 || (float)(v117 * (float)v60) < v116)
        {
          v118 = 1;
          if (v60 >= 3)
            v118 = (v60 & (v60 - 1)) != 0;
          v119 = v118 | (2 * v60);
          v120 = vcvtps_u32_f32(v116 / v117);
          if (v119 <= v120)
            prime = v120;
          else
            prime = v119;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v122 = (int8x8_t)a1[4];
          if (prime > *(_QWORD *)&v122)
            goto LABEL_152;
          if (prime < *(_QWORD *)&v122)
          {
            v123 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
            if (*(_QWORD *)&v122 < 3uLL
              || (v124 = (uint8x8_t)vcnt_s8(v122), v124.i16[0] = vaddlv_u8(v124), v124.u32[0] > 1uLL))
            {
              v123 = std::__next_prime(v123);
            }
            else
            {
              v125 = 1 << -(char)__clz(v123 - 1);
              if (v123 >= 2)
                v123 = v125;
            }
            if (prime <= v123)
              prime = v123;
            if (prime < *(_QWORD *)&v122)
LABEL_152:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v135, prime);
          }
          v60 = a1[4];
          if ((v60 & (v60 - 1)) != 0)
          {
            if (v59 >= v60)
              v2 = v59 % v60;
            else
              v2 = v59;
          }
          else
          {
            v2 = (v60 - 1) & v59;
          }
        }
        v126 = *v135;
        v127 = *(_QWORD **)(*v135 + 8 * v2);
        if (v127)
        {
          *v82 = *v127;
        }
        else
        {
          *v82 = a1[5];
          a1[5] = (uint64_t)v82;
          *(_QWORD *)(v126 + 8 * v2) = a1 + 5;
          if (!*v82)
          {
LABEL_167:
            ++a1[6];
            goto LABEL_168;
          }
          v128 = *(_QWORD *)(*v82 + 8);
          if ((v60 & (v60 - 1)) != 0)
          {
            if (v128 >= v60)
              v128 %= v60;
          }
          else
          {
            v128 &= v60 - 1;
          }
          v127 = (_QWORD *)(*v135 + 8 * v128);
        }
        *v127 = v82;
        goto LABEL_167;
      }
      if (v86 < 8)
      {
        v105 = v83;
        goto LABEL_128;
      }
      if ((unint64_t)(v83 - v84) < 0x20)
      {
        v105 = v83;
        goto LABEL_128;
      }
      if (v86 >= 0x20)
      {
        v104 = v86 & 0xFFFFFFFFFFFFFFE0;
        v106 = (__int128 *)(v84 + 16);
        v107 = v83 + 16;
        v108 = v86 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v109 = *v106;
          *(v107 - 1) = *(v106 - 1);
          *v107 = v109;
          v106 += 2;
          v107 += 2;
          v108 -= 32;
        }
        while (v108);
        if (v86 == v104)
          goto LABEL_129;
        if ((v86 & 0x18) == 0)
        {
          v84 += v104;
          v105 = &v83[v104];
          goto LABEL_128;
        }
      }
      else
      {
        v104 = 0;
      }
      v110 = v86 & 0xFFFFFFFFFFFFFFF8;
      v105 = &v83[v86 & 0xFFFFFFFFFFFFFFF8];
      v111 = v104 - (v86 & 0xFFFFFFFFFFFFFFF8);
      v112 = (uint64_t *)&v84[v104];
      v113 = &v83[v104];
      do
      {
        v114 = *v112++;
        *(_QWORD *)v113 = v114;
        v113 += 8;
        v111 += 8;
      }
      while (v111);
      if (v86 == v110)
        goto LABEL_129;
      v84 += v110;
      do
      {
LABEL_128:
        v115 = *v84++;
        *v105++ = v115;
      }
      while (v84 != v85);
LABEL_129:
      v83 = (char *)v82[4];
      goto LABEL_130;
    }
    if (v86 <= 0x40)
      v87 = 64;
    else
      v87 = v138 - v84;
    v88 = v87;
    v83 = (char *)malloc_type_malloc(v87, 0x100004077774924uLL);
    v89 = (char *)v82[3];
    v90 = (char *)v82[4];
    if (v89 == v90)
    {
LABEL_111:
      v82[3] = v83;
      v82[4] = v83;
      v82[6] = v88;
      goto LABEL_112;
    }
    v91 = v90 - v89;
    if ((unint64_t)(v90 - v89) < 8)
    {
      v92 = v83;
    }
    else
    {
      v92 = v83;
      if ((unint64_t)(v83 - v89) >= 0x20)
      {
        if (v91 < 0x20)
        {
          v93 = 0;
LABEL_105:
          v98 = v91 & 0xFFFFFFFFFFFFFFF8;
          v92 = &v83[v91 & 0xFFFFFFFFFFFFFFF8];
          v99 = v93 - (v91 & 0xFFFFFFFFFFFFFFF8);
          v100 = (uint64_t *)&v89[v93];
          v101 = &v83[v93];
          do
          {
            v102 = *v100++;
            *(_QWORD *)v101 = v102;
            v101 += 8;
            v99 += 8;
          }
          while (v99);
          if (v91 == v98)
            goto LABEL_111;
          v89 += v98;
          goto LABEL_110;
        }
        v93 = v91 & 0xFFFFFFFFFFFFFFE0;
        v94 = (__int128 *)(v89 + 16);
        v95 = v83 + 16;
        v96 = v91 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 32;
        }
        while (v96);
        if (v91 == v93)
          goto LABEL_111;
        if ((v91 & 0x18) != 0)
          goto LABEL_105;
        v89 += v93;
        v92 = &v83[v93];
      }
    }
    do
    {
LABEL_110:
      v103 = *v89++;
      *v92++ = v103;
    }
    while (v89 != v90);
    goto LABEL_111;
  }
  v42 = v41;
  v43 = v41[14];
  v44 = std::__list_imp<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry>>::__create_node[abi:nn180100]<geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::CacheEntry const&>((uint64_t)&v136);
  v45 = v44;
  v46 = *a1;
  *(_QWORD *)(v46 + 8) = v44;
  *v44 = v46;
  *a1 = (uint64_t)v44;
  v44[1] = (uint64_t)a1;
  v47 = a1[2];
  a1[2] = v47 + 1;
  v48 = (uint64_t *)a1[8];
  if (v48 == v43)
  {
    v49 = (uint64_t *)v43[1];
LABEL_53:
    a1[8] = (uint64_t)v49;
    goto LABEL_54;
  }
  v49 = v44;
  if (v48 == a1)
    goto LABEL_53;
LABEL_54:
  v62 = v43[16];
  v63 = a1[9];
  v64 = v63 >= v62;
  v65 = v63 - v62;
  if (!v64)
    v65 = 0;
  a1[9] = v65 + v146;
  v66 = *v43;
  *(_QWORD *)(v66 + 8) = v43[1];
  *(_QWORD *)v43[1] = v66;
  a1[2] = v47;
  v67 = (std::__shared_weak_count *)v43[15];
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (void *)v43[3];
  if (v70 != (void *)v43[5])
    free(v70);
  operator delete(v43);
  v42[14] = v45;
LABEL_168:
  v129 = v145;
  if (v145)
  {
    v130 = (unint64_t *)&v145->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v137 != v139)
    free(v137);
}

_QWORD *ggl::TextureCube::vendImplicitLoadItems(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v3 = result;
  v4 = 0;
  v40 = *MEMORY[0x1E0C80C00];
  v5 = result + 12;
  v6 = (_QWORD *)a2[1];
  v37 = result + 12;
  do
  {
    v7 = v5[2 * v4];
    v8 = *((unsigned int *)v3 + 49) | ((unint64_t)*((unsigned int *)v3 + 49) << 32);
    v9 = a2[2];
    if ((unint64_t)v6 < v9)
    {
      if (v6)
      {
        v10 = operator new(0x20uLL);
        *v10 = &off_1E42C6D50;
        v10[1] = ggl::TextureCube::onImplicitLoadComplete;
        v10[2] = 0;
        v10[3] = v3;
        v39 = v10;
        *v6 = v7;
        v6[1] = v3;
        *((_BYTE *)v6 + 16) = 1;
        *((_BYTE *)v6 + 17) = v4;
        *((_BYTE *)v6 + 20) = 0;
        *(_QWORD *)((char *)v6 + 28) = 0;
        *(_QWORD *)((char *)v6 + 36) = v8;
        result = v39;
        if (v39)
        {
          v6[9] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v39 + 16))(v39);
          result = v39;
          if (v39 == v38)
          {
            result = v38;
            v11 = 4;
            goto LABEL_25;
          }
          if (v39)
          {
            v11 = 5;
LABEL_25:
            result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
          }
        }
        else
        {
          v6[9] = 0;
        }
      }
      v6 += 10;
      goto LABEL_4;
    }
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *a2) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *a2) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    if (!v15)
    {
      v22 = 0;
      v17 = (_QWORD *)(16 * (((uint64_t)v6 - *a2) >> 4));
      goto LABEL_33;
    }
    v16 = 10 * v15;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 16))(a2[3], 80 * v15, 8);
    v17 = &result[10 * v12];
    v18 = &result[v16];
    if (!result)
    {
      v22 = v18;
      goto LABEL_33;
    }
    v19 = result;
    v20 = operator new(0x20uLL);
    *v20 = &off_1E42C6D50;
    v20[1] = ggl::TextureCube::onImplicitLoadComplete;
    v20[2] = 0;
    v20[3] = v3;
    v39 = v20;
    *v17 = v7;
    v21 = &v19[10 * v12];
    v21[1] = v3;
    *((_BYTE *)v21 + 16) = 1;
    *((_BYTE *)v21 + 17) = v4;
    *((_BYTE *)v21 + 20) = 0;
    *(_QWORD *)((char *)v21 + 28) = 0;
    *(_QWORD *)((char *)v21 + 36) = v8;
    if (v39)
    {
      v22 = v18;
      if (v39 == v38)
      {
        v19[10 * v12 + 9] = v21 + 6;
        (*(void (**)(_BYTE *))(*(_QWORD *)v39 + 24))(v39);
      }
      else
      {
        v19[10 * v12 + 9] = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 16))();
      }
    }
    else
    {
      v19[10 * v12 + 9] = 0;
      v22 = v18;
    }
    result = v39;
    if (v39 == v38)
    {
      result = v38;
      v23 = 4;
    }
    else
    {
      if (!v39)
        goto LABEL_33;
      v23 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
LABEL_33:
    v6 = v17 + 10;
    v25 = (_QWORD *)*a2;
    v24 = (_QWORD *)a2[1];
    if (v24 == (_QWORD *)*a2)
    {
      *a2 = (uint64_t)v17;
      a2[1] = (uint64_t)v6;
      v33 = a2[2];
      a2[2] = (uint64_t)v22;
    }
    else
    {
      v26 = 0;
      do
      {
        v27 = &v17[v26];
        v28 = &v24[v26];
        *((_OWORD *)v27 - 5) = *(_OWORD *)&v24[v26 - 10];
        *((_BYTE *)v27 - 64) = 0;
        if (LOBYTE(v24[v26 - 8]))
        {
          *((_BYTE *)v27 - 63) = *((_BYTE *)v28 - 63);
          *((_BYTE *)v27 - 64) = 1;
        }
        *((_BYTE *)v27 - 60) = 0;
        if (*((_BYTE *)v28 - 60))
        {
          LODWORD(v17[v26 - 7]) = v24[v26 - 7];
          *((_BYTE *)v27 - 60) = 1;
        }
        v29 = &v17[v26];
        v30 = &v24[v26];
        *(_OWORD *)((char *)&v17[v26 - 6] - 4) = *(_OWORD *)((char *)&v24[v26 - 6] - 4);
        v31 = (_QWORD *)v24[v26 - 1];
        if (v31)
        {
          if (v30 - 4 == v31)
          {
            *(v29 - 1) = v29 - 4;
            result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v30 - 1) + 24))(*(v30 - 1));
          }
          else
          {
            *(v29 - 1) = v31;
            *(v30 - 1) = 0;
          }
        }
        else
        {
          *(v29 - 1) = 0;
        }
        v26 -= 10;
      }
      while (&v24[v26] != v25);
      v24 = (_QWORD *)*a2;
      v32 = (_QWORD *)a2[1];
      *a2 = (uint64_t)&v17[v26];
      a2[1] = (uint64_t)v6;
      v33 = a2[2];
      a2[2] = (uint64_t)v22;
      if (v32 != v24)
      {
        v34 = v32 - 4;
        while (1)
        {
          result = (_QWORD *)v34[3];
          if (v34 == result)
            break;
          if (result)
          {
            v36 = 5;
LABEL_52:
            result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
          }
          if (*((_BYTE *)v34 - 28))
            *((_BYTE *)v34 - 28) = 0;
          if (*((_BYTE *)v34 - 32))
            *((_BYTE *)v34 - 32) = 0;
          v35 = v34 - 6;
          v34 -= 10;
          if (v35 == v24)
            goto LABEL_58;
        }
        result = v34;
        v36 = 4;
        goto LABEL_52;
      }
    }
LABEL_58:
    if (v24)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a2[3] + 40))(a2[3], v24, v33 - (_QWORD)v24);
    v5 = v37;
LABEL_4:
    a2[1] = (uint64_t)v6;
    ++v4;
  }
  while (v4 != 6);
  return result;
}

uint64_t md::IconLabelPart::textureRect(md::IconLabelPart *this)
{
  uint64_t v1;
  unsigned __int8 v2;
  id v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 80);
  v2 = atomic_load((unsigned __int8 *)(v1 + 143));
  if ((v2 & 1) != 0)
    v3 = *(id *)(v1 + 16);
  else
    v3 = 0;
  v4 = objc_msgSend(v3, "textureCoordinates");

  return v4;
}

void sub_19F15B514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::LabelRenderer::createRenderItemsForPass(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v3 = result + 32 * a2;
  v6 = *(uint64_t **)(v3 + 104);
  v5 = (uint64_t **)(v3 + 104);
  v4 = v6;
  v7 = *(v5 - 1);
  if (v6 != v7)
  {
    v9 = result;
    v10 = (uint64_t *)(result + 1832);
    v11 = (uint64_t *)(result + 1824);
    v12 = *(v5 - 1);
    do
    {
      v13 = *(unsigned __int8 *)(*v7 + 1);
      if (v12 != v4)
      {
        v14 = v4 - v12;
        do
        {
          v15 = v14 >> 1;
          v16 = &v7[v14 >> 1];
          v18 = *v16;
          v17 = v16 + 1;
          v14 += ~(v14 >> 1);
          if (*(unsigned __int8 *)(v18 + 1) < v13)
            v14 = v15;
          else
            v7 = v17;
        }
        while (v14);
      }
      v4 = v11;
      switch(v13)
      {
        case 0u:
          goto LABEL_5;
        case 1u:
          goto LABEL_4;
        case 2u:
        case 3u:
          *(_BYTE *)(a3 + 24) = 1;
          md::LabelRenderer::renderLayers(v9, v12, v7, a3, *(_QWORD **)(v9 + 1840));
          *(_BYTE *)(a3 + 24) = 0;
          goto LABEL_4;
        case 4u:
          *(_BYTE *)(a3 + 25) = 1;
          md::LabelRenderer::renderLayers(v9, v12, v7, a3, *(_QWORD **)(v9 + 1840));
          *(_BYTE *)(a3 + 25) = 0;
LABEL_4:
          v4 = v10;
LABEL_5:
          result = md::LabelRenderer::renderLayers(v9, v12, v7, a3, (_QWORD *)*v4);
          v4 = *v5;
          break;
        default:
          break;
      }
      v12 = v7;
    }
    while (v4 != v7);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  int8x16_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int8x16_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  BOOL v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v126;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = a2;
  v9 = &a2[-1].i64[1];
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = ((char *)v8 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
        if ((_DWORD)result)
        {
          v75 = v10->i64[0];
          v10->i64[0] = *v9;
          goto LABEL_165;
        }
        return result;
      case 3:
        v76 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[1]);
        if ((v76 & 1) != 0)
        {
          v77 = v10->i64[0];
          if ((_DWORD)result)
          {
            v10->i64[0] = *v9;
            *v9 = v77;
          }
          else
          {
            v10->i64[0] = v10->i64[1];
            v10->i64[1] = v77;
            result = ((uint64_t (*)(uint64_t))*a3)(*v9);
            if ((_DWORD)result)
            {
              v75 = v10->i64[1];
              v10->i64[1] = *v9;
LABEL_165:
              *v9 = v75;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v103 = v10->i64[1];
          v10->i64[1] = *v9;
          *v9 = v103;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
          goto LABEL_138;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, v9, a3);
      case 5:
        v78 = v10 + 1;
        v79 = &v10[1].i64[1];
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(karo::StaticSphereTreeElement const*,karo::StaticSphereTreeElement const*),karo::StaticSphereTreeElement**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &v10[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10[1].i64[1]);
        if ((_DWORD)result)
        {
          v80 = *v79;
          *v79 = *v9;
          *v9 = v80;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v79, v78->i64[0]);
          if ((_DWORD)result)
          {
            v81 = v78->i64[0];
            v78->i64[0] = *v79;
            *v79 = v81;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v83 = v10->i64[1];
              v82 = v10[1].i64[0];
              v84 = v10->i64[0];
              v10->i64[1] = v82;
              v10[1].i64[0] = v83;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v82, v84);
LABEL_138:
              if ((_DWORD)result)
                *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v85 = &v10->i64[1];
          v86 = v10 == v8 || v85 == (uint64_t *)v8;
          v87 = v86;
          if ((a5 & 1) != 0)
          {
            if ((v87 & 1) == 0)
            {
              v88 = 0;
              v89 = (uint64_t *)v10;
              do
              {
                v92 = *v89;
                v91 = v89[1];
                v89 = v85;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v91, v92);
                if ((_DWORD)result)
                {
                  v93 = *v89;
                  v94 = v88;
                  do
                  {
                    *(uint64_t *)((char *)&v10->i64[1] + v94) = *(uint64_t *)((char *)v10->i64 + v94);
                    if (!v94)
                    {
                      v90 = (uint64_t *)v10;
                      goto LABEL_113;
                    }
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v93, *(uint64_t *)((char *)&v10->i64[-1] + v94));
                    v94 -= 8;
                  }
                  while ((result & 1) != 0);
                  v90 = (uint64_t *)((char *)&v10->i64[1] + v94);
LABEL_113:
                  *v90 = v93;
                }
                v85 = v89 + 1;
                v88 += 8;
              }
              while (v89 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v87 & 1) == 0)
          {
            do
            {
              v105 = v7->i64[0];
              v104 = v7->i64[1];
              v7 = (int8x16_t *)v85;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v104, v105);
              if ((_DWORD)result)
              {
                v106 = v7->i64[0];
                v107 = (uint64_t *)v7;
                do
                {
                  v108 = v107;
                  v109 = *--v107;
                  *v108 = v109;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v106, *(v108 - 2));
                }
                while ((result & 1) != 0);
                *v107 = v106;
              }
              v85 = &v7->i64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != v8)
          {
            v95 = (unint64_t)(v12 - 2) >> 1;
            v126 = v95;
            do
            {
              if (v126 >= v95)
              {
                v97 = (2 * v95) | 1;
                v98 = &v7->i64[v97];
                if (2 * v95 + 2 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v98, v98[1]))
                {
                  ++v98;
                  v97 = 2 * v95 + 2;
                }
                v99 = &v7->i64[v95];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v98, *v99);
                if ((result & 1) == 0)
                {
                  v124 = *v99;
                  do
                  {
                    v100 = v98;
                    *v99 = *v98;
                    if (v126 < v97)
                      break;
                    v101 = (2 * v97) | 1;
                    v98 = &v7->i64[v101];
                    v102 = 2 * v97 + 2;
                    if (v102 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v98, v98[1]))
                    {
                      ++v98;
                      v101 = v102;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v98, v124);
                    v99 = v100;
                    v97 = v101;
                  }
                  while (!(_DWORD)result);
                  *v100 = v124;
                }
              }
              v96 = v95-- <= 0;
            }
            while (!v96);
            v110 = (unint64_t)v11 >> 3;
            do
            {
              v111 = 0;
              v112 = v7->i64[0];
              v113 = (uint64_t *)v7;
              do
              {
                v114 = (unint64_t *)&v113[v111 + 1];
                v115 = (2 * v111) | 1;
                v116 = 2 * v111 + 2;
                if (v116 < v110)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v113[v111 + 1], v113[v111 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v114;
                    v115 = v116;
                  }
                }
                *v113 = *v114;
                v113 = (uint64_t *)v114;
                v111 = v115;
              }
              while (v115 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              v117 = &a2[-1].i64[1];
              v86 = v114 == &a2[-1].u64[1];
              a2 = (int8x16_t *)((char *)a2 - 8);
              if (v86)
              {
                *v114 = v112;
              }
              else
              {
                *v114 = *v117;
                *v117 = v112;
                v118 = (char *)v114 - (char *)v7 + 8;
                if (v118 >= 9)
                {
                  v119 = (((unint64_t)v118 >> 3) - 2) >> 1;
                  v120 = &v7->i64[v119];
                  result = ((uint64_t (*)(uint64_t, unint64_t))*a3)(*v120, *v114);
                  if ((_DWORD)result)
                  {
                    v121 = *v114;
                    do
                    {
                      v122 = v120;
                      *v114 = *v120;
                      if (!v119)
                        break;
                      v119 = (v119 - 1) >> 1;
                      v120 = &v7->i64[v119];
                      result = ((uint64_t (*)(uint64_t, unint64_t))*a3)(*v120, v121);
                      v114 = (unint64_t *)v122;
                    }
                    while ((result & 1) != 0);
                    *v122 = v121;
                  }
                }
              }
              v96 = v110-- <= 2;
            }
            while (!v96);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v7->i64[0], v7->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v7->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v7->i64[v13];
            if (v19)
            {
              v7->i64[v13] = *v9;
              *v9 = v20;
            }
            else
            {
              v7->i64[v13] = v7->i64[0];
              v7->i64[0] = v20;
              if ((*a3)(*v9))
              {
                v33 = v7->i64[0];
                v7->i64[0] = *v9;
                *v9 = v33;
              }
            }
          }
          else if (v19)
          {
            v23 = v7->i64[0];
            v7->i64[0] = *v9;
            *v9 = v23;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[0], v7->i64[v13]))
            {
              v24 = v7->i64[v13];
              v7->i64[v13] = v7->i64[0];
              v7->i64[0] = v24;
            }
          }
        }
        else
        {
          v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v7->i64[v13], v7->i64[0]);
          v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v7->i64[v13]);
          if ((v15 & 1) != 0)
          {
            v17 = v7->i64[0];
            if (v16)
            {
              v7->i64[0] = *v9;
              *v9 = v17;
            }
            else
            {
              v7->i64[0] = v7->i64[v13];
              v7->i64[v13] = v17;
              if ((*a3)(*v9))
              {
                v25 = v7->i64[v13];
                v7->i64[v13] = *v9;
                *v9 = v25;
              }
            }
          }
          else if (v16)
          {
            v21 = v7->i64[v13];
            v7->i64[v13] = *v9;
            *v9 = v21;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v13], v7->i64[0]))
            {
              v22 = v7->i64[0];
              v7->i64[0] = v7->i64[v13];
              v7->i64[v13] = v22;
            }
          }
          v26 = v13 - 1;
          v27 = v13 - 1;
          v28 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v27], v7->i64[1]);
          v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-1].i64[0], v7->i64[v27]);
          v123 = a4;
          if ((v28 & 1) != 0)
          {
            v30 = v7->i64[1];
            if (v29)
            {
              v7->i64[1] = v8[-1].i64[0];
              v8[-1].i64[0] = v30;
            }
            else
            {
              v7->i64[1] = v7->i64[v27];
              v7->i64[v27] = v30;
              if ((*a3)(v8[-1].i64[0]))
              {
                v34 = v7->i64[v27];
                v7->i64[v27] = v8[-1].i64[0];
                v8[-1].i64[0] = v34;
              }
            }
          }
          else if (v29)
          {
            v31 = v7->i64[v27];
            v7->i64[v27] = v8[-1].i64[0];
            v8[-1].i64[0] = v31;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v27], v7->i64[1]))
            {
              v32 = v7->i64[1];
              v7->i64[1] = v7->i64[v27];
              v7->i64[v27] = v32;
            }
          }
          v35 = v13 + 1;
          v36 = v13 + 1;
          v37 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v36], v7[1].i64[0]);
          v38 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-2].i64[1], v7->i64[v36]);
          if ((v37 & 1) != 0)
          {
            v39 = v7[1].i64[0];
            if (v38)
            {
              v7[1].i64[0] = v8[-2].i64[1];
              v8[-2].i64[1] = v39;
            }
            else
            {
              v7[1].i64[0] = v7->i64[v36];
              v7->i64[v36] = v39;
              if ((*a3)(v8[-2].i64[1]))
              {
                v42 = v7->i64[v36];
                v7->i64[v36] = v8[-2].i64[1];
                v8[-2].i64[1] = v42;
              }
            }
          }
          else if (v38)
          {
            v40 = v7->i64[v36];
            v7->i64[v36] = v8[-2].i64[1];
            v8[-2].i64[1] = v40;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v36], v7[1].i64[0]))
            {
              v41 = v7[1].i64[0];
              v7[1].i64[0] = v7->i64[v36];
              v7->i64[v36] = v41;
            }
          }
          v43 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v13], v7->i64[v26]);
          v44 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v35], v7->i64[v13]);
          if ((v43 & 1) != 0)
          {
            v45 = v7->i64[v26];
            if (v44)
            {
              v7->i64[v26] = v7->i64[v36];
              v7->i64[v36] = v45;
              v46 = v7->i64[v13];
              v9 = &a2[-1].i64[1];
            }
            else
            {
              v7->i64[v26] = v7->i64[v13];
              v7->i64[v13] = v45;
              v49 = (*a3)(v7->i64[v35]);
              v46 = v7->i64[v13];
              v9 = &a2[-1].i64[1];
              if (v49)
              {
                v50 = v7->i64[v36];
                v7->i64[v13] = v50;
                v7->i64[v36] = v46;
                v46 = v50;
              }
            }
            a4 = v123;
          }
          else
          {
            v46 = v7->i64[v13];
            a4 = v123;
            if (v44)
            {
              v7->i64[v13] = v7->i64[v36];
              v7->i64[v36] = v46;
              v47 = ((uint64_t (*)(void))*a3)();
              v46 = v7->i64[v13];
              if (v47)
              {
                v48 = v7->i64[v27];
                v7->i64[v27] = v46;
                v7->i64[v13] = v48;
                v46 = v48;
              }
            }
            v9 = &a2[-1].i64[1];
          }
          v51 = v7->i64[0];
          v7->i64[0] = v46;
          v7->i64[v13] = v51;
        }
        --a4;
        v52 = v7->i64[0];
        if ((a5 & 1) == 0)
        {
          v53 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7[-1].i64[1], v7->i64[0]);
          v52 = v7->i64[0];
          if ((v53 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[0], *v9);
            if ((result & 1) != 0)
            {
              v10 = v7;
              do
              {
                v67 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v67);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v68 = (int8x16_t *)&v7->u64[1];
              do
              {
                v10 = v68;
                if (v68 >= a2)
                  break;
                v68 = (int8x16_t *)((char *)v68 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v10->i64[0]);
              }
              while (!(_DWORD)result);
            }
            v8 = a2;
            v69 = a2;
            if (v10 < a2)
            {
              v69 = a2;
              do
              {
                v70 = v69[-1].i64[1];
                v69 = (int8x16_t *)((char *)v69 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v70);
              }
              while ((result & 1) != 0);
            }
            while (v10 < v69)
            {
              v71 = v10->i64[0];
              v10->i64[0] = v69->i64[0];
              v69->i64[0] = v71;
              do
              {
                v72 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v52, v72));
              do
              {
                v73 = v69[-1].i64[1];
                v69 = (int8x16_t *)((char *)v69 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v73);
              }
              while ((result & 1) != 0);
            }
            v74 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v74;
            a5 = 0;
            *v74 = v52;
            continue;
          }
        }
        v54 = (uint64_t *)v7;
        do
        {
          v55 = (int8x16_t *)v54;
          v56 = v54[1];
          ++v54;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v56, v52) & 1) != 0);
        v57 = a4;
        v58 = (uint64_t *)v8;
        if (v55 == v7)
        {
          v58 = (uint64_t *)v8;
          do
          {
            if (v54 >= v58)
              break;
            v60 = *--v58;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v60, v52) & 1) == 0);
        }
        else
        {
          do
            v59 = *--v58;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v52));
        }
        if (v54 < v58)
        {
          v61 = (int8x16_t *)v54;
          v62 = (int8x16_t *)v58;
          do
          {
            v63 = v61->i64[0];
            v61->i64[0] = v62->i64[0];
            v62->i64[0] = v63;
            do
            {
              v55 = v61;
              v64 = v61->i64[1];
              v61 = (int8x16_t *)((char *)v61 + 8);
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v64, v52) & 1) != 0);
            do
            {
              v65 = v62[-1].i64[1];
              v62 = (int8x16_t *)((char *)v62 - 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v65, v52));
          }
          while (v61 < v62);
        }
        if (v55 != v7)
          v7->i64[0] = v55->i64[0];
        v55->i64[0] = v52;
        v8 = a2;
        a4 = v57;
        if (v54 < v58)
        {
LABEL_71:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**,false>(v7, v55, a3, a4, a5 & 1);
          a5 = 0;
          v10 = (int8x16_t *)&v55->u64[1];
          continue;
        }
        v66 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**>(v7, v55, a3);
        v10 = (int8x16_t *)&v55->u64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(md::LabelRenderDescriptor const*,md::LabelRenderDescriptor const*),md::LabelRenderDescriptor**>(&v55->i64[1], a2, a3);
        if (!(_DWORD)result)
        {
          if (v66)
            continue;
          goto LABEL_71;
        }
        a2 = v55;
        if (!v66)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sortRenderDescriptionFunc(unint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  float v6;
  float v7;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  if (v2 != v3)
    return v2 > v3;
  v4 = *(unsigned __int8 *)(a1 + 2);
  v5 = *(unsigned __int8 *)(a2 + 2);
  if (v4 != v5)
    return (char)v4 < (char)v5;
  v6 = *(float *)(a1 + 24);
  v7 = *(float *)(a2 + 24);
  if (v6 != v7)
    return v6 > v7;
  v9 = *(unsigned __int16 *)(a1 + 6);
  v10 = *(unsigned __int16 *)(a2 + 6);
  v11 = v9 >= v10;
  if (v9 != v10)
    return !v11;
  v12 = *(unsigned __int8 *)(a1 + 3);
  v13 = *(unsigned __int8 *)(a2 + 3);
  v11 = v12 >= v13;
  if (v12 != v13)
    return !v11;
  v14 = *(unsigned __int8 *)(a1 + 8);
  v15 = *(unsigned __int8 *)(a2 + 8);
  v11 = v14 >= v15;
  if (v14 != v15)
    return !v11;
  v16 = *(unsigned __int8 *)(a1 + 4);
  v17 = *(unsigned __int8 *)(a2 + 4);
  v11 = v16 >= v17;
  if (v16 != v17)
    return !v11;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a2 + 16);
  if (v18 == v19)
  {
    v20 = *(unsigned __int8 *)(a1 + 9);
    if (v20 == *(unsigned __int8 *)(a2 + 9))
      return a1 < a2;
    else
      return v20 == 0;
  }
  else
  {
    v21 = (_DWORD)v18 == (_DWORD)v19;
    v22 = v18 < v19;
    if (v21)
      return HIDWORD(v18) < HIDWORD(v19);
    else
      return v22;
  }
}

uint64_t *ggl::FragmentedPool<ggl::RenderItem>::pushAll(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (uint64_t *)result[4];
  v2 = (uint64_t *)result[5];
  if (v1 != v2)
  {
    v3 = result;
    v4 = (_QWORD *)result[1];
    while (1)
    {
      v5 = *v1;
      v6 = v3[2];
      if ((unint64_t)v4 >= v6)
        break;
      if (v4)
        *v4 = v5;
      ++v4;
LABEL_4:
      v3[1] = (uint64_t)v4;
      if (++v1 == v2)
      {
        v25 = v3[4];
        if (v25 != v3[5])
          v3[5] = v25;
        return result;
      }
    }
    v7 = ((uint64_t)v4 - *v3) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v6 - *v3;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = v10;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[3] + 16))(v3[3], 8 * v10, 8);
      v12 = &result[v7];
      v10 = (uint64_t)&result[v11];
      if (result)
        *v12 = v5;
    }
    else
    {
      v12 = (uint64_t *)(8 * v7);
    }
    v14 = *v3;
    v13 = v3[1];
    v15 = v13 - *v3;
    if (v13 == *v3)
    {
      v17 = v12;
      goto LABEL_29;
    }
    v16 = v15 - 8;
    if ((unint64_t)(v15 - 8) < 0x38)
    {
      v17 = v12;
    }
    else
    {
      v17 = v12;
      if ((unint64_t)(v13 - (_QWORD)v12) >= 0x20)
      {
        v18 = (v16 >> 3) + 1;
        v19 = v12 - 2;
        v20 = (__int128 *)(v13 - 16);
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *v20;
          *((_OWORD *)v19 - 1) = *(v20 - 1);
          *(_OWORD *)v19 = v22;
          v19 -= 4;
          v20 -= 2;
          v21 -= 4;
        }
        while (v21);
        v17 = &v12[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
        v13 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
    }
    do
    {
      v23 = *(_QWORD *)(v13 - 8);
      v13 -= 8;
      *--v17 = v23;
    }
    while (v13 != v14);
LABEL_28:
    v13 = *v3;
LABEL_29:
    v4 = v12 + 1;
    *v3 = (uint64_t)v17;
    v3[1] = (uint64_t)(v12 + 1);
    v24 = v3[2];
    v3[2] = v10;
    if (v13)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[3] + 40))(v3[3], v13, v24 - v13);
    goto LABEL_4;
  }
  return result;
}

uint64_t ggl::TextureData2DNoCopy::TextureData2DNoCopy(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  geo::read_write_lock *v18;
  const char *v19;
  malloc_zone_t *zone;
  uint64_t v21;

  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(_QWORD *)a1 = &off_1E42BAAD8;
  *(_QWORD *)(a1 + 32) = 0;
  v10 = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if ((v11 & 1) == 0)
  {
    v21 = v10;
    v10 = v21;
    if (v16)
    {
      v17 = operator new();
      *(_QWORD *)(v17 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v17 + 24) = "GeoGL";
      *(_OWORD *)(v17 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v17 = &off_1E42B5668;
      *(_QWORD *)(v17 + 8) = "GeoGL";
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *(_OWORD *)(v17 + 104) = 0u;
      *(_OWORD *)(v17 + 120) = 0u;
      *(_OWORD *)(v17 + 136) = 0u;
      *(_OWORD *)(v17 + 152) = 0u;
      *(_OWORD *)(v17 + 168) = 0u;
      *(_OWORD *)(v17 + 184) = 0u;
      *(_OWORD *)(v17 + 200) = 0u;
      *(_OWORD *)(v17 + 216) = 0u;
      *(_OWORD *)(v17 + 232) = 0u;
      *(_QWORD *)(v17 + 248) = 0;
      *(_OWORD *)(v17 + 56) = 0u;
      v18 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v17 + 56), 0);
      if ((_DWORD)v18)
        geo::read_write_lock::logFailure(v18, (uint64_t)"initialization", v19);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v17 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v17 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v17;
      v10 = v21;
    }
  }
  *(_QWORD *)(a1 + 56) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 64) = 0;
  v12 = *(_QWORD **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40) - (_QWORD)v12;
  if (v13)
  {
    v14 = 0;
    if (v13 >= 9)
      *(_QWORD *)(a1 + 40) = v12 + 1;
  }
  else
  {
    std::vector<unsigned char *,geo::StdAllocator<unsigned char *,ggl::Allocator>>::__append(v10, 1uLL);
    v14 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD **)(a1 + 32);
  }
  *(_QWORD *)(a1 + 64) = ggl::pixelFormatPixelsSize(a4, a2, a3) + v14;
  *(_QWORD *)(a1 + 24) = a5;
  *v12 = a5 + v14;
  return a1;
}

_OWORD *ggl::CommandBuffer::pushLoadItem(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _OWORD *result;

  v3 = a1[26];
  if (v3 < a1[27])
  {
    if (v3)
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
      *(_BYTE *)(v3 + 16) = 0;
      if (*(_BYTE *)(a2 + 16))
      {
        *(_BYTE *)(v3 + 17) = *(_BYTE *)(a2 + 17);
        *(_BYTE *)(v3 + 16) = 1;
      }
      *(_BYTE *)(v3 + 20) = 0;
      if (*(_BYTE *)(a2 + 20))
      {
        *(_DWORD *)(v3 + 24) = *(_DWORD *)(a2 + 24);
        *(_BYTE *)(v3 + 20) = 1;
      }
      *(_OWORD *)(v3 + 28) = *(_OWORD *)(a2 + 28);
      v4 = *(_QWORD *)(a2 + 72);
      if (v4)
      {
        if (v4 == a2 + 48)
        {
          *(_QWORD *)(v3 + 72) = v3 + 48;
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72), v3 + 48);
          goto LABEL_13;
        }
        v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      }
      *(_QWORD *)(v3 + 72) = v4;
    }
LABEL_13:
    result = (_OWORD *)(v3 + 80);
    a1[26] = v3 + 80;
    goto LABEL_14;
  }
  result = std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,ggl::Allocator>>::__push_back_slow_path<ggl::Texture2DLoadItem const&>(a1 + 25, a2);
LABEL_14:
  a1[26] = result;
  return result;
}

void sub_19F15C734(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 20))
  {
    *(_BYTE *)(v2 + 20) = 0;
    if (!*(_BYTE *)(v2 + 16))
    {
LABEL_3:
      *(_QWORD *)(v1 + 208) = v2;
      _Unwind_Resume(a1);
    }
  }
  else if (!*(_BYTE *)(v2 + 16))
  {
    goto LABEL_3;
  }
  *(_BYTE *)(v2 + 16) = 0;
  *(_QWORD *)(v1 + 208) = v2;
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6DE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6D50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

void md::Label::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  float v7;
  BOOL v8;
  md::LabelPoint *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a1);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a1 + 48);
  md::LabelPoint::coordinate((md::LabelPoint *)&v48, v6);
  *(_OWORD *)(a1 + 128) = v48;
  *(_QWORD *)(a1 + 144) = v49;
  v7 = *(float *)(v6 + 40);
  v8 = v7 != 3.4028e38;
  if (v7 == 3.4028e38)
    v7 = 0.0;
  *(float *)(a1 + 188) = v7;
  *(_BYTE *)(a1 + 192) = v8;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 232) + 17))
  {
    v9 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8), a1 + 48);
    v10 = (_QWORD *)md::LabelPoint::mercatorPoint(v9);
    *(_QWORD *)(a1 + 640) = *v10;
    *(_QWORD *)(a1 + 648) = v10[1];
  }
  if (*(_BYTE *)(a1 + 1211) == 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(v11 + 464);
    if (!v12)
      goto LABEL_38;
    v13 = v11 + 464;
    v14 = *(_DWORD *)(a1 + 48);
    v15 = v11 + 464;
    do
    {
      v16 = *(_DWORD *)(v12 + 32);
      v17 = v16 >= v14;
      if (v16 >= v14)
        v18 = (uint64_t *)v12;
      else
        v18 = (uint64_t *)(v12 + 8);
      if (v17)
        v15 = v12;
      v12 = *v18;
    }
    while (*v18);
    if (v15 == v13 || v14 < *(_DWORD *)(v15 + 32))
      goto LABEL_38;
    v20 = v15 + 40;
    v19 = *(_QWORD **)(v15 + 40);
    v21 = *(_QWORD *)(v20 + 8) - (_QWORD)v19;
    if ((unint64_t)v21 < 9)
    {
      v26 = 1;
    }
    else
    {
      v22 = v21 >> 3;
      if (*v19)
        v23 = *v19 + 8;
      else
        v23 = 0;
      v24 = *(_QWORD *)(v23 + 72);
      v25 = 2;
      if (v22 > 2)
        v25 = v22;
      v26 = 1;
      while (1)
      {
        v27 = v19[v26];
        v28 = v27 ? v27 + 8 : 0;
        if (*(_QWORD *)(v28 + 72) != v24
          || *(unsigned __int8 *)(v28 + 129) > *(unsigned __int8 *)(a3 + 9))
        {
          break;
        }
        if (v25 == ++v26)
        {
          v26 = v25;
          break;
        }
      }
    }
    v29 = v19[v26 - 1];
    if (v29 && *(_BYTE *)(v29 + 136))
    {
      v30 = *(_QWORD *)(a1 + 680);
      if (!v30)
      {
        v30 = operator new();
        *(_OWORD *)v30 = 0u;
        *(_OWORD *)(v30 + 16) = 0u;
        *(_OWORD *)(v30 + 32) = 0u;
        v31 = *(_QWORD *)(a1 + 680);
        *(_QWORD *)(a1 + 680) = v30;
        if (v31)
        {
          MEMORY[0x1A1AF4E00](v31, 0x1000C40C179455ELL);
          v30 = *(_QWORD *)(a1 + 680);
        }
      }
      *(_QWORD *)v30 = *(_QWORD *)(a1 + 496);
      *(_QWORD *)(v30 + 8) = *(_QWORD *)(a1 + 504);
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(v30 + 24) = *(_QWORD *)(v29 + 88);
      *(_QWORD *)(v30 + 32) = *(_QWORD *)(v29 + 96);
      *(_BYTE *)(v30 + 40) = *(_BYTE *)(v29 + 137);
    }
    else
    {
LABEL_38:
      v32 = *(_QWORD *)(a1 + 680);
      if (!v32)
        goto LABEL_41;
      *(_QWORD *)(a1 + 680) = 0;
      MEMORY[0x1A1AF4E00](v32, 0x1000C40C179455ELL);
    }
    *(_BYTE *)(a1 + 1294) = 1;
  }
LABEL_41:
  if (*(_BYTE *)(a2 + 3029))
  {
    v33 = *(_QWORD *)(a3 + 328);
    if (*(_QWORD *)(a1 + 64) == v33)
      goto LABEL_57;
    v34 = *(_QWORD *)(a3 + 336);
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *(std::__shared_weak_count **)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v33;
    *(_QWORD *)(a1 + 72) = v34;
    if (!v37)
      goto LABEL_56;
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    goto LABEL_54;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_57;
  v37 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v40);
    while (__stlxr(v39 - 1, v40));
LABEL_54:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_56:
  ++*(_DWORD *)(a1 + 96);
LABEL_57:
  v41 = *(_QWORD *)(a3 + 296);
  if (*(_QWORD *)(a1 + 80) != v41)
  {
    v42 = *(_QWORD *)(a3 + 304);
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v41;
    *(_QWORD *)(a1 + 88) = v42;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    ++*(_DWORD *)(a1 + 100);
  }
}

uint64_t md::CaptionedIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, const md::LabelLayoutContext *a3, _BYTE *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t result;
  int v53;

  v7 = *(uint64_t **)(a1 + 32);
  if (*(_BYTE *)(a1 + 926))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v9 + 464);
    if (v10)
    {
      v11 = (int)*(float *)(v8 + 392);
      v12 = *(unsigned __int8 *)(v8 + 256);
      v13 = v9 + 464;
      v14 = *(_DWORD *)(v8 + 48);
      v15 = v13;
      do
      {
        v16 = *(_DWORD *)(v10 + 32);
        v17 = v16 >= v14;
        if (v16 >= v14)
          v18 = (uint64_t *)v10;
        else
          v18 = (uint64_t *)(v10 + 8);
        if (v17)
          v15 = v10;
        v10 = *v18;
      }
      while (*v18);
      if (v15 != v13 && v14 >= *(_DWORD *)(v15 + 32))
      {
        v20 = v15 + 40;
        v19 = *(_QWORD **)(v15 + 40);
        v21 = *(_QWORD *)(v20 + 8) - (_QWORD)v19;
        if ((unint64_t)v21 < 9)
        {
          v26 = 1;
        }
        else
        {
          v22 = v21 >> 3;
          if (*v19)
            v23 = *v19 + 8;
          else
            v23 = 0;
          v24 = *(_QWORD *)(v23 + 72);
          v25 = 2;
          if (v22 > 2)
            v25 = v22;
          v26 = 1;
          while (1)
          {
            v27 = v19[v26];
            v28 = v27 ? v27 + 8 : 0;
            if (*(_QWORD *)(v28 + 72) != v24 || *(unsigned __int8 *)(v28 + 129) > v11)
              break;
            if (v25 == ++v26)
            {
              v26 = v25;
              break;
            }
          }
        }
        v29 = v19[v26 - 1];
        if (v29)
        {
          v30 = v29 + 139;
          if (v12 == 2)
            v30 = v29 + 140;
          v31 = (unsigned __int8 *)(v12 == 3 ? v29 + 141 : v30);
          if (*(unsigned __int8 *)(v29 + 138) != *(unsigned __int8 *)(a1 + 943)
            || *v31 != *(unsigned __int8 *)(a1 + 944))
          {
            goto LABEL_81;
          }
        }
      }
    }
  }
  if (!(_DWORD)a3)
  {
    v44 = *(_QWORD *)(a1 + 576);
    v45 = *(_QWORD *)(a1 + 584);
    if (v44 != v45)
    {
      v46 = v44 + 8;
      do
      {
        v47 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _BYTE *))(**(_QWORD **)(v46 - 8) + 760))(*(_QWORD *)(v46 - 8), a2, 0, a4);
        if ((v47 & 1) != 0)
          break;
        v37 = v46 == v45;
        v46 += 8;
      }
      while (!v37);
      if ((v47 & 1) != 0)
        return 1;
    }
    goto LABEL_65;
  }
  v32 = *v7;
  if (*(unsigned __int8 *)(*v7 + 250) == *(unsigned __int8 *)(a1 + 922))
  {
    if (!*(_BYTE *)(a1 + 926)
      || !*(_BYTE *)(a1 + 958)
      || *(_WORD *)(v32 + 246)
      || *(unsigned __int8 *)(a1 + 832) == *(unsigned __int8 *)(a1 + 837)
      && *(unsigned __int8 *)(a1 + 833) == *(unsigned __int8 *)(a1 + 838)
      && (v53 = *(unsigned __int8 *)(a1 + 835), v53 == *(unsigned __int8 *)(a1 + 840))
      && (v53 != 10 || *(unsigned __int8 *)(a1 + 836) == *(unsigned __int8 *)(a1 + 841)))
    {
      if (*(unsigned __int8 *)(v32 + 253) != *(unsigned __int8 *)(a1 + 857)
        || (md::LabelIconStyleMonitor::needsCrossfade((unsigned __int8 *)(a1 + 736), v32, a4) & 1) != 0)
      {
        return 1;
      }
      v33 = *(_QWORD *)(a1 + 576);
      v34 = *(_QWORD *)(a1 + 584);
      if (v33 != v34)
      {
        v35 = v33 + 8;
        do
        {
          v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BYTE *))(**(_QWORD **)(v35 - 8) + 760))(*(_QWORD *)(v35 - 8), a2, 1, a4);
          if ((v36 & 1) != 0)
            break;
          v37 = v35 == v34;
          v35 += 8;
        }
        while (!v37);
        if ((v36 & 1) != 0)
          return 1;
      }
      v38 = *v7;
      if (*(unsigned __int8 *)(*v7 + 144) != *(unsigned __int8 *)(a1 + 923))
        return 1;
      v39 = *(_QWORD *)(v38 + 272);
      if (!v39)
      {
        v40 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v7);
        v39 = *v40;
        *(_QWORD *)(v38 + 272) = *v40;
      }
      if (*(unsigned __int8 *)(a1 + 924) != *(unsigned __int8 *)(v39 + 70))
        return 1;
      if (!*(_BYTE *)(a1 + 926))
        return 0;
      v41 = *v7;
      v42 = *(_QWORD *)(*v7 + 272);
      if (!v42)
      {
        v43 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v7);
        v42 = *v43;
        *(_QWORD *)(v41 + 272) = *v43;
      }
      if (*(unsigned __int8 *)(v42 + 64) != *(unsigned __int8 *)(a1 + 853)
        || md::LabelAnnotationStyleMonitor::needsCrossfade(a1 + 933, *v7))
      {
        return 1;
      }
LABEL_65:
      if (*(_BYTE *)(a1 + 926))
      {
        if (*(_BYTE *)(a1 + 832) == 5)
        {
          if (md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition(*(md::CaptionedIconLabelPart **)(a1 + 16), *(md::Label **)(a2 + 432), a3) == *(unsigned __int8 *)(a1 + 847))return 0;
        }
        else
        {
          if (!*(_BYTE *)(a1 + 920))
            return 0;
          v48 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 432) + 472) + *(unsigned __int8 *)(a1 + 836);
          v49 = ((v48 + 32) >> 5) & 6;
          v50 = (v48 + 16) >> 5;
          v51 = *(_BYTE *)(a1 + 856) ? v50 : v49;
          if (v51 == *(unsigned __int8 *)(a1 + 847))
            return 0;
        }
        return 1;
      }
      return 0;
    }
  }
LABEL_81:
  result = 1;
  a4[8] = 1;
  *a4 = 1;
  return result;
}

uint64_t md::TextLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;

  if (!a3)
    return 0;
  v4 = **(_QWORD **)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 864) == 1;
  v6 = v4 + 280;
  if (*(_BYTE *)(a1 + 864) == 1)
    v7 = 6;
  else
    v7 = 0;
  v8 = *(float **)(v6 + 8 * (*(_BYTE *)(a1 + 864) == 1));
  if (v8)
  {
    if (vabds_f32(v8[2], *(float *)(v4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v4, (uint64_t)v8, v7);
      v8 = *(float **)(v6 + 8 * v5);
    }
  }
  else
  {
    v8 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v4, v7);
    *(_QWORD *)(v6 + 8 * v5) = v8;
  }
  v10 = *(_QWORD *)v8;
  if (*(float *)(*(_QWORD *)v8 + 100) == 0.0)
    return 0;
  v11 = *(_QWORD *)(a1 + 576);
  v12 = *(_QWORD *)(v11 + 16);
  if (!*(_BYTE *)(v12 + 120))
    return 1;
  v13 = *(_BYTE *)(*(_QWORD *)(a1 + 16) + 404);
  v14 = *(unsigned int *)(v11 + 8);
  v15 = 1 << v13;
  if (((1 << v13) & v14) != 0)
    return 0;
  v16 = *(unsigned __int8 **)(v12 + 16);
  if (v16[36] != *(unsigned __int8 *)(v10 + 108)
    || v16[37] != *(unsigned __int8 *)(v10 + 109)
    || v16[38] != *(unsigned __int8 *)(v10 + 110)
    || v16[39] != *(unsigned __int8 *)(v10 + 111)
    || v16[40] != *(unsigned __int8 *)(v10 + 112))
  {
    return 1;
  }
  v17 = v16[23];
  if ((v17 & 0x80u) == 0)
    v18 = v16[23];
  else
    v18 = *((_QWORD *)v16 + 1);
  v19 = *(unsigned __int8 *)(v10 + 95);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(v10 + 80);
  if (v18 != v19)
    return 1;
  v23 = *(unsigned __int8 **)(v10 + 72);
  v21 = (unsigned __int8 *)(v10 + 72);
  v22 = v23;
  if (v20 >= 0)
    v24 = v21;
  else
    v24 = v22;
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v16, v24, *((_QWORD *)v16 + 1)))
      return 1;
  }
  else if (v16[23])
  {
    while (*v16 == *v24)
    {
      ++v16;
      ++v24;
      if (!--v17)
        goto LABEL_35;
    }
    return 1;
  }
LABEL_35:
  result = 0;
  *(_DWORD *)(v11 + 8) = v14 | v15;
  return result;
}

uint64_t md::PointIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
    return 0;
  v5 = (unsigned __int8 *)(a1 + 768);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

__int128 *md::PointLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  unsigned __int8 v8;

  v2 = *(_QWORD *)(a1 + 464);
  if (v2)
  {
    v3 = *a2;
    v4 = a1 + 464;
    do
    {
      v5 = *(_DWORD *)(v2 + 32);
      v6 = v5 >= v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 464 && v3 >= *(_DWORD *)(v4 + 32))
      return (__int128 *)(v4 + 72);
  }
  if ((v8 & 1) != 0)
    return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
  {
    qword_1ECE2FD68 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1ECE2FD58 = 0u;
    dword_1ECE2FD70 = 2139095039;
    word_1ECE2FD74 = 256;
    byte_1ECE2FD76 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

double md::LabelPoint::coordinate(md::LabelPoint *this, uint64_t a2)
{
  float v4;
  long double v5;
  long double v6;
  long double v7;
  long double v8;
  float64x2_t v9;
  long double v10;
  long double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  __double2 v16;
  double result;
  long double v18;

  if (*(_BYTE *)(a2 + 45))
  {
    if (*(float *)(a2 + 40) == 3.4028e38)
      v4 = 0.0;
    else
      v4 = *(float *)(a2 + 40);
    v5 = *(double *)(a2 + 24) * 6.28318531;
    v6 = exp(*(double *)(a2 + 32) * 6.28318531 + -3.14159265);
    v18 = atan(v6);
    v7 = fmod(v5, 6.28318531);
    v8 = fmod(v7 + 6.28318531, 6.28318531);
    v9.f64[0] = v18;
    v9.f64[1] = v8;
    *(float64x2_t *)this = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v9);
  }
  else
  {
    v10 = *(double *)a2;
    v11 = *(double *)(a2 + 8);
    v12 = *(double *)(a2 + 16);
    v13 = sqrt(v10 * v10 + v11 * v11);
    v14 = atan2(v12, v13 * 0.996647189);
    v15 = atan2(v11, v10);
    v16 = __sincos_stret(v14);
    *(long double *)this = atan2(v12 + v16.__sinval * v16.__sinval * 42841.3115 * v16.__sinval, v13 + v16.__cosval * v16.__cosval * -42697.6727 * v16.__cosval)* 57.2957795;
    *((double *)this + 1) = v15 * 57.2957795;
    if (*(float *)(a2 + 40) == 3.4028e38)
      v4 = 0.0;
    else
      v4 = *(float *)(a2 + 40);
  }
  result = v4;
  *((double *)this + 2) = v4;
  return result;
}

__int128 *md::LineLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unsigned __int8 v11;
  __int128 *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v4 = *(_QWORD *)(a1 + 232);
  v2 = a1 + 232;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
  {
    v16 = *(_QWORD *)(v6 + 40);
    v10 = *(std::__shared_weak_count **)(v6 + 48);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (v16)
    {
      v12 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
      goto LABEL_15;
    }
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  if ((v11 & 1) != 0)
  {
    v12 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
  }
  else
  {
    v12 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    {
      qword_1ECE2FD68 = 0;
      md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
      *(_OWORD *)&qword_1ECE2FD58 = 0u;
      dword_1ECE2FD70 = 2139095039;
      word_1ECE2FD74 = 256;
      byte_1ECE2FD76 = 1;
    }
  }
LABEL_15:
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v12;
}

void sub_19F15D498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::PolylineLabelPlacement::labelPoint(md::PolylineLabelPlacement *this)
{
  return (uint64_t)this + 152;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,false>(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  double v21;
  double v22;
  unint64_t v23;
  int v24;
  double v25;
  double v26;
  unint64_t *k;
  unint64_t v28;
  int v29;
  double v30;
  double v31;
  unint64_t *v32;
  unint64_t *m;
  unint64_t v34;
  int v35;
  double v36;
  double v37;
  unint64_t v39;
  int v40;
  double v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  int v46;
  double v47;
  double v48;
  unint64_t v49;
  int v50;
  double v51;
  double v52;
  BOOL v53;
  unint64_t v54;
  int v55;
  double v56;
  double v57;
  unint64_t v58;
  int v59;
  double v60;
  double v61;
  unint64_t *j;
  unint64_t v63;
  double v64;
  double v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  double v69;
  double v70;
  unint64_t v71;
  int v72;
  double v73;
  double v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  double v80;
  double v81;
  unint64_t *v82;
  BOOL v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  double v93;
  double v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  double v98;
  double v99;
  int64_t v100;
  int64_t v101;
  unint64_t *v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  double v108;
  double v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  double v114;
  double v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  int v122;
  double v123;
  double v124;
  unint64_t v125;
  double v126;
  double v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  double v138;
  double v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  int v145;
  int v146;
  double v147;
  double v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  double v152;
  double v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  int v158;
  double v159;
  double v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  int v164;
  double v165;
  double v166;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *v8;
        v77 = *i;
        v78 = *(_DWORD *)(*v8 + 20);
        v79 = *(_DWORD *)(*i + 20);
        if (v78 == v79)
        {
          v80 = *(double *)(v76 + 32);
          v81 = *(double *)(v77 + 32);
          if (v80 == v81)
          {
            if (v76 >= v77)
              return result;
          }
          else if (v80 <= v81)
          {
            return result;
          }
        }
        else if (v78 >= v79)
        {
          return result;
        }
        *i = v76;
        *v8 = v77;
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(i, i + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,0>(i, i + 1, i + 2, i + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (i != a2)
            {
              v100 = (v11 - 2) >> 1;
              v101 = v100;
              while (1)
              {
                v103 = v101;
                if (v100 < v101)
                  goto LABEL_173;
                v104 = (2 * v101) | 1;
                v102 = &i[v104];
                if (2 * v103 + 2 >= (uint64_t)v11)
                  goto LABEL_182;
                v105 = *v102;
                v106 = v102[1];
                result = (unint64_t *)*(unsigned int *)(*v102 + 20);
                v107 = *(_DWORD *)(v106 + 20);
                if ((_DWORD)result == v107)
                  break;
                if ((int)result < v107)
                  goto LABEL_181;
LABEL_182:
                v110 = *v102;
                v111 = i[v103];
                v112 = *(_DWORD *)(*v102 + 20);
                v113 = *(_DWORD *)(v111 + 20);
                if (v112 == v113)
                {
                  v114 = *(double *)(v110 + 32);
                  v115 = *(double *)(v111 + 32);
                  if (v114 == v115)
                  {
                    if (v110 < v111)
                      goto LABEL_173;
                  }
                  else if (v114 > v115)
                  {
                    goto LABEL_173;
                  }
                }
                else if (v112 < v113)
                {
                  goto LABEL_173;
                }
                i[v103] = v110;
                while (1)
                {
                  if (v100 < v104)
                    goto LABEL_172;
                  v116 = v102;
                  v117 = 2 * v104;
                  v104 = (2 * v104) | 1;
                  v102 = &i[v104];
                  v118 = v117 + 2;
                  if (v118 < (uint64_t)v11)
                  {
                    v119 = *v102;
                    v120 = v102[1];
                    v121 = *(_DWORD *)(*v102 + 20);
                    v122 = *(_DWORD *)(v120 + 20);
                    if (v121 != v122)
                    {
                      if (v121 >= v122)
                        goto LABEL_200;
LABEL_199:
                      ++v102;
                      v104 = v118;
                      goto LABEL_200;
                    }
                    v123 = *(double *)(v119 + 32);
                    v124 = *(double *)(v120 + 32);
                    if (v123 == v124)
                    {
                      if (v119 < v120)
                        goto LABEL_199;
                    }
                    else if (v123 > v124)
                    {
                      goto LABEL_199;
                    }
                  }
LABEL_200:
                  v125 = *v102;
                  result = (unint64_t *)*(unsigned int *)(*v102 + 20);
                  if ((_DWORD)result != v113)
                  {
                    if ((int)result < v113)
                      goto LABEL_171;
                    goto LABEL_191;
                  }
                  v126 = *(double *)(v125 + 32);
                  v127 = *(double *)(v111 + 32);
                  if (v126 == v127)
                    break;
                  if (v126 > v127)
                    goto LABEL_171;
LABEL_191:
                  *v116 = v125;
                }
                if (v125 >= v111)
                  goto LABEL_191;
LABEL_171:
                v102 = v116;
LABEL_172:
                *v102 = v111;
LABEL_173:
                v101 = v103 - 1;
                if (!v103)
                {
                  v128 = (unint64_t)v10 >> 3;
                  while (1)
                  {
                    v130 = 0;
                    v131 = *i;
                    v129 = i;
                    do
                    {
                      v132 = v129;
                      v129 += v130 + 1;
                      v133 = 2 * v130;
                      v130 = (2 * v130) | 1;
                      v134 = v133 + 2;
                      if (v134 < v128)
                      {
                        v135 = *v129;
                        v136 = v129[1];
                        result = (unint64_t *)*(unsigned int *)(*v129 + 20);
                        v137 = *(_DWORD *)(v136 + 20);
                        if ((_DWORD)result == v137)
                        {
                          v138 = *(double *)(v135 + 32);
                          v139 = *(double *)(v136 + 32);
                          if (v138 == v139)
                          {
                            if (v135 < v136)
                            {
LABEL_215:
                              ++v129;
                              v130 = v134;
                            }
                          }
                          else if (v138 > v139)
                          {
                            goto LABEL_215;
                          }
                        }
                        else if ((int)result < v137)
                        {
                          goto LABEL_215;
                        }
                      }
                      *v132 = *v129;
                    }
                    while (v130 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                    if (v129 == --a2)
                      goto LABEL_212;
                    *v129 = *a2;
                    *a2 = v131;
                    v140 = (char *)v129 - (char *)i + 8;
                    if (v140 < 9)
                      goto LABEL_213;
                    v141 = ((unint64_t)v140 >> 3) - 2;
                    v142 = v141 >> 1;
                    v143 = &i[v141 >> 1];
                    v144 = *v143;
                    v131 = *v129;
                    v145 = *(_DWORD *)(*v143 + 20);
                    v146 = *(_DWORD *)(*v129 + 20);
                    if (v145 != v146)
                    {
                      if (v145 >= v146)
                        goto LABEL_213;
LABEL_235:
                      *v129 = v144;
                      if (v141 >= 2)
                      {
                        while (1)
                        {
                          v149 = v142 - 1;
                          v142 = (v142 - 1) >> 1;
                          v129 = &i[v142];
                          v150 = *v129;
                          v151 = *(_DWORD *)(*v129 + 20);
                          if (v151 == v146)
                          {
                            v152 = *(double *)(v150 + 32);
                            v153 = *(double *)(v131 + 32);
                            if (v152 == v153)
                            {
                              if (v150 >= v131)
                                break;
                            }
                            else if (v152 <= v153)
                            {
                              break;
                            }
                          }
                          else if (v151 >= v146)
                          {
                            break;
                          }
                          *v143 = v150;
                          v143 = &i[v142];
                          if (v149 <= 1)
                            goto LABEL_212;
                        }
                      }
                      v129 = v143;
LABEL_212:
                      *v129 = v131;
                      goto LABEL_213;
                    }
                    v147 = *(double *)(v144 + 32);
                    v148 = *(double *)(v131 + 32);
                    if (v147 == v148)
                    {
                      if (v144 < v131)
                        goto LABEL_235;
                    }
                    else if (v147 > v148)
                    {
                      goto LABEL_235;
                    }
LABEL_213:
                    v20 = v128-- <= 2;
                    if (v20)
                      return result;
                  }
                }
              }
              v108 = *(double *)(v105 + 32);
              v109 = *(double *)(v106 + 32);
              if (v108 == v109)
              {
                if (v105 >= v106)
                  goto LABEL_182;
              }
              else if (v108 <= v109)
              {
                goto LABEL_182;
              }
LABEL_181:
              ++v102;
              v104 = 2 * v103 + 2;
              goto LABEL_182;
            }
            return result;
          }
          v12 = v11 >> 1;
          v13 = &i[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(&v7[v11 >> 1], v7, a2 - 1);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v7, &v7[v11 >> 1], a2 - 1);
            v14 = &v7[v12];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v7 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v7 + 2, &v7[v12 + 1], a2 - 3);
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v14 - 1, v13, &v7[v12 + 1]);
            v15 = *v7;
            *v7 = *v14;
            *v14 = v15;
          }
          --a3;
          v16 = *v7;
          if ((a4 & 1) == 0)
          {
            v18 = *(v7 - 1);
            v17 = *(_DWORD *)(v18 + 20);
            v19 = *(_DWORD *)(v16 + 20);
            v20 = v17 < v19;
            if (v17 == v19)
            {
              v21 = *(double *)(v18 + 32);
              v22 = *(double *)(v16 + 32);
              if (v21 == v22)
              {
                if (v18 < v16)
                  goto LABEL_20;
              }
              else if (v21 > v22)
              {
                goto LABEL_20;
              }
            }
            else
            {
              v17 = *(_DWORD *)(v16 + 20);
              if (v20)
                goto LABEL_20;
            }
            v23 = *v8;
            v24 = *(_DWORD *)(*v8 + 20);
            if (v17 == v24)
            {
              v25 = *(double *)(v16 + 32);
              v26 = *(double *)(v23 + 32);
              if (v25 == v26)
              {
                if (v16 < v23)
                {
LABEL_88:
                  for (i = v7 + 1; ; ++i)
                  {
                    v58 = *i;
                    v59 = *(_DWORD *)(*i + 20);
                    if (v17 == v59)
                    {
                      v60 = *(double *)(v16 + 32);
                      v61 = *(double *)(v58 + 32);
                      if (v60 == v61)
                      {
                        if (v16 < v58)
                          goto LABEL_96;
                      }
                      else if (v60 > v61)
                      {
                        goto LABEL_96;
                      }
                    }
                    else if (v17 < v59)
                    {
                      goto LABEL_96;
                    }
                  }
                }
              }
              else if (v25 > v26)
              {
                goto LABEL_88;
              }
            }
            else if (v17 < v24)
            {
              goto LABEL_88;
            }
            for (i = v7 + 1; i < a2; ++i)
            {
              v54 = *i;
              v55 = *(_DWORD *)(*i + 20);
              if (v17 == v55)
              {
                v56 = *(double *)(v16 + 32);
                v57 = *(double *)(v54 + 32);
                if (v56 == v57)
                {
                  if (v16 < v54)
                    break;
                }
                else if (v56 > v57)
                {
                  break;
                }
              }
              else if (v17 < v55)
              {
                break;
              }
            }
LABEL_96:
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 1; ; --j)
              {
                if (v17 == v24)
                {
                  v64 = *(double *)(v16 + 32);
                  v65 = *(double *)(v23 + 32);
                  if (v64 == v65)
                  {
                    if (v16 >= v23)
                      break;
                  }
                  else if (v64 <= v65)
                  {
                    break;
                  }
                }
                else if (v17 >= v24)
                {
                  break;
                }
                v63 = *(j - 1);
                v23 = v63;
                v24 = *(_DWORD *)(v63 + 20);
              }
            }
            if (i < j)
            {
              v66 = *i;
              v67 = *j;
              do
              {
                *i++ = v67;
                *j = v66;
                while (1)
                {
                  v66 = *i;
                  v68 = *(_DWORD *)(*i + 20);
                  if (v17 != v68)
                  {
                    if (v17 < v68)
                      goto LABEL_118;
                    goto LABEL_110;
                  }
                  v69 = *(double *)(v16 + 32);
                  v70 = *(double *)(v66 + 32);
                  if (v69 == v70)
                    break;
                  if (v69 > v70)
                    goto LABEL_118;
LABEL_110:
                  ++i;
                }
                if (v16 >= v66)
                  goto LABEL_110;
                do
                {
                  while (1)
                  {
LABEL_118:
                    while (1)
                    {
                      v71 = *--j;
                      v67 = v71;
                      v72 = *(_DWORD *)(v71 + 20);
                      if (v17 == v72)
                        break;
                      if (v17 >= v72)
                        goto LABEL_107;
                    }
                    v73 = *(double *)(v16 + 32);
                    v74 = *(double *)(v67 + 32);
                    if (v73 == v74)
                      break;
                    if (v73 <= v74)
                      goto LABEL_107;
                  }
                }
                while (v16 < v67);
LABEL_107:
                ;
              }
              while (i < j);
            }
            v75 = i - 1;
            if (i - 1 != v7)
              *v7 = *v75;
            a4 = 0;
            *v75 = v16;
            continue;
          }
          v17 = *(_DWORD *)(v16 + 20);
LABEL_20:
          for (k = v7 + 1; ; ++k)
          {
            v28 = *k;
            v29 = *(_DWORD *)(*k + 20);
            if (v29 != v17)
            {
              if (v29 >= v17)
                goto LABEL_28;
              continue;
            }
            v30 = *(double *)(v28 + 32);
            v31 = *(double *)(v16 + 32);
            if (v30 == v31)
              break;
            if (v30 <= v31)
              goto LABEL_28;
LABEL_22:
            ;
          }
          if (v28 < v16)
            goto LABEL_22;
LABEL_28:
          v32 = k - 1;
          m = a2 - 1;
          if (k - 1 != v7)
          {
            while (1)
            {
              v34 = *m;
              v35 = *(_DWORD *)(*m + 20);
              if (v35 == v17)
              {
                v36 = *(double *)(v34 + 32);
                v37 = *(double *)(v16 + 32);
                if (v36 == v37)
                {
                  if (v34 < v16)
                    goto LABEL_51;
                }
                else if (v36 > v37)
                {
                  goto LABEL_51;
                }
              }
              else if (v35 < v17)
              {
                goto LABEL_51;
              }
              --m;
            }
          }
          m = a2;
          if (k < a2)
          {
            for (m = a2 - 1; ; --m)
            {
              v39 = *m;
              v40 = *(_DWORD *)(*m + 20);
              if (v40 == v17)
              {
                v41 = *(double *)(v39 + 32);
                v42 = *(double *)(v16 + 32);
                if (v41 == v42)
                {
                  if (v39 < v16 || k >= m)
                    break;
                }
                else if (k >= m || v41 > v42)
                {
                  break;
                }
              }
              else if (k >= m || v40 < v17)
              {
                break;
              }
            }
          }
LABEL_51:
          if (k < m)
          {
            v43 = *m;
            v44 = (unint64_t)k;
            v45 = m;
            do
            {
              *(_QWORD *)v44 = v43;
              v44 += 8;
              *v45 = v28;
              while (1)
              {
                v28 = *(_QWORD *)v44;
                v46 = *(_DWORD *)(*(_QWORD *)v44 + 20);
                if (v46 != v17)
                {
                  if (v46 >= v17)
                    goto LABEL_62;
                  goto LABEL_56;
                }
                v47 = *(double *)(v28 + 32);
                v48 = *(double *)(v16 + 32);
                if (v47 == v48)
                  break;
                if (v47 <= v48)
                  goto LABEL_62;
LABEL_56:
                v44 += 8;
              }
              if (v28 < v16)
                goto LABEL_56;
LABEL_62:
              v32 = (unint64_t *)(v44 - 8);
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v49 = *--v45;
                    v43 = v49;
                    v50 = *(_DWORD *)(v49 + 20);
                    if (v50 == v17)
                      break;
                    if (v50 < v17)
                      goto LABEL_53;
                  }
                  v51 = *(double *)(v43 + 32);
                  v52 = *(double *)(v16 + 32);
                  if (v51 == v52)
                    break;
                  if (v51 > v52)
                    goto LABEL_53;
                }
              }
              while (v43 >= v16);
LABEL_53:
              ;
            }
            while (v44 < (unint64_t)v45);
          }
          if (v32 != v7)
            *v7 = *v32;
          *v32 = v16;
          if (k < m)
            goto LABEL_75;
          v53 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v7, v32);
          i = v32 + 1;
          result = (unint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(v32 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v53)
              continue;
LABEL_75:
            result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,false>(v7, v32, a3, a4 & 1);
            a4 = 0;
            i = v32 + 1;
            continue;
          }
          a2 = v32;
          if (v53)
            return result;
          goto LABEL_2;
        }
        v82 = i + 1;
        v84 = i == a2 || v82 == a2;
        if ((a4 & 1) != 0)
        {
          if (v84)
            return result;
          v85 = 0;
          v86 = i;
LABEL_152:
          v88 = v86;
          v86 = v82;
          v90 = *v88;
          v89 = v88[1];
          v91 = *(_DWORD *)(v89 + 20);
          v92 = *(_DWORD *)(*v88 + 20);
          if (v91 == v92)
          {
            v93 = *(double *)(v89 + 32);
            v94 = *(double *)(v90 + 32);
            if (v93 == v94)
            {
              if (v89 >= v90)
                goto LABEL_151;
            }
            else if (v93 <= v94)
            {
              goto LABEL_151;
            }
          }
          else if (v91 >= v92)
          {
            goto LABEL_151;
          }
          v88[1] = v90;
          v87 = i;
          if (v88 == i)
            goto LABEL_150;
          v95 = v85;
          while (1)
          {
            v96 = *(unint64_t *)((char *)i + v95 - 8);
            v97 = *(_DWORD *)(v96 + 20);
            if (v91 == v97)
            {
              v98 = *(double *)(v89 + 32);
              v99 = *(double *)(v96 + 32);
              if (v98 == v99)
              {
                if (v89 >= v96)
                {
LABEL_168:
                  v87 = v88;
LABEL_150:
                  *v87 = v89;
LABEL_151:
                  v82 = v86 + 1;
                  v85 += 8;
                  if (v86 + 1 == a2)
                    return result;
                  goto LABEL_152;
                }
              }
              else if (v98 <= v99)
              {
                v87 = (unint64_t *)((char *)i + v95);
                goto LABEL_150;
              }
            }
            else if (v91 >= v97)
            {
              goto LABEL_168;
            }
            --v88;
            *(unint64_t *)((char *)i + v95) = v96;
            v95 -= 8;
            if (!v95)
            {
              v87 = i;
              goto LABEL_150;
            }
          }
        }
        if (!v84)
        {
          do
          {
            v154 = v7;
            v7 = v82;
            v156 = *v154;
            v155 = v154[1];
            v157 = *(_DWORD *)(v155 + 20);
            v158 = *(_DWORD *)(*v154 + 20);
            if (v157 == v158)
            {
              v159 = *(double *)(v155 + 32);
              v160 = *(double *)(v156 + 32);
              if (v159 == v160)
              {
                if (v155 < v156)
                {
                  do
                  {
                    while (1)
                    {
LABEL_260:
                      while (1)
                      {
                        v161 = v154;
                        v162 = v156;
                        v163 = *--v154;
                        v156 = v163;
                        v154[2] = v162;
                        v164 = *(_DWORD *)(v163 + 20);
                        if (v157 == v164)
                          break;
                        if (v157 >= v164)
                          goto LABEL_249;
                      }
                      v165 = *(double *)(v155 + 32);
                      v166 = *(double *)(v156 + 32);
                      if (v165 == v166)
                        break;
                      if (v165 <= v166)
                        goto LABEL_249;
                    }
                  }
                  while (v155 < v156);
LABEL_249:
                  *v161 = v155;
                }
              }
              else if (v159 > v160)
              {
                goto LABEL_260;
              }
            }
            else if (v157 < v158)
            {
              goto LABEL_260;
            }
            v82 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  md::LabelPoint *v17;
  double v18;
  md::LabelPoint *v19;
  unint64_t *v20;
  unint64_t v21;
  long double v22;
  long double v23;
  long double v24;
  double v25;
  double v26;
  double v27;
  __double2 v28;
  long double v29;
  long double v30;
  long double v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  long double v36;
  long double v37;
  long double v38;
  double v39;
  double v40;
  double v41;
  __double2 v42;
  long double v43;
  long double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  md::LabelPoint *v49;
  double v50;
  md::LabelPoint *v51;
  unint64_t *v52;
  unint64_t *j;
  md::LabelPoint *v54;
  double v55;
  md::LabelPoint *v56;
  unint64_t v57;
  md::LabelPoint *v58;
  double v59;
  md::LabelPoint *v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  long double v65;
  long double v66;
  long double v67;
  double v68;
  double v69;
  double v70;
  __double2 v71;
  long double v72;
  long double v73;
  long double v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  long double v79;
  long double v80;
  long double v81;
  double v82;
  double v83;
  double v84;
  __double2 v85;
  long double v86;
  long double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  long double v94;
  long double v95;
  long double v96;
  double v97;
  double v98;
  double v99;
  __double2 v100;
  long double v101;
  long double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  long double v106;
  long double v107;
  long double v108;
  double v109;
  double v110;
  double v111;
  __double2 v112;
  long double v113;
  long double v114;
  long double v115;
  long double v116;
  long double v117;
  long double v118;
  double v119;
  double v120;
  double v121;
  __double2 v122;
  long double v123;
  long double v124;
  long double v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  long double v131;
  long double v132;
  long double v133;
  double v134;
  double v135;
  double v136;
  __double2 v137;
  long double v138;
  long double v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  uint64_t v145;
  long double v146;
  long double v147;
  long double v148;
  double v149;
  double v150;
  double v151;
  __double2 v152;
  long double v153;
  long double v154;
  double v155;
  uint64_t v156;
  uint64_t v157;
  long double v158;
  long double v159;
  long double v160;
  double v161;
  double v162;
  double v163;
  __double2 v164;
  long double v165;
  long double v166;
  long double v167;
  BOOL v168;
  unint64_t v169;
  md::LabelPoint *v170;
  double v171;
  md::LabelPoint *v172;
  md::LabelPoint *v173;
  double v174;
  md::LabelPoint *v175;
  uint64_t v176;
  BOOL v177;
  md::LabelPoint *v178;
  double v179;
  md::LabelPoint *v180;
  unint64_t v181;
  unint64_t v182;
  md::LabelPoint *v183;
  double v184;
  md::LabelPoint *v185;
  md::LabelPoint *v186;
  double v187;
  md::LabelPoint *v188;
  md::LabelPoint *v189;
  double v190;
  md::LabelPoint *v191;
  unint64_t v192;
  unint64_t v193;
  md::LabelPoint *v194;
  double v195;
  md::LabelPoint *v196;
  unint64_t *i;
  md::LabelPoint *v198;
  double v199;
  md::LabelPoint *v200;
  unint64_t v201;
  md::LabelPoint *v202;
  double v203;
  md::LabelPoint *v204;
  unint64_t v205;
  long double v206;
  long double v207;
  long double v208;
  double v209;
  double v210;
  double v211;
  __double2 v212;
  long double v213;
  long double v214;
  long double v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  long double v220;
  long double v221;
  long double v222;
  double v223;
  double v224;
  double v225;
  __double2 v226;
  long double v227;
  long double v228;
  long double v229;
  double v230;
  double v231;
  uint64_t v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  long double v237;
  long double v238;
  long double v239;
  double v240;
  double v241;
  double v242;
  __double2 v243;
  long double v244;
  long double v245;
  long double v246;
  double v247;
  double v248;
  uint64_t v249;
  uint64_t v250;
  long double v251;
  long double v252;
  long double v253;
  double v254;
  double v255;
  double v256;
  __double2 v257;
  long double v258;
  long double v259;
  long double v260;
  long double v261;
  long double v262;
  long double v263;
  double v264;
  double v265;
  double v266;
  __double2 v267;
  long double v268;
  long double v269;
  long double v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  BOOL v275;
  long double v276;
  long double v277;
  long double v278;
  double v279;
  double v280;
  double v281;
  __double2 v282;
  long double v283;
  long double v284;
  long double v285;
  double v286;
  double v287;
  uint64_t v288;
  uint64_t v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  long double v293;
  long double v294;
  long double v295;
  double v296;
  double v297;
  double v298;
  __double2 v299;
  long double v300;
  long double v301;
  long double v302;
  double v303;
  double v304;
  uint64_t v305;
  uint64_t v306;
  long double v307;
  long double v308;
  long double v309;
  double v310;
  double v311;
  double v312;
  __double2 v313;
  long double v314;
  long double v315;
  long double v316;
  unint64_t *v317;
  md::LabelPoint *v318;
  double v319;
  md::LabelPoint *v320;
  unint64_t v321;
  md::LabelPoint *v322;
  double v323;
  md::LabelPoint *v324;
  unint64_t v325;
  unint64_t v326;
  md::LabelPoint *v327;
  double v328;
  md::LabelPoint *v329;
  unint64_t *v330;
  BOOL v332;
  uint64_t v333;
  double v334;
  unint64_t *v335;
  unint64_t *v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  md::LabelPoint *v340;
  double v341;
  md::LabelPoint *v342;
  md::LabelPoint *v343;
  double v344;
  md::LabelPoint *v345;
  unint64_t v346;
  uint64_t v347;
  long double v348;
  long double v349;
  long double v350;
  double v351;
  double v352;
  double v353;
  __double2 v354;
  long double v355;
  long double v356;
  long double v357;
  long double v358;
  _QWORD *v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  BOOL v363;
  long double v364;
  long double v365;
  long double v366;
  double v367;
  double v368;
  double v369;
  __double2 v370;
  long double v371;
  long double v372;
  double v373;
  uint64_t v374;
  uint64_t v375;
  BOOL v376;
  uint64_t v377;
  uint64_t v378;
  long double v379;
  long double v380;
  long double v381;
  double v382;
  double v383;
  double v384;
  __double2 v385;
  long double v386;
  long double v387;
  double v388;
  uint64_t v389;
  uint64_t v390;
  long double v391;
  long double v392;
  long double v393;
  double v394;
  double v395;
  double v396;
  __double2 v397;
  long double v398;
  long double v399;
  long double v400;
  long double v401;
  int64_t v402;
  int64_t v403;
  unint64_t *v404;
  int64_t v405;
  uint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  md::LabelPoint *v410;
  double v411;
  md::LabelPoint *v412;
  unint64_t v413;
  unint64_t v414;
  md::LabelPoint *v415;
  double v416;
  md::LabelPoint *v417;
  md::LabelPoint *v418;
  double v419;
  md::LabelPoint *v420;
  unint64_t v421;
  md::LabelPoint *v422;
  double v423;
  md::LabelPoint *v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  md::LabelPoint *v429;
  double v430;
  md::LabelPoint *v431;
  unint64_t v432;
  md::LabelPoint *v433;
  double v434;
  md::LabelPoint *v435;
  md::LabelPoint *v436;
  double v437;
  md::LabelPoint *v438;
  md::LabelPoint *v439;
  double v440;
  md::LabelPoint *v441;
  uint64_t v442;
  double v443;
  unint64_t *v444;
  uint64_t v446;
  unint64_t *v447;
  unint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  BOOL v455;
  long double v456;
  long double v457;
  long double v458;
  double v459;
  double v460;
  double v461;
  __double2 v462;
  long double v463;
  long double v464;
  double v465;
  uint64_t v466;
  uint64_t v467;
  BOOL v468;
  uint64_t v469;
  uint64_t v470;
  long double v471;
  long double v472;
  long double v473;
  double v474;
  double v475;
  double v476;
  __double2 v477;
  long double v478;
  long double v479;
  double v480;
  long double v481;
  long double v482;
  long double v483;
  double v484;
  double v485;
  double v486;
  __double2 v487;
  double v488;
  long double v489;
  long double v490;
  long double v491;
  uint64_t v492;
  uint64_t v493;
  long double v494;
  long double v495;
  long double v496;
  double v497;
  double v498;
  double v499;
  __double2 v500;
  long double v501;
  long double v502;
  long double v503;
  long double v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  md::LabelPoint *v511;
  double v512;
  md::LabelPoint *v513;
  md::LabelPoint *v514;
  double v515;
  md::LabelPoint *v516;
  unint64_t v517;
  md::LabelPoint *v518;
  double v519;
  md::LabelPoint *v520;
  unint64_t v521;
  unint64_t *v522;
  unint64_t v523;
  md::LabelPoint *v524;
  double v525;
  md::LabelPoint *v526;
  double v527;
  unint64_t *v528;
  unint64_t v529;
  unint64_t v530;
  md::LabelPoint *v531;
  double v532;
  md::LabelPoint *v533;
  md::LabelPoint *v534;
  double v535;
  md::LabelPoint *v536;
  unint64_t v537;
  long double v538;
  long double v539;
  long double v540;
  double v541;
  double v542;
  double v543;
  __double2 v544;
  long double v545;
  long double v546;
  long double v547;
  long double v548;
  unint64_t *v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  long double v555;
  long double v556;
  long double v557;
  double v558;
  double v559;
  double v560;
  __double2 v561;
  long double v562;
  long double v563;
  double v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v568;
  uint64_t v569;
  long double v570;
  long double v571;
  long double v572;
  double v573;
  double v574;
  double v575;
  __double2 v576;
  long double v577;
  long double v578;
  double v579;
  uint64_t v580;
  uint64_t v581;
  long double v582;
  long double v583;
  long double v584;
  double v585;
  double v586;
  double v587;
  __double2 v588;
  long double v589;
  long double v590;
  long double v591;
  long double v592;
  md::LabelPoint *v593;
  double v594;
  md::LabelPoint *v595;
  unint64_t v596;
  unint64_t *v597;
  unint64_t *v598;
  unint64_t *v600;
  unint64_t *v601;
  uint64_t v602;
  double v603;
  double v604;
  double v605;
  double v606;
  unint64_t *v607;
  unint64_t v608;

void std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  md::LabelPoint *v20;
  double v21;
  md::LabelPoint *v22;
  unint64_t *v23;
  unint64_t v24;
  md::LabelPoint *v25;
  double v26;
  md::LabelPoint *v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  long double v33;
  long double v34;
  long double v35;
  double v36;
  double v37;
  __double2 v38;
  long double v39;
  long double v40;
  long double v41;
  float64x2_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  long double v47;
  long double v48;
  long double v49;
  double v50;
  double v51;
  __double2 v52;
  long double v53;
  long double v54;
  long double v55;
  float64x2_t v56;
  unint64_t *v57;
  unint64_t *j;
  md::LabelPoint *v59;
  double v60;
  md::LabelPoint *v61;
  unint64_t v62;
  md::LabelPoint *v63;
  double v64;
  md::LabelPoint *v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  uint64_t v73;
  long double v75;
  long double v76;
  long double v77;
  double v78;
  double v79;
  __double2 v80;
  long double v81;
  long double v82;
  long double v83;
  float64x2_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  long double v89;
  long double v90;
  long double v91;
  double v92;
  double v93;
  __double2 v94;
  long double v95;
  long double v96;
  long double v97;
  float64x2_t v98;
  __n128 v99;
  uint64_t v100;
  float64x2_t v101;
  uint64_t v102;
  long double v103;
  long double v104;
  long double v105;
  double v106;
  double v107;
  __double2 v108;
  long double v109;
  long double v110;
  long double v111;
  float64x2_t v112;
  uint64_t v113;
  uint64_t v114;
  long double v115;
  long double v116;
  long double v117;
  double v118;
  double v119;
  __double2 v120;
  long double v121;
  long double v122;
  long double v123;
  float64x2_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  float64x2_t v128;
  uint64_t v129;
  long double v131;
  long double v132;
  long double v133;
  double v134;
  double v135;
  __double2 v136;
  long double v137;
  long double v138;
  long double v139;
  float64x2_t v140;
  uint64_t v141;
  uint64_t v142;
  long double v144;
  long double v145;
  long double v146;
  double v147;
  double v148;
  __double2 v149;
  long double v150;
  long double v151;
  long double v152;
  float64x2_t v153;
  uint64_t v154;
  float64x2_t v155;
  uint64_t v156;
  long double v157;
  long double v158;
  long double v159;
  double v160;
  double v161;
  __double2 v162;
  long double v163;
  long double v164;
  long double v165;
  float64x2_t v166;
  uint64_t v167;
  uint64_t v168;
  long double v169;
  long double v170;
  long double v171;
  double v172;
  double v173;
  __double2 v174;
  long double v175;
  long double v176;
  long double v177;
  float64x2_t v178;
  unint64_t v180;
  md::LabelPoint *v181;
  double v182;
  md::LabelPoint *v183;
  md::LabelPoint *v184;
  double v185;
  md::LabelPoint *v186;
  double *v187;
  BOOL v188;
  md::LabelPoint *v189;
  double v190;
  md::LabelPoint *v191;
  unint64_t v192;
  unint64_t v193;
  md::LabelPoint *v194;
  double v195;
  md::LabelPoint *v196;
  md::LabelPoint *v197;
  double v198;
  md::LabelPoint *v199;
  md::LabelPoint *v200;
  double v201;
  md::LabelPoint *v202;
  unint64_t v203;
  unint64_t v204;
  md::LabelPoint *v205;
  double v206;
  md::LabelPoint *v207;
  unint64_t *i;
  md::LabelPoint *v209;
  double v210;
  md::LabelPoint *v211;
  unint64_t v212;
  md::LabelPoint *v213;
  double v214;
  md::LabelPoint *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  float64x2_t v219;
  uint64_t v220;
  long double v222;
  long double v223;
  long double v224;
  double v225;
  double v226;
  __double2 v227;
  long double v228;
  long double v229;
  long double v230;
  float64x2_t v231;
  uint64_t v232;
  __n128 v233;
  uint64_t v234;
  long double v236;
  long double v237;
  long double v238;
  double v239;
  double v240;
  __double2 v241;
  long double v242;
  long double v243;
  long double v244;
  float64x2_t v245;
  __n128 v246;
  uint64_t v247;
  float64x2_t v248;
  uint64_t v249;
  long double v250;
  long double v251;
  long double v252;
  double v253;
  double v254;
  __double2 v255;
  long double v256;
  long double v257;
  long double v258;
  float64x2_t v259;
  uint64_t v260;
  uint64_t v261;
  long double v262;
  long double v263;
  long double v264;
  double v265;
  double v266;
  __double2 v267;
  long double v268;
  long double v269;
  long double v270;
  float64x2_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  float64x2_t v275;
  uint64_t v276;
  long double v278;
  long double v279;
  long double v280;
  double v281;
  double v282;
  __double2 v283;
  long double v284;
  long double v285;
  long double v286;
  float64x2_t v287;
  uint64_t v288;
  uint64_t v289;
  long double v291;
  long double v292;
  long double v293;
  double v294;
  double v295;
  __double2 v296;
  long double v297;
  long double v298;
  long double v299;
  float64x2_t v300;
  uint64_t v301;
  float64x2_t v302;
  uint64_t v303;
  long double v304;
  long double v305;
  long double v306;
  double v307;
  double v308;
  __double2 v309;
  long double v310;
  long double v311;
  long double v312;
  float64x2_t v313;
  uint64_t v314;
  uint64_t v315;
  long double v316;
  long double v317;
  long double v318;
  double v319;
  double v320;
  __double2 v321;
  long double v322;
  long double v323;
  long double v324;
  float64x2_t v325;
  unint64_t *v326;
  md::LabelPoint *v327;
  double v328;
  md::LabelPoint *v329;
  unint64_t v330;
  md::LabelPoint *v331;
  double v332;
  md::LabelPoint *v333;
  unint64_t v334;
  unint64_t v335;
  md::LabelPoint *v336;
  double v337;
  md::LabelPoint *v338;
  unint64_t *v339;
  BOOL v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t *v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  md::LabelPoint *v348;
  double v349;
  md::LabelPoint *v350;
  md::LabelPoint *v351;
  double v352;
  md::LabelPoint *v353;
  unint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  BOOL v360;
  long double v361;
  long double v362;
  long double v363;
  double v364;
  double v365;
  __double2 v366;
  long double v367;
  long double v368;
  long double v369;
  float64x2_t v370;
  uint64_t v371;
  uint64_t v372;
  BOOL v373;
  long double v374;
  long double v375;
  long double v376;
  double v377;
  double v378;
  __double2 v379;
  long double v380;
  long double v381;
  long double v382;
  float64x2_t v383;
  float64x2_t v384;
  uint64_t v385;
  uint64_t v386;
  long double v387;
  long double v388;
  long double v389;
  double v390;
  double v391;
  __double2 v392;
  long double v393;
  long double v394;
  long double v395;
  float64x2_t v396;
  uint64_t v397;
  uint64_t v398;
  long double v399;
  long double v400;
  long double v401;
  double v402;
  double v403;
  __double2 v404;
  long double v405;
  long double v406;
  long double v407;
  float64x2_t v408;
  float64x2_t v409;
  int64_t v410;
  int64_t v411;
  unint64_t *v412;
  int64_t v413;
  uint64_t v414;
  unint64_t *v415;
  unint64_t v416;
  unint64_t v417;
  md::LabelPoint *v418;
  double v419;
  md::LabelPoint *v420;
  unint64_t v421;
  unint64_t v422;
  md::LabelPoint *v423;
  double v424;
  md::LabelPoint *v425;
  md::LabelPoint *v426;
  double v427;
  md::LabelPoint *v428;
  unint64_t v429;
  md::LabelPoint *v430;
  double v431;
  md::LabelPoint *v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  md::LabelPoint *v437;
  double v438;
  md::LabelPoint *v439;
  unint64_t v440;
  md::LabelPoint *v441;
  double v442;
  md::LabelPoint *v443;
  md::LabelPoint *v444;
  double v445;
  md::LabelPoint *v446;
  md::LabelPoint *v447;
  double v448;
  md::LabelPoint *v449;
  uint64_t v450;
  unint64_t *v451;
  uint64_t v453;
  unint64_t *v454;
  unint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  BOOL v462;
  long double v463;
  long double v464;
  long double v465;
  double v466;
  double v467;
  __double2 v468;
  long double v469;
  long double v470;
  long double v471;
  float64x2_t v472;
  uint64_t v473;
  uint64_t v474;
  BOOL v475;
  long double v476;
  long double v477;
  long double v478;
  double v479;
  double v480;
  __double2 v481;
  long double v482;
  long double v483;
  long double v484;
  float64x2_t v485;
  float64x2_t v486;
  uint64_t v487;
  uint64_t v488;
  long double v489;
  long double v490;
  long double v491;
  double v492;
  double v493;
  __double2 v494;
  long double v495;
  long double v496;
  long double v497;
  float64x2_t v498;
  uint64_t v499;
  uint64_t v500;
  long double v501;
  long double v502;
  long double v503;
  double v504;
  double v505;
  __double2 v506;
  long double v507;
  long double v508;
  long double v509;
  float64x2_t v510;
  float64x2_t v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  unint64_t v517;
  md::LabelPoint *v518;
  double v519;
  md::LabelPoint *v520;
  md::LabelPoint *v521;
  double v522;
  md::LabelPoint *v523;
  unint64_t v524;
  md::LabelPoint *v525;
  double v526;
  md::LabelPoint *v527;
  unint64_t v528;
  unint64_t *v529;
  unint64_t v530;
  md::LabelPoint *v531;
  double v532;
  md::LabelPoint *v533;
  unint64_t *v534;
  unint64_t v535;
  unint64_t v536;
  md::LabelPoint *v537;
  double v538;
  md::LabelPoint *v539;
  md::LabelPoint *v540;
  double v541;
  md::LabelPoint *v542;
  unint64_t v543;
  unint64_t *v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  long double v550;
  long double v551;
  long double v552;
  double v553;
  double v554;
  __double2 v555;
  long double v556;
  long double v557;
  long double v558;
  float64x2_t v559;
  uint64_t v560;
  uint64_t v561;
  long double v563;
  long double v564;
  long double v565;
  double v566;
  double v567;
  __double2 v568;
  long double v569;
  long double v570;
  long double v571;
  float64x2_t v572;
  float64x2_t v573;
  uint64_t v574;
  uint64_t v575;
  long double v576;
  long double v577;
  long double v578;
  double v579;
  double v580;
  __double2 v581;
  long double v582;
  long double v583;
  long double v584;
  float64x2_t v585;
  uint64_t v586;
  uint64_t v587;
  long double v588;
  long double v589;
  long double v590;
  double v591;
  double v592;
  __double2 v593;
  long double v594;
  long double v595;
  long double v596;
  float64x2_t v597;
  float64x2_t v598;
  md::LabelPoint *v599;
  double v600;
  md::LabelPoint *v601;
  unint64_t v602;
  unint64_t *v603;
  unint64_t *v604;
  uint64_t v606;
  unint64_t v607;
  unint64_t *v608;
  unint64_t *v609;
  unint64_t *v610;
  long double v611;
  long double v612;
  long double v613;
  long double v614;
  long double v615;
  long double v616;
  long double v617;
  long double v618;
  long double v619;
  long double v620;
  long double v621;
  long double v622;
  long double v623;
  long double v624;
  long double v625;
  long double v626;
  __n128 v627;
  long double v628;
  float64x2_t v629;
  long double v630;
  float64x2_t v631;
  long double v632;
  float64x2_t v633;
  long double v634;
  float64x2_t v635;
  long double v636;
  float64x2_t v637;
  long double v638;
  float64x2_t v639;
  long double v640;
  float64x2_t v641;
  long double v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  long double v648;
  float64x2_t v649;
  long double v650;
  float64x2_t v651;
  long double v652;
  float64x2_t v653;
  long double v654;
  float64x2_t v655;
  long double v656;
  float64x2_t v657;
  long double v658;
  float64x2_t v659;
  float64x2_t v660;

  __asm { FMOV            V0.2D, #0.5 }
  v647 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  v660 = _Q0;
LABEL_2:
  v10 = a2 - 1;
  v603 = a2 - 3;
  v604 = a2 - 2;
  v608 = a2;
  while (2)
  {
    v11 = (char *)a2 - (char *)a1;
    v12 = a2 - a1;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v334 = *v10;
        v335 = *a1;
        v336 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v10 + 56))(*v10);
        v337 = *(double *)md::LabelPoint::mercatorPoint(v336);
        v338 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v335 + 56))(v335);
        if (v337 == *(double *)md::LabelPoint::mercatorPoint(v338))
        {
          if (v334 >= v335)
            return;
        }
        else
        {
          v599 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v334 + 56))(v334);
          v600 = *(double *)md::LabelPoint::mercatorPoint(v599);
          v601 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v335 + 56))(v335);
          if (v600 >= *(double *)md::LabelPoint::mercatorPoint(v601))
            return;
        }
        v602 = *a1;
        *a1 = *v10;
        *v10 = v602;
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a1 + 1, v10);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, v10);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>(a1, a1 + 1, a1 + 2, a1 + 3, v10);
        return;
      default:
        v610 = a1;
        if (v11 > 191)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v410 = (unint64_t)(v12 - 2) >> 1;
              v411 = v410;
              while (1)
              {
                v413 = v411;
                if (v410 < v411)
                  goto LABEL_236;
                v414 = (2 * v411) | 1;
                v415 = &a1[v414];
                if (2 * v411 + 2 < v12)
                {
                  v416 = *v415;
                  v417 = v415[1];
                  v418 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v415 + 56))(*v415);
                  v419 = *(double *)md::LabelPoint::mercatorPoint(v418);
                  v420 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v417 + 56))(v417);
                  if (v419 == *(double *)md::LabelPoint::mercatorPoint(v420))
                  {
                    if (v416 >= v417)
                      goto LABEL_242;
LABEL_241:
                    ++v415;
                    v414 = 2 * v413 + 2;
                    goto LABEL_242;
                  }
                  v447 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v416 + 56))(v416);
                  v448 = *(double *)md::LabelPoint::mercatorPoint(v447);
                  v449 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v417 + 56))(v417);
                  if (v448 < *(double *)md::LabelPoint::mercatorPoint(v449))
                    goto LABEL_241;
                }
LABEL_242:
                v421 = *v415;
                a1 = v610;
                v422 = v610[v413];
                v423 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v415 + 56))(*v415);
                v424 = *(double *)md::LabelPoint::mercatorPoint(v423);
                v425 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v422 + 56))(v422);
                if (v424 == *(double *)md::LabelPoint::mercatorPoint(v425))
                {
                  v410 = (unint64_t)(v12 - 2) >> 1;
                  if (v421 >= v422)
                    goto LABEL_246;
                }
                else
                {
                  v426 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v421 + 56))(v421);
                  v427 = *(double *)md::LabelPoint::mercatorPoint(v426);
                  v428 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v422 + 56))(v422);
                  v410 = (unint64_t)(v12 - 2) >> 1;
                  if (v427 >= *(double *)md::LabelPoint::mercatorPoint(v428))
                  {
LABEL_246:
                    v429 = v610[v413];
                    v610[v413] = *v415;
                    if (v410 < v414)
                    {
LABEL_234:
                      v412 = v415;
LABEL_235:
                      *v412 = v429;
                      goto LABEL_236;
                    }
                    while (2)
                    {
                      v433 = 2 * v414;
                      v414 = (2 * v414) | 1;
                      v412 = &a1[v414];
                      v434 = v433 + 2;
                      if (v433 + 2 < v12)
                      {
                        v435 = *v412;
                        v436 = v412[1];
                        v437 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v412 + 56))(*v412);
                        v438 = *(double *)md::LabelPoint::mercatorPoint(v437);
                        v439 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v436 + 56))(v436);
                        if (v438 == *(double *)md::LabelPoint::mercatorPoint(v439))
                        {
                          _CF = v435 >= v436;
                          v410 = (unint64_t)(v12 - 2) >> 1;
                          if (!_CF)
                            goto LABEL_253;
                        }
                        else
                        {
                          v444 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v435 + 56))(v435);
                          v445 = *(double *)md::LabelPoint::mercatorPoint(v444);
                          v446 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v436 + 56))(v436);
                          v410 = (unint64_t)(v12 - 2) >> 1;
                          if (v445 < *(double *)md::LabelPoint::mercatorPoint(v446))
                          {
LABEL_253:
                            ++v412;
                            v414 = v434;
                          }
                        }
                      }
                      v440 = *v412;
                      v441 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v412 + 56))(*v412);
                      v442 = *(double *)md::LabelPoint::mercatorPoint(v441);
                      v443 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v429 + 56))(v429);
                      if (v442 == *(double *)md::LabelPoint::mercatorPoint(v443))
                      {
                        a1 = v610;
                        if (v440 < v429)
                          goto LABEL_234;
                      }
                      else
                      {
                        v430 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v440 + 56))(v440);
                        v431 = *(double *)md::LabelPoint::mercatorPoint(v430);
                        v432 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v429 + 56))(v429);
                        a1 = v610;
                        if (v431 < *(double *)md::LabelPoint::mercatorPoint(v432))
                          goto LABEL_234;
                      }
                      *v415 = *v412;
                      v415 = v412;
                      if (v410 < v414)
                        goto LABEL_235;
                      continue;
                    }
                  }
                }
LABEL_236:
                v411 = v413 - 1;
                if (!v413)
                {
                  v450 = (unint64_t)v11 >> 3;
                  v645 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
                  v451 = v608;
                  while (1)
                  {
                    v609 = v451;
                    v453 = 0;
                    v607 = *a1;
                    v454 = a1;
                    do
                    {
                      v455 = v454;
                      v454 += v453 + 1;
                      v456 = 2 * v453;
                      v453 = (2 * v453) | 1;
                      v457 = v456 + 2;
                      if (v456 + 2 < v450)
                      {
                        v458 = *v454;
                        v459 = v454[1];
                        v460 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v454 + 56))(*v454);
                        v461 = v460;
                        if (*(_BYTE *)(v460 + 45))
                          v462 = 1;
                        else
                          v462 = *(_BYTE *)(v460 + 46) == 0;
                        if (v462)
                        {
                          v653.f64[0] = *(float64_t *)(v460 + 24);
                        }
                        else
                        {
                          v463 = *(double *)v460;
                          v464 = *(double *)(v460 + 8);
                          v465 = *(double *)(v460 + 16);
                          v466 = sqrt(v463 * v463 + v464 * v464);
                          v467 = atan2(v465, v466 * 0.996647189);
                          v652 = atan2(v464, v463);
                          v468 = __sincos_stret(v467);
                          v469 = atan2(v465 + v468.__sinval * v468.__sinval * 42841.3115 * v468.__sinval, v466 + v468.__cosval * v468.__cosval * -42697.6727 * v468.__cosval);
                          v470 = tan(v469 * 0.5 + 0.785398163);
                          v471 = log(v470);
                          v472.f64[0] = v652;
                          v472.f64[1] = v471;
                          v653 = vmlaq_f64(v660, v645, v472);
                          *(float64x2_t *)(v461 + 24) = v653;
                          *(_BYTE *)(v461 + 45) = 1;
                        }
                        v473 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v459 + 56))(v459);
                        v474 = v473;
                        if (*(_BYTE *)(v473 + 45))
                          v475 = 1;
                        else
                          v475 = *(_BYTE *)(v473 + 46) == 0;
                        if (v475)
                        {
                          v486.f64[0] = *(float64_t *)(v473 + 24);
                        }
                        else
                        {
                          v476 = *(double *)v473;
                          v477 = *(double *)(v473 + 8);
                          v478 = *(double *)(v473 + 16);
                          v479 = sqrt(v476 * v476 + v477 * v477);
                          v480 = atan2(v478, v479 * 0.996647189);
                          v622 = atan2(v477, v476);
                          v481 = __sincos_stret(v480);
                          v482 = atan2(v478 + v481.__sinval * v481.__sinval * 42841.3115 * v481.__sinval, v479 + v481.__cosval * v481.__cosval * -42697.6727 * v481.__cosval);
                          v483 = tan(v482 * 0.5 + 0.785398163);
                          v484 = log(v483);
                          v485.f64[0] = v622;
                          v485.f64[1] = v484;
                          v486 = vmlaq_f64(v660, v645, v485);
                          *(float64x2_t *)(v474 + 24) = v486;
                          *(_BYTE *)(v474 + 45) = 1;
                        }
                        if (v653.f64[0] == v486.f64[0])
                        {
                          if (v458 < v459)
                            goto LABEL_265;
                        }
                        else
                        {
                          v487 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v458 + 56))(v458);
                          v488 = v487;
                          if (*(_BYTE *)(v487 + 45) || !*(_BYTE *)(v487 + 46))
                          {
                            v655.f64[0] = *(float64_t *)(v487 + 24);
                          }
                          else
                          {
                            v489 = *(double *)v487;
                            v490 = *(double *)(v487 + 8);
                            v491 = *(double *)(v487 + 16);
                            v492 = sqrt(v489 * v489 + v490 * v490);
                            v493 = atan2(v491, v492 * 0.996647189);
                            v654 = atan2(v490, v489);
                            v494 = __sincos_stret(v493);
                            v495 = atan2(v491 + v494.__sinval * v494.__sinval * 42841.3115 * v494.__sinval, v492 + v494.__cosval * v494.__cosval * -42697.6727 * v494.__cosval);
                            v496 = tan(v495 * 0.5 + 0.785398163);
                            v497 = log(v496);
                            v498.f64[0] = v654;
                            v498.f64[1] = v497;
                            v655 = vmlaq_f64(v660, v645, v498);
                            *(float64x2_t *)(v488 + 24) = v655;
                            *(_BYTE *)(v488 + 45) = 1;
                          }
                          v499 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v459 + 56))(v459);
                          v500 = v499;
                          if (*(_BYTE *)(v499 + 45) || !*(_BYTE *)(v499 + 46))
                          {
                            v511.f64[0] = *(float64_t *)(v499 + 24);
                          }
                          else
                          {
                            v501 = *(double *)v499;
                            v502 = *(double *)(v499 + 8);
                            v503 = *(double *)(v499 + 16);
                            v504 = sqrt(v501 * v501 + v502 * v502);
                            v505 = atan2(v503, v504 * 0.996647189);
                            v623 = atan2(v502, v501);
                            v506 = __sincos_stret(v505);
                            v507 = atan2(v503 + v506.__sinval * v506.__sinval * 42841.3115 * v506.__sinval, v504 + v506.__cosval * v506.__cosval * -42697.6727 * v506.__cosval);
                            v508 = tan(v507 * 0.5 + 0.785398163);
                            v509 = log(v508);
                            v510.f64[0] = v623;
                            v510.f64[1] = v509;
                            v511 = vmlaq_f64(v660, v645, v510);
                            *(float64x2_t *)(v500 + 24) = v511;
                            *(_BYTE *)(v500 + 45) = 1;
                          }
                          if (v655.f64[0] < v511.f64[0])
                          {
LABEL_265:
                            ++v454;
                            v453 = v457;
                          }
                        }
                      }
                      *v455 = *v454;
                    }
                    while (v453 <= (uint64_t)((unint64_t)(v450 - 2) >> 1));
                    v451 = v609 - 1;
                    if (v454 == v609 - 1)
                    {
                      *v454 = v607;
                      a1 = v610;
                    }
                    else
                    {
                      *v454 = *v451;
                      *v451 = v607;
                      a1 = v610;
                      v512 = (char *)v454 - (char *)v610 + 8;
                      if (v512 >= 9)
                      {
                        v513 = ((unint64_t)v512 >> 3) - 2;
                        v514 = v513 >> 1;
                        v515 = &v610[v513 >> 1];
                        v516 = *v515;
                        v517 = *v454;
                        v518 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v515 + 56))(*v515);
                        v519 = *(double *)md::LabelPoint::mercatorPoint(v518);
                        v520 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v517 + 56))(v517);
                        if (v519 == *(double *)md::LabelPoint::mercatorPoint(v520))
                        {
                          if (v516 < v517)
                          {
LABEL_299:
                            v524 = *v454;
                            *v454 = *v515;
                            if (v513 >= 2)
                            {
                              while (1)
                              {
                                v528 = v514 - 1;
                                v514 = (v514 - 1) >> 1;
                                v529 = &v610[v514];
                                v530 = *v529;
                                v531 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v529 + 56))(*v529);
                                v532 = *(double *)md::LabelPoint::mercatorPoint(v531);
                                v533 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v524 + 56))(v524);
                                if (v532 == *(double *)md::LabelPoint::mercatorPoint(v533))
                                {
                                  if (v530 >= v524)
                                    break;
                                }
                                else
                                {
                                  v525 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v530 + 56))(v530);
                                  v526 = *(double *)md::LabelPoint::mercatorPoint(v525);
                                  v527 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v524 + 56))(v524);
                                  if (v526 >= *(double *)md::LabelPoint::mercatorPoint(v527))
                                    break;
                                }
                                *v515 = *v529;
                                v515 = &v610[v514];
                                if (v528 <= 1)
                                  goto LABEL_306;
                              }
                            }
                            v529 = v515;
LABEL_306:
                            *v529 = v524;
                          }
                        }
                        else
                        {
                          v521 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v516 + 56))(v516);
                          v522 = *(double *)md::LabelPoint::mercatorPoint(v521);
                          v523 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v517 + 56))(v517);
                          if (v522 < *(double *)md::LabelPoint::mercatorPoint(v523))
                            goto LABEL_299;
                        }
                      }
                    }
                    if (v450-- <= 2)
                      return;
                  }
                }
              }
            }
            return;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &a1[v13];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(&a1[v13], a1, v10);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1, &a1[v13], v10);
            v15 = v13;
            v16 = &a1[v13];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1 + 1, v16 - 1, v604);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(a1 + 2, &a1[v15 + 1], v603);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v16 - 1, v14, &a1[v15 + 1]);
            v17 = *a1;
            *a1 = *v16;
            *v16 = v17;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v19 = *(a1 - 1);
            v18 = *a1;
            v20 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 56))(v19);
            v21 = *(double *)md::LabelPoint::mercatorPoint(v20);
            v22 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 56))(v18);
            if (v21 == *(double *)md::LabelPoint::mercatorPoint(v22))
            {
              if (v19 < v18)
                goto LABEL_12;
            }
            else
            {
              v189 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 56))(v19);
              v190 = *(double *)md::LabelPoint::mercatorPoint(v189);
              v191 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 56))(v18);
              if (v190 < *(double *)md::LabelPoint::mercatorPoint(v191))
                goto LABEL_12;
            }
            v192 = *a1;
            v193 = *v10;
            v194 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a1 + 56))(*a1);
            v195 = *(double *)md::LabelPoint::mercatorPoint(v194);
            v196 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v193 + 56))(v193);
            if (v195 == *(double *)md::LabelPoint::mercatorPoint(v196))
            {
              if (v192 < v193)
                goto LABEL_111;
LABEL_174:
              while (++a1 < v608)
              {
                v330 = *a1;
                v331 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                v332 = *(double *)md::LabelPoint::mercatorPoint(v331);
                v333 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v330 + 56))(v330);
                if (v332 == *(double *)md::LabelPoint::mercatorPoint(v333))
                {
                  if (v192 < v330)
                    break;
                }
                else
                {
                  v327 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                  v328 = *(double *)md::LabelPoint::mercatorPoint(v327);
                  v329 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v330 + 56))(v330);
                  if (v328 < *(double *)md::LabelPoint::mercatorPoint(v329))
                    break;
                }
              }
            }
            else
            {
              v197 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
              v198 = *(double *)md::LabelPoint::mercatorPoint(v197);
              v199 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v193 + 56))(v193);
              if (v198 >= *(double *)md::LabelPoint::mercatorPoint(v199))
                goto LABEL_174;
              do
              {
LABEL_111:
                while (1)
                {
                  v204 = a1[1];
                  ++a1;
                  v203 = v204;
                  v205 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                  v206 = *(double *)md::LabelPoint::mercatorPoint(v205);
                  v207 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v203 + 56))(v203);
                  if (v206 == *(double *)md::LabelPoint::mercatorPoint(v207))
                    break;
                  v200 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                  v201 = *(double *)md::LabelPoint::mercatorPoint(v200);
                  v202 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v203 + 56))(v203);
                  if (v201 < *(double *)md::LabelPoint::mercatorPoint(v202))
                    goto LABEL_113;
                }
              }
              while (v192 >= v203);
            }
LABEL_113:
            i = v608;
            if (a1 >= v608)
              goto LABEL_169;
            for (i = v10; ; --i)
            {
              v212 = *i;
              v213 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
              v214 = *(double *)md::LabelPoint::mercatorPoint(v213);
              v215 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v212 + 56))(v212);
              if (v214 == *(double *)md::LabelPoint::mercatorPoint(v215))
                break;
              v209 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
              v210 = *(double *)md::LabelPoint::mercatorPoint(v209);
              v211 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v212 + 56))(v212);
              if (v210 >= *(double *)md::LabelPoint::mercatorPoint(v211))
                goto LABEL_169;
LABEL_116:
              ;
            }
            if (v192 < v212)
              goto LABEL_116;
LABEL_169:
            while (a1 < i)
            {
              v216 = *a1;
              *a1++ = *i;
              *i = v216;
              while (1)
              {
                v217 = *a1;
                v218 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                v220 = v218;
                if (*(_BYTE *)(v218 + 45) || *(_BYTE *)(v218 + 46) == 0)
                {
                  v219.f64[0] = *(float64_t *)(v218 + 24);
                  v637 = v219;
                }
                else
                {
                  v222 = *(double *)v218;
                  v223 = *(double *)(v218 + 8);
                  v224 = *(double *)(v218 + 16);
                  v225 = sqrt(v222 * v222 + v223 * v223);
                  v226 = atan2(v224, v225 * 0.996647189);
                  v636 = atan2(v223, v222);
                  v227 = __sincos_stret(v226);
                  v228 = atan2(v224 + v227.__sinval * v227.__sinval * 42841.3115 * v227.__sinval, v225 + v227.__cosval * v227.__cosval * -42697.6727 * v227.__cosval);
                  v229 = tan(v228 * 0.5 + 0.785398163);
                  v230 = log(v229);
                  v231.f64[0] = v636;
                  v231.f64[1] = v230;
                  v637 = vmlaq_f64(v660, v647, v231);
                  *(float64x2_t *)(v220 + 24) = v637;
                  *(_BYTE *)(v220 + 45) = 1;
                }
                v232 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v217 + 56))(v217);
                v234 = v232;
                if (*(_BYTE *)(v232 + 45) || *(_BYTE *)(v232 + 46) == 0)
                {
                  v233.n128_u64[0] = *(_QWORD *)(v232 + 24);
                }
                else
                {
                  v236 = *(double *)v232;
                  v237 = *(double *)(v232 + 8);
                  v238 = *(double *)(v232 + 16);
                  v239 = sqrt(v236 * v236 + v237 * v237);
                  v240 = atan2(v238, v239 * 0.996647189);
                  v616 = atan2(v237, v236);
                  v241 = __sincos_stret(v240);
                  v242 = atan2(v238 + v241.__sinval * v241.__sinval * 42841.3115 * v241.__sinval, v239 + v241.__cosval * v241.__cosval * -42697.6727 * v241.__cosval);
                  v243 = tan(v242 * 0.5 + 0.785398163);
                  v244 = log(v243);
                  v245.f64[0] = v616;
                  v245.f64[1] = v244;
                  v233 = (__n128)vmlaq_f64(v660, v647, v245);
                  *(__n128 *)(v234 + 24) = v233;
                  *(_BYTE *)(v234 + 45) = 1;
                }
                v246 = (__n128)v637;
                if (v637.f64[0] != v233.n128_f64[0])
                  break;
                if (v192 < v217)
                  goto LABEL_147;
LABEL_122:
                ++a1;
              }
              v247 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
              v249 = v247;
              if (*(_BYTE *)(v247 + 45) || !*(_BYTE *)(v247 + 46))
              {
                v248.f64[0] = *(float64_t *)(v247 + 24);
                v639 = v248;
              }
              else
              {
                v250 = *(double *)v247;
                v251 = *(double *)(v247 + 8);
                v252 = *(double *)(v247 + 16);
                v253 = sqrt(v250 * v250 + v251 * v251);
                v254 = atan2(v252, v253 * 0.996647189);
                v638 = atan2(v251, v250);
                v255 = __sincos_stret(v254);
                v256 = atan2(v252 + v255.__sinval * v255.__sinval * 42841.3115 * v255.__sinval, v253 + v255.__cosval * v255.__cosval * -42697.6727 * v255.__cosval);
                v257 = tan(v256 * 0.5 + 0.785398163);
                v258 = log(v257);
                v259.f64[0] = v638;
                v259.f64[1] = v258;
                v639 = vmlaq_f64(v660, v647, v259);
                *(float64x2_t *)(v249 + 24) = v639;
                *(_BYTE *)(v249 + 45) = 1;
              }
              v260 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v217 + 56))(v217);
              v261 = v260;
              if (*(_BYTE *)(v260 + 45) || !*(_BYTE *)(v260 + 46))
              {
                v233.n128_u64[0] = *(_QWORD *)(v260 + 24);
              }
              else
              {
                v262 = *(double *)v260;
                v263 = *(double *)(v260 + 8);
                v264 = *(double *)(v260 + 16);
                v265 = sqrt(v262 * v262 + v263 * v263);
                v266 = atan2(v264, v265 * 0.996647189);
                v617 = atan2(v263, v262);
                v267 = __sincos_stret(v266);
                v268 = atan2(v264 + v267.__sinval * v267.__sinval * 42841.3115 * v267.__sinval, v265 + v267.__cosval * v267.__cosval * -42697.6727 * v267.__cosval);
                v269 = tan(v268 * 0.5 + 0.785398163);
                v270 = log(v269);
                v271.f64[0] = v617;
                v271.f64[1] = v270;
                v233 = (__n128)vmlaq_f64(v660, v647, v271);
                *(__n128 *)(v261 + 24) = v233;
                *(_BYTE *)(v261 + 45) = 1;
              }
              v246 = (__n128)v639;
              if (v639.f64[0] >= v233.n128_f64[0])
                goto LABEL_122;
              do
              {
LABEL_147:
                while (1)
                {
                  v273 = *--i;
                  v272 = v273;
                  v274 = (*(uint64_t (**)(unint64_t, __n128, __n128))(*(_QWORD *)v192 + 56))(v192, v233, v246);
                  v276 = v274;
                  if (*(_BYTE *)(v274 + 45) || *(_BYTE *)(v274 + 46) == 0)
                  {
                    v275.f64[0] = *(float64_t *)(v274 + 24);
                    v641 = v275;
                  }
                  else
                  {
                    v278 = *(double *)v274;
                    v279 = *(double *)(v274 + 8);
                    v280 = *(double *)(v274 + 16);
                    v281 = sqrt(v278 * v278 + v279 * v279);
                    v282 = atan2(v280, v281 * 0.996647189);
                    v640 = atan2(v279, v278);
                    v283 = __sincos_stret(v282);
                    v284 = atan2(v280 + v283.__sinval * v283.__sinval * 42841.3115 * v283.__sinval, v281 + v283.__cosval * v283.__cosval * -42697.6727 * v283.__cosval);
                    v285 = tan(v284 * 0.5 + 0.785398163);
                    v286 = log(v285);
                    v287.f64[0] = v640;
                    v287.f64[1] = v286;
                    v641 = vmlaq_f64(v660, v647, v287);
                    *(float64x2_t *)(v276 + 24) = v641;
                    *(_BYTE *)(v276 + 45) = 1;
                  }
                  v288 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v272 + 56))(v272);
                  v289 = v288;
                  if (*(_BYTE *)(v288 + 45) || *(_BYTE *)(v288 + 46) == 0)
                  {
                    v233.n128_u64[0] = *(_QWORD *)(v288 + 24);
                  }
                  else
                  {
                    v291 = *(double *)v288;
                    v292 = *(double *)(v288 + 8);
                    v293 = *(double *)(v288 + 16);
                    v294 = sqrt(v291 * v291 + v292 * v292);
                    v295 = atan2(v293, v294 * 0.996647189);
                    v618 = atan2(v292, v291);
                    v296 = __sincos_stret(v295);
                    v297 = atan2(v293 + v296.__sinval * v296.__sinval * 42841.3115 * v296.__sinval, v294 + v296.__cosval * v296.__cosval * -42697.6727 * v296.__cosval);
                    v298 = tan(v297 * 0.5 + 0.785398163);
                    v299 = log(v298);
                    v300.f64[0] = v618;
                    v300.f64[1] = v299;
                    v233 = (__n128)vmlaq_f64(v660, v647, v300);
                    *(__n128 *)(v289 + 24) = v233;
                    *(_BYTE *)(v289 + 45) = 1;
                  }
                  v246 = (__n128)v641;
                  if (v641.f64[0] != v233.n128_f64[0])
                    break;
                  if (v192 >= v272)
                    goto LABEL_169;
                }
                v301 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                v303 = v301;
                if (*(_BYTE *)(v301 + 45) || !*(_BYTE *)(v301 + 46))
                {
                  v302.f64[0] = *(float64_t *)(v301 + 24);
                  v643 = v302;
                }
                else
                {
                  v304 = *(double *)v301;
                  v305 = *(double *)(v301 + 8);
                  v306 = *(double *)(v301 + 16);
                  v307 = sqrt(v304 * v304 + v305 * v305);
                  v308 = atan2(v306, v307 * 0.996647189);
                  v642 = atan2(v305, v304);
                  v309 = __sincos_stret(v308);
                  v310 = atan2(v306 + v309.__sinval * v309.__sinval * 42841.3115 * v309.__sinval, v307 + v309.__cosval * v309.__cosval * -42697.6727 * v309.__cosval);
                  v311 = tan(v310 * 0.5 + 0.785398163);
                  v312 = log(v311);
                  v313.f64[0] = v642;
                  v313.f64[1] = v312;
                  v643 = vmlaq_f64(v660, v647, v313);
                  *(float64x2_t *)(v303 + 24) = v643;
                  *(_BYTE *)(v303 + 45) = 1;
                }
                v314 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v272 + 56))(v272);
                v315 = v314;
                if (*(_BYTE *)(v314 + 45) || !*(_BYTE *)(v314 + 46))
                {
                  v233.n128_u64[0] = *(_QWORD *)(v314 + 24);
                }
                else
                {
                  v316 = *(double *)v314;
                  v317 = *(double *)(v314 + 8);
                  v318 = *(double *)(v314 + 16);
                  v319 = sqrt(v316 * v316 + v317 * v317);
                  v320 = atan2(v318, v319 * 0.996647189);
                  v619 = atan2(v317, v316);
                  v321 = __sincos_stret(v320);
                  v322 = atan2(v318 + v321.__sinval * v321.__sinval * 42841.3115 * v321.__sinval, v319 + v321.__cosval * v321.__cosval * -42697.6727 * v321.__cosval);
                  v323 = tan(v322 * 0.5 + 0.785398163);
                  v324 = log(v323);
                  v325.f64[0] = v619;
                  v325.f64[1] = v324;
                  v233 = (__n128)vmlaq_f64(v660, v647, v325);
                  *(__n128 *)(v315 + 24) = v233;
                  *(_BYTE *)(v315 + 45) = 1;
                }
                v246 = (__n128)v643;
              }
              while (v643.f64[0] < v233.n128_f64[0]);
            }
            v326 = a1 - 1;
            if (a1 - 1 != v610)
              *v610 = *v326;
            a4 = 0;
            *v326 = v192;
            a2 = v608;
            continue;
          }
LABEL_12:
          v23 = a1 + 1;
          v24 = *a1;
          while (1)
          {
            v28 = *v23;
            v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v23 + 56))(*v23);
            v31 = v29;
            if (*(_BYTE *)(v29 + 45) || *(_BYTE *)(v29 + 46) == 0)
            {
              v30.n128_u64[0] = *(_QWORD *)(v29 + 24);
              v627 = v30;
            }
            else
            {
              v33 = *(double *)v29;
              v34 = *(double *)(v29 + 8);
              v35 = *(double *)(v29 + 16);
              v36 = sqrt(v33 * v33 + v34 * v34);
              v37 = atan2(v35, v36 * 0.996647189);
              v626 = atan2(v34, v33);
              v38 = __sincos_stret(v37);
              v39 = atan2(v35 + v38.__sinval * v38.__sinval * 42841.3115 * v38.__sinval, v36 + v38.__cosval * v38.__cosval * -42697.6727 * v38.__cosval);
              v40 = tan(v39 * 0.5 + 0.785398163);
              v41 = log(v40);
              v42.f64[0] = v626;
              v42.f64[1] = v41;
              v627 = (__n128)vmlaq_f64(v660, v647, v42);
              *(__n128 *)(v31 + 24) = v627;
              *(_BYTE *)(v31 + 45) = 1;
            }
            v43 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
            v45 = v43;
            if (*(_BYTE *)(v43 + 45) || *(_BYTE *)(v43 + 46) == 0)
            {
              v44.n128_u64[0] = *(_QWORD *)(v43 + 24);
            }
            else
            {
              v47 = *(double *)v43;
              v48 = *(double *)(v43 + 8);
              v49 = *(double *)(v43 + 16);
              v50 = sqrt(v47 * v47 + v48 * v48);
              v51 = atan2(v49, v50 * 0.996647189);
              v611 = atan2(v48, v47);
              v52 = __sincos_stret(v51);
              v53 = atan2(v49 + v52.__sinval * v52.__sinval * 42841.3115 * v52.__sinval, v50 + v52.__cosval * v52.__cosval * -42697.6727 * v52.__cosval);
              v54 = tan(v53 * 0.5 + 0.785398163);
              v55 = log(v54);
              v56.f64[0] = v611;
              v56.f64[1] = v55;
              v44 = (__n128)vmlaq_f64(v660, v647, v56);
              *(__n128 *)(v45 + 24) = v44;
              *(_BYTE *)(v45 + 45) = 1;
            }
            if (v627.n128_f64[0] == v44.n128_f64[0])
              break;
            v25 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t, __n128, __n128))(*(_QWORD *)v28 + 56))(v28, v44, v627);
            v26 = *(double *)md::LabelPoint::mercatorPoint(v25);
            v27 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
            if (v26 >= *(double *)md::LabelPoint::mercatorPoint(v27))
              goto LABEL_29;
LABEL_14:
            ++v23;
          }
          if (v28 < v24)
            goto LABEL_14;
LABEL_29:
          v57 = v23 - 1;
          j = v10;
          if (v23 - 1 != v610)
          {
            while (1)
            {
              v62 = *j;
              v63 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*j + 56))(*j);
              v64 = *(double *)md::LabelPoint::mercatorPoint(v63);
              v65 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
              if (v64 == *(double *)md::LabelPoint::mercatorPoint(v65))
              {
                if (v62 < v24)
                  goto LABEL_36;
              }
              else
              {
                v59 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v62 + 56))(v62);
                v60 = *(double *)md::LabelPoint::mercatorPoint(v59);
                v61 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
                if (v60 < *(double *)md::LabelPoint::mercatorPoint(v61))
                  goto LABEL_36;
              }
              --j;
            }
          }
          j = v608;
          if (v23 < v608)
          {
            for (j = v10; ; --j)
            {
              v180 = *j;
              v181 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*j + 56))(*j);
              v182 = *(double *)md::LabelPoint::mercatorPoint(v181);
              v183 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
              if (v182 == *(double *)md::LabelPoint::mercatorPoint(v183))
              {
                _CF = v180 < v24 || v23 >= j;
                if (_CF)
                  break;
              }
              else
              {
                v184 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v180 + 56))(v180);
                v185 = *(double *)md::LabelPoint::mercatorPoint(v184);
                v186 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
                v187 = (double *)md::LabelPoint::mercatorPoint(v186);
                if (v23 >= j || v185 < *v187)
                  break;
              }
            }
          }
LABEL_36:
          v606 = a3;
          v66 = v10;
          if (v23 < j)
          {
            v67 = v23;
            v68 = j;
            do
            {
              v69 = *v67;
              *v67++ = *v68;
              *v68 = v69;
              while (1)
              {
                v70 = *v67;
                v71 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v67 + 56))(*v67);
                v73 = v71;
                if (*(_BYTE *)(v71 + 45) || *(_BYTE *)(v71 + 46) == 0)
                {
                  v72.f64[0] = *(float64_t *)(v71 + 24);
                  v629 = v72;
                }
                else
                {
                  v75 = *(double *)v71;
                  v76 = *(double *)(v71 + 8);
                  v77 = *(double *)(v71 + 16);
                  v78 = sqrt(v75 * v75 + v76 * v76);
                  v79 = atan2(v77, v78 * 0.996647189);
                  v628 = atan2(v76, v75);
                  v80 = __sincos_stret(v79);
                  v81 = atan2(v77 + v80.__sinval * v80.__sinval * 42841.3115 * v80.__sinval, v78 + v80.__cosval * v80.__cosval * -42697.6727 * v80.__cosval);
                  v82 = tan(v81 * 0.5 + 0.785398163);
                  v83 = log(v82);
                  v84.f64[0] = v628;
                  v84.f64[1] = v83;
                  v629 = vmlaq_f64(v660, v647, v84);
                  *(float64x2_t *)(v73 + 24) = v629;
                  *(_BYTE *)(v73 + 45) = 1;
                }
                v85 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
                v87 = v85;
                if (*(_BYTE *)(v85 + 45) || *(_BYTE *)(v85 + 46) == 0)
                {
                  v86.n128_u64[0] = *(_QWORD *)(v85 + 24);
                }
                else
                {
                  v89 = *(double *)v85;
                  v90 = *(double *)(v85 + 8);
                  v91 = *(double *)(v85 + 16);
                  v92 = sqrt(v89 * v89 + v90 * v90);
                  v93 = atan2(v91, v92 * 0.996647189);
                  v612 = atan2(v90, v89);
                  v94 = __sincos_stret(v93);
                  v95 = atan2(v91 + v94.__sinval * v94.__sinval * 42841.3115 * v94.__sinval, v92 + v94.__cosval * v94.__cosval * -42697.6727 * v94.__cosval);
                  v96 = tan(v95 * 0.5 + 0.785398163);
                  v97 = log(v96);
                  v98.f64[0] = v612;
                  v98.f64[1] = v97;
                  v86 = (__n128)vmlaq_f64(v660, v647, v98);
                  *(__n128 *)(v87 + 24) = v86;
                  *(_BYTE *)(v87 + 45) = 1;
                }
                v99 = (__n128)v629;
                if (v629.f64[0] != v86.n128_f64[0])
                  break;
                if (v70 >= v24)
                  goto LABEL_64;
LABEL_41:
                ++v67;
              }
              v100 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v70 + 56))(v70);
              v102 = v100;
              if (*(_BYTE *)(v100 + 45) || !*(_BYTE *)(v100 + 46))
              {
                v101.f64[0] = *(float64_t *)(v100 + 24);
                v631 = v101;
              }
              else
              {
                v103 = *(double *)v100;
                v104 = *(double *)(v100 + 8);
                v105 = *(double *)(v100 + 16);
                v106 = sqrt(v103 * v103 + v104 * v104);
                v107 = atan2(v105, v106 * 0.996647189);
                v630 = atan2(v104, v103);
                v108 = __sincos_stret(v107);
                v109 = atan2(v105 + v108.__sinval * v108.__sinval * 42841.3115 * v108.__sinval, v106 + v108.__cosval * v108.__cosval * -42697.6727 * v108.__cosval);
                v110 = tan(v109 * 0.5 + 0.785398163);
                v111 = log(v110);
                v112.f64[0] = v630;
                v112.f64[1] = v111;
                v631 = vmlaq_f64(v660, v647, v112);
                *(float64x2_t *)(v102 + 24) = v631;
                *(_BYTE *)(v102 + 45) = 1;
              }
              v113 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
              v114 = v113;
              if (*(_BYTE *)(v113 + 45) || !*(_BYTE *)(v113 + 46))
              {
                v86.n128_u64[0] = *(_QWORD *)(v113 + 24);
              }
              else
              {
                v115 = *(double *)v113;
                v116 = *(double *)(v113 + 8);
                v117 = *(double *)(v113 + 16);
                v118 = sqrt(v115 * v115 + v116 * v116);
                v119 = atan2(v117, v118 * 0.996647189);
                v613 = atan2(v116, v115);
                v120 = __sincos_stret(v119);
                v121 = atan2(v117 + v120.__sinval * v120.__sinval * 42841.3115 * v120.__sinval, v118 + v120.__cosval * v120.__cosval * -42697.6727 * v120.__cosval);
                v122 = tan(v121 * 0.5 + 0.785398163);
                v123 = log(v122);
                v124.f64[0] = v613;
                v124.f64[1] = v123;
                v86 = (__n128)vmlaq_f64(v660, v647, v124);
                *(__n128 *)(v114 + 24) = v86;
                *(_BYTE *)(v114 + 45) = 1;
              }
              v99 = (__n128)v631;
              if (v631.f64[0] < v86.n128_f64[0])
                goto LABEL_41;
LABEL_64:
              v57 = v67 - 1;
              do
              {
                while (1)
                {
                  v126 = *--v68;
                  v125 = v126;
                  v127 = (*(uint64_t (**)(unint64_t, __n128, __n128))(*(_QWORD *)v126 + 56))(v126, v86, v99);
                  v129 = v127;
                  if (*(_BYTE *)(v127 + 45) || *(_BYTE *)(v127 + 46) == 0)
                  {
                    v128.f64[0] = *(float64_t *)(v127 + 24);
                    v633 = v128;
                  }
                  else
                  {
                    v131 = *(double *)v127;
                    v132 = *(double *)(v127 + 8);
                    v133 = *(double *)(v127 + 16);
                    v134 = sqrt(v131 * v131 + v132 * v132);
                    v135 = atan2(v133, v134 * 0.996647189);
                    v632 = atan2(v132, v131);
                    v136 = __sincos_stret(v135);
                    v137 = atan2(v133 + v136.__sinval * v136.__sinval * 42841.3115 * v136.__sinval, v134 + v136.__cosval * v136.__cosval * -42697.6727 * v136.__cosval);
                    v138 = tan(v137 * 0.5 + 0.785398163);
                    v139 = log(v138);
                    v140.f64[0] = v632;
                    v140.f64[1] = v139;
                    v633 = vmlaq_f64(v660, v647, v140);
                    *(float64x2_t *)(v129 + 24) = v633;
                    *(_BYTE *)(v129 + 45) = 1;
                  }
                  v141 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
                  v142 = v141;
                  if (*(_BYTE *)(v141 + 45) || *(_BYTE *)(v141 + 46) == 0)
                  {
                    v86.n128_u64[0] = *(_QWORD *)(v141 + 24);
                  }
                  else
                  {
                    v144 = *(double *)v141;
                    v145 = *(double *)(v141 + 8);
                    v146 = *(double *)(v141 + 16);
                    v147 = sqrt(v144 * v144 + v145 * v145);
                    v148 = atan2(v146, v147 * 0.996647189);
                    v614 = atan2(v145, v144);
                    v149 = __sincos_stret(v148);
                    v150 = atan2(v146 + v149.__sinval * v149.__sinval * 42841.3115 * v149.__sinval, v147 + v149.__cosval * v149.__cosval * -42697.6727 * v149.__cosval);
                    v151 = tan(v150 * 0.5 + 0.785398163);
                    v152 = log(v151);
                    v153.f64[0] = v614;
                    v153.f64[1] = v152;
                    v86 = (__n128)vmlaq_f64(v660, v647, v153);
                    *(__n128 *)(v142 + 24) = v86;
                    *(_BYTE *)(v142 + 45) = 1;
                  }
                  v99 = (__n128)v633;
                  if (v633.f64[0] != v86.n128_f64[0])
                    break;
                  if (v125 < v24)
                    goto LABEL_38;
                }
                v154 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v125 + 56))(v125);
                v156 = v154;
                if (*(_BYTE *)(v154 + 45) || !*(_BYTE *)(v154 + 46))
                {
                  v155.f64[0] = *(float64_t *)(v154 + 24);
                  v635 = v155;
                }
                else
                {
                  v157 = *(double *)v154;
                  v158 = *(double *)(v154 + 8);
                  v159 = *(double *)(v154 + 16);
                  v160 = sqrt(v157 * v157 + v158 * v158);
                  v161 = atan2(v159, v160 * 0.996647189);
                  v634 = atan2(v158, v157);
                  v162 = __sincos_stret(v161);
                  v163 = atan2(v159 + v162.__sinval * v162.__sinval * 42841.3115 * v162.__sinval, v160 + v162.__cosval * v162.__cosval * -42697.6727 * v162.__cosval);
                  v164 = tan(v163 * 0.5 + 0.785398163);
                  v165 = log(v164);
                  v166.f64[0] = v634;
                  v166.f64[1] = v165;
                  v635 = vmlaq_f64(v660, v647, v166);
                  *(float64x2_t *)(v156 + 24) = v635;
                  *(_BYTE *)(v156 + 45) = 1;
                }
                v167 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v24 + 56))(v24);
                v168 = v167;
                if (*(_BYTE *)(v167 + 45) || !*(_BYTE *)(v167 + 46))
                {
                  v86.n128_u64[0] = *(_QWORD *)(v167 + 24);
                }
                else
                {
                  v169 = *(double *)v167;
                  v170 = *(double *)(v167 + 8);
                  v171 = *(double *)(v167 + 16);
                  v172 = sqrt(v169 * v169 + v170 * v170);
                  v173 = atan2(v171, v172 * 0.996647189);
                  v615 = atan2(v170, v169);
                  v174 = __sincos_stret(v173);
                  v175 = atan2(v171 + v174.__sinval * v174.__sinval * 42841.3115 * v174.__sinval, v172 + v174.__cosval * v174.__cosval * -42697.6727 * v174.__cosval);
                  v176 = tan(v175 * 0.5 + 0.785398163);
                  v177 = log(v176);
                  v178.f64[0] = v615;
                  v178.f64[1] = v177;
                  v86 = (__n128)vmlaq_f64(v660, v647, v178);
                  *(__n128 *)(v168 + 24) = v86;
                  *(_BYTE *)(v168 + 45) = 1;
                }
                v99 = (__n128)v635;
              }
              while (v635.f64[0] >= v86.n128_f64[0]);
LABEL_38:
              ;
            }
            while (v67 < v68);
          }
          if (v57 != v610)
            *v610 = *v57;
          *v57 = v24;
          v10 = v66;
          a3 = v606;
          a2 = v608;
          if (v23 < j)
            goto LABEL_103;
          v188 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v610, v57);
          a1 = v57 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v57 + 1, v608))
          {
            if (v188)
              continue;
LABEL_103:
            std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(v610, v57, v606, a4 & 1);
            a4 = 0;
            a1 = v57 + 1;
            continue;
          }
          a2 = v57;
          a1 = v610;
          if (v188)
            return;
          goto LABEL_2;
        }
        v339 = a1 + 1;
        v341 = a1 == a2 || v339 == a2;
        if ((a4 & 1) != 0)
        {
          if (v341)
            return;
          v342 = 0;
          v644 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          v343 = a1;
LABEL_200:
          v345 = v343;
          v343 = v339;
          v346 = *v345;
          v347 = v345[1];
          v348 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v347 + 56))(v347);
          v349 = *(double *)md::LabelPoint::mercatorPoint(v348);
          v350 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v346 + 56))(v346);
          if (v349 == *(double *)md::LabelPoint::mercatorPoint(v350))
          {
            if (v347 >= v346)
              goto LABEL_199;
          }
          else
          {
            v351 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v347 + 56))(v347);
            v352 = *(double *)md::LabelPoint::mercatorPoint(v351);
            v353 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v346 + 56))(v346);
            if (v352 >= *(double *)md::LabelPoint::mercatorPoint(v353))
              goto LABEL_199;
          }
          v354 = v345[1];
          v345[1] = *v345;
          v344 = a1;
          if (v345 == a1)
            goto LABEL_198;
          v355 = v342;
          while (1)
          {
            v356 = (unint64_t *)((char *)a1 + v355);
            v357 = *(v356 - 1);
            v358 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v354 + 56))(v354);
            v359 = v358;
            if (*(_BYTE *)(v358 + 45))
              v360 = 1;
            else
              v360 = *(_BYTE *)(v358 + 46) == 0;
            if (v360)
            {
              v649.f64[0] = *(float64_t *)(v358 + 24);
            }
            else
            {
              v361 = *(double *)v358;
              v362 = *(double *)(v358 + 8);
              v363 = *(double *)(v358 + 16);
              v364 = sqrt(v361 * v361 + v362 * v362);
              v365 = atan2(v363, v364 * 0.996647189);
              v648 = atan2(v362, v361);
              v366 = __sincos_stret(v365);
              v367 = atan2(v363 + v366.__sinval * v366.__sinval * 42841.3115 * v366.__sinval, v364 + v366.__cosval * v366.__cosval * -42697.6727 * v366.__cosval);
              v368 = tan(v367 * 0.5 + 0.785398163);
              v369 = log(v368);
              v370.f64[0] = v648;
              v370.f64[1] = v369;
              v649 = vmlaq_f64(v660, v644, v370);
              *(float64x2_t *)(v359 + 24) = v649;
              *(_BYTE *)(v359 + 45) = 1;
            }
            v371 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v357 + 56))(v357);
            v372 = v371;
            if (*(_BYTE *)(v371 + 45))
              v373 = 1;
            else
              v373 = *(_BYTE *)(v371 + 46) == 0;
            if (v373)
            {
              v384.f64[0] = *(float64_t *)(v371 + 24);
            }
            else
            {
              v374 = *(double *)v371;
              v375 = *(double *)(v371 + 8);
              v376 = *(double *)(v371 + 16);
              v377 = sqrt(v374 * v374 + v375 * v375);
              v378 = atan2(v376, v377 * 0.996647189);
              v620 = atan2(v375, v374);
              v379 = __sincos_stret(v378);
              v380 = atan2(v376 + v379.__sinval * v379.__sinval * 42841.3115 * v379.__sinval, v377 + v379.__cosval * v379.__cosval * -42697.6727 * v379.__cosval);
              v381 = tan(v380 * 0.5 + 0.785398163);
              v382 = log(v381);
              v383.f64[0] = v620;
              v383.f64[1] = v382;
              v384 = vmlaq_f64(v660, v644, v383);
              *(float64x2_t *)(v372 + 24) = v384;
              *(_BYTE *)(v372 + 45) = 1;
            }
            if (v649.f64[0] == v384.f64[0])
            {
              if (v354 >= v357)
              {
                a1 = v610;
                v344 = (unint64_t *)((char *)v610 + v355);
LABEL_197:
                a2 = v608;
LABEL_198:
                *v344 = v354;
LABEL_199:
                v339 = v343 + 1;
                v342 += 8;
                if (v343 + 1 == a2)
                  return;
                goto LABEL_200;
              }
            }
            else
            {
              v385 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v354 + 56))(v354);
              v386 = v385;
              if (*(_BYTE *)(v385 + 45) || !*(_BYTE *)(v385 + 46))
              {
                v651.f64[0] = *(float64_t *)(v385 + 24);
              }
              else
              {
                v387 = *(double *)v385;
                v388 = *(double *)(v385 + 8);
                v389 = *(double *)(v385 + 16);
                v390 = sqrt(v387 * v387 + v388 * v388);
                v391 = atan2(v389, v390 * 0.996647189);
                v650 = atan2(v388, v387);
                v392 = __sincos_stret(v391);
                v393 = atan2(v389 + v392.__sinval * v392.__sinval * 42841.3115 * v392.__sinval, v390 + v392.__cosval * v392.__cosval * -42697.6727 * v392.__cosval);
                v394 = tan(v393 * 0.5 + 0.785398163);
                v395 = log(v394);
                v396.f64[0] = v650;
                v396.f64[1] = v395;
                v651 = vmlaq_f64(v660, v644, v396);
                *(float64x2_t *)(v386 + 24) = v651;
                *(_BYTE *)(v386 + 45) = 1;
              }
              v397 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v357 + 56))(v357);
              v398 = v397;
              if (*(_BYTE *)(v397 + 45) || !*(_BYTE *)(v397 + 46))
              {
                v409.f64[0] = *(float64_t *)(v397 + 24);
              }
              else
              {
                v399 = *(double *)v397;
                v400 = *(double *)(v397 + 8);
                v401 = *(double *)(v397 + 16);
                v402 = sqrt(v399 * v399 + v400 * v400);
                v403 = atan2(v401, v402 * 0.996647189);
                v621 = atan2(v400, v399);
                v404 = __sincos_stret(v403);
                v405 = atan2(v401 + v404.__sinval * v404.__sinval * 42841.3115 * v404.__sinval, v402 + v404.__cosval * v404.__cosval * -42697.6727 * v404.__cosval);
                v406 = tan(v405 * 0.5 + 0.785398163);
                v407 = log(v406);
                v408.f64[0] = v621;
                v408.f64[1] = v407;
                v409 = vmlaq_f64(v660, v644, v408);
                *(float64x2_t *)(v398 + 24) = v409;
                *(_BYTE *)(v398 + 45) = 1;
              }
              if (v651.f64[0] >= v409.f64[0])
              {
                v344 = v345;
                a1 = v610;
                goto LABEL_197;
              }
            }
            --v345;
            *v356 = *(v356 - 1);
            v355 -= 8;
            a1 = v610;
            if (!v355)
            {
              v344 = v610;
              goto LABEL_197;
            }
          }
        }
        if (!v341)
        {
          v646 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
          do
          {
            v534 = a1;
            a1 = v339;
            v535 = *v534;
            v536 = v534[1];
            v537 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v536 + 56))(v536);
            v538 = *(double *)md::LabelPoint::mercatorPoint(v537);
            v539 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v535 + 56))(v535);
            if (v538 == *(double *)md::LabelPoint::mercatorPoint(v539))
            {
              if (v536 < v535)
                goto LABEL_315;
            }
            else
            {
              v540 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v536 + 56))(v536);
              v541 = *(double *)md::LabelPoint::mercatorPoint(v540);
              v542 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v535 + 56))(v535);
              if (v541 < *(double *)md::LabelPoint::mercatorPoint(v542))
              {
LABEL_315:
                v543 = *a1;
                do
                {
                  while (1)
                  {
                    v544 = v534;
                    v534[1] = *v534;
                    v546 = *--v534;
                    v545 = v546;
                    v547 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v543 + 56))(v543);
                    v548 = v547;
                    if (*(_BYTE *)(v547 + 45) || *(_BYTE *)(v547 + 46) == 0)
                    {
                      v657.f64[0] = *(float64_t *)(v547 + 24);
                    }
                    else
                    {
                      v550 = *(double *)v547;
                      v551 = *(double *)(v547 + 8);
                      v552 = *(double *)(v547 + 16);
                      v553 = sqrt(v550 * v550 + v551 * v551);
                      v554 = atan2(v552, v553 * 0.996647189);
                      v656 = atan2(v551, v550);
                      v555 = __sincos_stret(v554);
                      v556 = atan2(v552 + v555.__sinval * v555.__sinval * 42841.3115 * v555.__sinval, v553 + v555.__cosval * v555.__cosval * -42697.6727 * v555.__cosval);
                      v557 = tan(v556 * 0.5 + 0.785398163);
                      v558 = log(v557);
                      v559.f64[0] = v656;
                      v559.f64[1] = v558;
                      v657 = vmlaq_f64(v660, v646, v559);
                      *(float64x2_t *)(v548 + 24) = v657;
                      *(_BYTE *)(v548 + 45) = 1;
                    }
                    v560 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v545 + 56))(v545);
                    v561 = v560;
                    if (*(_BYTE *)(v560 + 45) || *(_BYTE *)(v560 + 46) == 0)
                    {
                      v573.f64[0] = *(float64_t *)(v560 + 24);
                    }
                    else
                    {
                      v563 = *(double *)v560;
                      v564 = *(double *)(v560 + 8);
                      v565 = *(double *)(v560 + 16);
                      v566 = sqrt(v563 * v563 + v564 * v564);
                      v567 = atan2(v565, v566 * 0.996647189);
                      v624 = atan2(v564, v563);
                      v568 = __sincos_stret(v567);
                      v569 = atan2(v565 + v568.__sinval * v568.__sinval * 42841.3115 * v568.__sinval, v566 + v568.__cosval * v568.__cosval * -42697.6727 * v568.__cosval);
                      v570 = tan(v569 * 0.5 + 0.785398163);
                      v571 = log(v570);
                      v572.f64[0] = v624;
                      v572.f64[1] = v571;
                      v573 = vmlaq_f64(v660, v646, v572);
                      *(float64x2_t *)(v561 + 24) = v573;
                      *(_BYTE *)(v561 + 45) = 1;
                    }
                    if (v657.f64[0] != v573.f64[0])
                      break;
                    if (v543 >= v545)
                      goto LABEL_309;
                  }
                  v574 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v543 + 56))(v543);
                  v575 = v574;
                  if (*(_BYTE *)(v574 + 45) || !*(_BYTE *)(v574 + 46))
                  {
                    v659.f64[0] = *(float64_t *)(v574 + 24);
                  }
                  else
                  {
                    v576 = *(double *)v574;
                    v577 = *(double *)(v574 + 8);
                    v578 = *(double *)(v574 + 16);
                    v579 = sqrt(v576 * v576 + v577 * v577);
                    v580 = atan2(v578, v579 * 0.996647189);
                    v658 = atan2(v577, v576);
                    v581 = __sincos_stret(v580);
                    v582 = atan2(v578 + v581.__sinval * v581.__sinval * 42841.3115 * v581.__sinval, v579 + v581.__cosval * v581.__cosval * -42697.6727 * v581.__cosval);
                    v583 = tan(v582 * 0.5 + 0.785398163);
                    v584 = log(v583);
                    v585.f64[0] = v658;
                    v585.f64[1] = v584;
                    v659 = vmlaq_f64(v660, v646, v585);
                    *(float64x2_t *)(v575 + 24) = v659;
                    *(_BYTE *)(v575 + 45) = 1;
                  }
                  v586 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v545 + 56))(v545);
                  v587 = v586;
                  if (*(_BYTE *)(v586 + 45) || !*(_BYTE *)(v586 + 46))
                  {
                    v598.f64[0] = *(float64_t *)(v586 + 24);
                  }
                  else
                  {
                    v588 = *(double *)v586;
                    v589 = *(double *)(v586 + 8);
                    v590 = *(double *)(v586 + 16);
                    v591 = sqrt(v588 * v588 + v589 * v589);
                    v592 = atan2(v590, v591 * 0.996647189);
                    v625 = atan2(v589, v588);
                    v593 = __sincos_stret(v592);
                    v594 = atan2(v590 + v593.__sinval * v593.__sinval * 42841.3115 * v593.__sinval, v591 + v593.__cosval * v593.__cosval * -42697.6727 * v593.__cosval);
                    v595 = tan(v594 * 0.5 + 0.785398163);
                    v596 = log(v595);
                    v597.f64[0] = v625;
                    v597.f64[1] = v596;
                    v598 = vmlaq_f64(v660, v646, v597);
                    *(float64x2_t *)(v587 + 24) = v598;
                    *(_BYTE *)(v587 + 45) = 1;
                  }
                }
                while (v659.f64[0] < v598.f64[0]);
LABEL_309:
                *v544 = v543;
              }
            }
            v339 = a1 + 1;
          }
          while (a1 + 1 != a2);
        }
        return;
    }
  }
}

double md::StandardLabelMapTile::assignWorldPointToLabel(md::StandardLabelMapTile *this, md::Label *a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  float v8;
  BOOL v9;
  BOOL v10;
  double v11;
  double result;

  v4 = (float *)(*(uint64_t (**)(_QWORD, char *, _QWORD, _QWORD))(**((_QWORD **)a2 + 1) + 120))(*((_QWORD *)a2 + 1), (char *)a2 + 48, *((unsigned __int8 *)this + 9), *((_QWORD *)this + 63));
  v5 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v4);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(double *)v5 + (double)*((char *)this + 32);
  v8 = v4[10];
  v9 = v8 == 3.4028e38;
  v10 = v8 != 3.4028e38;
  if (v8 == 3.4028e38)
    v8 = 0.0;
  *((float *)a2 + 47) = v8;
  *((_BYTE *)a2 + 192) = v10;
  *((_BYTE *)a2 + 835) = v10;
  *((double *)a2 + 62) = v7;
  *((_QWORD *)a2 + 63) = v6;
  *((_QWORD *)a2 + 64) = 0;
  v11 = 0.0;
  if (!v9)
    v11 = v8;
  result = *((double *)a2 + 29) * v11;
  *((double *)a2 + 82) = result;
  *((_QWORD *)a2 + 68) = 0;
  *((_QWORD *)a2 + 69) = 0;
  *((double *)a2 + 70) = result;
  *((_QWORD *)a2 + 65) = 0;
  *((_QWORD *)a2 + 66) = 0;
  *((_QWORD *)a2 + 67) = 0x3FF0000000000000;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t **v74;
  unint64_t *v75;
  BOOL v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  BOOL v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  BOOL v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v64 = *v9;
        if (*v8 < *v9)
        {
          *v9 = *v8;
          *v8 = v64;
        }
        return result;
      case 3:
        v65 = *v9;
        v66 = v9[1];
        v67 = *v8;
        if (v66 >= *v9)
        {
          if (v67 < v66)
          {
            v9[1] = v67;
            *v8 = v66;
            v96 = *v9;
            v95 = v9[1];
            if (v95 < *v9)
            {
              *v9 = v95;
              v9[1] = v96;
            }
          }
        }
        else
        {
          if (v67 >= v66)
          {
            *v9 = v66;
            v9[1] = v65;
            if (*v8 >= v65)
              return result;
            v9[1] = *v8;
          }
          else
          {
            *v9 = v67;
          }
          *v8 = v65;
        }
        return result;
      case 4:
        v68 = v9 + 1;
        v69 = (unint64_t *)v9[1];
        v70 = v9 + 2;
        v71 = v9[2];
        v72 = (unint64_t *)*v9;
        if ((unint64_t)v69 >= *v9)
        {
          if (v71 >= (unint64_t)v69)
            goto LABEL_172;
          *v68 = v71;
          *v70 = (unint64_t)v69;
          v73 = v9;
          v74 = (unint64_t **)(v9 + 1);
          result = (uint64_t)v69;
          if (v71 >= (unint64_t)v72)
            goto LABEL_173;
        }
        else
        {
          v73 = v9;
          v74 = (unint64_t **)(v9 + 2);
          result = *v9;
          if (v71 >= (unint64_t)v69)
          {
            *v9 = (unint64_t)v69;
            v9[1] = (unint64_t)v72;
            v73 = v9 + 1;
            v74 = (unint64_t **)(v9 + 2);
            result = (uint64_t)v72;
            if (v71 >= (unint64_t)v72)
            {
LABEL_172:
              v69 = (unint64_t *)v71;
LABEL_173:
              if (*v8 < (unint64_t)v69)
              {
                *v70 = *v8;
                *v8 = (unint64_t)v69;
                v111 = *v70;
                v112 = *v68;
                if (v111 < v112)
                {
                  v9[1] = v111;
                  v9[2] = v112;
                  v113 = *v9;
                  if (v111 < *v9)
                  {
                    *v9 = v111;
                    v9[1] = v113;
                  }
                }
              }
              return result;
            }
          }
        }
        *v73 = v71;
        *v74 = v72;
        v69 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v75 = v9 + 1;
          v77 = v9 == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v77)
            {
              v78 = 8;
              v79 = v9;
              do
              {
                v82 = *v79;
                v81 = v79[1];
                v79 = v75;
                if (v81 < v82)
                {
                  v83 = v78;
                  do
                  {
                    *(unint64_t *)((char *)v9 + v83) = v82;
                    v84 = v83 - 8;
                    if (v83 == 8)
                    {
                      v80 = v9;
                      goto LABEL_114;
                    }
                    v82 = *(unint64_t *)((char *)v9 + v83 - 16);
                    v83 -= 8;
                  }
                  while (v81 < v82);
                  v80 = (unint64_t *)((char *)v9 + v84);
LABEL_114:
                  *v80 = v81;
                }
                v75 = v79 + 1;
                v78 += 8;
              }
              while (v79 + 1 != a2);
            }
          }
          else if (!v77)
          {
            do
            {
              v98 = *v7;
              v97 = v7[1];
              v7 = v75;
              if (v97 < v98)
              {
                do
                {
                  *v75 = v98;
                  v98 = *(v75 - 2);
                  --v75;
                }
                while (v97 < v98);
                *v75 = v97;
              }
              v75 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v85 = (unint64_t)(v11 - 2) >> 1;
            v86 = v85;
            do
            {
              if (v85 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &v9[v88];
                if (2 * v86 + 2 >= v11)
                {
                  v90 = *v89;
                }
                else
                {
                  v90 = v89[1];
                  v91 = *v89 >= v90;
                  if (*v89 < v90)
                    ++v89;
                  else
                    v90 = *v89;
                  if (!v91)
                    v88 = 2 * v86 + 2;
                }
                v92 = &v9[v86];
                v93 = *v92;
                if (v90 >= *v92)
                {
                  while (1)
                  {
                    *v92 = v90;
                    v92 = v89;
                    if (v85 < v88)
                      break;
                    v94 = (2 * v88) | 1;
                    v89 = &v9[v94];
                    v88 = 2 * v88 + 2;
                    if (v88 < v11)
                    {
                      v90 = *v89;
                      result = (uint64_t)(v89 + 1);
                      if (*v89 >= v89[1])
                      {
                        v88 = v94;
                      }
                      else
                      {
                        v90 = v89[1];
                        ++v89;
                      }
                      if (v90 < v93)
                        break;
                    }
                    else
                    {
                      v90 = *v89;
                      v88 = v94;
                      if (*v89 < v93)
                        break;
                    }
                  }
                  *v92 = v93;
                }
              }
              v87 = v86-- <= 0;
            }
            while (!v87);
            v99 = (unint64_t)v10 >> 3;
            do
            {
              v100 = 0;
              v101 = *v9;
              v102 = v9;
              do
              {
                v104 = &v102[v100 + 1];
                v105 = (2 * v100) | 1;
                v100 = 2 * v100 + 2;
                if (v100 < v99)
                {
                  v103 = *v104;
                  if (*v104 >= v104[1])
                  {
                    v100 = v105;
                  }
                  else
                  {
                    v103 = v104[1];
                    ++v104;
                  }
                }
                else
                {
                  v103 = *v104;
                  v100 = v105;
                }
                *v102 = v103;
                v102 = v104;
              }
              while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
              if (v104 == --a2)
              {
                *v104 = v101;
              }
              else
              {
                *v104 = *a2;
                *a2 = v101;
                v106 = (char *)v104 - (char *)v9 + 8;
                if (v106 >= 9)
                {
                  v107 = (((unint64_t)v106 >> 3) - 2) >> 1;
                  v108 = &v9[v107];
                  v109 = *v108;
                  v110 = *v104;
                  if (*v108 < *v104)
                  {
                    do
                    {
                      *v104 = v109;
                      v104 = v108;
                      if (!v107)
                        break;
                      v107 = (v107 - 1) >> 1;
                      v108 = &v9[v107];
                      v109 = *v108;
                    }
                    while (*v108 < v110);
                    *v104 = v110;
                  }
                }
              }
              v87 = v99-- <= 2;
            }
            while (!v87);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        v14 = *v8;
        if ((unint64_t)v10 >= 0x401)
        {
          v15 = *v13;
          v16 = *v9;
          if (*v13 >= *v9)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              *v8 = v15;
              v19 = *v9;
              if (*v13 < *v9)
              {
                *v9 = *v13;
                *v13 = v19;
              }
            }
          }
          else
          {
            if (v14 < v15)
            {
              *v9 = v14;
              goto LABEL_21;
            }
            *v9 = v15;
            *v13 = v16;
            if (*v8 < v16)
            {
              *v13 = *v8;
LABEL_21:
              *v8 = v16;
            }
          }
          v21 = &v9[v12];
          v24 = *(v21 - 1);
          v22 = v21 - 1;
          v23 = v24;
          v25 = v9[1];
          v26 = *(a2 - 2);
          if (v24 >= v25)
          {
            if (v26 < v23)
            {
              *v22 = v26;
              *(a2 - 2) = v23;
              v27 = v9[1];
              if (*v22 < v27)
              {
                v9[1] = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v26 < v23)
            {
              v9[1] = v26;
              goto LABEL_33;
            }
            v9[1] = v23;
            *v22 = v25;
            v28 = *(a2 - 2);
            if (v28 < v25)
            {
              *v22 = v28;
LABEL_33:
              *(a2 - 2) = v25;
            }
          }
          v29 = &v9[v12];
          v32 = v29[1];
          v30 = v29 + 1;
          v31 = v32;
          v33 = v9[2];
          v34 = *(a2 - 3);
          if (v32 >= v33)
          {
            if (v34 < v31)
            {
              *v30 = v34;
              *(a2 - 3) = v31;
              v35 = v9[2];
              if (*v30 < v35)
              {
                v9[2] = *v30;
                *v30 = v35;
              }
            }
          }
          else
          {
            if (v34 < v31)
            {
              v9[2] = v34;
              goto LABEL_42;
            }
            v9[2] = v31;
            *v30 = v33;
            v36 = *(a2 - 3);
            if (v36 < v33)
            {
              *v30 = v36;
LABEL_42:
              *(a2 - 3) = v33;
            }
          }
          v37 = *v13;
          v38 = *v22;
          v39 = *v30;
          if (*v13 >= *v22)
          {
            if (v39 >= v37)
              goto LABEL_50;
            *v13 = v39;
            *v30 = v37;
            v30 = v13;
            v37 = v38;
            if (v39 >= v38)
            {
              v37 = v39;
              goto LABEL_50;
            }
          }
          else if (v39 >= v37)
          {
            *v22 = v37;
            *v13 = v38;
            v22 = v13;
            v37 = v39;
            if (v39 >= v38)
            {
              v37 = v38;
LABEL_50:
              v40 = *v9;
              *v9 = v37;
              *v13 = v40;
              goto LABEL_51;
            }
          }
          *v22 = v39;
          *v30 = v38;
          goto LABEL_50;
        }
        v17 = *v9;
        v18 = *v13;
        if (*v9 >= *v13)
        {
          if (v14 < v17)
          {
            *v9 = v14;
            *v8 = v17;
            v20 = *v13;
            if (*v9 < *v13)
            {
              *v13 = *v9;
              *v9 = v20;
            }
          }
        }
        else
        {
          if (v14 >= v17)
          {
            *v13 = v17;
            *v9 = v18;
            if (*v8 >= v18)
              goto LABEL_51;
            *v9 = *v8;
          }
          else
          {
            *v13 = v14;
          }
          *v8 = v18;
        }
LABEL_51:
        --a3;
        v41 = *v9;
        v42 = v9;
        if ((a4 & 1) == 0)
        {
          v42 = v9;
          if (*(v9 - 1) >= v41)
          {
            if (v41 >= *v8)
            {
              v56 = v9 + 1;
              do
              {
                v9 = v56;
                if (v56 >= a2)
                  break;
                ++v56;
              }
              while (v41 >= *v9);
            }
            else
            {
              do
              {
                v55 = v9[1];
                ++v9;
              }
              while (v41 >= v55);
            }
            v57 = a2;
            if (v9 < a2)
            {
              v57 = a2;
              do
                v58 = *--v57;
              while (v41 < v58);
            }
            if (v9 < v57)
            {
              v59 = *v9;
              v60 = *v57;
              do
              {
                *v9 = v60;
                *v57 = v59;
                do
                {
                  v61 = v9[1];
                  ++v9;
                  v59 = v61;
                }
                while (v41 >= v61);
                do
                {
                  v62 = *--v57;
                  v60 = v62;
                }
                while (v41 < v62);
              }
              while (v9 < v57);
            }
            v63 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v63;
            a4 = 0;
            *v63 = v41;
            continue;
          }
        }
        do
        {
          v43 = v42;
          v45 = v42[1];
          ++v42;
          v44 = v45;
        }
        while (v45 < v41);
        v46 = a2;
        if (v43 == v9)
        {
          v46 = a2;
          do
          {
            if (v42 >= v46)
              break;
            v48 = *--v46;
          }
          while (v48 >= v41);
        }
        else
        {
          do
            v47 = *--v46;
          while (v47 >= v41);
        }
        if (v42 < v46)
        {
          v49 = *v46;
          v50 = v42;
          v51 = v46;
          do
          {
            *v50 = v49;
            *v51 = v44;
            do
            {
              v43 = v50;
              v52 = v50[1];
              ++v50;
              v44 = v52;
            }
            while (v52 < v41);
            do
            {
              v53 = *--v51;
              v49 = v53;
            }
            while (v53 >= v41);
          }
          while (v50 < v51);
        }
        if (v43 != v9)
          *v9 = *v43;
        *v43 = v41;
        if (v42 < v46)
        {
LABEL_71:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **,false>(v7, v43, a3, a4 & 1);
          a4 = 0;
          v9 = v43 + 1;
          continue;
        }
        v54 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(v9, v43);
        v9 = v43 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(v43 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v54)
            continue;
          goto LABEL_71;
        }
        a2 = v43;
        if (!v54)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t md::PolylineLabelPlacement::textIndex(md::PolylineLabelPlacement *this, double a2)
{
  md::LabelLineResolvedPosition *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *((_QWORD *)this + 6);
  v3 = (md::PolylineLabelPlacement *)((char *)this + 48);
  v4 = v5;
  if ((v5
     && *((_DWORD *)this + 22) == *(_DWORD *)(v4 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0
     && (*((__int16 *)this + 41) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(v3, *((unsigned __int8 *)this + 212), a2),
         (v7 = *((_QWORD *)this + 6)) != 0)
     && *((_DWORD *)this + 22) == *(_DWORD *)(v7 + 252)
     && (v6 = (uint64_t *)*((_QWORD *)this + 9)) != 0)
    && (*((__int16 *)this + 41) & 0x80000000) == 0
    && (v8 = *v6) != 0)
  {
    return *(unsigned __int8 *)(v8 + 38);
  }
  else
  {
    return 255;
  }
}

_QWORD *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42D9A28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void __destroy_helper_block_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

char *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  result = (char *)operator new(0x50uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_1E42CD4A8;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 5) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)result + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 7) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)result + 8) = *(_QWORD *)(a1 + 64);
  *((_QWORD *)result + 9) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return result;
}

void md::MeshRenderableLogic::clearInjectedRenderables(md::MeshRenderableLogic *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t ***v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  NSObject *v13;
  unint64_t *i;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t RegistryByIdentifier;
  _QWORD *v22;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int16 **v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unint64_t v37;
  void *v38;
  NSObject *v39;
  uint8_t buf[4];
  unsigned int v41;
  __int16 v42;
  unint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 48);
  if (!v2)
    return;
  v5 = a2;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v2 <= a2)
      v7 = a2 % v2;
  }
  else
  {
    v7 = ((_DWORD)v2 - 1) & a2;
  }
  v8 = *(uint64_t ****)(*((_QWORD *)this + 47) + 8 * v7);
  if (!v8)
    return;
  v9 = *v8;
  if (!*v8)
    return;
  if (v6.u32[0] < 2uLL)
  {
    v10 = v2 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == (uint64_t *)a2)
      {
        if (*((unsigned __int16 *)v9 + 8) == a2)
          goto LABEL_22;
      }
      else if (((unint64_t)v12 & v10) != v7)
      {
        return;
      }
      v9 = (uint64_t **)*v9;
      if (!v9)
        return;
    }
  }
  while (1)
  {
    v11 = (unint64_t)v9[1];
    if (v11 == a2)
      break;
    if (v11 >= v2)
      v11 %= v2;
    if (v11 != v7)
      return;
LABEL_11:
    v9 = (uint64_t **)*v9;
    if (!v9)
      return;
  }
  if (*((unsigned __int16 *)v9 + 8) != a2)
    goto LABEL_11;
LABEL_22:
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v13 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v41 = a2;
    _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_DEBUG, "[RenderableInjection] Cleaning injections for registry %d\n", buf, 8u);
  }
  v15 = (unint64_t *)v9[3];
  for (i = (unint64_t *)v9[4]; v15 != i; ++v15)
  {
    v16 = *v15;
    v17 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)this + 42, *v15);
    if (v17)
    {
      v18 = v17;
      if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
      v19 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        v20 = *((unsigned __int8 *)v18 + 34);
        if (*((_BYTE *)v18 + 34))
          v20 = *((unsigned __int16 *)v18 + 16);
        *(_DWORD *)buf = 67109376;
        v41 = v20;
        v42 = 2048;
        v43 = v16;
        _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_DEBUG, "[RenderableInjection] Removing injection, injectedRegistry: %hu, entity %llu\n", buf, 0x12u);
      }
      if (*((_BYTE *)v18 + 34))
        *((_BYTE *)v18 + 34) = 0;
      if (*((_BYTE *)v18 + 38))
      {
        RegistryByIdentifier = md::RegistryManager::getRegistryByIdentifier(*((md::RegistryManager **)this + 17), *((unsigned __int16 *)v18 + 18));
        if (RegistryByIdentifier)
        {
          v22 = (_QWORD *)gdc::Registry::storage<md::components::RenderableInjected>(RegistryByIdentifier);
          gdc::ComponentStorageWrapper<md::components::RenderableInjected>::remove(v22, v18[5]);
        }
      }
    }
  }
  v23 = *(int8x8_t *)((char *)this + 384);
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8(v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = v5;
      if (*(_QWORD *)&v23 <= v5)
        v25 = v5 % *(_QWORD *)&v23;
    }
    else
    {
      v25 = (v23.i32[0] - 1) & v5;
    }
    v26 = *((_QWORD *)this + 47);
    v27 = *(unsigned __int16 ***)(v26 + 8 * v25);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        v29 = *(_QWORD *)&v23 - 1;
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            v30 = *((_QWORD *)v28 + 1);
            if (v30 == v5)
            {
              if (v28[8] == (_DWORD)v5)
                goto LABEL_62;
            }
            else if ((v30 & v29) != v25)
            {
              goto LABEL_91;
            }
            v28 = *(unsigned __int16 **)v28;
            if (!v28)
              goto LABEL_91;
          }
        }
        do
        {
          v31 = *((_QWORD *)v28 + 1);
          if (v31 == v5)
          {
            if (v28[8] == (_DWORD)v5)
            {
LABEL_62:
              if (v24.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v23 <= v5)
                  v5 %= *(_QWORD *)&v23;
              }
              else
              {
                v5 &= v29;
              }
              v32 = *(unsigned __int16 **)(v26 + 8 * v5);
              do
              {
                v33 = v32;
                v32 = *(unsigned __int16 **)v32;
              }
              while (v32 != v28);
              if (v33 == (_QWORD *)((char *)this + 392))
                goto LABEL_79;
              v34 = v33[1];
              if (v24.u32[0] > 1uLL)
              {
                if (v34 >= *(_QWORD *)&v23)
                  v34 %= *(_QWORD *)&v23;
              }
              else
              {
                v34 &= v29;
              }
              if (v34 != v5)
              {
LABEL_79:
                if (!*(_QWORD *)v28)
                  goto LABEL_80;
                v35 = *(_QWORD *)(*(_QWORD *)v28 + 8);
                if (v24.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&v23)
                    v35 %= *(_QWORD *)&v23;
                }
                else
                {
                  v35 &= v29;
                }
                if (v35 != v5)
LABEL_80:
                  *(_QWORD *)(v26 + 8 * v5) = 0;
              }
              v36 = *(unsigned __int16 **)v28;
              if (*(_QWORD *)v28)
              {
                v37 = *((_QWORD *)v36 + 1);
                if (v24.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&v23)
                    v37 %= *(_QWORD *)&v23;
                }
                else
                {
                  v37 &= v29;
                }
                if (v37 != v5)
                {
                  *(_QWORD *)(*((_QWORD *)this + 47) + 8 * v37) = v33;
                  v36 = *(unsigned __int16 **)v28;
                }
              }
              *v33 = v36;
              *(_QWORD *)v28 = 0;
              --*((_QWORD *)this + 50);
              v38 = (void *)*((_QWORD *)v28 + 3);
              if (v38)
              {
                *((_QWORD *)v28 + 4) = v38;
                operator delete(v38);
              }
              operator delete(v28);
              break;
            }
          }
          else
          {
            if (v31 >= *(_QWORD *)&v23)
              v31 %= *(_QWORD *)&v23;
            if (v31 != v25)
              break;
          }
          v28 = *(unsigned __int16 **)v28;
        }
        while (v28);
      }
    }
  }
LABEL_91:
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v39 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v41 = a2;
    _os_log_impl(&dword_19F029000, v39, OS_LOG_TYPE_DEBUG, "[RenderableInjection] Done cleaning injections for registry %d\n", buf, 8u);
  }
}

void md::MeshRenderableLogic::updateBatches(md::MeshRenderableLogic *this, const md::LayoutContext *a2, const md::MaterialContext *a3)
{
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  _QWORD *private_2;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int8x8_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  int8x8_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  _QWORD *v32;
  uint64_t v33;
  uint8x8_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t prime;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  NSObject *v61;
  __int32 v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t *v86;
  uint64_t v87;
  NSObject *v88;
  int8x8_t v89;
  __int32 v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  BOOL v108;
  _BYTE *v109;
  char **v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  NSObject *v116;
  NSObject *v117;
  os_signpost_id_t v118;
  NSObject *v119;
  NSObject *v120;
  os_signpost_id_t v121;
  uint64_t v122;
  void **v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _Unwind_Exception_Class *v135;
  int8x8_t v136;
  int8x8_t v137;
  uint8x8_t v138;
  unint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v155;
  void *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _Unwind_Exception_Class *v164;
  int8x8_t v165;
  int8x8_t v166;
  uint8x8_t v167;
  unint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  int8x8_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 *v210;
  _OWORD *v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t *v228;
  int8x8_t v229;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  __int128 *v234;
  _OWORD *v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  int8x8_t v252;
  uint64_t *v253;
  int8x8_t v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  __int128 *v259;
  _OWORD *v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  int8x8_t v277;
  uint64_t *v278;
  int8x8_t v279;
  unint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  __int128 *v284;
  _OWORD *v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  BOOL v289;
  void **v290;
  char v291;
  int v292;
  _DWORD *v293;
  char *v294;
  int8x8_t *v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t (**v300)();
  uint64_t v301;
  _Unwind_Exception **p_p_exception_object;
  uint64_t v303;
  void **p_p;
  uint64_t v305;
  uint64_t v306;
  void **v307;
  char v308;
  int v309;
  _DWORD *v310;
  char *v311;
  int8x8_t *v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t (***v321)();
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  char v325;
  int v326;
  _DWORD *v327;
  char *v328;
  int8x8_t *v329;
  _QWORD *v330;
  md::MeshRenderableLogic *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v335;
  uint64_t v336;
  uint8_t *v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  char v343;
  int v344;
  _DWORD *v345;
  char *v346;
  int8x8_t *v347;
  _QWORD *v348;
  md::MeshRenderableLogic *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  uint64_t v359;
  NSObject *v360;
  NSObject *v361;
  os_signpost_id_t v362;
  NSObject *v363;
  NSObject *v364;
  os_signpost_id_t v365;
  md::MeshRenderableLogic *v366;
  uint64_t v367;
  int8x8_t **v368;
  int8x8_t **v369;
  char v370;
  unint64_t v371;
  uint64_t v372;
  _Unwind_Exception **v373;
  std::__shared_weak_count *v374;
  unint64_t *p_shared_owners;
  unint64_t v376;
  _Unwind_Exception **v377;
  uint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  void *v381;
  _QWORD *v382;
  _QWORD *v383;
  void *v384;
  NSObject *v385;
  NSObject *v386;
  os_signpost_id_t v387;
  md::MeshRenderableLogic *v388;
  NSObject *v389;
  NSObject *v390;
  os_signpost_id_t v391;
  NSObject *v392;
  md::MeshRenderableLogic *v393;
  uint64_t v394;
  int8x8_t **v395;
  int8x8_t **v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  int8x8_t *v402;
  int8x8_t v403;
  uint8x8_t v404;
  unint64_t v405;
  _QWORD *v406;
  _QWORD *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int8x8_t *v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t (***v415)();
  uint64_t v416;
  int8x8_t v417;
  unint64_t v418;
  uint8x8_t v419;
  unint64_t v420;
  int8x8_t v421;
  uint64_t v422;
  unint64_t v423;
  int8x8_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint8x8_t v428;
  unint64_t v429;
  int8x8_t **v430;
  int8x8_t *v431;
  uint64_t v432;
  unint64_t v433;
  int8x8_t v434;
  NSObject *v435;
  NSObject *v436;
  os_signpost_id_t v437;
  void **v438;
  uint64_t v439;
  _Unwind_Exception **v440;
  uint64_t v441;
  _Unwind_Exception *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t j;
  uint64_t v446;
  void **v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  uint64_t v451;
  int8x8_t v452;
  unint64_t v453;
  uint8x8_t v454;
  int8x8_t v455;
  int8x8_t *v456;
  int8x8_t *v457;
  unint64_t v458;
  unint64_t v459;
  int8x8_t v460;
  unint64_t v461;
  void **v462;
  void **v463;
  _QWORD *v464;
  void *v465;
  unint64_t v466;
  char *v467;
  char *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  unint64_t v475;
  uint64_t v476;
  char *v477;
  __int128 *v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t *v487;
  char *v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  char *v493;
  uint64_t *v494;
  unint64_t v495;
  uint64_t v496;
  char *v497;
  uint64_t *v498;
  uint64_t v499;
  __int128 v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t ***v503;
  uint64_t **v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t *v507;
  unint64_t *v508;
  unint64_t *v509;
  int8x8_t v510;
  unint64_t v511;
  uint8x8_t v512;
  unint64_t v513;
  uint64_t **v514;
  uint64_t *v515;
  unsigned int v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  char *v522;
  _QWORD *v523;
  char *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  char *v529;
  char *v530;
  unint64_t v531;
  uint64_t v532;
  char *v533;
  __int128 *v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  std::__shared_weak_count *v544;
  unint64_t *v545;
  unint64_t v546;
  NSObject *v547;
  NSObject *v548;
  os_signpost_id_t v549;
  __int128 v550;
  uint64_t v551;
  int8x8_t **v552;
  int8x8_t **v553;
  int8x8_t v554;
  uint8x8_t v555;
  unint64_t v556;
  _QWORD *v557;
  _QWORD *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unsigned __int16 *v563;
  NSObject *v564;
  _BOOL4 v565;
  uint64_t **k;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  NSObject *v570;
  uint64_t **m;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  NSObject *v575;
  int8x8_t *v576;
  int8x8_t v577;
  uint8x8_t v578;
  unint64_t v579;
  _QWORD *v580;
  _QWORD *v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  _QWORD *v587;
  _QWORD *v588;
  int8x8_t v589;
  uint64_t v590;
  unint64_t *v591;
  unint64_t *v592;
  float *v593;
  _QWORD *v594;
  unint64_t v595;
  uint64_t **v596;
  uint64_t **v597;
  int8x8_t v598;
  uint64_t *v599;
  uint8x8_t v600;
  uint64_t **v601;
  uint64_t **v602;
  uint64_t *v603;
  unint64_t v604;
  uint64_t *v605;
  uint64_t *v606;
  uint64_t v607;
  _Unwind_Exception **v608;
  _QWORD *v609;
  _QWORD *v610;
  uint64_t v611;
  unint64_t *v612;
  int64_t v613;
  int8x8_t v614;
  _BYTE *v615;
  _QWORD *v616;
  int64_t v617;
  unint64_t v618;
  char *v619;
  unint64_t *v620;
  char *v621;
  unint64_t v622;
  uint64_t v623;
  char *v624;
  __int128 *v625;
  uint64_t v626;
  __int128 v627;
  uint64_t v628;
  _QWORD *v629;
  unint64_t *v630;
  char *v631;
  unint64_t v632;
  unint64_t *v633;
  int64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  unint64_t v638;
  _BYTE *v639;
  unint64_t *v640;
  unint64_t v641;
  unint64_t *v642;
  unint64_t v643;
  uint64_t v644;
  _OWORD *v645;
  unint64_t *v646;
  uint64_t v647;
  __int128 v648;
  void *v649;
  unint64_t v650;
  uint8x8_t v651;
  uint64_t v652;
  unint64_t *i;
  unint64_t v654;
  _QWORD *v655;
  void (__cdecl *exception_cleanup)(_Unwind_Reason_Code, _Unwind_Exception *);
  void (__cdecl *exception_class)(_Unwind_Reason_Code, _Unwind_Exception *);
  unint64_t v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  void (__cdecl *v662)(_Unwind_Reason_Code, _Unwind_Exception *);
  size_t v663;
  char *v664;
  int64_t v665;
  unint64_t v666;
  _Unwind_Exception_Class v667;
  void (__cdecl *v668)(_Unwind_Reason_Code, _Unwind_Exception *);
  uint64_t v669;
  _OWORD *v670;
  __int128 *v671;
  uint64_t v672;
  __int128 v673;
  uint64_t v674;
  char *v675;
  uint64_t (**v676)();
  unint64_t v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  _BYTE *v681;
  char *v682;
  char *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  _OWORD *v691;
  char *v692;
  uint64_t v693;
  __int128 v694;
  uint64_t v695;
  uint64_t (**v696)();
  uint64_t (**v697)();
  uint64_t v698;
  uint64_t v699;
  _QWORD *v700;
  uint64_t v701;
  _QWORD *v702;
  unint64_t *v703;
  unint64_t *v704;
  uint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t *v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  unint64_t v713;
  uint8x8_t v714;
  unint64_t v715;
  _QWORD *v716;
  _QWORD *v717;
  unint64_t v718;
  uint64_t v719;
  int8x8_t v722;
  int8x8_t v723;
  int8x8_t v724;
  int8x8_t v725;
  int8x8_t *v726;
  int8x8_t v727;
  char *v728;
  int8x8_t v729;
  char *v730;
  int8x8_t v731;
  int8x8_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  int8x8_t v736;
  int8x8_t v737;
  int8x8_t *v738;
  int64x2_t v739;
  uint64_t *v740;
  uint64_t *v741;
  uint64_t *v742;
  int8x8_t **v743;
  _QWORD *v744;
  uint64_t v745;
  int8x8_t v746;
  int8x8_t v747;
  int8x8_t **v748;
  int8x8_t **v749;
  unint64_t v750;
  int8x8_t *v751;
  uint64_t **v752;
  uint64_t v753;
  size_t v754;
  uint64_t v755;
  uint64_t v756;
  _QWORD *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  __int128 v761;
  uint64_t v762;
  md::MeshRenderableLogic *v763;
  uint64_t v764;
  uint64_t v765;
  void *__p;
  char *v767;
  char *v768;
  void **v769;
  char **v770;
  _Unwind_Exception *p_exception_object;
  uint64_t v772;
  uint64_t v773;
  _Unwind_Exception **v774;
  uint64_t *v775;
  void *v776[2];
  void *v777[2];
  float v778;
  void **v779;
  int8x8_t buf[4];
  int v781;
  std::__shared_weak_count *v782;
  unsigned int v783;
  char v784;
  _QWORD v785[3];
  _QWORD *v786;
  _QWORD v787[3];
  _QWORD *v788;
  _QWORD v789[3];
  _QWORD *v790;
  uint8_t v791[8];
  std::__shared_weak_count *v792;
  uint8_t *v793;
  uint64_t (**v794)();
  uint64_t (**v795)();
  char *v796;
  void **v797;
  _Unwind_Exception exception_object;
  uint64_t v799;

  v799 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 417) = 0;
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v763 = this;
  v4 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v5 = v4;
  v6 = *((_QWORD *)a2 + 10);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v6, "ProcessEnteringFeatures", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  v7 = *((_QWORD *)this + 17);
  exception_object.exception_class = (_Unwind_Exception_Class)&off_1E42CFED8;
  exception_object.private_2 = (uintptr_t)&exception_object;
  buf[3] = (int8x8_t)buf;
  buf[0] = (int8x8_t)&off_1E42CFED8;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(v776, v7 + 432, (uint64_t)buf, *(_QWORD *)(v7 + 432));
  v8 = (int8x8_t *)buf[3];
  if ((int8x8_t *)buf[3] == buf)
  {
    v9 = 4;
    v8 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[3])
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_11:
  private_2 = (_QWORD *)exception_object.private_2;
  if ((_Unwind_Exception *)exception_object.private_2 == &exception_object)
  {
    v11 = 4;
    private_2 = &exception_object;
  }
  else
  {
    if (!exception_object.private_2)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*private_2 + 8 * v11))();
LABEL_16:
  v12 = v776[0];
  v13 = (uint64_t)v779;
  if (!v779)
  {
LABEL_19:
    buf[3] = (int8x8_t)v13;
    goto LABEL_21;
  }
  if (v779 != v777)
  {
    v13 = (*((uint64_t (**)(void))*v779 + 2))();
    goto LABEL_19;
  }
  buf[3] = (int8x8_t)buf;
  (*((void (**)(void))*v779 + 3))();
LABEL_21:
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&p_exception_object, (uint64_t)v12, (uint64_t)buf, *(_QWORD *)v776[0]);
  v14 = (int8x8_t *)buf[3];
  if ((int8x8_t *)buf[3] == buf)
  {
    v15 = 4;
    v14 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[3])
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_26:
  v16 = v776[0];
  v17 = (uint64_t)v779;
  if (!v779)
  {
LABEL_29:
    buf[3] = (int8x8_t)v17;
    goto LABEL_31;
  }
  if (v779 != v777)
  {
    v17 = (*((uint64_t (**)(void))*v779 + 2))();
    goto LABEL_29;
  }
  buf[3] = (int8x8_t)buf;
  (*((void (**)(void **, int8x8_t *))v777[0] + 3))(v777, buf);
LABEL_31:
  v18 = (unint64_t)buf;
  md::FilteredIterator<std::vector<gdc::Registry *>>::FilteredIterator(&__p, (uint64_t)v16, (uint64_t)buf, *((_QWORD *)v776[0] + 1));
  v19 = (int8x8_t *)buf[3];
  if ((int8x8_t *)buf[3] == buf)
  {
    v20 = 4;
    v19 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[3])
      goto LABEL_36;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_36:
  v21 = (uint64_t *)v772;
  if (v767 != (char *)v772)
  {
    v739 = vdupq_n_s64(0xCA93DB2C2ACE8387);
    do
    {
      v22 = *v21;
      v23 = *(_QWORD *)(*v21 + 8);
      if (!v23)
        goto LABEL_62;
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        v25 = 0xCA93DB2C2ACE8387;
        if (v23 <= 0xCA93DB2C2ACE8387)
          v25 = 0xCA93DB2C2ACE8387 % v23;
      }
      else
      {
        v25 = (v23 - 1) & 0xCA93DB2C2ACE8387;
      }
      v26 = *(_QWORD **)(*(_QWORD *)v22 + 8 * v25);
      if (!v26 || (v27 = (_QWORD *)*v26) == 0)
      {
LABEL_62:
        v31 = *(_WORD *)(v22 + 40);
        v32 = (_QWORD *)operator new();
        v33 = operator new();
        *(_WORD *)v33 = v31;
        *(_QWORD *)(v33 + 8) = 0;
        *(_QWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 40) = 0;
        *(_QWORD *)(v33 + 48) = 0;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = v33 + 40;
        *(_OWORD *)(v33 + 56) = xmmword_19FFB4C30;
        *(_QWORD *)(v33 + 72) = 0;
        *(_BYTE *)(v33 + 80) = 0;
        *(_OWORD *)(v33 + 88) = 0u;
        *(_OWORD *)(v33 + 104) = 0u;
        *(_DWORD *)(v33 + 120) = 1065353216;
        *(_OWORD *)(v33 + 128) = 0u;
        *(_OWORD *)(v33 + 144) = 0u;
        *(_DWORD *)(v33 + 160) = 1065353216;
        *(_OWORD *)(v33 + 168) = 0u;
        *(_OWORD *)(v33 + 184) = 0u;
        *(_DWORD *)(v33 + 200) = 1065353216;
        *(_QWORD *)(v33 + 216) = 0;
        *(_QWORD *)(v33 + 224) = 0;
        *(_QWORD *)(v33 + 208) = v33 + 216;
        *(_OWORD *)(v33 + 232) = xmmword_19FFB3900;
        *(_QWORD *)(v33 + 264) = 0;
        *(_QWORD *)(v33 + 272) = 0;
        *(_QWORD *)(v33 + 248) = 0;
        *(_QWORD *)(v33 + 256) = v33 + 264;
        *(_QWORD *)(v33 + 280) = 32;
        *(_QWORD *)(v33 + 288) = 7168;
        *(_QWORD *)(v33 + 312) = 0;
        *(_QWORD *)(v33 + 320) = 0;
        *(_QWORD *)(v33 + 296) = 0;
        *(_QWORD *)(v33 + 304) = v33 + 312;
        *(_QWORD *)(v33 + 328) = 32;
        *(_QWORD *)(v33 + 336) = 7936;
        *(_QWORD *)(v33 + 344) = 0;
        v32[2] = "md::RenderBatchManager]";
        v32[3] = 22;
        v32[4] = v33;
        v32[1] = 0xCA93DB2C2ACE8387;
        *v32 = &off_1E42B0F78;
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v34 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            v18 = 0xCA93DB2C2ACE8387;
            if (v23 <= 0xCA93DB2C2ACE8387)
              v18 = 0xCA93DB2C2ACE8387 % v23;
          }
          else
          {
            v18 = (v23 - 1) & 0xCA93DB2C2ACE8387;
          }
          v35 = *(_QWORD **)(*(_QWORD *)v22 + 8 * v18);
          if (v35)
          {
            v36 = (_QWORD *)*v35;
            if (v36)
            {
              if (v34.u32[0] < 2uLL)
              {
                while (1)
                {
                  v38 = v36[1];
                  if (v38 == 0xCA93DB2C2ACE8387)
                  {
                    if (v36[2] == 0xCA93DB2C2ACE8387)
                      goto LABEL_121;
                  }
                  else if ((v38 & (v23 - 1)) != v18)
                  {
                    goto LABEL_82;
                  }
                  v36 = (_QWORD *)*v36;
                  if (!v36)
                    goto LABEL_82;
                }
              }
              do
              {
                v37 = v36[1];
                if (v37 == 0xCA93DB2C2ACE8387)
                {
                  if (v36[2] == 0xCA93DB2C2ACE8387)
                    goto LABEL_121;
                }
                else
                {
                  if (v37 >= v23)
                    v37 %= v23;
                  if (v37 != v18)
                    break;
                }
                v36 = (_QWORD *)*v36;
              }
              while (v36);
            }
          }
        }
LABEL_82:
        v39 = (char *)operator new(0x30uLL);
        *(_QWORD *)v39 = 0;
        *(int64x2_t *)(v39 + 8) = v739;
        *((_QWORD *)v39 + 3) = "md::RenderBatchManager]";
        *((_QWORD *)v39 + 4) = 22;
        *((_QWORD *)v39 + 5) = v32;
        v40 = (float)(unint64_t)(*(_QWORD *)(v22 + 24) + 1);
        v41 = *(float *)(v22 + 32);
        if (!v23 || (float)(v41 * (float)v23) < v40)
        {
          v42 = v23 < 3 || (v23 & (v23 - 1)) != 0;
          v43 = v42 | (2 * v23);
          v44 = vcvtps_u32_f32(v40 / v41);
          if (v43 <= v44)
            prime = v44;
          else
            prime = v43;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v23 = *(_QWORD *)(v22 + 8);
          }
          if (prime > v23)
            goto LABEL_95;
          if (prime < v23)
          {
            v46 = vcvtps_u32_f32((float)*(unint64_t *)(v22 + 24) / *(float *)(v22 + 32));
            if (v23 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
            {
              v46 = std::__next_prime(v46);
            }
            else
            {
              v48 = 1 << -(char)__clz(v46 - 1);
              if (v46 >= 2)
                v46 = v48;
            }
            if (prime <= v46)
              prime = v46;
            if (prime < v23)
LABEL_95:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v22, prime);
          }
          v23 = *(_QWORD *)(v22 + 8);
          if ((v23 & (v23 - 1)) != 0)
          {
            if (v23 <= 0xCA93DB2C2ACE8387)
              v18 = 0xCA93DB2C2ACE8387 % v23;
            else
              v18 = 0xCA93DB2C2ACE8387;
          }
          else
          {
            v18 = (v23 - 1) & 0xCA93DB2C2ACE8387;
          }
        }
        v49 = *(_QWORD *)v22;
        v50 = *(_QWORD **)(*(_QWORD *)v22 + 8 * v18);
        if (v50)
        {
          *(_QWORD *)v39 = *v50;
          goto LABEL_119;
        }
        *(_QWORD *)v39 = *(_QWORD *)(v22 + 16);
        *(_QWORD *)(v22 + 16) = v39;
        *(_QWORD *)(v49 + 8 * v18) = v22 + 16;
        if (*(_QWORD *)v39)
        {
          v51 = *(_QWORD *)(*(_QWORD *)v39 + 8);
          if ((v23 & (v23 - 1)) != 0)
          {
            if (v51 >= v23)
              v51 %= v23;
          }
          else
          {
            v51 &= v23 - 1;
          }
          v50 = (_QWORD *)(*(_QWORD *)v22 + 8 * v51);
LABEL_119:
          *v50 = v39;
        }
        ++*(_QWORD *)(v22 + 24);
        v23 = *(_QWORD *)(v22 + 8);
        goto LABEL_121;
      }
      if (v24.u32[0] < 2uLL)
      {
        while (1)
        {
          v29 = v27[1];
          if (v29 == 0xCA93DB2C2ACE8387)
          {
            if (v27[2] == 0xCA93DB2C2ACE8387)
              goto LABEL_60;
          }
          else if ((v29 & (v23 - 1)) != v25)
          {
            goto LABEL_62;
          }
          v27 = (_QWORD *)*v27;
          if (!v27)
            goto LABEL_62;
        }
      }
      while (1)
      {
        v28 = v27[1];
        if (v28 == 0xCA93DB2C2ACE8387)
          break;
        if (v28 >= v23)
          v28 %= v23;
        if (v28 != v25)
          goto LABEL_62;
LABEL_49:
        v27 = (_QWORD *)*v27;
        if (!v27)
          goto LABEL_62;
      }
      if (v27[2] != 0xCA93DB2C2ACE8387)
        goto LABEL_49;
LABEL_60:
      v30 = v27[5];
      if (*(_QWORD *)(v30 + 8) != 0xCA93DB2C2ACE8387 || !*(_QWORD *)(v30 + 32))
        goto LABEL_62;
LABEL_121:
      if (!v23)
        goto LABEL_144;
      v52 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        v53 = 0xCA93DB2C2ACE8387;
        if (v23 <= 0xCA93DB2C2ACE8387)
          v53 = 0xCA93DB2C2ACE8387 % v23;
      }
      else
      {
        v53 = (v23 - 1) & 0xCA93DB2C2ACE8387;
      }
      v54 = *(_QWORD **)(*(_QWORD *)v22 + 8 * v53);
      if (!v54 || (v55 = (_QWORD *)*v54) == 0)
      {
LABEL_144:
        v59 = 0;
        goto LABEL_145;
      }
      if (v52.u32[0] < 2uLL)
      {
        while (1)
        {
          v57 = v55[1];
          if (v57 == 0xCA93DB2C2ACE8387)
          {
            if (v55[2] == 0xCA93DB2C2ACE8387)
              goto LABEL_142;
          }
          else if ((v57 & (v23 - 1)) != v53)
          {
            goto LABEL_144;
          }
          v55 = (_QWORD *)*v55;
          if (!v55)
            goto LABEL_144;
        }
      }
      while (2)
      {
        v56 = v55[1];
        if (v56 != 0xCA93DB2C2ACE8387)
        {
          if (v56 >= v23)
            v56 %= v23;
          if (v56 != v53)
            goto LABEL_144;
          goto LABEL_131;
        }
        if (v55[2] != 0xCA93DB2C2ACE8387)
        {
LABEL_131:
          v55 = (_QWORD *)*v55;
          if (!v55)
            goto LABEL_144;
          continue;
        }
        break;
      }
LABEL_142:
      v58 = v55[5];
      if (*(_QWORD *)(v58 + 8) != 0xCA93DB2C2ACE8387)
        goto LABEL_144;
      v59 = *(unsigned __int16 **)(v58 + 32);
LABEL_145:
      v18 = *((_QWORD *)v59 + 1);
      v60 = *((_QWORD *)v59 + 2);
      if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
      v61 = (id)GEOGetVectorKitMeshRenderableLogicLog(void)::log;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        v62 = *v59;
        buf[0].i32[0] = 67109120;
        buf[0].i32[1] = v62;
        _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_DEBUG, "Entering BatchManager(id:%d)", (uint8_t *)buf, 8u);
      }

      v750 = v18;
      v755 = v60;
      v63 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(v22);
      v64 = gdc::Registry::storage<md::components::Material>(v22);
      v65 = (_QWORD *)v64;
      v66 = v64 + 32;
      v67 = v63[7];
      v68 = v63[8];
      if (*(_QWORD *)(v64 + 64) - *(_QWORD *)(v64 + 56) >= (unint64_t)(v68 - v67))
        v69 = v63 + 4;
      else
        v69 = (_QWORD *)(v64 + 32);
      if (v63 + 4 == v69 && v67 != v68)
      {
        v18 = v63[10];
        do
        {
          v70 = *(unsigned int *)(v67 + 4);
          v71 = v65[4];
          v72 = (v65[5] - v71) >> 3;
          if (v70 >> 7 < v72)
          {
            v73 = *(_QWORD *)(v71 + 8 * (v70 >> 7));
            if (v73)
            {
              v74 = *(unsigned __int16 *)(v73 + 2 * (v70 & 0x7F));
              v76 = v65[7];
              v75 = v65[8];
              v77 = (v75 - v76) >> 3;
              if (v77 > v74)
              {
                v78 = v76 + 8 * v74;
                if (v78 != v75 && *(_DWORD *)(v78 + 4) == (_DWORD)v70)
                {
                  if ((v80 = *(_QWORD *)v67, v81 = *(_QWORD *)v67 >> 39, v81 < v72)
                    && (v82 = *(_QWORD *)(v71 + 8 * v81)) != 0
                    && (v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v80) & 0x7F)), v77 > v83)
                    && ((v84 = v76 + 8 * v83, v84 != v75) ? (v85 = *(_DWORD *)(v84 + 4) == HIDWORD(v80)) : (v85 = 0), v85))
                  {
                    v86 = (uint64_t *)(v65[10] + 24 * v83);
                  }
                  else
                  {
                    v86 = (uint64_t *)v65[11];
                  }
                  buildMaterialKey(v22, *(_QWORD *)v67, (_BYTE *)v18, v86, (uint64_t)buf);
                  if (v784)
                  {
                    md::RenderBatchManager::process((uint64_t)v59, (size_t)buf, v80);
                    if (v784)
                    {
                      if (v783 != -1)
                        (*(&off_1E42F43B8 + v783))((int)&v794, (md::MaterialRenderBatchKey *)buf);
                    }
                  }
                }
              }
            }
          }
          v18 += 112;
          v67 += 8;
        }
        while (v67 != v68);
      }
      if ((_QWORD *)v66 == v69)
      {
        v91 = v65[7];
        v92 = v65[8];
        if (v91 != v92)
        {
          v18 = v65[10];
          do
          {
            v93 = *(unsigned int *)(v91 + 4);
            v94 = v63[4];
            v95 = (v63[5] - v94) >> 3;
            if (v93 >> 7 < v95)
            {
              v96 = *(_QWORD *)(v94 + 8 * (v93 >> 7));
              if (v96)
              {
                v97 = *(unsigned __int16 *)(v96 + 2 * (v93 & 0x7F));
                v99 = v63[7];
                v98 = v63[8];
                v100 = (v98 - v99) >> 3;
                if (v100 > v97)
                {
                  v101 = v99 + 8 * v97;
                  if (v101 != v98 && *(_DWORD *)(v101 + 4) == (_DWORD)v93)
                  {
                    if ((v103 = *(_QWORD *)v91, v104 = *(_QWORD *)v91 >> 39, v104 < v95)
                      && (v105 = *(_QWORD *)(v94 + 8 * v104)) != 0
                      && (v106 = *(unsigned __int16 *)(v105 + 2 * (HIDWORD(v103) & 0x7F)), v100 > v106)
                      && ((v107 = v99 + 8 * v106, v107 != v98)
                        ? (v108 = *(_DWORD *)(v107 + 4) == HIDWORD(v103))
                        : (v108 = 0),
                          v108))
                    {
                      v109 = (_BYTE *)(v63[10] + 112 * v106);
                    }
                    else
                    {
                      v109 = (_BYTE *)v63[11];
                    }
                    buildMaterialKey(v22, *(_QWORD *)v91, v109, (uint64_t *)v18, (uint64_t)buf);
                    if (v784)
                    {
                      md::RenderBatchManager::process((uint64_t)v59, (size_t)buf, v103);
                      if (v784)
                      {
                        if (v783 != -1)
                          (*(&off_1E42F43B8 + v783))((int)&v794, (md::MaterialRenderBatchKey *)buf);
                      }
                    }
                  }
                }
              }
            }
            v18 += 24;
            v91 += 8;
          }
          while (v91 != v92);
        }
      }
      v87 = (uint64_t)(v755 - v750) >> 3;
      if (v87 != (uint64_t)(*((_QWORD *)v59 + 2) - *((_QWORD *)v59 + 1)) >> 3)
      {
        if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
        v88 = (id)GEOGetVectorKitMeshRenderableLogicLog(void)::log;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
        {
          v89 = (int8x8_t)(((uint64_t)(*((_QWORD *)v59 + 2) - *((_QWORD *)v59 + 1)) >> 3) - v87);
          v90 = *v59;
          buf[0].i32[0] = 134218240;
          *(int8x8_t *)((char *)buf + 4) = v89;
          buf[1].i16[2] = 1024;
          *(__int32 *)((char *)&buf[1].i32[1] + 2) = v90;
          _os_log_impl(&dword_19F029000, v88, OS_LOG_TYPE_DEBUG, "Added %zu batches to BatchManager(id:%d)", (uint8_t *)buf, 0x12u);
        }

      }
      while (1)
      {
        v21 = (uint64_t *)(v772 + 8);
        v772 = (uint64_t)v21;
        if (v21 == (uint64_t *)p_exception_object->exception_cleanup)
          break;
        if (!v775)
          goto LABEL_1224;
        if ((*(unsigned int (**)(uint64_t *))(*v775 + 48))(v775))
        {
          v21 = (uint64_t *)v772;
          break;
        }
      }
    }
    while (v767 != (char *)v21);
  }
  v110 = v770;
  if (v770 == &v768)
  {
    v111 = 4;
    v110 = &v768;
  }
  else
  {
    if (!v770)
      goto LABEL_217;
    v111 = 5;
  }
  (*(void (**)(void))&(*v110)[8 * v111])();
LABEL_217:
  v112 = v775;
  if (v775 == &v773)
  {
    v113 = 4;
    v112 = &v773;
  }
  else
  {
    if (!v775)
      goto LABEL_222;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_222:
  v114 = v779;
  if (v779 == v777)
  {
    v115 = 4;
    v114 = v777;
  }
  else
  {
    if (!v779)
      goto LABEL_227;
    v115 = 5;
  }
  (*((void (**)(void))*v114 + v115))();
LABEL_227:
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v116 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v117 = v116;
  v118 = *((_QWORD *)a2 + 10);
  if (v118 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v116))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v117, OS_SIGNPOST_INTERVAL_END, v118, "ProcessEnteringFeatures", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v119 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v120 = v119;
  v121 = *((_QWORD *)a2 + 10);
  if (v121 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v119))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v120, OS_SIGNPOST_INTERVAL_BEGIN, v121, "ProcessUpdatedFeatures", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  *((_QWORD *)v763 + 15) = 0;
  *((_BYTE *)v763 + 128) = 0;
  v122 = *((_QWORD *)v763 + 17);
  v776[0] = &off_1E42CFE90;
  v777[1] = v776;
  md::RegistryManager::each(v122, (uint64_t)v776);
  v123 = (void **)v777[1];
  if (v777[1] == v776)
  {
    v124 = 4;
    v123 = v776;
  }
  else
  {
    if (!v777[1])
      goto LABEL_242;
    v124 = 5;
  }
  (*((void (**)(void))*v123 + v124))();
LABEL_242:
  v125 = (_QWORD *)*((_QWORD *)v763 + 17);
  v126 = (uint64_t *)v125[48];
  v740 = (uint64_t *)v125[49];
  if (v126 == v740)
    goto LABEL_462;
  do
  {
    v742 = v126;
    v127 = (_QWORD *)*v126;
    v128 = (_QWORD *)gdc::Registry::storage<md::components::VisibilityChanged>(*v126);
    v129 = gdc::Registry::storage<md::components::Visibility>((uint64_t)v127);
    v130 = (_QWORD *)v129;
    v132 = v128[7];
    v131 = v128[8];
    v756 = v129 + 32;
    if (*(_QWORD *)(v129 + 64) - *(_QWORD *)(v129 + 56) >= (unint64_t)(v131 - v132))
      v133 = v128 + 4;
    else
      v133 = (_QWORD *)(v129 + 32);
    buf[0] = (int8x8_t)&v781;
    buf[1] = (int8x8_t)&v781;
    buf[2] = (int8x8_t)&v781;
    buf[3] = (int8x8_t)4;
    v744 = v133;
    if (v131 != v132 && v128 + 4 == v133)
    {
      while (1)
      {
        v192 = *(unsigned int *)(v132 + 4);
        v193 = v130[4];
        if (v192 >> 7 >= (v130[5] - v193) >> 3)
          goto LABEL_349;
        v194 = *(_QWORD *)(v193 + 8 * (v192 >> 7));
        if (!v194)
          goto LABEL_349;
        v195 = *(unsigned __int16 *)(v194 + 2 * (v192 & 0x7F));
        v197 = v130[7];
        v196 = v130[8];
        if (v195 >= (v196 - v197) >> 3)
          goto LABEL_349;
        v198 = v197 + 8 * v195;
        if (v198 == v196 || *(_DWORD *)(v198 + 4) != (_DWORD)v192)
          goto LABEL_349;
        v200 = *(_QWORD *)v132;
        if (!gdc::Registry::hasAny<md::components::MeshInstance,md::components::DynamicMeshInstance>((uint64_t)v127, *(_QWORD *)v132))goto LABEL_349;
        md::MeshRenderableLogic::updateEntityVisibility((uint64_t)v763, v200, v127);
        v191 = (unint64_t *)buf[1];
        v201 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
        if (*(_QWORD *)&buf[3] < (unint64_t)(v201 + 1))
          break;
LABEL_348:
        *v191 = v200;
        *(_QWORD *)&buf[1] += 8;
LABEL_349:
        v132 += 8;
        if (v132 == v131)
          goto LABEL_252;
      }
      v734 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
      v722 = buf[2];
      v202 = (1 << -(char)__clz(*(_QWORD *)&buf[3] + 1));
      if (*(_QWORD *)&buf[3] >= 0xFFFFFFFFFFFFFFFELL)
        v202 = 1;
      if (v202 <= v201 + 1)
        v202 = v201 + 1;
      v724 = (int8x8_t)v202;
      v727 = buf[0];
      v203 = (char *)malloc_type_malloc(8 * v202, 0x100004000313F17uLL);
      v204 = (uint64_t *)buf[0];
      v205 = buf[1];
      if (*(_QWORD *)buf != *(_QWORD *)&buf[1])
      {
        v206 = *(_QWORD *)&buf[1] - *(_QWORD *)buf - 8;
        if (v206 < 0x18)
        {
          v207 = v203;
        }
        else
        {
          v207 = v203;
          if ((unint64_t)&v203[-*(_QWORD *)buf] >= 0x20)
          {
            v208 = (v206 >> 3) + 1;
            v209 = 8 * (v208 & 0x3FFFFFFFFFFFFFFCLL);
            v207 = &v203[v209];
            v210 = (__int128 *)(*(_QWORD *)buf + 16);
            v211 = v203 + 16;
            v212 = v208 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v213 = *v210;
              *(v211 - 1) = *(v210 - 1);
              *v211 = v213;
              v210 += 2;
              v211 += 2;
              v212 -= 4;
            }
            while (v212);
            if (v208 == (v208 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_373;
            v204 = (uint64_t *)((char *)v204 + v209);
          }
        }
        do
        {
          v214 = *v204++;
          *(_QWORD *)v207 = v214;
          v207 += 8;
        }
        while (v204 != (uint64_t *)v205);
      }
LABEL_373:
      if (*(_QWORD *)&v727 != *(_QWORD *)&v722)
      {
        v728 = v203;
        free(*(void **)buf);
        v203 = v728;
      }
      v191 = (unint64_t *)&v203[8 * v734];
      buf[0] = (int8x8_t)v203;
      buf[1] = (int8x8_t)v191;
      buf[3] = v724;
      goto LABEL_348;
    }
LABEL_252:
    if ((_QWORD *)v756 == v744)
    {
      v187 = v130[7];
      v188 = v130[8];
      while (1)
      {
        if (v187 == v188)
          goto LABEL_253;
        v240 = *(unsigned int *)(v187 + 4);
        v241 = v128[4];
        if (v240 >> 7 < (v128[5] - v241) >> 3)
        {
          v242 = *(_QWORD *)(v241 + 8 * (v240 >> 7));
          if (v242)
          {
            v243 = *(unsigned __int16 *)(v242 + 2 * (v240 & 0x7F));
            v245 = v128[7];
            v244 = v128[8];
            if (v243 < (v244 - v245) >> 3)
            {
              v246 = v245 + 8 * v243;
              if (v246 != v244 && *(_DWORD *)(v246 + 4) == (_DWORD)v240)
              {
                v248 = *(_QWORD *)v187;
                if (gdc::Registry::hasAny<md::components::MeshInstance,md::components::DynamicMeshInstance>((uint64_t)v127, *(_QWORD *)v187))break;
              }
            }
          }
        }
LABEL_405:
        v187 += 8;
      }
      md::MeshRenderableLogic::updateEntityVisibility((uint64_t)v763, v248, v127);
      v239 = (unint64_t *)buf[1];
      v249 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
      if (*(_QWORD *)&buf[3] >= (unint64_t)(v249 + 1))
      {
LABEL_404:
        *v239 = v248;
        *(_QWORD *)&buf[1] += 8;
        goto LABEL_405;
      }
      v746 = buf[0];
      v758 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
      v731 = buf[2];
      v250 = (1 << -(char)__clz(*(_QWORD *)&buf[3] + 1));
      if (*(_QWORD *)&buf[3] >= 0xFFFFFFFFFFFFFFFELL)
        v250 = 1;
      if (v250 <= v249 + 1)
        v250 = v249 + 1;
      v736 = (int8x8_t)v250;
      v251 = (char *)malloc_type_malloc(8 * v250, 0x100004000313F17uLL);
      v252 = (int8x8_t)v251;
      v253 = (uint64_t *)buf[0];
      v254 = buf[1];
      if (*(_QWORD *)buf != *(_QWORD *)&buf[1])
      {
        v255 = *(_QWORD *)&buf[1] - *(_QWORD *)buf - 8;
        if (v255 < 0x18)
        {
          v256 = v251;
        }
        else
        {
          v256 = v251;
          if ((unint64_t)&v251[-*(_QWORD *)buf] >= 0x20)
          {
            v257 = (v255 >> 3) + 1;
            v258 = 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
            v256 = &v251[v258];
            v259 = (__int128 *)(*(_QWORD *)buf + 16);
            v260 = v251 + 16;
            v261 = v257 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v262 = *v259;
              *(v260 - 1) = *(v259 - 1);
              *v260 = v262;
              v259 += 2;
              v260 += 2;
              v261 -= 4;
            }
            while (v261);
            if (v257 == (v257 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_430;
            v253 = (uint64_t *)((char *)v253 + v258);
          }
        }
        do
        {
          v263 = *v253++;
          *(_QWORD *)v256 = v263;
          v256 += 8;
        }
        while (v253 != (uint64_t *)v254);
      }
LABEL_430:
      if (*(_QWORD *)&v746 != *(_QWORD *)&v731)
        free(*(void **)buf);
      v239 = (unint64_t *)(*(_QWORD *)&v252 + 8 * v758);
      buf[0] = v252;
      buf[1] = (int8x8_t)v239;
      buf[3] = v736;
      goto LABEL_404;
    }
LABEL_253:
    v135 = (_Unwind_Exception_Class *)buf[0];
    v136 = buf[1];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[1])
      goto LABEL_294;
    do
    {
      __p = (void *)0xA58E035ED185DBF8;
      v137 = (int8x8_t)v127[16];
      if (v137)
      {
        v138 = (uint8x8_t)vcnt_s8(v137);
        v138.i16[0] = vaddlv_u8(v138);
        if (v138.u32[0] > 1uLL)
        {
          v139 = 0xA58E035ED185DBF8;
          if (*(_QWORD *)&v137 <= 0xA58E035ED185DBF8)
            v139 = 0xA58E035ED185DBF8 % *(_QWORD *)&v137;
        }
        else
        {
          v139 = (*(_QWORD *)&v137 - 1) & 0xA58E035ED185DBF8;
        }
        v140 = *(_QWORD **)(v127[15] + 8 * v139);
        if (v140)
        {
          v141 = (_QWORD *)*v140;
          if (v141)
          {
            if (v138.u32[0] < 2uLL)
            {
              v142 = *(_QWORD *)&v137 - 1;
              while (1)
              {
                v144 = v141[1];
                if (v144 == 0xA58E035ED185DBF8)
                {
                  if (v141[2] == 0xA58E035ED185DBF8)
                    goto LABEL_292;
                }
                else if ((v144 & v142) != v139)
                {
                  goto LABEL_276;
                }
                v141 = (_QWORD *)*v141;
                if (!v141)
                  goto LABEL_276;
              }
            }
            do
            {
              v143 = v141[1];
              if (v143 == 0xA58E035ED185DBF8)
              {
                if (v141[2] == 0xA58E035ED185DBF8)
                {
LABEL_292:
                  v145 = v141[3];
                  goto LABEL_279;
                }
              }
              else
              {
                if (v143 >= *(_QWORD *)&v137)
                  v143 %= *(_QWORD *)&v137;
                if (v143 != v139)
                  break;
              }
              v141 = (_QWORD *)*v141;
            }
            while (v141);
          }
        }
      }
LABEL_276:
      v145 = operator new();
      *(_QWORD *)(v145 + 16) = "md::components::VisibilityChanged]";
      *(_QWORD *)(v145 + 24) = 33;
      *(_OWORD *)(v145 + 32) = 0u;
      *(_OWORD *)(v145 + 48) = 0u;
      *(_OWORD *)(v145 + 64) = 0u;
      *(_OWORD *)(v145 + 80) = 0u;
      *(_OWORD *)(v145 + 96) = 0u;
      *(_OWORD *)(v145 + 112) = 0u;
      *(_OWORD *)(v145 + 128) = 0u;
      *(_DWORD *)(v145 + 144) = 1065353216;
      *(_OWORD *)(v145 + 152) = 0u;
      *(_OWORD *)(v145 + 168) = 0u;
      *(_QWORD *)(v145 + 184) = 0;
      *(_DWORD *)(v145 + 192) = 1065353216;
      *(_OWORD *)(v145 + 200) = 0u;
      *(_OWORD *)(v145 + 216) = 0u;
      *(_QWORD *)(v145 + 232) = 0;
      *(_DWORD *)(v145 + 240) = 1065353216;
      *(_QWORD *)v145 = &off_1E42B3138;
      *(_QWORD *)(v145 + 8) = 0xA58E035ED185DBF8;
      *(_QWORD *)(v145 + 248) = v127;
      v146 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v127 + 15, 0xA58E035ED185DBF8, &__p);
      v147 = v146[3];
      v146[3] = v145;
      if (v147)
        (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
      p_exception_object = (_Unwind_Exception *)0xA58E035ED185DBF8;
      v772 = (uint64_t)"md::components::VisibilityChanged]";
      v773 = 33;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v127, 0xA58E035ED185DBF8, (uint64_t)&p_exception_object, (uint64_t *)(v145 + 104));
LABEL_279:
      exception_object.exception_class = *v135;
      v148 = *(_QWORD *)(v145 + 32);
      if (exception_object.exception_class >> 39 < (*(_QWORD *)(v145 + 40) - v148) >> 3)
      {
        v149 = *(_QWORD *)(v148 + 8 * (exception_object.exception_class >> 39));
        if (v149)
        {
          v150 = *(unsigned __int16 *)(v149 + 2 * (HIDWORD(exception_object.exception_class) & 0x7F));
          v152 = *(_QWORD *)(v145 + 56);
          v151 = *(_QWORD *)(v145 + 64);
          if (v150 < (v151 - v152) >> 3)
          {
            v153 = v152 + 8 * v150;
            if (v153 != v151 && *(_DWORD *)(v153 + 4) == HIDWORD(exception_object.exception_class))
            {
              geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase((uint64_t *)(v145 + 32), (_QWORD *)v153);
              --*(_QWORD *)(v145 + 88);
              v155 = *(_QWORD **)(v145 + 224);
              if (v155)
              {
                v156 = *(void **)(v145 + 248);
                while (1)
                {
                  p_exception_object = &exception_object;
                  v772 = 1;
                  __p = v156;
                  v157 = v155[6];
                  if (!v157)
                    break;
                  (*(void (**)(uint64_t, void **, _Unwind_Exception **))(*(_QWORD *)v157 + 48))(v157, &__p, &p_exception_object);
                  v155 = (_QWORD *)*v155;
                  if (!v155)
                    goto LABEL_255;
                }
LABEL_1224:
                std::__throw_bad_function_call[abi:nn180100]();
LABEL_1238:
                __break(1u);
                JUMPOUT(0x19F1684B4);
              }
            }
          }
        }
      }
LABEL_255:
      ++v135;
    }
    while (v135 != (_Unwind_Exception_Class *)v136);
    v135 = (_Unwind_Exception_Class *)buf[0];
LABEL_294:
    if (v135 != (_Unwind_Exception_Class *)buf[2])
      free(v135);
    v158 = (_QWORD *)gdc::Registry::storage<md::components::CustomRenderStateChanged>((uint64_t)v127);
    v159 = gdc::Registry::storage<md::components::CustomRenderState>((uint64_t)v127);
    v160 = (_QWORD *)v159;
    v161 = v158[7];
    v162 = v158[8];
    v745 = v159 + 32;
    if (*(_QWORD *)(v159 + 64) - *(_QWORD *)(v159 + 56) >= (unint64_t)(v162 - v161))
      v163 = v158 + 4;
    else
      v163 = (_QWORD *)(v159 + 32);
    v757 = v163;
    buf[0] = (int8x8_t)&v781;
    buf[1] = (int8x8_t)&v781;
    buf[2] = (int8x8_t)&v781;
    buf[3] = (int8x8_t)4;
    if (v162 != v161 && v158 + 4 == v163)
    {
      while (1)
      {
        v216 = *(unsigned int *)(v161 + 4);
        v217 = v160[4];
        if (v216 >> 7 >= (v160[5] - v217) >> 3)
          goto LABEL_377;
        v218 = *(_QWORD *)(v217 + 8 * (v216 >> 7));
        if (!v218)
          goto LABEL_377;
        v219 = *(unsigned __int16 *)(v218 + 2 * (v216 & 0x7F));
        v221 = v160[7];
        v220 = v160[8];
        if (v219 >= (v220 - v221) >> 3)
          goto LABEL_377;
        v222 = v221 + 8 * v219;
        if (v222 == v220 || *(_DWORD *)(v222 + 4) != (_DWORD)v216)
          goto LABEL_377;
        v224 = *(_QWORD *)v161;
        if (!gdc::Registry::hasAny<md::components::MeshInstance,md::components::DynamicMeshInstance>((uint64_t)v127, *(_QWORD *)v161))goto LABEL_377;
        md::MeshRenderableLogic::updateEntityCustomRenderState((uint64_t)v763, v224, v127);
        v215 = (unint64_t *)buf[1];
        v225 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
        if (*(_QWORD *)&buf[3] < (unint64_t)(v225 + 1))
          break;
LABEL_376:
        *v215 = v224;
        *(_QWORD *)&buf[1] += 8;
LABEL_377:
        v161 += 8;
        if (v161 == v162)
          goto LABEL_301;
      }
      v735 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
      v723 = buf[2];
      v226 = (1 << -(char)__clz(*(_QWORD *)&buf[3] + 1));
      if (*(_QWORD *)&buf[3] >= 0xFFFFFFFFFFFFFFFELL)
        v226 = 1;
      if (v226 <= v225 + 1)
        v226 = v225 + 1;
      v725 = (int8x8_t)v226;
      v729 = buf[0];
      v227 = (char *)malloc_type_malloc(8 * v226, 0x100004000313F17uLL);
      v228 = (uint64_t *)buf[0];
      v229 = buf[1];
      if (*(_QWORD *)buf != *(_QWORD *)&buf[1])
      {
        v230 = *(_QWORD *)&buf[1] - *(_QWORD *)buf - 8;
        if (v230 < 0x18)
        {
          v231 = v227;
        }
        else
        {
          v231 = v227;
          if ((unint64_t)&v227[-*(_QWORD *)buf] >= 0x20)
          {
            v232 = (v230 >> 3) + 1;
            v233 = 8 * (v232 & 0x3FFFFFFFFFFFFFFCLL);
            v231 = &v227[v233];
            v234 = (__int128 *)(*(_QWORD *)buf + 16);
            v235 = v227 + 16;
            v236 = v232 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v237 = *v234;
              *(v235 - 1) = *(v234 - 1);
              *v235 = v237;
              v234 += 2;
              v235 += 2;
              v236 -= 4;
            }
            while (v236);
            if (v232 == (v232 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_401;
            v228 = (uint64_t *)((char *)v228 + v233);
          }
        }
        do
        {
          v238 = *v228++;
          *(_QWORD *)v231 = v238;
          v231 += 8;
        }
        while (v228 != (uint64_t *)v229);
      }
LABEL_401:
      if (*(_QWORD *)&v729 != *(_QWORD *)&v723)
      {
        v730 = v227;
        free(*(void **)buf);
        v227 = v730;
      }
      v215 = (unint64_t *)&v227[8 * v735];
      buf[0] = (int8x8_t)v227;
      buf[1] = (int8x8_t)v215;
      buf[3] = v725;
      goto LABEL_376;
    }
LABEL_301:
    if ((_QWORD *)v745 == v757)
    {
      v189 = v160[7];
      v190 = v160[8];
      while (1)
      {
        if (v189 == v190)
          goto LABEL_302;
        v265 = *(unsigned int *)(v189 + 4);
        v266 = v158[4];
        if (v265 >> 7 < (v158[5] - v266) >> 3)
        {
          v267 = *(_QWORD *)(v266 + 8 * (v265 >> 7));
          if (v267)
          {
            v268 = *(unsigned __int16 *)(v267 + 2 * (v265 & 0x7F));
            v270 = v158[7];
            v269 = v158[8];
            if (v268 < (v269 - v270) >> 3)
            {
              v271 = v270 + 8 * v268;
              if (v271 != v269 && *(_DWORD *)(v271 + 4) == (_DWORD)v265)
              {
                v273 = *(_QWORD *)v189;
                if (gdc::Registry::hasAny<md::components::MeshInstance,md::components::DynamicMeshInstance>((uint64_t)v127, *(_QWORD *)v189))break;
              }
            }
          }
        }
LABEL_434:
        v189 += 8;
      }
      md::MeshRenderableLogic::updateEntityCustomRenderState((uint64_t)v763, v273, v127);
      v264 = (unint64_t *)buf[1];
      v274 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
      if (*(_QWORD *)&buf[3] >= (unint64_t)(v274 + 1))
      {
LABEL_433:
        *v264 = v273;
        *(_QWORD *)&buf[1] += 8;
        goto LABEL_434;
      }
      v747 = buf[0];
      v759 = (uint64_t)(*(_QWORD *)&buf[1] - *(_QWORD *)buf) >> 3;
      v732 = buf[2];
      v275 = (1 << -(char)__clz(*(_QWORD *)&buf[3] + 1));
      if (*(_QWORD *)&buf[3] >= 0xFFFFFFFFFFFFFFFELL)
        v275 = 1;
      if (v275 <= v274 + 1)
        v275 = v274 + 1;
      v737 = (int8x8_t)v275;
      v276 = (char *)malloc_type_malloc(8 * v275, 0x100004000313F17uLL);
      v277 = (int8x8_t)v276;
      v278 = (uint64_t *)buf[0];
      v279 = buf[1];
      if (*(_QWORD *)buf != *(_QWORD *)&buf[1])
      {
        v280 = *(_QWORD *)&buf[1] - *(_QWORD *)buf - 8;
        if (v280 < 0x18)
        {
          v281 = v276;
        }
        else
        {
          v281 = v276;
          if ((unint64_t)&v276[-*(_QWORD *)buf] >= 0x20)
          {
            v282 = (v280 >> 3) + 1;
            v283 = 8 * (v282 & 0x3FFFFFFFFFFFFFFCLL);
            v281 = &v276[v283];
            v284 = (__int128 *)(*(_QWORD *)buf + 16);
            v285 = v276 + 16;
            v286 = v282 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v287 = *v284;
              *(v285 - 1) = *(v284 - 1);
              *v285 = v287;
              v284 += 2;
              v285 += 2;
              v286 -= 4;
            }
            while (v286);
            if (v282 == (v282 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_459;
            v278 = (uint64_t *)((char *)v278 + v283);
          }
        }
        do
        {
          v288 = *v278++;
          *(_QWORD *)v281 = v288;
          v281 += 8;
        }
        while (v278 != (uint64_t *)v279);
      }
LABEL_459:
      if (*(_QWORD *)&v747 != *(_QWORD *)&v732)
        free(*(void **)buf);
      v264 = (unint64_t *)(*(_QWORD *)&v277 + 8 * v759);
      buf[0] = v277;
      buf[1] = (int8x8_t)v264;
      buf[3] = v737;
      goto LABEL_433;
    }
LABEL_302:
    v164 = (_Unwind_Exception_Class *)buf[0];
    v165 = buf[1];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[1])
      goto LABEL_343;
    while (2)
    {
      __p = (void *)0xB8E8DF22A2AE77B4;
      v166 = (int8x8_t)v127[16];
      if (v166)
      {
        v167 = (uint8x8_t)vcnt_s8(v166);
        v167.i16[0] = vaddlv_u8(v167);
        if (v167.u32[0] > 1uLL)
        {
          v168 = 0xB8E8DF22A2AE77B4;
          if (*(_QWORD *)&v166 <= 0xB8E8DF22A2AE77B4)
            v168 = 0xB8E8DF22A2AE77B4 % *(_QWORD *)&v166;
        }
        else
        {
          v168 = (*(_QWORD *)&v166 - 1) & 0xB8E8DF22A2AE77B4;
        }
        v169 = *(_QWORD **)(v127[15] + 8 * v168);
        if (v169)
        {
          v170 = (_QWORD *)*v169;
          if (v170)
          {
            if (v167.u32[0] < 2uLL)
            {
              v171 = *(_QWORD *)&v166 - 1;
              while (1)
              {
                v173 = v170[1];
                if (v173 == 0xB8E8DF22A2AE77B4)
                {
                  if (v170[2] == 0xB8E8DF22A2AE77B4)
                    goto LABEL_341;
                }
                else if ((v173 & v171) != v168)
                {
                  goto LABEL_325;
                }
                v170 = (_QWORD *)*v170;
                if (!v170)
                  goto LABEL_325;
              }
            }
            do
            {
              v172 = v170[1];
              if (v172 == 0xB8E8DF22A2AE77B4)
              {
                if (v170[2] == 0xB8E8DF22A2AE77B4)
                {
LABEL_341:
                  v174 = v170[3];
                  goto LABEL_328;
                }
              }
              else
              {
                if (v172 >= *(_QWORD *)&v166)
                  v172 %= *(_QWORD *)&v166;
                if (v172 != v168)
                  break;
              }
              v170 = (_QWORD *)*v170;
            }
            while (v170);
          }
        }
      }
LABEL_325:
      v174 = operator new();
      *(_QWORD *)(v174 + 16) = "md::components::CustomRenderStateChanged]";
      *(_QWORD *)(v174 + 24) = 40;
      *(_OWORD *)(v174 + 32) = 0u;
      *(_OWORD *)(v174 + 48) = 0u;
      *(_OWORD *)(v174 + 64) = 0u;
      *(_OWORD *)(v174 + 80) = 0u;
      *(_OWORD *)(v174 + 96) = 0u;
      *(_OWORD *)(v174 + 112) = 0u;
      *(_OWORD *)(v174 + 128) = 0u;
      *(_DWORD *)(v174 + 144) = 1065353216;
      *(_OWORD *)(v174 + 152) = 0u;
      *(_OWORD *)(v174 + 168) = 0u;
      *(_QWORD *)(v174 + 184) = 0;
      *(_DWORD *)(v174 + 192) = 1065353216;
      *(_OWORD *)(v174 + 200) = 0u;
      *(_OWORD *)(v174 + 216) = 0u;
      *(_QWORD *)(v174 + 232) = 0;
      *(_DWORD *)(v174 + 240) = 1065353216;
      *(_QWORD *)v174 = &off_1E42B3378;
      *(_QWORD *)(v174 + 8) = 0xB8E8DF22A2AE77B4;
      *(_QWORD *)(v174 + 248) = v127;
      v175 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v127 + 15, 0xB8E8DF22A2AE77B4, &__p);
      v176 = v175[3];
      v175[3] = v174;
      if (v176)
        (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
      p_exception_object = (_Unwind_Exception *)0xB8E8DF22A2AE77B4;
      v772 = (uint64_t)"md::components::CustomRenderStateChanged]";
      v773 = 40;
      gdc::Registry::_registerStorageDataSignals((uint64_t)v127, 0xB8E8DF22A2AE77B4, (uint64_t)&p_exception_object, (uint64_t *)(v174 + 104));
LABEL_328:
      exception_object.exception_class = *v164;
      v177 = *(_QWORD *)(v174 + 32);
      if (exception_object.exception_class >> 39 < (*(_QWORD *)(v174 + 40) - v177) >> 3)
      {
        v178 = *(_QWORD *)(v177 + 8 * (exception_object.exception_class >> 39));
        if (v178)
        {
          v179 = *(unsigned __int16 *)(v178 + 2 * (HIDWORD(exception_object.exception_class) & 0x7F));
          v181 = *(_QWORD *)(v174 + 56);
          v180 = *(_QWORD *)(v174 + 64);
          if (v179 < (v180 - v181) >> 3)
          {
            v182 = v181 + 8 * v179;
            if (v182 != v180 && *(_DWORD *)(v182 + 4) == HIDWORD(exception_object.exception_class))
            {
              geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase((uint64_t *)(v174 + 32), (_QWORD *)v182);
              --*(_QWORD *)(v174 + 88);
              v184 = *(_QWORD **)(v174 + 224);
              if (v184)
              {
                v185 = *(void **)(v174 + 248);
                do
                {
                  p_exception_object = &exception_object;
                  v772 = 1;
                  __p = v185;
                  v186 = v184[6];
                  if (!v186)
                    goto LABEL_1224;
                  (*(void (**)(uint64_t, void **, _Unwind_Exception **))(*(_QWORD *)v186 + 48))(v186, &__p, &p_exception_object);
                  v184 = (_QWORD *)*v184;
                }
                while (v184);
              }
            }
          }
        }
      }
      if (++v164 != (_Unwind_Exception_Class *)v165)
        continue;
      break;
    }
    v164 = (_Unwind_Exception_Class *)buf[0];
LABEL_343:
    if (v164 != (_Unwind_Exception_Class *)buf[2])
      free(v164);
    v126 = v742 + 1;
  }
  while (v742 + 1 != v740);
  v125 = (_QWORD *)*((_QWORD *)v763 + 17);
LABEL_462:
  v289 = (*((unsigned __int8 *)a3 + 73) | *((unsigned __int8 *)a3 + 72)) != 0;
  v290 = (void **)operator new(0x20uLL);
  *v290 = &unk_1E42C6C30;
  v290[1] = md::MeshRenderableLogic::processVisibilityUpdateCollector;
  v290[2] = 0;
  v290[3] = v763;
  v769 = v290;
  if (*((_BYTE *)v763 + 152))
    v291 = v289;
  else
    v291 = 1;
  if ((v291 & 1) != 0)
    v292 = 0x7FFFFFFF;
  else
    v292 = *((_DWORD *)v763 + 110);
  v774 = 0;
  v293 = operator new(0x20uLL);
  *(_QWORD *)v293 = &off_1E42CFFB0;
  v293[2] = v292;
  v294 = (char *)(v293 + 2);
  *((_QWORD *)v293 + 2) = v763;
  *((_QWORD *)v293 + 3) = &__p;
  v774 = (_Unwind_Exception **)v293;
  v295 = (int8x8_t *)operator new(0x20uLL);
  *v295 = (int8x8_t)&off_1E42CFFB0;
  v295[3] = *(int8x8_t *)(v294 + 16);
  *(_OWORD *)v295[1].i8 = *(_OWORD *)v294;
  buf[3] = (int8x8_t)v295;
  v296 = (_QWORD *)v125[7];
  if (v296)
  {
    do
    {
      v297 = v296[3];
      v298 = v296[4];
      if (v297 != v298)
      {
        while (*(md::MeshRenderableLogic **)v297 != v763 || *(_DWORD *)(v297 + 8) != 2)
        {
          v297 += 24;
          if (v297 == v298)
            goto LABEL_470;
        }
      }
      if (v297 != v298)
      {
        v300 = *(uint64_t (***)())(v297 + 16);
        exception_object.exception_class = v296[2];
        v794 = v300;
        if (!*(_QWORD *)&buf[3])
          goto LABEL_1224;
        (*(void (**)(_QWORD, _Unwind_Exception *, uint64_t (***)()))(**(_QWORD **)&buf[3] + 48))(*(_QWORD *)&buf[3], &exception_object, &v794);
      }
LABEL_470:
      v296 = (_QWORD *)*v296;
    }
    while (v296);
    v295 = (int8x8_t *)buf[3];
    if ((int8x8_t *)buf[3] == buf)
    {
      v301 = 4;
      v295 = buf;
      goto LABEL_485;
    }
    if (!*(_QWORD *)&buf[3])
      goto LABEL_486;
  }
  v301 = 5;
LABEL_485:
  (*(void (**)(void))(*(_QWORD *)v295 + 8 * v301))();
LABEL_486:
  p_p_exception_object = v774;
  if (v774 == &p_exception_object)
  {
    v303 = 4;
    p_p_exception_object = &p_exception_object;
  }
  else
  {
    if (!v774)
      goto LABEL_491;
    v303 = 5;
  }
  (*((void (**)(void))&(*p_p_exception_object)->exception_class + v303))();
LABEL_491:
  p_p = v769;
  if (v769 == &__p)
  {
    v305 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v769)
      goto LABEL_496;
    v305 = 5;
  }
  (*((void (**)(void))*p_p + v305))();
LABEL_496:
  v306 = *((_QWORD *)v763 + 17);
  v307 = (void **)operator new(0x20uLL);
  *v307 = &unk_1E42C6C30;
  v307[1] = md::MeshRenderableLogic::processMaterialUpdateCollector;
  v307[2] = 0;
  v307[3] = v763;
  v797 = v307;
  if (*((_BYTE *)v763 + 152))
    v308 = v289;
  else
    v308 = 1;
  if ((v308 & 1) != 0)
    v309 = 0x7FFFFFFF;
  else
    v309 = *((_DWORD *)v763 + 110);
  exception_object.private_2 = 0;
  v310 = operator new(0x20uLL);
  *(_QWORD *)v310 = &off_1E42CFFB0;
  v310[2] = v309;
  v311 = (char *)(v310 + 2);
  *((_QWORD *)v310 + 2) = v763;
  *((_QWORD *)v310 + 3) = &v794;
  exception_object.private_2 = (uintptr_t)v310;
  v312 = (int8x8_t *)operator new(0x20uLL);
  *v312 = (int8x8_t)&off_1E42CFFB0;
  v312[3] = *(int8x8_t *)(v311 + 16);
  *(_OWORD *)v312[1].i8 = *(_OWORD *)v311;
  buf[3] = (int8x8_t)v312;
  v313 = *(_QWORD **)(v306 + 56);
  if (v313)
  {
    do
    {
      v314 = v313[3];
      v315 = v313[4];
      if (v314 != v315)
      {
        while (*(md::MeshRenderableLogic **)v314 != v763 || *(_DWORD *)(v314 + 8) != 0)
        {
          v314 += 24;
          if (v314 == v315)
            goto LABEL_504;
        }
      }
      if (v314 != v315)
      {
        v317 = *(_QWORD *)(v314 + 16);
        *(_QWORD *)v791 = v313[2];
        v789[0] = v317;
        if (!*(_QWORD *)&buf[3])
          goto LABEL_1224;
        (*(void (**)(_QWORD, uint8_t *, _QWORD *))(**(_QWORD **)&buf[3] + 48))(*(_QWORD *)&buf[3], v791, v789);
      }
LABEL_504:
      v313 = (_QWORD *)*v313;
    }
    while (v313);
    v312 = (int8x8_t *)buf[3];
    if ((int8x8_t *)buf[3] == buf)
    {
      v318 = 4;
      v312 = buf;
      goto LABEL_519;
    }
    if (!*(_QWORD *)&buf[3])
      goto LABEL_520;
  }
  v318 = 5;
LABEL_519:
  (*(void (**)(void))(*(_QWORD *)v312 + 8 * v318))();
LABEL_520:
  v319 = (_QWORD *)exception_object.private_2;
  if ((_Unwind_Exception *)exception_object.private_2 == &exception_object)
  {
    v320 = 4;
    v319 = &exception_object;
  }
  else
  {
    if (!exception_object.private_2)
      goto LABEL_525;
    v320 = 5;
  }
  (*(void (**)(void))(*v319 + 8 * v320))();
LABEL_525:
  v321 = (uint64_t (***)())v797;
  if (v797 == (void **)&v794)
  {
    v322 = 4;
    v321 = &v794;
  }
  else
  {
    if (!v797)
      goto LABEL_530;
    v322 = 5;
  }
  (*v321)[v322]();
LABEL_530:
  v323 = *((_QWORD *)v763 + 17);
  v324 = operator new(0x20uLL);
  *v324 = &unk_1E42C6C30;
  v324[1] = md::MeshRenderableLogic::processMaterialEnteringCollector;
  v324[2] = 0;
  v324[3] = v763;
  v790 = v324;
  if (*((_BYTE *)v763 + 152))
    v325 = v289;
  else
    v325 = 1;
  if ((v325 & 1) != 0)
    v326 = 0x7FFFFFFF;
  else
    v326 = *((_DWORD *)v763 + 110);
  v793 = 0;
  v327 = operator new(0x20uLL);
  *(_QWORD *)v327 = &off_1E42CFFB0;
  v327[2] = v326;
  v328 = (char *)(v327 + 2);
  *((_QWORD *)v327 + 2) = v763;
  *((_QWORD *)v327 + 3) = v789;
  v793 = (uint8_t *)v327;
  v329 = (int8x8_t *)operator new(0x20uLL);
  *v329 = (int8x8_t)&off_1E42CFFB0;
  v329[3] = *(int8x8_t *)(v328 + 16);
  *(_OWORD *)v329[1].i8 = *(_OWORD *)v328;
  buf[3] = (int8x8_t)v329;
  v330 = *(_QWORD **)(v323 + 56);
  if (v330)
  {
    v331 = v763;
    do
    {
      v332 = v330[3];
      v333 = v330[4];
      if (v332 != v333)
      {
        while (*(md::MeshRenderableLogic **)v332 != v763 || *(_DWORD *)(v332 + 8) != 3)
        {
          v332 += 24;
          if (v332 == v333)
            goto LABEL_538;
        }
      }
      if (v332 != v333)
      {
        v335 = *(_QWORD *)(v332 + 16);
        v787[0] = v330[2];
        v785[0] = v335;
        if (!*(_QWORD *)&buf[3])
          goto LABEL_1224;
        (*(void (**)(_QWORD, _QWORD *, _QWORD *))(**(_QWORD **)&buf[3] + 48))(*(_QWORD *)&buf[3], v787, v785);
      }
LABEL_538:
      v330 = (_QWORD *)*v330;
    }
    while (v330);
    v329 = (int8x8_t *)buf[3];
    if ((int8x8_t *)buf[3] == buf)
    {
      v336 = 4;
      v329 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[3])
        goto LABEL_555;
      v336 = 5;
    }
  }
  else
  {
    v336 = 5;
    v331 = v763;
  }
  (*(void (**)(void))(*(_QWORD *)v329 + 8 * v336))();
LABEL_555:
  v337 = v793;
  if (v793 == v791)
  {
    v338 = 4;
    v337 = v791;
  }
  else
  {
    if (!v793)
      goto LABEL_560;
    v338 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v337 + 8 * v338))();
LABEL_560:
  v339 = v790;
  if (v790 == v789)
  {
    v340 = 4;
    v339 = v789;
  }
  else
  {
    if (!v790)
      goto LABEL_565;
    v340 = 5;
  }
  (*(void (**)(void))(*v339 + 8 * v340))();
LABEL_565:
  v341 = *((_QWORD *)v331 + 17);
  v342 = operator new(0x20uLL);
  *v342 = &unk_1E42C6C30;
  v342[1] = md::MeshRenderableLogic::processMaterialEnteringCollector;
  v342[2] = 0;
  v342[3] = v763;
  v786 = v342;
  if (*((_BYTE *)v763 + 152))
    v343 = v289;
  else
    v343 = 1;
  if ((v343 & 1) != 0)
    v344 = 0x7FFFFFFF;
  else
    v344 = *((_DWORD *)v763 + 110);
  v788 = 0;
  v345 = operator new(0x20uLL);
  *(_QWORD *)v345 = &off_1E42CFFB0;
  v345[2] = v344;
  v346 = (char *)(v345 + 2);
  *((_QWORD *)v345 + 2) = v763;
  *((_QWORD *)v345 + 3) = v785;
  v788 = v345;
  v347 = (int8x8_t *)operator new(0x20uLL);
  *v347 = (int8x8_t)&off_1E42CFFB0;
  v347[3] = *(int8x8_t *)(v346 + 16);
  *(_OWORD *)v347[1].i8 = *(_OWORD *)v346;
  buf[3] = (int8x8_t)v347;
  v348 = *(_QWORD **)(v341 + 56);
  if (v348)
  {
    v349 = v763;
    do
    {
      v350 = v348[3];
      v351 = v348[4];
      if (v350 != v351)
      {
        while (*(md::MeshRenderableLogic **)v350 != v763 || *(_DWORD *)(v350 + 8) != 4)
        {
          v350 += 24;
          if (v350 == v351)
            goto LABEL_573;
        }
      }
      if (v350 != v351)
      {
        v353 = v348[2];
        v764 = *(_QWORD *)(v350 + 16);
        v765 = v353;
        if (!*(_QWORD *)&buf[3])
          goto LABEL_1233;
        (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)&buf[3] + 48))(*(_QWORD *)&buf[3], &v765, &v764);
      }
LABEL_573:
      v348 = (_QWORD *)*v348;
    }
    while (v348);
    v347 = (int8x8_t *)buf[3];
    if ((int8x8_t *)buf[3] == buf)
    {
      v354 = 4;
      v347 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[3])
        goto LABEL_590;
      v354 = 5;
    }
  }
  else
  {
    v354 = 5;
    v349 = v763;
  }
  (*(void (**)(void))(*(_QWORD *)v347 + 8 * v354))();
LABEL_590:
  v355 = v788;
  if (v788 == v787)
  {
    v356 = 4;
    v355 = v787;
  }
  else
  {
    if (!v788)
      goto LABEL_595;
    v356 = 5;
  }
  (*(void (**)(void))(*v355 + 8 * v356))();
LABEL_595:
  v357 = v786;
  if (v786 == v785)
  {
    v358 = 4;
    v357 = v785;
    goto LABEL_599;
  }
  if (v786)
  {
    v358 = 5;
LABEL_599:
    (*(void (**)(void))(*v357 + 8 * v358))();
  }
  if (*((_BYTE *)v349 + 128))
  {
    v359 = **((_QWORD **)v349 + 35);
    if (v359)
    {
      buf[0].i8[0] = 8;
      md::MapEngine::setNeedsTick(v359, buf);
    }
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v360 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v361 = v360;
  v362 = *((_QWORD *)a2 + 10);
  if (v362 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v360))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v361, OS_SIGNPOST_INTERVAL_END, v362, "ProcessUpdatedFeatures", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v363 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v364 = v363;
  v365 = *((_QWORD *)a2 + 10);
  if (v365 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v363))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v364, OS_SIGNPOST_INTERVAL_BEGIN, v365, "ProcessChangedBatches", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  memset(buf, 0, sizeof(buf));
  v781 = 1065353216;
  *(_OWORD *)v776 = 0u;
  *(_OWORD *)v777 = 0u;
  v778 = 1.0;
  __p = 0;
  v767 = 0;
  v768 = 0;
  memset(&exception_object, 0, 24);
  v794 = 0;
  v795 = 0;
  v796 = 0;
  v366 = v763;
  v367 = *((_QWORD *)v763 + 17);
  v369 = *(int8x8_t ***)(v367 + 384);
  v368 = *(int8x8_t ***)(v367 + 392);
  if (v369 != v368)
  {
    v370 = 0;
    v371 = 0;
    while (1)
    {
      v576 = *v369;
      v577 = (*v369)[1];
      if (v577)
      {
        v578 = (uint8x8_t)vcnt_s8(v577);
        v578.i16[0] = vaddlv_u8(v578);
        if (v578.u32[0] > 1uLL)
        {
          v579 = 0xCA93DB2C2ACE8387;
          if (*(_QWORD *)&v577 <= 0xCA93DB2C2ACE8387)
            v579 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v577;
        }
        else
        {
          v579 = (*(_QWORD *)&v577 - 1) & 0xCA93DB2C2ACE8387;
        }
        v580 = *(_QWORD **)(*(_QWORD *)v576 + 8 * v579);
        if (v580)
        {
          v581 = (_QWORD *)*v580;
          if (v581)
          {
            if (v578.u32[0] < 2uLL)
            {
              v582 = *(_QWORD *)&v577 - 1;
              while (1)
              {
                v584 = v581[1];
                if (v584 == 0xCA93DB2C2ACE8387)
                {
                  if (v581[2] == 0xCA93DB2C2ACE8387)
                    goto LABEL_1012;
                }
                else if ((v584 & v582) != v579)
                {
                  goto LABEL_990;
                }
                v581 = (_QWORD *)*v581;
                if (!v581)
                  goto LABEL_990;
              }
            }
            while (1)
            {
              v583 = v581[1];
              if (v583 == 0xCA93DB2C2ACE8387)
                break;
              if (v583 >= *(_QWORD *)&v577)
                v583 %= *(_QWORD *)&v577;
              if (v583 != v579)
                goto LABEL_990;
LABEL_1001:
              v581 = (_QWORD *)*v581;
              if (!v581)
                goto LABEL_990;
            }
            if (v581[2] != 0xCA93DB2C2ACE8387)
              goto LABEL_1001;
LABEL_1012:
            v585 = v581[5];
            if (*(_QWORD *)(v585 + 8) == 0xCA93DB2C2ACE8387)
            {
              v586 = *(_QWORD *)(v585 + 32);
              if (v586)
              {
                v762 = *(_QWORD *)(v585 + 32);
                if (buf[3])
                {
                  v587 = (_QWORD *)buf[2];
                  if (buf[2])
                  {
                    do
                    {
                      v588 = (_QWORD *)*v587;
                      operator delete(v587);
                      v587 = v588;
                    }
                    while (v588);
                  }
                  buf[2] = 0;
                  v589 = buf[1];
                  if (buf[1])
                  {
                    v590 = 0;
                    do
                      *(_QWORD *)(*(_QWORD *)buf + 8 * v590++) = 0;
                    while (*(_QWORD *)&v589 != v590);
                  }
                  buf[3] = 0;
                  v586 = v762;
                }
                if (*(_BYTE *)(v586 + 80))
                  break;
              }
            }
          }
        }
      }
LABEL_990:
      if (++v369 == v368)
        goto LABEL_616;
    }
    v749 = v368;
    v592 = *(unint64_t **)(v586 + 8);
    v591 = *(unint64_t **)(v586 + 16);
    if (v592 != v591)
    {
      v593 = (float *)(v586 + 88);
      v594 = (_QWORD *)(v586 + 128);
      v752 = (uint64_t **)(v586 + 144);
      while (1)
      {
        while (1)
        {
          v595 = *v592;
          if (!*(_QWORD *)(*v592 + 264))
            break;
          if (*(_BYTE *)(v595 + 352))
          {
            std::__hash_table<md::RenderBatch *,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,std::allocator<md::RenderBatch *>>::__emplace_unique_key_args<md::RenderBatch *,md::RenderBatch *&>((float *)buf, *v592, *v592);
            std::__hash_table<md::RenderBatch *,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,std::allocator<md::RenderBatch *>>::__emplace_unique_key_args<md::RenderBatch *,md::RenderBatch *&>(v593, v595, v595);
            v591 = *(unint64_t **)(v586 + 16);
          }
          if (++v592 == v591)
            goto LABEL_1073;
        }
        v596 = std::__hash_table<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::__unordered_map_hasher<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::__unordered_map_equal<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>,std::equal_to<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,std::hash<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>,true>,std::allocator<std::__hash_value_type<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>,md::RenderBatch *>>>::find<std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey>>(v594, *v592);
        v597 = v596;
        if (v596)
        {
          v598 = *(int8x8_t *)(v586 + 136);
          v599 = v596[1];
          v600 = (uint8x8_t)vcnt_s8(v598);
          v600.i16[0] = vaddlv_u8(v600);
          if (v600.u32[0] > 1uLL)
          {
            if ((unint64_t)v599 >= *(_QWORD *)&v598)
              v599 = (uint64_t *)((unint64_t)v599 % *(_QWORD *)&v598);
          }
          else
          {
            v599 = (uint64_t *)((*(_QWORD *)&v598 - 1) & (unint64_t)v599);
          }
          v601 = *(uint64_t ***)(*v594 + 8 * (_QWORD)v599);
          do
          {
            v602 = v601;
            v601 = (uint64_t **)*v601;
          }
          while (v601 != v596);
          if (v602 == v752)
            goto LABEL_1046;
          v603 = v602[1];
          if (v600.u32[0] > 1uLL)
          {
            if ((unint64_t)v603 >= *(_QWORD *)&v598)
              v603 = (uint64_t *)((unint64_t)v603 % *(_QWORD *)&v598);
          }
          else
          {
            v603 = (uint64_t *)((unint64_t)v603 & (*(_QWORD *)&v598 - 1));
          }
          if (v603 != v599)
          {
LABEL_1046:
            if (!*v596)
              goto LABEL_1047;
            v604 = (*v596)[1];
            if (v600.u32[0] > 1uLL)
            {
              if (v604 >= *(_QWORD *)&v598)
                v604 %= *(_QWORD *)&v598;
            }
            else
            {
              v604 &= *(_QWORD *)&v598 - 1;
            }
            if ((uint64_t *)v604 != v599)
LABEL_1047:
              *(_QWORD *)(*v594 + 8 * (_QWORD)v599) = 0;
          }
          v605 = *v596;
          if (*v596)
          {
            v606 = (uint64_t *)v605[1];
            if (v600.u32[0] > 1uLL)
            {
              if ((unint64_t)v606 >= *(_QWORD *)&v598)
                v606 = (uint64_t *)((unint64_t)v606 % *(_QWORD *)&v598);
            }
            else
            {
              v606 = (uint64_t *)((unint64_t)v606 & (*(_QWORD *)&v598 - 1));
            }
            if (v606 != v599)
            {
              *(_QWORD *)(*v594 + 8 * (_QWORD)v606) = v602;
              v605 = *v596;
            }
          }
          *v602 = v605;
          *v596 = 0;
          --*(_QWORD *)(v586 + 152);
          v607 = *((unsigned int *)v596 + 60);
          if ((_DWORD)v607 != -1)
            (*(&off_1E42F43B8 + v607))((int)v791, (md::MaterialRenderBatchKey *)(v596 + 2));
          operator delete(v597);
        }
        v608 = (_Unwind_Exception **)operator new(0x20uLL);
        *v608 = (_Unwind_Exception *)&off_1E42C6BE8;
        v608[1] = (_Unwind_Exception *)md::RenderBatchManager::destroyRenderable;
        v608[2] = 0;
        v608[3] = (_Unwind_Exception *)v586;
        v774 = v608;
        v609 = *(_QWORD **)(v595 + 320);
        v610 = *(_QWORD **)(v595 + 328);
        if (v609 == v610)
        {
          *(_QWORD *)(v595 + 328) = v609;
          v611 = 5;
          goto LABEL_1066;
        }
        do
        {
          *(_QWORD *)v791 = *v609;
          if (!v774)
            goto LABEL_1233;
          ((void (*)(_Unwind_Exception **, uint8_t *))(*v774)[1].private_1)(v774, v791);
          ++v609;
        }
        while (v609 != v610);
        v608 = v774;
        *(_QWORD *)(v595 + 328) = *(_QWORD *)(v595 + 320);
        if (v608 == &p_exception_object)
          break;
        v586 = v762;
        if (v608)
        {
          v611 = 5;
          goto LABEL_1067;
        }
LABEL_1068:
        if (*(_QWORD *)(v586 + 48))
        {
          md::RenderBatch::~RenderBatch((md::RenderBatch *)v595);
          *(_QWORD *)v595 = *(_QWORD *)(v586 + 72);
          *(_QWORD *)(v586 + 72) = v595;
        }
        v612 = *(unint64_t **)(v586 + 16);
        v613 = (char *)v612 - (char *)(v592 + 1);
        if (v612 != v592 + 1)
          memmove(v592, v592 + 1, (char *)v612 - (char *)(v592 + 1));
        v591 = (unint64_t *)((char *)v592 + v613);
        *(_QWORD *)(v586 + 16) = (char *)v592 + v613;
        if (v592 == (unint64_t *)((char *)v592 + v613))
        {
LABEL_1073:
          *(_BYTE *)(v586 + 80) = 0;
          v614 = buf[3];
          goto LABEL_1075;
        }
      }
      v608 = &p_exception_object;
      v611 = 4;
LABEL_1066:
      v586 = v762;
LABEL_1067:
      (*((void (**)(void))&(*v608)->exception_class + v611))();
      goto LABEL_1068;
    }
    v614 = 0;
    *(_BYTE *)(v586 + 80) = 0;
LABEL_1075:
    v615 = __p;
    v616 = v767;
    v617 = v767 - (_BYTE *)__p;
    v753 = (v767 - (_BYTE *)__p) >> 3;
    v618 = v753 + *(_QWORD *)&v614;
    if (v753 + *(_QWORD *)&v614 <= (unint64_t)((v768 - (_BYTE *)__p) >> 3))
    {
      v620 = (unint64_t *)v767;
      goto LABEL_1088;
    }
    if (v618 >> 61)
LABEL_1232:
      abort();
    v619 = (char *)operator new(8 * v618);
    v620 = (unint64_t *)&v619[8 * v753];
    v621 = (char *)v620;
    if (v616 != (_QWORD *)v615)
    {
      v622 = (char *)(v616 - 1) - v615;
      if (v622 < 0x58)
      {
        v621 = &v619[8 * v753];
        do
        {
LABEL_1085:
          v628 = *--v616;
          *((_QWORD *)v621 - 1) = v628;
          v621 -= 8;
        }
        while (v616 != (_QWORD *)v615);
        goto LABEL_1086;
      }
      v621 = &v619[8 * v753];
      if ((unint64_t)((char *)v616 - v617 - v619) < 0x20)
        goto LABEL_1085;
      v623 = (v622 >> 3) + 1;
      v624 = &v619[8 * v753 - 16];
      v625 = (__int128 *)(v616 - 2);
      v626 = v623 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v627 = *v625;
        *((_OWORD *)v624 - 1) = *(v625 - 1);
        *(_OWORD *)v624 = v627;
        v624 -= 32;
        v625 -= 2;
        v626 -= 4;
      }
      while (v626);
      v621 = (char *)&v620[-(v623 & 0x3FFFFFFFFFFFFFFCLL)];
      v616 -= v623 & 0x3FFFFFFFFFFFFFFCLL;
      if (v623 != (v623 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1085;
    }
LABEL_1086:
    __p = v621;
    v767 = &v619[8 * v753];
    v768 = &v619[8 * v618];
    if (v615)
    {
      operator delete(v615);
      v620 = (unint64_t *)v767;
    }
LABEL_1088:
    v629 = (_QWORD *)buf[2];
    if (!*(_QWORD *)&buf[2])
    {
      v630 = v620;
LABEL_1090:
      v631 = (char *)__p;
      v632 = vcvtps_u32_f32((float)((unint64_t)v777[1] + *(_QWORD *)&buf[3]) / v778);
      if (v632 == 1)
      {
        v632 = 2;
      }
      else if ((v632 & (v632 - 1)) != 0)
      {
        v632 = std::__next_prime(v632);
      }
      v649 = v776[1];
      if ((void *)v632 > v776[1])
        goto LABEL_1126;
      if ((void *)v632 < v776[1])
      {
        v650 = vcvtps_u32_f32((float)(unint64_t)v777[1] / v778);
        if (v776[1] < (void *)3
          || (v651 = (uint8x8_t)vcnt_s8((int8x8_t)v776[1]), v651.i16[0] = vaddlv_u8(v651), v651.u32[0] > 1uLL))
        {
          v650 = std::__next_prime(v650);
        }
        else
        {
          v652 = 1 << -(char)__clz(v650 - 1);
          if (v650 >= 2)
            v650 = v652;
        }
        if (v632 <= v650)
          v632 = v650;
        if (v632 < (unint64_t)v649)
LABEL_1126:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v776, v632);
      }
      for (i = (unint64_t *)&v631[8 * v753]; i != v630; ++i)
      {
        v654 = *i;
        p_exception_object = (_Unwind_Exception *)v654;
        v655 = std::__hash_table<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::__unordered_map_hasher<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,true>,std::__unordered_map_equal<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::equal_to<md::RenderBatch *>,std::hash<md::RenderBatch *>,true>,std::allocator<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>>>::__emplace_unique_key_args<md::RenderBatch *,std::piecewise_construct_t const&,std::tuple<md::RenderBatch * const&>,std::tuple<>>((uint64_t)v776, v654, &p_exception_object);
        v655[3] = v371;
        v655[4] = v371;
        v371 += *(_QWORD *)(v654 + 264);
      }
      exception_class = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))exception_object.exception_class;
      exception_cleanup = exception_object.exception_cleanup;
      v658 = (uint64_t)((uint64_t)exception_object.exception_cleanup - exception_object.exception_class) >> 3;
      v659 = v371 - v658;
      if (v371 <= v658)
      {
        if (v371 >= v658)
          goto LABEL_1164;
        v668 = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))(exception_object.exception_class + 8 * v371);
      }
      else
      {
        if (v659 > (uint64_t)(exception_object.private_1 - (unint64_t)exception_object.exception_cleanup) >> 3)
        {
          if (v371 >> 61)
            goto LABEL_1235;
          v660 = (uint64_t)(exception_object.private_1 - exception_object.exception_class) >> 2;
          if (v660 <= v371)
            v660 = v371;
          if (exception_object.private_1 - exception_object.exception_class >= 0x7FFFFFFFFFFFFFF8)
            v661 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v661 = v660;
          if (v661 >> 61)
            goto LABEL_1227;
          v662 = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))operator new(8 * v661);
          v663 = 8 * v659;
          v664 = (char *)v662 + 8 * v658;
          v754 = v663;
          bzero(v664, v663);
          v665 = (char *)exception_cleanup - (char *)exception_class;
          if (exception_cleanup == exception_class)
          {
            exception_class = exception_cleanup;
            v667 = (_Unwind_Exception_Class)v662 + 8 * v658;
            goto LABEL_1162;
          }
          v666 = v665 - 8;
          if ((unint64_t)(v665 - 8) >= 0x58)
          {
            v667 = (_Unwind_Exception_Class)v662 + 8 * v658;
            if ((unint64_t)((char *)exception_class - (char *)v662) >= 0x20)
            {
              v669 = (v666 >> 3) + 1;
              v670 = (_OWORD *)((char *)v662 + 8 * v658 - 16);
              v671 = (__int128 *)((char *)exception_cleanup - 16);
              v672 = v669 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v673 = *v671;
                *(v670 - 1) = *(v671 - 1);
                *v670 = v673;
                v670 -= 2;
                v671 -= 2;
                v672 -= 4;
              }
              while (v672);
              v667 = (_Unwind_Exception_Class)&v664[-8 * (v669 & 0x3FFFFFFFFFFFFFFCLL)];
              exception_cleanup = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))((char *)exception_cleanup
                                                                                             - 8
                                                                                             * (v669 & 0x3FFFFFFFFFFFFFFCLL));
              if (v669 == (v669 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_1162;
            }
          }
          else
          {
            v667 = (_Unwind_Exception_Class)v662 + 8 * v658;
          }
          do
          {
            v674 = *((_QWORD *)exception_cleanup - 1);
            exception_cleanup = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))((char *)exception_cleanup
                                                                                           - 8);
            *(_QWORD *)(v667 - 8) = v674;
            v667 -= 8;
          }
          while (exception_cleanup != exception_class);
          exception_class = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))exception_object.exception_class;
LABEL_1162:
          exception_object.exception_class = v667;
          exception_object.exception_cleanup = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))&v664[v754];
          exception_object.private_1 = (uintptr_t)v662 + 8 * v661;
          if (exception_class)
            operator delete(exception_class);
LABEL_1164:
          v676 = v794;
          v675 = (char *)v795;
          v677 = v795 - v794;
          v678 = v371 - v677;
          v366 = v763;
          if (v371 <= v677)
          {
            v685 = v762;
            if (v371 >= v677)
            {
LABEL_1197:
              v702 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>((uint64_t)v576);
              v703 = (unint64_t *)v702[7];
              v704 = (unint64_t *)v702[8];
              if (v703 == v704)
              {
                v370 = 1;
              }
              else
              {
                v705 = v702[10];
                do
                {
                  v708 = *v703;
                  v709 = std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>((_QWORD *)(v685 + 168), *v703);
                  if (v709)
                  {
                    v710 = v709[3];
                    p_exception_object = (_Unwind_Exception *)v710;
                    if (v710)
                    {
                      if (buf[1])
                      {
                        v711 = 0x9DDFEA08EB382D69 * (((8 * v710) + 8) ^ HIDWORD(v710));
                        v712 = 0x9DDFEA08EB382D69 * (HIDWORD(v710) ^ (v711 >> 47) ^ v711);
                        v713 = 0x9DDFEA08EB382D69 * (v712 ^ (v712 >> 47));
                        v714 = (uint8x8_t)vcnt_s8(buf[1]);
                        v714.i16[0] = vaddlv_u8(v714);
                        if (v714.u32[0] > 1uLL)
                        {
                          v715 = v713;
                          if (v713 >= *(_QWORD *)&buf[1])
                            v715 = v713 % *(_QWORD *)&buf[1];
                        }
                        else
                        {
                          v715 = (*(_QWORD *)&buf[1] - 1) & v713;
                        }
                        v716 = *(_QWORD **)(*(_QWORD *)buf + 8 * v715);
                        if (v716)
                        {
                          v717 = (_QWORD *)*v716;
                          if (v717)
                          {
                            if (v714.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v719 = v717[1];
                                if (v713 == v719)
                                {
                                  if (v717[2] == v710)
                                    goto LABEL_1199;
                                }
                                else if ((v719 & (*(_QWORD *)&buf[1] - 1)) != v715)
                                {
                                  goto LABEL_1200;
                                }
                                v717 = (_QWORD *)*v717;
                                if (!v717)
                                  goto LABEL_1200;
                              }
                            }
                            do
                            {
                              v718 = v717[1];
                              if (v713 == v718)
                              {
                                if (v717[2] == v710)
                                {
LABEL_1199:
                                  v706 = std::__hash_table<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::__unordered_map_hasher<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,true>,std::__unordered_map_equal<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::equal_to<md::RenderBatch *>,std::hash<md::RenderBatch *>,true>,std::allocator<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>>>::__emplace_unique_key_args<md::RenderBatch *,std::piecewise_construct_t const&,std::tuple<md::RenderBatch * const&>,std::tuple<>>((uint64_t)v776, v710, &p_exception_object);
                                  v707 = v706[4];
                                  v706[4] = v707 + 1;
                                  v707 *= 8;
                                  *(_QWORD *)(exception_object.exception_class + v707) = v705;
                                  *(uint64_t (**)())((char *)v794 + v707) = (uint64_t (*)())v708;
                                  break;
                                }
                              }
                              else
                              {
                                if (v718 >= *(_QWORD *)&buf[1])
                                  v718 %= *(_QWORD *)&buf[1];
                                if (v718 != v715)
                                  break;
                              }
                              v717 = (_QWORD *)*v717;
                            }
                            while (v717);
                          }
                        }
                      }
                    }
                  }
LABEL_1200:
                  v705 += 112;
                  ++v703;
                  v370 = 1;
                }
                while (v703 != v704);
              }
              v368 = v749;
              goto LABEL_990;
            }
            v697 = &v794[v371];
          }
          else
          {
            if (v678 > (v796 - (char *)v795) >> 3)
            {
              if (!(v371 >> 61))
              {
                v679 = (v796 - (char *)v794) >> 2;
                if (v679 <= v371)
                  v679 = v371;
                if ((unint64_t)(v796 - (char *)v794) >= 0x7FFFFFFFFFFFFFF8)
                  v680 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v680 = v679;
                if (v680 >> 61)
                  goto LABEL_1227;
                v681 = operator new(8 * v680);
                v682 = &v681[8 * v677];
                v683 = v682;
                v684 = (v678 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                v366 = v763;
                v685 = v762;
                if (v684)
                {
                  v686 = (v684 + 1) & 0x3FFFFFFFFFFFFFFELL;
                  v687 = v682 + 8;
                  v688 = v686;
                  do
                  {
                    *(v687 - 1) = 0xFFFFFFFF00000000;
                    *v687 = 0xFFFFFFFF00000000;
                    v687 += 2;
                    v688 -= 2;
                  }
                  while (v688);
                  if (v684 + 1 == v686)
                    goto LABEL_1179;
                  v683 = &v682[8 * v686];
                }
                do
                {
                  *(_QWORD *)v683 = 0xFFFFFFFF00000000;
                  v683 += 8;
                }
                while (v683 != &v681[8 * v371]);
LABEL_1179:
                if (v675 != (char *)v676)
                {
                  v689 = v675 - (char *)v676 - 8;
                  if (v689 < 0x58)
                    goto LABEL_1242;
                  if ((unint64_t)((char *)v676 - v681) < 0x20)
                    goto LABEL_1242;
                  v690 = (v689 >> 3) + 1;
                  v691 = &v681[8 * v677 - 16];
                  v692 = v675 - 16;
                  v693 = v690 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v694 = *(_OWORD *)v692;
                    *(v691 - 1) = *((_OWORD *)v692 - 1);
                    *v691 = v694;
                    v691 -= 2;
                    v692 -= 32;
                    v693 -= 4;
                  }
                  while (v693);
                  v682 -= 8 * (v690 & 0x3FFFFFFFFFFFFFFCLL);
                  v675 -= 8 * (v690 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v690 != (v690 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_1242:
                    do
                    {
                      v695 = *((_QWORD *)v675 - 1);
                      v675 -= 8;
                      *((_QWORD *)v682 - 1) = v695;
                      v682 -= 8;
                    }
                    while (v675 != (char *)v676);
                  }
                }
                v696 = v794;
                v794 = (uint64_t (**)())v682;
                v795 = (uint64_t (**)())&v681[8 * v371];
                v796 = &v681[8 * v680];
                if (v696)
                  operator delete(v696);
                goto LABEL_1197;
              }
LABEL_1235:
              abort();
            }
            v697 = &v795[v678];
            v698 = (v678 - 1) & 0x1FFFFFFFFFFFFFFFLL;
            v685 = v762;
            if (v698)
            {
              v699 = v698 + 1;
              v700 = v795 + 1;
              v701 = v699 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                *(v700 - 1) = 0xFFFFFFFF00000000;
                *v700 = 0xFFFFFFFF00000000;
                v700 += 2;
                v701 -= 2;
              }
              while (v701);
              if (v699 == (v699 & 0x3FFFFFFFFFFFFFFELL))
                goto LABEL_1196;
              v675 += 8 * (v699 & 0x3FFFFFFFFFFFFFFELL);
            }
            do
            {
              *(_QWORD *)v675 = 0xFFFFFFFF00000000;
              v675 += 8;
            }
            while (v675 != (char *)v697);
          }
LABEL_1196:
          v795 = v697;
          goto LABEL_1197;
        }
        bzero(exception_object.exception_cleanup, 8 * v659);
        v668 = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))((char *)exception_cleanup + 8 * v659);
      }
      exception_object.exception_cleanup = v668;
      goto LABEL_1164;
    }
    while (v620 < (unint64_t *)v768)
    {
      *v620 = v629[2];
      v630 = v620 + 1;
LABEL_1093:
      v767 = (char *)v630;
      v629 = (_QWORD *)*v629;
      v620 = v630;
      if (!v629)
        goto LABEL_1090;
    }
    v633 = (unint64_t *)__p;
    v634 = (char *)v620 - (_BYTE *)__p;
    v635 = ((char *)v620 - (_BYTE *)__p) >> 3;
    v636 = v635 + 1;
    if ((unint64_t)(v635 + 1) >> 61)
      goto LABEL_1232;
    v637 = v768 - (_BYTE *)__p;
    if ((v768 - (_BYTE *)__p) >> 2 > v636)
      v636 = v637 >> 2;
    if ((unint64_t)v637 >= 0x7FFFFFFFFFFFFFF8)
      v638 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v638 = v636;
    if (v638)
    {
      if (v638 >> 61)
        goto LABEL_1227;
      v639 = operator new(8 * v638);
    }
    else
    {
      v639 = 0;
    }
    v640 = (unint64_t *)&v639[8 * v635];
    *v640 = v629[2];
    v630 = v640 + 1;
    if (v620 == v633)
    {
      v633 = v620;
      goto LABEL_1111;
    }
    v641 = (char *)(v620 - 1) - (char *)v633;
    if (v641 >= 0x168)
    {
      if (&v639[v634 - 8 - (v641 & 0xFFFFFFFFFFFFFFF8)] > &v639[v634 - 8])
      {
        v642 = v620;
      }
      else if ((unint64_t *)((char *)v620 - (v641 & 0xFFFFFFFFFFFFFFF8) - 8) > v620 - 1)
      {
        v642 = v620;
      }
      else if ((unint64_t)((char *)v620 - v639 - v634) >= 0x20)
      {
        v644 = (v641 >> 3) + 1;
        v642 = &v620[-(v644 & 0x3FFFFFFFFFFFFFFCLL)];
        v645 = &v639[8 * v635 - 16];
        v646 = v620 - 2;
        v647 = v644 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v648 = *(_OWORD *)v646;
          *(v645 - 1) = *((_OWORD *)v646 - 1);
          *v645 = v648;
          v645 -= 2;
          v646 -= 4;
          v647 -= 4;
        }
        while (v647);
        v640 -= v644 & 0x3FFFFFFFFFFFFFFCLL;
        if (v644 == (v644 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_1111;
      }
      else
      {
        v642 = v620;
      }
    }
    else
    {
      v642 = v620;
    }
    do
    {
      v643 = *--v642;
      *--v640 = v643;
    }
    while (v642 != v633);
    v633 = (unint64_t *)__p;
LABEL_1111:
    __p = v640;
    v767 = (char *)v630;
    v768 = &v639[8 * v638];
    if (v633)
      operator delete(v633);
    goto LABEL_1093;
  }
  v370 = 0;
LABEL_616:
  v372 = *((_QWORD *)a2 + 92);
  v373 = (_Unwind_Exception **)operator new(0x30uLL);
  *v373 = (_Unwind_Exception *)&off_1E42CFF68;
  v373[1] = (_Unwind_Exception *)&__p;
  v373[2] = (_Unwind_Exception *)v776;
  v373[3] = &exception_object;
  v373[4] = (_Unwind_Exception *)&v794;
  v373[5] = (_Unwind_Exception *)v366;
  v774 = v373;
  *(_QWORD *)v791 = 0;
  v792 = 0;
  (*(void (**)(_QWORD, _Unwind_Exception **, uint8_t *))(**(_QWORD **)(v372 + 32) + 16))(*(_QWORD *)(v372 + 32), &p_exception_object, v791);
  v374 = v792;
  if (v792)
  {
    p_shared_owners = (unint64_t *)&v792->__shared_owners_;
    do
      v376 = __ldaxr(p_shared_owners);
    while (__stlxr(v376 - 1, p_shared_owners));
    if (!v376)
    {
      ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
      std::__shared_weak_count::__release_weak(v374);
    }
  }
  v377 = v774;
  if (v774 == &p_exception_object)
  {
    v378 = 4;
    v377 = &p_exception_object;
  }
  else
  {
    if (!v774)
      goto LABEL_626;
    v378 = 5;
  }
  (*((void (**)(void))&(*v377)->exception_class + v378))();
LABEL_626:
  if (v794)
  {
    v795 = v794;
    operator delete(v794);
  }
  if (exception_object.exception_class)
  {
    exception_object.exception_cleanup = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))exception_object.exception_class;
    operator delete((void *)exception_object.exception_class);
  }
  if (__p)
  {
    v767 = (char *)__p;
    operator delete(__p);
  }
  v379 = v777[0];
  if (v777[0])
  {
    do
    {
      v380 = (_QWORD *)*v379;
      operator delete(v379);
      v379 = v380;
    }
    while (v380);
  }
  v381 = v776[0];
  v776[0] = 0;
  if (v381)
    operator delete(v381);
  v382 = (_QWORD *)buf[2];
  if (buf[2])
  {
    do
    {
      v383 = (_QWORD *)*v382;
      operator delete(v382);
      v382 = v383;
    }
    while (v383);
  }
  v384 = (void *)buf[0];
  buf[0] = 0;
  if (v384)
    operator delete(v384);
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v385 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v386 = v385;
  v387 = *((_QWORD *)a2 + 10);
  if (v387 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v385))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v386, OS_SIGNPOST_INTERVAL_END, v387, "ProcessChangedBatches", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  v388 = v763;
  if (!((*((_BYTE *)v763 + 416) != 0) | v370 & 1)
    && *(_QWORD *)(*((_QWORD *)v763 + 17) + 432) == *(_QWORD *)(*((_QWORD *)v763 + 17) + 440))
  {
    goto LABEL_931;
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v389 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v390 = v389;
  v391 = *((_QWORD *)a2 + 10);
  if (v391 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v389))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v390, OS_SIGNPOST_INTERVAL_BEGIN, v391, "GatherRenderables", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  *((_BYTE *)v763 + 417) = 1;
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v392 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    buf[0].i16[0] = 0;
    _os_log_impl(&dword_19F029000, v392, OS_LOG_TYPE_DEBUG, "Gathered renderables for active registries", (uint8_t *)buf, 2u);
  }
  md::MeshRenderableBuilder::MeshRenderableBuilder(buf, *(_QWORD *)a3, *((_QWORD *)a3 + 1), (_QWORD *)a3 + 2);
  v393 = v763;
  v394 = *((_QWORD *)v763 + 17);
  v395 = *(int8x8_t ***)(v394 + 384);
  v396 = *(int8x8_t ***)(v394 + 392);
  if (v395 == v396)
    goto LABEL_910;
  v397 = (uint64_t *)((char *)v763 + 296);
  while (2)
  {
    v402 = *v395;
    v403 = (*v395)[1];
    if (!*(_QWORD *)&v403)
      goto LABEL_662;
    v404 = (uint8x8_t)vcnt_s8(v403);
    v404.i16[0] = vaddlv_u8(v404);
    if (v404.u32[0] > 1uLL)
    {
      v405 = 0xCA93DB2C2ACE8387;
      if (*(_QWORD *)&v403 <= 0xCA93DB2C2ACE8387)
        v405 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v403;
    }
    else
    {
      v405 = (*(_QWORD *)&v403 - 1) & 0xCA93DB2C2ACE8387;
    }
    v406 = *(_QWORD **)(*(_QWORD *)v402 + 8 * v405);
    if (!v406)
      goto LABEL_662;
    v407 = (_QWORD *)*v406;
    if (!v407)
      goto LABEL_662;
    if (v404.u32[0] < 2uLL)
    {
      v408 = *(_QWORD *)&v403 - 1;
      while (1)
      {
        v410 = v407[1];
        if (v410 == 0xCA93DB2C2ACE8387)
        {
          if (v407[2] == 0xCA93DB2C2ACE8387)
            goto LABEL_684;
        }
        else if ((v410 & v408) != v405)
        {
          goto LABEL_662;
        }
        v407 = (_QWORD *)*v407;
        if (!v407)
          goto LABEL_662;
      }
    }
    while (1)
    {
      v409 = v407[1];
      if (v409 == 0xCA93DB2C2ACE8387)
        break;
      if (v409 >= *(_QWORD *)&v403)
        v409 %= *(_QWORD *)&v403;
      if (v409 != v405)
        goto LABEL_662;
LABEL_673:
      v407 = (_QWORD *)*v407;
      if (!v407)
        goto LABEL_662;
    }
    if (v407[2] != 0xCA93DB2C2ACE8387)
      goto LABEL_673;
LABEL_684:
    v411 = v407[5];
    if (*(_QWORD *)(v411 + 8) != 0xCA93DB2C2ACE8387)
      goto LABEL_662;
    v412 = *(int8x8_t **)(v411 + 32);
    if (!v412)
      goto LABEL_662;
    v743 = v396;
    v748 = v395;
    v738 = *v395;
    LOWORD(v776[0]) = v402[5].i16[0];
    v741 = v397;
    v413 = std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v397, (unsigned __int16)v776[0], v776);
    v413[4] = v413[3];
    v414 = *((_QWORD *)a2 + 10);
    v794 = &off_1E42CFF20;
    v797 = (void **)&v794;
    v789[0] = v414;
    if (v412[10].i8[0] || (v421 = v412[1], *(_QWORD *)&v412[2] == *(_QWORD *)&v421))
    {
LABEL_687:
      v415 = &v794;
      v416 = 4;
      goto LABEL_688;
    }
    v422 = 0;
    v726 = v412 + 13;
    v751 = v412;
    while (2)
    {
      v423 = *(_QWORD *)(*(_QWORD *)&v421 + 8 * v422);
      v424 = v412[12];
      v760 = v422;
      if (!*(_QWORD *)&v424)
        goto LABEL_782;
      v425 = 0x9DDFEA08EB382D69 * (((8 * v423) + 8) ^ HIDWORD(v423));
      v426 = 0x9DDFEA08EB382D69 * (HIDWORD(v423) ^ (v425 >> 47) ^ v425);
      v427 = 0x9DDFEA08EB382D69 * (v426 ^ (v426 >> 47));
      v428 = (uint8x8_t)vcnt_s8(v424);
      v428.i16[0] = vaddlv_u8(v428);
      if (v428.u32[0] > 1uLL)
      {
        v429 = v427;
        if (v427 >= *(_QWORD *)&v424)
          v429 = v427 % *(_QWORD *)&v424;
      }
      else
      {
        v429 = v427 & (*(_QWORD *)&v424 - 1);
      }
      v430 = *(int8x8_t ***)(*(_QWORD *)&v412[11] + 8 * v429);
      if (!v430)
        goto LABEL_782;
      v431 = *v430;
      if (!*v430)
        goto LABEL_782;
      if (v428.u32[0] < 2uLL)
      {
        v432 = *(_QWORD *)&v424 - 1;
        while (1)
        {
          v434 = v431[1];
          if (*(_QWORD *)&v434 == v427)
          {
            if (*(_QWORD *)&v431[2] == v423)
              goto LABEL_716;
          }
          else if ((*(_QWORD *)&v434 & v432) != v429)
          {
            goto LABEL_782;
          }
          v431 = (int8x8_t *)*v431;
          if (!v431)
            goto LABEL_782;
        }
      }
      while (2)
      {
        v433 = (unint64_t)v431[1];
        if (v433 != v427)
        {
          if (v433 >= *(_QWORD *)&v424)
            v433 %= *(_QWORD *)&v424;
          if (v433 != v429)
            goto LABEL_782;
          goto LABEL_705;
        }
        if (*(_QWORD *)&v431[2] != v423)
        {
LABEL_705:
          v431 = (int8x8_t *)*v431;
          if (!v431)
            goto LABEL_782;
          continue;
        }
        break;
      }
LABEL_716:
      if (*(_QWORD *)(v423 + 320) == *(_QWORD *)(v423 + 328))
        goto LABEL_750;
      p_exception_object = (_Unwind_Exception *)&off_1E42CF2C0;
      v772 = (uint64_t)v789;
      v774 = &p_exception_object;
      __p = &off_1E42CF308;
      v767 = (char *)v789;
      v769 = &__p;
      v777[1] = v776;
      v776[0] = &off_1E42CF308;
      v776[1] = v789;
      if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
      v435 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
      v436 = v435;
      v437 = *(_QWORD *)v772;
      if ((unint64_t)(*(_QWORD *)v772 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v435))
      {
        *(_WORD *)v791 = 0;
        _os_signpost_emit_with_name_impl(&dword_19F029000, v436, OS_SIGNPOST_INTERVAL_BEGIN, v437, "DestroyRenderables", (const char *)&unk_1A0189141, v791, 2u);
      }

      v438 = v769;
      if (v769 == &__p)
      {
        v438 = &__p;
        v439 = 4;
LABEL_726:
        (*((void (**)(void))*v438 + v439))();
      }
      else if (v769)
      {
        v439 = 5;
        goto LABEL_726;
      }
      v440 = v774;
      if (v774 == &p_exception_object)
      {
        v440 = &p_exception_object;
        v441 = 4;
LABEL_731:
        (*((void (**)(void))&(*v440)->exception_class + v441))();
      }
      else if (v774)
      {
        v441 = 5;
        goto LABEL_731;
      }
      exception_object.private_2 = 0;
      v442 = (_Unwind_Exception *)operator new(0x20uLL);
      v442->exception_class = (_Unwind_Exception_Class)&off_1E42C6BE8;
      v442->exception_cleanup = (void (__cdecl *)(_Unwind_Reason_Code, _Unwind_Exception *))md::RenderBatchManager::destroyRenderable;
      v442->private_1 = 0;
      v442->private_2 = (uintptr_t)v412;
      exception_object.private_2 = (uintptr_t)v442;
      v443 = *(_QWORD *)(v423 + 320);
      v444 = *(_QWORD *)(v423 + 328);
      if (v443 == v444)
      {
        *(_QWORD *)(v423 + 328) = v443;
        goto LABEL_741;
      }
      for (j = v443 + 8; ; j += 8)
      {
        *(_QWORD *)v791 = *(_QWORD *)(j - 8);
        if (!v442)
          goto LABEL_1233;
        (*(void (**)(_Unwind_Exception *, uint8_t *))(v442->exception_class + 48))(v442, v791);
        if (j == v444)
          break;
        v442 = (_Unwind_Exception *)exception_object.private_2;
      }
      v442 = (_Unwind_Exception *)exception_object.private_2;
      *(_QWORD *)(v423 + 328) = *(_QWORD *)(v423 + 320);
      if (v442 == &exception_object)
      {
        v442 = &exception_object;
        v446 = 4;
        goto LABEL_743;
      }
      if (v442)
      {
LABEL_741:
        v446 = 5;
LABEL_743:
        (*(void (**)(void))(v442->exception_class + 8 * v446))();
      }
      if (!v777[1])
      {
LABEL_1233:
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_1238;
      }
      (*(void (**)(void *))(*(_QWORD *)v777[1] + 48))(v777[1]);
      v447 = (void **)v777[1];
      if (v777[1] == v776)
      {
        v447 = v776;
        v448 = 4;
LABEL_749:
        (*((void (**)(void))*v447 + v448))();
      }
      else if (v777[1])
      {
        v448 = 5;
        goto LABEL_749;
      }
LABEL_750:
      if (*(_BYTE *)(v423 + 312))
      {
        v449 = v789[0];
        v450 = operator new(0x28uLL);
        *v450 = &off_1E42CF350;
        v450[1] = v412;
        v450[2] = buf;
        v450[3] = v449;
        v450[4] = v423;
        v777[1] = v450;
        if (!*(_BYTE *)(v423 + 312)
          || *(_QWORD *)(v423 + 320) != *(_QWORD *)(v423 + 328)
          || (v482 = *(_QWORD *)(v423 + 288), v733 = *(_QWORD *)(v423 + 296), v482 == v733))
        {
LABEL_753:
          v451 = 5;
          goto LABEL_754;
        }
        do
        {
          if (!v777[1])
            goto LABEL_1233;
          v484 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v777[1] + 48))(v777[1], v482);
          v485 = v484;
          v487 = *(uint64_t **)(v423 + 328);
          v486 = *(_QWORD *)(v423 + 336);
          if ((unint64_t)v487 < v486)
          {
            *v487 = v484;
            v483 = v487 + 1;
            v412 = v751;
          }
          else
          {
            v488 = *(char **)(v423 + 320);
            v489 = ((char *)v487 - v488) >> 3;
            v490 = v489 + 1;
            if ((unint64_t)(v489 + 1) >> 61)
              abort();
            v491 = v486 - (_QWORD)v488;
            if (v491 >> 2 > v490)
              v490 = v491 >> 2;
            if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFF8)
              v492 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v492 = v490;
            if (v492)
            {
              if (v492 >> 61)
                goto LABEL_1227;
              v493 = (char *)operator new(8 * v492);
            }
            else
            {
              v493 = 0;
            }
            v494 = (uint64_t *)&v493[8 * v489];
            *v494 = v485;
            v483 = v494 + 1;
            if (v487 != (uint64_t *)v488)
            {
              v495 = (char *)(v487 - 1) - v488;
              if (v495 < 0x58)
                goto LABEL_1243;
              if ((unint64_t)(v488 - v493) < 0x20)
                goto LABEL_1243;
              v496 = (v495 >> 3) + 1;
              v497 = &v493[8 * v489 - 16];
              v498 = v487 - 2;
              v499 = v496 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v500 = *(_OWORD *)v498;
                *((_OWORD *)v497 - 1) = *((_OWORD *)v498 - 1);
                *(_OWORD *)v497 = v500;
                v497 -= 32;
                v498 -= 4;
                v499 -= 4;
              }
              while (v499);
              v494 -= v496 & 0x3FFFFFFFFFFFFFFCLL;
              v487 -= v496 & 0x3FFFFFFFFFFFFFFCLL;
              if (v496 != (v496 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1243:
                do
                {
                  v501 = *--v487;
                  *--v494 = v501;
                }
                while (v487 != (uint64_t *)v488);
              }
              v487 = *(uint64_t **)(v423 + 320);
            }
            *(_QWORD *)(v423 + 320) = v494;
            *(_QWORD *)(v423 + 328) = v483;
            *(_QWORD *)(v423 + 336) = &v493[8 * v492];
            v412 = v751;
            if (v487)
            {
              v502 = v483;
              operator delete(v487);
              v483 = v502;
            }
          }
          *(_QWORD *)(v423 + 328) = v483;
          v482 += 224;
        }
        while (v482 != v733);
        v450 = v777[1];
        if (v777[1] == v776)
        {
          v450 = v776;
          v451 = 4;
LABEL_754:
          (*(void (**)(void))(*v450 + 8 * v451))();
        }
        else if (v777[1])
        {
          goto LABEL_753;
        }
      }
      v452 = v412[12];
      v453 = (unint64_t)v431[1];
      v454 = (uint8x8_t)vcnt_s8(v452);
      v454.i16[0] = vaddlv_u8(v454);
      if (v454.u32[0] > 1uLL)
      {
        if (v453 >= *(_QWORD *)&v452)
          v453 %= *(_QWORD *)&v452;
      }
      else
      {
        v453 &= *(_QWORD *)&v452 - 1;
      }
      v455 = v412[11];
      v456 = *(int8x8_t **)(*(_QWORD *)&v455 + 8 * v453);
      do
      {
        v457 = v456;
        v456 = (int8x8_t *)*v456;
      }
      while (v456 != v431);
      if (v457 == v726)
        goto LABEL_772;
      v458 = (unint64_t)v457[1];
      if (v454.u32[0] > 1uLL)
      {
        if (v458 >= *(_QWORD *)&v452)
          v458 %= *(_QWORD *)&v452;
      }
      else
      {
        v458 &= *(_QWORD *)&v452 - 1;
      }
      if (v458 != v453)
      {
LABEL_772:
        if (!*(_QWORD *)v431)
          goto LABEL_773;
        v459 = *(_QWORD *)(*(_QWORD *)v431 + 8);
        if (v454.u32[0] > 1uLL)
        {
          if (v459 >= *(_QWORD *)&v452)
            v459 %= *(_QWORD *)&v452;
        }
        else
        {
          v459 &= *(_QWORD *)&v452 - 1;
        }
        if (v459 != v453)
LABEL_773:
          *(_QWORD *)(*(_QWORD *)&v455 + 8 * v453) = 0;
      }
      v460 = *v431;
      if (*v431)
      {
        v461 = *(_QWORD *)(*(_QWORD *)&v460 + 8);
        if (v454.u32[0] > 1uLL)
        {
          if (v461 >= *(_QWORD *)&v452)
            v461 %= *(_QWORD *)&v452;
        }
        else
        {
          v461 &= *(_QWORD *)&v452 - 1;
        }
        if (v461 != v453)
        {
          *(_QWORD *)(*(_QWORD *)&v412[11] + 8 * v461) = v457;
          v460 = *v431;
        }
      }
      *v457 = v460;
      --*(_QWORD *)&v412[14];
      operator delete(v431);
LABEL_782:
      v462 = *(void ***)(v423 + 320);
      v463 = *(void ***)(v423 + 328);
      while (v462 != v463)
      {
        v465 = *v462;
        if (!v797 || (v776[0] = *v462, (*((unsigned int (**)(void **, void **))*v797 + 6))(v797, v776)))
        {
          v467 = (char *)v413[4];
          v466 = v413[5];
          if ((unint64_t)v467 < v466)
          {
            *(_QWORD *)v467 = v465;
            v464 = v467 + 8;
          }
          else
          {
            v468 = (char *)v413[3];
            v469 = (v467 - v468) >> 3;
            v470 = v469 + 1;
            if ((unint64_t)(v469 + 1) >> 61)
              abort();
            v471 = v466 - (_QWORD)v468;
            if (v471 >> 2 > v470)
              v470 = v471 >> 2;
            if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
              v472 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v472 = v470;
            if (v472)
            {
              if (v472 >> 61)
                goto LABEL_1227;
              v473 = (char *)operator new(8 * v472);
            }
            else
            {
              v473 = 0;
            }
            v474 = &v473[8 * v469];
            *(_QWORD *)v474 = v465;
            v464 = v474 + 8;
            if (v467 != v468)
            {
              v475 = v467 - 8 - v468;
              if (v475 < 0x58)
                goto LABEL_1244;
              if ((unint64_t)(v468 - v473) < 0x20)
                goto LABEL_1244;
              v476 = (v475 >> 3) + 1;
              v477 = &v473[8 * v469 - 16];
              v478 = (__int128 *)(v467 - 16);
              v479 = v476 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v480 = *v478;
                *((_OWORD *)v477 - 1) = *(v478 - 1);
                *(_OWORD *)v477 = v480;
                v477 -= 32;
                v478 -= 2;
                v479 -= 4;
              }
              while (v479);
              v474 -= 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
              v467 -= 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
              if (v476 != (v476 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1244:
                do
                {
                  v481 = *((_QWORD *)v467 - 1);
                  v467 -= 8;
                  *((_QWORD *)v474 - 1) = v481;
                  v474 -= 8;
                }
                while (v467 != v468);
              }
              v467 = (char *)v413[3];
            }
            v413[3] = v474;
            v413[4] = v464;
            v413[5] = &v473[8 * v472];
            if (v467)
              operator delete(v467);
          }
          v413[4] = v464;
        }
        ++v462;
      }
      v412 = v751;
      v422 = v760 + 1;
      v421 = v751[1];
      v393 = v763;
      if (v760 + 1 < (unint64_t)((uint64_t)(*(_QWORD *)&v751[2] - *(_QWORD *)&v421) >> 3))
        continue;
      break;
    }
    v415 = (uint64_t (***)())v797;
    if (v797 == (void **)&v794)
      goto LABEL_687;
    if (v797)
    {
      v416 = 5;
LABEL_688:
      (*v415)[v416]();
    }
    v417 = *(int8x8_t *)((char *)v393 + 384);
    if (!*(_QWORD *)&v417)
      goto LABEL_658;
    v418 = v738[5].u16[0];
    v419 = (uint8x8_t)vcnt_s8(v417);
    v419.i16[0] = vaddlv_u8(v419);
    if (v419.u32[0] > 1uLL)
    {
      v420 = v738[5].u16[0];
      if (*(_QWORD *)&v417 <= v418)
        v420 = v418 % *(_QWORD *)&v417;
    }
    else
    {
      v420 = (v417.i32[0] - 1) & v418;
    }
    v503 = *(uint64_t ****)(*((_QWORD *)v393 + 47) + 8 * v420);
    if (!v503)
      goto LABEL_658;
    v504 = *v503;
    if (!v504)
      goto LABEL_658;
    if (v419.u32[0] < 2uLL)
    {
      v505 = *(_QWORD *)&v417 - 1;
      while (1)
      {
        v507 = v504[1];
        if (v507 == (uint64_t *)v418)
        {
          if (*((unsigned __int16 *)v504 + 8) == (_DWORD)v418)
            goto LABEL_861;
        }
        else if (((unint64_t)v507 & v505) != v420)
        {
          goto LABEL_658;
        }
        v504 = (uint64_t **)*v504;
        if (!v504)
          goto LABEL_658;
      }
    }
    while (2)
    {
      v506 = (unint64_t)v504[1];
      if (v506 != v418)
      {
        if (v506 >= *(_QWORD *)&v417)
          v506 %= *(_QWORD *)&v417;
        if (v506 != v420)
          goto LABEL_658;
        goto LABEL_847;
      }
      if (*((unsigned __int16 *)v504 + 8) != (_DWORD)v418)
      {
LABEL_847:
        v504 = (uint64_t **)*v504;
        if (!v504)
          goto LABEL_658;
        continue;
      }
      break;
    }
LABEL_861:
    v508 = (unint64_t *)v504[3];
    v509 = (unint64_t *)v504[4];
    if (v508 != v509)
    {
      v510 = *(int8x8_t *)((char *)v393 + 344);
      if (v510)
      {
LABEL_863:
        v511 = *v508;
        v512 = (uint8x8_t)vcnt_s8(v510);
        v512.i16[0] = vaddlv_u8(v512);
        if (v512.u32[0] > 1uLL)
        {
          v513 = *v508;
          if (v511 >= *(_QWORD *)&v510)
            v513 = v511 % *(_QWORD *)&v510;
        }
        else
        {
          v513 = (*(_QWORD *)&v510 - 1) & v511;
        }
        v514 = *(uint64_t ***)(*((_QWORD *)v393 + 42) + 8 * v513);
        if (v514)
        {
          v515 = *v514;
          if (v515)
          {
            v516 = (unsigned __int16)*v508;
            if (v512.u32[0] < 2uLL)
            {
              v517 = *(_QWORD *)&v510 - 1;
              while (1)
              {
                v519 = v515[1];
                if (v519 == v511)
                {
                  if (__PAIR64__(*((unsigned __int16 *)v515 + 9), *((unsigned __int16 *)v515 + 8)) == __PAIR64__(WORD1(v511), v516)
                    && *((_DWORD *)v515 + 5) == HIDWORD(v511))
                  {
                    goto LABEL_884;
                  }
                }
                else if ((v519 & v517) != v513)
                {
                  goto LABEL_907;
                }
                v515 = (uint64_t *)*v515;
                if (!v515)
                  goto LABEL_907;
              }
            }
            do
            {
              v518 = v515[1];
              if (v518 == v511)
              {
                if (__PAIR64__(*((unsigned __int16 *)v515 + 9), *((unsigned __int16 *)v515 + 8)) == __PAIR64__(WORD1(v511), v516)
                  && *((_DWORD *)v515 + 5) == HIDWORD(v511))
                {
LABEL_884:
                  v520 = v515[3];
                  v522 = (char *)v413[4];
                  v521 = v413[5];
                  if ((unint64_t)v522 < v521)
                  {
                    *(_QWORD *)v522 = v520;
                    v523 = v522 + 8;
LABEL_906:
                    v413[4] = v523;
                    v393 = v763;
                    break;
                  }
                  v524 = (char *)v413[3];
                  v525 = (v522 - v524) >> 3;
                  v526 = v525 + 1;
                  if ((unint64_t)(v525 + 1) >> 61)
                    abort();
                  v527 = v521 - (_QWORD)v524;
                  if (v527 >> 2 > v526)
                    v526 = v527 >> 2;
                  if ((unint64_t)v527 >= 0x7FFFFFFFFFFFFFF8)
                    v528 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v528 = v526;
                  if (!v528)
                  {
                    v529 = 0;
                    goto LABEL_896;
                  }
                  if (!(v528 >> 61))
                  {
                    v529 = (char *)operator new(8 * v528);
LABEL_896:
                    v530 = &v529[8 * v525];
                    *(_QWORD *)v530 = v520;
                    v523 = v530 + 8;
                    if (v522 != v524)
                    {
                      v531 = v522 - 8 - v524;
                      if (v531 < 0x58)
                        goto LABEL_1245;
                      if ((unint64_t)(v524 - v529) < 0x20)
                        goto LABEL_1245;
                      v532 = (v531 >> 3) + 1;
                      v533 = &v529[8 * v525 - 16];
                      v534 = (__int128 *)(v522 - 16);
                      v535 = v532 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v536 = *v534;
                        *((_OWORD *)v533 - 1) = *(v534 - 1);
                        *(_OWORD *)v533 = v536;
                        v533 -= 32;
                        v534 -= 2;
                        v535 -= 4;
                      }
                      while (v535);
                      v530 -= 8 * (v532 & 0x3FFFFFFFFFFFFFFCLL);
                      v522 -= 8 * (v532 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v532 != (v532 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_1245:
                        do
                        {
                          v537 = *((_QWORD *)v522 - 1);
                          v522 -= 8;
                          *((_QWORD *)v530 - 1) = v537;
                          v530 -= 8;
                        }
                        while (v522 != v524);
                      }
                      v522 = (char *)v413[3];
                    }
                    v413[3] = v530;
                    v413[4] = v523;
                    v413[5] = &v529[8 * v528];
                    if (v522)
                      operator delete(v522);
                    goto LABEL_906;
                  }
LABEL_1227:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
              }
              else
              {
                if (v518 >= *(_QWORD *)&v510)
                  v518 %= *(_QWORD *)&v510;
                if (v518 != v513)
                  break;
              }
              v515 = (uint64_t *)*v515;
            }
            while (v515);
          }
        }
LABEL_907:
        while (++v508 != v509)
        {
          v510 = *(int8x8_t *)((char *)v393 + 344);
          if (v510)
            goto LABEL_863;
        }
      }
    }
LABEL_658:
    v398 = v413[3];
    v399 = (uint64_t *)v413[4];
    v400 = 126 - 2 * __clz(((uint64_t)v399 - v398) >> 3);
    if (v399 == (uint64_t *)v398)
      v401 = 0;
    else
      v401 = v400;
    std::__introsort<std::_ClassicAlgPolicy,md::MeshRenderableLogic::gatherRenderables(md::LayoutContext const&,md::MaterialContext const&)::$_0 &,md::MeshRenderable **,false>(v398, v399, v401, 1);
    v395 = v748;
    v396 = v743;
    v397 = v741;
LABEL_662:
    if (++v395 != v396)
      continue;
    break;
  }
LABEL_910:
  v538 = v782;
  if (v782)
  {
    v539 = (unint64_t *)&v782->__shared_owners_;
    do
      v540 = __ldaxr(v539);
    while (__stlxr(v540 - 1, v539));
    if (!v540)
    {
      ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
      std::__shared_weak_count::__release_weak(v538);
    }
  }
  v541 = (std::__shared_weak_count *)buf[3];
  if (buf[3])
  {
    v542 = (unint64_t *)(*(_QWORD *)&buf[3] + 8);
    do
      v543 = __ldaxr(v542);
    while (__stlxr(v543 - 1, v542));
    if (!v543)
    {
      ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
      std::__shared_weak_count::__release_weak(v541);
    }
  }
  v544 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
    v545 = (unint64_t *)(*(_QWORD *)&buf[1] + 8);
    do
      v546 = __ldaxr(v545);
    while (__stlxr(v546 - 1, v545));
    if (!v546)
    {
      ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
      std::__shared_weak_count::__release_weak(v544);
    }
  }
  if (GEOGetVectorKitPerformanceDetailsLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceDetailsLog_onceToken, &__block_literal_global_16_11784);
  v547 = (id)GEOGetVectorKitPerformanceDetailsLog_log;
  v548 = v547;
  v549 = *((_QWORD *)a2 + 10);
  if (v549 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v547))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v548, OS_SIGNPOST_INTERVAL_END, v549, "GatherRenderables", (const char *)&unk_1A0189141, (uint8_t *)buf, 2u);
  }

  v388 = v763;
LABEL_931:
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v551 = *((_QWORD *)v388 + 17);
    v552 = *(int8x8_t ***)(v551 + 384);
    v553 = *(int8x8_t ***)(v551 + 392);
    if (v552 != v553)
    {
      *(_QWORD *)&v550 = 67109120;
      do
      {
        v554 = (*v552)[1];
        if (v554)
        {
          v555 = (uint8x8_t)vcnt_s8(v554);
          v555.i16[0] = vaddlv_u8(v555);
          if (v555.u32[0] > 1uLL)
          {
            v556 = 0xCA93DB2C2ACE8387;
            if (*(_QWORD *)&v554 <= 0xCA93DB2C2ACE8387)
              v556 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v554;
          }
          else
          {
            v556 = (*(_QWORD *)&v554 - 1) & 0xCA93DB2C2ACE8387;
          }
          v557 = *(_QWORD **)(*(_QWORD *)*v552 + 8 * v556);
          if (v557)
          {
            v558 = (_QWORD *)*v557;
            if (v558)
            {
              if (v555.u32[0] < 2uLL)
              {
                v559 = *(_QWORD *)&v554 - 1;
                while (1)
                {
                  v561 = v558[1];
                  if (v561 == 0xCA93DB2C2ACE8387)
                  {
                    if (v558[2] == 0xCA93DB2C2ACE8387)
                      goto LABEL_958;
                  }
                  else if ((v561 & v559) != v556)
                  {
                    goto LABEL_936;
                  }
                  v558 = (_QWORD *)*v558;
                  if (!v558)
                    goto LABEL_936;
                }
              }
              do
              {
                v560 = v558[1];
                if (v560 == 0xCA93DB2C2ACE8387)
                {
                  if (v558[2] == 0xCA93DB2C2ACE8387)
                  {
LABEL_958:
                    v562 = v558[5];
                    if (*(_QWORD *)(v562 + 8) == 0xCA93DB2C2ACE8387)
                    {
                      v563 = *(unsigned __int16 **)(v562 + 32);
                      if (v563)
                      {
                        if (*((_BYTE *)v563 + 80))
                        {
                          v761 = v550;
                          if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
                            dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
                          v564 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
                          v565 = os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_ERROR);
                          v550 = v761;
                          if (v565)
                          {
                            buf[0] = (int8x8_t)__PAIR64__(*v563, v761);
                            _os_log_impl(&dword_19F029000, v564, OS_LOG_TYPE_ERROR, "BatchManager(id:%d) is not finalized", (uint8_t *)buf, 8u);
                            v550 = v761;
                          }
                        }
                      }
                    }
                    break;
                  }
                }
                else
                {
                  if (v560 >= *(_QWORD *)&v554)
                    v560 %= *(_QWORD *)&v554;
                  if (v560 != v556)
                    break;
                }
                v558 = (_QWORD *)*v558;
              }
              while (v558);
            }
          }
        }
LABEL_936:
        ++v552;
      }
      while (v552 != v553);
    }
    v388 = v763;
    for (k = (uint64_t **)*((_QWORD *)v763 + 39); k; v388 = v763)
    {
      v567 = *((_QWORD *)v388 + 17);
      v568 = *(_QWORD *)(v567 + 384);
      v569 = *(_QWORD *)(v567 + 392);
      if (v568 == v569)
      {
LABEL_971:
        if (k[3] != k[4])
        {
          if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
            dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
          v570 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            buf[0].i16[0] = 0;
            _os_log_impl(&dword_19F029000, v570, OS_LOG_TYPE_ERROR, "Tracking renderables for inactive registry", (uint8_t *)buf, 2u);
          }
        }
      }
      else
      {
        while (*(unsigned __int16 *)(*(_QWORD *)v568 + 40) != *((unsigned __int16 *)k + 8))
        {
          v568 += 8;
          if (v568 == v569)
            goto LABEL_971;
        }
      }
      k = (uint64_t **)*k;
    }
    for (m = (uint64_t **)*((_QWORD *)v388 + 49); m; v388 = v763)
    {
      v572 = *((_QWORD *)v388 + 17);
      v573 = *(_QWORD *)(v572 + 384);
      v574 = *(_QWORD *)(v572 + 392);
      if (v573 == v574)
      {
LABEL_982:
        if (m[3] != m[4])
        {
          if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
            dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
          v575 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
          if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_ERROR))
          {
            buf[0].i16[0] = 0;
            _os_log_impl(&dword_19F029000, v575, OS_LOG_TYPE_ERROR, "Tracking renderable injections for inactive registry", (uint8_t *)buf, 2u);
          }
        }
      }
      else
      {
        while (*(unsigned __int16 *)(*(_QWORD *)v573 + 40) != *((unsigned __int16 *)m + 8))
        {
          v573 += 8;
          if (v573 == v574)
            goto LABEL_982;
        }
      }
      m = (uint64_t **)*m;
    }
  }
  *((_BYTE *)v388 + 416) = 0;
}

void sub_19F1684F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char *a46)
{
  if (a46 == &a43)
    JUMPOUT(0x19F16850CLL);
  JUMPOUT(0x19F168A54);
}

void sub_19F168520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,_QWORD *__p,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,_QWORD *a51)
{
  uint64_t v51;
  void *v53;
  void *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;

  v53 = *(void **)(v51 - 168);
  if (v53)
  {
    *(_QWORD *)(v51 - 160) = v53;
    operator delete(v53);
    v54 = *(void **)(v51 - 136);
    if (!v54)
    {
LABEL_3:
      v55 = a31;
      if (!a31)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v54 = *(void **)(v51 - 136);
    if (!v54)
      goto LABEL_3;
  }
  *(_QWORD *)(v51 - 128) = v54;
  operator delete(v54);
  v55 = a31;
  if (!a31)
  {
LABEL_4:
    v56 = __p;
    if (!__p)
      goto LABEL_6;
    do
    {
LABEL_5:
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
LABEL_6:
    if (a43)
      operator delete(a43);
    v58 = a51;
    if (a51)
    {
      do
      {
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
    }
    if (a49)
    {
      operator delete(a49);
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_14:
  operator delete(v55);
  v56 = __p;
  if (!__p)
    goto LABEL_6;
  goto LABEL_5;
}

void sub_19F168530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char *a52)
{
  char *v52;
  uint64_t v53;

  v52 = a52;
  if (a52 == &a49)
  {
    v53 = 4;
    v52 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_6:
  if ((unint64_t *)STACK[0x268] != &STACK[0x250])
  {
    if (STACK[0x268])
      JUMPOUT(0x19F16858CLL);
    JUMPOUT(0x19F1685A0);
  }
  JUMPOUT(0x19F168590);
}

void sub_19F168648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char *a52)
{
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a52;
  if (a52 == &a49)
  {
    v54 = 4;
    v53 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_6:
  v55 = *(_QWORD *)(v52 - 112);
  if (v55 != v52 - 136)
  {
    if (v55)
      JUMPOUT(0x19F16869CLL);
    JUMPOUT(0x19F1686B0);
  }
  JUMPOUT(0x19F1686A0);
}

void sub_19F1686CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char *a52)
{
  char *v52;
  uint64_t v53;

  v52 = a52;
  if (a52 == &a49)
  {
    v53 = 4;
    v52 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_6;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_6:
  if (a40 != &a37)
  {
    if (a40)
      JUMPOUT(0x19F168720);
    JUMPOUT(0x19F168734);
  }
  JUMPOUT(0x19F168724);
}

void sub_19F168750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t *a36)
{
  _QWORD *v36;
  uint64_t v37;

  v37 = v36[5];
  v36[5] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  operator delete(v36);
  if (a36 != &a33)
    JUMPOUT(0x19F1689ECLL);
  JUMPOUT(0x19F1689F4);
}

void sub_19F16877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t *a48,char a49)
{
  uint64_t v49;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;

  if (LOBYTE(STACK[0x228]))
  {
    v51 = LODWORD(STACK[0x220]);
    if ((_DWORD)v51 != -1)
      (*(&off_1E42F43B8 + v51))(v49 - 168, (md::MaterialRenderBatchKey *)&a49);
  }
  v52 = a36;
  if (a36 == &a33)
  {
    v53 = 4;
    v52 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_9;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_9:
  v54 = a42;
  if (a42 == &a39)
  {
    v55 = 4;
    v54 = &a39;
  }
  else
  {
    if (!a42)
      goto LABEL_14;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_14:
  v56 = a48;
  if (a48 == &a45)
  {
    v57 = 4;
    v56 = &a45;
  }
  else
  {
    if (!a48)
      _Unwind_Resume(a1);
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
  _Unwind_Resume(a1);
}

void sub_19F1687B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t *a36)
{
  uint64_t v36;

  MEMORY[0x1A1AF4E00](v36, 0x10F1C40B0038B9CLL);
  if (a36 != &a33)
    JUMPOUT(0x19F1689ECLL);
  JUMPOUT(0x19F1689F4);
}

void sub_19F1687E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,_QWORD *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,_QWORD *a51)
{
  uint64_t v51;
  char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;

  v53 = a40;
  if (a40 == &a37)
  {
    v54 = 4;
    v53 = &a37;
  }
  else
  {
    if (!a40)
    {
      v55 = *(void **)(v51 - 168);
      if (v55)
        goto LABEL_17;
      goto LABEL_5;
    }
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
  v55 = *(void **)(v51 - 168);
  if (v55)
  {
LABEL_17:
    *(_QWORD *)(v51 - 160) = v55;
    operator delete(v55);
    v56 = *(void **)(v51 - 136);
    if (v56)
    {
LABEL_18:
      *(_QWORD *)(v51 - 128) = v56;
      operator delete(v56);
      v57 = a31;
      if (a31)
      {
LABEL_19:
        operator delete(v57);
        v58 = a45;
        if (!a45)
          goto LABEL_9;
        goto LABEL_8;
      }
LABEL_7:
      v58 = a45;
      if (!a45)
        goto LABEL_9;
      do
      {
LABEL_8:
        v59 = (_QWORD *)*v58;
        operator delete(v58);
        v58 = v59;
      }
      while (v59);
LABEL_9:
      v60 = a43;
      a43 = 0;
      if (v60)
        operator delete(v60);
      v61 = a51;
      if (a51)
      {
        do
        {
          v62 = (_QWORD *)*v61;
          operator delete(v61);
          v61 = v62;
        }
        while (v62);
      }
      v63 = a49;
      a49 = 0;
      if (v63)
      {
        operator delete(v63);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x19F168AB4);
    }
LABEL_6:
    v57 = a31;
    if (a31)
      goto LABEL_19;
    goto LABEL_7;
  }
LABEL_5:
  v56 = *(void **)(v51 - 136);
  if (v56)
    goto LABEL_18;
  goto LABEL_6;
}

void sub_19F1688C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,std::__shared_weak_count *a54)
{
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;

  v56 = *(_QWORD **)(v54 - 144);
  if (v56 == (_QWORD *)(v54 - 168))
  {
    v57 = 4;
    v56 = (_QWORD *)(v54 - 168);
  }
  else
  {
    if (!v56)
    {
LABEL_6:
      if (a54)
      {
        p_shared_owners = (unint64_t *)&a54->__shared_owners_;
        do
          v59 = __ldaxr(p_shared_owners);
        while (__stlxr(v59 - 1, p_shared_owners));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))a54->__on_zero_shared)(a54);
          std::__shared_weak_count::__release_weak(a54);
        }
      }
      if (a52)
      {
        v60 = (unint64_t *)&a52->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))a52->__on_zero_shared)(a52);
          std::__shared_weak_count::__release_weak(a52);
        }
      }
      if (a50)
      {
        v62 = (unint64_t *)&a50->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))a50->__on_zero_shared)(a50);
          std::__shared_weak_count::__release_weak(a50);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
  goto LABEL_6;
}

void sub_19F1689B8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F168A70()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x19F168AA4);
}

void sub_19F168AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *a51)
{
  if (a49 != a51)
  {
    free(a49);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19F168AB4);
}

uint64_t *std::__hash_table<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::__unordered_map_hasher<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,true>,std::__unordered_map_equal<gdc::Entity,std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>,std::equal_to<gdc::Entity>,std::hash<gdc::Entity>,true>,std::allocator<std::__hash_value_type<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>::find<gdc::Entity>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = *v5;
  if (*v5)
  {
    if (v3.u32[0] < 2uLL)
    {
      v7 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v9 = result[1];
        if (v9 == a2)
        {
          if (__PAIR64__(*((unsigned __int16 *)result + 9), *((unsigned __int16 *)result + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)result + 5) == HIDWORD(a2))
          {
            return result;
          }
        }
        else if ((v9 & v7) != v4)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v8 = result[1];
      if (v8 == a2)
      {
        if (__PAIR64__(*((unsigned __int16 *)result + 9), *((unsigned __int16 *)result + 8)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *((_DWORD *)result + 5) == HIDWORD(a2))
        {
          return result;
        }
      }
      else
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
        if (v8 != v4)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::__unordered_map_hasher<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,true>,std::__unordered_map_equal<md::RenderBatch *,std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>,std::equal_to<md::RenderBatch *>,std::hash<md::RenderBatch *>,true>,std::allocator<std::__hash_value_type<md::RenderBatch *,gm::Range<unsigned long>>>>::__emplace_unique_key_args<md::RenderBatch *,std::piecewise_construct_t const&,std::tuple<md::RenderBatch * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_34;
    if (prime < v9)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v9)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v12 = *v25;
LABEL_58:
    *v25 = v12;
    goto LABEL_59;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v26 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_19F168ED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::VisibilityChanged>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA58E035ED185DBF8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA58E035ED185DBF8;
      if (*(_QWORD *)&v3 <= 0xA58E035ED185DBF8)
        v5 = 0xA58E035ED185DBF8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA58E035ED185DBF8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA58E035ED185DBF8)
            {
              if (v7[2] == 0xA58E035ED185DBF8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA58E035ED185DBF8)
          {
            if (v7[2] == 0xA58E035ED185DBF8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::VisibilityChanged]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3138;
  *(_QWORD *)(v11 + 8) = 0xA58E035ED185DBF8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA58E035ED185DBF8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA58E035ED185DBF8;
  v15[1] = "md::components::VisibilityChanged]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA58E035ED185DBF8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F1690FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::CustomRenderStateChanged>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB8E8DF22A2AE77B4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB8E8DF22A2AE77B4;
      if (*(_QWORD *)&v3 <= 0xB8E8DF22A2AE77B4)
        v5 = 0xB8E8DF22A2AE77B4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB8E8DF22A2AE77B4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB8E8DF22A2AE77B4)
            {
              if (v7[2] == 0xB8E8DF22A2AE77B4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB8E8DF22A2AE77B4)
          {
            if (v7[2] == 0xB8E8DF22A2AE77B4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::CustomRenderStateChanged]";
  *(_QWORD *)(v11 + 24) = 40;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3378;
  *(_QWORD *)(v11 + 8) = 0xB8E8DF22A2AE77B4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB8E8DF22A2AE77B4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB8E8DF22A2AE77B4;
  v15[1] = "md::components::CustomRenderStateChanged]";
  v15[2] = 40;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB8E8DF22A2AE77B4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F169324(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<md::MeshRenderable *>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = a1[1];
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime >= v7)
      {
        v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_63;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_63:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_58;
    }
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v3) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F1697AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<md::RenderBatch *,std::hash<md::RenderBatch *>,std::equal_to<md::RenderBatch *>,std::allocator<md::RenderBatch *>>::__emplace_unique_key_args<md::RenderBatch *,md::RenderBatch *&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_59;
      v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v43 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v43)
          operator delete(v43);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
    {
LABEL_58:
      v10 = prime;
      goto LABEL_59;
    }
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_58;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_58;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v28)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
          goto LABEL_63;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
      }
      v39 = v28;
LABEL_63:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v28 = v39;
      if (!v37)
        goto LABEL_58;
    }
  }
LABEL_72:
  v40 = *(_QWORD **)a1;
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v41)
  {
    *v16 = *v41;
LABEL_80:
    *v41 = v16;
    goto LABEL_81;
  }
  *v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v16;
  v40[v3] = a1 + 4;
  if (*v16)
  {
    v42 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v42 >= v10)
        v42 %= v10;
    }
    else
    {
      v42 &= v10 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F169C38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (md::MeshRenderableLogic::*)(gdc::Registry *,gdc::EntityCollector *),md::MeshRenderableLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(gdc::Registry *,gdc::EntityCollector *)>::operator()(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *a2, *a3);
}

void geo::make_unique<grl::IconRenderer,grl::codec::IconData const&,float &,grl::IconModifiers const&,std::map<unsigned short,grl::ImageData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::ImageData>,grl::Allocator>> const&,std::map<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::less<std::string>,geo::StdAllocator<std::pair<std::string const,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>> const&>(grl::codec::IconData *a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  float v13;
  int v14;
  char v15;
  void *__p;
  char v17;

  v12 = operator new();
  v13 = *a2;
  v15 = 0;
  v14 = 0;
  *a6 = grl::IconRenderer::IconRenderer(v12, a1, a3, a4, a5, &v14, v13);
  if (v15)
  {
    if (v17 < 0)
      operator delete(__p);
  }
}

uint64_t grl::IconRenderer::IconRenderer(uint64_t a1, grl::codec::IconData *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _DWORD *a6, float a7)
{
  _QWORD *v11;
  grl::Allocator *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  grl::Allocator *v16;
  grl::Allocator *v17;
  _QWORD *v18;
  grl::codec::IconData *v19;
  __n128 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  double v24;
  double v25;
  unsigned int v26;
  float v27;
  NSObject *v28;
  const char *v29;
  _QWORD *v30;
  unsigned int v31;
  size_t v32;
  std::string *v33;
  const void *v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  BOOL v48;
  int v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  void **v62;
  void **v63;
  NSObject *v64;
  void **v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t i;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v82;
  _QWORD *v84;
  _QWORD *v87;
  _QWORD **v88;
  _QWORD *v89;
  grl::Allocator *v90;
  uint64_t v91;
  _QWORD **v92;
  _QWORD *v93;
  grl::Allocator *v94;
  uint64_t v95;
  _QWORD **v96;
  _QWORD *v97[3];
  std::string v98;
  std::string v99;
  char v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  std::string v105;
  void *v106[2];
  char v107;
  _QWORD *v108;
  void *__p[2];
  uint64_t v110;
  _BYTE buf[32];
  _BYTE v112[6];
  _BYTE *v113;
  uint64_t v114[9];

  v114[6] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E42C2848;
  *(_BYTE *)(a1 + 24) = 4;
  *(_QWORD *)(a1 + 40) = 0;
  v11 = (_QWORD *)(a1 + 40);
  v12 = (grl::Allocator *)grl::Allocator::instance((grl::Allocator *)a1);
  *(_QWORD *)(a1 + 32) = v11;
  v13 = (uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  v14 = a1 + 120;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  v15 = grl::Allocator::instance(v12);
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = v15;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a3 + 4);
  *(_WORD *)(a1 + 257) = 0;
  *(_BYTE *)(a1 + 259) = 0;
  *(float *)(a1 + 260) = a7;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = *a6;
  v16 = (grl::Allocator *)geo::optional<std::string>::optional((_BYTE *)(a1 + 288), (uint64_t)(a6 + 2));
  *(_QWORD *)(a1 + 328) = 0;
  v17 = (grl::Allocator *)grl::Allocator::instance(v16);
  *(_QWORD *)(a1 + 336) = v17;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 360) = a1 + 360;
  *(_QWORD *)(a1 + 368) = a1 + 360;
  *(_QWORD *)(a1 + 376) = 0;
  v89 = 0;
  v90 = (grl::Allocator *)grl::Allocator::instance(v17);
  v91 = 0;
  v88 = &v89;
  v93 = 0;
  v94 = (grl::Allocator *)grl::Allocator::instance(v90);
  v95 = 0;
  v92 = &v93;
  v97[0] = 0;
  v97[1] = (_QWORD *)grl::Allocator::instance(v94);
  v97[2] = 0;
  v96 = v97;
  if (*(_QWORD *)(a3 + 144) != *(_QWORD *)(a3 + 152))
    *(_BYTE *)(a1 + 259) = 1;
  v18 = operator new(0x20uLL);
  v19 = a2;
  *v18 = &off_1E42D80D8;
  v18[1] = a2;
  v18[2] = a3;
  v18[3] = a1;
  *(_QWORD *)&buf[24] = v18;
  v20.n128_u64[0] = (unint64_t)grl::codec::IconData::forEachPathLayer((uint64_t)a2, (grl::IconModifiers *)a3, (uint64_t)buf);
  v21 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v22 = 4;
    v21 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[24])
      goto LABEL_8;
    v22 = 5;
  }
  (*(void (**)(__n128))(*v21 + 8 * v22))(v20);
LABEL_8:
  v103 = 0;
  v101 = 0;
  v100 = 0;
  v23 = operator new(0x38uLL);
  *v23 = &off_1E42D8168;
  v23[1] = a4;
  v23[2] = a1;
  v23[3] = &v103;
  v23[4] = &v101;
  v23[5] = &v100;
  v23[6] = a3;
  v108 = v23;
  v25 = grl::codec::IconData::forEachImageLayer(a2, (grl::IconModifiers *)a3, (uint64_t)v106, v24);
  (*(void (**)(_QWORD *, double))(*v23 + 40))(v23, v25);
  v84 = (_QWORD *)(a1 + 32);
  if (!v100)
    goto LABEL_29;
  if (!v101)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v28 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = 456;
    v29 = "Failed to find HorizontalStretchPadding property for the image layer at index 0.: Assertion with expression - "
          "%s : Failed in file - %s line - %i";
LABEL_23:
    _os_log_impl(&dword_19F029000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x1Cu);
    goto LABEL_87;
  }
  if (!v103)
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v28 = GEOGetGeoResourceLibRendererLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconRenderer.cpp";
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = 459;
    v29 = "Failed to find image size for stretched icon at index 0.: Assertion with expression - %s : Failed in file - %s line - %i";
    goto LABEL_23;
  }
  if ((float)(*(float *)&v102 + *((float *)&v102 + 1)) < *(float *)&v104)
    goto LABEL_29;
  if (*(float *)&v104 <= 4295000000.0)
  {
    if (*(float *)&v104 >= 0.0)
    {
      v26 = vcvtas_u32_f32(*(float *)&v104);
      if ((v26 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v26 = 0;
    }
    v27 = (float)((float)v26 * 0.5) + -1.0;
    goto LABEL_28;
  }
  v26 = -1;
LABEL_14:
  v27 = floorf((float)v26 * 0.5);
LABEL_28:
  *(float *)&v102 = v27;
  *((float *)&v102 + 1) = v27;
LABEL_29:
  v82 = a3;
  if (*(_BYTE *)(a1 + 288))
  {
    v30 = (_QWORD *)*a4;
    v87 = a4 + 1;
    if (v30 != v87)
    {
      v31 = 0;
      while (1)
      {
        *(_WORD *)buf = *((_WORD *)v30 + 16);
        *(_QWORD *)&buf[8] = v30[5];
        std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)&buf[16], (uint64_t)(v30 + 6));
        if (*(char *)(a1 + 319) >= 0)
          v32 = *(unsigned __int8 *)(a1 + 319);
        else
          v32 = *(_QWORD *)(a1 + 304);
        std::string::basic_string[abi:nn180100]((uint64_t)&v99, v32 + 10);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v99;
        else
          v33 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if (v32)
        {
          if (*(char *)(a1 + 319) >= 0)
            v34 = (const void *)(a1 + 296);
          else
            v34 = *(const void **)(a1 + 296);
          memmove(v33, v34, v32);
        }
        strcpy((char *)v33 + v32, "inputImage");
        std::to_string(&v98, v31);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v98;
        else
          v35 = (std::string *)v98.__r_.__value_.__r.__words[0];
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
        else
          size = v98.__r_.__value_.__l.__size_;
        v37 = std::string::append(&v99, (const std::string::value_type *)v35, size);
        v38 = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v39 = std::string::append(&v105, ".png");
        v40 = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v110 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if (!v113)
          std::__throw_bad_function_call[abi:nn180100]();
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v113 + 48))(&v105);
        (*(void (**)(void))(*(_QWORD *)v105.__r_.__value_.__l.__data_ + 112))();
        v41 = (std::__shared_weak_count *)v105.__r_.__value_.__l.__size_;
        if (v105.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(v105.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (SHIBYTE(v110) < 0)
          operator delete(__p[0]);
        v44 = v113;
        if (v113 == &buf[16])
          break;
        if (v113)
        {
          v45 = 5;
LABEL_67:
          (*(void (**)(void))(*v44 + 8 * v45))();
        }
        v46 = (_QWORD *)v30[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (_QWORD *)v30[2];
            v48 = *v47 == (_QWORD)v30;
            v30 = v47;
          }
          while (!v48);
        }
        ++v31;
        v30 = v47;
        if (v47 == v87)
          goto LABEL_74;
      }
      v44 = &buf[16];
      v45 = 4;
      goto LABEL_67;
    }
  }
LABEL_74:
  v49 = *(unsigned __int8 *)(a1 + 232);
  if (v103)
  {
    *(_QWORD *)(a1 + 236) = v104;
    if (!v49)
      *(_BYTE *)(a1 + 232) = 1;
  }
  else if (*(_BYTE *)(a1 + 232))
  {
    *(_BYTE *)(a1 + 232) = 0;
  }
  v50 = *(unsigned __int8 *)(a1 + 244);
  a3 = v82;
  v19 = a2;
  if (v101)
  {
    v13 = (uint64_t **)(a1 + 32);
    v14 = a1 + 120;
    *(_QWORD *)(a1 + 248) = v102;
    if (!v50)
      *(_BYTE *)(a1 + 244) = 1;
  }
  else
  {
    v13 = (uint64_t **)(a1 + 32);
    v14 = a1 + 120;
    if (*(_BYTE *)(a1 + 244))
      *(_BYTE *)(a1 + 244) = 0;
  }
  *(_BYTE *)(a1 + 257) = v100;
LABEL_87:
  v51 = operator new(0x28uLL);
  *v51 = &off_1E42D8120;
  v51[1] = a3;
  v51[2] = a1;
  v51[3] = a5;
  v51[4] = &v88;
  *(_QWORD *)&buf[24] = v51;
  grl::codec::IconData::forEachTextLayer((uint64_t)v19, (grl::IconModifiers *)a3, (uint64_t)buf);
  v52 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v54 = 4;
    v52 = buf;
    v53 = a1 + 200;
  }
  else
  {
    v53 = a1 + 200;
    if (!*(_QWORD *)&buf[24])
      goto LABEL_92;
    v54 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v54))();
LABEL_92:
  if (*((_BYTE *)v19 + 32))
  {
    grl::codec::IconData::colorLayer(v19, (uint64_t)buf);
    if (BYTE5(v113))
    {
      v55 = operator new();
      *(_WORD *)(v55 + 8) = 0;
      *(_BYTE *)(v55 + 10) = 1;
      *(_QWORD *)v55 = &off_1E42C2680;
      *(_QWORD *)(v55 + 16) = 0;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0;
      *(_QWORD *)(v55 + 40) = *(_QWORD *)&buf[24];
      std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(v55 + 16, *(_BYTE **)buf, *(_BYTE **)&buf[8], *(_QWORD *)&buf[8] - *(_QWORD *)buf);
      *(_BYTE *)(v55 + 48) = v112[0];
      *(_DWORD *)(v55 + 49) = *(_DWORD *)&v112[1];
      *(_DWORD *)(v55 + 56) = (_DWORD)v113;
      *(_WORD *)(v55 + 60) = WORD2(v113);
      *(_BYTE *)(v55 + 64) = 0;
      LODWORD(__p[0]) = 0;
      BYTE4(__p[0]) = 0;
      v106[0] = __p;
      v56 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,std::piecewise_construct_t const&,std::tuple<grl::IconLayerMapKey&&>,std::tuple<>>(v13, (__int16 *)__p, (_DWORD **)v106);
      v57 = v56[5];
      v56[5] = v55;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24], *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
    }
  }
  if (*((_BYTE *)v19 + 184))
  {
    grl::codec::IconData::infoLayer(v19, (IconModifiers *)a3, (uint64_t)buf);
    if (!*(_BYTE *)(a1 + 72))
      *(_BYTE *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 76) = *(_QWORD *)buf;
    *(_QWORD *)(a1 + 84) = *(_QWORD *)&buf[8];
    *(_BYTE *)(a1 + 92) = buf[16];
    *(_QWORD *)(a1 + 93) = *(_QWORD *)&buf[17];
    *(_DWORD *)(a1 + 101) = *(_DWORD *)&buf[25];
    *(_DWORD *)(a1 + 108) = *(_DWORD *)v112;
    *(_WORD *)(a1 + 112) = *(_WORD *)&v112[4];
  }
  grl::IconMetrics::IconMetrics((uint64_t)buf, (grl::IconRenderer *)a1, (uint64_t)&v88);
  grl::IconMetrics::operator=(v14, (uint64_t)buf);
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy((uint64_t)v114, v114[1]);
  *(_QWORD *)buf = buf;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0;
  v58 = *(_QWORD **)(a1 + 32);
  if (v58 != v11)
  {
    while (1)
    {
      v59 = v58[5];
      if (!v59)
        break;
      LODWORD(v106[0]) = *((_DWORD *)v58 + 8);
      BYTE4(v106[0]) = 0;
      v60 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::find<grl::IconLayerMapKey>(a1 + 192, (__int16 *)v106);
      if (v53 == v60 || !*(_QWORD *)(v60 + 40))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v61 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          grl::toString<grl::LayerType>(*((unsigned __int16 *)v58 + 16), v106);
          if (v107 >= 0)
            v62 = v106;
          else
            v62 = (void **)v106[0];
          grl::IconRenderer::description((uint64_t *)__p, (grl::IconRenderer *)a1);
          v63 = __p;
          if (v110 < 0)
            v63 = (void **)__p[0];
          LODWORD(v105.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v105.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
          WORD2(v105.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v105.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
          _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_ERROR, "A LayerMetrics of type %s failed to generate. %s", (uint8_t *)&v105, 0x16u);
          if (SHIBYTE(v110) < 0)
            operator delete(__p[0]);
          if (v107 < 0)
            operator delete(v106[0]);
          v53 = a1 + 200;
        }
LABEL_127:
        std::list<grl::IconLayerMapKey>::push_back((uint64_t *)buf, (uint64_t)(v58 + 4));
        goto LABEL_128;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
LABEL_128:
      v66 = (_QWORD *)v58[1];
      if (v66)
      {
        do
        {
          v67 = v66;
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          v67 = (_QWORD *)v58[2];
          v48 = *v67 == (_QWORD)v58;
          v58 = v67;
        }
        while (!v48);
      }
      v58 = v67;
      if (v67 == v11)
      {
        for (i = *(_QWORD *)&buf[8]; (_BYTE *)i != buf; i = *(_QWORD *)(i + 8))
        {
          LODWORD(v106[0]) = *(_DWORD *)(i + 16);
          BYTE4(v106[0]) = 0;
          if (*(_BYTE *)(i + 20))
          {
            BYTE5(v106[0]) = *(_BYTE *)(i + 21);
            BYTE4(v106[0]) = 1;
          }
          v69 = *v11;
          if (*v11)
          {
            v70 = v11;
            do
            {
              v71 = grl::IconLayerMapKey::operator()(a1 + 64, (__int16 *)(v69 + 32), (__int16 *)v106);
              v72 = (uint64_t *)(v69 + 8);
              if (!v71)
              {
                v72 = (uint64_t *)v69;
                v70 = (_QWORD *)v69;
              }
              v69 = *v72;
            }
            while (*v72);
            if (v70 != v11
              && (grl::IconLayerMapKey::operator()(a1 + 64, (__int16 *)v106, (__int16 *)v70 + 16) & 1) == 0)
            {
              v73 = (_QWORD *)v70[1];
              v74 = v70;
              if (v73)
              {
                do
                {
                  v75 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
              }
              else
              {
                do
                {
                  v75 = (_QWORD *)v74[2];
                  v48 = *v75 == (_QWORD)v74;
                  v74 = v75;
                }
                while (!v48);
              }
              if ((_QWORD *)*v84 == v70)
                *v84 = v75;
              --*(_QWORD *)(a1 + 56);
              std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v70);
              v76 = v70[5];
              v70[5] = 0;
              if (v76)
                (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
              if (*((_BYTE *)v70 + 36))
                *((_BYTE *)v70 + 36) = 0;
              (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v70, 48);
            }
          }
        }
        if (*(_QWORD *)&buf[16])
        {
          v78 = *(_QWORD *)buf;
          v77 = *(_QWORD **)&buf[8];
          v79 = **(_QWORD **)&buf[8];
          *(_QWORD *)(v79 + 8) = *(_QWORD *)(*(_QWORD *)buf + 8);
          **(_QWORD **)(v78 + 8) = v79;
          *(_QWORD *)&buf[16] = 0;
          if (v77 != (_QWORD *)buf)
          {
            do
            {
              v80 = (_BYTE *)v77[1];
              operator delete(v77);
              v77 = v80;
            }
            while (v80 != buf);
          }
        }
        goto LABEL_160;
      }
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v64 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      grl::IconRenderer::description((uint64_t *)v106, (grl::IconRenderer *)a1);
      v65 = v106;
      if (v107 < 0)
        v65 = (void **)v106[0];
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v65;
      _os_log_impl(&dword_19F029000, v64, OS_LOG_TYPE_ERROR, "Nullptr LayerRenderer found, invalid object. %s", (uint8_t *)__p, 0xCu);
      if (v107 < 0)
        operator delete(v106[0]);
    }
    goto LABEL_127;
  }
LABEL_160:
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v96, v97[0]);
  std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy((uint64_t)&v92, v93);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v88, v89);
  return a1;
}

uint64_t std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::find<grl::IconLayerMapKey>(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 32;
  v6 = a1 + 8;
  do
  {
    v7 = grl::IconLayerMapKey::operator()(v5, (__int16 *)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || grl::IconLayerMapKey::operator()(v5, a2, (__int16 *)(v6 + 32)))
    return v2;
  return v6;
}

void grl::codec::IconData::forEachTextLayer(uint64_t a1, grl::IconModifiers *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  unsigned int v28;
  uint64_t **v29;
  unsigned __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *__p;
  char v40;
  __int16 v41;

  if (*((_QWORD *)a2 + 14) && !*(_QWORD *)(a1 + 112))
  {
    grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)&v31, 0, 0, a2);
    v41 = 0;
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
    {
LABEL_74:
      std::__throw_bad_function_call[abi:nn180100]();
      std::map<unsigned short,grl::codec::PathLayerData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::codec::PathLayerData>,grl::Allocator>>::at(v29, v30);
      return;
    }
    (*(void (**)(uint64_t, __int16 *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v41, &v31);
    if (v40 < 0)
      operator delete(__p);
    if (v38 < 0)
      operator delete(v37);
    if (v36 < 0)
      operator delete(v35);
    if (v31)
    {
      v32 = v31;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v31, v33 - v31);
    }
  }
  v7 = *(uint64_t ***)(a1 + 88);
  v8 = (uint64_t **)(a1 + 96);
  if (v7 != (uint64_t **)(a1 + 96))
  {
    do
    {
      v9 = *((unsigned __int16 *)v7 + 16);
      if (*((_QWORD *)a2 + 14))
        v10 = 0;
      else
        v10 = *((_BYTE *)a2 + 36) == 0;
      if (v10 && *(_BYTE *)a2 == 0 && *((_BYTE *)a2 + 6) == 0)
      {
        v13 = *v8;
        if (!*((_BYTE *)a2 + 25))
        {
          if (v13)
          {
            v20 = v8;
            v21 = *v8;
            do
            {
              v22 = *((unsigned __int16 *)v21 + 16);
              v23 = v22 >= v9;
              if (v22 >= v9)
                v24 = (uint64_t **)v21;
              else
                v24 = (uint64_t **)(v21 + 1);
              if (v23)
                v20 = (uint64_t **)v21;
              v21 = *v24;
            }
            while (*v24);
            if (v20 != v8 && *((unsigned __int16 *)v20 + 16) <= v9)
            {
              while (1)
              {
                while (1)
                {
                  v28 = *((unsigned __int16 *)v13 + 16);
                  if (v28 <= v9)
                    break;
                  v13 = (uint64_t *)*v13;
                  if (!v13)
                    goto LABEL_73;
                }
                if (v28 >= v9)
                  break;
                v13 = (uint64_t *)v13[1];
                if (!v13)
LABEL_73:
                  abort();
              }
              grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)&v31, (const grl::codec::TextLayerData *)(v13 + 5));
              goto LABEL_49;
            }
          }
LABEL_48:
          grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)&v31);
          goto LABEL_49;
        }
      }
      else
      {
        v13 = *v8;
      }
      if (!v13)
        goto LABEL_48;
      v14 = v8;
      v15 = v13;
      do
      {
        v16 = *((unsigned __int16 *)v15 + 16);
        v17 = v16 >= v9;
        if (v16 >= v9)
          v18 = (uint64_t **)v15;
        else
          v18 = (uint64_t **)(v15 + 1);
        if (v17)
          v14 = (uint64_t **)v15;
        v15 = *v18;
      }
      while (*v18);
      if (v14 == v8 || *((unsigned __int16 *)v14 + 16) > v9)
        goto LABEL_48;
      v19 = std::map<unsigned short,grl::codec::PathLayerData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::codec::PathLayerData>,grl::Allocator>>::at((uint64_t **)v13, *((_WORD *)v7 + 16));
      grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)&v31, (const grl::codec::TextLayerData *)v19, v9, a2);
LABEL_49:
      v41 = v9;
      v25 = *(_QWORD *)(a3 + 24);
      if (!v25)
        goto LABEL_74;
      (*(void (**)(uint64_t, __int16 *, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v41, &v31);
      if (v40 < 0)
        operator delete(__p);
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
      if (v31)
      {
        v32 = v31;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v31, v33 - v31);
      }
      v26 = v7[1];
      if (v26)
      {
        do
        {
          v27 = (uint64_t **)v26;
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (uint64_t **)v7[2];
          v10 = *v27 == (uint64_t *)v7;
          v7 = v27;
        }
        while (!v10);
      }
      v7 = v27;
    }
    while (v27 != v8);
  }
}

uint64_t *std::map<unsigned short,grl::codec::PathLayerData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::codec::PathLayerData>,grl::Allocator>>::at(uint64_t **a1, unsigned __int16 a2)
{
  unsigned int v2;

  if (!a1)
LABEL_7:
    abort();
  while (1)
  {
    while (1)
    {
      v2 = *((unsigned __int16 *)a1 + 16);
      if (v2 <= a2)
        break;
      a1 = (uint64_t **)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return (uint64_t *)(a1 + 5);
    a1 = (uint64_t **)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

__n128 grl::ImageLayerRenderer::setLayerMetrics(grl::ImageLayerRenderer *this, const grl::LayerMetrics *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  if (*((_BYTE *)this + 168))
    (**((void (***)(char *))this + 22))((char *)this + 176);
  else
    *((_BYTE *)this + 168) = 1;
  *((_QWORD *)this + 22) = &off_1E42C2558;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 184) = v4;
  result = *(__n128 *)((char *)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 248) = v7;
  *(_OWORD *)((char *)this + 232) = v6;
  *(__n128 *)((char *)this + 216) = result;
  return result;
}

uint64_t std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<VKTrafficFeatureType,unsigned long>,std::__map_value_compare<VKTrafficFeatureType,std::__value_type<VKTrafficFeatureType,unsigned long>,std::less<VKTrafficFeatureType>,true>,geo::StdAllocator<std::__value_type<VKTrafficFeatureType,unsigned long>,mdm::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 48);
  }
  return result;
}

uint64_t grl::IconMetrics::IconMetrics(uint64_t a1, grl::IconRenderer *a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)(a1 + 80) = 0;
  v6 = a1 + 80;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = grl::Allocator::instance((grl::Allocator *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 72) = v6;
  if (*((_BYTE *)a2 + 257))
    grl::IconMetrics::setupStretchedIcon(a1, a2, a3);
  else
    grl::IconMetrics::setupBasicIcon(a1, (unsigned __int8 *)a2, a3);
  grl::IconMetrics::isValid((grl::IconMetrics *)a1, a2);
  grl::IconMetrics::scaleIcon((float32x2_t *)a1, a2);
  return a1;
}

double grl::codec::IconData::forEachImageLayer(grl::codec::IconData *this, grl::IconModifiers *a2, uint64_t a3, double result)
{
  char *v4;
  char *v5;
  unsigned __int16 v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  grl::codec::IconData *v15;
  unsigned int v16;
  const grl::IconModifiers *v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  unsigned __int16 v21;

  v4 = (char *)*((_QWORD *)this + 15);
  v5 = (char *)this + 128;
  if (v4 != (char *)this + 128)
  {
    while (1)
    {
      v9 = *((_WORD *)v4 + 16);
      v10 = grl::codec::IconData::imageLayer(this, a2, v9, (uint64_t)v19);
      v21 = v9;
      v11 = *(_QWORD *)(a3 + 24);
      if (!v11)
        break;
      (*(void (**)(uint64_t, unsigned __int16 *, _QWORD *, __n128))(*(_QWORD *)v11 + 48))(v11, &v21, v19, v10);
      if (v19[0])
      {
        v19[1] = v19[0];
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 40))(v20, v19[0], v19[2] - v19[0]);
      }
      v12 = (char *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v4 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
      if (v13 == v5)
        return result;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    *(_QWORD *)&result = grl::codec::IconData::imageLayer(v15, v17, v16, v18).n128_u64[0];
  }
  return result;
}

__n128 grl::codec::IconData::imageLayer@<Q0>(grl::codec::IconData *this@<X0>, const grl::IconModifiers *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned __int16 v5;
  uint64_t **v10;
  char *v11;
  char *v12;
  uint64_t **v13;
  unsigned int v14;
  BOOL v15;
  uint64_t ***v16;
  uint64_t *v17;
  __n128 result;
  char *v19;
  uint64_t **v20;
  unsigned int v21;
  BOOL v22;
  uint64_t ***v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;

  v5 = a3;
  if (*((float *)a2 + 2) != 1.0 || *((_BYTE *)a2 + 1) != 0 || *((_BYTE *)a2 + 25) != 0 || *((_BYTE *)a2 + 5) != 0)
  {
    v11 = (char *)this + 128;
    v10 = (uint64_t **)*((_QWORD *)this + 16);
LABEL_13:
    if (v10)
    {
      v12 = v11;
      v13 = v10;
      do
      {
        v14 = *((unsigned __int16 *)v13 + 16);
        v15 = v14 >= a3;
        if (v14 >= a3)
          v16 = (uint64_t ***)v13;
        else
          v16 = (uint64_t ***)(v13 + 1);
        if (v15)
          v12 = (char *)v13;
        v13 = *v16;
      }
      while (*v16);
      if (v12 != v11 && *((unsigned __int16 *)v12 + 16) <= a3)
      {
        v17 = std::map<unsigned short,grl::codec::PathLayerData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::codec::PathLayerData>,grl::Allocator>>::at(v10, a3);
        grl::codec::ImageLayerData::ImageLayerData((grl::codec::ImageLayerData *)a4, (const grl::codec::ImageLayerData *)v17, v5, a2);
        return result;
      }
    }
    goto LABEL_36;
  }
  v11 = (char *)this + 128;
  v10 = (uint64_t **)*((_QWORD *)this + 16);
  if (*((_QWORD *)a2 + 24))
    goto LABEL_13;
  if (!v10)
    goto LABEL_36;
  v19 = v11;
  v20 = v10;
  do
  {
    v21 = *((unsigned __int16 *)v20 + 16);
    v22 = v21 >= a3;
    if (v21 >= a3)
      v23 = (uint64_t ***)v20;
    else
      v23 = (uint64_t ***)(v20 + 1);
    if (v22)
      v19 = (char *)v20;
    v20 = *v23;
  }
  while (*v23);
  if (v19 == v11 || *((unsigned __int16 *)v19 + 16) > a3)
  {
LABEL_36:
    grl::codec::ImageLayerData::ImageLayerData((grl::codec::ImageLayerData *)a4);
    return result;
  }
  v24 = std::map<unsigned short,grl::codec::PathLayerData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::codec::PathLayerData>,grl::Allocator>>::at(v10, a3);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v25 = v24[3];
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = v25;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(a4, (_BYTE *)*v24, (_BYTE *)v24[1], v24[1] - *v24);
  *(_WORD *)(a4 + 32) = *((_WORD *)v24 + 16);
  *(_DWORD *)(a4 + 34) = *(_DWORD *)((char *)v24 + 34);
  v26 = *(_OWORD *)((char *)v24 + 38);
  *(_WORD *)(a4 + 54) = *((_WORD *)v24 + 27);
  *(_OWORD *)(a4 + 38) = v26;
  *(_DWORD *)(a4 + 56) = *((_DWORD *)v24 + 14);
  *(_DWORD *)(a4 + 60) = *((_DWORD *)v24 + 15);
  *(_DWORD *)(a4 + 64) = *((_DWORD *)v24 + 16);
  v27 = *((_DWORD *)v24 + 17);
  *(_BYTE *)(a4 + 72) = *((_BYTE *)v24 + 72);
  *(_DWORD *)(a4 + 68) = v27;
  *(_DWORD *)(a4 + 73) = *(_DWORD *)((char *)v24 + 73);
  v28 = *((_OWORD *)v24 + 5);
  v29 = *((_OWORD *)v24 + 6);
  *(_QWORD *)(a4 + 112) = v24[14];
  *(_OWORD *)(a4 + 80) = v28;
  *(_OWORD *)(a4 + 96) = v29;
  *(_DWORD *)(a4 + 120) = *((_DWORD *)v24 + 30);
  result = *(__n128 *)((char *)v24 + 124);
  *(_OWORD *)(a4 + 134) = *(_OWORD *)((char *)v24 + 134);
  *(__n128 *)(a4 + 124) = result;
  return result;
}

grl::codec::ImageLayerData *grl::codec::ImageLayerData::ImageLayerData(grl::codec::ImageLayerData *this, const grl::codec::ImageLayerData *a2, unsigned __int16 a3, const grl::IconModifiers *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v17;
  char v18;

  v17 = 515;
  v18 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v8 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v8;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 3, 1);
  v10 = 0;
  *(_QWORD *)this = v9;
  *((_QWORD *)this + 2) = v9 + 3;
  do
  {
    if (v9 + v10)
      *(_BYTE *)(v9 + v10) = *((_BYTE *)&v17 + v10);
    ++v10;
  }
  while (v10 != 3);
  *((_QWORD *)this + 1) = v9 + 3;
  *((_DWORD *)this + 30) = -16777216;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = -256;
  *((_BYTE *)this + 38) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 14) = -16777216;
  *((_DWORD *)this + 13) = 1119092736;
  *((_DWORD *)this + 15) = 1065353216;
  *((_DWORD *)this + 16) = -16777216;
  *((_DWORD *)this + 17) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_BYTE *)this + 76) = -1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 93) = 0;
  *((_BYTE *)this + 112) = 2;
  *((_DWORD *)this + 29) = 1065353216;
  *(_QWORD *)((char *)this + 140) = 0;
  *(_QWORD *)((char *)this + 129) = 0;
  *(_QWORD *)((char *)this + 124) = 0;
  *((_WORD *)this + 74) = 1;
  if (a2)
  {
    v11 = 0;
    *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
    do
    {
      *((_BYTE *)this + v11 + 34) = *((_BYTE *)a2 + v11 + 34);
      ++v11;
    }
    while (v11 != 4);
    v12 = 0;
    *((_BYTE *)this + 38) = *((_BYTE *)a2 + 38);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    do
    {
      *((_BYTE *)this + v12 + 56) = *((_BYTE *)a2 + v12 + 56);
      ++v12;
    }
    while (v12 != 4);
    v13 = 0;
    *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
    do
    {
      *((_BYTE *)this + v13 + 64) = *((_BYTE *)a2 + v13 + 64);
      ++v13;
    }
    while (v13 != 4);
    v14 = 0;
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
    do
    {
      *((_BYTE *)this + v14 + 73) = *((_BYTE *)a2 + v14 + 73);
      ++v14;
    }
    while (v14 != 4);
    v15 = 0;
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
    *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
    *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
    *((_BYTE *)this + 100) = *((_BYTE *)a2 + 100);
    *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
    *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
    *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
    *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
    do
    {
      *((_BYTE *)this + v15 + 120) = *((_BYTE *)a2 + v15 + 120);
      ++v15;
    }
    while (v15 != 4);
    *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
    *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
    *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
    *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
    *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
    *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
    *((_WORD *)this + 74) = *((_WORD *)a2 + 74);
  }
  grl::codec::ImageLayerData::applyModifiers((uint64_t)this, a3, a4);
  return this;
}

uint64_t grl::codec::ImageLayerData::applyModifiers(uint64_t this, unsigned __int16 a2, const grl::IconModifiers *a3)
{
  uint64_t v4;
  __int16 __src;
  char v7;
  uint64_t v8;

  v4 = this;
  if (*(_BYTE *)(this + 38) == 1 && *((_BYTE *)a3 + 25) != 0)
    *(_DWORD *)(this + 34) = *(_DWORD *)((char *)a3 + 26);
  if (*(_BYTE *)(this + 33))
  {
    __src = 770;
    v7 = 1;
    this = std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>(this, (char *)&__src, (char *)&v8, 3uLL);
  }
  if (*((_BYTE *)a3 + 5))
    *(_BYTE *)(v4 + 112) = 0;
  return this;
}

float32x2_t grl::codec::IconData::forEachPathLayer(uint64_t a1, grl::IconModifiers *this, uint64_t a3)
{
  unsigned __int16 v7;
  uint64_t *v8;
  uint64_t v9;
  float32x2_t result;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  _BOOL4 isPathDefault;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float32x2_t *v37;
  const grl::IconRenderer *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  _OWORD v58[2];
  __int16 v59;

  if (*((_QWORD *)this + 18) == *((_QWORD *)this + 19) || *((unsigned __int8 *)this + 24) > 1u)
  {
LABEL_10:
    v11 = *(_QWORD **)(a1 + 152);
    v12 = (_QWORD *)(a1 + 160);
    if (v11 == (_QWORD *)(a1 + 160))
      return result;
    while (1)
    {
      v13 = *((unsigned __int16 *)v11 + 16);
      isPathDefault = grl::IconModifiers::isPathDefault(this);
      v15 = (uint64_t *)*v12;
      if (isPathDefault)
      {
        if (v15)
        {
          v16 = v12;
          v17 = *v12;
          do
          {
            v18 = *(unsigned __int16 *)(v17 + 32);
            v19 = v18 >= v13;
            if (v18 >= v13)
              v20 = (uint64_t *)v17;
            else
              v20 = (uint64_t *)(v17 + 8);
            if (v19)
              v16 = (_QWORD *)v17;
            v17 = *v20;
          }
          while (*v20);
          if (v16 != v12 && *((unsigned __int16 *)v16 + 16) <= v13)
          {
            while (1)
            {
              while (1)
              {
                v21 = *((unsigned __int16 *)v15 + 16);
                if (v21 <= v13)
                  break;
                v15 = (uint64_t *)*v15;
                if (!v15)
                  goto LABEL_60;
              }
              if (v21 >= v13)
                break;
              v15 = (uint64_t *)v15[1];
              if (!v15)
                goto LABEL_60;
            }
            v39 = 0;
            v40 = 0;
            v32 = v15[8];
            v41 = 0;
            v42 = v32;
            std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)&v39, (_BYTE *)v15[5], (_BYTE *)v15[6], v15[6] - v15[5]);
            v43 = *((_WORD *)v15 + 36);
            v44 = *(_DWORD *)((char *)v15 + 74);
            v45 = *((_DWORD *)v15 + 20);
            v33 = *((_DWORD *)v15 + 27);
            v48 = *((_DWORD *)v15 + 26);
            v34 = *((_DWORD *)v15 + 21);
            v47 = *(_OWORD *)(v15 + 11);
            v46 = v34;
            v49 = v33;
            v50 = *((_DWORD *)v15 + 28);
            v35 = *((_DWORD *)v15 + 30);
            v51 = *((_DWORD *)v15 + 29);
            v52 = v35;
            v53 = *((_BYTE *)v15 + 124);
            v54 = *(_DWORD *)((char *)v15 + 125);
            v36 = *((_DWORD *)v15 + 36);
            v56 = *((_DWORD *)v15 + 35);
            v55 = *(uint64_t *)((char *)v15 + 132);
            v57 = v36;
            v58[0] = *(_OWORD *)((char *)v15 + 148);
            *(_QWORD *)((char *)v58 + 13) = *(uint64_t *)((char *)v15 + 161);
            goto LABEL_41;
          }
        }
      }
      else if (v15)
      {
        v22 = v12;
        v23 = *v12;
        do
        {
          v24 = *(unsigned __int16 *)(v23 + 32);
          v25 = v24 >= v13;
          if (v24 >= v13)
            v26 = (uint64_t *)v23;
          else
            v26 = (uint64_t *)(v23 + 8);
          if (v25)
            v22 = (_QWORD *)v23;
          v23 = *v26;
        }
        while (*v26);
        if (v22 != v12 && *((unsigned __int16 *)v22 + 16) <= v13)
        {
          while (1)
          {
            while (1)
            {
              v31 = *((unsigned __int16 *)v15 + 16);
              if (v31 <= v13)
                break;
              v15 = (uint64_t *)*v15;
              if (!v15)
                goto LABEL_60;
            }
            if (v31 >= v13)
              break;
            v15 = (uint64_t *)v15[1];
            if (!v15)
LABEL_60:
              abort();
          }
          grl::codec::PathLayerData::PathLayerData((grl::codec::PathLayerData *)&v39, (const grl::codec::PathLayerData *)(v15 + 5), v13, this);
          goto LABEL_41;
        }
      }
      grl::codec::PathLayerData::PathLayerData((grl::codec::PathLayerData *)&v39);
LABEL_41:
      v59 = v13;
      v27 = *(_QWORD *)(a3 + 24);
      if (!v27)
        goto LABEL_61;
      (*(void (**)(uint64_t, __int16 *, uint64_t *))(*(_QWORD *)v27 + 48))(v27, &v59, &v39);
      if (v39)
      {
        v40 = v39;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 40))(v42, v39, v41 - v39);
      }
      v28 = (_QWORD *)v11[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v11[2];
          v30 = *v29 == (_QWORD)v11;
          v11 = v29;
        }
        while (!v30);
      }
      v11 = v29;
      if (v29 == v12)
        return result;
    }
  }
  v7 = 0;
  while (1)
  {
    ++v7;
    v8 = std::map<unsigned short,grl::codec::PathLayerData,std::less<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,grl::codec::PathLayerData>,grl::Allocator>>::at(*(uint64_t ***)(a1 + 160), 0);
    grl::codec::PathLayerData::PathLayerData((grl::codec::PathLayerData *)&v39, (const grl::codec::PathLayerData *)v8, v7, this);
    v59 = v7;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      break;
    (*(void (**)(uint64_t, __int16 *, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v59, &v39);
    if (v39)
    {
      v40 = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 40))(v42, v39, v41 - v39);
    }
    if ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 2 <= (unint64_t)v7)
      goto LABEL_10;
  }
LABEL_61:
  std::__throw_bad_function_call[abi:nn180100]();
  return grl::IconMetrics::scaleIcon(v37, v38);
}

float32x2_t grl::IconMetrics::scaleIcon(float32x2_t *this, const grl::IconRenderer *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t result;

  if (*((_BYTE *)a2 + 72))
  {
    this[1] = vmul_n_f32(this[1], COERCE_FLOAT(*(_QWORD *)((char *)a2 + 108)));
    v2 = this[4];
    this[3] = vmul_n_f32(this[3], COERCE_FLOAT(*(_QWORD *)((char *)a2 + 108)));
    this[4] = vmul_n_f32(v2, COERCE_FLOAT(*(_QWORD *)((char *)a2 + 108)));
    v3 = this[6];
    this[5] = vmul_n_f32(this[5], COERCE_FLOAT(*(_QWORD *)((char *)a2 + 108)));
    this[6] = vmul_n_f32(v3, COERCE_FLOAT(*(_QWORD *)((char *)a2 + 108)));
    result = vmul_n_f32(this[7], COERCE_FLOAT(*(_QWORD *)((char *)a2 + 108)));
    this[7] = result;
  }
  return result;
}

uint64_t grl::IconMetrics::isValid(grl::IconMetrics *this, const grl::IconRenderer *a2)
{
  int v4;
  _BOOL4 v5;
  NSObject *v6;
  grl::IconMetrics *v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  grl::IconMetrics *v12;
  grl::IconMetrics *v13;
  BOOL v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 257))
  {
    v4 = grl::IconRenderer::layerCount((uint64_t)a2, 3);
    v5 = v4 == 1;
    if (v4 != 1)
    {
      if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
      v6 = GEOGetGeoResourceLibMetricsLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19F029000, v6, OS_LOG_TYPE_ERROR, "Stretched icons should never have more than one TextLayer.", buf, 2u);
      }
    }
    if (*((_BYTE *)a2 + 257))
    {
      v7 = (grl::IconMetrics *)*((_QWORD *)this + 9);
      if (v7 != (grl::IconMetrics *)((char *)this + 80))
      {
        v8 = 0;
        do
        {
          if (*((_WORD *)v7 + 16) == 2)
          {
            if (!*((_QWORD *)v7 + 5))
            {
              if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
                dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
              v9 = GEOGetGeoResourceLibMetricsLog::log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v22 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                v23 = 2080;
                v24 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
                v25 = 1024;
                v26 = 551;
                _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "A nullptr for LayerMetrics for an ImageLayer has been found.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
              }
              v5 = 0;
            }
            v10 = *((_QWORD *)v7 + 5);
            if (v8)
            {
              if (v20 != *(_QWORD *)(v10 + 44))
              {
                if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
                v11 = GEOGetGeoResourceLibMetricsLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v22 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                  v23 = 2080;
                  v24 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
                  v25 = 1024;
                  v26 = 556;
                  _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "Image layers are different sizes after being stretched, unsupported behavior.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                }
                v5 = 0;
              }
            }
            else
            {
              v20 = *(_QWORD *)(v10 + 44);
              v8 = 1;
            }
          }
          v12 = (grl::IconMetrics *)*((_QWORD *)v7 + 1);
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = *(grl::IconMetrics **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (grl::IconMetrics *)*((_QWORD *)v7 + 2);
              v14 = *(_QWORD *)v13 == (_QWORD)v7;
              v7 = v13;
            }
            while (!v14);
          }
          v7 = v13;
        }
        while (v13 != (grl::IconMetrics *)((char *)this + 80));
      }
    }
  }
  else
  {
    v5 = 1;
  }
  if (*((float *)this + 8) < 16384.0 && *((float *)this + 9) < 16384.0)
  {
    v16 = 1;
  }
  else
  {
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
    v15 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v22 = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      v23 = 2080;
      v24 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/IconMetrics.cpp";
      v25 = 1024;
      v26 = 566;
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "Unusally large size icon, if this is intended please adjust maxIconSizeDimension.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
    v16 = 0;
  }
  if (*((float *)this + 8) > 0.0 && *((float *)this + 9) > 0.0)
  {
    v18 = 1;
  }
  else
  {
    if (GEOGetGeoResourceLibMetricsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMetricsLog::onceToken, &__block_literal_global_16_0);
    v17 = GEOGetGeoResourceLibMetricsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMetricsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "An icon with size of 0 or less has been generated.", buf, 2u);
    }
    v18 = 0;
  }
  return v16 & v18 & v5;
}

_BYTE *geo::optional<std::string>::optional(_BYTE *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = 0;
  v3 = (std::string *)(a1 + 8);
  if (*(_BYTE *)a2)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 8);
      v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
    }
    *a1 = 1;
  }
  return a1;
}

double grl::codec::IconData::infoLayer@<D0>(grl::codec::IconData *this@<X0>, IconModifiers *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  double result;

  if (a2->_scale != 1.0 || a2->_isGlyphOnly)
  {
    v4 = *((unsigned __int8 *)this + 184);
    goto LABEL_7;
  }
  v4 = *((unsigned __int8 *)this + 184);
  if (a2->_pathScale._value.data[1])
  {
LABEL_7:
    if (v4)
    {
      *(float *)&result = grl::codec::InfoLayerData::InfoLayerData((grl::codec::InfoLayerData *)a3, (grl::codec::IconData *)((char *)this + 188), 0, a2);
      return result;
    }
    return grl::codec::InfoLayerData::InfoLayerData((grl::codec::InfoLayerData *)a3);
  }
  if (*((_BYTE *)this + 184))
  {
    *(_QWORD *)a3 = *(_QWORD *)((char *)this + 188);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)((char *)this + 196);
    *(_BYTE *)(a3 + 16) = *((_BYTE *)this + 204);
    result = *(double *)((char *)this + 205);
    *(double *)(a3 + 17) = result;
    *(_DWORD *)(a3 + 25) = *(_DWORD *)((char *)this + 213);
    *(_DWORD *)(a3 + 32) = *((_DWORD *)this + 55);
    *(_WORD *)(a3 + 36) = *((_WORD *)this + 112);
    return result;
  }
  return grl::codec::InfoLayerData::InfoLayerData((grl::codec::InfoLayerData *)a3);
}

grl::codec::TextLayerData *grl::codec::TextLayerData::TextLayerData(grl::codec::TextLayerData *this, const grl::codec::TextLayerData *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v4;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)this, *(_BYTE **)a2, *((_BYTE **)a2 + 1), *((_QWORD *)a2 + 1) - *(_QWORD *)a2);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  v5 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  v7 = *((_QWORD *)a2 + 9);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_QWORD *)this + 9) = v7;
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  v8 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  v10 = *((_QWORD *)a2 + 16);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_QWORD *)this + 16) = v10;
  v11 = (std::string *)((char *)this + 144);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = *((_QWORD *)a2 + 21);
  *((_WORD *)this + 88) = *((_WORD *)a2 + 88);
  *((_QWORD *)this + 21) = v13;
  return this;
}

float grl::codec::InfoLayerData::InfoLayerData(grl::codec::InfoLayerData *this, const grl::codec::InfoLayerData *a2, unsigned __int16 a3, const IconModifiers *a4)
{
  float result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t j;
  uint64_t k;

  *(_QWORD *)this = 0xFFFFFFFF00000000;
  *((_QWORD *)this + 1) = 0xFF000000FF000000;
  *((_DWORD *)this + 4) = 0;
  LODWORD(result) = 255;
  *(_QWORD *)((char *)this + 20) = 0xFF000000FFLL;
  *((_BYTE *)this + 28) = -1;
  *((_DWORD *)this + 8) = 1065353216;
  *((_WORD *)this + 18) = 0;
  if (a2)
  {
    v5 = 0;
    *(_QWORD *)this = *(_QWORD *)a2;
    do
    {
      *((_BYTE *)this + v5 + 8) = *((_BYTE *)a2 + v5 + 8);
      ++v5;
    }
    while (v5 != 4);
    for (i = 0; i != 4; ++i)
      *((_BYTE *)this + i + 12) = *((_BYTE *)a2 + i + 12);
    v7 = 0;
    *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
    do
    {
      *((_BYTE *)this + v7 + 17) = *((_BYTE *)a2 + v7 + 17);
      ++v7;
    }
    while (v7 != 4);
    for (j = 0; j != 4; ++j)
      *((_BYTE *)this + j + 21) = *((_BYTE *)a2 + j + 21);
    for (k = 0; k != 4; ++k)
      *((_BYTE *)this + k + 25) = *((_BYTE *)a2 + k + 25);
    result = *((float *)a2 + 8);
    *((float *)this + 8) = result;
    *((_WORD *)this + 18) = *((_WORD *)a2 + 18);
  }
  return result;
}

uint64_t std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::operator()(_QWORD *a1, unsigned __int16 *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  _BYTE v37[21];
  __int16 v38[2];
  char v39;
  char v40;
  __int16 *v41;

  v5 = *a2;
  v18 = 0;
  v19 = 0;
  v6 = *(_QWORD *)(a3 + 24);
  v20 = 0;
  v21 = v6;
  result = std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)&v18, *(_BYTE **)a3, *(_BYTE **)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  v22 = *(_WORD *)(a3 + 32);
  v23 = *(_DWORD *)(a3 + 34);
  v24 = *(_DWORD *)(a3 + 40);
  v25 = *(_DWORD *)(a3 + 44);
  v26 = *(_OWORD *)(a3 + 48);
  v8 = *(_DWORD *)(a3 + 68);
  v27 = *(_DWORD *)(a3 + 64);
  v28 = v8;
  v29 = *(_DWORD *)(a3 + 72);
  v32 = *(_BYTE *)(a3 + 84);
  v9 = *(_DWORD *)(a3 + 80);
  v30 = *(_DWORD *)(a3 + 76);
  v31 = v9;
  v33 = *(_DWORD *)(a3 + 85);
  v34 = *(_QWORD *)(a3 + 92);
  v10 = *(_DWORD *)(a3 + 104);
  v35 = *(_DWORD *)(a3 + 100);
  v36 = v10;
  *(_QWORD *)&v37[13] = *(_QWORD *)(a3 + 121);
  *(_OWORD *)v37 = *(_OWORD *)(a3 + 108);
  if (*(_QWORD *)(a1[1] + 176) && v37[20])
  {
    v11 = a1[3];
    if (*(_BYTE *)(a1[2] + 5))
    {
      *((float *)&v26 + 1) = ceilf(*(float *)(v11 + 260)) * 60.0;
      DWORD2(v26) = DWORD1(v26);
    }
    v12 = (_BYTE *)operator new();
    v13 = grl::ShapeLayerRenderer::ShapeLayerRenderer((uint64_t)v12, (uint64_t)&v18);
    v14 = a1[2];
    v15 = *(unsigned __int8 *)(v14 + 24);
    *(_BYTE *)(v13 + 296) = v15;
    if (*(_BYTE *)(v14 + 2))
    {
      v12[10] = 0;
      *(_BYTE *)(v11 + 258) = 1;
    }
    if (v5 != 1 && v15 == 4)
      v12[10] = 0;
    if (v5 && *(_BYTE *)(v11 + 259))
      v12[296] = 1;
    v16 = v12[136];
    v38[0] = 1;
    v38[1] = v5;
    v39 = 1;
    v40 = v16;
    v41 = v38;
    v17 = std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::__emplace_unique_key_args<grl::IconLayerMapKey,std::piecewise_construct_t const&,std::tuple<grl::IconLayerMapKey&&>,std::tuple<>>((uint64_t **)(v11 + 32), v38, (_DWORD **)&v41);
    result = v17[5];
    v17[5] = (uint64_t)v12;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (v18)
  {
    v19 = v18;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(v21, v18, v20 - v18);
  }
  return result;
}

uint64_t grl::ShapeLayerRenderer::ShapeLayerRenderer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;

  *(_WORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 10) = 1;
  *(_QWORD *)a1 = &off_1E42C26F0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>(a1 + 16, *(_BYTE **)a2, *(_BYTE **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 32);
  *(_DWORD *)(a1 + 50) = *(_DWORD *)(a2 + 34);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 44);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 76);
  v6 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 96) = v6;
  *(_DWORD *)(a1 + 101) = *(_DWORD *)(a2 + 85);
  v7 = *(_QWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 108) = v7;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 137) = *(_QWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 124) = v8;
  *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

BOOL grl::IconModifiers::isPathDefault(grl::IconModifiers *this)
{
  return !*((_BYTE *)this + 24)
      && *((_QWORD *)this + 18) == *((_QWORD *)this + 19)
      && !*((_BYTE *)this + 25)
      && !*(_BYTE *)this
      && !*((_BYTE *)this + 2)
      && !*((_BYTE *)this + 16)
      && !*((_BYTE *)this + 44)
      && !*((_BYTE *)this + 5)
      && !*((_BYTE *)this + 7)
      && *((_BYTE *)this + 30) == 0;
}

grl::codec::PathLayerData *grl::codec::PathLayerData::PathLayerData(grl::codec::PathLayerData *this, const grl::codec::PathLayerData *a2, unsigned int a3, const grl::IconModifiers *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v18;
  char v19;

  v18 = 515;
  v19 = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v8 = grl::Allocator::instance(this);
  *((_QWORD *)this + 3) = v8;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 3, 1);
  v10 = 0;
  *(_QWORD *)this = v9;
  *((_QWORD *)this + 2) = v9 + 3;
  do
  {
    if (v9 + v10)
      *(_BYTE *)(v9 + v10) = *((_BYTE *)&v18 + v10);
    ++v10;
  }
  while (v10 != 3);
  *((_QWORD *)this + 1) = v9 + 3;
  *(_DWORD *)((char *)this + 34) = -1;
  *((_WORD *)this + 16) = 0;
  *((_DWORD *)this + 10) = 0;
  *(_DWORD *)((char *)this + 43) = 0;
  *(_WORD *)((char *)this + 47) = 255;
  *(_QWORD *)((char *)this + 52) = 0;
  *((_BYTE *)this + 60) = 0;
  *((_DWORD *)this + 16) = 1119092736;
  *((_DWORD *)this + 17) = -16777216;
  *((_DWORD *)this + 18) = 1065353216;
  *((_DWORD *)this + 19) = -16777216;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 21) = 1;
  *((_BYTE *)this + 88) = -1;
  *((_DWORD *)this + 23) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_DWORD *)this + 26) = -16777216;
  *((_DWORD *)this + 25) = 1065353216;
  *((_DWORD *)this + 31) = 0;
  *(_QWORD *)((char *)this + 113) = 0;
  *(_QWORD *)((char *)this + 108) = 0;
  *((_BYTE *)this + 128) = 1;
  if (a2)
  {
    v11 = 0;
    *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
    do
    {
      *((_BYTE *)this + v11 + 34) = *((_BYTE *)a2 + v11 + 34);
      ++v11;
    }
    while (v11 != 4);
    v12 = 0;
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    do
    {
      *((_BYTE *)this + v12 + 44) = *((_BYTE *)a2 + v12 + 44);
      ++v12;
    }
    while (v12 != 4);
    v13 = 0;
    *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    do
    {
      *((_BYTE *)this + v13 + 68) = *((_BYTE *)a2 + v13 + 68);
      ++v13;
    }
    while (v13 != 4);
    v14 = 0;
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    do
    {
      *((_BYTE *)this + v14 + 76) = *((_BYTE *)a2 + v14 + 76);
      ++v14;
    }
    while (v14 != 4);
    v15 = 0;
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
    do
    {
      *((_BYTE *)this + v15 + 85) = *((_BYTE *)a2 + v15 + 85);
      ++v15;
    }
    while (v15 != 4);
    v16 = 0;
    *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
    *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
    *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
    do
    {
      *((_BYTE *)this + v16 + 104) = *((_BYTE *)a2 + v16 + 104);
      ++v16;
    }
    while (v16 != 4);
    *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
    *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
    *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
    *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
    *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
    *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  }
  grl::codec::PathLayerData::applyModifiers(this, a3, a4);
  return this;
}

_QWORD *grl::codec::PathLayerData::applyModifiers(grl::codec::PathLayerData *this, unsigned int a2, const grl::IconModifiers *a3)
{
  _QWORD *result;
  uint64_t (*v8)(void);
  uint64_t v9;
  char *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char __src[24];
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 48) == 1 && *((_BYTE *)a3 + 25) != 0)
    *((_DWORD *)this + 11) = *(_DWORD *)((char *)a3 + 26);
  if (*((_BYTE *)this + 33))
  {
    *(_WORD *)__src = 770;
    __src[2] = 1;
    std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>((uint64_t)this, __src, &__src[3], 3uLL);
  }
  if (*((_BYTE *)a3 + 44))
    *((_DWORD *)this + 31) = *((_DWORD *)a3 + 12);
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::__value_func[abi:nn180100]((uint64_t)__src, (uint64_t)a3 + 168);
  result = v19;
  if (v19 == __src)
  {
    v8 = *(uint64_t (**)(void))(*(_QWORD *)__src + 32);
  }
  else
  {
    if (!v19)
      goto LABEL_15;
    v8 = *(uint64_t (**)(void))(*(_QWORD *)v19 + 40);
  }
  result = (_QWORD *)v8();
  *((_DWORD *)this + 11) = *(_DWORD *)((char *)this + 85);
LABEL_15:
  if (*((_BYTE *)a3 + 24))
  {
    *(_WORD *)__src = 258;
    result = (_QWORD *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>((uint64_t)this, __src, &__src[2], 2uLL);
    if (*((_BYTE *)a3 + 24) == 5)
    {
      __src[0] = 3;
      result = (_QWORD *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>((uint64_t)this, __src, &__src[1], 1uLL);
    }
    *((_BYTE *)this + 96) = 1;
  }
  if (*((_BYTE *)a3 + 30))
  {
    v9 = 0;
    v10 = (char *)a3 + 31;
    do
    {
      *((_BYTE *)this + v9 + 44) = v10[v9];
      ++v9;
    }
    while (v9 != 4);
    for (i = 0; i != 4; ++i)
      *((_BYTE *)this + i + 85) = v10[i];
  }
  if (*((_BYTE *)a3 + 16))
    *((_DWORD *)this + 25) = *((_DWORD *)a3 + 5);
  if (*((_BYTE *)a3 + 7))
  {
    *((_BYTE *)this + 120) = 4;
    *((_DWORD *)this + 31) = 1083623604;
    *(_DWORD *)((char *)this + 85) = *((_DWORD *)this + 11);
  }
  v13 = *((_QWORD *)a3 + 18);
  v12 = *((_QWORD *)a3 + 19);
  if (v13 != v12 && *((unsigned __int8 *)a3 + 24) <= 1u)
  {
    v15 = (unsigned __int16)(a2 - 1);
    if (v15 < (v12 - v13) >> 2)
    {
      v16 = 0;
      v17 = v13 + 4 * v15;
      do
      {
        *((_BYTE *)this + v16 + 44) = *(_BYTE *)(v17 + v16);
        ++v16;
      }
      while (v16 != 4);
      *((_BYTE *)this + 60) = 1;
      *((_BYTE *)this + 96) = 0;
      *((float *)this + 25) = powf(0.95, (float)a2);
    }
    *(_WORD *)__src = 258;
    return (_QWORD *)std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__assign_with_size[abi:nn180100]<grl::LayerStyle const*,grl::LayerStyle const*>((uint64_t)this, __src, &__src[2], 2uLL);
  }
  return result;
}

__n128 grl::ShapeLayerRenderer::setLayerMetrics(grl::ShapeLayerRenderer *this, const grl::LayerMetrics *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  if (*((_BYTE *)this + 152))
    (**((void (***)(char *))this + 20))((char *)this + 160);
  else
    *((_BYTE *)this + 152) = 1;
  *((_QWORD *)this + 20) = &off_1E42C2558;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 168) = v4;
  v5 = *(_OWORD *)((char *)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 232) = v7;
  *(_OWORD *)((char *)this + 216) = v6;
  *(_OWORD *)((char *)this + 200) = v5;
  *((_QWORD *)this + 20) = &off_1E42C25A8;
  *((_BYTE *)this + 252) = 0;
  if (*((_BYTE *)a2 + 92))
  {
    *((_BYTE *)this + 253) = *((_BYTE *)a2 + 93);
    *((_BYTE *)this + 252) = 1;
  }
  result = *((__n128 *)a2 + 6);
  v9 = *((_OWORD *)a2 + 7);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 32);
  *((__n128 *)this + 16) = result;
  *((_OWORD *)this + 17) = v9;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (!v17)
  {
    if (v6 >= v15)
      return v7;
    return v2;
  }
  if (v17 < 0)
    return v2;
  return v7;
}

void std::__function::__func<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0,std::allocator<grl::codec::IconData::requiresFonts(std::set<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>> &,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::TextLayerData const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  std::string __p;

  v5 = *(uint64_t ***)(a1 + 8);
  if (*(char *)(a3 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  else
    __p = *(std::string *)(a3 + 40);
  std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_unique_key_args<std::string,std::string>(v5, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = *(uint64_t ***)(a1 + 8);
  if (*(char *)(a3 + 111) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 88), *(_QWORD *)(a3 + 96));
  else
    __p = *(std::string *)(a3 + 88);
  std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_unique_key_args<std::string,std::string>(v6, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t *std::__tree<std::string,std::less<std::string>,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  const void **v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t)a1[1];
  if (!v5)
  {
    v8 = (uint64_t *)(a1 + 1);
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 56, 8);
    v12 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)a3;
    *(_QWORD *)(v11 + 48) = v12;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v8;
    *v6 = v11;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v14 = (uint64_t *)*v6;
    }
    else
    {
      v14 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t *)v5;
      v9 = (const void **)(v5 + 32);
      if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 3), a2, (const void **)(v5 + 32)))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = (uint64_t *)std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 3), v9, a2);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 24;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:nn180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:nn180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

__n128 grl::TextLayerRenderer::setLayerMetrics(grl::TextLayerRenderer *this, const grl::LayerMetrics *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  if (*((_BYTE *)this + 200))
    (**((void (***)(char *))this + 26))((char *)this + 208);
  else
    *((_BYTE *)this + 200) = 1;
  *((_QWORD *)this + 26) = &off_1E42C2558;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 216) = v4;
  result = *(__n128 *)((char *)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 56);
  v7 = *(_OWORD *)((char *)a2 + 72);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 264) = v6;
  *(_OWORD *)((char *)this + 280) = v7;
  *(__n128 *)((char *)this + 248) = result;
  *((_QWORD *)this + 26) = &off_1E42C2620;
  *(_QWORD *)((char *)this + 300) = *(_QWORD *)((char *)a2 + 92);
  return result;
}

_QWORD *md::World::updateForConfiguration(_QWORD *this, int8x8_t *a2)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int8x8_t v75;
  uint8x8_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD v90[3];
  _QWORD *v91;
  _QWORD v92[3];
  _QWORD *v93;
  _QWORD v94[3];
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  _QWORD v98[3];
  _QWORD *v99;
  _QWORD v100[3];
  _QWORD *v101;
  _QWORD v102[3];
  _QWORD *v103;
  _QWORD v104[3];
  _QWORD *v105;
  _QWORD v106[3];
  _QWORD *v107;
  _QWORD v108[3];
  _QWORD *v109;
  uint64_t v110;

  v3 = this;
  v110 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (!*(_QWORD *)&v4)
    goto LABEL_21;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v4 <= 0x20A1ED17D78F322BuLL)
      v6 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x20A1ED17D78F322BLL;
  }
  v7 = *(_QWORD **)(*(_QWORD *)&a2[1] + 8 * v6);
  if (!v7 || (v8 = (_QWORD *)*v7) == 0)
  {
LABEL_21:
    v12 = 0;
    goto LABEL_22;
  }
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x20A1ED17D78F322BLL)
      {
        if (v8[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_209;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_21;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x20A1ED17D78F322BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_21;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_21;
  }
  if (v8[2] != 0x20A1ED17D78F322BLL)
    goto LABEL_11;
LABEL_209:
  v12 = v8[5];
LABEL_22:
  v13 = 0;
  while (2)
  {
    v15 = (unsigned __int16 *)v3[4];
    v16 = (unsigned __int16 *)v3[5];
    if (v15 != v16)
    {
      while (*v15 != word_19FFB8A58[v13])
      {
        v15 += 8;
        if (v15 == v16)
          goto LABEL_25;
      }
    }
    if (v15 != v16)
    {
      v17 = *((_QWORD *)v15 + 1);
      if (v17)
      {
        v18 = *(unsigned __int8 *)(v12 + 216);
        v106[0] = &off_1E42D8AF8;
        v106[1] = v12;
        v106[2] = v18;
        v107 = v106;
        v109 = v108;
        std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v106, (uint64_t)v108);
        std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v17 + 776));
        v19 = v109;
        if (v109 == v108)
        {
          v19 = v108;
          v20 = 4;
LABEL_36:
          (*(void (**)(void))(*v19 + 8 * v20))();
        }
        else if (v109)
        {
          v20 = 5;
          goto LABEL_36;
        }
        this = v107;
        if (v107 == v106)
        {
          this = v106;
          v14 = 4;
          goto LABEL_24;
        }
        if (v107)
        {
          v14 = 5;
LABEL_24:
          this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v14))();
        }
      }
    }
LABEL_25:
    if (++v13 != 15)
      continue;
    break;
  }
  v21 = v3[4];
  v22 = v3[5];
  if (v21 != v22)
  {
    while (*(_WORD *)v21 != 16)
    {
      v21 += 16;
      if (v21 == v22)
        goto LABEL_56;
    }
  }
  if (v21 != v22)
  {
    v23 = *(_QWORD *)(v21 + 8);
    if (v23)
    {
      v24 = *(unsigned __int8 *)(v12 + 216);
      v104[0] = &off_1E42D8AF8;
      v104[1] = v12;
      v104[2] = v24;
      v105 = v104;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v104, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v23 + 808));
      v25 = v109;
      if (v109 == v108)
      {
        v26 = 4;
        v25 = v108;
LABEL_50:
        (*(void (**)(void))(*v25 + 8 * v26))();
      }
      else if (v109)
      {
        v26 = 5;
        goto LABEL_50;
      }
      this = v105;
      if (v105 == v104)
      {
        v27 = 4;
        this = v104;
LABEL_55:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v27))();
      }
      else if (v105)
      {
        v27 = 5;
        goto LABEL_55;
      }
    }
  }
LABEL_56:
  v28 = v3[4];
  v29 = v3[5];
  if (v28 != v29)
  {
    while (*(_WORD *)v28 != 11)
    {
      v28 += 16;
      if (v28 == v29)
        goto LABEL_72;
    }
  }
  if (v28 != v29)
  {
    v30 = *(_QWORD *)(v28 + 8);
    if (v30)
    {
      v31 = *(unsigned __int8 *)(v12 + 216);
      v102[0] = &off_1E42D8AF8;
      v102[1] = v12;
      v102[2] = v31;
      v103 = v102;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v102, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v30 + 848));
      v32 = v109;
      if (v109 == v108)
      {
        v33 = 4;
        v32 = v108;
LABEL_66:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      else if (v109)
      {
        v33 = 5;
        goto LABEL_66;
      }
      this = v103;
      if (v103 == v102)
      {
        v34 = 4;
        this = v102;
LABEL_71:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v34))();
      }
      else if (v103)
      {
        v34 = 5;
        goto LABEL_71;
      }
    }
  }
LABEL_72:
  v35 = v3[4];
  v36 = v3[5];
  if (v35 != v36)
  {
    while (*(_WORD *)v35 != 12)
    {
      v35 += 16;
      if (v35 == v36)
        goto LABEL_88;
    }
  }
  if (v35 != v36)
  {
    v37 = *(_QWORD *)(v35 + 8);
    if (v37)
    {
      v38 = *(unsigned __int8 *)(v12 + 216);
      v100[0] = &off_1E42D8AF8;
      v100[1] = v12;
      v100[2] = v38;
      v101 = v100;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v100, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v37 + 848));
      v39 = v109;
      if (v109 == v108)
      {
        v40 = 4;
        v39 = v108;
LABEL_82:
        (*(void (**)(void))(*v39 + 8 * v40))();
      }
      else if (v109)
      {
        v40 = 5;
        goto LABEL_82;
      }
      this = v101;
      if (v101 == v100)
      {
        v41 = 4;
        this = v100;
LABEL_87:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v41))();
      }
      else if (v101)
      {
        v41 = 5;
        goto LABEL_87;
      }
    }
  }
LABEL_88:
  v42 = v3[4];
  v43 = v3[5];
  if (v42 != v43)
  {
    while (*(_WORD *)v42 != 71)
    {
      v42 += 16;
      if (v42 == v43)
        goto LABEL_104;
    }
  }
  if (v42 != v43)
  {
    v44 = *(_QWORD *)(v42 + 8);
    if (v44)
    {
      v45 = *(unsigned __int8 *)(v12 + 216);
      v98[0] = &off_1E42D8AF8;
      v98[1] = v12;
      v98[2] = v45;
      v99 = v98;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v98, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v44 + 848));
      v46 = v109;
      if (v109 == v108)
      {
        v47 = 4;
        v46 = v108;
LABEL_98:
        (*(void (**)(void))(*v46 + 8 * v47))();
      }
      else if (v109)
      {
        v47 = 5;
        goto LABEL_98;
      }
      this = v99;
      if (v99 == v98)
      {
        v48 = 4;
        this = v98;
LABEL_103:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v48))();
      }
      else if (v99)
      {
        v48 = 5;
        goto LABEL_103;
      }
    }
  }
LABEL_104:
  v49 = v3[4];
  v50 = v3[5];
  if (v49 != v50)
  {
    while (*(_WORD *)v49 != 72)
    {
      v49 += 16;
      if (v49 == v50)
        goto LABEL_120;
    }
  }
  if (v49 != v50)
  {
    v51 = *(_QWORD *)(v49 + 8);
    if (v51)
    {
      v52 = *(unsigned __int8 *)(v12 + 216);
      v96[0] = &off_1E42D8AF8;
      v96[1] = v12;
      v96[2] = v52;
      v97 = v96;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v96, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v51 + 848));
      v53 = v109;
      if (v109 == v108)
      {
        v54 = 4;
        v53 = v108;
LABEL_114:
        (*(void (**)(void))(*v53 + 8 * v54))();
      }
      else if (v109)
      {
        v54 = 5;
        goto LABEL_114;
      }
      this = v97;
      if (v97 == v96)
      {
        v55 = 4;
        this = v96;
LABEL_119:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v55))();
      }
      else if (v97)
      {
        v55 = 5;
        goto LABEL_119;
      }
    }
  }
LABEL_120:
  v56 = v3[4];
  v57 = v3[5];
  if (v56 != v57)
  {
    while (*(_WORD *)v56 != 81)
    {
      v56 += 16;
      if (v56 == v57)
        goto LABEL_136;
    }
  }
  if (v56 != v57)
  {
    v58 = *(_QWORD *)(v56 + 8);
    if (v58)
    {
      v59 = *(unsigned __int8 *)(v12 + 216);
      v94[0] = &off_1E42D8AF8;
      v94[1] = v12;
      v94[2] = v59;
      v95 = v94;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v94, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v58 + 848));
      v60 = v109;
      if (v109 == v108)
      {
        v61 = 4;
        v60 = v108;
LABEL_130:
        (*(void (**)(void))(*v60 + 8 * v61))();
      }
      else if (v109)
      {
        v61 = 5;
        goto LABEL_130;
      }
      this = v95;
      if (v95 == v94)
      {
        v62 = 4;
        this = v94;
LABEL_135:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v62))();
      }
      else if (v95)
      {
        v62 = 5;
        goto LABEL_135;
      }
    }
  }
LABEL_136:
  v63 = v3[4];
  v64 = v3[5];
  if (v63 != v64)
  {
    while (*(_WORD *)v63 != 37)
    {
      v63 += 16;
      if (v63 == v64)
        goto LABEL_152;
    }
  }
  if (v63 != v64)
  {
    v65 = *(_QWORD *)(v63 + 8);
    if (v65)
    {
      v92[0] = &off_1E42D8AF8;
      v92[1] = v12;
      v92[2] = 2;
      v93 = v92;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v92, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v65 + 616));
      v66 = v109;
      if (v109 == v108)
      {
        v67 = 4;
        v66 = v108;
LABEL_146:
        (*(void (**)(void))(*v66 + 8 * v67))();
      }
      else if (v109)
      {
        v67 = 5;
        goto LABEL_146;
      }
      this = v93;
      if (v93 == v92)
      {
        v68 = 4;
        this = v92;
LABEL_151:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v68))();
      }
      else if (v93)
      {
        v68 = 5;
        goto LABEL_151;
      }
    }
  }
LABEL_152:
  v69 = v3[4];
  v70 = v3[5];
  if (v69 != v70)
  {
    while (*(_WORD *)v69 != 38)
    {
      v69 += 16;
      if (v69 == v70)
        goto LABEL_168;
    }
  }
  if (v69 != v70)
  {
    v71 = *(_QWORD *)(v69 + 8);
    if (v71)
    {
      v90[0] = &off_1E42D8AF8;
      v90[1] = v12;
      v90[2] = 2;
      v91 = v90;
      v109 = v108;
      std::__function::__func<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0,std::allocator<md::LabelsLogic::labelManagerSource(gdc::WorldType)::$_0>,std::shared_ptr<md::LabelManager> ()(void)>::__clone((uint64_t)v90, (uint64_t)v108);
      std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v108, (_QWORD *)(v71 + 616));
      v72 = v109;
      if (v109 == v108)
      {
        v73 = 4;
        v72 = v108;
LABEL_162:
        (*(void (**)(void))(*v72 + 8 * v73))();
      }
      else if (v109)
      {
        v73 = 5;
        goto LABEL_162;
      }
      this = v91;
      if (v91 == v90)
      {
        v74 = 4;
        this = v90;
LABEL_167:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v74))();
      }
      else if (v91)
      {
        v74 = 5;
        goto LABEL_167;
      }
    }
  }
LABEL_168:
  v75 = a2[2];
  if (!*(_QWORD *)&v75)
    goto LABEL_188;
  v76 = (uint8x8_t)vcnt_s8(v75);
  v76.i16[0] = vaddlv_u8(v76);
  if (v76.u32[0] > 1uLL)
  {
    v77 = 0x2B7C4502BD3C99C6;
    if (*(_QWORD *)&v75 <= 0x2B7C4502BD3C99C6uLL)
      v77 = 0x2B7C4502BD3C99C6uLL % *(_QWORD *)&v75;
  }
  else
  {
    v77 = (*(_QWORD *)&v75 - 1) & 0x2B7C4502BD3C99C6;
  }
  v78 = *(_QWORD **)(*(_QWORD *)&a2[1] + 8 * v77);
  if (!v78 || (v79 = (_QWORD *)*v78) == 0)
  {
LABEL_188:
    v83 = 0;
    goto LABEL_189;
  }
  if (v76.u32[0] < 2uLL)
  {
    v80 = *(_QWORD *)&v75 - 1;
    while (1)
    {
      v82 = v79[1];
      if (v82 == 0x2B7C4502BD3C99C6)
      {
        if (v79[2] == 0x2B7C4502BD3C99C6)
          goto LABEL_210;
      }
      else if ((v82 & v80) != v77)
      {
        goto LABEL_188;
      }
      v79 = (_QWORD *)*v79;
      if (!v79)
        goto LABEL_188;
    }
  }
  while (2)
  {
    v81 = v79[1];
    if (v81 != 0x2B7C4502BD3C99C6)
    {
      if (v81 >= *(_QWORD *)&v75)
        v81 %= *(_QWORD *)&v75;
      if (v81 != v77)
        goto LABEL_188;
      goto LABEL_178;
    }
    if (v79[2] != 0x2B7C4502BD3C99C6)
    {
LABEL_178:
      v79 = (_QWORD *)*v79;
      if (!v79)
        goto LABEL_188;
      continue;
    }
    break;
  }
LABEL_210:
  v83 = v79[5];
LABEL_189:
  *(_QWORD *)(v3[34] + 336) = v83;
  v3[39] = 0;
  v84 = *(_QWORD *)(v3[3] + 56);
  v85 = *(_QWORD *)(v84 + 32);
  v86 = *(_QWORD *)(v84 + 40);
  if (v85 != v86)
  {
    while (*(_WORD *)v85 != 9)
    {
      v85 += 16;
      if (v85 == v86)
        goto LABEL_197;
    }
  }
  if (v85 != v86)
  {
    this = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(v85 + 8) + 72))(v108);
    if (LOBYTE(v108[0]))
    {
      if (v3[39] < (unint64_t)HIDWORD(v108[0]))
        v3[39] = HIDWORD(v108[0]);
    }
  }
LABEL_197:
  v87 = *(_QWORD *)(v84 + 32);
  v88 = *(_QWORD *)(v84 + 40);
  if (v87 != v88)
  {
    while (*(_WORD *)v87 != 1)
    {
      v87 += 16;
      if (v87 == v88)
        goto LABEL_205;
    }
  }
  if (v87 == v88)
  {
LABEL_205:
    v89 = v3[39];
  }
  else
  {
    this = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(v87 + 8) + 72))(v108);
    v89 = v3[39];
    if (LOBYTE(v108[0]) && v89 < HIDWORD(v108[0]))
    {
      v3[39] = HIDWORD(v108[0]);
      return this;
    }
  }
  if (!v89)
    v3[39] = 256;
  return this;
}

uint64_t `non-virtual thunk to'md::MapStandardLabeler::externalObjectsModerator(md::MapStandardLabeler *this)
{
  return *((_QWORD *)this + 48);
}

void grl::PathLayerMetrics::constructBalloonMetrics(uint64_t a1, uint64_t a2, float *a3, double a4, int32x2_t a5, double a6, double a7)
{
  unsigned int v9;
  int32x2_t v10;
  _BOOL4 v11;
  unsigned int v13;
  float32x2_t v14;
  float32x2_t v15;
  unsigned int v16;
  float v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  __float2 v24;
  float v25;
  float v26;
  __float2 v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  __int128 v32;
  uint64_t v33;
  float32x2_t v34;
  float32x2_t v36;
  float32x2_t v37;
  float v39;
  int v44;
  float v45;
  float v46;
  int v47;
  int32x2_t v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float v53;

  v9 = *(unsigned __int8 *)(a2 + 120);
  v10 = *(int32x2_t *)(a2 + 52);
  v11 = *(float *)v10.i32 > 0.0;
  if (*(float *)&v10.i32[1] > 0.0)
    v11 = 1;
  if (v9 > 9 || ((1 << v9) & 0x2C4) == 0)
  {
    if (v11)
    {
      if (*(float *)v10.i32 < *(float *)&v10.i32[1])
        v10.i32[0] = HIDWORD(*(_QWORD *)(a2 + 52));
    }
    else
    {
      v10.i32[0] = *(__int32 *)a3;
      if (*a3 < a3[1])
        v10.i32[0] = (__int32)a3[1];
    }
    v14 = (float32x2_t)vdup_lane_s32(v10, 0);
  }
  else
  {
    a5 = *(int32x2_t *)a3;
    if (v11)
      v13 = -1;
    else
      v13 = 0;
    v14 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)v10, (int8x8_t)a5);
  }
  LODWORD(a7) = *(_DWORD *)(a2 + 116);
  v15 = *(float32x2_t *)(a2 + 108);
  v16 = v9 - 3;
  v17 = 0.0;
  v18 = 0.0;
  if (v16 <= 6)
  {
    v17 = flt_1A0087050[(char)v16];
    v18 = flt_1A008706C[(char)v16];
  }
  v53 = v17;
  v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  v20 = vsub_f32(v19, v15);
  v51 = vadd_f32(v19, v15);
  v49 = fmaxf(*(float *)&a7, 0.0);
  v21 = vmul_n_f32(v14, COERCE_FLOAT(*(_QWORD *)(a2 + 100)));
  v50 = v21;
  v22 = v21.f32[1];
  if (v21.f32[1] < v21.f32[0])
    v21.f32[0] = v21.f32[1];
  *(float *)a5.i32 = ceilf(*(float *)(a2 + 92));
  v48 = a5;
  v52 = *(float *)a5.i32 + (float)(*(float *)a5.i32 + v21.f32[0]);
  v23 = *(float *)(a2 + 124);
  v24 = __sincosf_stret(v23);
  v25 = fmodf(v23 + 3.1416, 6.2832);
  v26 = fmodf(v25 + 6.2832, 6.2832) + 0.0;
  v27 = __sincosf_stret(v26);
  v28 = *(float *)(a2 + 64) * 3.14159265 / 180.0;
  v29 = vrndp_f32(vmaxnm_f32(v20, 0));
  v30 = vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v24.__sinval), LODWORD(v24.__cosval)), v53), v52);
  v31 = vrndp_f32(vabs_f32(vminnm_f32(v30, 0)));
  *(float32x2_t *)&v32 = vadd_f32(v29, v31);
  *(float *)(a1 + 12) = *(float *)v48.i32 + *(float *)&v32;
  v33 = a1 + 12;
  *(float *)(v33 + 84) = v26;
  *(float *)(v33 + 88) = v49;
  v34 = (float32x2_t)vdup_lane_s32(v48, 0);
  _V18.S[1] = v50.i32[1];
  v36 = vadd_f32(v34, vadd_f32(v34, v50));
  v37 = vadd_f32(v29, vadd_f32(vrndp_f32(vmaxnm_f32(v30, 0)), vadd_f32(v36, v31)));
  _S19 = 0.5;
  v39 = vmlas_n_f32(*(float *)v48.i32 + *(float *)&v32, 0.5, v50.f32[0]);
  __asm { FMLA            S10, S19, V18.S[1] }
  *(float *)(v33 + 92) = v52;
  *(float *)(v33 + 96) = v39;
  *(float *)(v33 + 100) = _S10;
  *(float *)(v33 + 48) = (float)(v52 * (float)(v18 * (float)(v27.__cosval - (float)(v27.__sinval * 0.0))))
                       + (float)((float)(v52
                                       * (float)((float)(v53 + 0.5) * (float)(v24.__cosval - (float)(v24.__sinval * 0.0))))
                               + v39);
  *(float *)(v33 + 52) = (float)(v52 * (float)(v18 * (float)(v27.__sinval + (float)(v27.__cosval * 0.0))))
                       + (float)((float)(v52
                                       * (float)((float)(v53 + 0.5) * (float)(v24.__sinval + (float)(v24.__cosval * 0.0))))
                               + _S10);
  *(float *)(v33 + 4) = *(float *)v48.i32 + *((float *)&v32 + 1);
  *(float *)(v33 + 8) = v50.f32[0] + (float)(*(float *)v48.i32 + *(float *)&v32);
  *((float32x2_t *)&v32 + 1) = vadd_f32(v36, *(float32x2_t *)&v32);
  *(float *)(v33 + 12) = v22 + (float)(*(float *)v48.i32 + *((float *)&v32 + 1));
  *(_OWORD *)(v33 + 16) = v32;
  *(float32x2_t *)(v33 + 104) = v29;
  *(float32x2_t *)(v33 + 112) = v37;
  *(float32x2_t *)(v33 + 32) = vadd_f32(vrndp_f32(vmaxnm_f32(v51, 0)), v37);
  *(float *)(v33 + 64) = grl::LayerMetrics::findGradientStartPoint(3u, (float *)v33, v28);
  *(_DWORD *)(v33 + 68) = v44;
  v45 = fmodf((float)(v28 + -3.1416) + 3.1416, 6.2832);
  v46 = fmodf(v45 + 6.2832, 6.2832);
  *(float *)(v33 + 72) = grl::LayerMetrics::findGradientStartPoint(3u, (float *)v33, v46 + -3.1416);
  *(_DWORD *)(v33 + 76) = v47;
  *(float *)(v33 + 56) = v39;
  *(float *)(v33 + 60) = _S10;
}

float32x2_t grl::PathLayerMetrics::constructPathMetrics(uint64_t a1, uint64_t a2, int8x8_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  float v8;
  unsigned int v9;
  float32x2_t v10;
  unsigned int v11;
  int32x2_t v12;
  _BOOL4 v13;
  unsigned int v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  double v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  __int32 v32;
  float v33;
  float v34;
  __int32 v35;
  float32x2_t result;

  v8 = ceilf(*(float *)(a2 + 92));
  if (v8 <= 4295000000.0)
  {
    v9 = v8;
    if (v8 < 0.0)
      v9 = 0;
  }
  else
  {
    v9 = -1;
  }
  v10 = *(float32x2_t *)(a2 + 108);
  v11 = *(unsigned __int8 *)(a2 + 120);
  v12 = *(int32x2_t *)(a2 + 52);
  v13 = *(float *)v12.i32 > 0.0;
  if (*(float *)&v12.i32[1] > 0.0)
    v13 = 1;
  if (v11 > 9 || ((1 << v11) & 0x2C4) == 0)
  {
    if (v13)
    {
      if (*(float *)v12.i32 < *(float *)&v12.i32[1])
        v12.i32[0] = HIDWORD(*(_QWORD *)(a2 + 52));
    }
    else
    {
      v12.i32[0] = a3->i32[0];
      if (*(float *)a3->i32 < *(float *)&a3->i32[1])
        v12.i32[0] = a3->i32[1];
    }
    v16 = (float32x2_t)vdup_lane_s32(v12, 0);
  }
  else
  {
    if (v13)
      v15 = -1;
    else
      v15 = 0;
    a8 = COERCE_DOUBLE(vdup_n_s32(v15));
    v16 = (float32x2_t)vbsl_s8(*(int8x8_t *)&a8, (int8x8_t)v12, *a3);
  }
  v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 116), 0);
  v18 = vsub_f32(v17, v10);
  *(float *)&a8 = (float)v9;
  v19 = *(float *)(a2 + 64) * 3.14159265 / 180.0;
  v20 = vrndp_f32(vmaxnm_f32(vadd_f32(v17, v10), 0));
  v21 = (float32x2_t)vdup_n_s32(0x4F800000u);
  v22 = vrndp_f32(vmaxnm_f32(v18, 0));
  v23 = (int32x2_t)vorr_s8((int8x8_t)vcvt_u32_f32(v22), (int8x8_t)vcgt_f32(v22, v21));
  v24 = vmul_n_f32(v16, COERCE_FLOAT(*(_QWORD *)(a2 + 100)));
  v25 = vcvt_f32_u32((uint32x2_t)vadd_s32(vdup_n_s32(v9), v23));
  v26 = vadd_f32(v24, v25);
  v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
  *(float32x2_t *)(a1 + 12) = v25;
  v28 = (float32x2_t *)(a1 + 12);
  v29 = vcvt_f32_u32((uint32x2_t)v23);
  *(float32x2_t *)(a1 + 20) = v26;
  *(float32x2_t *)(a1 + 28) = v29;
  v30 = vadd_f32(vadd_f32(vadd_f32(v24, v27), v27), v29);
  *(float32x2_t *)(a1 + 36) = v30;
  *(float32x2_t *)(a1 + 44) = vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v20, v21), (int8x8_t)v21, (int8x8_t)vcvt_f32_u32(vcvt_u32_f32(v20))), vadd_f32(v26, v27));
  v31 = v19;
  *(float32x2_t *)(a1 + 116) = v29;
  *(float32x2_t *)(a1 + 124) = v30;
  *(float *)(a1 + 76) = grl::LayerMetrics::findGradientStartPoint(v11, (float *)(a1 + 12), v31);
  v28[8].i32[1] = v32;
  v33 = fmodf((float)(v31 + -3.1416) + 3.1416, 6.2832);
  v34 = fmodf(v33 + 6.2832, 6.2832);
  v28[9].f32[0] = grl::LayerMetrics::findGradientStartPoint(v11, (float *)v28, v34 + -3.1416);
  v28[9].i32[1] = v35;
  result = vadd_f32(vmul_f32(vsub_f32(v26, v25), (float32x2_t)0x3F0000003F000000), v25);
  v28[6] = result;
  v28[7] = result;
  return result;
}

uint64_t grl::LayerMetrics::LayerMetrics(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  float *v10;
  float32x2_t v11;
  float32x2_t v12;
  int8x8_t v13;
  int v14;
  float32x2_t v15;
  double v16;
  float v17;
  unsigned int v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  __int128 v29;
  float32x2_t v30;
  int v31;
  float v32;
  float v33;
  int v34;

  *(_QWORD *)a1 = &off_1E42C2558;
  *(_WORD *)(a1 + 8) = 2;
  *(_OWORD *)(a1 + 12) = 0u;
  v10 = (float *)(a1 + 12);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  v11 = *(float32x2_t *)(a2 + 84);
  v12 = *(float32x2_t *)(a2 + 88);
  v13.i32[0] = *(_DWORD *)(a2 + 40);
  v14 = *(unsigned __int8 *)(a2 + 112);
  v15 = *(float32x2_t *)(a2 + 124);
  v16 = *a3;
  if (v14 == 2)
  {
    v18 = *(float *)v13.i32 > 0.0;
    if (*(float *)(a2 + 44) > 0.0)
      v18 = 1;
    v13.i32[1] = *(_DWORD *)(a2 + 44);
    *(int8x8_t *)&v16 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v18), 0x1FuLL)), v13, *(int8x8_t *)&v16);
  }
  else
  {
    v17 = roundf(*(float *)v13.i32);
    if (*(float *)&v16 >= v17)
      LODWORD(v17) = *(_QWORD *)a3;
    if (v14 == 1)
      v16 = COERCE_DOUBLE(__PAIR64__(HIDWORD(v16), LODWORD(v17)));
  }
  v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 132), 0);
  v20 = vsub_f32(v19, v15);
  v21 = vadd_f32(v19, v15);
  *(float *)&a8 = (float)ceilf(*(float *)(a2 + 80));
  v22 = (float)(*(float *)&v16 + *(float *)&a8) + *(float *)&a8;
  v23 = (float)(*((float *)&v16 + 1) + *(float *)&a8) + *(float *)&a8;
  v24 = vrndp_f32(vmaxnm_f32(v21, 0));
  v25 = (float32x2_t)vdup_n_s32(0x4F800000u);
  v26 = vrndp_f32(vmaxnm_f32(v20, 0));
  v27 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v26, v25), (int8x8_t)v25, (int8x8_t)vcvt_f32_u32(vcvt_u32_f32(v26)));
  v11.i32[1] = *(_DWORD *)(a2 + 140);
  v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
  *(float32x2_t *)&v29 = vadd_f32(vadd_f32(v11, v27), v28);
  v30 = vadd_f32(*(float32x2_t *)&v29, *(float32x2_t *)&v16);
  v12.i32[1] = *(_DWORD *)(a2 + 144);
  *(float32x2_t *)(a1 + 44) = vadd_f32(v12, vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v24, v25), (int8x8_t)v25, (int8x8_t)vcvt_f32_u32(vcvt_u32_f32(v24))), vadd_f32(v30, v28)));
  *((float32x2_t *)&v29 + 1) = v30;
  *(_OWORD *)(a1 + 12) = v29;
  *(float32x2_t *)(a1 + 28) = v27;
  *(float *)(a1 + 36) = v27.f32[0] + v22;
  *(float *)(a1 + 40) = v27.f32[1] + v23;
  *(float *)(a1 + 76) = grl::LayerMetrics::findGradientStartPoint(2u, v10, *(float *)(a2 + 52));
  *(_DWORD *)(a1 + 80) = v31;
  v32 = fmodf((float)(*(float *)(a2 + 52) + -3.1416) + 3.1416, 6.2832);
  v33 = fmodf(v32 + 6.2832, 6.2832);
  *(float *)(a1 + 84) = grl::LayerMetrics::findGradientStartPoint(2u, v10, v33 + -3.1416);
  *(_DWORD *)(a1 + 88) = v34;
  return a1;
}

float grl::LayerMetrics::findGradientStartPoint(unsigned int a1, float *a2, float a3)
{
  __float2 v5;
  double cosval;
  double v7;
  double v8;
  float v9;
  double v10;
  float result;
  float v12;
  double v13;
  BOOL v14;
  float v15;
  float v16;

  v5 = __sincosf_stret(a3);
  if (a1 > 9)
    return 0.0;
  cosval = v5.__cosval;
  if (((1 << a1) & 0x2E6) != 0)
  {
    v7 = fabs(cosval);
    v8 = fabs(v5.__sinval);
    if (v7 >= v8)
      v8 = v7;
    v9 = a2[2] - *a2;
    if (v9 < 0.0)
      v9 = 0.0;
    v10 = v9 * 0.5 + cosval * v9 * 0.5 / v8 + *a2;
    if (v10 <= 3.40282347e38)
    {
      result = -3.4028e38;
      v14 = v10 < -3.40282347e38;
      v15 = v10;
      if (!v14)
        return v15;
    }
    else
    {
      return 3.4028e38;
    }
  }
  else
  {
    v12 = a2[2] - *a2;
    if (v12 < 0.0)
      v12 = 0.0;
    v13 = v12 * 0.5 + cosval * v12 * 0.5 + *a2;
    if (v13 <= 3.40282347e38)
    {
      result = -3.4028e38;
      v14 = v13 < -3.40282347e38;
      v16 = v13;
      if (!v14)
        return v16;
    }
    else
    {
      return 3.4028e38;
    }
  }
  return result;
}

uint64_t ___ZN3gss10StyleSheetINS_10PropertyIDEE43addFinishedDecodingGlobalPropertiesCallbackENSt3__18functionIFvbEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  char v4;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 2785));
  v4 = v1 & 1;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v4);
  std::__throw_bad_function_call[abi:nn180100]();
  return __53__RegionalResourceObserver_initWithResourceProvider___block_invoke();
}

void sub_19F16E184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void grl::ResourceProvider::clearResourceNamesCache(grl::ResourceProvider *this)
{
  grl::ResourceProvider *v1;
  std::mutex *v2;
  _QWORD *v3;

  v1 = this;
  v2 = (std::mutex *)((char *)this + 176);
  std::mutex::lock((std::mutex *)((char *)this + 176));
  v3 = (_QWORD *)*((_QWORD *)v1 + 31);
  v1 = (grl::ResourceProvider *)((char *)v1 + 248);
  std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy((uint64_t)v1 - 8, v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  std::mutex::unlock(v2);
}

void std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*a1);
    std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[7];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<md::MeshSetStorage>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (*(_QWORD *)(a1 + 192))
  {
    v3 = *(_QWORD *)(a1 + 168);
    v2 = *(_QWORD *)(a1 + 176);
    if (v2 != v3)
    {
      v4 = *(_QWORD *)(a1 + 152);
      v5 = *(_QWORD *)(a1 + 160);
      v6 = *(unsigned __int8 *)(a1 + 184);
      v7 = *(unsigned __int8 *)(a1 + 185);
      if (v4 && *(_BYTE *)(v5 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
      if (v6 && !v7)
      {
        v9 = *(_QWORD *)(v5 + 56);
        v8 = *(_QWORD *)(v5 + 64);
        if (v8 == v9)
          v9 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
        if (v3 < v9)
          v9 = v3;
        if (v8 <= v2)
          v8 = v2;
        if (v8 == v9)
          v8 = v9 + *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
        *(_QWORD *)(v5 + 56) = v9;
        *(_QWORD *)(v5 + 64) = v8;
      }
    }
  }
  if (*(_QWORD *)(a1 + 144))
  {
    v11 = *(_QWORD *)(a1 + 120);
    v10 = *(_QWORD *)(a1 + 128);
    if (v10 != v11)
    {
      v12 = *(_QWORD *)(a1 + 104);
      v13 = *(_QWORD *)(a1 + 112);
      v14 = *(unsigned __int8 *)(a1 + 136);
      v15 = *(unsigned __int8 *)(a1 + 137);
      if (v12 && *(_BYTE *)(v13 + 17) != 2)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12);
      if (v14 && !v15)
      {
        v17 = *(_QWORD *)(v13 + 56);
        v16 = *(_QWORD *)(v13 + 64);
        if (v16 == v17)
          v17 = *(_QWORD *)(v13 + 80) - *(_QWORD *)(v13 + 72);
        if (v11 < v17)
          v17 = v11;
        if (v16 <= v10)
          v16 = v10;
        if (v16 == v17)
          v16 = v17 + *(_QWORD *)(v13 + 80) - *(_QWORD *)(v13 + 72);
        *(_QWORD *)(v13 + 56) = v17;
        *(_QWORD *)(v13 + 64) = v16;
      }
    }
  }
  v18 = *(std::__shared_weak_count **)(a1 + 96);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)(a1 + 80);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 48));
}

_QWORD *gms::PBRWithColorRampMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>, __n128 a3@<Q0>)
{
  float v3;
  uint64_t v6;
  _QWORD *result;
  char v8;
  char v9;
  uint64_t v10;

  v3 = a3.n128_f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(_QWORD *)v6 + 264))((char *)&v10 + 2, a3);
    result = *(_QWORD **)(a1 + 32);
    if (result)
      goto LABEL_3;
  }
  else
  {
    BYTE2(v10) = 0;
    result = *(_QWORD **)(a1 + 32);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10))
        goto LABEL_4;
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10)
        return result;
      v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10))
    goto LABEL_10;
LABEL_4:
  if (!(_BYTE)v10)
  {
    v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10))
    v8 = BYTE3(v10);
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 160);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  *a2 = 0;
  return result;
}

void sub_19F16E64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::StyleLogic::updateConfiguration(md::StyleLogic *this, int a2)
{
  __int16 *v2;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  _QWORD *v7;
  gss::Allocator *v8;
  __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  gss::Allocator *v12;
  gss::Allocator *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  size_t v49;
  char *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  uint64_t *v61;
  float v62;
  unsigned int v63;
  id v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count_vtbl *v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  float v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::ios_base *v87;
  std::string *v88;
  std::string::size_type size;
  _QWORD *v90;
  const char *v91;
  size_t v92;
  os_unfair_lock_s *v93;
  std::string::size_type v94;
  std::string *p_dst;
  uint64_t **v96;
  char *v97;
  const void **v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  const void *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  id v115;
  std::string::size_type v116;
  id v117;
  void *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  void *v123;
  float v124;
  unsigned int v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  int v173;
  uint64_t v174;
  double v175;
  double v176;
  double v177;
  double v178;
  int v179;
  char *v180;
  id v181;
  void *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  float v191;
  unint64_t v192;
  _DWORD *v193;
  _DWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _DWORD *v198;
  _DWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  unsigned __int8 v204;
  unsigned __int8 v205;
  unsigned int *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  unsigned int v211;
  unsigned int *v212;
  unsigned int v213;
  std::string::size_type v214;
  std::string::size_type v215;
  __int16 v216;
  unsigned int v217;
  __int16 v218;
  unsigned __int16 v219;
  uint64_t v220;
  _DWORD *v221;
  gss::Allocator *v222;
  uint64_t v223;
  float v224;
  unint64_t v225;
  _DWORD *v226;
  _DWORD *v227;
  unsigned __int16 *v228;
  unsigned __int16 *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  geo::read_write_lock *v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  const char *v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  __int16 v245;
  unsigned int v246;
  __int16 v247;
  unsigned __int16 v248;
  uint64_t v249;
  _DWORD *v250;
  gss::Allocator *v251;
  uint64_t v252;
  float v253;
  unint64_t v254;
  _DWORD *v255;
  _DWORD *v256;
  unsigned __int16 *v257;
  unsigned __int16 *v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  geo::read_write_lock *v264;
  const char *v265;
  char *v266;
  id v267;
  void *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  gss::Allocator *v275;
  uint64_t v276;
  uint64_t v277;
  std::string::size_type v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  void *v282;
  uint64_t v283;
  int v284;
  std::string::size_type v285;
  uint64_t v286;
  std::string *v287;
  char *v288;
  void *v289;
  std::string *v290;
  __int16 *v291;
  _QWORD *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  __int128 v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  NSObject *v312;
  std::string *v313;
  __int128 v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  char v321;
  uint8_t *v322;
  uint64_t v323;
  std::string *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t v328;
  gss::Allocator *v329;
  gss::Allocator *v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  gss::Allocator *v336;
  gss::Allocator *v337;
  uint64_t v338;
  geo::read_write_lock *v339;
  const char *v340;
  geo::read_write_lock *v341;
  const char *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  std::__shared_weak_count *v345;
  unint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  __int128 v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t *v384;
  unint64_t v385;
  __int128 v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  uint64_t **v396;
  uint64_t *v397;
  uint64_t *v398;
  unint64_t *v399;
  unint64_t v400;
  unint64_t *v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::string::value_type v405;
  std::string *v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  __int128 v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  std::string *v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::string *v420;
  std::string *v421;
  std::string *v422;
  std::__shared_weak_count *v423;
  std::string::size_type v424;
  std::string *v425;
  unint64_t *v426;
  unint64_t v427;
  uint64_t v428;
  void (*v429)(uint64_t, void *, void *);
  void (*v430)(uint64_t, void *, void *);
  uint64_t v431;
  uint64_t v432;
  char *v433;
  __int128 v434;
  void (*v435)(uint64_t, void *, void *);
  std::string *v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  char BOOL;
  uint64_t v444;
  id v445;
  id v446;
  std::__shared_weak_count *v447;
  id v448;
  void (**v449)(_QWORD, _QWORD);
  char v450;
  id v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  uint64_t v455;
  std::__shared_weak_count *v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  std::string v459;
  uint64_t v460;
  std::__shared_weak_count *v461;
  uint64_t v462;
  std::__shared_weak_count *v463;
  __int128 v464;
  std::string __dst;
  std::string::value_type v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  uint64_t v469;
  std::__shared_weak_count *v470;
  __int128 v471;
  void (*v472)(uint64_t, void *, void *);
  std::string *v473;
  id v474;
  uint64_t *v475;
  uint64_t *v476;
  std::string *v477;
  float v478;
  uint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t (*v482)(uint64_t, uint64_t);
  void (*v483)(uint64_t);
  id v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t (*v488)(uint64_t, uint64_t);
  void (*v489)(uint64_t);
  id v490;
  uint8_t v491[16];
  uint64_t v492;
  _QWORD v493[2];
  char *v494;
  char *v495;
  char *v496;
  char *v497;
  __int128 __p;
  _BYTE v499[32];
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  uint8_t buf[24];
  std::string __s;
  __int16 *v508;
  _BYTE v509[24];
  char *v510;
  std::string v511;
  std::string *v512;
  id v513;
  std::__shared_weak_count *v514;
  uint64_t *v515;
  uint64_t *v516;
  std::string *v517;
  char v518;
  _QWORD v519[3];
  _QWORD *v520;
  uint64_t v521;

  v521 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 274) = a2;
  if (!*((_QWORD *)this + 26))
  {
    v72 = (std::__shared_weak_count_vtbl *)operator new();
    gss::ClientStyleState<gss::PropertyID>::ClientStyleState((uint64_t)v72);
    std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::shared_ptr[abi:nn180100]<gss::ClientStyleState<gss::PropertyID>,void>((std::__shared_weak_count_vtbl **)v491, v72);
    v73 = *(_OWORD *)v491;
    memset(v491, 0, sizeof(v491));
    v74 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    *((_OWORD *)this + 13) = v73;
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = *(std::__shared_weak_count **)&v491[8];
    if (*(_QWORD *)&v491[8])
    {
      v78 = (unint64_t *)(*(_QWORD *)&v491[8] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }
  if (!*((_QWORD *)this + 28))
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(v4 + 208) = 0;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)v4 = 0u;
    v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 16), 0);
    if ((_DWORD)v5)
      geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
    *(_QWORD *)(v4 + 216) = 0;
    *(_QWORD *)(v4 + 223) = 0;
    *(_BYTE *)(v4 + 231) = 1;
    *(_QWORD *)(v4 + 232) = 0;
    v7 = (_QWORD *)(v4 + 232);
    *(_QWORD *)(v4 + 239) = 0;
    *(_BYTE *)(v4 + 247) = 1;
    *(_DWORD *)(v4 + 256) = 0;
    *(_DWORD *)(v4 + 251) = 0;
    *(_DWORD *)(v4 + 248) = 0;
    atomic_store(1u, (unsigned int *)(v4 + 248));
    atomic_store(0, (unsigned int *)(v4 + 256));
    atomic_store(0, (unsigned __int8 *)(v4 + 254));
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10000u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10001u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x1000Du) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10004u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10002u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10015u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x1000Eu) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10018u) = 1;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10019u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10006u) = -1;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10033u) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x1003Cu) = 1;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x1003Du) = 0;
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10045u) = 1;
    v8 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v4 + 216), 0x10046u);
    *(_WORD *)v8 = 0;
    if (!(*(unsigned __int8 *)(v4 + 230) | *(unsigned __int8 *)(v4 + 231)))
    {
      v9 = *(_WORD *)(v4 + 228);
      v10 = (4 * v9) | 2;
      v11 = gss::Allocator::instance(v8);
      v8 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 16))(v11, (unsigned __int16)(v10 + 2 * v9) & 0xFFFE, 1);
      v12 = v8;
      if (*(_QWORD *)(v4 + 216))
      {
        geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v4 + 216, v8, (gss::Allocator *)((char *)v8 + v10), 1);
        v14 = gss::Allocator::instance(v13);
        v8 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v4 + 216), *(unsigned __int16 *)(v4 + 228));
      }
      *(_WORD *)(v4 + 228) = v9;
      *(_QWORD *)(v4 + 216) = v12;
      *(_WORD *)(v4 + 224) = v10;
    }
    if (!*(_BYTE *)(v4 + 246) && *v7)
    {
      v15 = gss::Allocator::instance(v8);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v4 + 232), *(unsigned __int16 *)(v4 + 244));
    }
    *(_QWORD *)(v4 + 239) = 0;
    *v7 = 0;
    *(_BYTE *)(v4 + 247) = 1;
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)(v4 + 232), v4 + 216);
    v16 = (std::__shared_weak_count *)operator new();
    v16->__shared_owners_ = 0;
    v17 = (unint64_t *)&v16->__shared_owners_;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8050;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    *(_QWORD *)&v18 = v4;
    *((_QWORD *)&v18 + 1) = v16;
    v19 = *(std::__shared_weak_count **)(v4 + 8);
    if (v19)
    {
      if (v19->__shared_owners_ != -1)
      {
LABEL_25:
        v27 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
        *((_OWORD *)this + 14) = v18;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = *((id *)this + 145);
        v31 = v30;
        v32 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
        v460 = *((_QWORD *)this + 28);
        v461 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        objc_msgSend(v30, "setSceneClientStyleState:", &v460);
        v35 = v461;
        if (v461)
        {
          v36 = (unint64_t *)&v461->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }

        goto LABEL_39;
      }
      do
        v20 = __ldxr(v17);
      while (__stxr(v20 + 1, v17));
      v452 = v18;
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v22 = __ldxr(p_shared_weak_owners);
      while (__stxr(v22 + 1, p_shared_weak_owners));
      *(_QWORD *)v4 = v4;
      *(_QWORD *)(v4 + 8) = v16;
      std::__shared_weak_count::__release_weak(v19);
      v18 = v452;
    }
    else
    {
      do
        v23 = __ldxr(v17);
      while (__stxr(v23 + 1, v17));
      v24 = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      *(_QWORD *)v4 = v4;
      *(_QWORD *)(v4 + 8) = v16;
    }
    do
      v26 = __ldaxr(v17);
    while (__stlxr(v26 - 1, v17));
    if (!v26)
    {
      v453 = v18;
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v18 = v453;
    }
    goto LABEL_25;
  }
LABEL_39:
  if (!*((_QWORD *)this + 30))
  {
    *((_BYTE *)&v459.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v459, "scene");
    v80 = *((float *)this + 30);
    v81 = *((unsigned __int8 *)this + 161);
    v451 = *((id *)this + 17);
    objc_msgSend(v451, "stylesheetVendor");
    v82 = v462;
    v83 = MEMORY[0x1E0DE4FE0];
    v84 = MEMORY[0x1E0DE4FE0] + 64;
    v85 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v86 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)&v499[24] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)v491 = v85;
    *(_QWORD *)&v491[*(_QWORD *)(v85 - 24)] = v86;
    v87 = (std::ios_base *)&v491[*(_QWORD *)(*(_QWORD *)v491 - 24)];
    std::ios_base::init(v87, &v491[8]);
    v87[1].__vftable = 0;
    v87[1].__fmtflags_ = -1;
    *(_QWORD *)v491 = v83 + 24;
    *(_QWORD *)&v499[24] = v84;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&v491[8] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    *(_OWORD *)v499 = 0u;
    *(_DWORD *)&v499[16] = 16;
    if ((v459.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v459;
    else
      v88 = (std::string *)v459.__r_.__value_.__r.__words[0];
    if ((v459.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v459.__r_.__value_.__r.__words[2]);
    else
      size = v459.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v491, (uint64_t)v88, size);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v491, (uint64_t)"_", 1);
    v90 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)"_", 1);
    v91 = gss::to_string(v81);
    v92 = strlen(v91);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
    v450 = v81;
    v93 = (os_unfair_lock_s *)(v82 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v82 + 24));
    if ((v499[16] & 0x10) != 0)
    {
      v97 = *(char **)&v499[8];
      if (*(_QWORD *)&v499[8] < (unint64_t)v496)
      {
        *(_QWORD *)&v499[8] = v496;
        v97 = v496;
      }
      v98 = (const void **)&v495;
    }
    else
    {
      if ((v499[16] & 8) == 0)
      {
        v94 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_113;
      }
      v98 = (const void **)v493;
      v97 = v494;
    }
    v106 = *v98;
    v94 = v97 - (_BYTE *)*v98;
    if (v94 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v94 >= 0x17)
    {
      v107 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v94 | 7) != 0x17)
        v107 = v94 | 7;
      v108 = v107 + 1;
      p_dst = (std::string *)operator new(v107 + 1);
      __dst.__r_.__value_.__l.__size_ = v94;
      __dst.__r_.__value_.__r.__words[2] = v108 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)v97 - *(_BYTE *)v98;
      p_dst = &__dst;
      if (!v94)
      {
LABEL_113:
        p_dst->__r_.__value_.__s.__data_[v94] = 0;
        v466 = 0;
        v109 = *(unsigned __int8 **)(v82 + 72);
        v110 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(*(unsigned __int8 **)(v82 + 64), v109, (unsigned __int8 *)&__dst);
        if (v109 != v110)
        {
          v111 = *((_QWORD *)v110 + 5);
          *(_QWORD *)&v464 = *((_QWORD *)v110 + 4);
          *((_QWORD *)&v464 + 1) = v111;
          v112 = MEMORY[0x1E0DE4FB8];
          if (v111)
          {
            v113 = (unint64_t *)(v111 + 8);
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          goto LABEL_353;
        }
        v115 = *(id *)(v82 + 16);
        v485 = 0;
        v486 = &v485;
        v487 = 0x3032000000;
        v488 = __Block_byref_object_copy__19729;
        v489 = __Block_byref_object_dispose__19730;
        v490 = 0;
        v479 = 0;
        v480 = &v479;
        v481 = 0x3032000000;
        v482 = __Block_byref_object_copy__19729;
        v483 = __Block_byref_object_dispose__19730;
        v484 = 0;
        v116 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v471 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v471 + 1) = 3221225472;
        v472 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke;
        v473 = (std::string *)&unk_1E42F3C00;
        v475 = &v479;
        v477 = &v459;
        v117 = v115;
        v478 = v80;
        v474 = v117;
        v476 = &v485;
        v118 = (void *)MEMORY[0x1A1AF5730](&v471);
        v511.__r_.__value_.__r.__words[0] = v116;
        v511.__r_.__value_.__l.__size_ = 3221225472;
        v511.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4;
        v512 = (std::string *)&unk_1E42F3C28;
        v518 = v450;
        v447 = v118;
        v514 = v447;
        v515 = &v485;
        v516 = &v479;
        v517 = &v459;
        v448 = v117;
        v513 = v448;
        v449 = (void (**)(_QWORD, _QWORD))MEMORY[0x1A1AF5730](&v511);
        ((void (**)(_QWORD, const __CFString *))v449)[2](v449, CFSTR("styl"));
        v464 = 0uLL;
        if (!v486[5])
        {
          if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
          v122 = (id)GEOGetVectorKitResourceLoadingLog_log;
          if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
          {
            v284 = SHIBYTE(v459.__r_.__value_.__r.__words[2]);
            v285 = v459.__r_.__value_.__r.__words[0];
            v286 = objc_msgSend(objc_retainAutorelease((id)v480[5]), "UTF8String");
            v287 = &v459;
            if (v284 < 0)
              v287 = (std::string *)v285;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v287;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v286;
            _os_log_impl(&dword_19F029000, v122, OS_LOG_TYPE_ERROR, "Couldn't find %s.styl in framework, file name %s", buf, 0x16u);
          }
          goto LABEL_344;
        }
        _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_15ScenePropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
        v444 = *(_QWORD *)buf;
        v464 = *(_OWORD *)buf;
        v119 = objc_msgSend(v448, "isDevResourceWithName:", v480[5]);
        v445 = (id)v486[5];
        if ((_DWORD)VectorKitDebugConfig_DecodeStyleNames && *((_QWORD *)&VectorKitDebugConfig_DecodeStyleNames + 1))
          BOOL = GEOConfigGetBOOL();
        v446 = (id)v480[5];
        v120 = objc_msgSend(objc_retainAutorelease((id)v486[5]), "bytes");
        v121 = objc_msgSend((id)v486[5], "length");
        md::StyleSheetExtension::localizationMap((md::StyleSheetExtension *)&v469, (md::StylesheetVendor *)v82);
        md::StyleSheetExtension::currencyMap((md::StyleSheetExtension *)&v467, (md::StylesheetVendor *)v82);
        *(_QWORD *)buf = &off_1E42B5310;
        *(_QWORD *)&buf[8] = 0;
        v122 = v445;
        v123 = *(void **)&buf[8];
        *(_QWORD *)&buf[8] = v122;

        if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__s, v459.__r_.__value_.__l.__data_, v459.__r_.__value_.__l.__size_);
        else
          __s = v459;
        v2 = (__int16 *)v446;
        v508 = v2;
        v510 = 0;
        v288 = (char *)operator new(0x40uLL);
        *(_QWORD *)v288 = off_1E42D0358;
        *((_QWORD *)v288 + 1) = &off_1E42B5310;
        *((_QWORD *)v288 + 2) = 0;
        objc_storeStrong((id *)v288 + 2, *(id *)&buf[8]);
        v289 = *(void **)&buf[8];
        *(_QWORD *)&buf[8] = 0;

        v290 = (std::string *)(v288 + 32);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v290, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v290->__r_.__value_.__l.__data_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          *((_QWORD *)v288 + 6) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
        }
        v291 = v508;
        v508 = 0;
        *((_QWORD *)v288 + 7) = v291;
        v510 = v288;
        v520 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v288 + 16))(v288);
        gss::StyleSheet<gss::ScenePropertyID>::construct(v444, v120, v121, (void **)&v459.__r_.__value_.__l.__data_, v450, v119, &v469, &v467, v80, BOOL & 1, v519);
        v292 = v520;
        if (v520 == v519)
        {
          v293 = 4;
          v292 = v519;
        }
        else
        {
          if (!v520)
            goto LABEL_326;
          v293 = 5;
        }
        (*(void (**)(void))(*v292 + 8 * v293))();
LABEL_326:
        v294 = v510;
        if (v510 == v509)
        {
          v295 = 4;
          v294 = v509;
        }
        else
        {
          if (!v510)
          {
LABEL_331:

            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            *(_QWORD *)buf = &off_1E42B5310;

            v296 = v468;
            if (v468)
            {
              v297 = (unint64_t *)&v468->__shared_owners_;
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                std::__shared_weak_count::__release_weak(v296);
              }
            }
            v299 = v470;
            if (v470)
            {
              v300 = (unint64_t *)&v470->__shared_owners_;
              do
                v301 = __ldaxr(v300);
              while (__stlxr(v301 - 1, v300));
              if (!v301)
              {
                ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                std::__shared_weak_count::__release_weak(v299);
              }
            }

LABEL_344:
            _Block_object_dispose(&v479, 8);

            _Block_object_dispose(&v485, 8);
            v302 = *(unsigned __int8 **)(v82 + 64);
            v303 = *(unsigned __int8 **)(v82 + 72);
            v304 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v302, v303, (unsigned __int8 *)&__dst);
            v93 = (os_unfair_lock_s *)(v82 + 24);
            if (v303 == v304)
            {
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)buf = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v511, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                v302 = *(unsigned __int8 **)(v82 + 64);
              }
              else
              {
                v511 = __dst;
              }
              v405 = v466;
              LOBYTE(v512) = v466;
              v513 = 0;
              v514 = 0;
              *(_QWORD *)&buf[8] = 0;
              *(_QWORD *)buf = 0;
              v406 = *(std::string **)(v82 + 72);
              v304 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v302, (unsigned __int8 *)v406, (unsigned __int8 *)&v511);
              if (v406 == (std::string *)v304)
              {
                v410 = *(_QWORD *)(v82 + 80);
                if (v410 <= (unint64_t)v406)
                {
                  v412 = 0xAAAAAAAAAAAAAAABLL * (((char *)v406 - (char *)v302) >> 4);
                  v413 = v412 + 1;
                  if (v412 + 1 > 0x555555555555555)
                    abort();
                  v414 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v410 - (_QWORD)v302) >> 4);
                  if (2 * v414 > v413)
                    v413 = 2 * v414;
                  if (v414 >= 0x2AAAAAAAAAAAAAALL)
                    v415 = 0x555555555555555;
                  else
                    v415 = v413;
                  v474 = (id)(v82 + 80);
                  if (v415)
                  {
                    if (v415 > 0x555555555555555)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v416 = (std::string *)operator new(48 * v415);
                  }
                  else
                  {
                    v416 = 0;
                  }
                  v421 = v416 + 2 * v412;
                  *(_QWORD *)&v471 = v416;
                  *((_QWORD *)&v471 + 1) = v421;
                  v472 = (void (*)(uint64_t, void *, void *))v421;
                  v473 = &v416[2 * v415];
                  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v93 = (os_unfair_lock_s *)(v82 + 24);
                    std::string::__init_copy_ctor_external(v416 + 2 * v412, v511.__r_.__value_.__l.__data_, v511.__r_.__value_.__l.__size_);
                    v424 = (std::string::size_type)v513;
                    v423 = v514;
                    v421[1].__r_.__value_.__s.__data_[0] = (char)v512;
                    v425 = v416 + 2 * v412;
                    v425[1].__r_.__value_.__l.__size_ = v424;
                    v425[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v423;
                    if (v423)
                    {
                      v426 = (unint64_t *)&v423->__shared_owners_;
                      do
                        v427 = __ldxr(v426);
                      while (__stxr(v427 + 1, v426));
                    }
                  }
                  else
                  {
                    *v421 = v511;
                    v421[1].__r_.__value_.__s.__data_[0] = v405;
                    v422 = v416 + 2 * v412;
                    v422[1].__r_.__value_.__l.__size_ = 0;
                    v422[1].__r_.__value_.__r.__words[2] = 0;
                    v93 = (os_unfair_lock_s *)(v82 + 24);
                  }
                  v428 = *((_QWORD *)&v471 + 1);
                  v420 = (std::string *)((char *)v472 + 48);
                  v429 = *(void (**)(uint64_t, void *, void *))(v82 + 64);
                  v430 = *(void (**)(uint64_t, void *, void *))(v82 + 72);
                  if (v430 == v429)
                  {
                    v435 = *(void (**)(uint64_t, void *, void *))(v82 + 72);
                  }
                  else
                  {
                    v431 = 0;
                    do
                    {
                      v432 = v428 + v431;
                      v433 = (char *)v430 + v431;
                      v434 = *(_OWORD *)((char *)v430 + v431 - 48);
                      *(_QWORD *)(v432 - 32) = *(_QWORD *)((char *)v430 + v431 - 32);
                      *(_OWORD *)(v432 - 48) = v434;
                      *((_QWORD *)v433 - 5) = 0;
                      *((_QWORD *)v433 - 4) = 0;
                      *((_QWORD *)v433 - 6) = 0;
                      *(_BYTE *)(v432 - 24) = *((_BYTE *)v430 + v431 - 24);
                      *(_OWORD *)(v432 - 16) = *(_OWORD *)((char *)v430 + v431 - 16);
                      *((_QWORD *)v433 - 2) = 0;
                      *((_QWORD *)v433 - 1) = 0;
                      v431 -= 48;
                    }
                    while ((void (*)(uint64_t, void *, void *))((char *)v430 + v431) != v429);
                    v428 += v431;
                    v435 = *(void (**)(uint64_t, void *, void *))(v82 + 64);
                    v430 = *(void (**)(uint64_t, void *, void *))(v82 + 72);
                  }
                  *((_QWORD *)&v471 + 1) = v435;
                  *(_QWORD *)(v82 + 64) = v428;
                  *(_QWORD *)(v82 + 72) = v420;
                  v436 = *(std::string **)(v82 + 80);
                  *(_QWORD *)(v82 + 80) = v473;
                  v473 = v436;
                  *(_QWORD *)&v471 = v435;
                  if (v430 != v435)
                  {
                    do
                    {
                      v472 = (void (*)(uint64_t, void *, void *))((char *)v430 - 48);
                      v437 = (std::__shared_weak_count *)*((_QWORD *)v430 - 1);
                      if (v437)
                      {
                        v438 = (unint64_t *)&v437->__shared_owners_;
                        do
                          v439 = __ldaxr(v438);
                        while (__stlxr(v439 - 1, v438));
                        if (!v439)
                        {
                          ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
                          std::__shared_weak_count::__release_weak(v437);
                        }
                      }
                      if (*((char *)v430 - 25) < 0)
                        operator delete(*((void **)v430 - 6));
                      v430 = v472;
                    }
                    while (v472 != v435);
                    v430 = (void (*)(uint64_t, void *, void *))v471;
                    v93 = (os_unfair_lock_s *)(v82 + 24);
                  }
                  if (v430)
                    operator delete(v430);
                }
                else
                {
                  if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v406, v511.__r_.__value_.__l.__data_, v511.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v411 = *(_OWORD *)&v511.__r_.__value_.__l.__data_;
                    v406->__r_.__value_.__r.__words[2] = v511.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v406->__r_.__value_.__l.__data_ = v411;
                  }
                  v406[1].__r_.__value_.__s.__data_[0] = (char)v512;
                  v406[1].__r_.__value_.__l.__size_ = (std::string::size_type)v513;
                  v417 = v514;
                  v406[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v514;
                  if (v417)
                  {
                    v418 = (unint64_t *)&v417->__shared_owners_;
                    do
                      v419 = __ldxr(v418);
                    while (__stxr(v419 + 1, v418));
                  }
                  v420 = v406 + 2;
                  *(_QWORD *)(v82 + 72) = v420;
                }
                *(_QWORD *)(v82 + 72) = v420;
                v304 = (unsigned __int8 *)&v420[-2];
                v440 = v514;
                if (v514)
                {
                  v441 = (unint64_t *)&v514->__shared_owners_;
                  do
                    v442 = __ldaxr(v441);
                  while (__stlxr(v442 - 1, v441));
                  if (!v442)
                  {
                    ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
                    std::__shared_weak_count::__release_weak(v440);
                  }
                }
              }
              if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v511.__r_.__value_.__l.__data_);
              v407 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v408 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v409 = __ldaxr(v408);
                while (__stlxr(v409 - 1, v408));
                if (!v409)
                {
                  ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                  std::__shared_weak_count::__release_weak(v407);
                }
              }
            }
            v305 = v464;
            if (*((_QWORD *)&v464 + 1))
            {
              v306 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
              do
                v307 = __ldxr(v306);
              while (__stxr(v307 + 1, v306));
            }
            v308 = (std::__shared_weak_count *)*((_QWORD *)v304 + 5);
            *((_OWORD *)v304 + 2) = v305;
            v112 = MEMORY[0x1E0DE4FB8];
            if (v308)
            {
              v309 = (unint64_t *)&v308->__shared_owners_;
              do
                v310 = __ldaxr(v309);
              while (__stlxr(v310 - 1, v309));
              if (!v310)
              {
                ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                std::__shared_weak_count::__release_weak(v308);
              }
            }
LABEL_353:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            os_unfair_lock_unlock(v93);
            *(_QWORD *)v491 = *MEMORY[0x1E0DE4F60];
            *(_QWORD *)&v491[*(_QWORD *)(*(_QWORD *)v491 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
            *(_QWORD *)&v491[8] = v112 + 16;
            if ((v499[7] & 0x80000000) != 0)
              operator delete((void *)__p);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1A1AF4D64](&v499[24]);
            v311 = v464;
            if ((_QWORD)v464)
            {
LABEL_385:
              v326 = *((_QWORD *)&v464 + 1);
              *(_QWORD *)&v471 = v311;
              *((_QWORD *)&v471 + 1) = *((_QWORD *)&v464 + 1);
              if (*((_QWORD *)&v464 + 1))
              {
                v327 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
              }
              if (!v311)
              {
                v454 = 0u;
LABEL_422:
                v358 = (std::__shared_weak_count *)*((_QWORD *)&v471 + 1);
                if (*((_QWORD *)&v471 + 1))
                {
                  v359 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
                  do
                    v360 = __ldaxr(v359);
                  while (__stlxr(v360 - 1, v359));
                  if (!v360)
                  {
                    ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                    std::__shared_weak_count::__release_weak(v358);
                  }
                }
                v361 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
                if (*((_QWORD *)&v464 + 1))
                {
                  v362 = (unint64_t *)(*((_QWORD *)&v464 + 1) + 8);
                  do
                    v363 = __ldaxr(v362);
                  while (__stlxr(v363 - 1, v362));
                  if (!v363)
                  {
                    ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                    std::__shared_weak_count::__release_weak(v361);
                  }
                }
                v364 = v463;
                if (v463)
                {
                  v365 = (unint64_t *)&v463->__shared_owners_;
                  do
                    v366 = __ldaxr(v365);
                  while (__stlxr(v366 - 1, v365));
                  if (!v366)
                  {
                    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                    std::__shared_weak_count::__release_weak(v364);
                  }
                }

                v367 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
                *((_OWORD *)this + 15) = v454;
                if (v367)
                {
                  v368 = (unint64_t *)&v367->__shared_owners_;
                  do
                    v369 = __ldaxr(v368);
                  while (__stlxr(v369 - 1, v368));
                  if (!v369)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }

                if (SHIBYTE(v459.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v459.__r_.__value_.__l.__data_);
                v371 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
                v370 = *((_QWORD *)this + 30);
                v372 = *((_QWORD *)this + 28);
                if (v371)
                {
                  v373 = (unint64_t *)&v371->__shared_owners_;
                  do
                    v374 = __ldxr(v373);
                  while (__stxr(v374 + 1, v373));
                  do
                    v375 = __ldxr(v373);
                  while (__stxr(v375 + 1, v373));
                }
                *(_QWORD *)(v370 + 520) = v372;
                v376 = *(std::__shared_weak_count **)(v370 + 528);
                *(_QWORD *)(v370 + 528) = v371;
                if (v376)
                {
                  v377 = (unint64_t *)&v376->__shared_owners_;
                  do
                    v378 = __ldaxr(v377);
                  while (__stlxr(v378 - 1, v377));
                  if (!v378)
                  {
                    ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                    std::__shared_weak_count::__release_weak(v376);
                  }
                }
                if (v371)
                {
                  v379 = (unint64_t *)&v371->__shared_owners_;
                  do
                    v380 = __ldaxr(v379);
                  while (__stlxr(v380 - 1, v379));
                  if (!v380)
                  {
                    ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                    std::__shared_weak_count::__release_weak(v371);
                  }
                }
                goto LABEL_40;
              }
              v329 = (gss::Allocator *)operator new();
              v330 = v329;
              *(_QWORD *)v491 = v311;
              *(_QWORD *)&v491[8] = v326;
              if (v326)
              {
                v331 = (unint64_t *)(v326 + 8);
                do
                  v332 = __ldxr(v331);
                while (__stxr(v332 + 1, v331));
                v333 = *(_QWORD *)&v491[8];
                *(_QWORD *)v329 = 0;
                *((_QWORD *)v329 + 1) = 0;
                *((_QWORD *)v329 + 2) = v311;
                *((_QWORD *)v329 + 3) = v333;
                if (v333)
                {
                  v334 = (unint64_t *)(v333 + 8);
                  do
                    v335 = __ldxr(v334);
                  while (__stxr(v335 + 1, v334));
                }
              }
              else
              {
                *(_QWORD *)v329 = 0;
                *((_QWORD *)v329 + 1) = 0;
                *((_QWORD *)v329 + 2) = v311;
                *((_QWORD *)v329 + 3) = 0;
              }
              *((_QWORD *)v329 + 4) = 0;
              *((_QWORD *)v329 + 5) = 0;
              v336 = (gss::Allocator *)gss::Allocator::instance(v329);
              *((_QWORD *)v330 + 6) = v336;
              *((_QWORD *)v330 + 7) = 0;
              v337 = (gss::Allocator *)gss::Allocator::instance(v336);
              *((_QWORD *)v330 + 8) = v337;
              *((_QWORD *)v330 + 9) = 0;
              *((_DWORD *)v330 + 20) = 1065353216;
              *((_QWORD *)v330 + 11) = 0;
              *((_QWORD *)v330 + 12) = 0;
              *((_QWORD *)v330 + 13) = 0;
              v338 = gss::Allocator::instance(v337);
              *(_OWORD *)((char *)v330 + 120) = 0u;
              *((_QWORD *)v330 + 14) = v338;
              *(_OWORD *)((char *)v330 + 136) = 0u;
              *(_OWORD *)((char *)v330 + 152) = 0u;
              *(_OWORD *)((char *)v330 + 168) = 0u;
              *(_OWORD *)((char *)v330 + 184) = 0u;
              *(_OWORD *)((char *)v330 + 200) = 0u;
              *(_OWORD *)((char *)v330 + 216) = 0u;
              *(_OWORD *)((char *)v330 + 232) = 0u;
              *(_OWORD *)((char *)v330 + 248) = 0u;
              *(_OWORD *)((char *)v330 + 264) = 0u;
              *(_OWORD *)((char *)v330 + 280) = 0u;
              *(_OWORD *)((char *)v330 + 296) = 0u;
              *((_QWORD *)v330 + 39) = 0;
              v339 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)((char *)v330 + 120), 0);
              if ((_DWORD)v339)
                geo::read_write_lock::logFailure(v339, (uint64_t)"initialization", v340);
              *((_QWORD *)v330 + 64) = 0;
              *((_OWORD *)v330 + 30) = 0u;
              *((_OWORD *)v330 + 31) = 0u;
              *((_OWORD *)v330 + 28) = 0u;
              *((_OWORD *)v330 + 29) = 0u;
              *((_OWORD *)v330 + 26) = 0u;
              *((_OWORD *)v330 + 27) = 0u;
              *((_OWORD *)v330 + 24) = 0u;
              *((_OWORD *)v330 + 25) = 0u;
              *((_OWORD *)v330 + 22) = 0u;
              *((_OWORD *)v330 + 23) = 0u;
              *((_OWORD *)v330 + 20) = 0u;
              *((_OWORD *)v330 + 21) = 0u;
              v341 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)((char *)v330 + 320), 0);
              if ((_DWORD)v341)
                geo::read_write_lock::logFailure(v341, (uint64_t)"initialization", v342);
              *(_OWORD *)((char *)v330 + 520) = 0u;
              *(_QWORD *)buf = v330;
              v343 = (std::__shared_weak_count *)operator new();
              v343->__shared_owners_ = 0;
              v344 = (unint64_t *)&v343->__shared_owners_;
              v343->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E80C0;
              v343->__shared_weak_owners_ = 0;
              v343[1].__vftable = (std::__shared_weak_count_vtbl *)v330;
              *(_QWORD *)buf = 0;
              v345 = (std::__shared_weak_count *)*((_QWORD *)v330 + 1);
              if (v345)
              {
                if (v345->__shared_owners_ != -1)
                {
LABEL_415:
                  if (*(_QWORD *)buf)
                  {
                    v353 = gss::StylesheetManager<gss::PropertyID>::~StylesheetManager(*(uint64_t *)buf);
                    MEMORY[0x1A1AF4E00](v353, 0x10A0C40DB985E3BLL);
                  }
                  *(_QWORD *)&v354 = v330;
                  *((_QWORD *)&v354 + 1) = v343;
                  v454 = v354;
                  v355 = *(std::__shared_weak_count **)&v491[8];
                  if (*(_QWORD *)&v491[8])
                  {
                    v356 = (unint64_t *)(*(_QWORD *)&v491[8] + 8);
                    do
                      v357 = __ldaxr(v356);
                    while (__stlxr(v357 - 1, v356));
                    if (!v357)
                    {
                      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                      std::__shared_weak_count::__release_weak(v355);
                    }
                  }
                  goto LABEL_422;
                }
                do
                  v346 = __ldxr(v344);
                while (__stxr(v346 + 1, v344));
                v347 = (unint64_t *)&v343->__shared_weak_owners_;
                do
                  v348 = __ldxr(v347);
                while (__stxr(v348 + 1, v347));
                *(_QWORD *)v330 = v330;
                *((_QWORD *)v330 + 1) = v343;
                std::__shared_weak_count::__release_weak(v345);
              }
              else
              {
                do
                  v349 = __ldxr(v344);
                while (__stxr(v349 + 1, v344));
                v350 = (unint64_t *)&v343->__shared_weak_owners_;
                do
                  v351 = __ldxr(v350);
                while (__stxr(v351 + 1, v350));
                *(_QWORD *)v330 = v330;
                *((_QWORD *)v330 + 1) = v343;
              }
              do
                v352 = __ldaxr(v344);
              while (__stlxr(v352 - 1, v344));
              if (!v352)
              {
                ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                std::__shared_weak_count::__release_weak(v343);
              }
              goto LABEL_415;
            }
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
            v312 = (id)GEOGetVectorKitResourceLoadingLog_log;
            if (os_log_type_enabled(v312, OS_LOG_TYPE_INFO))
            {
              v313 = &v459;
              if ((v459.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v313 = (std::string *)v459.__r_.__value_.__r.__words[0];
              *(_DWORD *)v491 = 136315138;
              *(_QWORD *)&v491[4] = v313;
              _os_log_impl(&dword_19F029000, v312, OS_LOG_TYPE_INFO, "stylesheetVendor returned null styleSheet for %s", v491, 0xCu);
            }

            _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_15ScenePropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v491);
            v314 = *(_OWORD *)v491;
            memset(v491, 0, sizeof(v491));
            v315 = (std::__shared_weak_count *)*((_QWORD *)&v464 + 1);
            v464 = v314;
            if (v315)
            {
              v316 = (unint64_t *)&v315->__shared_owners_;
              do
                v317 = __ldaxr(v316);
              while (__stlxr(v317 - 1, v316));
              if (!v317)
              {
                ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                std::__shared_weak_count::__release_weak(v315);
              }
            }
            v318 = *(std::__shared_weak_count **)&v491[8];
            if (*(_QWORD *)&v491[8])
            {
              v319 = (unint64_t *)(*(_QWORD *)&v491[8] + 8);
              do
                v320 = __ldaxr(v319);
              while (__stlxr(v320 - 1, v319));
              if (!v320)
              {
                ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                std::__shared_weak_count::__release_weak(v318);
              }
            }
            v471 = 0uLL;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)buf = 0;
            v321 = GEOConfigGetBOOL();
            v511.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E42D8360;
            v512 = &v511;
            v493[0] = v491;
            *(_QWORD *)v491 = &off_1E42D8360;
            gss::StyleSheet<gss::ScenePropertyID>::construct(v464, 0, 0, (void **)&v459.__r_.__value_.__l.__data_, v450, 0, (uint64_t *)&v471, (uint64_t *)buf, v80, v321, v491);
            v322 = (uint8_t *)v493[0];
            if ((uint8_t *)v493[0] == v491)
            {
              v323 = 4;
              v322 = v491;
            }
            else
            {
              if (!v493[0])
                goto LABEL_379;
              v323 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)v322 + 8 * v323))();
LABEL_379:
            v324 = v512;
            if (v512 == &v511)
            {
              v325 = 4;
              v324 = &v511;
            }
            else
            {
              if (!v512)
              {
LABEL_384:
                v311 = v464;
                goto LABEL_385;
              }
              v325 = 5;
            }
            (*(void (**)(void))(v324->__r_.__value_.__r.__words[0] + 8 * v325))();
            goto LABEL_384;
          }
          v295 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v294 + 8 * v295))();
        goto LABEL_331;
      }
    }
    memmove(p_dst, v106, v94);
    goto LABEL_113;
  }
LABEL_40:
  v38 = *((_QWORD *)this + 33);
  *(_QWORD *)v491 = *((_QWORD *)this + 32);
  *(_QWORD *)&v491[8] = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *((_QWORD *)this + 35);
  v492 = *((_QWORD *)this + 34);
  v493[0] = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = (char *)*((_QWORD *)this + 37);
  v493[1] = *((_QWORD *)this + 36);
  v494 = v44;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v496 = 0;
  v495 = 0;
  v497 = 0;
  v48 = (_BYTE *)*((_QWORD *)this + 38);
  v47 = (_BYTE *)*((_QWORD *)this + 39);
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if ((v49 & 0x8000000000000000) != 0)
      abort();
    v495 = (char *)operator new(v47 - v48);
    v496 = v495;
    v50 = &v495[v49];
    v497 = &v495[v49];
    memcpy(v495, v48, v49);
    v496 = v50;
  }
  __p = *(_OWORD *)((char *)this + 328);
  *(_OWORD *)v499 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)&v499[9] = *(_OWORD *)((char *)this + 353);
  v502 = 0;
  v500 = 0;
  v501 = 0;
  v52 = (_BYTE *)*((_QWORD *)this + 47);
  v51 = (_BYTE *)*((_QWORD *)this + 48);
  v53 = v51 - v52;
  if (v51 != v52)
  {
    if (v53 < 0)
      abort();
    v54 = (char *)operator new(v51 - v52);
    v500 = v54;
    v501 = v54;
    v502 = &v54[8 * (v53 >> 3)];
    v55 = v53 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v54, v52, v55);
    v501 = &v54[v55];
  }
  v504 = 0;
  v503 = 0;
  v505 = 0;
  v57 = (_BYTE *)*((_QWORD *)this + 50);
  v56 = (_BYTE *)*((_QWORD *)this + 51);
  v58 = v56 - v57;
  if (v56 != v57)
  {
    if (v58 < 0)
      abort();
    v59 = (char *)operator new(v56 - v57);
    v503 = v59;
    v504 = v59;
    v505 = &v59[8 * (v58 >> 3)];
    v60 = v58 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v59, v57, v60);
    v504 = &v59[v60];
  }
  switch(*((_DWORD *)this + 274))
  {
    case 0:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xB:
      v61 = (uint64_t *)((char *)this + 424);
      if (!*((_QWORD *)this + 53))
      {
        if (*((_BYTE *)this + 181))
        {
          *((_BYTE *)&v511.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&v511, "default-snapshotter");
          v62 = *((float *)this + 30);
          v63 = *((unsigned __int8 *)this + 161);
          v64 = *((id *)this + 17);
          gss::StyleManagerExtension::initWithName<gss::PropertyID>((gss::Allocator **)&v471, (uint64_t)&v511, v63, v64, v62);
          v65 = v471;
          v471 = 0uLL;
          v66 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
          *(_OWORD *)v61 = v65;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v69 = (std::__shared_weak_count *)*((_QWORD *)&v471 + 1);
          if (*((_QWORD *)&v471 + 1))
          {
            v70 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
        }
        else
        {
          *((_BYTE *)&v511.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v511, "default");
          v124 = *((float *)this + 30);
          v125 = *((unsigned __int8 *)this + 161);
          v64 = *((id *)this + 17);
          gss::StyleManagerExtension::initWithName<gss::PropertyID>((gss::Allocator **)&v471, (uint64_t)&v511, v125, v64, v124);
          v126 = v471;
          v471 = 0uLL;
          v127 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
          *(_OWORD *)v61 = v126;
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          v130 = (std::__shared_weak_count *)*((_QWORD *)&v471 + 1);
          if (*((_QWORD *)&v471 + 1))
          {
            v131 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
        }

        if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v511.__r_.__value_.__l.__data_);
        md::StyleLogic::setupDecodingCallbacks(*((_QWORD *)this + 151), *((std::__shared_weak_count **)this + 152), (uint64_t **)this + 53);
      }
      if (*((_QWORD *)this + 55))
        goto LABEL_148;
      v134 = *((_QWORD *)this + 30);
      v133 = *((_QWORD *)this + 31);
      if (v133)
      {
        v135 = (unint64_t *)(v133 + 8);
        do
          v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }
      v103 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
      *((_QWORD *)this + 55) = v134;
      *((_QWORD *)this + 56) = v133;
      if (!v103)
        goto LABEL_148;
      v137 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldaxr(v137);
      while (__stlxr(v105 - 1, v137));
      goto LABEL_146;
    case 1:
    case 7:
      v61 = (uint64_t *)((char *)this + 760);
      if (*((_QWORD *)this + 95))
        goto LABEL_96;
      v281 = *((id *)this + 17);
      v282 = v281;
      if (v281)
      {
        objc_msgSend(v281, "stylesheetVendor");
        v283 = *(_QWORD *)buf;
      }
      else
      {
        v283 = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)buf = 0;
      }
      *((_BYTE *)&v511.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v511, "satellite");
      md::StylesheetVendor::stylesheetWithName<gss::PropertyID>(&v471, v283, (uint64_t)&v511, *((unsigned __int8 *)this + 161), *((float *)this + 30));
      if (SHIBYTE(v511.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v511.__r_.__value_.__l.__data_);
      v381 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v382 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v383 = __ldaxr(v382);
        while (__stlxr(v383 - 1, v382));
        if (!v383)
        {
          ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
          std::__shared_weak_count::__release_weak(v381);
        }
      }

      if ((_QWORD)v471)
      {
        *(_OWORD *)buf = v471;
        if (*((_QWORD *)&v471 + 1))
        {
          v384 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
          do
            v385 = __ldxr(v384);
          while (__stxr(v385 + 1, v384));
        }
        gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet((gss::Allocator **)&v511, (uint64_t *)buf);
        v386 = *(_OWORD *)&v511.__r_.__value_.__l.__data_;
        *(_OWORD *)&v511.__r_.__value_.__l.__data_ = 0uLL;
        v387 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
        *(_OWORD *)v61 = v386;
        if (v387)
        {
          v388 = (unint64_t *)&v387->__shared_owners_;
          do
            v389 = __ldaxr(v388);
          while (__stlxr(v389 - 1, v388));
          if (!v389)
          {
            ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
            std::__shared_weak_count::__release_weak(v387);
          }
        }
        v390 = (std::__shared_weak_count *)v511.__r_.__value_.__l.__size_;
        if (v511.__r_.__value_.__l.__size_)
        {
          v391 = (unint64_t *)(v511.__r_.__value_.__l.__size_ + 8);
          do
            v392 = __ldaxr(v391);
          while (__stlxr(v392 - 1, v391));
          if (!v392)
          {
            ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
            std::__shared_weak_count::__release_weak(v390);
          }
        }
        v393 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v394 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v395 = __ldaxr(v394);
          while (__stlxr(v395 - 1, v394));
          goto LABEL_492;
        }
      }
      else
      {
        v396 = md::StyleLogic::hybridContext(this);
        v398 = *v396;
        v397 = v396[1];
        if (v397)
        {
          v399 = (unint64_t *)(v397 + 1);
          do
            v400 = __ldxr(v399);
          while (__stxr(v400 + 1, v399));
        }
        *((_QWORD *)this + 95) = v398;
        v393 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
        *((_QWORD *)this + 96) = v397;
        if (v393)
        {
          v401 = (unint64_t *)&v393->__shared_owners_;
          do
            v395 = __ldaxr(v401);
          while (__stlxr(v395 - 1, v401));
LABEL_492:
          if (!v395)
          {
            ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
            std::__shared_weak_count::__release_weak(v393);
          }
        }
      }
      md::StyleLogic::setupDecodingCallbacks(*((_QWORD *)this + 151), *((std::__shared_weak_count **)this + 152), (uint64_t **)this + 95);
      v402 = (std::__shared_weak_count *)*((_QWORD *)&v471 + 1);
      if (*((_QWORD *)&v471 + 1))
      {
        v403 = (unint64_t *)(*((_QWORD *)&v471 + 1) + 8);
        do
          v404 = __ldaxr(v403);
        while (__stlxr(v404 - 1, v403));
        if (!v404)
        {
          ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
          std::__shared_weak_count::__release_weak(v402);
        }
      }
LABEL_96:
      if (!*((_QWORD *)this + 97))
      {
        v100 = *((_QWORD *)this + 30);
        v99 = *((_QWORD *)this + 31);
        if (v99)
        {
          v101 = (unint64_t *)(v99 + 8);
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
        }
        *((_QWORD *)this + 97) = v100;
        v103 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
        *((_QWORD *)this + 98) = v99;
        if (v103)
        {
          v104 = (unint64_t *)&v103->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
LABEL_146:
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
      }
LABEL_148:
      md::StyleLogicContext::operator=((uint64_t)this + 256, v61);
LABEL_149:
      v138 = *((_QWORD *)this + 32);
      v139 = *((_QWORD *)this + 26);
      v140 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldxr(v141);
        while (__stxr(v142 + 1, v141));
        do
          v143 = __ldxr(v141);
        while (__stxr(v143 + 1, v141));
      }
      *(_QWORD *)(v138 + 520) = v139;
      v144 = *(std::__shared_weak_count **)(v138 + 528);
      *(_QWORD *)(v138 + 528) = v140;
      if (v144)
      {
        v145 = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      if (v140)
      {
        v147 = (unint64_t *)&v140->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      v149 = *((_QWORD *)this + 34);
      if (v149)
      {
        v150 = *((_QWORD *)this + 28);
        v151 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
        if (v151)
        {
          v152 = (unint64_t *)&v151->__shared_owners_;
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 1, v152));
          do
            v154 = __ldxr(v152);
          while (__stxr(v154 + 1, v152));
        }
        *(_QWORD *)(v149 + 520) = v150;
        v155 = *(std::__shared_weak_count **)(v149 + 528);
        *(_QWORD *)(v149 + 528) = v151;
        if (v155)
        {
          v156 = (unint64_t *)&v155->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        if (v151)
        {
          v158 = (unint64_t *)&v151->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
        }
      }
      v161 = *((_QWORD *)this + 26);
      v160 = *((_QWORD *)this + 27);
      if (v160)
      {
        v162 = (unint64_t *)(v160 + 8);
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
      }
      v164 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
      *((_QWORD *)this + 36) = v161;
      *((_QWORD *)this + 37) = v160;
      if (!v164)
        goto LABEL_185;
      v165 = (unint64_t *)&v164->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
        v167 = *(_QWORD *)v491;
        if (*(_QWORD *)v491)
        {
LABEL_186:
          if (*((_QWORD *)this + 32) != v167)
          {
            v168 = *((_QWORD *)this + 26);
            objc_msgSend(*((id *)this + 19), "size");
            v170 = v169;
            objc_msgSend(*((id *)this + 19), "size");
            v172 = fmin(v171, v170);
            if (v172 <= 250.0)
            {
              v173 = 0;
            }
            else if (v172 <= 450.0)
            {
              v173 = 1;
            }
            else if (v172 <= 850.0)
            {
              v173 = 2;
            }
            else
            {
              v173 = 3;
            }
            gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v168, 0x10018u, v173);
            *((_QWORD *)this + 41) = __p;
            *((_BYTE *)this + 336) = 0;
            v511.__r_.__value_.__s.__data_[0] = 0;
            v180 = (char *)*((_QWORD *)this + 141);
            if (v180 == *((char **)this + 142) || *v180)
              std::vector<md::StyleManagerEvent>::insert((uint64_t)this + 1128, v180, (char *)&v511);
            v181 = *((id *)this + 145);
            v182 = v181;
            v183 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
            v457 = *((_QWORD *)this + 32);
            v458 = v183;
            if (v183)
            {
              v184 = (unint64_t *)&v183->__shared_owners_;
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            objc_msgSend(v181, "setStyleManager:", &v457);
            v186 = v458;
            if (v458)
            {
              v187 = (unint64_t *)&v458->__shared_owners_;
              do
                v188 = __ldaxr(v187);
              while (__stlxr(v188 - 1, v187));
              if (!v188)
              {
                ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                std::__shared_weak_count::__release_weak(v186);
              }
            }

          }
          goto LABEL_306;
        }
      }
      else
      {
LABEL_185:
        v167 = *(_QWORD *)v491;
        if (*(_QWORD *)v491)
          goto LABEL_186;
      }
      *(std::string::size_type *)((char *)v511.__r_.__value_.__r.__words + 7) = 0;
      v511.__r_.__value_.__r.__words[0] = 0;
      v511.__r_.__value_.__s.__data_[15] = 1;
      *(_QWORD *)((char *)&v471 + 7) = 0;
      *(_QWORD *)&v471 = 0;
      HIBYTE(v471) = 1;
      v174 = *((_QWORD *)this + 26);
      objc_msgSend(*((id *)this + 19), "size");
      v176 = v175;
      objc_msgSend(*((id *)this + 19), "size");
      v178 = fmin(v177, v176);
      if (v178 <= 250.0)
      {
        v179 = 0;
      }
      else if (v178 <= 450.0)
      {
        v179 = 1;
      }
      else if (v178 <= 850.0)
      {
        v179 = 2;
      }
      else
      {
        v179 = 3;
      }
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v174, 0x10018u, v179);
      gss::ClientStyleState<gss::PropertyID>::setSourceMapDisplayStyle(*((_QWORD *)this + 26), 0x1010000000000);
      gss::ClientStyleState<gss::PropertyID>::setTargetMapDisplayStyle(*((_QWORD *)this + 26), 0x1010000000000);
      v189 = *((_QWORD *)this + 26);
      v190 = atomic_load((unsigned int *)(v189 + 256));
      if ((v190 & 0x7FFFFFFF) == 0)
        goto LABEL_229;
      *(_DWORD *)(v189 + 256) = 0;
      v191 = COERCE_FLOAT(atomic_load((unsigned int *)(v189 + 256)));
      if (v191 > 0.0)
        goto LABEL_225;
      v192 = *(unsigned __int16 *)(v189 + 242);
      if ((_DWORD)v192 != *(unsigned __int16 *)(v189 + 226))
        goto LABEL_225;
      if (*(_WORD *)(v189 + 242))
      {
        v193 = *(_DWORD **)(v189 + 232);
        v194 = *(_DWORD **)(v189 + 216);
        if (*v193 == *v194
          && (v195 = *(unsigned __int16 *)(v189 + 224),
              v196 = *(unsigned __int16 *)(v189 + 240),
              *(unsigned __int16 *)((char *)v193 + v196) == *(unsigned __int16 *)((char *)v194 + v195)))
        {
          v197 = 0;
          v198 = v193 + 1;
          v199 = v194 + 1;
          v200 = (uint64_t)v193 + v196 + 2;
          v201 = (uint64_t)v194 + v195 + 2;
          while (v192 - 1 != v197)
          {
            v202 = v197++;
            if (v198[v202] != v199[v202])
              goto LABEL_561;
            if (*(unsigned __int16 *)(v200 + 2 * v202) != *(unsigned __int16 *)(v201 + 2 * v202))
            {
              v197 = v202 + 1;
              goto LABEL_561;
            }
          }
          v197 = *(unsigned __int16 *)(v189 + 242);
LABEL_561:
          LOBYTE(v192) = v197 < v192;
        }
        else
        {
LABEL_225:
          LOBYTE(v192) = 1;
        }
      }
      atomic_store(v192, (unsigned __int8 *)(v189 + 254));
      v203 = *(unsigned __int8 *)(v189 + 253);
      v204 = atomic_load((unsigned __int8 *)(v189 + 254));
      if (v203 != (v204 & 1))
      {
        v205 = atomic_load((unsigned __int8 *)(v189 + 254));
        *(_BYTE *)(v189 + 253) = v205 & 1;
        v206 = (unsigned int *)(v189 + 248);
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 + 1, v206));
      }
LABEL_229:
      v208 = *((_QWORD *)this + 26);
      *(_QWORD *)buf = v208 + 16;
      v209 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v208 + 16));
      if ((_DWORD)v209)
        geo::read_write_lock::logFailure((geo::read_write_lock *)v209, (uint64_t)"write lock", v210);
      v211 = WORD1(v511.__r_.__value_.__r.__words[1]);
      if (WORD1(v511.__r_.__value_.__r.__words[1]))
      {
        v212 = 0;
        v213 = 0;
        v214 = v511.__r_.__value_.__r.__words[0];
        v215 = v511.__r_.__value_.__r.__words[0] + LOWORD(v511.__r_.__value_.__r.__words[1]);
        do
        {
          if (v213 < v211)
          {
            v212 = (unsigned int *)(v214 + 4 * v213);
            v2 = (__int16 *)(v215 + 2 * v213);
          }
          v216 = *v2;
          v209 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v208 + 216), *v212);
          *(_WORD *)v209 = v216;
          v217 = v213 + 1;
          if (v213 + 1 < v211)
            ++v213;
          else
            v213 = v211;
        }
        while (v217 < v211);
      }
      if (!*(_BYTE *)(v208 + 230) && !*(_BYTE *)(v208 + 231))
      {
        v218 = *(_WORD *)(v208 + 228);
        v219 = (4 * v218) | 2;
        v220 = gss::Allocator::instance((gss::Allocator *)v209);
        v221 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v220 + 16))(v220, (unsigned __int16)(v219 + 2 * v218) & 0xFFFE, 1);
        if (*(_QWORD *)(v208 + 216))
        {
          geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v208 + 216, v221, (_DWORD *)((char *)v221 + v219), 1);
          v223 = gss::Allocator::instance(v222);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v223 + 40))(v223, *(_QWORD *)(v208 + 216), *(unsigned __int16 *)(v208 + 228));
        }
        *(_WORD *)(v208 + 228) = v218;
        *(_QWORD *)(v208 + 216) = v221;
        *(_WORD *)(v208 + 224) = v219;
      }
      v224 = COERCE_FLOAT(atomic_load((unsigned int *)(v208 + 256)));
      if (v224 > 0.0)
        goto LABEL_254;
      v225 = *(unsigned __int16 *)(v208 + 242);
      if ((_DWORD)v225 != *(unsigned __int16 *)(v208 + 226))
        goto LABEL_254;
      if (*(_WORD *)(v208 + 242))
      {
        v226 = *(_DWORD **)(v208 + 232);
        v227 = *(_DWORD **)(v208 + 216);
        if (*v226 == *v227
          && (v228 = (unsigned __int16 *)((char *)v227 + *(unsigned __int16 *)(v208 + 224)),
              v229 = (unsigned __int16 *)((char *)v226 + *(unsigned __int16 *)(v208 + 240)),
              *v229 == *v228))
        {
          v230 = 0;
          v231 = 1;
          while (1)
          {
            if (v225 == v231)
            {
              v232 = *(unsigned __int16 *)(v208 + 242);
              goto LABEL_523;
            }
            v232 = v231;
            ++v230;
            if (v226[v231] != v227[v231])
              break;
            ++v231;
            if (v229[v232] != v228[v232])
              goto LABEL_523;
          }
          v232 = v230;
LABEL_523:
          LOBYTE(v225) = v232 < v225;
        }
        else
        {
LABEL_254:
          LOBYTE(v225) = 1;
        }
      }
      atomic_store(v225, (unsigned __int8 *)(v208 + 254));
      v233 = (unsigned int *)(v208 + 248);
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 + 1, v233));
      v235 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)buf);
      if ((_DWORD)v235)
        geo::read_write_lock::logFailure(v235, (uint64_t)"unlock", v236);
      v237 = *((_QWORD *)this + 26);
      *(_QWORD *)buf = v237 + 16;
      v238 = pthread_rwlock_wrlock((pthread_rwlock_t *)(v237 + 16));
      if ((_DWORD)v238)
        geo::read_write_lock::logFailure((geo::read_write_lock *)v238, (uint64_t)"write lock", v239);
      v240 = WORD5(v471);
      if (WORD5(v471))
      {
        v241 = 0;
        v242 = 0;
        v243 = v471;
        v244 = v471 + WORD4(v471);
        do
        {
          if (v242 < v240)
          {
            v241 = (unsigned int *)(v243 + 4 * v242);
            v2 = (__int16 *)(v244 + 2 * v242);
          }
          v245 = *v2;
          v238 = geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((_QWORD *)(v237 + 232), *v241);
          *(_WORD *)v238 = v245;
          v246 = v242 + 1;
          if (v242 + 1 < v240)
            ++v242;
          else
            v242 = v240;
        }
        while (v246 < v240);
      }
      if (!*(_BYTE *)(v237 + 246) && !*(_BYTE *)(v237 + 247))
      {
        v247 = *(_WORD *)(v237 + 244);
        v248 = (4 * v247) | 2;
        v249 = gss::Allocator::instance((gss::Allocator *)v238);
        v250 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v249 + 16))(v249, (unsigned __int16)(v248 + 2 * v247) & 0xFFFE, 1);
        if (*(_QWORD *)(v237 + 232))
        {
          geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v237 + 232, v250, (_DWORD *)((char *)v250 + v248), 1);
          v252 = gss::Allocator::instance(v251);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v252 + 40))(v252, *(_QWORD *)(v237 + 232), *(unsigned __int16 *)(v237 + 244));
        }
        *(_WORD *)(v237 + 244) = v247;
        *(_QWORD *)(v237 + 232) = v250;
        *(_WORD *)(v237 + 240) = v248;
      }
      v253 = COERCE_FLOAT(atomic_load((unsigned int *)(v237 + 256)));
      if (v253 > 0.0)
        goto LABEL_284;
      v254 = *(unsigned __int16 *)(v237 + 242);
      if ((_DWORD)v254 != *(unsigned __int16 *)(v237 + 226))
        goto LABEL_284;
      if (*(_WORD *)(v237 + 242))
      {
        v255 = *(_DWORD **)(v237 + 232);
        v256 = *(_DWORD **)(v237 + 216);
        if (*v255 == *v256
          && (v257 = (unsigned __int16 *)((char *)v256 + *(unsigned __int16 *)(v237 + 224)),
              v258 = (unsigned __int16 *)((char *)v255 + *(unsigned __int16 *)(v237 + 240)),
              *v258 == *v257))
        {
          v259 = 0;
          v260 = 1;
          while (1)
          {
            if (v254 == v260)
            {
              v261 = *(unsigned __int16 *)(v237 + 242);
              goto LABEL_525;
            }
            v261 = v260;
            ++v259;
            if (v255[v260] != v256[v260])
              break;
            ++v260;
            if (v258[v261] != v257[v261])
              goto LABEL_525;
          }
          v261 = v259;
LABEL_525:
          LOBYTE(v254) = v261 < v254;
        }
        else
        {
LABEL_284:
          LOBYTE(v254) = 1;
        }
      }
      atomic_store(v254, (unsigned __int8 *)(v237 + 254));
      v262 = (unsigned int *)(v237 + 248);
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 + 1, v262));
      v264 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)buf);
      if ((_DWORD)v264)
        geo::read_write_lock::logFailure(v264, (uint64_t)"unlock", v265);
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10048u, 1);
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10049u, 0);
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10019u, *((unsigned __int8 *)this + 160));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10045u, *((unsigned __int8 *)this + 164));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10073u, *((unsigned __int8 *)this + 165));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x1003Du, *((unsigned __int8 *)this + 166));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10051u, *((unsigned __int8 *)this + 172));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10071u, *((unsigned __int8 *)this + 173));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10072u, *((unsigned __int8 *)this + 174));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x1007Eu, *((unsigned __int8 *)this + 175));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10078u, *((unsigned __int8 *)this + 162));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10077u, *((unsigned __int8 *)this + 163));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10080u, *((unsigned __int8 *)this + 177));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10082u, *((unsigned __int16 *)this + 552));
      gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*((_QWORD *)this + 26), 0x10083u, *((unsigned __int8 *)this + 178));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((_QWORD *)this + 28), 0x10077u, *((unsigned __int8 *)this + 163));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((_QWORD *)this + 28), 0x10078u, *((unsigned __int8 *)this + 162));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((_QWORD *)this + 28), 0x10082u, *((unsigned __int16 *)this + 552));
      gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*((_QWORD *)this + 28), 0x10083u, *((unsigned __int8 *)this + 178));
      buf[0] = 0;
      v266 = (char *)*((_QWORD *)this + 141);
      if (v266 == *((char **)this + 142) || *v266)
        std::vector<md::StyleManagerEvent>::insert((uint64_t)this + 1128, v266, (char *)buf);
      v267 = *((id *)this + 145);
      v268 = v267;
      v269 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
      v455 = *((_QWORD *)this + 32);
      v456 = v269;
      if (v269)
      {
        v270 = (unint64_t *)&v269->__shared_owners_;
        do
          v271 = __ldxr(v270);
        while (__stxr(v271 + 1, v270));
      }
      objc_msgSend(v267, "setStyleManager:", &v455);
      v272 = v456;
      if (v456)
      {
        v273 = (unint64_t *)&v456->__shared_owners_;
        do
          v274 = __ldaxr(v273);
        while (__stlxr(v274 - 1, v273));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
        }
      }

      if (!BYTE14(v471))
      {
        v276 = v471;
        if ((_QWORD)v471)
        {
          v277 = gss::Allocator::instance(v275);
          v275 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v277 + 40))(v277, v276, WORD6(v471));
        }
      }
      if (!v511.__r_.__value_.__s.__data_[14])
      {
        v278 = v511.__r_.__value_.__r.__words[0];
        if (v511.__r_.__value_.__r.__words[0])
        {
          v279 = gss::Allocator::instance(v275);
          (*(void (**)(uint64_t, std::string::size_type, _QWORD))(*(_QWORD *)v279 + 40))(v279, v278, WORD2(v511.__r_.__value_.__r.__words[1]));
        }
      }
LABEL_306:
      v280 = **((_QWORD **)this + 155);
      if (v280)
      {
        v511.__r_.__value_.__s.__data_[0] = 8;
        md::MapEngine::setNeedsTick(v280, &v511);
      }
      md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)v491);
      return;
    case 2:
      v96 = md::StyleLogic::hybridContext(this);
      goto LABEL_125;
    case 3:
    case 4:
    case 0xA:
      v96 = md::StyleLogic::globeContext(this);
LABEL_125:
      v61 = (uint64_t *)v96;
      goto LABEL_148;
    default:
      goto LABEL_149;
  }
}

void sub_19F171098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_unfair_lock_s *lock, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  std::__split_buffer<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>::~__split_buffer((uint64_t)&a53);
  std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>::~pair(v72 - 240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  if (a47 < 0)
    operator delete(__p);
  os_unfair_lock_unlock(lock);
  std::ostringstream::~ostringstream((uint64_t)&a72);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a38);

  if (a35 < 0)
  {
    operator delete(a30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19F171750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F171A64(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == (_QWORD *)(v2 - 88))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F171DCC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == (_QWORD *)(v2 - 88))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:

  _Unwind_Resume(a1);
}

void md::LogicManager::setLogicExecutionGraph(int8x8_t *a1, unint64_t ***a2)
{
  int8x8_t *v3;
  int8x8_t *v4;
  void *v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  char *v9;
  char *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *i;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  uint64_t **v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::streamsize v53;
  const std::ios_base *v54;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  int v57;
  const std::locale::facet *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  std::streamsize width;
  size_t v63;
  std::locale::__imp *p_b;
  uint64_t v65;
  uint64_t v66;
  void *locale;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  BOOL v73;
  char *v74;
  uint64_t v75;
  int v76;
  int v77;
  const std::locale::facet *v78;
  char *v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  size_t v83;
  std::locale::__imp *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  std::streamsize v97;
  const std::ios_base *v98;
  void *v99;
  std::ios_base::fmtflags v100;
  int v101;
  const std::locale::facet *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  std::streamsize v106;
  size_t v107;
  std::locale::__imp *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  int v119;
  int v120;
  const std::locale::facet *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  std::locale::__imp *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  NSObject *v135;
  size_t v136;
  void **v137;
  unint64_t v138;
  const void **v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void **v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  NSObject *v148;
  uint64_t **v149;
  int8x8_t *v150;
  uint64_t *v151;
  uint64_t **v152;
  _QWORD *v153;
  _QWORD *v154;
  void *__dst[2];
  int64_t v156;
  void *v157[2];
  void *v158[2];
  int v159;
  _QWORD v160[2];
  _QWORD v161[3];
  _QWORD v162[3];
  uint64_t v163;
  unint64_t v164;
  void *__p;
  char v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  _BYTE v170[16];
  std::locale __b;
  size_t v172;
  int64_t v173;
  uint8_t buf[4];
  void **v175;
  uint64_t v176;

  v3 = a1;
  v176 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 6;
  if (a1[9].i8[0])
  {
    v5 = (void *)*v4;
    if (*v4)
    {
      v3[7] = (int8x8_t)v5;
      operator delete(v5);
    }
    v3[9].i8[0] = 0;
  }
  *(_OWORD *)v157 = 0u;
  *(_OWORD *)v158 = 0u;
  v159 = 1065353216;
  v6 = **a2;
  v7 = (*a2)[1];
  v150 = v3;
  if (v6 == v7)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    goto LABEL_62;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = v3[2];
    if (!*(_QWORD *)&v11)
      break;
    v12 = *v6;
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = *v6;
      if (v12 >= *(_QWORD *)&v11)
        v14 = v12 % *(_QWORD *)&v11;
    }
    else
    {
      v14 = (*(_QWORD *)&v11 - 1) & v12;
    }
    v15 = *(_QWORD **)(*(_QWORD *)&v3[1] + 8 * v14);
    if (!v15)
      break;
    v16 = (_QWORD *)*v15;
    if (!v16)
      break;
    if (v13.u32[0] < 2uLL)
    {
      v17 = *(_QWORD *)&v11 - 1;
      while (1)
      {
        v19 = v16[1];
        if (v19 == v12)
        {
          if (v16[2] == v12)
            goto LABEL_28;
        }
        else if ((v19 & v17) != v14)
        {
          goto LABEL_59;
        }
        v16 = (_QWORD *)*v16;
        if (!v16)
          goto LABEL_59;
      }
    }
    while (1)
    {
      v18 = v16[1];
      if (v18 == v12)
        break;
      if (v18 >= *(_QWORD *)&v11)
        v18 %= *(_QWORD *)&v11;
      if (v18 != v14)
        goto LABEL_59;
LABEL_17:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_59;
    }
    if (v16[2] != v12)
      goto LABEL_17;
LABEL_28:
    v20 = v16[5];
    if (v9 < v10)
    {
      *(_QWORD *)v9 = v20;
      v9 += 8;
      goto LABEL_47;
    }
    v21 = (v9 - v8) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      abort();
    if ((v10 - v8) >> 2 > v22)
      v22 = (v10 - v8) >> 2;
    if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (!(v23 >> 61))
      {
        v24 = operator new(8 * v23);
        goto LABEL_40;
      }
LABEL_294:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v24 = 0;
LABEL_40:
    v25 = &v24[8 * v21];
    *(_QWORD *)v25 = v20;
    v26 = v25 + 8;
    if (v9 != v8)
    {
      v27 = v9 - 8 - v8;
      if (v27 < 0x168)
      {
        v28 = v9;
        goto LABEL_43;
      }
      if (&v24[v9 - v8 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v24[v9 - v8 - 8])
      {
        v28 = v9;
        goto LABEL_43;
      }
      if (&v9[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
      {
        v28 = v9;
        goto LABEL_43;
      }
      if ((unint64_t)(v8 - v24) < 0x20)
      {
        v28 = v9;
        goto LABEL_43;
      }
      v30 = (v27 >> 3) + 1;
      v28 = &v9[-8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      v31 = &v24[8 * v21 - 16];
      v32 = v9 - 16;
      v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *(_OWORD *)v32;
        *(v31 - 1) = *((_OWORD *)v32 - 1);
        *v31 = v34;
        v31 -= 2;
        v32 -= 32;
        v33 -= 4;
      }
      while (v33);
      v25 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_43:
          v29 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v25 - 1) = v29;
          v25 -= 8;
        }
        while (v28 != v8);
      }
    }
    v10 = &v24[8 * v23];
    if (v8)
    {
      v9 = v26;
      operator delete(v8);
      v8 = v25;
    }
    else
    {
      v8 = v25;
      v9 = v26;
    }
LABEL_47:
    std::__hash_table<gdc::TypeInfo,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,std::allocator<gdc::TypeInfo>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo const&>((float *)v157, *v6, (uint64_t)v6);
    v6 += 4;
    v3 = v150;
    if (v6 == v7)
    {
LABEL_62:
      for (i = (_QWORD *)v3[3]; i; i = (_QWORD *)*i)
      {
        if (v157[1])
        {
          v36 = i[2];
          v37 = (uint8x8_t)vcnt_s8((int8x8_t)v157[1]);
          v37.i16[0] = vaddlv_u8(v37);
          if (v37.u32[0] > 1uLL)
          {
            v38 = i[2];
            if ((void *)v36 >= v157[1])
              v38 = v36 % (unint64_t)v157[1];
          }
          else
          {
            v38 = ((unint64_t)v157[1] - 1) & v36;
          }
          v39 = (_QWORD *)*((_QWORD *)v157[0] + v38);
          if (v39)
          {
            v40 = (_QWORD *)*v39;
            if (v40)
            {
              if (v37.u32[0] < 2uLL)
              {
                while (1)
                {
                  v42 = v40[1];
                  if (v42 == v36)
                  {
                    if (v40[2] == v36)
                      goto LABEL_88;
                  }
                  else if ((v42 & ((unint64_t)v157[1] - 1)) != v38)
                  {
                    goto LABEL_86;
                  }
                  v40 = (_QWORD *)*v40;
                  if (!v40)
                    goto LABEL_86;
                }
              }
              do
              {
                v41 = v40[1];
                if (v41 == v36)
                {
                  if (v40[2] == v36)
                  {
LABEL_88:
                    v43 = i[5];
                    if (!*(_BYTE *)(v43 + 56))
                    {
                      *(_BYTE *)(v43 + 56) = 1;
                      v44 = 4;
LABEL_64:
                      (*(void (**)(void))(*(_QWORD *)v43 + 8 * v44))();
                    }
                    goto LABEL_65;
                  }
                }
                else
                {
                  if ((void *)v41 >= v157[1])
                    v41 %= (unint64_t)v157[1];
                  if (v41 != v38)
                    break;
                }
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
          }
        }
LABEL_86:
        v43 = i[5];
        if (*(_BYTE *)(v43 + 56))
        {
          *(_BYTE *)(v43 + 56) = 0;
          v44 = 5;
          goto LABEL_64;
        }
LABEL_65:
        ;
      }
      v3[10].i8[0] = 1;
      if (v3[9].i8[0])
      {
        v45 = (void *)*v4;
        if (*v4)
        {
          v3[7] = (int8x8_t)v45;
          operator delete(v45);
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
        }
        v3[6] = (int8x8_t)v8;
        v3[7] = (int8x8_t)v9;
        v3[8] = (int8x8_t)v10;
      }
      else
      {
        v3[6] = (int8x8_t)v8;
        v3[7] = (int8x8_t)v9;
        v3[8] = (int8x8_t)v10;
        v3[9].i8[0] = 1;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v46 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        goto LABEL_281;
      v148 = v46;
      if (!v3[9].i8[0])
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        goto LABEL_294;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v160);
      v47 = (uint64_t **)v3[6];
      v149 = (uint64_t **)v3[7];
      if (v47 != v149)
      {
        while (2)
        {
          v48 = *v47;
          if (*((_BYTE *)*v47 + 56))
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, v48[2], v48[3]);
            v151 = v48;
            v152 = v47;
            if (v48[11])
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)" (", 2);
              v49 = (_QWORD *)v48[9];
              v50 = v48 + 10;
              if (v49 != v50)
              {
                v153 = v50;
                do
                {
                  v52 = v49[4];
                  v51 = v49[5];
                  v53 = v49[6];
                  MEMORY[0x1A1AF49E0](v170, v161);
                  if (!v170[0])
                    goto LABEL_137;
                  v54 = (const std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24));
                  rdbuf = v54->__rdbuf_;
                  fmtflags = v54->__fmtflags_;
                  v57 = v54[1].__fmtflags_;
                  if (v57 == -1)
                  {
                    std::ios_base::getloc(v54);
                    v58 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                    v57 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 32);
                    std::locale::~locale(&__b);
                    v54[1].__fmtflags_ = v57;
                  }
                  v59 = fmtflags & 0xB0;
                  v60 = v51 + v53;
                  if (v59 == 32)
                    v61 = v51 + v53;
                  else
                    v61 = v51;
                  if (!rdbuf)
                    goto LABEL_136;
                  width = v54->__width_;
                  v63 = width <= v53 ? 0 : width - v53;
                  if (v61 - v51 >= 1
                    && (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v51, v61 - v51) != v61 - v51)
                  {
                    goto LABEL_136;
                  }
                  if ((uint64_t)v63 >= 1)
                  {
                    if (v63 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    if (v63 >= 0x17)
                    {
                      v65 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v63 | 7) != 0x17)
                        v65 = v63 | 7;
                      v66 = v65 + 1;
                      p_b = (std::locale::__imp *)operator new(v65 + 1);
                      v172 = v63;
                      v173 = v66 | 0x8000000000000000;
                      __b.__locale_ = p_b;
                    }
                    else
                    {
                      HIBYTE(v173) = v63;
                      p_b = (std::locale::__imp *)&__b;
                    }
                    memset(p_b, v57, v63);
                    *((_BYTE *)p_b + v63) = 0;
                    if (v173 >= 0)
                      locale = &__b;
                    else
                      locale = __b.__locale_;
                    v68 = (*(uint64_t (**)(void *, void *, size_t))(*(_QWORD *)rdbuf + 96))(rdbuf, locale, v63);
                    v69 = v68;
                    if (SHIBYTE(v173) < 0)
                    {
                      operator delete(__b.__locale_);
                      if (v69 != v63)
                        goto LABEL_136;
                    }
                    else if (v68 != v63)
                    {
                      goto LABEL_136;
                    }
                  }
                  if (v60 - v61 < 1
                    || (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v61, v60 - v61) == v60 - v61)
                  {
                    v54->__width_ = 0;
                    v50 = v153;
                    goto LABEL_137;
                  }
LABEL_136:
                  std::ios_base::clear((std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24)), *(_DWORD *)((char *)&v162[1] + *(_QWORD *)(v161[0] - 24)) | 5);
                  v50 = v153;
LABEL_137:
                  MEMORY[0x1A1AF49EC](v170);
                  v70 = (_QWORD *)*v50;
                  v71 = v50;
                  if (*v50)
                  {
                    do
                    {
                      v72 = v70;
                      v70 = (_QWORD *)v70[1];
                    }
                    while (v70);
                  }
                  else
                  {
                    do
                    {
                      v72 = (_QWORD *)v71[2];
                      v73 = *v72 == (_QWORD)v71;
                      v71 = v72;
                    }
                    while (v73);
                  }
                  if (v52 == v72[4])
                    goto LABEL_173;
                  MEMORY[0x1A1AF49E0](v170, v161);
                  if (v170[0])
                  {
                    v74 = (char *)v161 + *(_QWORD *)(v161[0] - 24);
                    v75 = *((_QWORD *)v74 + 5);
                    v76 = *((_DWORD *)v74 + 2);
                    v77 = *((_DWORD *)v74 + 36);
                    if (v77 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24)));
                      v78 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                      v77 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 32);
                      std::locale::~locale(&__b);
                      *((_DWORD *)v74 + 36) = v77;
                    }
                    if ((v76 & 0xB0) == 0x20)
                      v79 = "";
                    else
                      v79 = ", ";
                    if (!v75)
                      goto LABEL_171;
                    v80 = *((_QWORD *)v74 + 3);
                    v81 = v80 <= 2;
                    v82 = v80 - 2;
                    v83 = v81 ? 0 : v82;
                    if (v79 - ", " >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v75 + 96))(v75, ", ", v79 - ", ") != v79 - ", ")
                    {
                      goto LABEL_171;
                    }
                    if ((uint64_t)v83 >= 1)
                    {
                      if (v83 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v83 >= 0x17)
                      {
                        v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v83 | 7) != 0x17)
                          v85 = v83 | 7;
                        v86 = v85 + 1;
                        v84 = (std::locale::__imp *)operator new(v85 + 1);
                        v172 = v83;
                        v173 = v86 | 0x8000000000000000;
                        __b.__locale_ = v84;
                      }
                      else
                      {
                        HIBYTE(v173) = v83;
                        v84 = (std::locale::__imp *)&__b;
                      }
                      memset(v84, v77, v83);
                      *((_BYTE *)v84 + v83) = 0;
                      if (v173 >= 0)
                        v87 = &__b;
                      else
                        v87 = __b.__locale_;
                      v88 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v75 + 96))(v75, v87, v83);
                      v89 = v88;
                      if (SHIBYTE(v173) < 0)
                      {
                        operator delete(__b.__locale_);
                        if (v89 != v83)
                          goto LABEL_171;
                      }
                      else if (v88 != v83)
                      {
                        goto LABEL_171;
                      }
                    }
                    v90 = ", " - v79 + 2;
                    if (v90 >= 1
                      && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v75 + 96))(v75, v79, ", " - v79 + 2) != v90)
                    {
LABEL_171:
                      std::ios_base::clear((std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24)), *(_DWORD *)((char *)&v162[1] + *(_QWORD *)(v161[0] - 24)) | 5);
                      v50 = v153;
                      goto LABEL_172;
                    }
                    *((_QWORD *)v74 + 3) = 0;
                    v50 = v153;
                  }
LABEL_172:
                  MEMORY[0x1A1AF49EC](v170);
LABEL_173:
                  v91 = (_QWORD *)v49[1];
                  if (v91)
                  {
                    do
                    {
                      v92 = v91;
                      v91 = (_QWORD *)*v91;
                    }
                    while (v91);
                  }
                  else
                  {
                    do
                    {
                      v92 = (_QWORD *)v49[2];
                      v73 = *v92 == (_QWORD)v49;
                      v49 = v92;
                    }
                    while (!v73);
                  }
                  v49 = v92;
                }
                while (v92 != v50);
              }
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)")", 1);
              v3 = v150;
              v48 = v151;
              v47 = v152;
            }
            if (v48[14])
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)", (", 3);
              v93 = (_QWORD *)v48[12];
              v94 = v48 + 13;
              if (v93 != v94)
              {
                v154 = v94;
                do
                {
                  v96 = v93[4];
                  v95 = v93[5];
                  v97 = v93[6];
                  MEMORY[0x1A1AF49E0](v170, v161);
                  if (!v170[0])
                    goto LABEL_214;
                  v98 = (const std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24));
                  v99 = v98->__rdbuf_;
                  v100 = v98->__fmtflags_;
                  v101 = v98[1].__fmtflags_;
                  if (v101 == -1)
                  {
                    std::ios_base::getloc(v98);
                    v102 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                    v101 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 32);
                    std::locale::~locale(&__b);
                    v98[1].__fmtflags_ = v101;
                  }
                  v103 = v100 & 0xB0;
                  v104 = v95 + v97;
                  if (v103 == 32)
                    v105 = v95 + v97;
                  else
                    v105 = v95;
                  if (!v99)
                    goto LABEL_213;
                  v106 = v98->__width_;
                  v107 = v106 <= v97 ? 0 : v106 - v97;
                  if (v105 - v95 >= 1
                    && (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v99 + 96))(v99, v95, v105 - v95) != v105 - v95)
                  {
                    goto LABEL_213;
                  }
                  if ((uint64_t)v107 >= 1)
                  {
                    if (v107 > 0x7FFFFFFFFFFFFFF7)
                      abort();
                    if (v107 >= 0x17)
                    {
                      v109 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v107 | 7) != 0x17)
                        v109 = v107 | 7;
                      v110 = v109 + 1;
                      v108 = (std::locale::__imp *)operator new(v109 + 1);
                      v172 = v107;
                      v173 = v110 | 0x8000000000000000;
                      __b.__locale_ = v108;
                    }
                    else
                    {
                      HIBYTE(v173) = v107;
                      v108 = (std::locale::__imp *)&__b;
                    }
                    memset(v108, v101, v107);
                    *((_BYTE *)v108 + v107) = 0;
                    if (v173 >= 0)
                      v111 = &__b;
                    else
                      v111 = __b.__locale_;
                    v112 = (*(uint64_t (**)(void *, void *, size_t))(*(_QWORD *)v99 + 96))(v99, v111, v107);
                    v113 = v112;
                    if (SHIBYTE(v173) < 0)
                    {
                      operator delete(__b.__locale_);
                      if (v113 != v107)
                        goto LABEL_213;
                    }
                    else if (v112 != v107)
                    {
                      goto LABEL_213;
                    }
                  }
                  if (v104 - v105 < 1
                    || (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v99 + 96))(v99, v105, v104 - v105) == v104 - v105)
                  {
                    v98->__width_ = 0;
                    v94 = v154;
                    goto LABEL_214;
                  }
LABEL_213:
                  std::ios_base::clear((std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24)), *(_DWORD *)((char *)&v162[1] + *(_QWORD *)(v161[0] - 24)) | 5);
                  v94 = v154;
LABEL_214:
                  MEMORY[0x1A1AF49EC](v170);
                  v114 = (_QWORD *)*v94;
                  v115 = v94;
                  if (*v94)
                  {
                    do
                    {
                      v116 = v114;
                      v114 = (_QWORD *)v114[1];
                    }
                    while (v114);
                  }
                  else
                  {
                    do
                    {
                      v116 = (_QWORD *)v115[2];
                      v73 = *v116 == (_QWORD)v115;
                      v115 = v116;
                    }
                    while (v73);
                  }
                  if (v96 == v116[4])
                    goto LABEL_250;
                  MEMORY[0x1A1AF49E0](v170, v161);
                  if (v170[0])
                  {
                    v117 = (char *)v161 + *(_QWORD *)(v161[0] - 24);
                    v118 = *((_QWORD *)v117 + 5);
                    v119 = *((_DWORD *)v117 + 2);
                    v120 = *((_DWORD *)v117 + 36);
                    if (v120 == -1)
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24)));
                      v121 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
                      v120 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v121->__vftable[2].~facet_0)(v121, 32);
                      std::locale::~locale(&__b);
                      *((_DWORD *)v117 + 36) = v120;
                    }
                    if ((v119 & 0xB0) == 0x20)
                      v122 = "";
                    else
                      v122 = ", ";
                    if (!v118)
                      goto LABEL_248;
                    v123 = *((_QWORD *)v117 + 3);
                    v81 = v123 <= 2;
                    v124 = v123 - 2;
                    v125 = v81 ? 0 : v124;
                    if (v122 - ", " >= 1
                      && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v118 + 96))(v118, ", ", v122 - ", ") != v122 - ", ")
                    {
                      goto LABEL_248;
                    }
                    if ((uint64_t)v125 >= 1)
                    {
                      if (v125 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v125 >= 0x17)
                      {
                        v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v125 | 7) != 0x17)
                          v127 = v125 | 7;
                        v128 = v127 + 1;
                        v126 = (std::locale::__imp *)operator new(v127 + 1);
                        v172 = v125;
                        v173 = v128 | 0x8000000000000000;
                        __b.__locale_ = v126;
                      }
                      else
                      {
                        HIBYTE(v173) = v125;
                        v126 = (std::locale::__imp *)&__b;
                      }
                      memset(v126, v120, v125);
                      *((_BYTE *)v126 + v125) = 0;
                      if (v173 >= 0)
                        v129 = &__b;
                      else
                        v129 = __b.__locale_;
                      v130 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v118 + 96))(v118, v129, v125);
                      v131 = v130;
                      if (SHIBYTE(v173) < 0)
                      {
                        operator delete(__b.__locale_);
                        if (v131 != v125)
                          goto LABEL_248;
                      }
                      else if (v130 != v125)
                      {
                        goto LABEL_248;
                      }
                    }
                    v132 = ", " - v122 + 2;
                    if (v132 >= 1
                      && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v118 + 96))(v118, v122, ", " - v122 + 2) != v132)
                    {
LABEL_248:
                      std::ios_base::clear((std::ios_base *)((char *)v161 + *(_QWORD *)(v161[0] - 24)), *(_DWORD *)((char *)&v162[1] + *(_QWORD *)(v161[0] - 24)) | 5);
                      v94 = v154;
                      goto LABEL_249;
                    }
                    *((_QWORD *)v117 + 3) = 0;
                    v94 = v154;
                  }
LABEL_249:
                  MEMORY[0x1A1AF49EC](v170);
LABEL_250:
                  v133 = (_QWORD *)v93[1];
                  if (v133)
                  {
                    do
                    {
                      v134 = v133;
                      v133 = (_QWORD *)*v133;
                    }
                    while (v133);
                  }
                  else
                  {
                    do
                    {
                      v134 = (_QWORD *)v93[2];
                      v73 = *v134 == (_QWORD)v93;
                      v93 = v134;
                    }
                    while (!v73);
                  }
                  v93 = v134;
                }
                while (v134 != v94);
              }
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)")", 1);
              v3 = v150;
              v48 = v151;
              v47 = v152;
            }
            if (v48 != *(uint64_t **)(*(_QWORD *)&v3[7] - 8))
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v161, (uint64_t)", ", 2);
          }
          if (++v47 == v149)
            break;
          continue;
        }
      }
      if ((v168 & 0x10) != 0)
      {
        v138 = v167;
        v135 = v148;
        if (v167 < v164)
        {
          v167 = v164;
          v138 = v164;
        }
        v139 = (const void **)&v163;
      }
      else
      {
        v135 = v148;
        if ((v168 & 8) == 0)
        {
          v136 = 0;
          HIBYTE(v156) = 0;
          v137 = __dst;
          goto LABEL_274;
        }
        v139 = (const void **)v162;
        v138 = v162[2];
      }
      v140 = *v139;
      v136 = v138 - (_QWORD)*v139;
      if (v136 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v136 >= 0x17)
      {
        v141 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v136 | 7) != 0x17)
          v141 = v136 | 7;
        v142 = v141 + 1;
        v137 = (void **)operator new(v141 + 1);
        __dst[1] = (void *)v136;
        v156 = v142 | 0x8000000000000000;
        __dst[0] = v137;
      }
      else
      {
        HIBYTE(v156) = v138 - *(_BYTE *)v139;
        v137 = __dst;
        if (!v136)
        {
LABEL_274:
          *((_BYTE *)v137 + v136) = 0;
          v160[0] = *MEMORY[0x1E0DE4F50];
          v143 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          *(_QWORD *)((char *)v160 + *(_QWORD *)(v160[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          v161[0] = v143;
          v161[1] = MEMORY[0x1E0DE4FB8] + 16;
          if (v166 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1A1AF4D64](&v169);
          v144 = __dst;
          if (v156 < 0)
            v144 = (void **)__dst[0];
          *(_DWORD *)buf = 136315138;
          v175 = v144;
          _os_log_impl(&dword_19F029000, v135, OS_LOG_TYPE_INFO, "Current active logic execution order:%s", buf, 0xCu);
          if (SHIBYTE(v156) < 0)
            operator delete(__dst[0]);
          v46 = v148;
LABEL_281:

          goto LABEL_282;
        }
      }
      memmove(v137, v140, v136);
      goto LABEL_274;
    }
  }
LABEL_59:
  if (v8)
    operator delete(v8);
LABEL_282:
  v145 = v158[0];
  if (v158[0])
  {
    do
    {
      v146 = (_QWORD *)*v145;
      operator delete(v145);
      v145 = v146;
    }
    while (v146);
  }
  v147 = v157[0];
  v157[0] = 0;
  if (v147)
    operator delete(v147);
}

void sub_19F1730AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;

  if (v25)
    operator delete(v25);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::__hash_table<gdc::TypeInfo,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,std::allocator<gdc::TypeInfo>>::__emplace_unique_key_args<gdc::TypeInfo,gdc::TypeInfo const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  v13[4] = *(_QWORD *)(a3 + 16);
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
      goto LABEL_59;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_64:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v5] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F1735D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void gss::StyleManagerExtension::initWithName<gss::PropertyID>(gss::Allocator **a1, uint64_t a2, unsigned int a3, void *a4, float a5)
{
  id v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v9 = a4;
  objc_msgSend(v9, "stylesheetVendor");
  gss::StyleManagerExtension::initWithName<gss::PropertyID>(a1, a2, a3, v12, a5);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)())v13->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v13);
    }
  }

}

void sub_19F17369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void gss::StyleManagerExtension::initWithName<gss::PropertyID>(gss::Allocator **a1, uint64_t a2, unsigned int a3, uint64_t a4, float a5)
{
  char v5;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char BOOL;
  uint8_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34[2];
  __int128 v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint8_t buf[16];
  uint8_t *v39;
  uint64_t v40;

  v5 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  md::StylesheetVendor::stylesheetWithName<gss::PropertyID>(&v35, a4, a2, a3, a5);
  v9 = v35;
  if (!(_QWORD)v35)
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
    v10 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "stylesheetVendor returned null styleSheet for %s", buf, 0xCu);
    }

    _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_10PropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
    v12 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    v35 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v34[0] = 0;
    v34[1] = 0;
    v33[0] = 0;
    v33[1] = 0;
    BOOL = GEOConfigGetBOOL();
    v36[0] = &off_1E42D8318;
    v37 = v36;
    v39 = buf;
    *(_QWORD *)buf = &off_1E42D8318;
    gss::StyleSheet<gss::PropertyID>::construct(v35, 0, 0, (void **)a2, v5, 0, v34, v33, a5, BOOL, buf);
    v20 = v39;
    if (v39 == buf)
    {
      v21 = 4;
      v20 = buf;
    }
    else
    {
      if (!v39)
        goto LABEL_24;
      v21 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_24:
    v22 = v37;
    if (v37 == v36)
    {
      v23 = 4;
      v22 = v36;
    }
    else
    {
      if (!v37)
      {
LABEL_29:
        v9 = v35;
        goto LABEL_30;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_29;
  }
LABEL_30:
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  v32[0] = v9;
  v32[1] = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet(a1, v32);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_19F1739B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v25 = *(_QWORD **)(v23 - 72);
  if (v25 == v22)
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 96);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  v27 = a22;
  if (a22 == &a19)
  {
    v28 = 4;
    v27 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_11:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::PropertyID>::initWithStyleSheet(gss::Allocator **a1, uint64_t *a2)
{
  gss::Allocator *v4;
  gss::Allocator *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  gss::Allocator *v12;
  gss::Allocator *v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  geo::read_write_lock *v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;

  if (!*a2)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v4 = (gss::Allocator *)operator new();
  v5 = v4;
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v31 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = v7;
    *((_QWORD *)v4 + 3) = v6;
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = v7;
    *((_QWORD *)v4 + 3) = 0;
  }
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  v12 = (gss::Allocator *)gss::Allocator::instance(v4);
  *((_QWORD *)v5 + 6) = v12;
  *((_QWORD *)v5 + 7) = 0;
  v13 = (gss::Allocator *)gss::Allocator::instance(v12);
  *((_QWORD *)v5 + 8) = v13;
  *((_QWORD *)v5 + 9) = 0;
  *((_DWORD *)v5 + 20) = 1065353216;
  *((_QWORD *)v5 + 11) = 0;
  *((_QWORD *)v5 + 12) = 0;
  *((_QWORD *)v5 + 13) = 0;
  v14 = gss::Allocator::instance(v13);
  *(_OWORD *)((char *)v5 + 120) = 0u;
  *((_QWORD *)v5 + 14) = v14;
  *(_OWORD *)((char *)v5 + 136) = 0u;
  *(_OWORD *)((char *)v5 + 152) = 0u;
  *(_OWORD *)((char *)v5 + 168) = 0u;
  *(_OWORD *)((char *)v5 + 184) = 0u;
  *(_OWORD *)((char *)v5 + 200) = 0u;
  *(_OWORD *)((char *)v5 + 216) = 0u;
  *(_OWORD *)((char *)v5 + 232) = 0u;
  *(_OWORD *)((char *)v5 + 248) = 0u;
  *(_OWORD *)((char *)v5 + 264) = 0u;
  *(_OWORD *)((char *)v5 + 280) = 0u;
  *(_OWORD *)((char *)v5 + 296) = 0u;
  *((_QWORD *)v5 + 39) = 0;
  v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)((char *)v5 + 120), 0);
  if ((_DWORD)v15)
    geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
  *((_QWORD *)v5 + 64) = 0;
  *((_OWORD *)v5 + 30) = 0u;
  *((_OWORD *)v5 + 31) = 0u;
  *((_OWORD *)v5 + 28) = 0u;
  *((_OWORD *)v5 + 29) = 0u;
  *((_OWORD *)v5 + 26) = 0u;
  *((_OWORD *)v5 + 27) = 0u;
  *((_OWORD *)v5 + 24) = 0u;
  *((_OWORD *)v5 + 25) = 0u;
  *((_OWORD *)v5 + 22) = 0u;
  *((_OWORD *)v5 + 23) = 0u;
  *((_OWORD *)v5 + 20) = 0u;
  *((_OWORD *)v5 + 21) = 0u;
  v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)((char *)v5 + 320), 0);
  if ((_DWORD)v17)
    geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
  *(_OWORD *)((char *)v5 + 520) = 0u;
  *a1 = v5;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E8088;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a1[1] = (gss::Allocator *)v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
  if (!v21)
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
    *(_QWORD *)v5 = v5;
    *((_QWORD *)v5 + 1) = v19;
    do
LABEL_24:
      v28 = __ldaxr(v20);
    while (__stlxr(v28 - 1, v20));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_27;
  }
  if (v21->__shared_owners_ == -1)
  {
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    v23 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *(_QWORD *)v5 = v5;
    *((_QWORD *)v5 + 1) = v19;
    std::__shared_weak_count::__release_weak(v21);
    goto LABEL_24;
  }
LABEL_27:
  if (v31)
  {
    v29 = (unint64_t *)&v31->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_19F173D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::unique_ptr<gss::StylesheetManager<gss::PropertyID>>::~unique_ptr[abi:nn180100]((uint64_t *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F173D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  pthread_rwlock_t *v14;
  std::__shared_weak_count *v16;

  geo::read_write_lock::~read_write_lock(v14);
  std::vector<std::weak_ptr<gss::FeatureQueryImpl<gss::PropertyID>>,geo::StdAllocator<std::weak_ptr<gss::FeatureQueryImpl<gss::PropertyID>>,gss::Allocator>>::~vector[abi:nn180100](v13);
  std::__hash_table<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleKey,std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<gss::StyleKey>,std::equal_to<gss::StyleKey>,true>,std::__unordered_map_equal<gss::StyleKey,std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<gss::StyleKey>,std::hash<gss::StyleKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,gss::Allocator>>::~__hash_table(v12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v11);
  v16 = *(std::__shared_weak_count **)(v10 + 8);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x1A1AF4E00](v10, 0x10A0C40DB985E3BLL);
  _Unwind_Resume(a1);
}

uint64_t md::StylesheetVendor::stylesheetWithName<gss::PropertyID>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  int v14;
  const std::string::value_type *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  size_t v19;
  os_unfair_lock_s *v20;
  std::string::size_type v21;
  std::string *p_dst;
  unint64_t v23;
  const void **v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  id v34;
  std::string::size_type v35;
  id v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  void *v42;
  int v43;
  const std::string::value_type *v44;
  uint64_t v45;
  const std::string::value_type *v46;
  id v47;
  char *v48;
  void *v49;
  std::string *v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::string::value_type v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::string *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  std::string::size_type v91;
  std::string *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, void *, void *);
  void (*v97)(uint64_t, void *, void *);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __int128 v101;
  void (*v102)(uint64_t, void *, void *);
  std::string *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char BOOL;
  uint64_t v111;
  id v112;
  id v113;
  std::__shared_weak_count *v114;
  id v115;
  void (**v116)(_QWORD, _QWORD);
  os_unfair_lock_s *v117;
  std::string __dst;
  std::string::value_type v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  uint64_t v124;
  unint64_t v125;
  void *__p[2];
  __int128 v127;
  int v128;
  uint64_t v129[19];
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::string v134;
  void *v135;
  id v136;
  std::__shared_weak_count *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  char v141;
  std::string *v142;
  uint64_t v143;
  void (*v144)(uint64_t, void *, void *);
  std::string *v145;
  id v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  float v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t);
  void (*v155)(uint64_t);
  id v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t);
  void (*v161)(uint64_t);
  id v162;
  uint8_t buf[24];
  std::string v164;
  id v165;
  _BYTE v166[24];
  char *v167;
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v9 = MEMORY[0x1E0DE4FE0];
  v10 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v129[0] = MEMORY[0x1E0DE4FE0] + 64;
  v121 = v11;
  *(uint64_t *)((char *)&v121 + *(_QWORD *)(v11 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v121 + *(_QWORD *)(v121 - 24));
  std::ios_base::init(v13, &v122);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v121 = v9 + 24;
  v129[0] = v10;
  std::streambuf::basic_streambuf();
  v122 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v127 = 0u;
  v128 = 16;
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v121, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v121, (uint64_t)"_", 1);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"_", 1);
  v18 = gss::to_string(a4);
  v19 = strlen(v18);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  v20 = (os_unfair_lock_s *)(a2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 24));
  if ((v128 & 0x10) != 0)
  {
    v23 = *((_QWORD *)&v127 + 1);
    if (*((_QWORD *)&v127 + 1) < v125)
    {
      *((_QWORD *)&v127 + 1) = v125;
      v23 = v125;
    }
    v24 = (const void **)&v124;
  }
  else
  {
    if ((v128 & 8) == 0)
    {
      v21 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_22;
    }
    v24 = (const void **)v123;
    v23 = v123[2];
  }
  v25 = *v24;
  v21 = v23 - (_QWORD)*v24;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v21 >= 0x17)
  {
    v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v26 = v21 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    v20 = (os_unfair_lock_s *)(a2 + 24);
    goto LABEL_21;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23 - *(_BYTE *)v24;
  p_dst = &__dst;
  if (v21)
LABEL_21:
    memmove(p_dst, v25, v21);
LABEL_22:
  p_dst->__r_.__value_.__s.__data_[v21] = 0;
  v120 = 0;
  v28 = *(unsigned __int8 **)(a2 + 48);
  v29 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(*(unsigned __int8 **)(a2 + 40), v28, (unsigned __int8 *)&__dst);
  if (v28 != v29)
  {
    *a1 = *((_QWORD *)v29 + 4);
    v30 = *((_QWORD *)v29 + 5);
    a1[1] = v30;
    v31 = MEMORY[0x1E0DE4FB8];
    if (v30)
    {
      v32 = (unint64_t *)(v30 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    goto LABEL_75;
  }
  v117 = v20;
  v34 = *(id *)(a2 + 16);
  v157 = 0;
  v158 = &v157;
  v159 = 0x3032000000;
  v160 = __Block_byref_object_copy__6039;
  v161 = __Block_byref_object_dispose__6040;
  v162 = 0;
  v151 = 0;
  v152 = &v151;
  v153 = 0x3032000000;
  v154 = __Block_byref_object_copy__6039;
  v155 = __Block_byref_object_dispose__6040;
  v156 = 0;
  v35 = MEMORY[0x1E0C809B0];
  v142 = (std::string *)MEMORY[0x1E0C809B0];
  v143 = 3221225472;
  v144 = ___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke;
  v145 = (std::string *)&unk_1E42F3C00;
  v147 = &v151;
  v149 = a3;
  v36 = v34;
  v150 = a5;
  v146 = v36;
  v148 = &v157;
  v37 = (void *)MEMORY[0x1A1AF5730](&v142);
  v134.__r_.__value_.__r.__words[0] = v35;
  v134.__r_.__value_.__l.__size_ = 3221225472;
  v134.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN2md19StyleSheetExtension12initWithNameIN3gss10PropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4;
  v135 = &unk_1E42F3C28;
  v141 = a4;
  v114 = v37;
  v137 = v114;
  v138 = &v157;
  v139 = &v151;
  v140 = a3;
  v115 = v36;
  v136 = v115;
  v116 = (void (**)(_QWORD, _QWORD))MEMORY[0x1A1AF5730](&v134);
  ((void (**)(_QWORD, const __CFString *))v116)[2](v116, CFSTR("styl"));
  *a1 = 0;
  a1[1] = 0;
  if (v158[5])
  {
    _ZNSt3__115allocate_sharedB8nn180100IN3gss10StyleSheetINS1_10PropertyIDEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
    v111 = *(_QWORD *)buf;
    *(_OWORD *)a1 = *(_OWORD *)buf;
    v38 = objc_msgSend(v115, "isDevResourceWithName:", v152[5]);
    v112 = (id)v158[5];
    if ((_DWORD)VectorKitDebugConfig_DecodeStyleNames && *((_QWORD *)&VectorKitDebugConfig_DecodeStyleNames + 1))
      BOOL = GEOConfigGetBOOL();
    v113 = (id)v152[5];
    v39 = objc_msgSend(objc_retainAutorelease((id)v158[5]), "bytes");
    v40 = objc_msgSend((id)v158[5], "length");
    md::StyleSheetExtension::localizationMap((md::StyleSheetExtension *)&v132, (md::StylesheetVendor *)a2);
    md::StyleSheetExtension::currencyMap((md::StyleSheetExtension *)&v130, (md::StylesheetVendor *)a2);
    *(_QWORD *)buf = &off_1E42B5310;
    *(_QWORD *)&buf[8] = 0;
    v41 = v112;
    v42 = *(void **)&buf[8];
    *(_QWORD *)&buf[8] = v41;

    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v164 = *(std::string *)a3;
    v47 = v113;
    v165 = v47;
    v167 = 0;
    v48 = (char *)operator new(0x40uLL);
    *(_QWORD *)v48 = off_1E42D0310;
    *((_QWORD *)v48 + 1) = &off_1E42B5310;
    *((_QWORD *)v48 + 2) = 0;
    objc_storeStrong((id *)v48 + 2, *(id *)&buf[8]);
    v49 = *(void **)&buf[8];
    *(_QWORD *)&buf[8] = 0;

    v50 = (std::string *)(v48 + 32);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v50, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)&v164.__r_.__value_.__l.__data_;
      *((_QWORD *)v48 + 6) = *((_QWORD *)&v164.__r_.__value_.__l + 2);
    }
    v51 = v165;
    v165 = 0;
    *((_QWORD *)v48 + 7) = v51;
    v167 = v48;
    v169 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v48 + 16))(v48);
    gss::StyleSheet<gss::PropertyID>::construct(v111, v39, v40, (void **)a3, a4, v38, &v132, &v130, a5, BOOL & 1, v168);
    v52 = v169;
    if (v169 == v168)
    {
      v53 = 4;
      v52 = v168;
    }
    else
    {
      if (!v169)
        goto LABEL_49;
      v53 = 5;
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_49:
    v54 = v167;
    if (v167 == v166)
    {
      v55 = 4;
      v54 = v166;
    }
    else
    {
      if (!v167)
      {
LABEL_54:

        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        *(_QWORD *)buf = &off_1E42B5310;

        v56 = v131;
        if (v131)
        {
          p_shared_owners = (unint64_t *)&v131->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v133;
        if (v133)
        {
          v60 = (unint64_t *)&v133->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }

        goto LABEL_67;
      }
      v55 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
    goto LABEL_54;
  }
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
  v41 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    v43 = *(char *)(a3 + 23);
    v44 = *(const std::string::value_type **)a3;
    v45 = objc_msgSend(objc_retainAutorelease((id)v152[5]), "UTF8String");
    if (v43 >= 0)
      v46 = (const std::string::value_type *)a3;
    else
      v46 = v44;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v45;
    _os_log_impl(&dword_19F029000, v41, OS_LOG_TYPE_ERROR, "Couldn't find %s.styl in framework, file name %s", buf, 0x16u);
  }
LABEL_67:

  _Block_object_dispose(&v151, 8);
  _Block_object_dispose(&v157, 8);

  v63 = *(unsigned __int8 **)(a2 + 40);
  v62 = *(std::string **)(a2 + 48);
  v64 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v63, (unsigned __int8 *)v62, (unsigned __int8 *)&__dst);
  v20 = v117;
  if (v62 == (std::string *)v64)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v134, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      v63 = *(unsigned __int8 **)(a2 + 40);
      v62 = *(std::string **)(a2 + 48);
    }
    else
    {
      v134 = __dst;
    }
    v73 = v120;
    LOBYTE(v135) = v120;
    v136 = 0;
    v137 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v64 = geo::linear_map<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>,std::equal_to<md::StylesheetKey>,std::allocator<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>,std::vector<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>>::find(v63, (unsigned __int8 *)v62, (unsigned __int8 *)&v134);
    if (v62 == (std::string *)v64)
    {
      v77 = *(_QWORD *)(a2 + 56);
      if (v77 <= (unint64_t)v62)
      {
        v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v63) >> 4);
        v80 = v79 + 1;
        if (v79 + 1 > 0x555555555555555)
          abort();
        v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (_QWORD)v63) >> 4);
        if (2 * v81 > v80)
          v80 = 2 * v81;
        if (v81 >= 0x2AAAAAAAAAAAAAALL)
          v82 = 0x555555555555555;
        else
          v82 = v80;
        v146 = (id)(a2 + 56);
        if (v82)
        {
          if (v82 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v83 = (std::string *)operator new(48 * v82);
        }
        else
        {
          v83 = 0;
        }
        v88 = v83 + 2 * v79;
        v142 = v83;
        v143 = (uint64_t)v88;
        v144 = (void (*)(uint64_t, void *, void *))v88;
        v145 = &v83[2 * v82];
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v83 + 2 * v79, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
          v91 = (std::string::size_type)v136;
          v90 = v137;
          v88[1].__r_.__value_.__s.__data_[0] = (char)v135;
          v92 = v83 + 2 * v79;
          v92[1].__r_.__value_.__l.__size_ = v91;
          v92[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v90;
          if (v90)
          {
            v93 = (unint64_t *)&v90->__shared_owners_;
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
        }
        else
        {
          *v88 = v134;
          v88[1].__r_.__value_.__s.__data_[0] = v73;
          v89 = v83 + 2 * v79;
          v89[1].__r_.__value_.__l.__size_ = 0;
          v89[1].__r_.__value_.__r.__words[2] = 0;
        }
        v95 = v143;
        v87 = (std::string *)((char *)v144 + 48);
        v96 = *(void (**)(uint64_t, void *, void *))(a2 + 40);
        v97 = *(void (**)(uint64_t, void *, void *))(a2 + 48);
        if (v97 == v96)
        {
          v102 = *(void (**)(uint64_t, void *, void *))(a2 + 48);
        }
        else
        {
          v98 = 0;
          do
          {
            v99 = v95 + v98;
            v100 = (char *)v97 + v98;
            v101 = *(_OWORD *)((char *)v97 + v98 - 48);
            *(_QWORD *)(v99 - 32) = *(_QWORD *)((char *)v97 + v98 - 32);
            *(_OWORD *)(v99 - 48) = v101;
            *((_QWORD *)v100 - 5) = 0;
            *((_QWORD *)v100 - 4) = 0;
            *((_QWORD *)v100 - 6) = 0;
            *(_BYTE *)(v99 - 24) = *((_BYTE *)v97 + v98 - 24);
            *(_OWORD *)(v99 - 16) = *(_OWORD *)((char *)v97 + v98 - 16);
            *((_QWORD *)v100 - 2) = 0;
            *((_QWORD *)v100 - 1) = 0;
            v98 -= 48;
          }
          while ((void (*)(uint64_t, void *, void *))((char *)v97 + v98) != v96);
          v95 += v98;
          v102 = *(void (**)(uint64_t, void *, void *))(a2 + 40);
          v97 = *(void (**)(uint64_t, void *, void *))(a2 + 48);
        }
        *(_QWORD *)(a2 + 40) = v95;
        *(_QWORD *)(a2 + 48) = v87;
        v103 = *(std::string **)(a2 + 56);
        *(_QWORD *)(a2 + 56) = v145;
        v145 = v103;
        v143 = (uint64_t)v102;
        v142 = (std::string *)v102;
        if (v97 != v102)
        {
          do
          {
            v144 = (void (*)(uint64_t, void *, void *))((char *)v97 - 48);
            v104 = (std::__shared_weak_count *)*((_QWORD *)v97 - 1);
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            if (*((char *)v97 - 25) < 0)
              operator delete(*((void **)v97 - 6));
            v97 = v144;
          }
          while (v144 != v102);
          v97 = (void (*)(uint64_t, void *, void *))v142;
        }
        if (v97)
          operator delete(v97);
      }
      else
      {
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v62, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
        }
        else
        {
          v78 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
          v62->__r_.__value_.__r.__words[2] = v134.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v78;
        }
        v62[1].__r_.__value_.__s.__data_[0] = (char)v135;
        v62[1].__r_.__value_.__l.__size_ = (std::string::size_type)v136;
        v84 = v137;
        v62[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v137;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = v62 + 2;
        *(_QWORD *)(a2 + 48) = v62 + 2;
      }
      *(_QWORD *)(a2 + 48) = v87;
      v64 = (unsigned __int8 *)&v87[-2];
      v107 = v137;
      if (v137)
      {
        v108 = (unint64_t *)&v137->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
    }
    v20 = v117;
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    v74 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v75 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  v66 = *a1;
  v65 = a1[1];
  if (v65)
  {
    v67 = (unint64_t *)(v65 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)v64 + 5);
  *((_QWORD *)v64 + 4) = v66;
  *((_QWORD *)v64 + 5) = v65;
  v31 = MEMORY[0x1E0DE4FB8];
  if (!v69)
    goto LABEL_75;
  v70 = (unint64_t *)&v69->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (v71)
  {
LABEL_75:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_76;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_76:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_77:
  os_unfair_lock_unlock(v20);
  v121 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v121 + *(_QWORD *)(v121 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v122 = v31 + 16;
  if (SBYTE7(v127) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v129);
}

void sub_19F1749EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,os_unfair_lock_s *lock,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;

  std::__split_buffer<std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>>::~__split_buffer((uint64_t)&STACK[0x218]);
  std::pair<md::StylesheetKey,std::shared_ptr<gss::StyleSheet<gss::PropertyID>>>::~pair((uint64_t)&a68);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v68 - 240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a23);
  if (a29 < 0)
    operator delete(__p);
  os_unfair_lock_unlock(lock);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void ___ZN2md19StyleSheetExtension12initWithNameIN3gss15ScenePropertyIDEEENSt3__110shared_ptrINS2_10StyleSheetIT_EEEERKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEfNS2_13TargetDisplayERNS_16StylesheetVendorEP17VKResourceManagerb_block_invoke_4(uint64_t a1, void *a2)
{
  int v3;
  const __CFString *v4;
  __CFString *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 == 2)
  {
    v4 = CFSTR("-iosmac");
LABEL_5:
    objc_msgSend(&stru_1E4315B30, "stringByAppendingString:", v4);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    v4 = CFSTR("-car");
    goto LABEL_5;
  }
  v5 = &stru_1E4315B30;
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_9:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      v6 = *(uint64_t **)(a1 + 64);
      if (*((char *)v6 + 23) < 0)
        v6 = (uint64_t *)*v6;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v6, 4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringByAppendingPathExtension:", v14);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

      objc_msgSend(*(id *)(a1 + 32), "dataForResourceWithName:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
  }

}

void sub_19F174D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void md::HikingLogic::deselectTrails(md::HikingLogic *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  void *__p[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  if (*((_BYTE *)this + 328))
  {
    *((_BYTE *)this + 328) = 0;
    v2 = (_QWORD *)*((_QWORD *)this + 15);
    v3 = v2[4];
    v4 = v2[5];
    v5 = v3;
    if (v3 == v4)
    {
LABEL_7:
      if (v5 == v4)
        goto LABEL_37;
      v6 = *(_QWORD *)(v5 + 8);
      if (!v6)
        goto LABEL_37;
      v7 = (int8x8_t)v2[17];
      if (!*(_QWORD *)&v7)
        goto LABEL_37;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = 68;
        if (*(_QWORD *)&v7 <= 0x44uLL)
          v9 = 0x44u % v2[17];
      }
      else
      {
        v9 = (v7.i32[0] - 1) & 0x44;
      }
      v10 = *(uint64_t ***)(v2[16] + 8 * v9);
      if (!v10)
        goto LABEL_37;
      v11 = *v10;
      if (!v11)
        goto LABEL_37;
      if (v8.u32[0] < 2uLL)
      {
        v12 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v14 = v11[1];
          if (v14 == 68)
          {
            if (*((_WORD *)v11 + 8) == 68)
              goto LABEL_30;
          }
          else if ((v14 & v12) != v9)
          {
            goto LABEL_37;
          }
          v11 = (uint64_t *)*v11;
          if (!v11)
            goto LABEL_37;
        }
      }
      while (1)
      {
        v13 = v11[1];
        if (v13 == 68)
        {
          if (*((_WORD *)v11 + 8) == 68)
          {
LABEL_30:
            *(_OWORD *)v37 = 0u;
            *(_OWORD *)__p = 0u;
            LODWORD(v39) = 1065353216;
            if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v6 + 824), *(_QWORD *)(v6 + 832), (uint64_t *)v37))
            {
              gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v6);
              gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v6 + 16));
              if ((void **)(v6 + 808) != v37)
              {
                *(_DWORD *)(v6 + 840) = 1065353216;
                std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v6 + 808), 0);
                v15 = __p[0];
                if (__p[0])
                {
                  do
                  {
                    v16 = (_QWORD *)*v15;
                    operator delete(v15);
                    v15 = v16;
                  }
                  while (v16);
                }
              }
            }
            v17 = v37[0];
            v37[0] = 0;
            if (v17)
              operator delete(v17);
            v2 = (_QWORD *)*((_QWORD *)this + 15);
            v3 = v2[4];
            v4 = v2[5];
            goto LABEL_37;
          }
        }
        else
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
          if (v13 != v9)
            goto LABEL_37;
        }
        v11 = (uint64_t *)*v11;
        if (!v11)
          goto LABEL_37;
      }
    }
    v5 = v2[4];
    do
    {
      if (*(_WORD *)v5 == 68)
        goto LABEL_7;
      v5 += 16;
    }
    while (v5 != v4);
LABEL_37:
    if (v3 == v4)
      goto LABEL_73;
    v18 = v3;
    while (*(_WORD *)v18 != 48)
    {
      v18 += 16;
      if (v18 == v4)
        goto LABEL_73;
    }
    if (v18 != v4)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        v20 = (int8x8_t)v2[17];
        if (v20)
        {
          v21 = (uint8x8_t)vcnt_s8(v20);
          v21.i16[0] = vaddlv_u8(v21);
          if (v21.u32[0] > 1uLL)
          {
            v22 = 48;
            if (*(_QWORD *)&v20 <= 0x30uLL)
              v22 = 0x30u % v2[17];
          }
          else
          {
            v22 = (v20.i8[0] - 1) & 0x30;
          }
          v23 = *(uint64_t ***)(v2[16] + 8 * v22);
          if (v23)
          {
            v24 = *v23;
            if (v24)
            {
              if (v21.u32[0] < 2uLL)
              {
                v25 = *(_QWORD *)&v20 - 1;
                while (1)
                {
                  v27 = v24[1];
                  if (v27 == 48)
                  {
                    if (*((_WORD *)v24 + 8) == 48)
                      goto LABEL_65;
                  }
                  else if ((v27 & v25) != v22)
                  {
                    goto LABEL_73;
                  }
                  v24 = (uint64_t *)*v24;
                  if (!v24)
                    goto LABEL_73;
                }
              }
              do
              {
                v26 = v24[1];
                if (v26 == 48)
                {
                  if (*((_WORD *)v24 + 8) == 48)
                  {
LABEL_65:
                    *(_OWORD *)v37 = 0u;
                    *(_OWORD *)__p = 0u;
                    LODWORD(v39) = 1065353216;
                    if (!std::operator==[abi:nn180100]<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>(*(_QWORD **)(v19 + 848), *(_QWORD *)(v19 + 856), (uint64_t *)v37))
                    {
                      gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v19);
                      gdc::LayerDataStore::clearAllData(*(gdc::LayerDataStore **)(v19 + 16));
                      if ((void **)(v19 + 832) != v37)
                      {
                        *(_DWORD *)(v19 + 864) = v39;
                        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>((_QWORD *)(v19 + 832), (_QWORD *)__p[0]);
                      }
                    }
                    v28 = __p[0];
                    if (__p[0])
                    {
                      do
                      {
                        v29 = (_QWORD *)*v28;
                        operator delete(v28);
                        v28 = v29;
                      }
                      while (v29);
                    }
                    v30 = v37[0];
                    v37[0] = 0;
                    if (v30)
                      operator delete(v30);
                    v31 = *((_QWORD *)this + 15);
                    v3 = *(_QWORD *)(v31 + 32);
                    v4 = *(_QWORD *)(v31 + 40);
                    break;
                  }
                }
                else
                {
                  if (v26 >= *(_QWORD *)&v20)
                    v26 %= *(_QWORD *)&v20;
                  if (v26 != v22)
                    break;
                }
                v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
          }
        }
      }
    }
LABEL_73:
    if (v3 == v4)
      goto LABEL_88;
    v32 = v3;
    while (*(_WORD *)v32 != 73)
    {
      v32 += 16;
      if (v32 == v4)
        goto LABEL_88;
    }
    if (v32 != v4)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        LOBYTE(v37[0]) = 0;
        v43 = 0;
        md::SelectedLabelLayerDataSource::resetSelectedFeatureID(v33, (uint64_t)v37);
        if (v43)
        {
          if (SHIBYTE(v41) < 0)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 40))(v42, v40, v41 & 0x7FFFFFFFFFFFFFFFLL);
          if (SHIBYTE(__p[1]) < 0)
            (*(void (**)(uint64_t, void *, unint64_t))(*(_QWORD *)v39 + 40))(v39, v37[1], (unint64_t)__p[1] & 0x7FFFFFFFFFFFFFFFLL);
        }
        v34 = *((_QWORD *)this + 15);
        v3 = *(_QWORD *)(v34 + 32);
        v4 = *(_QWORD *)(v34 + 40);
      }
    }
LABEL_88:
    while (v3 != v4)
    {
      if (*(_WORD *)v3 == 80)
      {
        if (v3 != v4)
        {
          v36 = *(_QWORD *)(v3 + 8);
          if (v36)
          {
            LOBYTE(v37[0]) = 0;
            v43 = 0;
            md::SelectedLabelLayerDataSource::resetSelectedFeatureID(v36, (uint64_t)v37);
            if (v43)
            {
              if (SHIBYTE(v41) < 0)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 40))(v42, v40, v41 & 0x7FFFFFFFFFFFFFFFLL);
              if (SHIBYTE(__p[1]) < 0)
                (*(void (**)(uint64_t, void *, unint64_t))(*(_QWORD *)v39 + 40))(v39, v37[1], (unint64_t)__p[1] & 0x7FFFFFFFFFFFFFFFLL);
            }
          }
        }
        break;
      }
      v3 += 16;
    }
    v35 = **((_QWORD **)this + 17);
    if (v35)
    {
      LOBYTE(v37[0]) = 8;
      md::MapEngine::setNeedsTick(v35, v37);
    }
  }
}

void sub_19F175240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F175258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::optional<md::LabelSelectedFeatureInfo>::~optional((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::EntityDebugHighlightLogic::didBecomeInactive(uint64_t this)
{
  if (*(_BYTE *)(this + 272))
    *(_BYTE *)(this + 272) = 0;
  return this;
}

uint64_t esl::QuartzPath::addPath(CGMutablePathRef *a1, uint64_t *a2, uint64_t a3)
{
  const CGAffineTransform *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const CGPath *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (!(*((unsigned int (**)(CGMutablePathRef *))*a1 + 2))(a1))
    return 0;
  if (a3)
    v6 = (const CGAffineTransform *)(a3 + 8);
  else
    v6 = 0;
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7 && (v11 = *(const CGPath **)(v7 + 8)) != 0)
  {
    CGPathAddPath(a1[1], v6, v11);
    v12 = 1;
    if (!v8)
      return v12;
  }
  else
  {
    v12 = 0;
    if (!v8)
      return v12;
  }
  v13 = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v12;
}

void sub_19F175354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL grl::ShapeLayerRenderer::renderBalloonToContext(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  int v7;
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  char *v12;
  unint64_t v13;
  NSObject *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  float32x2_t v23;
  float32x2_t v24;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  float v72;
  float32x2_t v73;
  float v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  float v94;
  float v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  float v106;
  float32x2_t v107;
  float v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  _OWORD *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned __int8 *i;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  float32x2_t v139;
  int v140;
  int v141;
  __int128 v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unsigned int v151;
  __int128 v152;
  grl::PathGenerator *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  _BYTE buf[22];
  __int16 v158;
  int v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 152))
  {
    *(_QWORD *)buf = 0;
    if (*(_QWORD *)(a1 + 204))
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v7 = *(unsigned __int8 *)(a1 + 296);
      if (v7 == 5 || v7 == 0)
      {
        *(_WORD *)buf = 513;
        buf[2] = 3;
        v12 = &buf[3];
        v13 = 3;
      }
      else
      {
        buf[0] = *(_BYTE *)(a1 + 296);
        v12 = &buf[1];
        v13 = 1;
      }
      std::vector<grl::IconComponent>::__assign_with_size[abi:nn180100]<grl::IconComponent const*,grl::IconComponent const*>(&v154, buf, v12, v13);
      v153 = (grl::PathGenerator *)(a1 + 160);
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24))
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v14 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "_data.hasLayerStyles()";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          v158 = 1024;
          v159 = 267;
          _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Balloon rendering needs LayerStyles to render.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
        }
      }
      v15 = *(unsigned __int8 **)(a1 + 16);
      for (i = *(unsigned __int8 **)(a1 + 24); v15 != i; ++v15)
      {
        v17 = v154;
        v16 = v155;
        if (v154 != v155)
        {
          v18 = *v15;
          do
          {
            grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()((grl::Allocator *)&v152, &v153, *v17, *(unsigned __int8 *)(a1 + 136), v18);
            if ((_QWORD)v152 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v152 + 24))(v152) & 1) == 0)
            {
              switch(v18)
              {
                case 0:
                  if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
                    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
                  v22 = GEOGetGeoResourceLibRendererLog::log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = "iconLayer != LayerStyle::None";
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResource"
                                          "Lib/LayerRenderer.cpp";
                    v158 = 1024;
                    v159 = 277;
                    _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "Invalid LayerStyle enum used in createLayer().: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
                  }
                  break;
                case 1:
                  v151 = *(_DWORD *)(a1 + 60);
                  v23 = vsub_f32(*(float32x2_t *)(a1 + 180), *(float32x2_t *)(a1 + 172));
                  v24 = (float32x2_t)vbic_s8((int8x8_t)v23, (int8x8_t)vcltz_f32(v23));
                  if (vmul_lane_f32(v24, v24, 1).f32[0] > 0.0 && HIBYTE(v151) != 0)
                  {
                    v26 = *(unsigned __int8 *)(a1 + 76);
                    if (v26 >= 2)
                    {
                      if (v26 == 2)
                      {
                        switch(*(_BYTE *)(a1 + 100))
                        {
                          case 0:
                            v57 = (std::__shared_weak_count *)a3[1];
                            v146 = *a3;
                            v147 = v57;
                            if (v57)
                            {
                              p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                              do
                                v59 = __ldxr(p_shared_owners);
                              while (__stxr(v59 + 1, p_shared_owners));
                            }
                            v145 = v152;
                            if (*((_QWORD *)&v152 + 1))
                            {
                              v60 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                              do
                                v61 = __ldxr(v60);
                              while (__stxr(v61 + 1, v60));
                            }
                            grl::drawFillToContext(&v146, &v145, (uint64_t)&v151, 0);
                            v62 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
                            if (*((_QWORD *)&v145 + 1))
                            {
                              v63 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                              do
                                v64 = __ldaxr(v63);
                              while (__stlxr(v64 - 1, v63));
                              if (!v64)
                              {
                                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                                std::__shared_weak_count::__release_weak(v62);
                              }
                            }
                            v35 = v147;
                            if (v147)
                            {
                              v65 = (unint64_t *)&v147->__shared_owners_;
                              do
                                v37 = __ldaxr(v65);
                              while (__stlxr(v37 - 1, v65));
                              goto LABEL_94;
                            }
                            break;
                          case 1:
                            v66 = (std::__shared_weak_count *)a3[1];
                            v143 = *a3;
                            v144 = v66;
                            if (v66)
                            {
                              v67 = (unint64_t *)&v66->__shared_owners_;
                              do
                                v68 = __ldxr(v67);
                              while (__stxr(v68 + 1, v67));
                            }
                            v142 = v152;
                            if (*((_QWORD *)&v152 + 1))
                            {
                              v69 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                              do
                                v70 = __ldxr(v69);
                              while (__stxr(v70 + 1, v69));
                            }
                            v71 = *(_DWORD *)(a1 + 92);
                            v72 = *(float *)(a1 + 96);
                            v73 = *(float32x2_t *)(a1 + 212);
                            *(float32x2_t *)buf = vadd_f32(*(float32x2_t *)(a1 + 236), v73);
                            v140 = *(_DWORD *)(a1 + 84);
                            v141 = v71;
                            v74 = *(float *)(a1 + 88);
                            v139 = vadd_f32(v73, *(float32x2_t *)(a1 + 244));
                            grl::drawLinearGradientToContext(&v143, &v142, (uint64_t)&v141, (uint64_t)buf, (uint64_t)&v140, (uint64_t)&v139, *(unsigned __int8 *)(a1 + 48), v72, v74);
                            v75 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
                            if (*((_QWORD *)&v142 + 1))
                            {
                              v76 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                              do
                                v77 = __ldaxr(v76);
                              while (__stlxr(v77 - 1, v76));
                              if (!v77)
                              {
                                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                                std::__shared_weak_count::__release_weak(v75);
                              }
                            }
                            v35 = v144;
                            if (v144)
                            {
                              v78 = (unint64_t *)&v144->__shared_owners_;
                              do
                                v37 = __ldaxr(v78);
                              while (__stlxr(v37 - 1, v78));
                              goto LABEL_94;
                            }
                            break;
                          case 2:
                            v79 = gm::Box<float,2>::operator+((float *)(a1 + 172), (float *)(a1 + 212));
                            v82 = v79 + (float)((float)(v80 - v79) * 0.5);
                            v84 = v83 + (float)((float)(v81 - v83) * 0.5);
                            *(float *)buf = v82;
                            *(float *)&buf[4] = v84;
                            v85 = *(float *)(a1 + 244);
                            v86 = *(float *)(a1 + 248);
                            v88 = *(float *)(a1 + 212);
                            v87 = *(float *)(a1 + 216);
                            v89 = (std::__shared_weak_count *)a3[1];
                            v137 = *a3;
                            v138 = v89;
                            if (v89)
                            {
                              v90 = (unint64_t *)&v89->__shared_owners_;
                              do
                                v91 = __ldxr(v90);
                              while (__stxr(v91 + 1, v90));
                            }
                            v136 = v152;
                            if (*((_QWORD *)&v152 + 1))
                            {
                              v92 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                              do
                                v93 = __ldxr(v92);
                              while (__stxr(v93 + 1, v92));
                            }
                            v94 = sqrtf((float)((float)((float)((float)(v85 + v88) - v82) * (float)((float)(v85 + v88) - v82))+ 0.0)+ (float)((float)((float)(v86 + v87) - v84) * (float)((float)(v86 + v87) - v84)));
                            v139.i32[0] = *(_DWORD *)(a1 + 92);
                            v95 = v94 * *(float *)(a1 + 96);
                            v141 = *(_DWORD *)(a1 + 84);
                            grl::drawRadialGradientToContext(&v137, &v136, (uint64_t)&v139, (uint64_t)buf, (uint64_t)&v141, *(unsigned __int8 *)(a1 + 48), v95, v94 * *(float *)(a1 + 88));
                            v96 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
                            if (*((_QWORD *)&v136 + 1))
                            {
                              v97 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
                              do
                                v98 = __ldaxr(v97);
                              while (__stlxr(v98 - 1, v97));
                              if (!v98)
                              {
                                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                                std::__shared_weak_count::__release_weak(v96);
                              }
                            }
                            v35 = v138;
                            if (v138)
                            {
                              v99 = (unint64_t *)&v138->__shared_owners_;
                              do
                                v37 = __ldaxr(v99);
                              while (__stlxr(v37 - 1, v99));
                              goto LABEL_94;
                            }
                            break;
                          case 3:
                            v100 = (std::__shared_weak_count *)a3[1];
                            v134 = *a3;
                            v135 = v100;
                            if (v100)
                            {
                              v101 = (unint64_t *)&v100->__shared_owners_;
                              do
                                v102 = __ldxr(v101);
                              while (__stxr(v102 + 1, v101));
                            }
                            v133 = v152;
                            if (*((_QWORD *)&v152 + 1))
                            {
                              v103 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                              do
                                v104 = __ldxr(v103);
                              while (__stxr(v104 + 1, v103));
                            }
                            v105 = *(_DWORD *)(a1 + 92);
                            v106 = *(float *)(a1 + 96);
                            v107 = *(float32x2_t *)(a1 + 212);
                            *(float32x2_t *)buf = vadd_f32(*(float32x2_t *)(a1 + 236), v107);
                            v140 = *(_DWORD *)(a1 + 84);
                            v141 = v105;
                            v108 = *(float *)(a1 + 88);
                            v139 = vadd_f32(v107, *(float32x2_t *)(a1 + 244));
                            grl::drawReflectedGradientToContext(&v134, &v133, (uint64_t)&v141, (uint64_t)buf, (uint64_t)&v140, (uint64_t)&v139, *(unsigned __int8 *)(a1 + 48), v106, v108);
                            v109 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
                            if (*((_QWORD *)&v133 + 1))
                            {
                              v110 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
                              do
                                v111 = __ldaxr(v110);
                              while (__stlxr(v111 - 1, v110));
                              if (!v111)
                              {
                                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                                std::__shared_weak_count::__release_weak(v109);
                              }
                            }
                            v35 = v135;
                            if (v135)
                            {
                              v112 = (unint64_t *)&v135->__shared_owners_;
                              do
                                v37 = __ldaxr(v112);
                              while (__stlxr(v37 - 1, v112));
                              goto LABEL_94;
                            }
                            break;
                          default:
                            goto LABEL_28;
                        }
                      }
                    }
                    else
                    {
                      v27 = (std::__shared_weak_count *)a3[1];
                      v149 = *a3;
                      v150 = v27;
                      if (v27)
                      {
                        v28 = (unint64_t *)&v27->__shared_owners_;
                        do
                          v29 = __ldxr(v28);
                        while (__stxr(v29 + 1, v28));
                      }
                      v148 = v152;
                      if (*((_QWORD *)&v152 + 1))
                      {
                        v30 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                        do
                          v31 = __ldxr(v30);
                        while (__stxr(v31 + 1, v30));
                      }
                      grl::drawFillToContext(&v149, &v148, (uint64_t)&v151, 0);
                      v32 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                      if (*((_QWORD *)&v148 + 1))
                      {
                        v33 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                        do
                          v34 = __ldaxr(v33);
                        while (__stlxr(v34 - 1, v33));
                        if (!v34)
                        {
                          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                          std::__shared_weak_count::__release_weak(v32);
                        }
                      }
                      v35 = v150;
                      if (v150)
                      {
                        v36 = (unint64_t *)&v150->__shared_owners_;
                        do
                          v37 = __ldaxr(v36);
                        while (__stlxr(v37 - 1, v36));
                        goto LABEL_94;
                      }
                    }
                  }
                  break;
                case 2:
                  v38 = 60;
                  if (*(float *)(a1 + 108) > 0.0)
                    v38 = 101;
                  *(_DWORD *)buf = *(_DWORD *)(a1 + v38);
                  if (*(_BYTE *)(a1 + 104))
                  {
                    v39 = (std::__shared_weak_count *)a3[1];
                    v131 = *a3;
                    v132 = v39;
                    if (v39)
                    {
                      v40 = (unint64_t *)&v39->__shared_owners_;
                      do
                        v41 = __ldxr(v40);
                      while (__stxr(v41 + 1, v40));
                    }
                    v130 = v152;
                    if (*((_QWORD *)&v152 + 1))
                    {
                      v42 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                      do
                        v43 = __ldxr(v42);
                      while (__stxr(v43 + 1, v42));
                    }
                    grl::drawFillToContext(&v131, &v130, (uint64_t)buf, 0);
                    v44 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
                    if (*((_QWORD *)&v130 + 1))
                    {
                      v45 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
                      do
                        v46 = __ldaxr(v45);
                      while (__stlxr(v46 - 1, v45));
                      if (!v46)
                      {
                        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                        std::__shared_weak_count::__release_weak(v44);
                      }
                    }
                    v35 = v132;
                    if (v132)
                    {
                      v47 = (unint64_t *)&v132->__shared_owners_;
                      do
                        v37 = __ldaxr(v47);
                      while (__stlxr(v37 - 1, v47));
                      goto LABEL_94;
                    }
                  }
                  break;
                case 3:
                  if (*(_BYTE *)(a1 + 123) && (*(_QWORD *)(a1 + 124) || *(float *)(a1 + 132) != 0.0))
                  {
                    v48 = (std::__shared_weak_count *)a3[1];
                    v128 = *a3;
                    v129 = v48;
                    if (v48)
                    {
                      v49 = (unint64_t *)&v48->__shared_owners_;
                      do
                        v50 = __ldxr(v49);
                      while (__stxr(v50 + 1, v49));
                    }
                    v127 = v152;
                    if (*((_QWORD *)&v152 + 1))
                    {
                      v51 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
                      do
                        v52 = __ldxr(v51);
                      while (__stxr(v52 + 1, v51));
                    }
                    v139.i32[0] = *(_DWORD *)(a1 + 120);
                    *(_QWORD *)buf = *(_QWORD *)(a1 + 124);
                    grl::drawShadowToContext(&v128, &v127, (uint64_t)&v139, (float *)buf, *(float *)(a1 + 132));
                    v53 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
                    if (*((_QWORD *)&v127 + 1))
                    {
                      v54 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
                      do
                        v55 = __ldaxr(v54);
                      while (__stlxr(v55 - 1, v54));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                    }
                    v35 = v129;
                    if (v129)
                    {
                      v56 = (unint64_t *)&v129->__shared_owners_;
                      do
                        v37 = __ldaxr(v56);
                      while (__stlxr(v37 - 1, v56));
LABEL_94:
                      if (!v37)
                      {
                        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                        std::__shared_weak_count::__release_weak(v35);
                      }
                    }
                  }
                  break;
                default:
                  break;
              }
            }
LABEL_28:
            v19 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
            if (*((_QWORD *)&v152 + 1))
            {
              v20 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            ++v17;
          }
          while (v17 != v16);
        }
        if (*(_BYTE *)(a2 + 282))
        {
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 392))(buf);
          v113 = operator new(0x20uLL);
          v113[1] = *(_OWORD *)buf;
          v114 = *a4;
          *(_QWORD *)v113 = *a4;
          *((_QWORD *)v113 + 1) = a4;
          *(_QWORD *)(v114 + 8) = v113;
          *a4 = (uint64_t)v113;
          ++a4[2];
        }
      }
      if (*(_BYTE *)(a1 + 112))
      {
        grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()((grl::Allocator *)buf, &v153, *(unsigned __int8 *)(a1 + 296), *(unsigned __int8 *)(a1 + 136), 1);
        if (!*(_QWORD *)buf)
        {
          grl::ShapeLayerRenderer::renderBalloonToContext(grl::IconRenderer const&,std::shared_ptr<esl::QuartzContext>,std::list<std::shared_ptr<esl::QuartzImage>> &)const::$_0::operator()((grl::Allocator *)&v152, &v153, *(unsigned __int8 *)(a1 + 296), *(unsigned __int8 *)(a1 + 136), 2);
          v118 = v152;
          v152 = 0uLL;
          v119 = *(std::__shared_weak_count **)&buf[8];
          *(_OWORD *)buf = v118;
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v122 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
          if (*((_QWORD *)&v152 + 1))
          {
            v123 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
        }
        (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a3 + 288))(*a3, buf);
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 264))(*a3);
        v115 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v116 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
      }
      if (v154)
        operator delete(v154);
      return 1;
    }
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v9 = GEOGetGeoResourceLibRendererLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      v158 = 1024;
      v159 = 215;
      v11 = "Metrics must contain a size to draw into a context.: Assertion with expression - %s : Failed in file - %s line - %i";
      goto LABEL_17;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v9 = GEOGetGeoResourceLibRendererLog::log;
    result = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      v158 = 1024;
      v159 = 212;
      v11 = "Nullptr for LayerMetrics being used to render layer.: Assertion with expression - %s : Failed in file - %s line - %i";
LABEL_17:
      _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

void esl::QuartzImage::createGrayscaleVersion(esl::QuartzImage *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  CGColorSpaceRef ColorSpace;
  CGColorSpace *v11;
  size_t Width;
  size_t Height;
  size_t AlignedBytesPerRow;
  CGImage *v15;
  CGImageRef v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  size_t BitsPerComponent;
  size_t BitsPerPixel;
  size_t BytesPerRow;
  CGBitmapInfo BitmapInfo;
  CGDataProvider *DataProvider;
  CGImage *v27;
  CGImageRef v28;
  CGContextRef context[2];
  uint64_t (**v30)();
  std::__shared_weak_count *v31;
  uint64_t (**v32)();
  CGColorSpaceRef space;
  CGImageRef v34[3];
  uint64_t (**v35)();
  CGImageRef image[3];
  CGRect v37;

  if (((*(uint64_t (**)(esl::QuartzImage *))(*(_QWORD *)this + 40))(this) & 1) == 0
    || !(*(unsigned int (**)(esl::QuartzImage *))(*(_QWORD *)this + 24))(this)
    || !(*(unsigned int (**)(esl::QuartzImage *))(*(_QWORD *)this + 32))(this))
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  if (!(*(unsigned int (**)(esl::QuartzImage *))(*(_QWORD *)this + 144))(this))
  {
    v9 = (void *)*((_QWORD *)this + 2);
    v35 = &off_1E42B4870;
    if (v9)
      CFRetain(v9);
    image[0] = (CGImageRef)v9;
    v32 = &off_1E42B47F0;
    space = CGColorSpaceCreateDeviceGray();
    ColorSpace = CGImageGetColorSpace((CGImageRef)v9);
    v11 = ColorSpace;
    v30 = &off_1E42B47F0;
    if (ColorSpace)
      CFRetain(ColorSpace);
    v31 = (std::__shared_weak_count *)v11;
    if (CGColorSpaceGetModel(v11) == kCGColorSpaceModelIndexed)
    {
      Width = CGImageGetWidth(image[0]);
      Height = CGImageGetHeight(image[0]);
      AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
      context[0] = (CGContextRef)&off_1E42B4890;
      context[1] = CGBitmapContextCreate(0, (unint64_t)(double)Width, (unint64_t)(double)Height, 8uLL, AlignedBytesPerRow, space, 0);
      v37.origin.x = 0.0;
      v37.origin.y = 0.0;
      v37.size.width = (double)Width;
      v37.size.height = (double)Height;
      CGContextDrawImage(context[1], v37, image[0]);
      v15 = CGBitmapContextCreateImage(context[1]);
      v16 = image[0];
      image[0] = v15;
      if (v16)
        CFRelease(v16);
      geo::_retain_ptr<CGContext *,geo::_retain_cf<CGContext *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(context);
    }
    else
    {
      v20 = CGImageGetWidth(image[0]);
      v21 = CGImageGetHeight(image[0]);
      BitsPerComponent = CGImageGetBitsPerComponent(image[0]);
      BitsPerPixel = CGImageGetBitsPerPixel(image[0]);
      BytesPerRow = CGImageGetBytesPerRow(image[0]);
      BitmapInfo = CGImageGetBitmapInfo(image[0]);
      DataProvider = CGImageGetDataProvider(image[0]);
      v27 = CGImageCreate((unint64_t)(double)v20, (unint64_t)(double)v21, BitsPerComponent, BitsPerPixel, BytesPerRow, space, BitmapInfo, DataProvider, 0, 0, kCGRenderingIntentDefault);
      v28 = image[0];
      image[0] = v27;
      if (!v28)
      {
LABEL_32:
        if (v27)
        {
          v34[0] = v27;
          std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *,void>(v34, context);
          *(_OWORD *)a2 = *(_OWORD *)context;
        }
        else
        {
          *a2 = 0;
          a2[1] = 0;
        }
        geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v30);
        geo::_retain_ptr<CGColorSpace *,geo::_retain_cf<CGColorSpace *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v32);
        geo::_retain_ptr<CGImage *,geo::_retain_cf<CGImage *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(&v35);
        return;
      }
      CFRelease(v28);
    }
    v27 = image[0];
    goto LABEL_32;
  }
  LOBYTE(v34[0]) = 1;
  LODWORD(v35) = (*(uint64_t (**)(esl::QuartzImage *))(*(_QWORD *)this + 24))(this);
  LODWORD(v30) = (*(uint64_t (**)(esl::QuartzImage *))(*(_QWORD *)this + 32))(this);
  std::allocate_shared[abi:ne180100]<esl::QuartzContext,std::allocator<esl::QuartzContext>,esl::ContextType,unsigned int,unsigned int,void>((unsigned __int8 *)v34, (unsigned int *)&v35, (unsigned int *)&v30, &v32);
  if (v32 && ((*((uint64_t (**)(uint64_t (**)()))*v32 + 3))(v32) & 1) != 0)
  {
    esl::QuartzColor::QuartzColor((esl::QuartzColor *)&v35, 0.0, 0.0, 0.0, 1.0);
    std::allocate_shared[abi:ne180100]<esl::QuartzImage,std::allocator<esl::QuartzImage>,CGImage *&,void>((CGImageRef *)this + 2, &v30);
    v4 = (*(uint64_t (**)(esl::QuartzImage *))(*(_QWORD *)this + 24))(this);
    v5 = (*(uint64_t (**)(esl::QuartzImage *))(*(_QWORD *)this + 32))(this);
    context[0] = 0;
    *(float *)&context[1] = (float)v4;
    *((float *)&context[1] + 1) = (float)v5;
    (*((void (**)(uint64_t (**)(), uint64_t (***)()))*v32 + 29))(v32, &v35);
    (*((void (**)(uint64_t (**)(), CGContextRef *, _QWORD))*v32 + 32))(v32, context, 0);
    (*((void (**)(uint64_t (**)(), CGContextRef *, uint64_t (***)(), uint64_t))*v32 + 47))(v32, context, &v30, 1);
    (*((void (**)(CGImageRef *__return_ptr))*v32 + 49))(v34);
    *(_OWORD *)a2 = *(_OWORD *)v34;
    v6 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v35 = (uint64_t (**)())&off_1E42B02E0;
    geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(image);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v17 = (std::__shared_weak_count *)space;
  if (space)
  {
    v18 = (unint64_t *)((char *)space + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19F176410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(esl::QuartzColor *__hidden);
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, void (**)(esl::QuartzColor *__hidden this));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v19 = &off_1E42B02E0;
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

CGImage *esl::QuartzImage::height(esl::QuartzImage *this)
{
  CGImage *result;

  result = (CGImage *)*((_QWORD *)this + 2);
  if (result)
    return (CGImage *)CGImageGetHeight(result);
  return result;
}

CGImage *esl::QuartzImage::width(esl::QuartzImage *this)
{
  CGImage *result;

  result = (CGImage *)*((_QWORD *)this + 2);
  if (result)
    return (CGImage *)CGImageGetWidth(result);
  return result;
}

double esl::QuartzContext::fillRect(CGContextRef *a1, float *a2)
{
  double result;
  float v5;
  double v6;
  double v7;
  float v8;
  float v9;
  double v10;
  float v11;
  double v12;

  if ((*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
  {
    v5 = a2[1];
    v7 = v5;
    v8 = a2[3] - v5;
    if ((float)(a2[2] - *a2) >= 0.0)
      v9 = a2[2] - *a2;
    else
      v9 = 0.0;
    v10 = v9;
    if (v8 >= 0.0)
      v11 = v8;
    else
      v11 = 0.0;
    v12 = v11;
    v6 = *a2;
    CGContextFillRect(a1[1], *(CGRect *)(&v7 - 1));
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<esl::QuartzContext>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void esl::QuartzContext::~QuartzContext(esl::QuartzContext *this)
{
  CGContext *v2;

  *(_QWORD *)this = &off_1E42B03D8;
  v2 = (CGContext *)*((_QWORD *)this + 1);
  if (v2)
  {
    CGContextRelease(v2);
    *((_QWORD *)this + 1) = 0;
  }
}

{
  esl::QuartzContext::~QuartzContext(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t esl::QuartzImage::hasAlphaChannel(CGImageRef *this)
{
  uint64_t result;

  result = (*((uint64_t (**)(CGImageRef *))*this + 5))(this);
  if ((_DWORD)result)
    return CGImageGetAlphaInfo(this[2]) != kCGImageAlphaNone;
  return result;
}

uint64_t esl::QuartzContext::clipToMask(CGContextRef *a1, float *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CGImage *v10;
  float v11;
  double v12;
  double v13;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (!(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
    return 0;
  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6 || (v10 = *(CGImage **)(v6 + 16)) == 0)
  {
    v19 = 0;
    if (!v7)
      return v19;
    goto LABEL_17;
  }
  v11 = a2[1];
  v13 = v11;
  v14 = a2[3] - v11;
  if ((float)(a2[2] - *a2) >= 0.0)
    v15 = a2[2] - *a2;
  else
    v15 = 0.0;
  v16 = v15;
  if (v14 >= 0.0)
    v17 = v14;
  else
    v17 = 0.0;
  v18 = v17;
  v12 = *a2;
  CGContextClipToMask(a1[1], *(CGRect *)(&v13 - 1), v10);
  v19 = 1;
  if (v7)
  {
LABEL_17:
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v19;
}

void sub_19F176708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t esl::QuartzContext::drawImage(CGContextRef *a1, float *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CGImage *v10;
  float v11;
  double v12;
  double v13;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (!(*((unsigned int (**)(CGContextRef *))*a1 + 3))(a1))
    return 0;
  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6 || (v10 = *(CGImage **)(v6 + 16)) == 0)
  {
    v19 = 0;
    if (!v7)
      return v19;
    goto LABEL_17;
  }
  v11 = a2[1];
  v13 = v11;
  v14 = a2[3] - v11;
  if ((float)(a2[2] - *a2) >= 0.0)
    v15 = a2[2] - *a2;
  else
    v15 = 0.0;
  v16 = v15;
  if (v14 >= 0.0)
    v17 = v14;
  else
    v17 = 0.0;
  v18 = v17;
  v12 = *a2;
  CGContextDrawImage(a1[1], *(CGRect *)(&v13 - 1), v10);
  v19 = 1;
  if (v7)
  {
LABEL_17:
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v19;
}

void sub_19F176818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CGContext *esl::QuartzContext::height(esl::QuartzContext *this)
{
  CGContext *result;

  result = (CGContext *)*((_QWORD *)this + 1);
  if (result)
    return (CGContext *)CGBitmapContextGetHeight(result);
  return result;
}

void esl::QuartzContext::beginTransparencyLayer(CGContextRef *this)
{
  CGContextBeginTransparencyLayer(this[1], 0);
}

CGAffineTransform *esl::AffineTransformMakeTranslation@<X0>(float a1@<S0>, float a2@<S1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CGAffineTransform v9;

  *(_QWORD *)a3 = &off_1E42B05C0;
  v4 = MEMORY[0x1E0C9BAA8];
  v5 = *MEMORY[0x1E0C9BAA8];
  v6 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a3 + 8) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a3 + 24) = v6;
  v7 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 40) = v7;
  *(_OWORD *)&v9.a = v5;
  *(_OWORD *)&v9.c = v6;
  *(_OWORD *)&v9.tx = v7;
  return CGAffineTransformTranslate((CGAffineTransform *)(a3 + 8), &v9, a1, a2);
}

__n128 esl::QuartzAffineTransform::QuartzAffineTransform(esl::QuartzAffineTransform *this)
{
  __n128 result;
  __int128 v2;

  *(_QWORD *)this = &off_1E42B05C0;
  result = *(__n128 *)MEMORY[0x1E0C9BAA8];
  v2 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *(_OWORD *)((char *)this + 24) = v2;
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

uint64_t esl::QuartzContext::setShadowWithColor(_QWORD *a1, float *a2, const void *a3, float a4)
{
  uint64_t result;
  CGContext *v9;
  CGFloat v10;
  CGFloat v11;
  CGColorRef v12[3];
  CGSize v13;

  result = (*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 48))(a3);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
    if ((_DWORD)result)
    {
      if (a4 < 0.0)
        esl::QuartzContext::setShadowWithColor();
      v9 = (CGContext *)a1[1];
      v10 = *a2;
      v11 = a2[1];
      esl::QuartzColor::color(a3, v12);
      v13.width = v10;
      v13.height = v11;
      CGContextSetShadowWithColor(v9, v13, a4, v12[1]);
      geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr(v12);
      return 1;
    }
  }
  return result;
}

void sub_19F1769A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::_retain_ptr<CGColor *,geo::_retain_cf<CGColor *>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::~_retain_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *&>(float *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  _QWORD *v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;

  if (!*((_BYTE *)a2 + 16))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_114;
  }
  v8 = *((float *)a2 + 1);
  v9 = *a2 - 0x61C8864680B583EBLL;
  if (*(float *)a2 == 0.0)
    v9 = 0x9E3779B97F4A7C15;
  v10 = LODWORD(v8) - 0x61C8864680B583EBLL;
  if (v8 == 0.0)
    v10 = 0x9E3779B97F4A7C15;
  v11 = *((float *)a2 + 2);
  v12 = *((float *)a2 + 3);
  v13 = ((v9 >> 2) + (v9 << 6) + v10) ^ v9;
  v14 = LODWORD(v11) - 0x61C8864680B583EBLL;
  if (v11 == 0.0)
    v14 = 0x9E3779B97F4A7C15;
  v15 = (v14 + (v13 << 6) + (v13 >> 2)) ^ v13;
  v16 = LODWORD(v12) - 0x61C8864680B583EBLL;
  if (v12 == 0.0)
    v16 = 0x9E3779B97F4A7C15;
  v17 = (v16 + (v15 << 6) + (v15 >> 2)) ^ v15;
  v18 = (((v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL) ^ v17) - 0x61C8864680B583EBLL;
  v19 = *((_QWORD *)a1 + 1);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v4 = (((v17 << 6) + (v17 >> 2) - 0x61C8864680B583EBLL) ^ v17) - 0x61C8864680B583EBLL;
      if (v18 >= v19)
        v4 = v18 % v19;
    }
    else
    {
      v4 = v18 & (v19 - 1);
    }
    v21 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
      v22 = *v21;
      if (v22)
      {
        if (v20.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v22[1];
            if (v25 == v18)
            {
              if (*((_BYTE *)v22 + 32))
              {
                if (v22[2] == *(_QWORD *)a2 && v22[3] == *((_QWORD *)a2 + 1))
                  return;
              }
            }
            else if ((v25 & (v19 - 1)) != v4)
            {
              goto LABEL_42;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_42;
          }
        }
        do
        {
          v23 = v22[1];
          if (v23 == v18)
          {
            if (*((_BYTE *)v22 + 32))
            {
              if (v22[2] == *(_QWORD *)a2 && v22[3] == *((_QWORD *)a2 + 1))
                return;
            }
          }
          else
          {
            if (v23 >= v19)
              v23 %= v19;
            if (v23 != v4)
              break;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
  }
LABEL_42:
  v27 = operator new(0x30uLL);
  v28 = v27;
  *v27 = 0;
  v27[1] = v18;
  *((_BYTE *)v27 + 16) = 0;
  *((_BYTE *)v27 + 32) = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((_BYTE *)v27 + 32) = 1;
  }
  v27[5] = a4;
  v29 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v30 = a1[8];
  if (!v19 || (float)(v30 * (float)v19) < v29)
  {
    v31 = 1;
    if (v19 >= 3)
      v31 = (v19 & (v19 - 1)) != 0;
    v32 = v31 | (2 * v19);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v19 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v19)
    {
      if (prime >= v19)
        goto LABEL_81;
      v46 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v19 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v19)
      {
        v19 = *((_QWORD *)a1 + 1);
LABEL_81:
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v18 >= v19)
            v4 = v18 % v19;
          else
            v4 = v18;
        }
        else
        {
          v4 = (v19 - 1) & v18;
        }
        goto LABEL_94;
      }
      if (!prime)
      {
        v55 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v55)
          operator delete(v55);
        v19 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_81;
      }
    }
    if (!(prime >> 61))
    {
      v35 = operator new(8 * prime);
      v36 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v35;
      if (v36)
        operator delete(v36);
      v37 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v37++) = 0;
      while (prime != v37);
      v39 = (uint64_t *)(a1 + 4);
      v38 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v38)
        goto LABEL_80;
      v40 = v38[1];
      v41 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v42 = v40 & v41;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v39;
        for (i = (_QWORD *)*v38; *v38; i = (_QWORD *)*v38)
        {
          v44 = i[1] & v41;
          if (v44 == v42)
          {
            v38 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
          {
            *v38 = *i;
            v45 = 8 * v44;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v45);
            **(_QWORD **)(*(_QWORD *)a1 + v45) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v38;
            v38 = i;
            v42 = v44;
          }
        }
LABEL_80:
        v19 = prime;
        goto LABEL_81;
      }
      if (v40 >= prime)
        v40 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v39;
      v49 = (_QWORD *)*v38;
      if (!*v38)
        goto LABEL_80;
      while (1)
      {
        v51 = v49[1];
        if (v51 >= prime)
          v51 %= prime;
        if (v51 != v40)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v51))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v38;
            goto LABEL_85;
          }
          *v38 = *v49;
          v50 = 8 * v51;
          *v49 = **(_QWORD **)(*(_QWORD *)a1 + v50);
          **(_QWORD **)(*(_QWORD *)a1 + v50) = v49;
          v49 = v38;
        }
        v51 = v40;
LABEL_85:
        v38 = v49;
        v49 = (_QWORD *)*v49;
        v40 = v51;
        if (!v49)
          goto LABEL_80;
      }
    }
LABEL_114:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_94:
  v52 = *(_QWORD **)a1;
  v53 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v53)
  {
    *v28 = *v53;
LABEL_102:
    *v53 = v28;
    goto LABEL_103;
  }
  *v28 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v28;
  v52[v4] = a1 + 4;
  if (*v28)
  {
    v54 = *(_QWORD *)(*v28 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v54 >= v19)
        v54 %= v19;
    }
    else
    {
      v54 &= v19 - 1;
    }
    v53 = (_QWORD *)(*(_QWORD *)a1 + 8 * v54);
    goto LABEL_102;
  }
LABEL_103:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F176EEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::setupStyleColorConstantData<ggl::DaVinci::GroundPipelineSetup,ggl::DaVinci::GroundPipelineState>(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float32x4_t v16;
  char v17;

  v16 = *a3;
  v17 = 1;
  v6 = (float *)(a1 + 448);
  v7 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>((_QWORD *)(a1 + 448), v16.f32);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 40);
  }
  else
  {
    v9 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 1960));
    v8 = v9;
    v10 = *(_QWORD *)(v9 + 8);
    **(float16x4_t **)(v9 + 72) = vcvt_f16_f32(*a3);
    if (*(_QWORD *)(v9 + 64) > v10)
      v10 = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 64) = v10;
    std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *>>>::__emplace_unique_key_args<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,md::DaVinciGroundRenderLayer::ColorStyleCacheKey const&,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *&>(v6, (unsigned int *)&v16, (uint64_t)&v16, v9);
  }
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v11 + 448) = v8;
  *(_QWORD *)(v11 + 456) = 0;
  v12 = *(_QWORD *)(a2 + 160);
  v13 = *(std::__shared_weak_count **)(v12 + 456);
  *(_QWORD *)(v12 + 448) = 0;
  *(_QWORD *)(v12 + 456) = 0;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>,std::equal_to<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>,md::DaVinciGroundRenderLayer::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ColorStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *>>>::find<md::DaVinciGroundRenderLayer::ColorStyleCacheKey>(_QWORD *a1, float *a2)
{
  float v2;
  unint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v22;

  if (*((_BYTE *)a2 + 16))
  {
    v2 = a2[1];
    if (*a2 == 0.0)
      v3 = 0x9E3779B97F4A7C15;
    else
      v3 = *(unsigned int *)a2 - 0x61C8864680B583EBLL;
    if (v2 == 0.0)
      v4 = 0x9E3779B97F4A7C15;
    else
      v4 = LODWORD(v2) - 0x61C8864680B583EBLL;
    v5 = a2[2];
    v6 = a2[3];
    if (v5 == 0.0)
      v7 = 0x9E3779B97F4A7C15;
    else
      v7 = LODWORD(v5) - 0x61C8864680B583EBLL;
    if (v6 == 0.0)
      v8 = 0x9E3779B97F4A7C15;
    else
      v8 = LODWORD(v6) - 0x61C8864680B583EBLL;
    v9 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v9)
      return 0;
    v10 = (v7 + ((((v3 >> 2) + (v3 << 6) + v4) ^ v3) << 6) + ((((v3 >> 2) + (v3 << 6) + v4) ^ v3) >> 2)) ^ ((v3 >> 2) + (v3 << 6) + v4) ^ v3;
    v11 = (v8 + (v10 << 6) + (v10 >> 2)) ^ v10;
    v12 = (((v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11) - 0x61C8864680B583EBLL;
    v13 = (uint8x8_t)vcnt_s8(v9);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = (((v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11) - 0x61C8864680B583EBLL;
      if (v12 >= *(_QWORD *)&v9)
        v14 = v12 % *(_QWORD *)&v9;
    }
    else
    {
      v14 = v12 & (*(_QWORD *)&v9 - 1);
    }
    v15 = *(uint64_t **)(*a1 + 8 * v14);
    if (v15)
    {
      result = *v15;
      if (*v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v20 = *(_QWORD *)(result + 8);
            if (v20 == v12)
            {
              if (*(_BYTE *)(result + 32))
              {
                if (*(_QWORD *)(result + 16) == *(_QWORD *)a2 && *(_QWORD *)(result + 24) == *((_QWORD *)a2 + 1))
                  return result;
              }
            }
            else if ((v20 & v17) != v14)
            {
              return 0;
            }
            result = *(_QWORD *)result;
            if (!result)
              return result;
          }
        }
        do
        {
          v18 = *(_QWORD *)(result + 8);
          if (v18 == v12)
          {
            if (*(_BYTE *)(result + 32))
            {
              if (*(_QWORD *)(result + 16) == *(_QWORD *)a2 && *(_QWORD *)(result + 24) == *((_QWORD *)a2 + 1))
                return result;
            }
          }
          else
          {
            if (v18 >= *(_QWORD *)&v9)
              v18 %= *(_QWORD *)&v9;
            if (v18 != v14)
              return 0;
          }
          result = *(_QWORD *)result;
        }
        while (result);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v22 = std::__throw_bad_optional_access[abi:nn180100]();
    return ggl::FragmentedPool<ggl::RenderItem>::pop(v22);
  }
  return result;
}

uint64_t ggl::FragmentedPool<ggl::RenderItem>::pop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)a1)
  {
    v13 = *(_QWORD *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
    v4 = *(uint64_t **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = ((uint64_t)v4 - v16) >> 3;
      v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_53;
      v18 = v14 - v16;
      if (v18 >> 2 > v8)
        v8 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v8 = 0x1FFFFFFFFFFFFFFFLL;
      if (v8)
      {
        v19 = 8 * v8;
        v20 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 8 * v8, 8);
        v12 = (uint64_t *)(v20 + 8 * v17);
        v8 = v20 + v19;
        if (v20)
          *v12 = v3;
      }
      else
      {
        v12 = (uint64_t *)(8 * v17);
      }
      v15 = v12 + 1;
      v30 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 40);
      if (v21 == v30)
        goto LABEL_48;
      v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        v33 = *(_QWORD *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (_QWORD)v12) < 0x20)
      {
        v33 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        v32 = (v31 >> 3) + 1;
        v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        v34 = v12 - 2;
        v35 = (__int128 *)(v21 - 16);
        v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v39 = *(_QWORD *)(v33 - 8);
        v33 -= 8;
        *--v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    v3 = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 8) = v2 - 8;
    v4 = *(uint64_t **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v7 = ((uint64_t)v4 - v6) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        goto LABEL_53;
      v9 = v5 - v6;
      if (v9 >> 2 > v8)
        v8 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v8 = 0x1FFFFFFFFFFFFFFFLL;
      if (v8)
      {
        v10 = 8 * v8;
        v11 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 8 * v8, 8);
        v12 = (uint64_t *)(v11 + 8 * v7);
        v8 = v11 + v10;
        if (v11)
          *v12 = v3;
      }
      else
      {
        v12 = (uint64_t *)(8 * v7);
      }
      v15 = v12 + 1;
      v22 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 40);
      if (v21 == v22)
        goto LABEL_48;
      v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        v25 = *(_QWORD *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (_QWORD)v12) < 0x20)
      {
        v25 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        v24 = (v23 >> 3) + 1;
        v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = v12 - 2;
        v27 = (__int128 *)(v21 - 16);
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
      do
      {
        v38 = *(_QWORD *)(v25 - 8);
        v25 -= 8;
        *--v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      v21 = *(_QWORD *)(a1 + 32);
LABEL_48:
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v15;
      v40 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v8;
      if (v21)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), v21, v40 - v21);
      goto LABEL_50;
    }
  }
  if (v4)
    *v4 = v3;
  v15 = v4 + 1;
LABEL_50:
  *(_QWORD *)(a1 + 40) = v15;
  v43 = v3;
  v41 = *(_QWORD *)(a1 + 120);
  if (!v41)
    goto LABEL_52;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 48))(v41, &v43);
  return v3;
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54A408, 2, 1, 6, 1);
  result[25] = ggl::DaVinci::StyleColor::reflection(void)::reflection;
  *result = &off_1E42B9AD0;
  return result;
}

void __destroy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::operator()()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)ggl::BufferData::BufferData(v0, qword_1EE54AFE0, 2, 1, 6, 1);
  result[25] = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
  *result = &off_1E42B9790;
  return result;
}

void gcl::tmesh::DecoderImpl::decodeVertexAttributesAC(gcl::tmesh::DecoderImpl *this, int *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  unsigned int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t *v35;
  uint64_t v36;
  int32x4_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  signed int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  _BOOL4 v90;
  int v91;
  int v92;
  int *v93;
  int v94;
  __int32 v95;
  __int32 v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  signed int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int32x2_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int *v114;
  __int8 *v115;
  double v116;
  int v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int32x2_t v126;
  int32x2_t v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  int32x2_t v138;
  int32x2_t v139;
  int v140;
  int32x2_t v141;
  int32x2_t v142;
  int v143;
  int32x2_t v144;
  int32x2_t v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  unint64_t v155;
  int32x2_t v156;
  int32x2_t v157;
  int v158;
  int32x2_t v159;
  int32x2_t v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  int32x2_t v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  BOOL v191;
  _BOOL4 v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  _BOOL4 v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int32x2_t v213;
  int32x2_t v214;
  int8x8_t v215;
  unsigned int v216;
  unsigned int v217;
  BOOL v218;
  _BOOL4 v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  _BOOL4 v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  int32x2_t v239;
  int32x2_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  BOOL v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  uint32x2_t v248;
  __int32 v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  double v255;
  BOOL v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  BOOL v261;
  unsigned int v262;
  unsigned int v263;
  int32x2_t v264;
  int32x2_t v265;
  int32x2_t v266;
  int32x2_t v267;
  int v268;
  int32x2_t v269;
  int32x2_t v270;
  int v271;
  int32x2_t v272;
  int v273;
  int32x2_t v274;
  int32x2_t v275;
  int v276;
  int32x2_t v277;
  int32x2_t v278;
  int v279;
  int32x2_t v280;
  int32x2_t v281;
  int32x2_t v282;
  int v283;
  int32x2_t v284;
  int32x2_t v285;
  int v286;
  int32x2_t v287;
  int32x2_t v288;
  int v289;
  int32x2_t v290;
  int32x2_t v291;
  int v292;
  int32x2_t v293;
  int32x2_t v294;
  uint32x2_t v295;
  BOOL v296;
  int v297;
  int32x2_t v298;
  int64x2_t v299;
  unint64_t v300;
  uint32x2_t v301;
  int v302;
  int v303;
  int64x2_t v304;
  int v305;
  int v306;
  int32x2_t v307;
  unsigned int v308;
  unsigned int v309;
  __int32 v310;
  _BOOL4 v312;
  int v313;
  int v314;
  int *v315;
  int v316;
  __int32 v317;
  __int32 v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int32x4_t *v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  unsigned int v330;
  int *v331;
  int v332;
  int v333;
  uint64_t v334;
  size_t v335;
  size_t v336;
  size_t v337;
  __int32 *v338;
  int *v339;
  __int32 v340;
  int *v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __int32 *v350;
  int *v351;
  int *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int *v357;
  uint64_t v358;
  int32x4_t *v359;
  int *v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  uint32x4_t v364;
  size_t v365;
  int *v366;
  int32x4_t *v367;
  int32x4_t v368;
  int32x4_t *v369;
  uint64_t v370;
  int v371;
  int32x4_t v372;
  unsigned int v373;
  int *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  unint64_t v388;
  int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  int *v393;
  int v394;
  int v395;
  int v396;
  unsigned int v397;
  uint64_t v398;
  unint64_t v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  __int32 *v411;
  int *v412;
  __int32 v413;
  int v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  int v418;
  unint64_t v419;
  unsigned int v420;
  unsigned int v421;
  BOOL v422;
  _BOOL4 v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  unsigned int v427;
  int v428;
  int v429;
  unsigned int v430;
  uint64_t v431;
  unint64_t v432;
  int v433;
  unint64_t v434;
  int v435;
  int v436;
  uint64_t v437;
  int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  _BOOL4 v443;
  unsigned int v444;
  unsigned int v445;
  int v446;
  int32x4_t *v447;
  int32x4_t *v448;
  int32x4_t *v449;
  int32x4_t *v450;
  int v451;
  int32x4_t *v452;
  int v453;
  int32x4_t *v454;
  uint64_t v455;
  uint64_t v456;
  int32x4_t *v457;
  uint64_t v458;
  uint64_t v459;
  __int32 *v460;
  int *v461;
  int *v462;
  int *v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  BOOL v471;
  _BOOL4 v472;
  int v473;
  unsigned int v474;
  unsigned int v475;
  uint64_t v476;
  unsigned int v477;
  int v478;
  int v479;
  unsigned int v480;
  uint64_t v481;
  unint64_t v482;
  int v483;
  unint64_t v484;
  uint64_t v485;
  int32x4_t *v486;
  uint64_t v487;
  int32x4_t *v488;
  uint64_t v489;
  int32x4_t *v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  _BOOL4 v494;
  unsigned int v495;
  unsigned int v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  __int32 *v501;
  int *v502;
  int *v503;
  int *v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  __int32 *v518;
  int *v519;
  int *v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int32x4_t *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  __int32 *v529;
  __int32 *v530;
  int v531;
  int v532;
  uint64_t v533;
  int32x4_t *v534;
  uint64_t v535;
  uint64_t v536;
  __int32 *v537;
  int *v538;
  int *v539;
  int *v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int32x4_t *v546;
  __int32 v547;
  __int32 v548;
  __int32 v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  int32x4_t *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  __int32 *v558;
  int *v559;
  int *v560;
  int *v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  unsigned int v569;
  unsigned int v570;
  _BOOL4 v571;
  unsigned int v572;
  int v573;
  unsigned int v574;
  uint64_t v575;
  __int32 v576;
  __int32 v577;
  int v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  __int32 *v583;
  int *v584;
  int *v585;
  int *v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int *v592;
  int32x4_t *v593;
  uint64_t v594;
  int32x4_t v595;
  int64_t v596;
  int32x4_t *v597;
  int32x4_t *v598;
  int32x4_t *v599;
  int32x4_t *v600;
  uint64_t v601;
  int32x4_t v602;
  int32x4_t v603;
  int32x4_t *v604;
  int32x4_t *v605;
  int32x4_t *v606;
  int32x4_t *v607;
  uint64_t v608;
  int32x4_t v609;
  int32x4_t v610;
  int32x4_t *v611;
  int32x4_t *v612;
  int32x4_t *v613;
  int32x4_t *v614;
  uint64_t v615;
  int32x4_t v616;
  int32x4_t v617;
  int32x4_t *v618;
  BOOL v620;
  BOOL v622;
  uint64_t v624;
  int32x4_t *v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  uint32x4_t v631;
  int32x4_t *v632;
  uint64_t v633;
  int32x4_t *v634;
  int32x4_t *v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  uint32x4_t v639;
  uint64_t v640;
  uint32x4_t *v641;
  int32x4_t *v642;
  int32x4_t *v643;
  int32x4_t *v644;
  int32x4_t *v645;
  int32x4_t *v646;
  int32x4_t *v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  uint32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int32x4_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  uint32x4_t v661;
  uint64_t v662;
  int32x4_t *v663;
  int32x4_t *v664;
  int32x4_t v665;
  uint32x4_t v666;
  int64_t v667;
  int32x4_t *v668;
  int32x4_t *v669;
  int32x4_t *v670;
  int32x4_t *v671;
  uint64_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t *v675;
  int32x4_t *v676;
  uint64_t v677;
  int v678;
  unsigned int v679;
  int32x4_t v680;
  unsigned int v681;
  int *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  int *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  unsigned int v691;
  int v692;
  int v693;
  unsigned int v694;
  uint64_t v695;
  unint64_t v696;
  int v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  __int32 *v705;
  int *v706;
  int *v707;
  int *v708;
  int v709;
  int v710;
  int v711;
  int v712;
  int v713;
  int v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  BOOL v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  __int32 *v722;
  int *v723;
  int *v724;
  int v725;
  int v726;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  __int32 *v733;
  int *v734;
  __int32 v735;
  unsigned int v736;
  unsigned int v737;
  BOOL v738;
  _BOOL4 v739;
  int v740;
  unsigned int v741;
  unsigned int v742;
  uint64_t v743;
  unsigned int v744;
  int v745;
  int v746;
  unsigned int v747;
  uint64_t v748;
  unint64_t v749;
  int v750;
  unint64_t v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  _BOOL4 v755;
  unsigned int v756;
  unsigned int v757;
  int v758;
  int v759;
  uint64_t v760;
  int v761;
  uint64_t v762;
  int v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  int v767;
  uint64_t v768;
  int v769;
  int *v770;
  int *v771;
  int *v772;
  int *v773;
  uint64_t i;
  int v775;
  int v776;
  int v777;
  int64_t v778;
  int32x4_t *v779;
  int32x4_t *v780;
  int32x4_t *v781;
  int32x4_t *v782;
  uint64_t v783;
  int32x4_t v784;
  int32x4_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  __int32 *v789;
  int *v790;
  int *v791;
  int *v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  __int32 *v801;
  int *v802;
  int *v803;
  int *v804;
  int v805;
  int v806;
  int v807;
  int v808;
  int v809;
  int *v810;
  int *v811;
  uint64_t j;
  int v813;
  int v814;
  int v815;
  unint64_t v816;
  int *v817;
  uint64_t v818;
  int32x4_t *v819;
  int *v820;
  int32x4_t v821;
  int32x4_t v822;
  int32x4_t v823;
  uint32x4_t v824;
  int *v825;
  int32x4_t *v826;
  uint64_t v827;
  int32x4_t v828;
  int64_t v829;
  int32x4_t *v830;
  int32x4_t *v831;
  int32x4_t *v832;
  int32x4_t *v833;
  uint64_t v834;
  int32x4_t v835;
  int32x4_t v836;
  int64_t v837;
  int32x4_t *v838;
  int32x4_t *v839;
  int32x4_t *v840;
  int32x4_t *v841;
  uint64_t v842;
  int32x4_t v843;
  int32x4_t v844;
  uint64_t v845;
  int64_t v846;
  uint64_t v847;
  uint64_t v848;
  int32x4_t *v849;
  int32x4_t *v850;
  int32x4_t *v851;
  int32x4_t *v852;
  int32x4_t *v853;
  uint64_t v854;
  uint32x4_t v855;
  uint32x4_t v856;
  int32x4_t v857;
  uint64_t v858;
  uint32x4_t *v859;
  int *v860;
  int32x4_t *v861;
  int32x4_t *v862;
  int32x4_t *v863;
  int32x4_t *v864;
  int32x4_t *v865;
  int32x4_t v866;
  int32x4_t v867;
  int32x4_t v868;
  uint32x4_t v869;
  int32x4_t v870;
  int32x4_t v871;
  int32x4_t v872;
  int32x4_t v873;
  int32x4_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  uint32x4_t v879;
  uint64_t v880;
  int v881;
  unsigned int v882;
  int *v883;
  int *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  int *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  int v892;
  int32x4_t *v893;
  uint64_t v894;
  int32x4_t *v895;
  uint64_t v896;
  unsigned int v897;
  unsigned int v898;
  int v899;
  unsigned int v900;
  uint64_t v901;
  char *v902;
  uint64_t v903;
  uint64_t v904;
  __int32 *v905;
  int *v906;
  __int32 v907;
  int v908;
  unsigned int v909;
  uint64_t v910;
  unint64_t v911;
  int v912;
  unint64_t v913;
  int v914;
  uint64_t v915;
  int v916;
  uint64_t v917;
  BOOL v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  __int32 *v922;
  int *v923;
  int *v924;
  int v925;
  int v926;
  int v927;
  int v928;
  unsigned int v929;
  unsigned int v930;
  _BOOL4 v931;
  unsigned int v932;
  int v933;
  unsigned int v934;
  uint64_t v935;
  int32x4_t *v936;
  int32x4_t *v937;
  int32x4_t v938;
  uint32x4_t v939;
  uint64_t v940;
  uint64_t v941;
  __int32 *v942;
  __int32 *v943;
  int v944;
  int v945;
  char *v946;
  int *v947;
  int32x4_t *v948;
  int32x4_t v949;
  int32x4_t *v950;
  uint64_t v951;
  int32x4_t *v952;
  int32x4_t *v953;
  int32x4_t v954;
  int32x4_t v955;
  int32x4_t v956;
  uint32x4_t v957;
  uint64_t v958;
  int v959;
  unsigned int v960;
  int *v961;
  int v962;
  int v963;
  int v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  __int32 *v969;
  int *v970;
  __int32 v971;
  int *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  __int32 *v979;
  int *v980;
  int *v981;
  int *v982;
  int v983;
  int v984;
  int v985;
  int v986;
  int v987;
  int v988;
  uint64_t v989;
  int v990;
  uint64_t v991;
  BOOL v992;
  size_t v993;
  size_t v994;
  size_t v995;
  __int32 *v996;
  int *v997;
  int *v998;
  int v999;
  int v1000;
  int v1001;
  int v1002;
  int64_t v1003;
  int32x4_t *v1004;
  int32x4_t *v1005;
  int32x4_t *v1006;
  int32x4_t *v1007;
  uint64_t v1008;
  int32x4_t v1009;
  int32x4_t v1010;
  int *v1011;
  size_t v1012;
  int32x4_t *v1013;
  int *v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int32x4_t v1017;
  uint32x4_t v1018;
  int *v1019;
  int32x4_t *v1020;
  uint64_t v1021;
  int32x4_t v1022;
  int32x4_t *v1023;
  int *v1024;
  unint64_t v1025;
  int *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unsigned int v1030;
  int v1031;
  int *v1032;
  int32x4_t *v1033;
  int v1034;
  char *v1035;
  unsigned int v1036;
  int32x4_t *v1037;
  unint64_t v1038;
  unsigned int v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  unsigned int v1043;
  int v1044;
  unsigned int v1045;
  int *v1046;
  uint64_t v1047;
  size_t v1048;
  unsigned int v1049;
  int v1050;
  size_t v1051;
  unsigned int v1052;
  unsigned int v1053;
  uint64_t v1054;
  int v1055;
  int *v1056;
  int32x4_t *v1057;
  int v1058;
  unsigned int v1059;
  size_t v1060;
  size_t v1061[2];
  uint64_t v1062;
  size_t v1063;
  BOOL *v1064;
  int *v1065;
  uint64_t v1066;
  int32x4_t v1067;
  uint64_t v1068;
  int v1069[2];
  int32x4_t v1070;
  int v1071;
  int32x4_t v1072;
  _WORD v1073[4];
  int32x4_t *v1074;
  int32x4_t *v1075;
  int32x4_t *v1076;
  __int128 __b;
  void *v1078[2];
  __int128 v1079;
  void *v1080[2];
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 __p;
  uint64_t v1099;
  uint64_t v1100;

  v1100 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 960);
  *(_QWORD *)v1069 = v6;
  if (*((_DWORD *)this + 964) == 1)
  {
    memset_pattern16(&__b, &memset_pattern_26, 4uLL);
    v7 = *((unsigned int *)this + 959);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = *((_QWORD *)this + 22);
      v10 = *((_QWORD *)this + 25);
      v11 = *((_DWORD *)this + 683);
      v12 = *((_DWORD *)this + 684);
      while (1)
      {
        v19 = (int *)(v9 + 12 * v8);
        v20 = *v19;
        v21 = v19[1];
        v22 = v19[2];
        v23 = (int *)(v10 + 12 * v8);
        v24 = v23[2];
        if ((_DWORD)v24 != -1)
        {
          v25 = a3[v21] + a3[v20] + a3[v22] + a3[*v23] + a3[v23[1]] + a3[v24] > 2;
          if (v11 < 0x40000001)
            break;
          goto LABEL_4;
        }
        if ((_DWORD)v22 != -1)
        {
          v25 = a3[v21] + a3[v20] + a3[v22] > 1;
          if (v11 < 0x40000001)
            break;
          goto LABEL_4;
        }
        if ((_DWORD)v21 != -1)
        {
          v25 = a3[v20];
          if (v25)
          {
            v26 = a3[v21];
            goto LABEL_23;
          }
          goto LABEL_24;
        }
        if ((_DWORD)v20 != -1)
        {
          v26 = a3[v20];
LABEL_23:
          v25 = v26;
LABEL_24:
          if (v11 < 0x40000001)
            break;
          goto LABEL_4;
        }
        v25 = 0;
        if (v11 < 0x40000001)
          break;
LABEL_4:
        v13 = v11;
LABEL_5:
        v14 = *((unsigned __int16 *)&v1078[-2] + v25);
        v15 = (HIWORD(v13) * v14) & 0xFFFF0000;
        v16 = v13 - v15;
        v17 = v12 >= v15;
        *((_WORD *)&v1078[-2] + v25) = *((_WORD *)this + ((v14 >> 7) & 0x1FE | v17) + 1376) + v14;
        if (v12 < v15)
          v11 = v15;
        else
          v11 = v16;
        if (v12 < v15)
          v18 = 0;
        else
          v18 = v15;
        v12 -= v18;
        *((_DWORD *)this + 683) = v11;
        *((_DWORD *)this + 684) = v12;
        a3[v8++] = v17;
        if (v8 == v7)
          goto LABEL_37;
      }
      v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v12 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27)
          goto LABEL_28;
        v29 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v29 + 1;
        v30 = *((unsigned int *)this + 676);
        if (v29 + 1 >= v30)
        {
          v31 = 65280;
          v32 = v29 + 2;
          *((_QWORD *)this + 340) = v32;
          if (v32 >= v30)
          {
LABEL_34:
            v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v29 + 1) << 8;
          v32 = v29 + 2;
          *((_QWORD *)this + 340) = v32;
          if (v32 >= v30)
            goto LABEL_34;
        }
        v28 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v32);
LABEL_27:
        v12 |= v31 | v28;
        v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        v13 = 2 * v11;
        v84 = v11 >= 0x20000001;
        v11 *= 2;
        if (v84)
          goto LABEL_5;
      }
    }
LABEL_37:
    v6 = *(_QWORD *)v1069;
  }
  v33 = (int)v6;
  v1064 = a3;
  v1065 = a2;
  v1066 = (int)v6;
  switch(*((_DWORD *)this + 967))
  {
    case 0:
      v1090 = 0u;
      v1091 = 0u;
      v1088 = 0u;
      v1089 = 0u;
      v1086 = 0u;
      v1087 = 0u;
      v1084 = 0u;
      v1085 = 0u;
      v1082 = 0u;
      v1083 = 0u;
      v1081 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v33);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v34 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v35 = (int32x4_t *)operator new(4 * v33);
        v1074 = v35;
        v1076 = (int32x4_t *)((char *)v35 + 4 * v33);
        bzero(v35, 4 * v33);
        v1075 = v1076;
        v34 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
          goto LABEL_519;
      }
      else
      {
        v35 = 0;
        if (*((int *)this + 959) < 1)
        {
LABEL_519:
          if (!v35)
            goto LABEL_1158;
          v369 = v35;
          goto LABEL_1157;
        }
      }
      v327 = 0;
      v328 = *((_DWORD *)this + 964);
      v329 = v34 & 0xFFFFFFFC;
      v1051 = v34 & 0xFFFFFFF8;
      v1060 = 4 * v34;
      while (1)
      {
        if (v328)
        {
          if (!a3[v327])
            goto LABEL_479;
          v331 = (int *)(*((_QWORD *)this + 22) + 12 * v327);
          v332 = *v331;
          v333 = v331[1];
          if (v333 == -1 || !a3[v332] || !a3[v333])
          {
            if (v332 == -1 || !a3[v332])
            {
LABEL_508:
              if ((_DWORD)v34)
                bzero(v35, v1060);
              gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v35, v1066, 3u, 0, (int32x4_t *)&a2[v327 * v1066]);
              v34 = *(_QWORD *)v1069;
              goto LABEL_479;
            }
LABEL_487:
            if ((_DWORD)v34)
            {
              v334 = v332 * (int)v1066;
              if (v1066 < 8 || (unint64_t)((char *)v35 - (char *)a2 - 4 * v334) < 0x20)
              {
                v335 = 0;
                goto LABEL_491;
              }
              v365 = v1051;
              v366 = &a2[v334 + 4];
              v367 = v35 + 1;
              do
              {
                v368 = *(int32x4_t *)v366;
                v367[-1] = *((int32x4_t *)v366 - 1);
                *v367 = v368;
                v366 += 8;
                v367 += 2;
                v365 -= 8;
              }
              while (v365);
              v335 = v1051;
              if (v1051 != v34)
              {
LABEL_491:
                v336 = v34 - v335;
                v337 = v335;
                v338 = &v35->i32[v335];
                v339 = &a2[v334 + v337];
                do
                {
                  v340 = *v339++;
                  *v338++ = v340;
                  --v336;
                }
                while (v336);
              }
            }
            v330 = 0;
            goto LABEL_478;
          }
        }
        else
        {
          v341 = (int *)(*((_QWORD *)this + 22) + 12 * v327);
          v332 = *v341;
          v333 = v341[1];
          if (v333 == -1)
          {
            if (v332 == -1)
              goto LABEL_508;
            goto LABEL_487;
          }
        }
        if ((_DWORD)v34)
        {
          v342 = v332 * v34;
          v343 = v332 * (int)v34;
          v344 = v333 * v1066;
          v345 = v333 * (int)v1066;
          if (v34 < 8
            || ((unint64_t)((char *)v35 - (char *)&a2[v344]) >= 0x10
              ? (v346 = (unint64_t)((char *)v35 - (char *)&a2[v342]) >= 0x10)
              : (v346 = 0),
                !v346))
          {
            v347 = 0;
LABEL_502:
            v348 = v34 - v347;
            v349 = v347;
            v350 = &v35->i32[v347];
            v351 = &a2[v345 + v349];
            v352 = &a2[v343 + v349];
            do
            {
              v354 = *v352++;
              v353 = v354;
              v355 = *v351++;
              v296 = __OFADD__(v355, v353);
              v356 = v355 + v353;
              if (v356 < 0 != v296)
                ++v356;
              *v350++ = v356 >> 1;
              --v348;
            }
            while (v348);
            goto LABEL_477;
          }
          v357 = &a2[v342];
          v358 = v329;
          v359 = v35;
          v360 = &a2[v344];
          do
          {
            v361 = *(int32x4_t *)v357;
            v357 += 4;
            v362 = v361;
            v363 = *(int32x4_t *)v360;
            v360 += 4;
            v364 = (uint32x4_t)vaddq_s32(v363, v362);
            *v359++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v364, v364, 0x1FuLL), 1uLL);
            v358 -= 4;
          }
          while (v358);
          v347 = v329;
          if (v329 != v34)
            goto LABEL_502;
        }
LABEL_477:
        v330 = 1;
LABEL_478:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v35, v1066, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v330 - 2], (int32x4_t *)&a2[v327 * v1066]);
        v34 = *(_QWORD *)v1069;
LABEL_479:
        if (++v327 >= *((int *)this + 959))
          goto LABEL_519;
      }
    case 1:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      v43 = v6;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v43);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v43);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v44 = v43;
      if ((_DWORD)v43)
      {
        v45 = v1066;
        if ((v1066 & 0x80000000) != 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v41 = (int32x4_t *)operator new(4 * v1066);
        v1074 = v41;
        v1076 = (int32x4_t *)((char *)v41 + 4 * v1066);
        bzero(v41, 4 * v1066);
        v1075 = v1076;
        v44 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
        {
LABEL_1144:
          if (!v41)
            goto LABEL_1147;
          v676 = v41;
LABEL_1146:
          operator delete(v676);
LABEL_1147:
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (*((_QWORD *)&v1096 + 1))
          {
            *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
            operator delete(*((void **)&v1096 + 1));
          }
          if ((_QWORD)v1095)
          {
            *((_QWORD *)&v1095 + 1) = v1095;
            operator delete((void *)v1095);
          }
          if (*((_QWORD *)&v1093 + 1))
          {
            *(_QWORD *)&v1094 = *((_QWORD *)&v1093 + 1);
            operator delete(*((void **)&v1093 + 1));
          }
          v369 = (int32x4_t *)v1092;
          if ((_QWORD)v1092)
          {
            *((_QWORD *)&v1092 + 1) = v1092;
LABEL_1157:
            operator delete(v369);
          }
LABEL_1158:
          if (*((_QWORD *)&v1090 + 1))
          {
            *(_QWORD *)&v1091 = *((_QWORD *)&v1090 + 1);
            operator delete(*((void **)&v1090 + 1));
          }
          if ((_QWORD)v1089)
          {
            *((_QWORD *)&v1089 + 1) = v1089;
            operator delete((void *)v1089);
          }
          if (*((_QWORD *)&v1087 + 1))
          {
            *(_QWORD *)&v1088 = *((_QWORD *)&v1087 + 1);
            operator delete(*((void **)&v1087 + 1));
          }
          if ((_QWORD)v1086)
          {
            *((_QWORD *)&v1086 + 1) = v1086;
            operator delete((void *)v1086);
          }
          if (*((_QWORD *)&v1084 + 1))
          {
            *(_QWORD *)&v1085 = *((_QWORD *)&v1084 + 1);
            operator delete(*((void **)&v1084 + 1));
          }
          if ((_QWORD)v1083)
          {
            *((_QWORD *)&v1083 + 1) = v1083;
            operator delete((void *)v1083);
          }
          if (*((_QWORD *)&v1081 + 1))
          {
            *(_QWORD *)&v1082 = *((_QWORD *)&v1081 + 1);
            operator delete(*((void **)&v1081 + 1));
          }
          if (v1080[0])
          {
            v1080[1] = v1080[0];
            operator delete(v1080[0]);
          }
          if (v1078[1])
          {
            *(void **)&v1079 = v1078[1];
            operator delete(v1078[1]);
          }
          v326 = (int32x4_t *)__b;
          if ((_QWORD)__b)
          {
            *((_QWORD *)&__b + 1) = __b;
            goto LABEL_1178;
          }
          return;
        }
      }
      else
      {
        v41 = 0;
        v45 = v1066;
        if (*((int *)this + 959) < 1)
          goto LABEL_1144;
      }
      v958 = 0;
      v959 = *((_DWORD *)this + 964);
      v1068 = v44 & 0xFFFFFFF8;
      v1048 = v44 & 0xFFFFFFFC;
      v1056 = a2 + 4;
      v1063 = 4 * v44;
      while (1)
      {
        if (v959)
        {
          if (!a3[v958])
            goto LABEL_1086;
          v961 = (int *)(*((_QWORD *)this + 22) + 12 * v958);
          v962 = *v961;
          v963 = v961[1];
          v964 = v961[2];
          if (v964 == -1 || !a3[v962] || !a3[v963] || !a3[v964])
          {
            if (v963 != -1 && a3[v962] && a3[v963])
            {
LABEL_1113:
              if ((_DWORD)v44)
              {
                v988 = v962 * v44;
                v989 = v962 * (int)v44;
                v990 = v963 * v44;
                v991 = v963 * (int)v44;
                if (v45 >= 8
                  && ((unint64_t)((char *)v41 - (char *)&a2[v990]) >= 0x10
                    ? (v992 = (unint64_t)((char *)v41 - (char *)&a2[v988]) >= 0x10)
                    : (v992 = 0),
                      v992))
                {
                  v1011 = &a2[v988];
                  v1012 = v1048;
                  v1013 = v41;
                  v1014 = &a2[v990];
                  do
                  {
                    v1015 = *(int32x4_t *)v1011;
                    v1011 += 4;
                    v1016 = v1015;
                    v1017 = *(int32x4_t *)v1014;
                    v1014 += 4;
                    v1018 = (uint32x4_t)vaddq_s32(v1017, v1016);
                    *v1013++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v1018, v1018, 0x1FuLL), 1uLL);
                    v1012 -= 4;
                  }
                  while (v1012);
                  v993 = v1048;
                  if (v1048 != v44)
                    goto LABEL_1120;
                }
                else
                {
                  v993 = 0;
LABEL_1120:
                  v994 = v44 - v993;
                  v995 = v993;
                  v996 = &v41->i32[v993];
                  v997 = &a2[v991 + v995];
                  v998 = &a2[v989 + v995];
                  do
                  {
                    v1000 = *v998++;
                    v999 = v1000;
                    v1001 = *v997++;
                    v296 = __OFADD__(v1001, v999);
                    v1002 = v1001 + v999;
                    if (v1002 < 0 != v296)
                      ++v1002;
                    *v996++ = v1002 >> 1;
                    --v994;
                  }
                  while (v994);
                }
              }
              v960 = 1;
              goto LABEL_1085;
            }
            if (v962 == -1 || !a3[v962])
            {
LABEL_1133:
              if ((_DWORD)v44)
              {
                bzero(v41, v1063);
                v44 = *(_QWORD *)v1069;
              }
              gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v44, 3u, 0, (int32x4_t *)&a2[v958 * v45]);
              v44 = *(_QWORD *)v1069;
              goto LABEL_1086;
            }
LABEL_1098:
            if ((_DWORD)v45)
            {
              v965 = v962 * (int)v45;
              if (v44 < 8 || (unint64_t)((char *)v41 - (char *)&a2[v965]) < 0x20)
              {
                v966 = 0;
                goto LABEL_1102;
              }
              v1019 = &v1056[v965];
              v1020 = v41 + 1;
              v1021 = v1068;
              do
              {
                v1022 = *(int32x4_t *)v1019;
                v1020[-1] = *((int32x4_t *)v1019 - 1);
                *v1020 = v1022;
                v1019 += 8;
                v1020 += 2;
                v1021 -= 8;
              }
              while (v1021);
              v966 = v1068;
              if (v1068 != v44)
              {
LABEL_1102:
                v967 = v44 - v966;
                v968 = v966;
                v969 = &v41->i32[v966];
                v970 = &a2[v965 + v968];
                do
                {
                  v971 = *v970++;
                  *v969++ = v971;
                  --v967;
                }
                while (v967);
              }
            }
            v960 = 0;
            goto LABEL_1085;
          }
        }
        else
        {
          v972 = (int *)(*((_QWORD *)this + 22) + 12 * v958);
          v962 = *v972;
          v963 = v972[1];
          v964 = v972[2];
          if (v964 == -1)
          {
            if (v963 != -1)
              goto LABEL_1113;
            if (v962 == -1)
              goto LABEL_1133;
            goto LABEL_1098;
          }
        }
        if ((_DWORD)v44)
        {
          v973 = v962 * (int)v44;
          v974 = v963 * (int)v45;
          v975 = v964 * (int)v45;
          if (v45 >= 0xC)
          {
            v976 = 0;
            v1003 = (char *)v41 - (char *)a2;
            if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v975) >= 0x20
              && (unint64_t)(v1003 - 4 * v974) >= 0x20
              && (unint64_t)(v1003 - 4 * v973) >= 0x20)
            {
              v1004 = (int32x4_t *)&v1056[v973];
              v1005 = v41 + 1;
              v1006 = (int32x4_t *)&v1056[v974];
              v1007 = (int32x4_t *)&v1056[v975];
              v1008 = v1068;
              do
              {
                v1009 = vsubq_s32(vaddq_s32(v1006[-1], v1004[-1]), v1007[-1]);
                v1010 = vsubq_s32(vaddq_s32(*v1006, *v1004), *v1007);
                v1004 += 2;
                v1005[-1] = v1009;
                *v1005 = v1010;
                v1005 += 2;
                v1006 += 2;
                v1007 += 2;
                v1008 -= 8;
              }
              while (v1008);
              v976 = v1068;
              if (v1068 == v44)
                goto LABEL_1084;
            }
          }
          else
          {
            v976 = 0;
          }
          v977 = v976;
          v978 = v44 - v976;
          v979 = &v41->i32[v977];
          v980 = &a2[v975 + v977];
          v981 = &a2[v974 + v977];
          v982 = &a2[v973 + v977];
          do
          {
            v984 = *v982++;
            v983 = v984;
            v985 = *v981++;
            v986 = v985 + v983;
            v987 = *v980++;
            *v979++ = v986 - v987;
            --v978;
          }
          while (v978);
        }
LABEL_1084:
        v960 = 2;
LABEL_1085:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v45, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v960 - 2], (int32x4_t *)&a2[v958 * v45]);
        v44 = *(_QWORD *)v1069;
LABEL_1086:
        if (++v958 >= *((int *)this + 959))
          goto LABEL_1144;
      }
    case 2:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      v39 = v33;
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v33);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      memset_pattern16(&v1072, &memset_pattern_26, 6uLL);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v40 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if ((v33 & 0x80000000) != 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v41 = (int32x4_t *)operator new(4 * v33);
        v1074 = v41;
        v1076 = (int32x4_t *)((char *)v41 + 4 * v33);
        bzero(v41, 4 * v33);
        v1075 = (int32x4_t *)((char *)v41 + 4 * v33);
        v40 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
          goto LABEL_1144;
      }
      else
      {
        v41 = 0;
        if (*((int *)this + 959) < 1)
          goto LABEL_1144;
      }
      v677 = 0;
      v678 = *((_DWORD *)this + 964);
      v679 = v1072.u16[0];
      v1054 = 4 * v40;
      v1062 = v40 & 0xFFFFFFF8;
      v1041 = v40 & 0xFFFFFFFC;
      v1046 = a2 + 4;
      v680 = vdupq_n_s32(0x55555556u);
      v1067 = v680;
      while (1)
      {
        if (v678 && !a3[v677])
          goto LABEL_823;
        v682 = (int *)(*((_QWORD *)this + 22) + 12 * v677);
        v683 = *v682;
        v684 = v682[1];
        v685 = v682[2];
        v686 = (int *)(*((_QWORD *)this + 25) + 12 * v677);
        v687 = v686[2];
        if ((_DWORD)v687 != -1
          && ((v689 = *v686, v688 = v686[1], !v678)
           || a3[v683] && a3[v684] && a3[v685] && a3[v689] && a3[v688] && a3[v687]))
        {
          v690 = *((_DWORD *)this + 683);
          v691 = *((_DWORD *)this + 684);
          if (v690 < 0x40000001)
          {
            v692 = *((_DWORD *)this + 686);
            while (1)
            {
              v691 *= 2;
              *((_DWORD *)this + 686) = --v692;
              if (v692)
                goto LABEL_838;
              v695 = *((_QWORD *)this + 340);
              *((_QWORD *)this + 340) = v695 + 1;
              v696 = *((unsigned int *)this + 676);
              if (v695 + 1 >= v696)
              {
                v697 = 65280;
                v698 = v695 + 2;
                *((_QWORD *)this + 340) = v698;
                if (v698 >= v696)
                {
LABEL_844:
                  v693 = 255;
                  goto LABEL_837;
                }
              }
              else
              {
                v697 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v695 + 1) << 8;
                v698 = v695 + 2;
                *((_QWORD *)this + 340) = v698;
                if (v698 >= v696)
                  goto LABEL_844;
              }
              v693 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v698);
LABEL_837:
              v691 |= v697 | v693;
              v692 = 16;
              *((_DWORD *)this + 686) = 16;
LABEL_838:
              v694 = 2 * v690;
              v84 = v690 >= 0x20000001;
              v690 *= 2;
              if (v84)
                goto LABEL_886;
            }
          }
          v694 = *((_DWORD *)this + 683);
LABEL_886:
          v736 = (HIWORD(v694) * (unsigned __int16)v679) & 0xFFFF0000;
          v737 = v694 - v736;
          v738 = v691 >= v736;
          v739 = v691 >= v736;
          v740 = *((unsigned __int16 *)this + ((v679 >> 7) & 0x1FE | v739) + 1376);
          if (v691 < v736)
            v741 = v736;
          else
            v741 = v737;
          if (v691 < v736)
            v742 = 0;
          else
            v742 = v736;
          v743 = 1;
          if (v738)
            v743 = 2;
          v744 = v691 - v742;
          *((_DWORD *)this + 683) = v741;
          *((_DWORD *)this + 684) = v744;
          if (v741 < 0x40000001)
          {
            v745 = *((_DWORD *)this + 686);
            while (2)
            {
              v744 *= 2;
              *((_DWORD *)this + 686) = --v745;
              if (v745)
                goto LABEL_898;
              v748 = *((_QWORD *)this + 340);
              *((_QWORD *)this + 340) = v748 + 1;
              v749 = *((unsigned int *)this + 676);
              if (v748 + 1 >= v749)
              {
                v750 = 65280;
                v751 = v748 + 2;
                *((_QWORD *)this + 340) = v751;
                if (v751 >= v749)
                  goto LABEL_904;
              }
              else
              {
                v750 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v748 + 1) << 8;
                v751 = v748 + 2;
                *((_QWORD *)this + 340) = v751;
                if (v751 >= v749)
                {
LABEL_904:
                  v746 = 255;
LABEL_897:
                  v744 |= v750 | v746;
                  v745 = 16;
                  *((_DWORD *)this + 686) = 16;
LABEL_898:
                  v747 = 2 * v741;
                  v84 = v741 >= 0x20000001;
                  v741 *= 2;
                  if (v84)
                    goto LABEL_906;
                  continue;
                }
              }
              break;
            }
            v746 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v751);
            goto LABEL_897;
          }
          v747 = v741;
LABEL_906:
          v679 += v740;
          v752 = v1072.u16[v743];
          v753 = (HIWORD(v747) * v752) & 0xFFFF0000;
          v754 = v747 - v753;
          v755 = v744 >= v753;
          v1072.i16[v743] = *((_WORD *)this + ((v752 >> 7) & 0x1FE | v755) + 1376) + v752;
          if (v744 < v753)
            v756 = v753;
          else
            v756 = v754;
          if (v744 < v753)
            v757 = 0;
          else
            v757 = v753;
          *((_DWORD *)this + 683) = v756;
          *((_DWORD *)this + 684) = v744 - v757;
          v758 = v739 | (2 * v755);
          v759 = v683 * v40;
          v760 = v759;
          v761 = v684 * v40;
          v762 = v761;
          v763 = v685 * v40;
          v764 = (int)v685 * (int)v40;
          if (v758)
          {
            v765 = v689 * v40;
            v766 = (int)v689 * (int)v40;
            v767 = v688 * v39;
            v768 = v767;
            v769 = v687 * v40;
            if (v758 == 1)
            {
              if ((_DWORD)v40)
              {
                if (v40 >= 0xC)
                {
                  v786 = 0;
                  v829 = (char *)v41 - (char *)a2;
                  if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v769) >= 0x20
                    && (unint64_t)(v829 - 4 * v767) >= 0x20
                    && (unint64_t)(v829 - 4 * v766) >= 0x20)
                  {
                    v830 = (int32x4_t *)&v1046[v766];
                    v831 = v41 + 1;
                    v832 = (int32x4_t *)&v1046[v767];
                    v833 = (int32x4_t *)&v1046[v769];
                    v834 = v1062;
                    do
                    {
                      v835 = vsubq_s32(vaddq_s32(v832[-1], v830[-1]), v833[-1]);
                      v836 = vsubq_s32(vaddq_s32(*v832, *v830), *v833);
                      v830 += 2;
                      v831[-1] = v835;
                      *v831 = v836;
                      v831 += 2;
                      v832 += 2;
                      v833 += 2;
                      v834 -= 8;
                    }
                    while (v834);
                    v786 = v1062;
                    if (v1062 == v40)
                      goto LABEL_821;
                  }
                }
                else
                {
                  v786 = 0;
                }
                v787 = v786;
                v788 = v40 - v786;
                v789 = &v41->i32[v787];
                v790 = &a2[v769 + v787];
                v791 = &a2[v768 + v787];
                v792 = &a2[v766 + v787];
                do
                {
                  v794 = *v792++;
                  v793 = v794;
                  v795 = *v791++;
                  v796 = v795 + v793;
                  v797 = *v790++;
                  *v789++ = v796 - v797;
                  --v788;
                }
                while (v788);
              }
            }
            else
            {
              v770 = &a2[v759];
              v771 = &a2[v761];
              v772 = &a2[v765];
              v773 = &a2[v767];
              if (v758 == 2)
              {
                if ((_DWORD)v40)
                {
                  if (v39 < 0xC)
                  {
                    for (i = 0; i != v40; ++i)
                    {
LABEL_918:
                      v775 = v770[i];
                      v776 = v772[i];
                      v296 = __OFADD__(v776, v775);
                      v777 = v776 + v775;
                      if (v777 < 0 != v296)
                        ++v777;
                      v41->i32[i] = v773[i] + v771[i] - (v777 >> 1);
                    }
                    goto LABEL_821;
                  }
                  i = 0;
                  v845 = v766;
                  v846 = (char *)v41 - (char *)a2;
                  if ((unint64_t)((char *)v41 - (char *)a2 - v845 * 4) < 0x20)
                    goto LABEL_918;
                  v847 = v760;
                  if ((unint64_t)(v846 - 4 * v760) < 0x20)
                    goto LABEL_918;
                  if ((unint64_t)(v846 - 4 * v768) < 0x20)
                    goto LABEL_918;
                  v848 = v762;
                  if ((unint64_t)(v846 - v848 * 4) < 0x20)
                    goto LABEL_918;
                  v849 = (int32x4_t *)&v1046[v848];
                  v850 = v41 + 1;
                  v851 = (int32x4_t *)&v1046[v768];
                  v852 = (int32x4_t *)&v1046[v845];
                  v853 = (int32x4_t *)&v1046[v847];
                  v854 = v1062;
                  do
                  {
                    v855 = (uint32x4_t)vaddq_s32(v852[-1], v853[-1]);
                    v856 = (uint32x4_t)vaddq_s32(*v852, *v853);
                    v857 = vsubq_s32(vaddq_s32(*v851, *v849), vshrq_n_s32((int32x4_t)vsraq_n_u32(v856, v856, 0x1FuLL), 1uLL));
                    v850[-1] = vsubq_s32(vaddq_s32(v851[-1], v849[-1]), vshrq_n_s32((int32x4_t)vsraq_n_u32(v855, v855, 0x1FuLL), 1uLL));
                    *v850 = v857;
                    v849 += 2;
                    v850 += 2;
                    v851 += 2;
                    v852 += 2;
                    v853 += 2;
                    v854 -= 8;
                  }
                  while (v854);
                  i = v1062;
                  if (v1062 != v40)
                    goto LABEL_918;
                }
              }
              else if ((_DWORD)v40)
              {
                v810 = &a2[v763];
                v811 = &a2[v769];
                if (v39 < 0xC)
                {
                  for (j = 0; j != v40; ++j)
                  {
LABEL_944:
                    v813 = v770[j];
                    v814 = v772[j];
                    v296 = __OFADD__(v814, v813);
                    v815 = v814 + v813;
                    if (v815 < 0 != v296)
                      ++v815;
                    v816 = 1431655766 * ((v815 >> 1) - (v810[j] + v811[j]) + 2 * (v773[j] + v771[j]));
                    v41->i32[j] = HIDWORD(v816) + (v816 >> 63);
                  }
                  goto LABEL_821;
                }
                j = 0;
                if ((unint64_t)((char *)v41 - (char *)&a2[v769]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v764]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v768]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v762]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v766]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v760]) < 0x10)
                  goto LABEL_944;
                v858 = v1041;
                v859 = (uint32x4_t *)v41;
                v860 = &a2[v769];
                v861 = (int32x4_t *)v810;
                v862 = (int32x4_t *)v773;
                v863 = (int32x4_t *)v771;
                v864 = (int32x4_t *)v772;
                v865 = (int32x4_t *)v770;
                do
                {
                  v866 = *v865++;
                  v867 = v866;
                  v868 = *v864++;
                  v869 = (uint32x4_t)vaddq_s32(v868, v867);
                  v870 = *v863++;
                  v871 = v870;
                  v872 = *v862++;
                  v873 = v872;
                  v874 = *v861++;
                  v875 = v874;
                  v876 = *(int32x4_t *)v860;
                  v860 += 4;
                  v877 = vaddq_s32(v873, v871);
                  v878 = vaddq_s32(vsubq_s32(vshrq_n_s32((int32x4_t)vsraq_n_u32(v869, v869, 0x1FuLL), 1uLL), vaddq_s32(v875, v876)), vaddq_s32(v877, v877));
                  v879 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v878.i8, *(int32x2_t *)v680.i8), (int32x4_t)vmull_high_s32(v878, v680));
                  *v859++ = vsraq_n_u32(v879, v879, 0x1FuLL);
                  v858 -= 4;
                }
                while (v858);
                j = v1041;
                if (v1041 != v40)
                  goto LABEL_944;
              }
            }
          }
          else if ((_DWORD)v40)
          {
            if (v39 >= 0xC)
            {
              v798 = 0;
              v837 = (char *)v41 - (char *)a2;
              if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v763) >= 0x20
                && (unint64_t)(v837 - 4 * v762) >= 0x20
                && (unint64_t)(v837 - 4 * v760) >= 0x20)
              {
                v838 = (int32x4_t *)&v1046[v760];
                v839 = v41 + 1;
                v840 = (int32x4_t *)&v1046[v762];
                v841 = (int32x4_t *)&v1046[v763];
                v842 = v1062;
                do
                {
                  v843 = vsubq_s32(vaddq_s32(v840[-1], v838[-1]), v841[-1]);
                  v844 = vsubq_s32(vaddq_s32(*v840, *v838), *v841);
                  v838 += 2;
                  v839[-1] = v843;
                  *v839 = v844;
                  v839 += 2;
                  v840 += 2;
                  v841 += 2;
                  v842 -= 8;
                }
                while (v842);
                v798 = v1062;
                if (v1062 == v40)
                  goto LABEL_821;
              }
            }
            else
            {
              v798 = 0;
            }
            v799 = v798;
            v800 = v40 - v798;
            v801 = &v41->i32[v799];
            v802 = &a2[v763 + v799];
            v803 = &a2[v762 + v799];
            v804 = &a2[v760 + v799];
            do
            {
              v806 = *v804++;
              v805 = v806;
              v807 = *v803++;
              v808 = v807 + v805;
              v809 = *v802++;
              *v801++ = v808 - v809;
              --v800;
            }
            while (v800);
          }
        }
        else
        {
          if ((_DWORD)v685 == -1 || v678 && (!a3[v683] || !a3[v684] || !a3[v685]))
          {
            if ((_DWORD)v684 == -1 || v678 && (!a3[v683] || !a3[v684]))
            {
              if ((_DWORD)v683 == -1 || v678 && !a3[v683])
              {
                if ((_DWORD)v40)
                  bzero(v41, v1054);
                gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v39, 3u, 0, (int32x4_t *)&a2[v677 * v39]);
                v40 = *(_QWORD *)v1069;
                v680 = v1067;
                goto LABEL_823;
              }
              if ((_DWORD)v39)
              {
                v729 = (int)v683 * (int)v39;
                if (v40 < 8 || (unint64_t)((char *)v41 - (char *)a2 - 4 * v729) < 0x20)
                {
                  v730 = 0;
                  goto LABEL_879;
                }
                v825 = &v1046[v729];
                v826 = v41 + 1;
                v827 = v1062;
                do
                {
                  v828 = *(int32x4_t *)v825;
                  v826[-1] = *((int32x4_t *)v825 - 1);
                  *v826 = v828;
                  v825 += 8;
                  v826 += 2;
                  v827 -= 8;
                }
                while (v827);
                v730 = v1062;
                if (v1062 != v40)
                {
LABEL_879:
                  v731 = v40 - v730;
                  v732 = v730;
                  v733 = &v41->i32[v730];
                  v734 = &a2[v729 + v732];
                  do
                  {
                    v735 = *v734++;
                    *v733++ = v735;
                    --v731;
                  }
                  while (v731);
                }
              }
              v681 = 0;
              goto LABEL_822;
            }
            if ((_DWORD)v39)
            {
              v714 = v683 * v40;
              v715 = (int)v683 * (int)v40;
              v716 = v684 * v40;
              v717 = (int)v684 * (int)v40;
              if (v40 >= 8
                && ((unint64_t)((char *)v41 - (char *)&a2[v716]) >= 0x10
                  ? (v718 = (unint64_t)((char *)v41 - (char *)&a2[v714]) >= 0x10)
                  : (v718 = 0),
                    v718))
              {
                v817 = &a2[v714];
                v818 = v1041;
                v819 = v41;
                v820 = &a2[v716];
                do
                {
                  v821 = *(int32x4_t *)v817;
                  v817 += 4;
                  v822 = v821;
                  v823 = *(int32x4_t *)v820;
                  v820 += 4;
                  v824 = (uint32x4_t)vaddq_s32(v823, v822);
                  *v819++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v824, v824, 0x1FuLL), 1uLL);
                  v818 -= 4;
                }
                while (v818);
                v719 = v1041;
                if (v1041 != v40)
                  goto LABEL_867;
              }
              else
              {
                v719 = 0;
LABEL_867:
                v720 = v40 - v719;
                v721 = v719;
                v722 = &v41->i32[v719];
                v723 = &a2[v717 + v721];
                v724 = &a2[v715 + v721];
                do
                {
                  v726 = *v724++;
                  v725 = v726;
                  v727 = *v723++;
                  v296 = __OFADD__(v727, v725);
                  v728 = v727 + v725;
                  if (v728 < 0 != v296)
                    ++v728;
                  *v722++ = v728 >> 1;
                  --v720;
                }
                while (v720);
              }
            }
            v681 = 1;
            goto LABEL_822;
          }
          if ((_DWORD)v40)
          {
            v699 = (int)v683 * (int)v39;
            v700 = (int)v684 * (int)v39;
            v701 = (int)v685 * (int)v40;
            if (v40 >= 0xC)
            {
              v702 = 0;
              v778 = (char *)v41 - (char *)a2;
              if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v701) >= 0x20
                && (unint64_t)(v778 - 4 * v700) >= 0x20
                && (unint64_t)(v778 - 4 * v699) >= 0x20)
              {
                v779 = (int32x4_t *)&v1046[v699];
                v780 = v41 + 1;
                v781 = (int32x4_t *)&v1046[v700];
                v782 = (int32x4_t *)&v1046[v701];
                v783 = v1062;
                do
                {
                  v784 = vsubq_s32(vaddq_s32(v781[-1], v779[-1]), v782[-1]);
                  v785 = vsubq_s32(vaddq_s32(*v781, *v779), *v782);
                  v779 += 2;
                  v780[-1] = v784;
                  *v780 = v785;
                  v780 += 2;
                  v781 += 2;
                  v782 += 2;
                  v783 -= 8;
                }
                while (v783);
                v702 = v1062;
                if (v1062 == v40)
                  goto LABEL_821;
              }
            }
            else
            {
              v702 = 0;
            }
            v703 = v702;
            v704 = v40 - v702;
            v705 = &v41->i32[v703];
            v706 = &a2[v701 + v703];
            v707 = &a2[v700 + v703];
            v708 = &a2[v699 + v703];
            do
            {
              v710 = *v708++;
              v709 = v710;
              v711 = *v707++;
              v712 = v711 + v709;
              v713 = *v706++;
              *v705++ = v712 - v713;
              --v704;
            }
            while (v704);
          }
        }
LABEL_821:
        v681 = 2;
LABEL_822:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v39, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v681 - 2], (int32x4_t *)&a2[v677 * v39]);
        v40 = *(_QWORD *)v1069;
        v680 = v1067;
LABEL_823:
        if (++v677 >= *((int *)this + 959))
          goto LABEL_1144;
      }
    case 3:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v42 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v37 = (int32x4_t *)operator new(4 * v33);
        v1074 = v37;
        v1076 = (int32x4_t *)((char *)v37 + 4 * v33);
        bzero(v37, 4 * v33);
        v1075 = v1076;
        v1057 = (int32x4_t *)operator new(4 * v33);
        bzero(v1057, 4 * v33);
        v42 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
        {
LABEL_1080:
          v675 = v1057;
          if (!v1057)
            goto LABEL_817;
          goto LABEL_816;
        }
      }
      else
      {
        v37 = 0;
        v1057 = 0;
        if (*((int *)this + 959) < 1)
          goto LABEL_1080;
      }
      v880 = 0;
      v881 = *((_DWORD *)this + 964);
      v1038 = (unint64_t)v1057 + 4 * v42;
      v1042 = v42 & 0xFFFFFFFC;
      v1047 = 4 * v42;
      v1032 = a2 + 4;
      v1035 = (char *)(v42 & 0xFFFFFFF8);
      v1055 = 0x8000;
      while (1)
      {
        if (v881 && !a3[v880])
          goto LABEL_993;
        v884 = (int *)(*((_QWORD *)this + 22) + 12 * v880);
        v885 = *v884;
        v886 = v884[1];
        v887 = v884[2];
        v888 = (int *)(*((_QWORD *)this + 25) + 12 * v880);
        v889 = v888[2];
        if ((_DWORD)v889 != -1)
        {
          v890 = *v888;
          v891 = v888[1];
          if (!v881 || v1064[v885] && v1064[v886] && v1064[v887] && v1064[v890] && v1064[v891] && v1064[v889])
          {
            v1023 = v37;
            v892 = v42;
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v885 * (int)v42], (int32x4_t *)&v1065[(int)v886 * (int)v42], (int32x4_t *)&v1065[(int)v887 * (int)v1066], v1066, (int *)(*((_QWORD *)this + 13) + 12 * (int)v885), (int *)(*((_QWORD *)this + 13) + 12 * (int)v886), (int *)(*((_QWORD *)this + 13) + 12 * (int)v887), (int *)(*((_QWORD *)this + 13) + 12 * v880), v1023);
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v890 * v892], (int32x4_t *)&v1065[(int)v891 * (int)v1066], (int32x4_t *)&v1065[(int)v889 * (int)v1066], v892, (int *)(*((_QWORD *)this + 13) + 12 * (int)v890), (int *)(*((_QWORD *)this + 13) + 12 * (int)v891), (int *)(*((_QWORD *)this + 13) + 12 * (int)v889), (int *)(*((_QWORD *)this + 13) + 12 * v880), v1057);
            if ((_DWORD)v1066)
            {
              v893 = v1074;
              v42 = *(_QWORD *)v1069;
              if (v1069[0] >= 4u)
              {
                a3 = v1064;
                v883 = v1065;
                v895 = v1057;
                if ((unint64_t)v1074 >= v1038 || v1057 >= (int32x4_t *)&v1074->i8[v1047])
                {
                  v935 = v1042;
                  v936 = v1057;
                  v937 = v1074;
                  do
                  {
                    v938 = *v936++;
                    v939 = (uint32x4_t)vaddq_s32(v938, *v937);
                    *v937++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v939, v939, 0x1FuLL), 1uLL);
                    v935 -= 4;
                  }
                  while (v935);
                  v894 = v1042;
                  if (v1042 == *(_QWORD *)v1069)
                  {
LABEL_1071:
                    v882 = 2;
                    goto LABEL_992;
                  }
                }
                else
                {
                  v894 = 0;
                }
              }
              else
              {
                v894 = 0;
                a3 = v1064;
                v883 = v1065;
                v895 = v1057;
              }
              v940 = *(_QWORD *)v1069 - v894;
              v941 = v894;
              v942 = &v895->i32[v894];
              v943 = &v893->i32[v941];
              do
              {
                v944 = *v942++;
                v945 = v944 + *v943;
                if (v945 < 0 != __OFADD__(v944, *v943))
                  ++v945;
                *v943++ = v945 >> 1;
                --v940;
              }
              while (v940);
              goto LABEL_1071;
            }
            v882 = 2;
            a3 = v1064;
            v883 = v1065;
            goto LABEL_991;
          }
        }
        a3 = v1064;
        v883 = v1065;
        if ((_DWORD)v887 != -1 && (!v881 || v1064[v885] && v1064[v886] && v1064[v887]))
        {
          v896 = v42;
          gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v885 * (int)v42], (int32x4_t *)&v1065[(int)v886 * (int)v42], (int32x4_t *)&v1065[(int)v887 * (int)v42], v42, (int *)(*((_QWORD *)this + 13) + 12 * (int)v885), (int *)(*((_QWORD *)this + 13) + 12 * (int)v886), (int *)(*((_QWORD *)this + 13) + 12 * (int)v887), (int *)(*((_QWORD *)this + 13) + 12 * v880), v37);
          v882 = 2;
          a3 = v1064;
          v42 = v896;
          goto LABEL_992;
        }
        if ((_DWORD)v886 == -1 || v881 && (!v1064[v885] || !v1064[v886]))
        {
          if ((_DWORD)v885 == -1 || v881 && !v1064[v885])
          {
            if ((_DWORD)v42)
            {
              bzero(v37, v1047);
              v42 = *(_QWORD *)v1069;
            }
            gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v37, v42, 3u, 0, (int32x4_t *)&v1065[v880 * v1066]);
            v42 = *(_QWORD *)v1069;
            goto LABEL_993;
          }
          if ((_DWORD)v42)
          {
            v901 = (int)v885 * (int)v1066;
            if (v1066 < 8 || (unint64_t)((char *)v37 - (char *)v1065 - 4 * v901) < 0x20)
            {
              v902 = 0;
              goto LABEL_1027;
            }
            v946 = v1035;
            v947 = &v1032[v901];
            v948 = v37 + 1;
            do
            {
              v949 = *(int32x4_t *)v947;
              v948[-1] = *((int32x4_t *)v947 - 1);
              *v948 = v949;
              v947 += 8;
              v948 += 2;
              v946 -= 8;
            }
            while (v946);
            v902 = v1035;
            if (v1035 != (char *)v42)
            {
LABEL_1027:
              v903 = v42 - (_QWORD)v902;
              v904 = (uint64_t)v902;
              v905 = &v37->i32[(_QWORD)v902];
              v906 = &v1065[v901 + v904];
              do
              {
                v907 = *v906++;
                *v905++ = v907;
                --v903;
              }
              while (v903);
            }
          }
          v882 = 0;
          goto LABEL_992;
        }
        if ((_DWORD)v42 != 2)
        {
          if ((_DWORD)v42)
          {
            v914 = v885 * v42;
            v915 = (int)v885 * (int)v42;
            v916 = v886 * v1066;
            v917 = (int)v886 * (int)v1066;
            if (v1066 >= 8
              && ((unint64_t)((char *)v37 - (char *)&v1065[v916]) >= 0x10
                ? (v918 = (unint64_t)((char *)v37 - (char *)&v1065[v914]) >= 0x10)
                : (v918 = 0),
                  v918))
            {
              v950 = (int32x4_t *)&v1065[v914];
              v951 = v1042;
              v952 = v37;
              v953 = (int32x4_t *)&v1065[v916];
              do
              {
                v954 = *v950++;
                v955 = v954;
                v956 = *v953++;
                v957 = (uint32x4_t)vaddq_s32(v956, v955);
                *v952++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v957, v957, 0x1FuLL), 1uLL);
                v951 -= 4;
              }
              while (v951);
              v919 = v1042;
              if (v1042 != v42)
                goto LABEL_1049;
            }
            else
            {
              v919 = 0;
LABEL_1049:
              v920 = v42 - v919;
              v921 = v919;
              v922 = &v37->i32[v919];
              v923 = &v1065[v917 + v921];
              v924 = &v1065[v915 + v921];
              do
              {
                v926 = *v924++;
                v925 = v926;
                v927 = *v923++;
                v296 = __OFADD__(v927, v925);
                v928 = v927 + v925;
                if (v928 < 0 != v296)
                  ++v928;
                *v922++ = v928 >> 1;
                --v920;
              }
              while (v920);
            }
          }
          v882 = 1;
          goto LABEL_992;
        }
        v897 = *((_DWORD *)this + 683);
        v898 = *((_DWORD *)this + 684);
        if (v897 < 0x40000001)
          break;
        v909 = *((_DWORD *)this + 683);
        v900 = v1055;
LABEL_1058:
        v929 = (HIWORD(v909) * (unsigned __int16)v900) & 0xFFFF0000;
        v930 = v909 - v929;
        v931 = v898 >= v929;
        v932 = v900;
        v933 = *((unsigned __int16 *)this + ((v900 >> 7) & 0x1FE | v931) + 1376);
        if (v898 < v929)
          v934 = v929;
        else
          v934 = v930;
        if (v898 < v929)
          v929 = 0;
        *((_DWORD *)this + 683) = v934;
        *((_DWORD *)this + 684) = v898 - v929;
        gcl::tmesh::ComputeTexCoordinatesPrediction(&v1065[2 * v885], &v1065[2 * v886], (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v885), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v886), (int *)(*((_QWORD *)this + 13) + 12 * v880), v931, v37->i32);
        v1055 = v933 + v932;
        v882 = 1;
        a3 = v1064;
LABEL_991:
        v42 = *(_QWORD *)v1069;
LABEL_992:
        v37 = v1074;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v1074, v42, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v882 - 2], (int32x4_t *)&v883[v880 * v1066]);
        v42 = *(_QWORD *)v1069;
LABEL_993:
        if (++v880 >= *((int *)this + 959))
          goto LABEL_1080;
      }
      v899 = *((_DWORD *)this + 686);
      v900 = v1055;
      while (1)
      {
        v898 *= 2;
        *((_DWORD *)this + 686) = --v899;
        if (v899)
          goto LABEL_1032;
        v910 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v910 + 1;
        v911 = *((unsigned int *)this + 676);
        if (v910 + 1 >= v911)
        {
          v912 = 65280;
          v913 = v910 + 2;
          *((_QWORD *)this + 340) = v913;
          if (v913 >= v911)
          {
LABEL_1038:
            v908 = 255;
            goto LABEL_1031;
          }
        }
        else
        {
          v912 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v910 + 1) << 8;
          v913 = v910 + 2;
          *((_QWORD *)this + 340) = v913;
          if (v913 >= v911)
            goto LABEL_1038;
        }
        v908 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v913);
LABEL_1031:
        v898 |= v912 | v908;
        v899 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_1032:
        v909 = 2 * v897;
        v84 = v897 >= 0x20000001;
        v897 *= 2;
        if (v84)
          goto LABEL_1058;
      }
    case 4:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      memset_pattern16(&v1072, &memset_pattern_26, 6uLL);
      memset_pattern16(&v1070, &memset_pattern_26, 6uLL);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v36 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v37 = (int32x4_t *)operator new(4 * v33);
        v1074 = v37;
        v1076 = (int32x4_t *)((char *)v37 + 4 * v33);
        bzero(v37, 4 * v33);
        v1075 = (int32x4_t *)((char *)v37 + 4 * v33);
        v1033 = (int32x4_t *)operator new(4 * v33);
        bzero(v1033, 4 * v33);
        v36 = *(_QWORD *)v1069;
        v38 = v1070.u16[0];
        v1043 = v1072.u16[0];
        if (*((int *)this + 959) < 1)
        {
LABEL_815:
          v1070.i16[0] = v38;
          v1072.i16[0] = v1043;
          v675 = v1033;
          if (!v1033)
          {
LABEL_817:
            if (!v37)
              goto LABEL_1147;
            v1075 = v37;
            v676 = v37;
            goto LABEL_1146;
          }
LABEL_816:
          operator delete(v675);
          goto LABEL_817;
        }
      }
      else
      {
        v37 = 0;
        v1033 = 0;
        v38 = v1070.u16[0];
        v1043 = v1072.u16[0];
        if (*((int *)this + 959) < 1)
          goto LABEL_815;
      }
      v370 = 0;
      v371 = *((_DWORD *)this + 964);
      v1024 = &a2[v36];
      v1025 = (unint64_t)v1033 + 4 * v36;
      v1028 = v36 & 0xFFFFFFF8;
      v1029 = 4 * v36;
      v1026 = a2 + 4;
      v1027 = v36 & 0xFFFFFFFC;
      v1031 = 0x8000;
      v372 = vdupq_n_s32(0x55555556u);
      v1040 = v371;
      *(int32x4_t *)v1061 = v372;
      while (1)
      {
        if (v371 && !a3[v370])
          goto LABEL_525;
        v374 = (int *)(*((_QWORD *)this + 22) + 12 * v370);
        v375 = *v374;
        v376 = v374[1];
        v377 = v374[2];
        v378 = (int *)(*((_QWORD *)this + 25) + 12 * v370);
        v379 = v378[2];
        if ((_DWORD)v379 == -1)
          break;
        v380 = *v378;
        v381 = v378[1];
        if (v371)
        {
          if (!a3[v375] || !a3[v376] || !a3[v377] || !a3[v380] || !a3[v381] || !a3[v379])
            break;
        }
        v382 = *((_DWORD *)this + 683);
        v383 = *((_DWORD *)this + 684);
        if (v382 < 0x40000001)
        {
          v384 = *((_DWORD *)this + 686);
          while (1)
          {
            v383 *= 2;
            *((_DWORD *)this + 686) = --v384;
            if (v384)
              goto LABEL_540;
            v387 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v387 + 1;
            v388 = *((unsigned int *)this + 676);
            if (v387 + 1 >= v388)
            {
              v389 = 65280;
              v390 = v387 + 2;
              *((_QWORD *)this + 340) = v390;
              if (v390 >= v388)
              {
LABEL_546:
                v385 = 255;
                goto LABEL_539;
              }
            }
            else
            {
              v389 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v387 + 1) << 8;
              v390 = v387 + 2;
              *((_QWORD *)this + 340) = v390;
              if (v390 >= v388)
                goto LABEL_546;
            }
            v385 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v390);
LABEL_539:
            v383 |= v389 | v385;
            v384 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_540:
            v386 = 2 * v382;
            v84 = v382 >= 0x20000001;
            v382 *= 2;
            if (v84)
              goto LABEL_593;
          }
        }
        v386 = *((_DWORD *)this + 683);
LABEL_593:
        v420 = (HIWORD(v386) * (unsigned __int16)v38) & 0xFFFF0000;
        v421 = v386 - v420;
        v422 = v383 >= v420;
        v423 = v383 >= v420;
        v424 = *((unsigned __int16 *)this + ((v38 >> 7) & 0x1FE | v423) + 1376);
        if (v383 < v420)
          v425 = v420;
        else
          v425 = v421;
        if (v383 < v420)
          v420 = 0;
        if (v422)
          v426 = 2;
        else
          v426 = 1;
        v427 = v383 - v420;
        *((_DWORD *)this + 683) = v425;
        *((_DWORD *)this + 684) = v383 - v420;
        v1037 = v37;
        if (v425 < 0x40000001)
        {
          v428 = *((_DWORD *)this + 686);
          while (2)
          {
            v427 *= 2;
            *((_DWORD *)this + 686) = --v428;
            if (v428)
              goto LABEL_605;
            v431 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v431 + 1;
            v432 = *((unsigned int *)this + 676);
            if (v431 + 1 >= v432)
            {
              v433 = 65280;
              v434 = v431 + 2;
              *((_QWORD *)this + 340) = v434;
              if (v434 >= v432)
                goto LABEL_611;
            }
            else
            {
              v433 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v431 + 1) << 8;
              v434 = v431 + 2;
              *((_QWORD *)this + 340) = v434;
              if (v434 >= v432)
              {
LABEL_611:
                v429 = 255;
LABEL_604:
                v427 |= v433 | v429;
                v428 = 16;
                *((_DWORD *)this + 686) = 16;
LABEL_605:
                v430 = 2 * v425;
                v84 = v425 >= 0x20000001;
                v425 *= 2;
                if (v84)
                  goto LABEL_613;
                continue;
              }
            }
            break;
          }
          v429 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v434);
          goto LABEL_604;
        }
        v430 = v425;
LABEL_613:
        v435 = v380;
        v436 = v375 * v36;
        v437 = (int)v375 * (int)v36;
        v438 = v376 * v1066;
        v439 = v377 * v1066;
        v38 += v424;
        v440 = v1070.u16[v426];
        v441 = (HIWORD(v430) * v440) & 0xFFFF0000;
        v442 = v430 - v441;
        v443 = v427 >= v441;
        v1070.i16[v426] = *((_WORD *)this + ((v440 >> 7) & 0x1FE | v443) + 1376) + v440;
        if (v427 < v441)
          v444 = v441;
        else
          v444 = v442;
        if (v427 < v441)
          v445 = 0;
        else
          v445 = v441;
        *((_DWORD *)this + 683) = v444;
        *((_DWORD *)this + 684) = v427 - v445;
        v446 = v423 | (2 * v443);
        if (v446)
        {
          v1052 = v38;
          v447 = (int32x4_t *)&v1065[v436];
          v448 = (int32x4_t *)&v1065[v438];
          v449 = (int32x4_t *)&v1065[v439];
          v450 = (int32x4_t *)&v1065[v435 * (int)v36];
          v451 = v381 * v36;
          v452 = (int32x4_t *)&v1065[(int)v381 * (int)v36];
          v453 = v379 * v36;
          v454 = (int32x4_t *)&v1065[(int)v379 * (int)v36];
          if (v446 == 2)
          {
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v447, v448, v449, v1066, (int *)(*((_QWORD *)this + 13) + 12 * (int)v375), (int *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * (int)v377), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1037);
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v450, v452, v454, v1069[0], (int *)(*((_QWORD *)this + 13) + 12 * v435), (int *)(*((_QWORD *)this + 13) + 12 * (int)v381), (int *)(*((_QWORD *)this + 13) + 12 * (int)v379), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1033);
            v36 = *(_QWORD *)v1069;
            v402 = v1066;
            if (!(_DWORD)v1066)
            {
              v373 = 2;
              v393 = v1065;
LABEL_738:
              v38 = v1052;
              goto LABEL_739;
            }
            v525 = v1074;
            a3 = v1064;
            v393 = v1065;
            v38 = v1052;
            v371 = v1040;
            if (v1066 < 4 || (unint64_t)v1074 < v1025 && v1033 < (int32x4_t *)&v1074->i8[v1029])
            {
              v526 = 0;
LABEL_682:
              v527 = *(_QWORD *)v1069 - v526;
              v528 = v526;
              v529 = &v1033->i32[v526];
              v530 = &v525->i32[v528];
              do
              {
                v531 = *v529++;
                v532 = v531 + *v530;
                if (v532 < 0 != __OFADD__(v531, *v530))
                  ++v532;
                *v530++ = v532 >> 1;
                --v527;
              }
              while (v527);
              goto LABEL_523;
            }
            v662 = v1027;
            v663 = v1033;
            v664 = v1074;
            do
            {
              v665 = *v663++;
              v666 = (uint32x4_t)vaddq_s32(v665, *v664);
              *v664++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v666, v666, 0x1FuLL), 1uLL);
              v662 -= 4;
            }
            while (v662);
            v526 = v1027;
            if (v1027 != *(_QWORD *)v1069)
              goto LABEL_682;
          }
          else
          {
            v455 = v435 * (int)v36;
            if (v446 != 1)
            {
              if ((_DWORD)v36 == 2)
              {
                gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)v447, v448->i32, v449->i32, (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v375), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1037->i32);
                gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)v450, v452->i32, v454->i32, (_DWORD *)(*((_QWORD *)this + 13) + 12 * v435), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v381), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1033->i32);
                v546 = v1074;
                v547 = v1074->i32[1];
                v548 = v1033->i32[0] + v1074->i32[0];
                if (v548 < 0 != __OFADD__(v1033->i32[0], v1074->i32[0]))
                  ++v548;
                v1074->i32[0] = v548 >> 1;
                v549 = v1033->i32[1];
                v296 = __OFADD__(v549, v547);
                v550 = v549 + v547;
                if (v550 < 0 != v296)
                  ++v550;
                v546->i32[1] = v550 >> 1;
                v373 = 2;
                v393 = v1065;
                v402 = v1066;
                v36 = *(_QWORD *)v1069;
                goto LABEL_738;
              }
              v393 = v1065;
              v402 = v1066;
              a3 = v1064;
              if ((_DWORD)v1066)
              {
                if (v1066 >= 0xC)
                {
                  v575 = 0;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v453]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v439]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v451]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[(int)v376 * (int)v1066]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v455]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v437]) < 0x10)
                    goto LABEL_722;
                  v640 = v1027;
                  v641 = (uint32x4_t *)v1037;
                  v642 = (int32x4_t *)&v1065[v453];
                  v643 = (int32x4_t *)&v1065[v439];
                  v644 = v452;
                  v645 = v448;
                  v646 = (int32x4_t *)&v1065[v435 * (int)v36];
                  v647 = v447;
                  do
                  {
                    v648 = *v647++;
                    v649 = v648;
                    v650 = *v646++;
                    v651 = (uint32x4_t)vaddq_s32(v650, v649);
                    v652 = *v645++;
                    v653 = v652;
                    v654 = *v644++;
                    v655 = v654;
                    v656 = *v643++;
                    v657 = v656;
                    v658 = *v642++;
                    v659 = vaddq_s32(v655, v653);
                    v660 = vaddq_s32(vsubq_s32(vshrq_n_s32((int32x4_t)vsraq_n_u32(v651, v651, 0x1FuLL), 1uLL), vaddq_s32(v657, v658)), vaddq_s32(v659, v659));
                    v661 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v660.i8, *(int32x2_t *)v372.i8), (int32x4_t)vmull_high_s32(v660, v372));
                    *v641++ = vsraq_n_u32(v661, v661, 0x1FuLL);
                    v640 -= 4;
                  }
                  while (v640);
                  v575 = v1027;
                  if (v1027 != v36)
                    goto LABEL_722;
                }
                else
                {
                  v575 = 0;
                  do
                  {
LABEL_722:
                    v576 = v447->i32[v575];
                    v577 = v450->i32[v575];
                    v296 = __OFADD__(v577, v576);
                    v578 = v577 + v576;
                    if (v578 < 0 != v296)
                      ++v578;
                    v579 = 1431655766
                         * ((v578 >> 1) - (v449->i32[v575] + v454->i32[v575]) + 2 * (v452->i32[v575] + v448->i32[v575]));
                    v1037->i32[v575++] = HIDWORD(v579) + (v579 >> 63);
                  }
                  while (v36 != v575);
                }
              }
              v373 = 2;
LABEL_736:
              v38 = v1052;
              v371 = v1040;
              goto LABEL_524;
            }
            a3 = v1064;
            v393 = v1065;
            if (!(_DWORD)v36)
            {
              v373 = 2;
              v402 = v1066;
              goto LABEL_736;
            }
            v38 = v1052;
            v371 = v1040;
            v456 = 0;
            if (v36 >= 0xC)
            {
              v457 = v1037;
              if ((unint64_t)((char *)v1037 - (char *)&v1065[v453]) < 0x20)
              {
                v402 = v1066;
              }
              else
              {
                v402 = v1066;
                if ((unint64_t)((char *)v1037 - (char *)&v1065[v451]) >= 0x20
                  && (unint64_t)((char *)v1037 - (char *)&v1065[v455]) >= 0x20)
                {
                  v604 = (int32x4_t *)&v1026[v455];
                  v605 = v1037 + 1;
                  v606 = (int32x4_t *)&v1026[v451];
                  v607 = (int32x4_t *)&v1026[v453];
                  v608 = v1028;
                  do
                  {
                    v609 = vsubq_s32(vaddq_s32(v606[-1], v604[-1]), v607[-1]);
                    v610 = vsubq_s32(vaddq_s32(*v606, *v604), *v607);
                    v604 += 2;
                    v605[-1] = v609;
                    *v605 = v610;
                    v605 += 2;
                    v606 += 2;
                    v607 += 2;
                    v608 -= 8;
                  }
                  while (v608);
                  v456 = v1028;
                  if (v1028 == v36)
                    goto LABEL_523;
                }
              }
            }
            else
            {
              v402 = v1066;
              v457 = v1037;
            }
            v458 = v456;
            v459 = v36 - v456;
            v460 = &v457->i32[v458];
            v461 = &v1065[v453 + v458];
            v462 = &v1065[v451 + v458];
            v463 = &v1065[v455 + v458];
            do
            {
              v465 = *v463++;
              v464 = v465;
              v466 = *v462++;
              v467 = v466 + v464;
              v468 = *v461++;
              *v460++ = v467 - v468;
              --v459;
            }
            while (v459);
          }
        }
        else
        {
          if (!(_DWORD)v36)
          {
            v373 = 2;
            v393 = v1065;
            v402 = v1066;
LABEL_739:
            a3 = v1064;
            v371 = v1040;
            goto LABEL_524;
          }
          v393 = v1065;
          v402 = v1066;
          a3 = v1064;
          v371 = v1040;
          v533 = 0;
          if (v1066 >= 0xC)
          {
            v534 = v37;
            v596 = (char *)v37 - (char *)v1065;
            if ((unint64_t)((char *)v37 - (char *)v1065 - 4 * v439) >= 0x20
              && (unint64_t)(v596 - 4 * v438) >= 0x20
              && (unint64_t)(v596 - 4 * v436) >= 0x20)
            {
              v597 = (int32x4_t *)&v1026[v436];
              v598 = v37 + 1;
              v599 = (int32x4_t *)&v1026[v438];
              v600 = (int32x4_t *)&v1026[v439];
              v601 = v1028;
              do
              {
                v602 = vsubq_s32(vaddq_s32(v599[-1], v597[-1]), v600[-1]);
                v603 = vsubq_s32(vaddq_s32(*v599, *v597), *v600);
                v597 += 2;
                v598[-1] = v602;
                *v598 = v603;
                v598 += 2;
                v599 += 2;
                v600 += 2;
                v601 -= 8;
              }
              while (v601);
              v533 = v1028;
              if (v1028 == v36)
                goto LABEL_523;
            }
          }
          else
          {
            v534 = v37;
          }
          v535 = v533;
          v536 = v36 - v533;
          v537 = &v534->i32[v535];
          v538 = &v1065[v439 + v535];
          v539 = &v1065[v438 + v535];
          v540 = &v1065[v436 + v535];
          do
          {
            v542 = *v540++;
            v541 = v542;
            v543 = *v539++;
            v544 = v543 + v541;
            v545 = *v538++;
            *v537++ = v544 - v545;
            --v536;
          }
          while (v536);
        }
LABEL_523:
        v373 = 2;
LABEL_524:
        v37 = v1074;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v1074, v36, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v373 - 2], (int32x4_t *)&v393[v370 * v402]);
        v36 = *(_QWORD *)v1069;
        v372 = *(int32x4_t *)v1061;
LABEL_525:
        if (++v370 >= *((int *)this + 959))
          goto LABEL_815;
      }
      if ((_DWORD)v377 != -1 && (!v371 || a3[v375] && a3[v376] && a3[v377]))
      {
        v391 = *((_DWORD *)this + 683);
        v392 = *((_DWORD *)this + 684);
        v393 = v1065;
        if (v391 < 0x40000001)
        {
          v394 = *((_DWORD *)this + 686);
          v395 = v1066;
          while (1)
          {
            v392 *= 2;
            *((_DWORD *)this + 686) = --v394;
            if (v394)
              goto LABEL_556;
            v398 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v398 + 1;
            v399 = *((unsigned int *)this + 676);
            if (v398 + 1 >= v399)
            {
              v400 = 65280;
              v401 = v398 + 2;
              *((_QWORD *)this + 340) = v401;
              if (v401 >= v399)
              {
LABEL_562:
                v396 = 255;
                goto LABEL_555;
              }
            }
            else
            {
              v400 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v398 + 1) << 8;
              v401 = v398 + 2;
              *((_QWORD *)this + 340) = v401;
              if (v401 >= v399)
                goto LABEL_562;
            }
            v396 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v401);
LABEL_555:
            v392 |= v400 | v396;
            v394 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_556:
            v397 = 2 * v391;
            v84 = v391 >= 0x20000001;
            v391 *= 2;
            if (v84)
              goto LABEL_629;
          }
        }
        v397 = *((_DWORD *)this + 683);
        v395 = v1066;
LABEL_629:
        v469 = (HIWORD(v397) * (unsigned __int16)v1043) & 0xFFFF0000;
        v470 = v397 - v469;
        v471 = v392 >= v469;
        v472 = v392 >= v469;
        v473 = *((unsigned __int16 *)this + ((v1043 >> 7) & 0x1FE | v472) + 1376);
        if (v392 < v469)
          v474 = v469;
        else
          v474 = v470;
        if (v392 < v469)
          v475 = 0;
        else
          v475 = v469;
        v476 = 1;
        if (v471)
          v476 = 2;
        v477 = v392 - v475;
        *((_DWORD *)this + 683) = v474;
        *((_DWORD *)this + 684) = v477;
        if (v474 < 0x40000001)
        {
          v478 = *((_DWORD *)this + 686);
          while (1)
          {
            v477 *= 2;
            *((_DWORD *)this + 686) = --v478;
            if (v478)
              goto LABEL_641;
            v481 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v481 + 1;
            v482 = *((unsigned int *)this + 676);
            if (v481 + 1 >= v482)
            {
              v483 = 65280;
              v484 = v481 + 2;
              *((_QWORD *)this + 340) = v484;
              if (v484 >= v482)
              {
LABEL_647:
                v479 = 255;
                goto LABEL_640;
              }
            }
            else
            {
              v483 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v481 + 1) << 8;
              v484 = v481 + 2;
              *((_QWORD *)this + 340) = v484;
              if (v484 >= v482)
                goto LABEL_647;
            }
            v479 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v484);
LABEL_640:
            v477 |= v483 | v479;
            v478 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_641:
            v480 = 2 * v474;
            v84 = v474 >= 0x20000001;
            v474 *= 2;
            if (v84)
              goto LABEL_649;
          }
        }
        v480 = v474;
LABEL_649:
        v1053 = v38;
        v485 = (int)v375 * (int)v36;
        v486 = (int32x4_t *)&v1065[v485];
        v487 = (int)v376 * v395;
        v488 = (int32x4_t *)&v1065[v487];
        v489 = (int)v377 * (int)v36;
        v490 = (int32x4_t *)&v1065[v489];
        v1043 += v473;
        v491 = v1072.u16[v476];
        v492 = (HIWORD(v480) * v491) & 0xFFFF0000;
        v493 = v480 - v492;
        v494 = v477 >= v492;
        v1072.i16[v476] = *((_WORD *)this + ((v491 >> 7) & 0x1FE | v494) + 1376) + v491;
        if (v477 < v492)
          v495 = v492;
        else
          v495 = v493;
        if (v477 < v492)
          v496 = 0;
        else
          v496 = v492;
        *((_DWORD *)this + 683) = v495;
        *((_DWORD *)this + 684) = v477 - v496;
        v497 = v472 | (2 * v494);
        if (v497 != 2)
        {
          if (v497 != 1)
          {
            if (!v497)
            {
              v38 = v1053;
              if ((_DWORD)v36)
              {
                if (v36 >= 0xC)
                {
                  v498 = 0;
                  if ((unint64_t)((char *)v37 - (char *)&v1065[v489]) >= 0x20)
                  {
                    v371 = v1040;
                    a3 = v1064;
                    if ((unint64_t)((char *)v37 - (char *)&v1065[v487]) >= 0x20
                      && (unint64_t)((char *)v37 - (char *)&v1065[v485]) >= 0x20)
                    {
                      v611 = (int32x4_t *)&v1026[v485];
                      v612 = v37 + 1;
                      v613 = (int32x4_t *)&v1026[v487];
                      v614 = (int32x4_t *)&v1026[v489];
                      v615 = v1028;
                      do
                      {
                        v616 = vsubq_s32(vaddq_s32(v613[-1], v611[-1]), v614[-1]);
                        v617 = vsubq_s32(vaddq_s32(*v613, *v611), *v614);
                        v611 += 2;
                        v612[-1] = v616;
                        *v612 = v617;
                        v612 += 2;
                        v613 += 2;
                        v614 += 2;
                        v615 -= 8;
                      }
                      while (v615);
                      v498 = v1028;
                      if (v1028 == v36)
                        goto LABEL_813;
                    }
                    goto LABEL_662;
                  }
                }
                else
                {
                  v498 = 0;
                }
                v371 = v1040;
                a3 = v1064;
LABEL_662:
                v499 = v498;
                v500 = v36 - v498;
                v501 = &v37->i32[v499];
                v502 = &v1065[v489 + v499];
                v503 = &v1065[v487 + v499];
                v504 = &v1065[v485 + v499];
                do
                {
                  v506 = *v504++;
                  v505 = v506;
                  v507 = *v503++;
                  v508 = v507 + v505;
                  v509 = *v502++;
                  *v501++ = v508 - v509;
                  --v500;
                }
                while (v500);
LABEL_813:
                v373 = 2;
                v402 = v1066;
                goto LABEL_524;
              }
LABEL_733:
              v373 = 2;
              v402 = v1066;
              v371 = v1040;
              a3 = v1064;
              goto LABEL_524;
            }
            if ((_DWORD)v36 == 2)
            {
              gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)&v1065[2 * v375], &v1065[2 * v376], &v1065[2 * (_DWORD)v377], (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v375), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * v370), v37->i32);
              v373 = 2;
              v36 = *(_QWORD *)v1069;
              v402 = v1066;
              v38 = v1053;
              v371 = v1040;
              a3 = v1064;
              goto LABEL_524;
            }
            v38 = v1053;
            if (!(_DWORD)v36)
              goto LABEL_733;
            if (v36 >= 0xC)
            {
              v580 = 0;
              v667 = (char *)v37 - (char *)v1065;
              if ((unint64_t)((char *)v37 - (char *)v1065 - 4 * v489) >= 0x20)
              {
                v371 = v1040;
                a3 = v1064;
                if ((unint64_t)(v667 - 4 * v487) >= 0x20 && (unint64_t)(v667 - 4 * v485) >= 0x20)
                {
                  v668 = (int32x4_t *)&v1026[v485];
                  v669 = v37 + 1;
                  v670 = (int32x4_t *)&v1026[v487];
                  v671 = (int32x4_t *)&v1026[v489];
                  v672 = v1028;
                  do
                  {
                    v673 = vsubq_s32(vaddq_s32(v670[-1], v668[-1]), v671[-1]);
                    v674 = vsubq_s32(vaddq_s32(*v670, *v668), *v671);
                    v668 += 2;
                    v669[-1] = v673;
                    *v669 = v674;
                    v669 += 2;
                    v670 += 2;
                    v671 += 2;
                    v672 -= 8;
                  }
                  while (v672);
                  v580 = v1028;
                  if (v1028 == v36)
                    goto LABEL_813;
                }
                goto LABEL_730;
              }
            }
            else
            {
              v580 = 0;
            }
            v371 = v1040;
            a3 = v1064;
LABEL_730:
            v581 = v580;
            v582 = v36 - v580;
            v583 = &v37->i32[v581];
            v584 = &v1065[v489 + v581];
            v585 = &v1065[v487 + v581];
            v586 = &v1065[v485 + v581];
            do
            {
              v588 = *v586++;
              v587 = v588;
              v589 = *v585++;
              v590 = v589 + v587;
              v591 = *v584++;
              *v583++ = v590 - v591;
              --v582;
            }
            while (v582);
            goto LABEL_813;
          }
          gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[v485], (int32x4_t *)&v1065[v487], v490, v36, (int *)(*((_QWORD *)this + 13) + 12 * (int)v375), (int *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * (int)v377), (int *)(*((_QWORD *)this + 13) + 12 * v370), v37);
          v373 = 2;
          v36 = *(_QWORD *)v1069;
LABEL_709:
          v402 = v1066;
          v38 = v1053;
          v371 = v1040;
          a3 = v1064;
          goto LABEL_524;
        }
        v551 = (int)v377 * (int)v36;
        v552 = v487;
        gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v486, v488, v490, v36, (int *)(*((_QWORD *)this + 13) + 12 * (int)v375), (int *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * (int)v377), (int *)(*((_QWORD *)this + 13) + 12 * v370), v37);
        if (!(_DWORD)v1066)
        {
          v373 = 2;
          v36 = *(_QWORD *)v1069;
          v393 = v1065;
          v402 = v1066;
          v38 = v1053;
          v371 = v1040;
          a3 = v1064;
          goto LABEL_524;
        }
        v553 = v1074;
        v36 = *(_QWORD *)v1069;
        if (v1069[0] >= 8u)
        {
          v554 = 0;
          v618 = (int32x4_t *)((char *)v1074 + v1029);
          v555 = v551;
          v620 = v1074 < (int32x4_t *)&v1024[v552] && v488 < v618;
          v622 = v1074 < (int32x4_t *)&v1024[v485] && v486 < v618;
          if (v490 >= v618 || v1074 >= (int32x4_t *)&v1024[v551])
          {
            v393 = v1065;
            if (!v620 && !v622)
            {
              v624 = v1027;
              v625 = v1074;
              do
              {
                v626 = *v486++;
                v627 = v626;
                v628 = *v488++;
                v629 = vaddq_s32(v628, v627);
                v630 = *v490++;
                v631 = (uint32x4_t)vaddq_s32(vsubq_s32(v629, v630), *v625);
                *v625++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v631, v631, 0x1FuLL), 1uLL);
                v624 -= 4;
              }
              while (v624);
              v554 = v1027;
              if (v1027 == *(_QWORD *)v1069)
              {
LABEL_708:
                v373 = 2;
                goto LABEL_709;
              }
            }
LABEL_704:
            v556 = v554;
            v557 = *(_QWORD *)v1069 - v554;
            v558 = &v553->i32[v556];
            v559 = &v393[v555 + v556];
            v560 = &v393[v552 + v556];
            v561 = &v393[v485 + v556];
            do
            {
              v563 = *v561++;
              v562 = v563;
              v564 = *v560++;
              v565 = v564 + v562;
              v566 = *v559++;
              v567 = v565 - v566;
              v296 = __OFADD__(v567, *v558);
              v568 = v567 + *v558;
              if (v568 < 0 != v296)
                ++v568;
              *v558++ = v568 >> 1;
              --v557;
            }
            while (v557);
            goto LABEL_708;
          }
        }
        else
        {
          v554 = 0;
          v555 = v551;
        }
        v393 = v1065;
        goto LABEL_704;
      }
      v393 = v1065;
      v402 = v1066;
      if ((_DWORD)v376 != -1 && (!v371 || a3[v375] && a3[v376]))
      {
        if ((_DWORD)v36 == 2)
        {
          v403 = *((_DWORD *)this + 683);
          v404 = *((_DWORD *)this + 684);
          if (v403 >= 0x40000001)
          {
            v415 = *((_DWORD *)this + 683);
            v406 = v1031;
LABEL_713:
            v569 = (HIWORD(v415) * (unsigned __int16)v406) & 0xFFFF0000;
            v570 = v415 - v569;
            v571 = v404 >= v569;
            v572 = v406;
            v573 = *((unsigned __int16 *)this + ((v406 >> 7) & 0x1FE | v571) + 1376);
            if (v404 < v569)
              v574 = v569;
            else
              v574 = v570;
            if (v404 < v569)
              v569 = 0;
            *((_DWORD *)this + 683) = v574;
            *((_DWORD *)this + 684) = v404 - v569;
            gcl::tmesh::ComputeTexCoordinatesPrediction(&v1065[2 * (_DWORD)v375], &v1065[2 * (_DWORD)v376], (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v375), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * v370), v571, v37->i32);
            v1031 = v573 + v572;
            v373 = 1;
            a3 = v1064;
            v36 = *(_QWORD *)v1069;
            v371 = v1040;
            goto LABEL_524;
          }
          v405 = *((_DWORD *)this + 686);
          v406 = v1031;
          while (1)
          {
            v404 *= 2;
            *((_DWORD *)this + 686) = --v405;
            if (v405)
              goto LABEL_582;
            v416 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v416 + 1;
            v417 = *((unsigned int *)this + 676);
            if (v416 + 1 >= v417)
            {
              v418 = 65280;
              v419 = v416 + 2;
              *((_QWORD *)this + 340) = v419;
              if (v419 >= v417)
              {
LABEL_588:
                v414 = 255;
                goto LABEL_581;
              }
            }
            else
            {
              v418 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v416 + 1) << 8;
              v419 = v416 + 2;
              *((_QWORD *)this + 340) = v419;
              if (v419 >= v417)
                goto LABEL_588;
            }
            v414 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v419);
LABEL_581:
            v404 |= v418 | v414;
            v405 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_582:
            v415 = 2 * v403;
            v84 = v403 >= 0x20000001;
            v403 *= 2;
            if (v84)
              goto LABEL_713;
          }
        }
        if ((_DWORD)v36)
        {
          v510 = v375 * v1066;
          v511 = (int)v375 * (int)v1066;
          v512 = v376 * v1066;
          v513 = (int)v376 * (int)v1066;
          if (v36 < 8
            || ((unint64_t)((char *)v37 - (char *)&v1065[v512]) >= 0x10
              ? (v514 = (unint64_t)((char *)v37 - (char *)&v1065[v510]) >= 0x10)
              : (v514 = 0),
                !v514))
          {
            v515 = 0;
            goto LABEL_672;
          }
          v632 = (int32x4_t *)&v1065[v510];
          v633 = v1027;
          v634 = v37;
          v635 = (int32x4_t *)&v1065[v512];
          do
          {
            v636 = *v632++;
            v637 = v636;
            v638 = *v635++;
            v639 = (uint32x4_t)vaddq_s32(v638, v637);
            *v634++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v639, v639, 0x1FuLL), 1uLL);
            v633 -= 4;
          }
          while (v633);
          v515 = v1027;
          if (v1027 != v36)
          {
LABEL_672:
            v516 = v36 - v515;
            v517 = v515;
            v518 = &v37->i32[v515];
            v519 = &v1065[v513 + v517];
            v520 = &v1065[v511 + v517];
            do
            {
              v522 = *v520++;
              v521 = v522;
              v523 = *v519++;
              v296 = __OFADD__(v523, v521);
              v524 = v523 + v521;
              if (v524 < 0 != v296)
                ++v524;
              *v518++ = v524 >> 1;
              --v516;
            }
            while (v516);
          }
        }
        v373 = 1;
        goto LABEL_524;
      }
      if ((_DWORD)v375 == -1 || v371 && !a3[v375])
      {
        if ((_DWORD)v36)
        {
          bzero(v37, v1029);
          v36 = *(_QWORD *)v1069;
        }
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v37, v36, 3u, 0, (int32x4_t *)&v1065[v370 * v1066]);
        v36 = *(_QWORD *)v1069;
        v372 = *(int32x4_t *)v1061;
        goto LABEL_525;
      }
      if (!(_DWORD)v36)
        goto LABEL_579;
      v407 = (int)v375 * (int)v1066;
      if (v1066 >= 8 && (unint64_t)((char *)v37 - (char *)v1065 - 4 * v407) >= 0x20)
      {
        v592 = &v1026[v407];
        v593 = v37 + 1;
        v594 = v1028;
        do
        {
          v595 = *(int32x4_t *)v592;
          v593[-1] = *((int32x4_t *)v592 - 1);
          *v593 = v595;
          v592 += 8;
          v593 += 2;
          v594 -= 8;
        }
        while (v594);
        v408 = v1028;
        if (v1028 == v36)
          goto LABEL_579;
      }
      else
      {
        v408 = 0;
      }
      v409 = v36 - v408;
      v410 = v408;
      v411 = &v37->i32[v408];
      v412 = &v1065[v407 + v410];
      do
      {
        v413 = *v412++;
        *v411++ = v413;
        --v409;
      }
      while (v409);
LABEL_579:
      v373 = 0;
      goto LABEL_524;
    case 5:
      v46 = ~(-1 << (*((_DWORD *)this + 962) - 1));
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      gcl::tmesh::EstimateQuantizedNormals((uint64_t *)this + 13, (_QWORD *)this + 16, (uint64_t)&v1074, v46);
      *(_QWORD *)&v1084 = 0;
      v1082 = 0u;
      v1083 = 0u;
      v1081 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v1069[0]);
      v47 = *((_DWORD *)this + 959);
      v48 = *(_QWORD *)v1069;
      if (v47 < 1)
        goto LABEL_463;
      v49 = 0;
      v1058 = *((_DWORD *)this + 964);
      v1044 = 2 * v46;
      v1049 = 0x8000;
      while (v1058 && !a3[v49])
      {
LABEL_75:
        if (++v49 >= v47)
          goto LABEL_463;
      }
      v57 = &v1074->i32[3 * v49];
      v59 = *v57;
      v58 = v57[1];
      v60 = v57[2];
      v61 = *(int *)(*((_QWORD *)this + 22) + 12 * v49);
      if ((_DWORD)v61 != -1 && (!v1058 || a3[v61]))
      {
        v62 = &v1065[(int)v61 * (int)v1066];
        v63 = *v62 - v46;
        v64 = v62[1] - v46;
        if (v63 >= 0)
          v65 = v63;
        else
          v65 = -v63;
        if (v64 >= 0)
          v66 = v64;
        else
          v66 = -v64;
        v67 = v46 - v65;
        v68 = v66 - v46;
        if (v63 >= 0)
          v68 = v46 - v66;
        v69 = v65 - v46;
        if (v64 >= 0)
          v69 = v67;
        v70 = v67 - v66;
        if (v70 < 0)
        {
          v63 = v68;
          v64 = v69;
        }
        if (v60 * (uint64_t)v70 + v59 * (uint64_t)v63 + v58 * (uint64_t)v64 < 0)
        {
          v59 = -v59;
          v58 = -v58;
          v60 = -v60;
        }
        goto LABEL_115;
      }
      v71 = *((_DWORD *)this + 683);
      v72 = *((_DWORD *)this + 684);
      if (v71 >= 0x40000001)
      {
        v75 = *((_DWORD *)this + 683);
LABEL_107:
        v80 = (HIWORD(v75) * (unsigned __int16)v1049) & 0xFFFF0000;
        v81 = v75 - v80;
        if (v72 < v80)
          v82 = 0;
        else
          v82 = (HIWORD(v75) * (unsigned __int16)v1049) & 0xFFFF0000;
        v83 = v72 - v82;
        v84 = v72 >= v80;
        v1049 += *((unsigned __int16 *)this + ((v1049 >> 7) & 0x1FE | (v72 >= v80)) + 1376);
        if (v72 < v80)
          v85 = v80;
        else
          v85 = v81;
        *((_DWORD *)this + 683) = v85;
        *((_DWORD *)this + 684) = v83;
        if (v84)
        {
          v59 = -v59;
          v58 = -v58;
          v60 = -v60;
        }
LABEL_115:
        if (v59 >= 0)
          v86 = v59;
        else
          v86 = -v59;
        if (v58 >= 0)
          v87 = v58;
        else
          v87 = -v58;
        if (v60 >= 0)
          v88 = v60;
        else
          v88 = -v60;
        v90 = v86 < v87 || v86 < v88;
        if (v90)
        {
          v86 = v88;
          v91 = v58;
          v92 = v59;
          if (v87 < v88)
            goto LABEL_135;
          v93 = &v1072.i32[3];
          v86 = v87;
          v91 = v60;
          v92 = v59;
        }
        else
        {
          v93 = (int *)v1073;
          v91 = v58;
          v92 = v60;
        }
        *v93 = v60;
LABEL_135:
        v1072.i64[0] = __PAIR64__(v91, v92);
        v1072.i32[2] = v86;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, &v1072, v48, *((_DWORD *)this + 966), (uint64_t *)&__b, &v1070);
        v51 = v1070.i32[0];
        v94 = v1070.i32[1];
        if (v1070.i32[0] >= 0)
          v95 = v1070.i32[0];
        else
          v95 = -v1070.i32[0];
        if (v1070.i32[1] >= 0)
          v96 = v1070.i32[1];
        else
          v96 = -v1070.i32[1];
        v97 = v46 - v95;
        v98 = v46 - v95 - v96;
        if (v98 < 0)
        {
          v99 = v46 - v96;
          v100 = v96 - v46;
          if (v1070.i32[0] >= 0)
            v51 = v99;
          else
            v51 = v100;
          v101 = v95 - v46;
          if (v1070.i32[1] >= 0)
            v94 = v97;
          else
            v94 = v101;
          v48 = *(_QWORD *)v1069;
          if (v90)
            goto LABEL_151;
        }
        else
        {
          v48 = *(_QWORD *)v1069;
          if (v90)
          {
LABEL_151:
            if (v87 >= v88)
            {
              v50 = v94;
              if (v58 >= 0)
                v94 = v98;
              else
                v94 = -v98;
            }
            else if (v60 >= 0)
            {
              v50 = v98;
            }
            else
            {
              v50 = -v98;
            }
            goto LABEL_64;
          }
        }
        v50 = v51;
        if (v59 >= 0)
          v51 = v98;
        else
          v51 = -v98;
LABEL_64:
        a3 = v1064;
        v52 = &v1065[v49 * v1066];
        if (v94 >= 0)
          v53 = v94;
        else
          v53 = -v94;
        if (v51 < 0)
        {
          v54 = -v51;
        }
        else
        {
          v53 = v1044 - v53;
          v54 = v51;
        }
        if (v94 >= 0)
          v54 = v1044 - v54;
        v55 = v51 + v46;
        v56 = v94 + v46;
        if (v50 < 0)
        {
          v55 = v53;
          v56 = v54;
        }
        *v52 = v55;
        v52[1] = v56;
        v47 = *((_DWORD *)this + 959);
        goto LABEL_75;
      }
      v73 = *((_DWORD *)this + 686);
      while (1)
      {
        v72 *= 2;
        *((_DWORD *)this + 686) = --v73;
        if (v73)
          goto LABEL_99;
        v76 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v76 + 1;
        v77 = *((unsigned int *)this + 676);
        if (v76 + 1 >= v77)
        {
          v78 = 65280;
          v79 = v76 + 2;
          *((_QWORD *)this + 340) = v79;
          if (v79 >= v77)
          {
LABEL_105:
            v74 = 255;
            goto LABEL_98;
          }
        }
        else
        {
          v78 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v76 + 1) << 8;
          v79 = v76 + 2;
          *((_QWORD *)this + 340) = v79;
          if (v79 >= v77)
            goto LABEL_105;
        }
        v74 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v79);
LABEL_98:
        v72 |= v78 | v74;
        v73 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_99:
        v75 = 2 * v71;
        v84 = v71 >= 0x20000001;
        v71 *= 2;
        if (v84)
          goto LABEL_107;
      }
    case 6:
      v102 = ~(-1 << (*((_DWORD *)this + 962) - 1));
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v1059 = v102;
      gcl::tmesh::EstimateQuantizedNormals((uint64_t *)this + 13, (_QWORD *)this + 16, (uint64_t)&v1074, v102);
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v1069[0]);
      memset_pattern16(v1073, &memset_pattern_26, 6uLL);
      memset_pattern16((char *)&v1072.u64[1] + 4, &memset_pattern_26, 6uLL);
      v103 = *((_DWORD *)this + 959);
      LODWORD(v104) = v1066;
      v105 = v1059;
      if (v103 <= 0)
        goto LABEL_443;
      v106 = v1069[0];
      v107 = 0;
      v108 = *((_DWORD *)this + 964);
      v1036 = v1073[0];
      v1034 = 2 * v1059;
      v1039 = 0x8000;
      v1045 = v1072.u16[6];
      v109 = vdup_n_s32(v1059);
      v1030 = 0x8000;
      v1050 = v108;
      break;
    default:
      return;
  }
  do
  {
    if (!v108 || a3[v107])
    {
      v115 = &v1074->i8[12 * v107];
      v116 = *(double *)v115;
      v117 = *((_DWORD *)v115 + 2);
      v118 = (int *)(*((_QWORD *)this + 22) + 12 * v107);
      v119 = *v118;
      v120 = v118[1];
      v121 = v118[2];
      v122 = (int *)(*((_QWORD *)this + 25) + 12 * v107);
      v123 = v122[2];
      if ((_DWORD)v123 != -1)
      {
        v125 = *v122;
        v124 = v122[1];
        if (!v108 || a3[v119] && a3[v120] && a3[v121] && a3[v125] && a3[v124] && a3[v123])
        {
          v126 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * v106], v109);
          v127 = vabs_s32(vrev64_s32(v126));
          v128 = v105 - v127.i32[1] - v127.i32[0];
          if (v128 >= 0)
          {
            v129 = *((_DWORD *)this + 683);
            v130 = *((_DWORD *)this + 684);
            if (v129 < 0x40000001)
              goto LABEL_179;
LABEL_290:
            v133 = v129;
LABEL_291:
            v216 = (HIWORD(v133) * (unsigned __int16)v1045) & 0xFFFF0000;
            v217 = v133 - v216;
            v218 = v130 >= v216;
            v219 = v130 >= v216;
            v220 = *((unsigned __int16 *)this + ((v1045 >> 7) & 0x1FE | v219) + 1376);
            if (v130 < v216)
              v221 = v216;
            else
              v221 = v217;
            if (v130 < v216)
              v222 = 0;
            else
              v222 = v216;
            v223 = 1;
            if (v218)
              v223 = 2;
            v224 = v130 - v222;
            *((_DWORD *)this + 683) = v221;
            *((_DWORD *)this + 684) = v224;
            if (v221 < 0x40000001)
            {
              v225 = *((_DWORD *)this + 686);
              while (1)
              {
                v224 *= 2;
                *((_DWORD *)this + 686) = --v225;
                if (v225)
                  goto LABEL_303;
                v228 = *((_QWORD *)this + 340);
                *((_QWORD *)this + 340) = v228 + 1;
                v229 = *((unsigned int *)this + 676);
                if (v228 + 1 >= v229)
                {
                  v230 = 65280;
                  v231 = v228 + 2;
                  *((_QWORD *)this + 340) = v231;
                  if (v231 >= v229)
                  {
LABEL_309:
                    v226 = 255;
                    goto LABEL_302;
                  }
                }
                else
                {
                  v230 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v228 + 1) << 8;
                  v231 = v228 + 2;
                  *((_QWORD *)this + 340) = v231;
                  if (v231 >= v229)
                    goto LABEL_309;
                }
                v226 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v231);
LABEL_302:
                v224 |= v230 | v226;
                v225 = 16;
                *((_DWORD *)this + 686) = 16;
LABEL_303:
                v227 = 2 * v221;
                v84 = v221 >= 0x20000001;
                v221 *= 2;
                if (v84)
                  goto LABEL_311;
              }
            }
            v227 = v221;
LABEL_311:
            v1045 += v220;
            v232 = v1072.u16[v223 + 6];
            v233 = (HIWORD(v227) * v232) & 0xFFFF0000;
            v234 = v227 - v233;
            v235 = v224 >= v233;
            v1072.i16[v223 + 6] = *((_WORD *)this + ((v232 >> 7) & 0x1FE | v235) + 1376) + v232;
            if (v224 < v233)
              v236 = v233;
            else
              v236 = v234;
            if (v224 < v233)
              v237 = 0;
            else
              v237 = v233;
            *((_DWORD *)this + 683) = v236;
            *((_DWORD *)this + 684) = v224 - v237;
            v238 = v219 | (2 * v235);
            if (v238 == 2)
            {
              v274 = vsub_s32(*(int32x2_t *)&a2[(int)v125 * (int)v104], v109);
              v275 = vabs_s32(vrev64_s32(v274));
              v276 = v105 - v275.i32[1] - v275.i32[0];
              if (v276 < 0)
                v274 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v274), (int8x8_t)vsub_s32(v275, v109), (int8x8_t)__PAIR64__(v105 - v275.i32[1], v105 - v275.i32[0]));
              v277 = vsub_s32(*(int32x2_t *)&a2[(int)v124 * (int)v104], v109);
              v278 = vabs_s32(vrev64_s32(v277));
              v279 = v105 - v278.i32[1] - v278.i32[0];
              if (v279 < 0)
                v277 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v277), (int8x8_t)vsub_s32(v278, v109), (int8x8_t)__PAIR64__(v105 - v278.i32[1], v105 - v278.i32[0]));
              v269 = vsub_s32(*(int32x2_t *)&a2[(int)v123 * (int)v104], v109);
              v280 = vabs_s32(vrev64_s32(v269));
              v271 = v105 - v280.i32[1] - v280.i32[0];
              if (v271 < 0)
                v269 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v269), (int8x8_t)vsub_s32(v280, v109), (int8x8_t)__PAIR64__(v105 - v280.i32[1], v105 - v280.i32[0]));
              v272 = vadd_s32(v277, v274);
              v273 = v279 + v276;
            }
            else
            {
              if (v238 != 1)
              {
                if (v238)
                {
                  v281 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * v106], v109);
                  v282 = vabs_s32(vrev64_s32(v281));
                  v283 = v105 - v282.i32[1] - v282.i32[0];
                  if (v283 < 0)
                    v281 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v281), (int8x8_t)vsub_s32(v282, v109), (int8x8_t)__PAIR64__(v105 - v282.i32[1], v105 - v282.i32[0]));
                  v284 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * (int)v104], v109);
                  v285 = vabs_s32(vrev64_s32(v284));
                  v286 = v105 - v285.i32[1] - v285.i32[0];
                  if (v286 < 0)
                    v284 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v284), (int8x8_t)vsub_s32(v285, v109), (int8x8_t)__PAIR64__(v105 - v285.i32[1], v105 - v285.i32[0]));
                  v287 = vsub_s32(*(int32x2_t *)&a2[(int)v125 * v106], v109);
                  v288 = vabs_s32(vrev64_s32(v287));
                  v289 = v105 - v288.i32[1] - v288.i32[0];
                  if (v289 < 0)
                    v287 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v287), (int8x8_t)vsub_s32(v288, v109), (int8x8_t)__PAIR64__(v105 - v288.i32[1], v105 - v288.i32[0]));
                  v290 = vsub_s32(*(int32x2_t *)&a2[(int)v124 * (int)v104], v109);
                  v291 = vabs_s32(vrev64_s32(v290));
                  v292 = v105 - v291.i32[1] - v291.i32[0];
                  if (v292 < 0)
                    v290 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v290), (int8x8_t)vsub_s32(v291, v109), (int8x8_t)__PAIR64__(v105 - v291.i32[1], v105 - v291.i32[0]));
                  v293 = vsub_s32(*(int32x2_t *)&a2[(int)v123 * v106], v109);
                  v294 = vabs_s32(vrev64_s32(v293));
                  if ((int)(v105 - v294.i32[1] - v294.i32[0]) < 0)
                    v293 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v293), (int8x8_t)vsub_s32(v294, v109), (int8x8_t)__PAIR64__(v105 - v294.i32[1], v105 - v294.i32[0]));
                  v295 = (uint32x2_t)vadd_s32(v287, v126);
                  v296 = __OFADD__(v289, v128);
                  v297 = v289 + v128;
                  if (v297 < 0 != v296)
                    ++v297;
                  v298 = vadd_s32(v290, v281);
                  v299 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v298, v298), (int32x2_t)vsra_n_u32(v295, v295, 0x1FuLL), 1uLL), vadd_s32(v284, v293)), vdup_n_s32(0x55555556u));
                  v116 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v299, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v299, 0x3FuLL))));
                  v300 = 1431655766
                       * (int)((v297 >> 1) + 2 * (v292 + v283) - (v286 + v105 - v294.i32[1] - v294.i32[0]));
                  v117 = HIDWORD(v300) + (v300 >> 63);
                }
                else
                {
                  v239 = vzip1_s32(v126, *(int32x2_t *)&v116);
                  v240 = vzip2_s32(v126, *(int32x2_t *)&v116);
                  if (v239.i32[0] * (uint64_t)v239.i32[1] + v117 * (uint64_t)v128 + v240.i32[0] * (uint64_t)v240.i32[1] < 0)
                  {
                    v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
                    v117 = -v117;
                  }
                }
                goto LABEL_385;
              }
              v266 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * (int)v104], v109);
              v267 = vabs_s32(vrev64_s32(v266));
              v268 = v105 - v267.i32[1] - v267.i32[0];
              if (v268 < 0)
                v266 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v266), (int8x8_t)vsub_s32(v267, v109), (int8x8_t)__PAIR64__(v105 - v267.i32[1], v105 - v267.i32[0]));
              v269 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * v106], v109);
              v270 = vabs_s32(vrev64_s32(v269));
              v271 = v105 - v270.i32[1] - v270.i32[0];
              if (v271 < 0)
                v269 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v269), (int8x8_t)vsub_s32(v270, v109), (int8x8_t)__PAIR64__(v105 - v270.i32[1], v105 - v270.i32[0]));
              v272 = vadd_s32(v266, v126);
              v273 = v268 + v128;
            }
            v116 = COERCE_DOUBLE(vsub_s32(v272, v269));
            v117 = v273 - v271;
LABEL_385:
            v247 = 2;
            goto LABEL_394;
          }
          v215.i32[0] = v105 - v127.i32[0];
          v215.i32[1] = v105 - v127.i32[1];
          v126 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v126), (int8x8_t)vsub_s32(v127, v109), v215);
          v129 = *((_DWORD *)this + 683);
          v130 = *((_DWORD *)this + 684);
          if (v129 >= 0x40000001)
            goto LABEL_290;
LABEL_179:
          v131 = *((_DWORD *)this + 686);
          while (1)
          {
            v130 *= 2;
            *((_DWORD *)this + 686) = --v131;
            if (v131)
              goto LABEL_182;
            v134 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v134 + 1;
            v135 = *((unsigned int *)this + 676);
            if (v134 + 1 >= v135)
            {
              v136 = 65280;
              v137 = v134 + 2;
              *((_QWORD *)this + 340) = v137;
              if (v137 >= v135)
              {
LABEL_188:
                v132 = 255;
                goto LABEL_181;
              }
            }
            else
            {
              v136 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v134 + 1) << 8;
              v137 = v134 + 2;
              *((_QWORD *)this + 340) = v137;
              if (v137 >= v135)
                goto LABEL_188;
            }
            v132 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v137);
LABEL_181:
            v130 |= v136 | v132;
            v131 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_182:
            v133 = 2 * v129;
            v84 = v129 >= 0x20000001;
            v129 *= 2;
            if (v84)
              goto LABEL_291;
          }
        }
      }
      if ((_DWORD)v121 != -1 && (!v108 || a3[v119] && a3[v120] && a3[v121]))
      {
        v138 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * (int)v104], v109);
        v139 = vabs_s32(vrev64_s32(v138));
        v140 = v105 - v139.i32[1] - v139.i32[0];
        if (v140 < 0)
          v138 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v138), (int8x8_t)vsub_s32(v139, v109), (int8x8_t)__PAIR64__(v105 - v139.i32[1], v105 - v139.i32[0]));
        v141 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * v106], v109);
        v142 = vabs_s32(vrev64_s32(v141));
        v143 = v105 - v142.i32[1] - v142.i32[0];
        if (v143 < 0)
          v141 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v141), (int8x8_t)vsub_s32(v142, v109), (int8x8_t)__PAIR64__(v105 - v142.i32[1], v105 - v142.i32[0]));
        v144 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * (int)v104], v109);
        v145 = vabs_s32(vrev64_s32(v144));
        v146 = v105 - v145.i32[1] - v145.i32[0];
        if (v146 < 0)
          v144 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v144), (int8x8_t)vsub_s32(v145, v109), (int8x8_t)__PAIR64__(v105 - v145.i32[1], v105 - v145.i32[0]));
        v147 = *((_DWORD *)this + 683);
        v148 = *((_DWORD *)this + 684);
        if (v147 < 0x40000001)
        {
          v149 = *((_DWORD *)this + 686);
          while (1)
          {
            v148 *= 2;
            *((_DWORD *)this + 686) = --v149;
            if (v149)
              goto LABEL_204;
            v152 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v152 + 1;
            v153 = *((unsigned int *)this + 676);
            if (v152 + 1 >= v153)
            {
              v154 = 65280;
              v155 = v152 + 2;
              *((_QWORD *)this + 340) = v155;
              if (v155 >= v153)
              {
LABEL_210:
                v150 = 255;
                goto LABEL_203;
              }
            }
            else
            {
              v154 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v152 + 1) << 8;
              v155 = v152 + 2;
              *((_QWORD *)this + 340) = v155;
              if (v155 >= v153)
                goto LABEL_210;
            }
            v150 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v155);
LABEL_203:
            v148 |= v154 | v150;
            v149 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_204:
            v151 = 2 * v147;
            v84 = v147 >= 0x20000001;
            v147 *= 2;
            if (v84)
              goto LABEL_258;
          }
        }
        v151 = *((_DWORD *)this + 683);
LABEL_258:
        v189 = (HIWORD(v151) * (unsigned __int16)v1036) & 0xFFFF0000;
        v190 = v151 - v189;
        v191 = v148 >= v189;
        v192 = v148 >= v189;
        v193 = *((unsigned __int16 *)this + ((v1036 >> 7) & 0x1FE | v192) + 1376);
        if (v148 < v189)
          v194 = v189;
        else
          v194 = v190;
        if (v148 < v189)
          v195 = 0;
        else
          v195 = v189;
        v196 = 1;
        if (v191)
          v196 = 2;
        v197 = v148 - v195;
        *((_DWORD *)this + 683) = v194;
        *((_DWORD *)this + 684) = v197;
        v198 = (unsigned __int16)v1073[v196];
        if (v194 < 0x40000001)
        {
          v199 = *((_DWORD *)this + 686);
          while (1)
          {
            v197 *= 2;
            *((_DWORD *)this + 686) = --v199;
            if (v199)
              goto LABEL_270;
            v202 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v202 + 1;
            v203 = *((unsigned int *)this + 676);
            if (v202 + 1 >= v203)
            {
              v204 = 65280;
              v205 = v202 + 2;
              *((_QWORD *)this + 340) = v205;
              if (v205 >= v203)
              {
LABEL_276:
                v200 = 255;
                goto LABEL_269;
              }
            }
            else
            {
              v204 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v202 + 1) << 8;
              v205 = v202 + 2;
              *((_QWORD *)this + 340) = v205;
              if (v205 >= v203)
                goto LABEL_276;
            }
            v200 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v205);
LABEL_269:
            v197 |= v204 | v200;
            v199 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_270:
            v201 = 2 * v194;
            v84 = v194 >= 0x20000001;
            v194 *= 2;
            if (v84)
              goto LABEL_278;
          }
        }
        v201 = v194;
LABEL_278:
        v206 = v193 + v1036;
        v207 = (HIWORD(v201) * v198) & 0xFFFF0000;
        v208 = v201 - v207;
        v209 = v197 >= v207;
        v1073[v196] = *((_WORD *)this + ((v198 >> 7) & 0x1FE | v209) + 1376) + v198;
        if (v197 < v207)
          v210 = v207;
        else
          v210 = v208;
        if (v197 < v207)
          v211 = 0;
        else
          v211 = v207;
        *((_DWORD *)this + 683) = v210;
        *((_DWORD *)this + 684) = v197 - v211;
        v212 = v192 | (2 * v209);
        v1036 = v206;
        if (v212 == 2)
        {
          v301 = (uint32x2_t)vsub_s32(v141, (int32x2_t)vmvn_s8((int8x8_t)v138));
          v302 = v140 + v143;
          v116 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v301, v301, 0x1FuLL), 1uLL));
          if (v140 + v143 + 1 >= 0)
            v303 = v302 + 1;
          else
            v303 = v302 + 2;
          v117 = v303 >> 1;
        }
        else if (v212 == 1)
        {
          v116 = COERCE_DOUBLE(vsub_s32(vadd_s32(v141, v138), v144));
          v117 = v143 + v140 - v146;
        }
        else if (v212)
        {
          v304 = vmull_s32(vadd_s32(vsub_s32(v141, (int32x2_t)vmvn_s8((int8x8_t)v138)), v144), vdup_n_s32(0x55555556u));
          v116 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v304, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v304, 0x3FuLL))));
          v117 = (v140 + v143 + v146 + 1) / 3;
        }
        else
        {
          v213 = vzip1_s32(v138, *(int32x2_t *)&v116);
          v214 = vzip2_s32(v138, *(int32x2_t *)&v116);
          if (v213.i32[0] * (uint64_t)v213.i32[1] + v117 * (uint64_t)v140 + v214.i32[0] * (uint64_t)v214.i32[1] < 0)
          {
            v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
            v117 = -v117;
          }
        }
        v247 = 1;
LABEL_394:
        v305 = LODWORD(v116);
        v1071 = LODWORD(v116);
        v306 = HIDWORD(v116);
        v1070.i32[3] = HIDWORD(v116);
        v307 = vabs_s32(*(int32x2_t *)&v116);
        v308 = v307.u32[1];
        if (v117 >= 0)
          v309 = v117;
        else
          v309 = -v117;
        v310 = v307.i32[0];
        v312 = v307.i32[0] < (unsigned __int32)v307.i32[1] || v307.i32[0] < v309;
        if (v312)
        {
          v310 = v309;
          v313 = v306;
          v314 = v305;
          if (v307.i32[1] < v309)
            goto LABEL_408;
          v315 = &v1070.i32[3];
          v310 = v307.i32[1];
          v313 = v117;
          v314 = v305;
        }
        else
        {
          v315 = &v1071;
          v313 = v306;
          v314 = v117;
        }
        *v315 = v117;
LABEL_408:
        v1072.i64[0] = __PAIR64__(v313, v314);
        v1072.i32[2] = v310;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, &v1072, v1066, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v247 - 2], &v1070);
        v111 = v1070.i32[0];
        v316 = v1070.i32[1];
        if (v1070.i32[0] >= 0)
          v317 = v1070.i32[0];
        else
          v317 = -v1070.i32[0];
        if (v1070.i32[1] >= 0)
          v318 = v1070.i32[1];
        else
          v318 = -v1070.i32[1];
        v105 = v1059;
        v319 = v1059 - v317;
        v320 = v1059 - v317 - v318;
        if (v320 < 0)
        {
          v321 = v1059 - v318;
          v322 = v318 - v1059;
          if (v1070.i32[0] >= 0)
            v111 = v321;
          else
            v111 = v322;
          v323 = v317 - v1059;
          if (v1070.i32[1] >= 0)
            v316 = v319;
          else
            v316 = v323;
          v106 = v1069[0];
          if (v312)
          {
LABEL_424:
            if (v308 >= v309)
            {
              v325 = v316;
              if (v306 >= 0)
                v316 = v320;
              else
                v316 = -v320;
              a2 = v1065;
              v104 = v1066;
              v108 = v1050;
              if (v325 < 0)
                goto LABEL_434;
            }
            else
            {
              if (v117 >= 0)
                v324 = v320;
              else
                v324 = -v320;
              a2 = v1065;
              v104 = v1066;
              v108 = v1050;
              if (v324 < 0)
              {
LABEL_434:
                if (v316 >= 0)
                  v112 = v316;
                else
                  v112 = -v316;
                if (v111 < 0)
                  v111 = -v111;
                else
                  v112 = v1034 - v112;
                if (v316 >= 0)
                  v113 = v1034 - v111;
                else
                  v113 = v111;
                goto LABEL_165;
              }
            }
LABEL_164:
            v112 = v111 + v1059;
            v113 = v316 + v1059;
LABEL_165:
            v114 = &a2[v107 * v104];
            *v114 = v112;
            v114[1] = v113;
            v103 = *((_DWORD *)this + 959);
            goto LABEL_166;
          }
        }
        else
        {
          v106 = v1069[0];
          if (v312)
            goto LABEL_424;
        }
        v110 = v111;
        if (v305 >= 0)
          v111 = v320;
        else
          v111 = -v320;
        a2 = v1065;
        v104 = v1066;
        v108 = v1050;
        if (v110 < 0)
          goto LABEL_434;
        goto LABEL_164;
      }
      if ((_DWORD)v120 != -1 && (!v108 || a3[v119] && a3[v120]))
      {
        v156 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * v106], v109);
        v157 = vabs_s32(vrev64_s32(v156));
        v158 = v105 - v157.i32[1] - v157.i32[0];
        if (v158 < 0)
          v156 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v156), (int8x8_t)vsub_s32(v157, v109), (int8x8_t)__PAIR64__(v105 - v157.i32[1], v105 - v157.i32[0]));
        v159 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * (int)v104], v109);
        v160 = vabs_s32(vrev64_s32(v159));
        if ((int)(v105 - v160.i32[1] - v160.i32[0]) < 0)
          v159 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v159), (int8x8_t)vsub_s32(v160, v109), (int8x8_t)__PAIR64__(v105 - v160.i32[1], v105 - v160.i32[0]));
        v161 = *((_DWORD *)this + 683);
        v162 = *((_DWORD *)this + 684);
        if (v161 < 0x40000001)
        {
          v163 = *((_DWORD *)this + 686);
          while (1)
          {
            v162 *= 2;
            *((_DWORD *)this + 686) = --v163;
            if (v163)
              goto LABEL_223;
            v166 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v166 + 1;
            v167 = *((unsigned int *)this + 676);
            if (v166 + 1 >= v167)
            {
              v168 = 65280;
              v169 = v166 + 2;
              *((_QWORD *)this + 340) = v169;
              if (v169 >= v167)
              {
LABEL_229:
                v164 = 255;
                goto LABEL_222;
              }
            }
            else
            {
              v168 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v166 + 1) << 8;
              v169 = v166 + 2;
              *((_QWORD *)this + 340) = v169;
              if (v169 >= v167)
                goto LABEL_229;
            }
            v164 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v169);
LABEL_222:
            v162 |= v168 | v164;
            v163 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_223:
            v165 = 2 * v161;
            v84 = v161 >= 0x20000001;
            v161 *= 2;
            if (v84)
              goto LABEL_323;
          }
        }
        v165 = *((_DWORD *)this + 683);
LABEL_323:
        v241 = (HIWORD(v165) * (unsigned __int16)v1039) & 0xFFFF0000;
        v242 = v165 - v241;
        if (v162 < v241)
          v243 = 0;
        else
          v243 = (HIWORD(v165) * (unsigned __int16)v1039) & 0xFFFF0000;
        *((_DWORD *)this + 684) = v162 - v243;
        v244 = v162 >= v241;
        v245 = *((unsigned __int16 *)this + ((v1039 >> 7) & 0x1FE | (v162 >= v241)) + 1376) + v1039;
        if (v162 < v241)
          v246 = v241;
        else
          v246 = v242;
        *((_DWORD *)this + 683) = v246;
        v1039 = v245;
        if (v244)
        {
          v247 = 0;
          v248 = (uint32x2_t)vsub_s32(v159, (int32x2_t)vmvn_s8((int8x8_t)v156));
          v249 = v158 + v105 - v160.i32[1] - v160.i32[0];
          v116 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v248, v248, 0x1FuLL), 1uLL));
          if (v249 + 1 >= 0)
            v250 = v249 + 1;
          else
            v250 = v249 + 2;
          v117 = v250 >> 1;
          goto LABEL_394;
        }
LABEL_357:
        v264 = vzip1_s32(v156, *(int32x2_t *)&v116);
        v265 = vzip2_s32(v156, *(int32x2_t *)&v116);
        v247 = 0;
        if (v264.i32[0] * (uint64_t)v264.i32[1] + v117 * (uint64_t)v158 + v265.i32[0] * (uint64_t)v265.i32[1] < 0)
        {
          v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
          v117 = -v117;
        }
        goto LABEL_394;
      }
      if ((_DWORD)v119 != -1 && (!v108 || a3[v119]))
      {
        v156 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * (int)v104], v109);
        v170 = vabs_s32(vrev64_s32(v156));
        v158 = v105 - v170.i32[1] - v170.i32[0];
        if (v158 < 0)
          v156 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v156), (int8x8_t)vsub_s32(v170, v109), (int8x8_t)__PAIR64__(v105 - v170.i32[1], v105 - v170.i32[0]));
        v171 = *((_DWORD *)this + 683);
        v172 = *((_DWORD *)this + 684);
        if (v171 >= 0x40000001)
        {
          v175 = *((_DWORD *)this + 683);
LABEL_348:
          v258 = (HIWORD(v175) * (unsigned __int16)v1039) & 0xFFFF0000;
          v259 = v175 - v258;
          if (v172 < v258)
            v260 = 0;
          else
            v260 = (HIWORD(v175) * (unsigned __int16)v1039) & 0xFFFF0000;
          *((_DWORD *)this + 684) = v172 - v260;
          v261 = v172 >= v258;
          v262 = *((unsigned __int16 *)this + ((v1039 >> 7) & 0x1FE | (v172 >= v258)) + 1376) + v1039;
          if (v172 < v258)
            v263 = v258;
          else
            v263 = v259;
          *((_DWORD *)this + 683) = v263;
          v1039 = v262;
          if (v261)
          {
            v247 = 0;
            v117 = v105 - v170.i32[1] - v170.i32[0];
            v116 = *(double *)&v156;
            goto LABEL_394;
          }
          goto LABEL_357;
        }
        v173 = *((_DWORD *)this + 686);
        while (1)
        {
          v172 *= 2;
          *((_DWORD *)this + 686) = --v173;
          if (v173)
            goto LABEL_239;
          v176 = *((_QWORD *)this + 340);
          *((_QWORD *)this + 340) = v176 + 1;
          v177 = *((unsigned int *)this + 676);
          if (v176 + 1 >= v177)
          {
            v178 = 65280;
            v179 = v176 + 2;
            *((_QWORD *)this + 340) = v179;
            if (v179 >= v177)
            {
LABEL_245:
              v174 = 255;
              goto LABEL_238;
            }
          }
          else
          {
            v178 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v176 + 1) << 8;
            v179 = v176 + 2;
            *((_QWORD *)this + 340) = v179;
            if (v179 >= v177)
              goto LABEL_245;
          }
          v174 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v179);
LABEL_238:
          v172 |= v178 | v174;
          v173 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_239:
          v175 = 2 * v171;
          v84 = v171 >= 0x20000001;
          v171 *= 2;
          if (v84)
            goto LABEL_348;
        }
      }
      v180 = *((_DWORD *)this + 683);
      v181 = *((_DWORD *)this + 684);
      if (v180 >= 0x40000001)
      {
        v184 = *((_DWORD *)this + 683);
LABEL_336:
        v251 = (HIWORD(v184) * (unsigned __int16)v1030) & 0xFFFF0000;
        v252 = v184 - v251;
        if (v181 < v251)
          v253 = 0;
        else
          v253 = (HIWORD(v184) * (unsigned __int16)v1030) & 0xFFFF0000;
        v254 = v181 - v253;
        v255 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
        v256 = v181 >= v251;
        v1030 += *((unsigned __int16 *)this + ((v1030 >> 7) & 0x1FE | (v181 >= v251)) + 1376);
        if (v181 < v251)
          v257 = v251;
        else
          v257 = v252;
        *((_DWORD *)this + 683) = v257;
        *((_DWORD *)this + 684) = v254;
        if (v256)
          v117 = -v117;
        v247 = 0;
        if (v256)
          v116 = v255;
        goto LABEL_394;
      }
      v182 = *((_DWORD *)this + 686);
      while (1)
      {
        v181 *= 2;
        *((_DWORD *)this + 686) = --v182;
        if (v182)
          goto LABEL_250;
        v185 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v185 + 1;
        v186 = *((unsigned int *)this + 676);
        if (v185 + 1 >= v186)
        {
          v187 = 65280;
          v188 = v185 + 2;
          *((_QWORD *)this + 340) = v188;
          if (v188 >= v186)
          {
LABEL_256:
            v183 = 255;
            goto LABEL_249;
          }
        }
        else
        {
          v187 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v185 + 1) << 8;
          v188 = v185 + 2;
          *((_QWORD *)this + 340) = v188;
          if (v188 >= v186)
            goto LABEL_256;
        }
        v183 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v188);
LABEL_249:
        v181 |= v187 | v183;
        v182 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_250:
        v184 = 2 * v180;
        v84 = v180 >= 0x20000001;
        v180 *= 2;
        if (v84)
          goto LABEL_336;
      }
    }
LABEL_166:
    ++v107;
  }
  while (v107 < v103);
LABEL_443:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*((_QWORD *)&v1096 + 1))
  {
    *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
    operator delete(*((void **)&v1096 + 1));
  }
  if ((_QWORD)v1095)
  {
    *((_QWORD *)&v1095 + 1) = v1095;
    operator delete((void *)v1095);
  }
  if (*((_QWORD *)&v1093 + 1))
  {
    *(_QWORD *)&v1094 = *((_QWORD *)&v1093 + 1);
    operator delete(*((void **)&v1093 + 1));
  }
  if ((_QWORD)v1092)
  {
    *((_QWORD *)&v1092 + 1) = v1092;
    operator delete((void *)v1092);
  }
  if (*((_QWORD *)&v1090 + 1))
  {
    *(_QWORD *)&v1091 = *((_QWORD *)&v1090 + 1);
    operator delete(*((void **)&v1090 + 1));
  }
  if ((_QWORD)v1089)
  {
    *((_QWORD *)&v1089 + 1) = v1089;
    operator delete((void *)v1089);
  }
  if (*((_QWORD *)&v1087 + 1))
  {
    *(_QWORD *)&v1088 = *((_QWORD *)&v1087 + 1);
    operator delete(*((void **)&v1087 + 1));
  }
  if ((_QWORD)v1086)
  {
    *((_QWORD *)&v1086 + 1) = v1086;
    operator delete((void *)v1086);
  }
  if (*((_QWORD *)&v1084 + 1))
  {
    *(_QWORD *)&v1085 = *((_QWORD *)&v1084 + 1);
    operator delete(*((void **)&v1084 + 1));
  }
LABEL_463:
  if ((_QWORD)v1083)
  {
    *((_QWORD *)&v1083 + 1) = v1083;
    operator delete((void *)v1083);
  }
  if (*((_QWORD *)&v1081 + 1))
  {
    *(_QWORD *)&v1082 = *((_QWORD *)&v1081 + 1);
    operator delete(*((void **)&v1081 + 1));
  }
  if (v1080[0])
  {
    v1080[1] = v1080[0];
    operator delete(v1080[0]);
  }
  if (v1078[1])
  {
    *(void **)&v1079 = v1078[1];
    operator delete(v1078[1]);
  }
  if ((_QWORD)__b)
  {
    *((_QWORD *)&__b + 1) = __b;
    operator delete((void *)__b);
  }
  v326 = v1074;
  if (v1074)
  {
    v1075 = v1074;
LABEL_1178:
    operator delete(v326);
  }
}

void sub_19F17BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (__p)
    operator delete(__p);
  gcl::tmesh::ACContext::~ACContext((gcl::tmesh::ACContext *)&a69);
  gcl::tmesh::ACContext::~ACContext((gcl::tmesh::ACContext *)&a54);
  gcl::tmesh::ACContext::~ACContext((gcl::tmesh::ACContext *)&a39);
  _Unwind_Resume(a1);
}

void gcl::tmesh::DecoderImpl::decodeResidual(uint64_t a1, int32x4_t *a2, uint64_t a3, unsigned int a4, uint64_t *a5, int32x4_t *a6)
{
  uint64_t v8;
  int32x4_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _WORD *v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  _BOOL4 v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _BOOL4 v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _BOOL4 v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  __int32 v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  BOOL v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  _WORD *v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  unint64_t v217;
  int v218;
  unint64_t v219;
  int v220;
  unsigned int v221;
  _BOOL4 v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  unint64_t v234;
  unsigned int v235;
  _BOOL4 v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int v242;
  int v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  unint64_t v247;
  int v248;
  unint64_t v249;
  unsigned int v250;
  _BOOL4 v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  int v259;
  unsigned int v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  unint64_t v264;
  unsigned int v265;
  _BOOL4 v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  unint64_t v279;
  unsigned int v280;
  unsigned int v281;
  _BOOL4 v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  uint64_t v290;
  int32x4_t *v291;
  int32x4_t *v292;
  int32x4_t *v293;
  int32x4_t *v294;
  int32x4_t *v295;
  uint64_t v296;
  int32x4_t v297;
  uint64_t v298;
  uint64_t v299;
  __int32 *v300;
  __int32 *v301;
  __int32 *v302;
  int v303;
  int v304;
  int v305;
  int32x4_t *v308;

  v8 = a3;
  if (!(_DWORD)a3)
  {
    v10 = 0;
    goto LABEL_6;
  }
  if ((a3 & 0x80000000) != 0)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = (int32x4_t *)operator new(4 * (int)a3);
  bzero(v10, 4 * (int)v8);
  if (a4 <= 4)
  {
LABEL_6:
    v308 = v10;
    switch(a4)
    {
      case 0u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v11 = 0;
        while (1)
        {
          v13 = *a5;
          v14 = *(unsigned __int16 *)(*a5 + 2 * v11);
          v15 = *(_DWORD *)(a1 + 2732);
          v16 = *(_DWORD *)(a1 + 2736);
          if (v15 < 0x40000001)
          {
            v17 = *(_DWORD *)(a1 + 2744);
            while (1)
            {
              v16 *= 2;
              *(_DWORD *)(a1 + 2744) = --v17;
              if (v17)
                goto LABEL_17;
              v20 = *(_QWORD *)(a1 + 2720);
              *(_QWORD *)(a1 + 2720) = v20 + 1;
              v21 = *(unsigned int *)(a1 + 2704);
              if (v20 + 1 >= v21)
              {
                v22 = 65280;
                v23 = v20 + 2;
                *(_QWORD *)(a1 + 2720) = v23;
                if (v23 >= v21)
                {
LABEL_23:
                  v18 = 255;
                  goto LABEL_16;
                }
              }
              else
              {
                v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v20 + 1) << 8;
                v23 = v20 + 2;
                *(_QWORD *)(a1 + 2720) = v23;
                if (v23 >= v21)
                  goto LABEL_23;
              }
              v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v23);
LABEL_16:
              v16 |= v22 | v18;
              v17 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_17:
              v19 = 2 * v15;
              v27 = v15 >= 0x20000001;
              v15 *= 2;
              if (v27)
                goto LABEL_25;
            }
          }
          v19 = *(_DWORD *)(a1 + 2732);
LABEL_25:
          v12 = 0;
          v24 = (HIWORD(v19) * v14) & 0xFFFF0000;
          v25 = v16 < v24 ? 0 : (HIWORD(v19) * v14) & 0xFFFF0000;
          v26 = v16 - v25;
          v27 = v16 >= v24;
          v28 = (v14 >> 7) & 0x1FE | (v16 >= v24);
          v29 = v19 - v24;
          *(_WORD *)(v13 + 2 * v11) = *(_WORD *)(a1 + 2 * v28 + 2752) + v14;
          v30 = v27 ? v19 - v24 : (HIWORD(v19) * v14) & 0xFFFF0000;
          *(_DWORD *)(a1 + 2732) = v30;
          *(_DWORD *)(a1 + 2736) = v26;
          if (v27)
            break;
LABEL_12:
          v10->i32[v11++] = v12;
          if (v11 == v8)
            goto LABEL_349;
        }
        v31 = a5[3];
        v32 = *(unsigned __int16 *)(v31 + 2 * v11);
        if (v29 < 0x40000001)
        {
          v33 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v26 *= 2;
            *(_DWORD *)(a1 + 2744) = --v33;
            if (v33)
              goto LABEL_37;
            v36 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v36 + 1;
            v37 = *(unsigned int *)(a1 + 2704);
            if (v36 + 1 >= v37)
            {
              v38 = 65280;
              v39 = v36 + 2;
              *(_QWORD *)(a1 + 2720) = v39;
              if (v39 >= v37)
              {
LABEL_43:
                v34 = 255;
                goto LABEL_36;
              }
            }
            else
            {
              v38 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v36 + 1) << 8;
              v39 = v36 + 2;
              *(_QWORD *)(a1 + 2720) = v39;
              if (v39 >= v37)
                goto LABEL_43;
            }
            v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v39);
LABEL_36:
            v26 |= v38 | v34;
            v33 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_37:
            v35 = 2 * v29;
            v27 = v29 >= 0x20000001;
            v29 *= 2;
            if (v27)
              goto LABEL_45;
          }
        }
        v35 = v19 - v24;
LABEL_45:
        v40 = (HIWORD(v35) * v32) & 0xFFFF0000;
        *(_WORD *)(v31 + 2 * v11) = *(_WORD *)(a1 + 2 * ((v32 >> 7) & 0x1FE | (v26 >= v40)) + 2752) + v32;
        if (v26 < v40)
          v41 = (HIWORD(v35) * v32) & 0xFFFF0000;
        else
          v41 = v35 - v40;
        if (v26 < v40)
          v42 = 0;
        else
          v42 = v40;
        v43 = v26 - v42;
        *(_DWORD *)(a1 + 2732) = v41;
        *(_DWORD *)(a1 + 2736) = v26 - v42;
        v44 = (_WORD *)(a5[6] + 2 * (int)((_DWORD)v11 << 6));
        v45 = (unsigned __int16)*v44;
        if (v41 < 0x40000001)
        {
          v46 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v43 *= 2;
            *(_DWORD *)(a1 + 2744) = --v46;
            if (v46)
              goto LABEL_55;
            v49 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v49 + 1;
            v50 = *(unsigned int *)(a1 + 2704);
            if (v49 + 1 >= v50)
            {
              v51 = 65280;
              v52 = v49 + 2;
              *(_QWORD *)(a1 + 2720) = v52;
              if (v52 >= v50)
              {
LABEL_61:
                v47 = 255;
                goto LABEL_54;
              }
            }
            else
            {
              v51 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v49 + 1) << 8;
              v52 = v49 + 2;
              *(_QWORD *)(a1 + 2720) = v52;
              if (v52 >= v50)
                goto LABEL_61;
            }
            v47 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v52);
LABEL_54:
            v43 |= v51 | v47;
            v46 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_55:
            v48 = 2 * v41;
            v27 = v41 >= 0x20000001;
            v41 *= 2;
            if (v27)
              goto LABEL_63;
          }
        }
        v48 = v41;
LABEL_63:
        v53 = (HIWORD(v48) * v45) & 0xFFFF0000;
        v54 = v48 - v53;
        v55 = v43 >= v53;
        *v44 = *(_WORD *)(a1 + 2 * ((v45 >> 7) & 0x1FE | v55) + 2752) + v45;
        if (v43 >= v53)
        {
          v56 = 2;
        }
        else
        {
          v54 = v53;
          v53 = 0;
          v56 = 1;
        }
        v57 = v43 - v53;
        *(_DWORD *)(a1 + 2732) = v54;
        *(_DWORD *)(a1 + 2736) = v57;
        v58 = (unsigned __int16)v44[v56];
        if (v54 < 0x40000001)
        {
          v59 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v57 *= 2;
            *(_DWORD *)(a1 + 2744) = --v59;
            if (v59)
              goto LABEL_70;
            v62 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v62 + 1;
            v63 = *(unsigned int *)(a1 + 2704);
            if (v62 + 1 >= v63)
            {
              v64 = 65280;
              v65 = v62 + 2;
              *(_QWORD *)(a1 + 2720) = v65;
              if (v65 >= v63)
              {
LABEL_76:
                v60 = 255;
                goto LABEL_69;
              }
            }
            else
            {
              v64 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v62 + 1) << 8;
              v65 = v62 + 2;
              *(_QWORD *)(a1 + 2720) = v65;
              if (v65 >= v63)
                goto LABEL_76;
            }
            v60 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v65);
LABEL_69:
            v57 |= v64 | v60;
            v59 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_70:
            v61 = 2 * v54;
            v27 = v54 >= 0x20000001;
            v54 *= 2;
            if (v27)
              goto LABEL_78;
          }
        }
        v61 = v54;
LABEL_78:
        v66 = (HIWORD(v61) * v58) & 0xFFFF0000;
        v67 = v61 - v66;
        v68 = v57 >= v66;
        v44[v56] = *(_WORD *)(a1 + 2 * ((v58 >> 7) & 0x1FE | v68) + 2752) + v58;
        if (v57 < v66)
          v69 = v66;
        else
          v69 = v67;
        if (v57 < v66)
          v70 = 0;
        else
          v70 = v66;
        v71 = v57 - v70;
        *(_DWORD *)(a1 + 2732) = v69;
        *(_DWORD *)(a1 + 2736) = v71;
        v72 = v55 | (2 * v68);
        v73 = (v72 + 3);
        v74 = (unsigned __int16)v44[v73];
        if (v69 < 0x40000001)
        {
          v75 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v71 *= 2;
            *(_DWORD *)(a1 + 2744) = --v75;
            if (v75)
              goto LABEL_88;
            v78 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v78 + 1;
            v79 = *(unsigned int *)(a1 + 2704);
            if (v78 + 1 >= v79)
            {
              v80 = 65280;
              v81 = v78 + 2;
              *(_QWORD *)(a1 + 2720) = v81;
              if (v81 >= v79)
              {
LABEL_94:
                v76 = 255;
                goto LABEL_87;
              }
            }
            else
            {
              v80 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v78 + 1) << 8;
              v81 = v78 + 2;
              *(_QWORD *)(a1 + 2720) = v81;
              if (v81 >= v79)
                goto LABEL_94;
            }
            v76 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v81);
LABEL_87:
            v71 |= v80 | v76;
            v75 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_88:
            v77 = 2 * v69;
            v27 = v69 >= 0x20000001;
            v69 *= 2;
            if (v27)
              goto LABEL_96;
          }
        }
        v77 = v69;
LABEL_96:
        v82 = (HIWORD(v77) * v74) & 0xFFFF0000;
        v83 = v77 - v82;
        v84 = v71 >= v82;
        v44[v73] = *(_WORD *)(a1 + 2 * ((v74 >> 7) & 0x1FE | v84) + 2752) + v74;
        if (v71 < v82)
          v85 = v82;
        else
          v85 = v83;
        if (v71 < v82)
          v86 = 0;
        else
          v86 = v82;
        v87 = v71 - v86;
        *(_DWORD *)(a1 + 2732) = v85;
        *(_DWORD *)(a1 + 2736) = v87;
        v88 = v72 | (4 * v84);
        v89 = (v88 + 7);
        v90 = (unsigned __int16)v44[v89];
        if (v85 < 0x40000001)
        {
          v91 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v87 *= 2;
            *(_DWORD *)(a1 + 2744) = --v91;
            if (v91)
              goto LABEL_106;
            v94 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v94 + 1;
            v95 = *(unsigned int *)(a1 + 2704);
            if (v94 + 1 >= v95)
            {
              v96 = 65280;
              v97 = v94 + 2;
              *(_QWORD *)(a1 + 2720) = v97;
              if (v97 >= v95)
              {
LABEL_112:
                v92 = 255;
                goto LABEL_105;
              }
            }
            else
            {
              v96 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v94 + 1) << 8;
              v97 = v94 + 2;
              *(_QWORD *)(a1 + 2720) = v97;
              if (v97 >= v95)
                goto LABEL_112;
            }
            v92 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v97);
LABEL_105:
            v87 |= v96 | v92;
            v91 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_106:
            v93 = 2 * v85;
            v27 = v85 >= 0x20000001;
            v85 *= 2;
            if (v27)
              goto LABEL_114;
          }
        }
        v93 = v85;
LABEL_114:
        v98 = (HIWORD(v93) * v90) & 0xFFFF0000;
        v99 = v93 - v98;
        v100 = v87 >= v98;
        v44[v89] = *(_WORD *)(a1 + 2 * ((v90 >> 7) & 0x1FE | v100) + 2752) + v90;
        if (v87 < v98)
          v101 = v98;
        else
          v101 = v99;
        if (v87 < v98)
          v102 = 0;
        else
          v102 = v98;
        v103 = v87 - v102;
        *(_DWORD *)(a1 + 2732) = v101;
        *(_DWORD *)(a1 + 2736) = v103;
        v104 = v88 | (8 * v100);
        v105 = (v104 + 15);
        v106 = (unsigned __int16)v44[v105];
        if (v101 < 0x40000001)
        {
          v107 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v103 *= 2;
            *(_DWORD *)(a1 + 2744) = --v107;
            if (v107)
              goto LABEL_124;
            v110 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v110 + 1;
            v111 = *(unsigned int *)(a1 + 2704);
            if (v110 + 1 >= v111)
            {
              v112 = 65280;
              v113 = v110 + 2;
              *(_QWORD *)(a1 + 2720) = v113;
              if (v113 >= v111)
              {
LABEL_130:
                v108 = 255;
                goto LABEL_123;
              }
            }
            else
            {
              v112 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v110 + 1) << 8;
              v113 = v110 + 2;
              *(_QWORD *)(a1 + 2720) = v113;
              if (v113 >= v111)
                goto LABEL_130;
            }
            v108 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v113);
LABEL_123:
            v103 |= v112 | v108;
            v107 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_124:
            v109 = 2 * v101;
            v27 = v101 >= 0x20000001;
            v101 *= 2;
            if (v27)
              goto LABEL_132;
          }
        }
        v109 = v101;
LABEL_132:
        v114 = (HIWORD(v109) * v106) & 0xFFFF0000;
        v115 = v109 - v114;
        v116 = v103 >= v114;
        v44[v105] = *(_WORD *)(a1 + 2 * ((v106 >> 7) & 0x1FE | v116) + 2752) + v106;
        if (v103 < v114)
          v117 = v114;
        else
          v117 = v115;
        if (v103 < v114)
          v118 = 0;
        else
          v118 = v114;
        v119 = v103 - v118;
        *(_DWORD *)(a1 + 2732) = v117;
        *(_DWORD *)(a1 + 2736) = v119;
        v120 = v104 | (16 * v116);
        v121 = (v120 + 31);
        v122 = (unsigned __int16)v44[v121];
        if (v117 >= 0x40000001)
        {
          v125 = v117;
LABEL_150:
          v130 = (HIWORD(v125) * v122) & 0xFFFF0000;
          v131 = v125 - v130;
          v132 = v119 >= v130;
          v44[v121] = *(_WORD *)(a1 + 2 * ((v122 >> 7) & 0x1FE | v132) + 2752) + v122;
          if (v119 < v130)
            v133 = v130;
          else
            v133 = v131;
          if (v119 < v130)
            v134 = 0;
          else
            v134 = v130;
          *(_DWORD *)(a1 + 2732) = v133;
          *(_DWORD *)(a1 + 2736) = v119 - v134;
          v135 = v120 | (32 * v132);
          if (v135 == 63)
            v135 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(a5[12] + 4 * v11), (_WORD *)(a5[9] + 2 * v11))+ 63;
          if (v26 >= v40)
            v12 = v135 + 1;
          else
            v12 = ~v135;
          goto LABEL_12;
        }
        v123 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v119 *= 2;
          *(_DWORD *)(a1 + 2744) = --v123;
          if (v123)
            goto LABEL_142;
          v126 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v126 + 1;
          v127 = *(unsigned int *)(a1 + 2704);
          if (v126 + 1 >= v127)
          {
            v128 = 65280;
            v129 = v126 + 2;
            *(_QWORD *)(a1 + 2720) = v129;
            if (v129 >= v127)
            {
LABEL_148:
              v124 = 255;
              goto LABEL_141;
            }
          }
          else
          {
            v128 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v126 + 1) << 8;
            v129 = v126 + 2;
            *(_QWORD *)(a1 + 2720) = v129;
            if (v129 >= v127)
              goto LABEL_148;
          }
          v124 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v129);
LABEL_141:
          v119 |= v128 | v124;
          v123 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_142:
          v125 = 2 * v117;
          v27 = v117 >= 0x20000001;
          v117 *= 2;
          if (v27)
            goto LABEL_150;
        }
      case 2u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v152 = 0;
        v153 = 0;
        v154 = (unsigned int *)(a1 + 2704);
        while (1)
        {
          v156 = a5[12];
          v157 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v154, *(_DWORD *)(v156 + v152), (_WORD *)(a5[3] + v153), (_WORD *)(a5[9] + v153));
          if (v157 >= 0)
            v158 = v157;
          else
            v158 = -v157;
          v159 = *(_DWORD *)(v156 + v152);
          v160 = v158 >> v159;
          if (v159)
            v161 = v160 == 0;
          else
            v161 = 0;
          if (v161)
          {
            v155 = -1;
          }
          else
          {
            if (v160 < 2)
              goto LABEL_183;
            v155 = 1;
          }
          *(_DWORD *)(v156 + v152) = v155 + v159;
LABEL_183:
          v10->i32[v152 / 4] = v157;
          v153 += 2;
          v152 += 4;
          if (2 * v8 == v153)
            goto LABEL_349;
        }
      case 3u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v136 = 0;
        v137 = *(_QWORD *)(a1 + 2664);
        while (1)
        {
          v139 = *(_DWORD *)(v137 + 4 * v136);
          if (v139 >= 1)
            break;
          v138 = 0;
LABEL_161:
          v10->i32[v136++] = v138;
          if (v136 == v8)
            goto LABEL_349;
        }
        v140 = 0;
        v138 = 0;
        v141 = *(_DWORD *)(a1 + 2732);
        v142 = *(_DWORD *)(a1 + 2736);
        while (v141 >= 0x40000001)
        {
          v143 = v141;
LABEL_165:
          v144 = (v143 >> 1) & 0x7FFF0000;
          v141 = v143 - v144;
          v145 = v142 >= v144;
          if (v142 < v144)
          {
            v141 = v144;
            v144 = 0;
          }
          v142 -= v144;
          *(_DWORD *)(a1 + 2732) = v141;
          *(_DWORD *)(a1 + 2736) = v142;
          v138 += v145 << v140++;
          if (v140 == v139)
            goto LABEL_161;
        }
        v146 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v142 *= 2;
          *(_DWORD *)(a1 + 2744) = --v146;
          if (v146)
            goto LABEL_172;
          v148 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v148 + 1;
          v149 = *(unsigned int *)(a1 + 2704);
          if (v148 + 1 >= v149)
          {
            v150 = 65280;
            v151 = v148 + 2;
            *(_QWORD *)(a1 + 2720) = v151;
            if (v151 >= v149)
            {
LABEL_178:
              v147 = 255;
              goto LABEL_171;
            }
          }
          else
          {
            v150 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v148 + 1) << 8;
            v151 = v148 + 2;
            *(_QWORD *)(a1 + 2720) = v151;
            if (v151 >= v149)
              goto LABEL_178;
          }
          v147 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v151);
LABEL_171:
          v142 |= v150 | v147;
          v146 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_172:
          v143 = 2 * v141;
          v27 = v141 >= 0x20000001;
          v141 *= 2;
          if (v27)
            goto LABEL_165;
        }
      case 4u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v162 = 0;
        v163 = v8;
        break;
      default:
        goto LABEL_349;
    }
    while (1)
    {
      v166 = *a5;
      v167 = *(unsigned __int16 *)(*a5 + 2 * v162);
      v168 = *(_DWORD *)(a1 + 2732);
      v169 = *(_DWORD *)(a1 + 2736);
      if (v168 < 0x40000001)
      {
        v170 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v169 *= 2;
          *(_DWORD *)(a1 + 2744) = --v170;
          if (v170)
            goto LABEL_205;
          v173 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v173 + 1;
          v174 = *(unsigned int *)(a1 + 2704);
          if (v173 + 1 >= v174)
          {
            v175 = 65280;
            v176 = v173 + 2;
            *(_QWORD *)(a1 + 2720) = v176;
            if (v176 >= v174)
            {
LABEL_211:
              v171 = 255;
              goto LABEL_204;
            }
          }
          else
          {
            v175 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v173 + 1) << 8;
            v176 = v173 + 2;
            *(_QWORD *)(a1 + 2720) = v176;
            if (v176 >= v174)
              goto LABEL_211;
          }
          v171 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v176);
LABEL_204:
          v169 |= v175 | v171;
          v170 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_205:
          v172 = 2 * v168;
          v27 = v168 >= 0x20000001;
          v168 *= 2;
          if (v27)
            goto LABEL_213;
        }
      }
      v172 = *(_DWORD *)(a1 + 2732);
LABEL_213:
      v165 = 0;
      v177 = (HIWORD(v172) * v167) & 0xFFFF0000;
      v178 = v169 < v177 ? 0 : (HIWORD(v172) * v167) & 0xFFFF0000;
      v179 = v169 - v178;
      v180 = v169 >= v177;
      v181 = (v167 >> 7) & 0x1FE | (v169 >= v177);
      v182 = v172 - v177;
      *(_WORD *)(v166 + 2 * v162) = *(_WORD *)(a1 + 2 * v181 + 2752) + v167;
      v183 = v180 ? v172 - v177 : (HIWORD(v172) * v167) & 0xFFFF0000;
      *(_DWORD *)(a1 + 2732) = v183;
      *(_DWORD *)(a1 + 2736) = v179;
      if (v180)
        break;
LABEL_200:
      v10->i32[v162++] = v165;
      if (v162 == v163)
        goto LABEL_349;
    }
    v184 = a5[3];
    v185 = *(unsigned __int16 *)(v184 + 2 * v162);
    if (v182 < 0x40000001)
    {
      v186 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v179 *= 2;
        *(_DWORD *)(a1 + 2744) = --v186;
        if (v186)
          goto LABEL_225;
        v189 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v189 + 1;
        v190 = *(unsigned int *)(a1 + 2704);
        if (v189 + 1 >= v190)
        {
          v191 = 65280;
          v192 = v189 + 2;
          *(_QWORD *)(a1 + 2720) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          v191 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v189 + 1) << 8;
          v192 = v189 + 2;
          *(_QWORD *)(a1 + 2720) = v192;
          if (v192 >= v190)
            goto LABEL_231;
        }
        v187 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v192);
LABEL_224:
        v179 |= v191 | v187;
        v186 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_225:
        v188 = 2 * v182;
        v27 = v182 >= 0x20000001;
        v182 *= 2;
        if (v27)
          goto LABEL_233;
      }
    }
    v188 = v172 - v177;
LABEL_233:
    v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    *(_WORD *)(v184 + 2 * v162) = *(_WORD *)(a1 + 2 * ((v185 >> 7) & 0x1FE | (v179 >= v193)) + 2752) + v185;
    if (v179 < v193)
      v194 = (HIWORD(v188) * v185) & 0xFFFF0000;
    else
      v194 = v188 - v193;
    if (v179 < v193)
      v195 = 0;
    else
      v195 = (HIWORD(v188) * v185) & 0xFFFF0000;
    v196 = v179 - v195;
    *(_DWORD *)(a1 + 2732) = v194;
    *(_DWORD *)(a1 + 2736) = v179 - v195;
    v197 = (_WORD *)(a5[6] + 2 * (int)((_DWORD)v162 << 6));
    v198 = (unsigned __int16)*v197;
    if (v194 < 0x40000001)
    {
      v199 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v196 *= 2;
        *(_DWORD *)(a1 + 2744) = --v199;
        if (v199)
          goto LABEL_243;
        v202 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v202 + 1;
        v203 = *(unsigned int *)(a1 + 2704);
        if (v202 + 1 >= v203)
        {
          v204 = 65280;
          v205 = v202 + 2;
          *(_QWORD *)(a1 + 2720) = v205;
          if (v205 >= v203)
          {
LABEL_249:
            v200 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          v204 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v202 + 1) << 8;
          v205 = v202 + 2;
          *(_QWORD *)(a1 + 2720) = v205;
          if (v205 >= v203)
            goto LABEL_249;
        }
        v200 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v205);
LABEL_242:
        v196 |= v204 | v200;
        v199 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_243:
        v201 = 2 * v194;
        v27 = v194 >= 0x20000001;
        v194 *= 2;
        if (v27)
          goto LABEL_251;
      }
    }
    v201 = v194;
LABEL_251:
    v206 = (HIWORD(v201) * v198) & 0xFFFF0000;
    v207 = v201 - v206;
    v208 = v196 >= v206;
    *v197 = *(_WORD *)(a1 + 2 * ((v198 >> 7) & 0x1FE | v208) + 2752) + v198;
    if (v196 >= v206)
    {
      v209 = v206;
    }
    else
    {
      v207 = v206;
      v209 = 0;
    }
    v210 = v196 - v209;
    *(_DWORD *)(a1 + 2732) = v207;
    *(_DWORD *)(a1 + 2736) = v210;
    v211 = (v208 & 0x7FFFFFFu) + 1;
    v212 = (unsigned __int16)v197[v211];
    if (v207 < 0x40000001)
    {
      v213 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v210 *= 2;
        *(_DWORD *)(a1 + 2744) = --v213;
        if (v213)
          goto LABEL_258;
        v216 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v216 + 1;
        v217 = *(unsigned int *)(a1 + 2704);
        if (v216 + 1 >= v217)
        {
          v218 = 65280;
          v219 = v216 + 2;
          *(_QWORD *)(a1 + 2720) = v219;
          if (v219 >= v217)
          {
LABEL_264:
            v214 = 255;
            goto LABEL_257;
          }
        }
        else
        {
          v218 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v216 + 1) << 8;
          v219 = v216 + 2;
          *(_QWORD *)(a1 + 2720) = v219;
          if (v219 >= v217)
            goto LABEL_264;
        }
        v214 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v219);
LABEL_257:
        v210 |= v218 | v214;
        v213 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_258:
        v215 = 2 * v207;
        v27 = v207 >= 0x20000001;
        v207 *= 2;
        if (v27)
          goto LABEL_266;
      }
    }
    v215 = v207;
LABEL_266:
    v220 = 32 * v208;
    v221 = (HIWORD(v215) * v212) & 0xFFFF0000;
    v222 = v210 >= v221;
    v197[v211] = *(_WORD *)(a1 + 2 * ((v212 >> 7) & 0x1FE | v222) + 2752) + v212;
    if (v210 < v221)
      v223 = (HIWORD(v215) * v212) & 0xFFFF0000;
    else
      v223 = v215 - v221;
    if (v210 < v221)
      v221 = 0;
    v224 = v210 - v221;
    *(_DWORD *)(a1 + 2732) = v223;
    *(_DWORD *)(a1 + 2736) = v224;
    v225 = v220 | (16 * v222);
    v226 = (v225 >> 4) + 3;
    v227 = (unsigned __int16)v197[v226];
    if (v223 < 0x40000001)
    {
      v228 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v224 *= 2;
        *(_DWORD *)(a1 + 2744) = --v228;
        if (v228)
          goto LABEL_275;
        v231 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v231 + 1;
        v232 = *(unsigned int *)(a1 + 2704);
        if (v231 + 1 >= v232)
        {
          v233 = 65280;
          v234 = v231 + 2;
          *(_QWORD *)(a1 + 2720) = v234;
          if (v234 >= v232)
          {
LABEL_281:
            v229 = 255;
            goto LABEL_274;
          }
        }
        else
        {
          v233 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v231 + 1) << 8;
          v234 = v231 + 2;
          *(_QWORD *)(a1 + 2720) = v234;
          if (v234 >= v232)
            goto LABEL_281;
        }
        v229 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v234);
LABEL_274:
        v224 |= v233 | v229;
        v228 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_275:
        v230 = 2 * v223;
        v27 = v223 >= 0x20000001;
        v223 *= 2;
        if (v27)
          goto LABEL_283;
      }
    }
    v230 = v223;
LABEL_283:
    v235 = (HIWORD(v230) * v227) & 0xFFFF0000;
    v236 = v224 >= v235;
    v197[v226] = *(_WORD *)(a1 + 2 * ((v227 >> 7) & 0x1FE | v236) + 2752) + v227;
    if (v224 < v235)
      v237 = (HIWORD(v230) * v227) & 0xFFFF0000;
    else
      v237 = v230 - v235;
    if (v224 < v235)
      v238 = 0;
    else
      v238 = (HIWORD(v230) * v227) & 0xFFFF0000;
    v239 = v224 - v238;
    *(_DWORD *)(a1 + 2732) = v237;
    *(_DWORD *)(a1 + 2736) = v239;
    v240 = v225 | (8 * v236);
    v241 = (v240 >> 3) + 7;
    v242 = (unsigned __int16)v197[v241];
    if (v237 < 0x40000001)
    {
      v243 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v239 *= 2;
        *(_DWORD *)(a1 + 2744) = --v243;
        if (v243)
          goto LABEL_293;
        v246 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v246 + 1;
        v247 = *(unsigned int *)(a1 + 2704);
        if (v246 + 1 >= v247)
        {
          v248 = 65280;
          v249 = v246 + 2;
          *(_QWORD *)(a1 + 2720) = v249;
          if (v249 >= v247)
          {
LABEL_299:
            v244 = 255;
            goto LABEL_292;
          }
        }
        else
        {
          v248 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v246 + 1) << 8;
          v249 = v246 + 2;
          *(_QWORD *)(a1 + 2720) = v249;
          if (v249 >= v247)
            goto LABEL_299;
        }
        v244 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v249);
LABEL_292:
        v239 |= v248 | v244;
        v243 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_293:
        v245 = 2 * v237;
        v27 = v237 >= 0x20000001;
        v237 *= 2;
        if (v27)
          goto LABEL_301;
      }
    }
    v245 = v237;
LABEL_301:
    v250 = (HIWORD(v245) * v242) & 0xFFFF0000;
    v251 = v239 >= v250;
    v197[v241] = *(_WORD *)(a1 + 2 * ((v242 >> 7) & 0x1FE | v251) + 2752) + v242;
    if (v239 < v250)
      v252 = (HIWORD(v245) * v242) & 0xFFFF0000;
    else
      v252 = v245 - v250;
    if (v239 < v250)
      v253 = 0;
    else
      v253 = (HIWORD(v245) * v242) & 0xFFFF0000;
    v254 = v239 - v253;
    *(_DWORD *)(a1 + 2732) = v252;
    *(_DWORD *)(a1 + 2736) = v254;
    v255 = v240 | (4 * v251);
    v256 = (v255 >> 2) + 15;
    v257 = (unsigned __int16)v197[v256];
    if (v252 < 0x40000001)
    {
      v258 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v254 *= 2;
        *(_DWORD *)(a1 + 2744) = --v258;
        if (v258)
          goto LABEL_311;
        v261 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v261 + 1;
        v262 = *(unsigned int *)(a1 + 2704);
        if (v261 + 1 >= v262)
        {
          v263 = 65280;
          v264 = v261 + 2;
          *(_QWORD *)(a1 + 2720) = v264;
          if (v264 >= v262)
          {
LABEL_317:
            v259 = 255;
            goto LABEL_310;
          }
        }
        else
        {
          v263 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v261 + 1) << 8;
          v264 = v261 + 2;
          *(_QWORD *)(a1 + 2720) = v264;
          if (v264 >= v262)
            goto LABEL_317;
        }
        v259 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v264);
LABEL_310:
        v254 |= v263 | v259;
        v258 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_311:
        v260 = 2 * v252;
        v27 = v252 >= 0x20000001;
        v252 *= 2;
        if (v27)
          goto LABEL_319;
      }
    }
    v260 = v252;
LABEL_319:
    v265 = (HIWORD(v260) * v257) & 0xFFFF0000;
    v266 = v254 >= v265;
    v197[v256] = *(_WORD *)(a1 + 2 * ((v257 >> 7) & 0x1FE | v266) + 2752) + v257;
    if (v254 < v265)
      v267 = (HIWORD(v260) * v257) & 0xFFFF0000;
    else
      v267 = v260 - v265;
    if (v254 < v265)
      v268 = 0;
    else
      v268 = (HIWORD(v260) * v257) & 0xFFFF0000;
    v269 = v254 - v268;
    *(_DWORD *)(a1 + 2732) = v267;
    *(_DWORD *)(a1 + 2736) = v269;
    v270 = v255 | (2 * v266);
    v271 = (v270 >> 1) + 31;
    v272 = (unsigned __int16)v197[v271];
    if (v267 < 0x40000001)
    {
      v273 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v269 *= 2;
        *(_DWORD *)(a1 + 2744) = --v273;
        if (v273)
          goto LABEL_329;
        v276 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v276 + 1;
        v277 = *(unsigned int *)(a1 + 2704);
        if (v276 + 1 >= v277)
        {
          v278 = 65280;
          v279 = v276 + 2;
          *(_QWORD *)(a1 + 2720) = v279;
          if (v279 >= v277)
          {
LABEL_335:
            v274 = 255;
            goto LABEL_328;
          }
        }
        else
        {
          v278 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v276 + 1) << 8;
          v279 = v276 + 2;
          *(_QWORD *)(a1 + 2720) = v279;
          if (v279 >= v277)
            goto LABEL_335;
        }
        v274 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v279);
LABEL_328:
        v269 |= v278 | v274;
        v273 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_329:
        v275 = 2 * v267;
        v27 = v267 >= 0x20000001;
        v267 *= 2;
        if (v27)
          goto LABEL_337;
      }
    }
    v275 = v267;
LABEL_337:
    v280 = (HIWORD(v275) * v272) & 0xFFFF0000;
    v281 = v275 - v280;
    v282 = v269 >= v280;
    v197[v271] = *(_WORD *)(a1 + 2 * ((v272 >> 7) & 0x1FE | v282) + 2752) + v272;
    if (v269 < v280)
      v283 = v280;
    else
      v283 = v281;
    if (v269 < v280)
      v284 = 0;
    else
      v284 = v280;
    *(_DWORD *)(a1 + 2732) = v283;
    *(_DWORD *)(a1 + 2736) = v269 - v284;
    v285 = v270 | v282;
    if ((v270 | v282) == 0x3F)
    {
      v286 = v8;
      v287 = a5[12];
      v285 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(v287 + 4 * v162), (_WORD *)(a5[9] + 2 * v162))+ 63;
      v288 = *(_DWORD *)(v287 + 4 * v162);
      v289 = v285 >> v288;
      if (v288 && !v289)
      {
        v164 = -1;
LABEL_196:
        *(_DWORD *)(v287 + 4 * v162) = v164 + v288;
        v8 = v286;
        v10 = v308;
        goto LABEL_197;
      }
      if (v289 >= 2)
      {
        v164 = 1;
        goto LABEL_196;
      }
      v8 = v286;
      v10 = v308;
    }
LABEL_197:
    if (v179 >= v193)
      v165 = v285 + 1;
    else
      v165 = ~v285;
    goto LABEL_200;
  }
LABEL_349:
  if ((int)v8 >= 1)
  {
    v290 = 0;
    if (v8 < 8)
    {
      v292 = a6;
      v291 = a2;
    }
    else
    {
      v292 = a6;
      v291 = a2;
      if ((unint64_t)((char *)a6 - (char *)a2) >= 0x20)
      {
        v290 = v8 & 0x7FFFFFF8;
        v293 = a2 + 1;
        v294 = v10 + 1;
        v295 = a6 + 1;
        v296 = v8 & 0xFFFFFFF8;
        do
        {
          v297 = vaddq_s32(*v294, *v293);
          v295[-1] = vaddq_s32(v294[-1], v293[-1]);
          *v295 = v297;
          v293 += 2;
          v294 += 2;
          v295 += 2;
          v296 -= 8;
        }
        while (v296);
        if (v290 == v8)
          goto LABEL_361;
      }
    }
    v298 = v8 - v290;
    v299 = v290;
    v300 = &v292->i32[v290];
    v301 = &v10->i32[v299];
    v302 = &v291->i32[v299];
    do
    {
      v304 = *v302++;
      v303 = v304;
      v305 = *v301++;
      *v300++ = v305 + v303;
      --v298;
    }
    while (v298);
LABEL_361:
    operator delete(v10);
    return;
  }
LABEL_356:
  if (v10)
    goto LABEL_361;
}

void sub_19F17D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ggl::RenderTarget::~RenderTarget(ggl::RenderTarget *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x7C7EC6C7C111B0D0)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v4 <= 0x1B8B241A8D896A1DuLL)
      v6 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1B8B241A8D896A1DLL)
      {
        if (v8[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1B8B241A8D896A1DLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0x12B1E486D3040E2CLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_117;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x88B81689974D86F3;
    if (a3 <= 0x88B81689974D86F3)
      v4 = 0x88B81689974D86F3 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x88B81689974D86F3;
  }
  v9 = *(_QWORD **)(a2 + 8 * v4);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x88B81689974D86F3)
      {
        if (v10[2] == 0x88B81689974D86F3)
          goto LABEL_23;
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x88B81689974D86F3)
      break;
    if (v11 >= a3)
      v11 %= a3;
    if (v11 != v4)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x88B81689974D86F3)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x88B81689974D86F3)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v14 = 0x12B1E486D3040E2CLL;
    if (a3 <= 0x12B1E486D3040E2CLL)
      v14 = 0x12B1E486D3040E2CLL % a3;
  }
  else
  {
    v14 = (a3 - 1) & 0x12B1E486D3040E2CLL;
  }
  v15 = *(_QWORD **)(a2 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x12B1E486D3040E2CLL)
      {
        if (v16[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_46;
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0x12B1E486D3040E2CLL)
    {
      if (v17 >= a3)
        v17 %= a3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x12B1E486D3040E2CLL)
  {
    v6 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v20 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v20 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v20 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v21 = *(_QWORD **)(a2 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0xFBD83FDA8879FF7ELL)
      {
        if (v22[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_69;
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v23 = v22[1];
    if (v23 != 0xFBD83FDA8879FF7ELL)
    {
      if (v23 >= a3)
        v23 %= a3;
      if (v23 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v8 = *(_QWORD *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v26 = 0xDFC317497CF9A4BFLL;
    if (a3 <= 0xDFC317497CF9A4BFLL)
      v26 = 0xDFC317497CF9A4BFLL % a3;
  }
  else
  {
    v26 = (a3 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v27 = *(_QWORD **)(a2 + 8 * v26);
  if (!v27)
    goto LABEL_94;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == 0xDFC317497CF9A4BFLL)
      {
        if (v28[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_92;
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v29 = v28[1];
    if (v29 != 0xDFC317497CF9A4BFLL)
    {
      if (v29 >= a3)
        v29 %= a3;
      if (v29 != v26)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v28[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_81:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v5 = *(_QWORD *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v32 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v32 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v32 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v33 = *(_QWORD **)(a2 + 8 * v32);
  if (!v33)
    goto LABEL_117;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == 0xE42D19AFCA302E68)
      {
        if (v34[2] == 0xE42D19AFCA302E68)
          goto LABEL_115;
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_117;
    }
  }
  while (1)
  {
    v35 = v34[1];
    if (v35 == 0xE42D19AFCA302E68)
      break;
    if (v35 >= a3)
      v35 %= a3;
    if (v35 != v32)
      goto LABEL_117;
LABEL_104:
    v34 = (_QWORD *)*v34;
    if (!v34)
      goto LABEL_117;
  }
  if (v34[2] != 0xE42D19AFCA302E68)
    goto LABEL_104;
LABEL_115:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0xE42D19AFCA302E68)
  {
LABEL_117:
    v38 = 0;
    goto LABEL_118;
  }
  v38 = *(_QWORD *)(v37 + 32);
LABEL_118:
  *result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_117;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v9 = *(_QWORD **)(a2 + 8 * v4);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v10[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x1AF456233693CD46)
      break;
    if (v11 >= a3)
      v11 %= a3;
    if (v11 != v4)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v14 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v14 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v14 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v15 = *(_QWORD **)(a2 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0xFBD83FDA8879FF7ELL)
      {
        if (v16[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_46;
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v16[1];
    if (v17 != 0xFBD83FDA8879FF7ELL)
    {
      if (v17 >= a3)
        v17 %= a3;
      if (v17 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v6 = *(_QWORD *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v20 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v20 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v20 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v21 = *(_QWORD **)(a2 + 8 * v20);
  if (!v21)
    goto LABEL_71;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == 0x1B8B241A8D896A1DLL)
      {
        if (v22[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_69;
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v23 = v22[1];
    if (v23 != 0x1B8B241A8D896A1DLL)
    {
      if (v23 >= a3)
        v23 %= a3;
      if (v23 != v20)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v22[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_58:
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v25 = v22[5];
  if (*(_QWORD *)(v25 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v8 = *(_QWORD *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v26 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v26 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v26 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v27 = *(_QWORD **)(a2 + 8 * v26);
  if (!v27)
    goto LABEL_94;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == 0xE42D19AFCA302E68)
      {
        if (v28[2] == 0xE42D19AFCA302E68)
          goto LABEL_92;
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v29 = v28[1];
    if (v29 != 0xE42D19AFCA302E68)
    {
      if (v29 >= a3)
        v29 %= a3;
      if (v29 != v26)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v28[2] != 0xE42D19AFCA302E68)
    {
LABEL_81:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v31 = v28[5];
  if (*(_QWORD *)(v31 + 8) == 0xE42D19AFCA302E68)
  {
    v5 = *(_QWORD *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v32 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4)
      v32 = 0xC97B9E962ADF4AD4 % a3;
  }
  else
  {
    v32 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  v33 = *(_QWORD **)(a2 + 8 * v32);
  if (!v33)
    goto LABEL_117;
  v34 = (_QWORD *)*v33;
  if (!v34)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == 0xC97B9E962ADF4AD4)
      {
        if (v34[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_115;
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      v34 = (_QWORD *)*v34;
      if (!v34)
        goto LABEL_117;
    }
  }
  while (1)
  {
    v35 = v34[1];
    if (v35 == 0xC97B9E962ADF4AD4)
      break;
    if (v35 >= a3)
      v35 %= a3;
    if (v35 != v32)
      goto LABEL_117;
LABEL_104:
    v34 = (_QWORD *)*v34;
    if (!v34)
      goto LABEL_117;
  }
  if (v34[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_104;
LABEL_115:
  v37 = v34[5];
  if (*(_QWORD *)(v37 + 8) != 0xC97B9E962ADF4AD4)
  {
LABEL_117:
    v38 = 0;
    goto LABEL_118;
  }
  v38 = *(_QWORD *)(v37 + 32);
LABEL_118:
  *result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_209;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v4 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v13 = *(_QWORD **)(a2 + 8 * v4);
  if (!v13)
    goto LABEL_25;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
          goto LABEL_23;
      }
      else if ((v16 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= a3)
      v15 %= a3;
    if (v15 != v4)
      goto LABEL_25;
LABEL_12:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_25;
  }
  if (v14[2] != 0x1AF456233693CD46)
    goto LABEL_12;
LABEL_23:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v9 = *(_QWORD *)(v17 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v18 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_48;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x8BD499FBD96FBB9ELL)
      {
        if (v20[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_48;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v21 = v20[1];
    if (v21 != 0x8BD499FBD96FBB9ELL)
    {
      if (v21 >= a3)
        v21 %= a3;
      if (v21 != v18)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v20[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v8 = *(_QWORD *)(v23 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v8 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v24 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL)
      v24 = 0x1B8B241A8D896A1DLL % a3;
  }
  else
  {
    v24 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v25 = *(_QWORD **)(a2 + 8 * v24);
  if (!v25)
    goto LABEL_71;
  v26 = (_QWORD *)*v25;
  if (!v26)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v28 = v26[1];
      if (v28 == 0x1B8B241A8D896A1DLL)
      {
        if (v26[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_69;
      }
      else if ((v28 & (a3 - 1)) != v24)
      {
        goto LABEL_71;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v27 = v26[1];
    if (v27 != 0x1B8B241A8D896A1DLL)
    {
      if (v27 >= a3)
        v27 %= a3;
      if (v27 != v24)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v26[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_58:
      v26 = (_QWORD *)*v26;
      if (!v26)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v29 = v26[5];
  if (*(_QWORD *)(v29 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v10 = *(_QWORD *)(v29 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v10 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v30 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v30 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v30 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v31 = *(_QWORD **)(a2 + 8 * v30);
  if (!v31)
    goto LABEL_94;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v32[1];
      if (v34 == 0xE42D19AFCA302E68)
      {
        if (v32[2] == 0xE42D19AFCA302E68)
          goto LABEL_92;
      }
      else if ((v34 & (a3 - 1)) != v30)
      {
        goto LABEL_94;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_94;
    }
  }
  while (2)
  {
    v33 = v32[1];
    if (v33 != 0xE42D19AFCA302E68)
    {
      if (v33 >= a3)
        v33 %= a3;
      if (v33 != v30)
        goto LABEL_94;
      goto LABEL_81;
    }
    if (v32[2] != 0xE42D19AFCA302E68)
    {
LABEL_81:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_94;
      continue;
    }
    break;
  }
LABEL_92:
  v35 = v32[5];
  if (*(_QWORD *)(v35 + 8) == 0xE42D19AFCA302E68)
  {
    v7 = *(_QWORD *)(v35 + 32);
    goto LABEL_95;
  }
LABEL_94:
  v7 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    v36 = 0xA60DDA5A69582425;
    if (a3 <= 0xA60DDA5A69582425)
      v36 = 0xA60DDA5A69582425 % a3;
  }
  else
  {
    v36 = (a3 - 1) & 0xA60DDA5A69582425;
  }
  v37 = *(_QWORD **)(a2 + 8 * v36);
  if (!v37)
    goto LABEL_117;
  v38 = (_QWORD *)*v37;
  if (!v38)
    goto LABEL_117;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v38[1];
      if (v40 == 0xA60DDA5A69582425)
      {
        if (v38[2] == 0xA60DDA5A69582425)
          goto LABEL_115;
      }
      else if ((v40 & (a3 - 1)) != v36)
      {
        goto LABEL_117;
      }
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_117;
    }
  }
  while (2)
  {
    v39 = v38[1];
    if (v39 != 0xA60DDA5A69582425)
    {
      if (v39 >= a3)
        v39 %= a3;
      if (v39 != v36)
        goto LABEL_117;
      goto LABEL_104;
    }
    if (v38[2] != 0xA60DDA5A69582425)
    {
LABEL_104:
      v38 = (_QWORD *)*v38;
      if (!v38)
        goto LABEL_117;
      continue;
    }
    break;
  }
LABEL_115:
  v41 = v38[5];
  if (*(_QWORD *)(v41 + 8) == 0xA60DDA5A69582425)
  {
    v11 = *(_QWORD *)(v41 + 32);
    goto LABEL_118;
  }
LABEL_117:
  v11 = 0;
LABEL_118:
  if (v3.u32[0] > 1uLL)
  {
    v42 = 0xFBD83FDA8879FF7ELL;
    if (a3 <= 0xFBD83FDA8879FF7ELL)
      v42 = 0xFBD83FDA8879FF7ELL % a3;
  }
  else
  {
    v42 = (a3 - 1) & 0xFBD83FDA8879FF7ELL;
  }
  v43 = *(_QWORD **)(a2 + 8 * v42);
  if (!v43)
    goto LABEL_140;
  v44 = (_QWORD *)*v43;
  if (!v44)
    goto LABEL_140;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v46 = v44[1];
      if (v46 == 0xFBD83FDA8879FF7ELL)
      {
        if (v44[2] == 0xFBD83FDA8879FF7ELL)
          goto LABEL_138;
      }
      else if ((v46 & (a3 - 1)) != v42)
      {
        goto LABEL_140;
      }
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_140;
    }
  }
  while (2)
  {
    v45 = v44[1];
    if (v45 != 0xFBD83FDA8879FF7ELL)
    {
      if (v45 >= a3)
        v45 %= a3;
      if (v45 != v42)
        goto LABEL_140;
      goto LABEL_127;
    }
    if (v44[2] != 0xFBD83FDA8879FF7ELL)
    {
LABEL_127:
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_140;
      continue;
    }
    break;
  }
LABEL_138:
  v47 = v44[5];
  if (*(_QWORD *)(v47 + 8) == 0xFBD83FDA8879FF7ELL)
  {
    v6 = *(_QWORD *)(v47 + 32);
    goto LABEL_141;
  }
LABEL_140:
  v6 = 0;
LABEL_141:
  if (v3.u32[0] > 1uLL)
  {
    v48 = 0x12B1E486D3040E2CLL;
    if (a3 <= 0x12B1E486D3040E2CLL)
      v48 = 0x12B1E486D3040E2CLL % a3;
  }
  else
  {
    v48 = (a3 - 1) & 0x12B1E486D3040E2CLL;
  }
  v49 = *(_QWORD **)(a2 + 8 * v48);
  if (!v49)
    goto LABEL_163;
  v50 = (_QWORD *)*v49;
  if (!v50)
    goto LABEL_163;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v52 = v50[1];
      if (v52 == 0x12B1E486D3040E2CLL)
      {
        if (v50[2] == 0x12B1E486D3040E2CLL)
          goto LABEL_161;
      }
      else if ((v52 & (a3 - 1)) != v48)
      {
        goto LABEL_163;
      }
      v50 = (_QWORD *)*v50;
      if (!v50)
        goto LABEL_163;
    }
  }
  while (2)
  {
    v51 = v50[1];
    if (v51 != 0x12B1E486D3040E2CLL)
    {
      if (v51 >= a3)
        v51 %= a3;
      if (v51 != v48)
        goto LABEL_163;
      goto LABEL_150;
    }
    if (v50[2] != 0x12B1E486D3040E2CLL)
    {
LABEL_150:
      v50 = (_QWORD *)*v50;
      if (!v50)
        goto LABEL_163;
      continue;
    }
    break;
  }
LABEL_161:
  v53 = v50[5];
  if (*(_QWORD *)(v53 + 8) == 0x12B1E486D3040E2CLL)
  {
    v12 = *(_QWORD *)(v53 + 32);
    goto LABEL_164;
  }
LABEL_163:
  v12 = 0;
LABEL_164:
  if (v3.u32[0] > 1uLL)
  {
    v54 = 0x99BED48DEFBBD82BLL;
    if (a3 <= 0x99BED48DEFBBD82BLL)
      v54 = 0x99BED48DEFBBD82BLL % a3;
  }
  else
  {
    v54 = (a3 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v55 = *(_QWORD **)(a2 + 8 * v54);
  if (!v55)
    goto LABEL_186;
  v56 = (_QWORD *)*v55;
  if (!v56)
    goto LABEL_186;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v58 = v56[1];
      if (v58 == 0x99BED48DEFBBD82BLL)
      {
        if (v56[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_184;
      }
      else if ((v58 & (a3 - 1)) != v54)
      {
        goto LABEL_186;
      }
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_186;
    }
  }
  while (2)
  {
    v57 = v56[1];
    if (v57 != 0x99BED48DEFBBD82BLL)
    {
      if (v57 >= a3)
        v57 %= a3;
      if (v57 != v54)
        goto LABEL_186;
      goto LABEL_173;
    }
    if (v56[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_173:
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_186;
      continue;
    }
    break;
  }
LABEL_184:
  v59 = v56[5];
  if (*(_QWORD *)(v59 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v5 = *(_QWORD *)(v59 + 32);
    goto LABEL_187;
  }
LABEL_186:
  v5 = 0;
LABEL_187:
  if (v3.u32[0] > 1uLL)
  {
    v60 = 0x932EE29454ABDC4ELL;
    if (a3 <= 0x932EE29454ABDC4ELL)
      v60 = 0x932EE29454ABDC4ELL % a3;
  }
  else
  {
    v60 = (a3 - 1) & 0x932EE29454ABDC4ELL;
  }
  v61 = *(_QWORD **)(a2 + 8 * v60);
  if (!v61)
    goto LABEL_209;
  v62 = (_QWORD *)*v61;
  if (!v62)
    goto LABEL_209;
  if (v3.u32[0] < 2uLL)
  {
    v63 = a3 - 1;
    while (1)
    {
      v65 = v62[1];
      if (v65 == 0x932EE29454ABDC4ELL)
      {
        if (v62[2] == 0x932EE29454ABDC4ELL)
          goto LABEL_207;
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_209;
      }
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_209;
    }
  }
  while (1)
  {
    v64 = v62[1];
    if (v64 == 0x932EE29454ABDC4ELL)
      break;
    if (v64 >= a3)
      v64 %= a3;
    if (v64 != v60)
      goto LABEL_209;
LABEL_196:
    v62 = (_QWORD *)*v62;
    if (!v62)
      goto LABEL_209;
  }
  if (v62[2] != 0x932EE29454ABDC4ELL)
    goto LABEL_196;
LABEL_207:
  v66 = v62[5];
  if (*(_QWORD *)(v66 + 8) != 0x932EE29454ABDC4ELL)
  {
LABEL_209:
    v67 = 0;
    goto LABEL_210;
  }
  v67 = *(_QWORD *)(v66 + 32);
LABEL_210:
  *result = v9;
  result[1] = v8;
  result[2] = v10;
  result[3] = v7;
  result[4] = v11;
  result[5] = v6;
  result[6] = v12;
  result[7] = v5;
  result[8] = v67;
  return result;
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xF0AA2DB42EB710AFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xA60DDA5A69582425)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::PendingRegistryLogic,md::PendingRegistryContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xA8300AA8F44B09FFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x9F2276D081C2CB20;
    if (*(_QWORD *)&v4 <= 0x9F2276D081C2CB20)
      v6 = 0x9F2276D081C2CB20 % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x9F2276D081C2CB20;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v8[2] == 0x9F2276D081C2CB20)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x9F2276D081C2CB20)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x9F2276D081C2CB20)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::NonTiledAssetLogic,md::NonTiledAssetContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x932EE29454ABDC4ELL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_QWORD *)(a3 + 8) == 0x90B6813830DCB581)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::RouteOverlayLogic,md::RouteOverlayContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x13043386C0978CC2)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::SceneQueryLogic,md::SceneQueryContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[6];

  if (*(_QWORD *)(a3 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::RegistryContext,md::NavigationContext,md::StyleLogicContext,md::SettingsContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::NavigationLogic,md::NavigationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_QWORD *)(a3 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::RouteRenderLayer::prepare(md::RouteRenderLayer *this, md::LayoutContext *a2)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  _QWORD *v47;
  unint64_t v48;
  int v49;
  void **v50;
  _QWORD *v51;
  _QWORD *v52;
  char v53;
  id v54;
  char isKindOfClass;
  id v56;
  uint64_t v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t j;
  unint64_t v74;
  id v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  __n128 v84;
  long double v85;
  double v86;
  long double v87;
  BOOL v88;
  __n128 *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  __n128 *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __n128 *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __n128 *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  __n128 *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  __n128 *v127;
  _QWORD *v128;
  unint64_t *v129;
  unint64_t v130;
  id v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  long double v140;
  double v141;
  long double v142;
  double v143;
  double v144;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  __int128 v184;
  void *v185;
  void *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _OWORD *v200;
  _QWORD *k;
  unint64_t *v202;
  _QWORD *v203;
  _QWORD *v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  NSObject *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  char v224;
  int v225;
  _QWORD *v226;
  void *v227;
  id v228;
  void *v229;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __n128 v235;
  _BYTE buf[18];
  __int16 v237;
  int v238;
  _BYTE v239[128];
  uint64_t v240;

  v240 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x13043386C0978CC2;
    if (*(_QWORD *)&v4 <= 0x13043386C0978CC2uLL)
      v6 = 0x13043386C0978CC2uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x13043386C0978CC2;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x13043386C0978CC2)
      {
        if (v8[2] == 0x13043386C0978CC2)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x13043386C0978CC2)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x13043386C0978CC2)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x13043386C0978CC2)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 104))(*((_QWORD *)this + 9), v13 + 104, 1);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 9) + 104))(*((_QWORD *)this + 9), v13, 0);
  v14 = (uint64_t *)*((_QWORD *)this + 8);
  v15 = *v14;
  v16 = v14[1];
  v17 = v16 - *v14;
  if (v16 != *v14)
  {
    do
    {
      v24 = *(std::__shared_weak_count **)(v16 - 8);
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v16 -= 16;
    }
    while (v16 != v15);
  }
  v14[1] = v15;
  v18 = *((_QWORD *)this + 8);
  v19 = *(_QWORD *)(v18 + 24);
  for (i = *(_QWORD *)(v18 + 32); i != v19; i -= 16)
  {
    v21 = *(std::__shared_weak_count **)(i - 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  *(_QWORD *)(v18 + 32) = v19;
  v27 = (_QWORD *)*((_QWORD *)a2 + 1);
  v28 = (int8x8_t)v27[1];
  v29 = (uint8x8_t)vcnt_s8(v28);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] > 1uLL)
  {
    v30 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v28 <= 0xE42D19AFCA302E68)
      v30 = 0xE42D19AFCA302E68 % *(_QWORD *)&v28;
  }
  else
  {
    v30 = (*(_QWORD *)&v28 - 1) & 0xE42D19AFCA302E68;
  }
  v31 = *(_QWORD **)(*v27 + 8 * v30);
  if (!v31)
    goto LABEL_65;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_65;
  if (v29.u32[0] < 2uLL)
  {
    while (1)
    {
      v34 = v32[1];
      if (v34 == 0xE42D19AFCA302E68)
      {
        if (v32[2] == 0xE42D19AFCA302E68)
          goto LABEL_60;
      }
      else if ((v34 & (*(_QWORD *)&v28 - 1)) != v30)
      {
        goto LABEL_65;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_65;
    }
  }
  while (1)
  {
    v33 = v32[1];
    if (v33 == 0xE42D19AFCA302E68)
      break;
    if (v33 >= *(_QWORD *)&v28)
      v33 %= *(_QWORD *)&v28;
    if (v33 != v30)
      goto LABEL_65;
LABEL_49:
    v32 = (_QWORD *)*v32;
    if (!v32)
      goto LABEL_65;
  }
  if (v32[2] != 0xE42D19AFCA302E68)
    goto LABEL_49;
LABEL_60:
  v35 = v32[5];
  if (*(_QWORD *)(v35 + 8) != 0xE42D19AFCA302E68 || (v36 = *(_QWORD *)(v35 + 32)) == 0)
  {
LABEL_65:
    v39 = 0;
    goto LABEL_66;
  }
  v37 = *(_DWORD *)(v36 + 88);
  v88 = v37 > 0xA;
  v38 = (0x418u >> v37) & 1;
  if (v88)
    v39 = 0;
  else
    v39 = v38;
LABEL_66:
  if (v29.u32[0] > 1uLL)
  {
    v40 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v28 <= 0x1AF456233693CD46uLL)
      v40 = 0x1AF456233693CD46uLL % *(_QWORD *)&v28;
  }
  else
  {
    v40 = (*(_QWORD *)&v28 - 1) & 0x1AF456233693CD46;
  }
  v41 = *(_QWORD **)(*v27 + 8 * v40);
  v220 = v17;
  if (!v41)
    goto LABEL_88;
  v42 = (_QWORD *)*v41;
  if (!v42)
    goto LABEL_88;
  if (v29.u32[0] < 2uLL)
  {
    while (1)
    {
      v44 = v42[1];
      if (v44 == 0x1AF456233693CD46)
      {
        if (v42[2] == 0x1AF456233693CD46)
          goto LABEL_86;
      }
      else if ((v44 & (*(_QWORD *)&v28 - 1)) != v40)
      {
        goto LABEL_88;
      }
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_88;
    }
  }
  while (2)
  {
    v43 = v42[1];
    if (v43 != 0x1AF456233693CD46)
    {
      if (v43 >= *(_QWORD *)&v28)
        v43 %= *(_QWORD *)&v28;
      if (v43 != v40)
        goto LABEL_88;
      goto LABEL_75;
    }
    if (v42[2] != 0x1AF456233693CD46)
    {
LABEL_75:
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_88;
      continue;
    }
    break;
  }
LABEL_86:
  v45 = v42[5];
  if (*(_QWORD *)(v45 + 8) == 0x1AF456233693CD46)
  {
    v46 = *(double **)(v45 + 32);
    goto LABEL_89;
  }
LABEL_88:
  v46 = 0;
LABEL_89:
  if (v29.u32[0] >= 2uLL)
  {
    v48 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v28 <= 0x8BD499FBD96FBB9ELL)
      v48 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v28;
    v47 = *(_QWORD **)(*v27 + 8 * v48);
    do
    {
      do
        v47 = (_QWORD *)*v47;
      while (v47[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v47[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v47 = *(_QWORD **)(*v27 + 8 * ((*(_QWORD *)&v28 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v47 = (_QWORD *)*v47;
      while (v47[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v47[2] != 0x8BD499FBD96FBB9ELL);
  }
  v49 = **(unsigned __int8 **)(v47[5] + 32);
  v50 = (void **)*((_QWORD *)this + 8);
  v51 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 112))(*((_QWORD *)this + 9));
  v52 = (_QWORD *)*v51;
  v226 = v51 + 1;
  if ((_QWORD *)*v51 == v51 + 1)
  {
    v223 = 0;
    goto LABEL_321;
  }
  v223 = 0;
  v221 = (uint64_t)(v50 + 3);
  if (v49)
    v53 = 1;
  else
    v53 = v39;
  v224 = v53;
  v225 = v49;
  while (2)
  {
    v54 = (id)v52[4];
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v56 = v54;
    v229 = v56;
    if ((isKindOfClass & 1) == 0)
    {
      md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)buf, *((VKPolylineOverlay **)this + 9), v56);
      v115 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v228 = v229;
        *(_BYTE *)(v115 + 620) = objc_msgSend(v228, "selected");
        *(_BYTE *)(v115 + 621) = objc_msgSend(v228, "hasFocus");
        *(_BYTE *)(v115 + 622) = objc_msgSend(v228, "skipped");
        *(_BYTE *)(v115 + 623) = objc_msgSend(v228, "showTraffic");
        objc_msgSend(v228, "boundingMapRegion");
        v116 = objc_claimAutoreleasedReturnValue();
        v117 = *(id *)v115;
        *(_QWORD *)v115 = v116;

        *(_BYTE *)(v115 + 624) = objc_msgSend(v228, "containsTransit");
        objc_msgSend(*(id *)(v115 + 160), "setSimplificationEpsilonPoints:", *(float *)(*((_QWORD *)this + 8) + 76));
        if (!v225 && *(_BYTE *)(v115 + 625))
        {
          v131 = *(id *)v115;
          objc_msgSend(v131, "northLat");
          v133 = v132;
          objc_msgSend(v131, "westLng");
          v135 = v134;
          objc_msgSend(v131, "southLat");
          v137 = v136;
          objc_msgSend(v131, "eastLng");
          v139 = v138;

          if (v139 * 0.00277777778 + 0.5 <= v46[366])
            goto LABEL_189;
          v140 = tan(v133 * 0.00872664626 + 0.785398163);
          v141 = log(v140);
          v142 = tan(v137 * 0.00872664626 + 0.785398163);
          v143 = log(v142);
          if (v135 * 0.00277777778 + 0.5 >= v46[368])
            goto LABEL_189;
          v144 = v143 * 0.159154943 + 0.5;
          if (v141 * 0.159154943 + 0.5 <= v46[367] || v144 >= v46[369])
          {
LABEL_189:
            ++HIDWORD(v223);
            v122 = *(std::__shared_weak_count **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              goto LABEL_293;
            goto LABEL_179;
          }
        }
        v118 = v50[1];
        if (v118 < v50[2])
        {
          *v118 = v115;
          v119 = *(_QWORD *)&buf[8];
          v118[1] = *(_QWORD *)&buf[8];
          if (v119)
          {
            v120 = (unint64_t *)(v119 + 8);
            do
              v121 = __ldxr(v120);
            while (__stxr(v121 + 1, v120));
          }
          v50[1] = v118 + 2;
          v122 = *(std::__shared_weak_count **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            goto LABEL_293;
          goto LABEL_179;
        }
        v50[1] = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v50, *(__n128 *)buf);
      }
      v122 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_293;
LABEL_179:
      v129 = (unint64_t *)&v122->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      goto LABEL_291;
    }
    v57 = *((_QWORD *)this + 9);
    v58 = v56;
    v59 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)(v57 + 136), (unint64_t)v58);
    if (!v59)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;

      goto LABEL_288;
    }
    v227 = v58;
    v61 = (_QWORD *)v59[3];
    v60 = v59[4];
    *(_QWORD *)buf = v61;
    *(_QWORD *)&buf[8] = v60;
    if (v60)
    {
      v62 = (unint64_t *)(v60 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }

    if (!v61)
      goto LABEL_288;
    objc_msgSend(v227, "boundingMapRegion");
    v64 = objc_claimAutoreleasedReturnValue();
    v65 = (void *)v61[11];
    v61[11] = v64;

    v68 = (_QWORD *)*v61;
    v66 = v61 + 1;
    v67 = v68;
    if (v68 != v66)
    {
      do
      {
        v103 = v67[4];
        v104 = (std::__shared_weak_count *)v67[5];
        v235.n128_u64[0] = v103;
        v235.n128_u64[1] = (unint64_t)v104;
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        v107 = *(id *)(v103 + 144);
        *(_BYTE *)(v103 + 620) = objc_msgSend(v107, "selected");
        *(_BYTE *)(v103 + 621) = objc_msgSend(v107, "hasFocus");
        *(_BYTE *)(v103 + 622) = objc_msgSend(v107, "skipped");
        *(_BYTE *)(v103 + 623) = objc_msgSend(v107, "showTraffic");
        objc_msgSend(v107, "boundingMapRegion");
        v108 = objc_claimAutoreleasedReturnValue();
        v109 = *(void **)v103;
        *(_QWORD *)v103 = v108;

        *(_BYTE *)(v103 + 624) = objc_msgSend(v107, "containsTransit");
        objc_msgSend(*(id *)(v103 + 160), "setSimplificationEpsilonPoints:", *(float *)(*((_QWORD *)this + 8) + 76));
        if (!v104)
          goto LABEL_156;
        v110 = (unint64_t *)&v104->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
          v112 = (_QWORD *)v67[1];
          if (!v112)
          {
            do
            {
LABEL_160:
              v113 = (_QWORD *)v67[2];
              v114 = *v113 == (_QWORD)v67;
              v67 = v113;
            }
            while (!v114);
            goto LABEL_148;
          }
        }
        else
        {
LABEL_156:
          v112 = (_QWORD *)v67[1];
          if (!v112)
            goto LABEL_160;
        }
        do
        {
          v113 = v112;
          v112 = (_QWORD *)*v112;
        }
        while (v112);
LABEL_148:
        v67 = v113;
      }
      while (v113 != v66);
    }
    if ((v224 & 1) == 0 && *(_BYTE *)(*(_QWORD *)buf + 136))
    {
      v233 = 0u;
      v234 = 0u;
      v231 = 0u;
      v232 = 0u;
      objc_msgSend(v227, "polylines");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v231, v239, 16);
      if (v70)
      {
        v71 = 0;
        v72 = *(_QWORD *)v232;
        do
        {
          for (j = 0; j != v70; ++j)
          {
            if (*(_QWORD *)v232 != v72)
              objc_enumerationMutation(v69);
            md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)&v235, *((VKPolylineOverlay **)this + 9), *(void **)(*((_QWORD *)&v231 + 1) + 8 * j));
            v74 = v235.n128_u64[0];
            v75 = *(id *)v235.n128_u64[0];
            objc_msgSend(v75, "northLat");
            v77 = v76;
            objc_msgSend(v75, "westLng");
            v79 = v78;
            objc_msgSend(v75, "southLat");
            v81 = v80;
            objc_msgSend(v75, "eastLng");
            v83 = v82;

            v84.n128_f64[0] = v83 * 0.00277777778 + 0.5;
            if (v84.n128_f64[0] > v46[366])
            {
              v85 = tan(v77 * 0.00872664626 + 0.785398163);
              v86 = log(v85) * 0.159154943 + 0.5;
              v87 = tan(v81 * 0.00872664626 + 0.785398163);
              v84.n128_f64[0] = log(v87) * 0.159154943 + 0.5;
              v88 = v79 * 0.00277777778 + 0.5 >= v46[368] || v86 <= v46[367];
              if (!v88 && v84.n128_f64[0] < v46[369])
              {
                v90 = (__n128 *)v50[1];
                if (v90 >= v50[2])
                {
                  v94 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v50, v235);
                }
                else
                {
                  v90->n128_u64[0] = v74;
                  v91 = v235.n128_u64[1];
                  v90->n128_u64[1] = v235.n128_u64[1];
                  if (v91)
                  {
                    v92 = (unint64_t *)(v91 + 8);
                    do
                      v93 = __ldxr(v92);
                    while (__stxr(v93 + 1, v92));
                  }
                  v94 = v90 + 1;
                }
                v50[1] = v94;
                v71 = 1;
              }
            }
            v95 = (std::__shared_weak_count *)v235.n128_u64[1];
            if (v235.n128_u64[1])
            {
              v96 = (unint64_t *)(v235.n128_u64[1] + 8);
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *, __n128))v95->__on_zero_shared)(v95, v84);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
          }
          v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v231, v239, 16, v84.n128_f64[0]);
        }
        while (v70);

        if ((v71 & 1) != 0)
        {
          v98 = (__n128 *)v50[4];
          if (v98 >= v50[5])
          {
            v102 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v221, *(__n128 *)buf);
          }
          else
          {
            v98->n128_u64[0] = *(_QWORD *)buf;
            v99 = *(_QWORD *)&buf[8];
            v98->n128_u64[1] = *(_QWORD *)&buf[8];
            if (v99)
            {
              v100 = (unint64_t *)(v99 + 8);
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
            }
            v102 = v98 + 1;
          }
          v50[4] = v102;
          goto LABEL_288;
        }
      }
      else
      {

      }
      LODWORD(v223) = v223 + 1;
      goto LABEL_288;
    }
    v123 = (__n128 *)v50[4];
    if (v123 >= v50[5])
    {
      v222 = *(_QWORD **)buf;
      v127 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v221, *(__n128 *)buf);
      v128 = v222;
    }
    else
    {
      v123->n128_u64[0] = *(_QWORD *)buf;
      v124 = *(_QWORD *)&buf[8];
      v123->n128_u64[1] = *(_QWORD *)&buf[8];
      if (v124)
      {
        v125 = (unint64_t *)(v124 + 8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      v127 = v123 + 1;
      v128 = *(_QWORD **)buf;
    }
    v50[4] = v127;
    v148 = (_QWORD *)*v128;
    v146 = v128 + 1;
    v147 = v148;
    if (v148 != v146)
    {
      v149 = 0;
      v150 = (unint64_t)v50[1];
      v151 = v147;
      do
      {
        v152 = v149;
        v153 = (_QWORD *)v151[1];
        if (v153)
        {
          do
          {
            v154 = v153;
            v153 = (_QWORD *)*v153;
          }
          while (v153);
        }
        else
        {
          do
          {
            v154 = (_QWORD *)v151[2];
            v114 = *v154 == (_QWORD)v151;
            v151 = v154;
          }
          while (!v114);
        }
        ++v149;
        v151 = v154;
      }
      while (v154 != v146);
      v155 = *v50;
      v156 = v150 - (_QWORD)*v50;
      v157 = (unint64_t)*v50 + (v156 & 0xFFFFFFFFFFFFFFF0);
      v158 = v50[2];
      if (v152 >= (uint64_t)&v158[-v150] >> 4)
      {
        v163 = v156 >> 4;
        v164 = (v156 >> 4) + v149;
        if (v164 >> 60)
          abort();
        v165 = v158 - (_BYTE *)v155;
        v166 = (v158 - (_BYTE *)v155) >> 3;
        if (v166 > v164)
          v164 = v166;
        if (v165 >= 0x7FFFFFFFFFFFFFF0)
          v167 = 0xFFFFFFFFFFFFFFFLL;
        else
          v167 = v164;
        if (v167)
        {
          if (v167 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v168 = (char *)operator new(16 * v167);
        }
        else
        {
          v168 = 0;
        }
        v174 = &v168[16 * v163];
        v175 = &v174[16 * v149];
        v176 = v174;
        do
        {
          *(_QWORD *)v176 = v147[4];
          v177 = v147[5];
          *((_QWORD *)v176 + 1) = v177;
          if (v177)
          {
            v178 = (unint64_t *)(v177 + 8);
            do
              v179 = __ldxr(v178);
            while (__stxr(v179 + 1, v178));
          }
          v180 = (_QWORD *)v147[1];
          if (v180)
          {
            do
            {
              v181 = v180;
              v180 = (_QWORD *)*v180;
            }
            while (v180);
          }
          else
          {
            do
            {
              v181 = (_QWORD *)v147[2];
              v114 = *v181 == (_QWORD)v147;
              v147 = v181;
            }
            while (!v114);
          }
          v176 += 16;
          v147 = v181;
        }
        while (v176 != v175);
        v182 = *v50;
        if (*v50 != (void *)v157)
        {
          v183 = (_QWORD *)v157;
          do
          {
            v184 = *((_OWORD *)v183 - 1);
            v183 -= 2;
            *((_OWORD *)v174 - 1) = v184;
            v174 -= 16;
            *v183 = 0;
            v183[1] = 0;
          }
          while (v183 != v182);
        }
        v185 = v50[1];
        if (v185 != (void *)v157)
        {
          do
          {
            *(_OWORD *)v175 = *(_OWORD *)v157;
            v175 += 16;
            *(_QWORD *)v157 = 0;
            *(_QWORD *)(v157 + 8) = 0;
            v157 += 16;
          }
          while ((void *)v157 != v185);
          v157 = (unint64_t)v50[1];
        }
        v186 = *v50;
        *v50 = v174;
        v50[1] = v175;
        v50[2] = &v168[16 * v167];
        while ((void *)v157 != v186)
        {
          v187 = *(std::__shared_weak_count **)(v157 - 8);
          if (v187)
          {
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          v157 -= 16;
        }
        if (v186)
          operator delete(v186);
      }
      else
      {
        v159 = v152 + 1;
        v160 = v147;
        do
        {
          v161 = (_QWORD *)v160[1];
          v162 = v160;
          if (v161)
          {
            do
            {
              v160 = v161;
              v161 = (_QWORD *)*v161;
            }
            while (v161);
          }
          else
          {
            do
            {
              v160 = (_QWORD *)v162[2];
              v114 = *v160 == (_QWORD)v162;
              v162 = v160;
            }
            while (!v114);
          }
          v88 = v159-- <= 1;
        }
        while (!v88);
        v169 = v150 - v157;
        v170 = (uint64_t)(v150 - v157) >> 4;
        if (v170 > v152)
        {
          v171 = v50[1];
          goto LABEL_284;
        }
        if (v169 <= -16)
        {
          v190 = v147;
          do
          {
            v192 = (_QWORD *)*v190;
            if (*v190)
            {
              do
              {
                v160 = v192;
                v192 = (_QWORD *)v192[1];
              }
              while (v192);
            }
            else
            {
              do
              {
                v160 = (_QWORD *)v190[2];
                v114 = *v160 == (_QWORD)v190;
                v190 = v160;
              }
              while (v114);
            }
            v190 = v160;
          }
          while (!__CFADD__(v170++, 1));
        }
        else
        {
          v160 = v147;
          if (v150 != v157)
          {
            v172 = v147;
            do
            {
              v173 = (_QWORD *)v172[1];
              if (v173)
              {
                do
                {
                  v160 = v173;
                  v173 = (_QWORD *)*v173;
                }
                while (v173);
              }
              else
              {
                do
                {
                  v160 = (_QWORD *)v172[2];
                  v114 = *v160 == (_QWORD)v172;
                  v172 = v160;
                }
                while (!v114);
              }
              v172 = v160;
              v88 = v170-- <= 1;
            }
            while (!v88);
          }
        }
        if (v160 == v146)
        {
          v171 = v50[1];
        }
        else
        {
          v193 = v160;
          v171 = v50[1];
          do
          {
            *v171 = v193[4];
            v194 = v193[5];
            v171[1] = v194;
            if (v194)
            {
              v195 = (unint64_t *)(v194 + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            v197 = (_QWORD *)v193[1];
            if (v197)
            {
              do
              {
                v198 = v197;
                v197 = (_QWORD *)*v197;
              }
              while (v197);
            }
            else
            {
              do
              {
                v198 = (_QWORD *)v193[2];
                v114 = *v198 == (_QWORD)v193;
                v193 = v198;
              }
              while (!v114);
            }
            v171 += 2;
            v193 = v198;
          }
          while (v198 != v146);
        }
        v50[1] = v171;
        if (v169 >= 1)
        {
LABEL_284:
          v199 = &v171[-2 * v149];
          v200 = v171;
          for (k = v199; (unint64_t)k < v150; k += 2)
          {
            *v200++ = *(_OWORD *)k;
            *k = 0;
            k[1] = 0;
          }
          v50[1] = v200;
          if (v171 != (_QWORD *)(v157 + 16 * v149))
          {
            do
            {
              v205 = *((_OWORD *)v199 - 1);
              v199 -= 2;
              *v199 = 0;
              v199[1] = 0;
              v206 = (std::__shared_weak_count *)*(v171 - 1);
              *((_OWORD *)v171 - 1) = v205;
              v171 -= 2;
              if (v206)
              {
                v207 = (unint64_t *)&v206->__shared_owners_;
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                }
              }
            }
            while (v199 != (_QWORD *)v157);
          }
          if (v160 == v147)
            goto LABEL_288;
          while (2)
          {
            v210 = v147[4];
            v209 = v147[5];
            if (v209)
            {
              v211 = (unint64_t *)(v209 + 8);
              do
                v212 = __ldxr(v211);
              while (__stxr(v212 + 1, v211));
            }
            v213 = *(std::__shared_weak_count **)(v157 + 8);
            *(_QWORD *)v157 = v210;
            *(_QWORD *)(v157 + 8) = v209;
            if (!v213)
              goto LABEL_313;
            v214 = (unint64_t *)&v213->__shared_owners_;
            do
              v215 = __ldaxr(v214);
            while (__stlxr(v215 - 1, v214));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
              v216 = (_QWORD *)v147[1];
              if (v216)
                goto LABEL_314;
            }
            else
            {
LABEL_313:
              v216 = (_QWORD *)v147[1];
              if (v216)
              {
                do
                {
LABEL_314:
                  v217 = v216;
                  v216 = (_QWORD *)*v216;
                }
                while (v216);
                goto LABEL_305;
              }
            }
            do
            {
              v217 = (_QWORD *)v147[2];
              v114 = *v217 == (_QWORD)v147;
              v147 = v217;
            }
            while (!v114);
LABEL_305:
            v157 += 16;
            v147 = v217;
            if (v217 == v160)
              break;
            continue;
          }
        }
      }
    }
LABEL_288:
    v122 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v202 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v130 = __ldaxr(v202);
      while (__stlxr(v130 - 1, v202));
LABEL_291:
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
LABEL_293:

    v203 = (_QWORD *)v52[1];
    if (v203)
    {
      do
      {
        v204 = v203;
        v203 = (_QWORD *)*v203;
      }
      while (v203);
    }
    else
    {
      do
      {
        v204 = (_QWORD *)v52[2];
        v114 = *v204 == (_QWORD)v52;
        v52 = v204;
      }
      while (!v114);
    }
    v52 = v204;
    if (v204 != v226)
      continue;
    break;
  }
LABEL_321:
  v218 = ((_BYTE *)v50[1] - (_BYTE *)*v50) >> 4;
  if (v220 >> 4 != v218)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v219 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v219, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v218;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v223;
      v237 = 1024;
      v238 = HIDWORD(v223);
      _os_log_impl(&dword_19F029000, v219, OS_LOG_TYPE_INFO, "RouteRenderLayer::prepare routelines to process %zu, group culled %d, culled %d", buf, 0x18u);
    }

  }
}

void sub_19F180154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  _Unwind_Resume(a1);
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<md::RouteOverlayContext>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v4 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0xE42D19AFCA302E68)
      {
        if (v9[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0xE42D19AFCA302E68)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0xE42D19AFCA302E68)
  {
    v7 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v13 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x8BD499FBD96FBB9ELL)
      {
        if (v15[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0x8BD499FBD96FBB9ELL)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v6 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v19 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v21[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x1AF456233693CD46)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x1AF456233693CD46)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0x13043386C0978CC2;
    if (a3 <= 0x13043386C0978CC2)
      v25 = 0x13043386C0978CC2 % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0x13043386C0978CC2;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x13043386C0978CC2)
      {
        if (v27[2] == 0x13043386C0978CC2)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0x13043386C0978CC2)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0x13043386C0978CC2)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0x13043386C0978CC2)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v7;
  result[1] = v6;
  result[2] = v5;
  result[3] = v31;
  return result;
}

void md::StandardRouteOverlayCache::update(VKPolylineOverlay *a1, _QWORD *a2, uint64_t a3)
{
  VKPolylineOverlay *v4;
  _QWORD *v5;
  _QWORD *v6;
  unique_ptr<md::TrafficSegmentsAlongRoute, std::default_delete<md::TrafficSegmentsAlongRoute>> *p_trafficSegments;
  _UNKNOWN **v8;
  id v9;
  id v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  _QWORD *v14;
  unique_ptr<md::TrafficSegmentsAlongRoute, std::default_delete<md::TrafficSegmentsAlongRoute>> *v15;
  _UNKNOWN **v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  char *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  VKRouteLine *routeRibbon;
  id *v30;
  std::__shared_weak_count *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  id v38;
  id v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  id *v52;
  uint64_t v53;
  id *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  id *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  GEOComposedRouteTraffic *i;
  id *v65;
  id *v66;
  id v67;
  void *v68;
  std::__shared_weak_count *v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  BOOL v74;
  _QWORD *v75;
  id v76;
  id v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  id *v90;
  uint64_t v91;
  id *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  id *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  char *v103;
  std::__shared_weak_count *v104;
  unint64_t v105;

  v4 = a1;
  v5 = a2 + 1;
  v6 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    p_trafficSegments = &a1[1]._trafficSegments;
    v8 = &off_1E426D000;
    while (1)
    {
      v9 = (id)v6[4];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          md::StandardRouteOverlayCache::getInternalOverlay((md::StandardRouteOverlayCache *)&v103, v4, v9);
          v21 = v103;
          v20 = v104;
          if (!v104)
            goto LABEL_20;
          p_shared_owners = (unint64_t *)&v104->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            if (v21)
            {
LABEL_21:
              v24 = v21[625];

              if (v24 == (_DWORD)a3)
                goto LABEL_30;
              goto LABEL_29;
            }
          }
          else
          {
LABEL_20:
            if (v21)
              goto LABEL_21;
          }
        }
        goto LABEL_28;
      }
      v10 = v9;
      v11 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(p_trafficSegments, (unint64_t)v10);
      if (!v11)
        break;
      v13 = v11[3];
      v12 = (std::__shared_weak_count *)v11[4];
      if (!v12)
        goto LABEL_24;
      v14 = v5;
      v15 = p_trafficSegments;
      v16 = v8;
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));

      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v8 = v16;
      p_trafficSegments = v15;
      v5 = v14;
      v4 = a1;
      if (v13)
      {
LABEL_25:
        v25 = *(unsigned __int8 *)(v13 + 136);

        if (v25 == (_DWORD)a3)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_28:

LABEL_29:
      (*((void (**)(VKPolylineOverlay *, id, uint64_t))v4->super.isa + 11))(v4, v9, a3);
LABEL_30:

      v26 = (_QWORD *)v6[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v6[2];
          v28 = *v27 == (_QWORD)v6;
          v6 = v27;
        }
        while (!v28);
      }
      v6 = v27;
      if (v27 == v5)
        goto LABEL_36;
    }
    v13 = 0;
LABEL_24:

    if (v13)
      goto LABEL_25;
    goto LABEL_28;
  }
LABEL_36:
  v103 = 0;
  v104 = 0;
  v105 = 0;
  routeRibbon = v4[1]._routeRibbon;
  if (routeRibbon)
  {
    v30 = 0;
    while (1)
    {
      if (*(unsigned __int8 *)(*((_QWORD *)routeRibbon + 3) + 625) != (_DWORD)a3)
        goto LABEL_40;
      v32 = (void *)*((_QWORD *)routeRibbon + 2);
      v33 = (_QWORD *)*v5;
      if (*v5)
      {
        v34 = v5;
        do
        {
          v35 = v33[4];
          v36 = v35 >= (unint64_t)v32;
          if (v35 >= (unint64_t)v32)
            v37 = v33;
          else
            v37 = v33 + 1;
          if (v36)
            v34 = v33;
          v33 = (_QWORD *)*v37;
        }
        while (*v37);
        if (v34 != v5 && (unint64_t)v32 >= v34[4])
          goto LABEL_40;
      }
      v38 = v32;
      v39 = v38;
      if ((unint64_t)v30 < v105)
      {
        *v30 = v38;
        v31 = (std::__shared_weak_count *)(v30 + 1);
      }
      else
      {
        v40 = v103;
        v41 = (char *)((char *)v30 - v103);
        v42 = ((char *)v30 - v103) >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          abort();
        v44 = v105 - (_QWORD)v103;
        if ((uint64_t)(v105 - (_QWORD)v103) >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        v46 = 0uLL;
        if (v45)
        {
          if (v45 >> 61)
LABEL_137:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v47 = (char *)operator new(8 * v45);
          v46 = 0uLL;
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[8 * v42];
        v49 = &v47[8 * v45];
        *(_QWORD *)v48 = v39;
        v31 = (std::__shared_weak_count *)(v48 + 8);
        v50 = (char *)((char *)v30 - v40);
        if (v30 != (id *)v40)
        {
          v51 = v50 - 8;
          if ((unint64_t)(v50 - 8) <= 0x137
            || (v56 = (unint64_t)v51 & 0xFFFFFFFFFFFFFFF8,
                (id *)((char *)v30 - ((unint64_t)v51 & 0xFFFFFFFFFFFFFFF8) - 8) > v30 - 1)
            || &v41[(_QWORD)(v47 - 8) - v56] > &v41[(_QWORD)(v47 - 8)]
            || (v57 = (unint64_t)v51 >> 3, &v30[-v57 - 1] < (id *)v48)
            && &v41[(_QWORD)(v47 - 8) - v56] < (char *)v30)
          {
            v52 = v30;
          }
          else
          {
            v58 = v57 + 1;
            v52 = &v30[-(v58 & 0x3FFFFFFFFFFFFFFCLL)];
            v59 = &v47[8 * v42 - 16];
            v60 = v30 - 4;
            v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v63 = *(_OWORD *)v60;
              v62 = *((_OWORD *)v60 + 1);
              *(_OWORD *)v60 = v46;
              *((_OWORD *)v60 + 1) = v46;
              v60 -= 4;
              *((_OWORD *)v59 - 1) = v63;
              *(_OWORD *)v59 = v62;
              v59 -= 32;
              v61 -= 4;
            }
            while (v61);
            v48 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
            if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_68:
              v30 = (id *)v103;
              v54 = (id *)&v104->__vftable;
              v103 = v48;
              v105 = (unint64_t)v49;
              if (v104 != (std::__shared_weak_count *)v30)
              {
                do
                {
                  v55 = *--v54;

                }
                while (v54 != v30);
              }
              if (!v30)
                goto LABEL_39;
LABEL_73:
              operator delete(v30);
              goto LABEL_39;
            }
          }
          do
          {
            v53 = (uint64_t)*--v52;
            *v52 = 0;
            *((_QWORD *)v48 - 1) = v53;
            v48 -= 8;
          }
          while (v52 != (id *)v40);
          goto LABEL_68;
        }
        v103 = &v47[8 * v42];
        v105 = (unint64_t)v49;
        if (v30)
          goto LABEL_73;
      }
LABEL_39:
      v104 = v31;
      v30 = (id *)&v31->__vftable;
LABEL_40:
      routeRibbon = *(VKRouteLine **)routeRibbon;
      if (!routeRibbon)
        goto LABEL_83;
    }
  }
  v30 = 0;
LABEL_83:
  for (i = v4[1]._traffic; i; i = *(GEOComposedRouteTraffic **)i)
  {
    if (*(unsigned __int8 *)(*((_QWORD *)i + 3) + 136) != (_DWORD)a3)
      continue;
    v70 = (void *)*((_QWORD *)i + 2);
    v71 = (_QWORD *)*v5;
    if (*v5)
    {
      v72 = v5;
      do
      {
        v73 = v71[4];
        v74 = v73 >= (unint64_t)v70;
        if (v73 >= (unint64_t)v70)
          v75 = v71;
        else
          v75 = v71 + 1;
        if (v74)
          v72 = v71;
        v71 = (_QWORD *)*v75;
      }
      while (*v75);
      if (v72 != v5 && (unint64_t)v70 >= v72[4])
        continue;
    }
    v76 = v70;
    v77 = v76;
    if ((unint64_t)v30 < v105)
    {
      *v30 = v76;
      v69 = (std::__shared_weak_count *)(v30 + 1);
    }
    else
    {
      v78 = v103;
      v79 = (char *)((char *)v30 - v103);
      v80 = ((char *)v30 - v103) >> 3;
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 61)
        abort();
      v82 = v105 - (_QWORD)v103;
      if ((uint64_t)(v105 - (_QWORD)v103) >> 2 > v81)
        v81 = v82 >> 2;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      v84 = 0uLL;
      if (v83)
      {
        if (v83 >> 61)
          goto LABEL_137;
        v85 = (char *)operator new(8 * v83);
        v84 = 0uLL;
      }
      else
      {
        v85 = 0;
      }
      v86 = &v85[8 * v80];
      v87 = &v85[8 * v83];
      *(_QWORD *)v86 = v77;
      v69 = (std::__shared_weak_count *)(v86 + 8);
      v88 = (char *)((char *)v30 - v78);
      if (v30 != (id *)v78)
      {
        v89 = v88 - 8;
        if ((unint64_t)(v88 - 8) <= 0x137
          || (v94 = (unint64_t)v89 & 0xFFFFFFFFFFFFFFF8,
              (id *)((char *)v30 - ((unint64_t)v89 & 0xFFFFFFFFFFFFFFF8) - 8) > v30 - 1)
          || &v79[(_QWORD)(v85 - 8) - v94] > &v79[(_QWORD)(v85 - 8)]
          || (v95 = (unint64_t)v89 >> 3, &v30[-v95 - 1] < (id *)v86)
          && &v79[(_QWORD)(v85 - 8) - v94] < (char *)v30)
        {
          v90 = v30;
        }
        else
        {
          v96 = v95 + 1;
          v90 = &v30[-(v96 & 0x3FFFFFFFFFFFFFFCLL)];
          v97 = &v85[8 * v80 - 16];
          v98 = v30 - 4;
          v99 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v101 = *(_OWORD *)v98;
            v100 = *((_OWORD *)v98 + 1);
            *(_OWORD *)v98 = v84;
            *((_OWORD *)v98 + 1) = v84;
            v98 -= 4;
            *((_OWORD *)v97 - 1) = v101;
            *(_OWORD *)v97 = v100;
            v97 -= 32;
            v99 -= 4;
          }
          while (v99);
          v86 -= 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_120:
            v30 = (id *)v103;
            v92 = (id *)&v104->__vftable;
            v103 = v86;
            v105 = (unint64_t)v87;
            if (v104 != (std::__shared_weak_count *)v30)
            {
              do
              {
                v93 = *--v92;

              }
              while (v92 != v30);
            }
            if (!v30)
              goto LABEL_91;
LABEL_125:
            operator delete(v30);
            goto LABEL_91;
          }
        }
        do
        {
          v91 = (uint64_t)*--v90;
          *v90 = 0;
          *((_QWORD *)v86 - 1) = v91;
          v86 -= 8;
        }
        while (v90 != (id *)v78);
        goto LABEL_120;
      }
      v103 = &v85[8 * v80];
      v105 = (unint64_t)v87;
      if (v30)
        goto LABEL_125;
    }
LABEL_91:
    v104 = v69;
    v30 = (id *)&v69->__vftable;
  }
  v65 = (id *)v103;
  if (v103 == (char *)v30)
  {
    if (v30)
LABEL_135:
      operator delete(v65);
  }
  else
  {
    v66 = (id *)v103;
    do
    {
      v67 = *v66;
      (*((void (**)(VKPolylineOverlay *, id, uint64_t))v4->super.isa + 12))(v4, v67, a3);

      ++v66;
    }
    while (v66 != v30);
    if (v65)
    {
      do
      {
        v68 = *--v30;

      }
      while (v30 != v65);
      goto LABEL_135;
    }
  }
}

void sub_19F180CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t md::StandardRouteOverlayCache::overlaysInView(md::StandardRouteOverlayCache *this)
{
  return (uint64_t)this + 48;
}

uint64_t md::Logic<md::LayerDataLogic,md::LayerDataLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x7851AF310F49C988)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  if (*(_QWORD *)(a3 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::DebugDrawLogic,md::DebugDrawContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0x3619066E3FB5F2CLL)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0xFFA06A69D924B0E8)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      v7[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      v7[1] = v6;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v7, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xC97B9E962ADF4AD4)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::RegistryLogic,md::RegistryContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xFBD83FDA8879FF7ELL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];

  if (*(_QWORD *)(a3 + 8) == 0xADE8F13E6C18D970)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>::buildRequiredTuple<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20)
      v4 = 0x9F2276D081C2CB20 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x9F2276D081C2CB20)
      {
        if (v9[2] == 0x9F2276D081C2CB20)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x9F2276D081C2CB20)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0x9F2276D081C2CB20)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x9F2276D081C2CB20)
  {
    v6 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v13 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x8BD499FBD96FBB9ELL)
      {
        if (v15[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0x8BD499FBD96FBB9ELL)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v7 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v19 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x1AF456233693CD46)
      {
        if (v21[2] == 0x1AF456233693CD46)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x1AF456233693CD46)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x1AF456233693CD46)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0xA8300AA8F44B09FFLL;
    if (a3 <= 0xA8300AA8F44B09FFLL)
      v25 = 0xA8300AA8F44B09FFLL % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0xA8300AA8F44B09FFLL;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0xA8300AA8F44B09FFLL)
      {
        if (v27[2] == 0xA8300AA8F44B09FFLL)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0xA8300AA8F44B09FFLL)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0xA8300AA8F44B09FFLL)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0xA8300AA8F44B09FFLL)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_94;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xADE8F13E6C18D970;
    if (a3 <= 0xADE8F13E6C18D970)
      v4 = 0xADE8F13E6C18D970 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0xADE8F13E6C18D970;
  }
  v8 = *(_QWORD **)(a2 + 8 * v4);
  if (!v8)
    goto LABEL_25;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0xADE8F13E6C18D970)
      {
        if (v9[2] == 0xADE8F13E6C18D970)
          goto LABEL_23;
      }
      else if ((v11 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0xADE8F13E6C18D970)
      break;
    if (v10 >= a3)
      v10 %= a3;
    if (v10 != v4)
      goto LABEL_25;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_25;
  }
  if (v9[2] != 0xADE8F13E6C18D970)
    goto LABEL_12;
LABEL_23:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0xADE8F13E6C18D970)
  {
    v6 = *(_QWORD *)(v12 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v13 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46)
      v13 = 0x1AF456233693CD46 % a3;
  }
  else
  {
    v13 = (a3 - 1) & 0x1AF456233693CD46;
  }
  v14 = *(_QWORD **)(a2 + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x1AF456233693CD46)
      {
        if (v15[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v17 & (a3 - 1)) != v13)
      {
        goto LABEL_48;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 0x1AF456233693CD46)
    {
      if (v16 >= a3)
        v16 %= a3;
      if (v16 != v13)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v15[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x1AF456233693CD46)
  {
    v7 = *(_QWORD *)(v18 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v7 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v19 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20)
      v19 = 0x9F2276D081C2CB20 % a3;
  }
  else
  {
    v19 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  v20 = *(_QWORD **)(a2 + 8 * v19);
  if (!v20)
    goto LABEL_71;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x9F2276D081C2CB20)
      {
        if (v21[2] == 0x9F2276D081C2CB20)
          goto LABEL_69;
      }
      else if ((v23 & (a3 - 1)) != v19)
      {
        goto LABEL_71;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 0x9F2276D081C2CB20)
    {
      if (v22 >= a3)
        v22 %= a3;
      if (v22 != v19)
        goto LABEL_71;
      goto LABEL_58;
    }
    if (v21[2] != 0x9F2276D081C2CB20)
    {
LABEL_58:
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_71;
      continue;
    }
    break;
  }
LABEL_69:
  v24 = v21[5];
  if (*(_QWORD *)(v24 + 8) == 0x9F2276D081C2CB20)
  {
    v5 = *(_QWORD *)(v24 + 32);
    goto LABEL_72;
  }
LABEL_71:
  v5 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    v25 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL)
      v25 = 0x8BD499FBD96FBB9ELL % a3;
  }
  else
  {
    v25 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v26 = *(_QWORD **)(a2 + 8 * v25);
  if (!v26)
    goto LABEL_94;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_94;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v29 = v27[1];
      if (v29 == 0x8BD499FBD96FBB9ELL)
      {
        if (v27[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_92;
      }
      else if ((v29 & (a3 - 1)) != v25)
      {
        goto LABEL_94;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_94;
    }
  }
  while (1)
  {
    v28 = v27[1];
    if (v28 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v28 >= a3)
      v28 %= a3;
    if (v28 != v25)
      goto LABEL_94;
LABEL_81:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_94;
  }
  if (v27[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_81;
LABEL_92:
  v30 = v27[5];
  if (*(_QWORD *)(v30 + 8) != 0x8BD499FBD96FBB9ELL)
  {
LABEL_94:
    v31 = 0;
    goto LABEL_95;
  }
  v31 = *(_QWORD *)(v30 + 32);
LABEL_95:
  *result = v6;
  result[1] = v7;
  result[2] = v5;
  result[3] = v31;
  return result;
}

